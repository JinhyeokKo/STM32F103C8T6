
oj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000782c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b98  08007940  08007940  00008940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084d8  080084d8  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080084d8  080084d8  000094d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084e0  080084e0  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084e0  080084e0  000094e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080084e4  080084e4  000094e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080084e8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f0  200001d4  080086bc  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008c4  080086bc  0000a8c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111b2  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029b9  00000000  00000000  0001b3af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  0001dd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e18  00000000  00000000  0001ef50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d9d  00000000  00000000  0001fd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014936  00000000  00000000  00038b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f776  00000000  00000000  0004d43b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dcbb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c2c  00000000  00000000  000dcbf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000039  00000000  00000000  000e2820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007924 	.word	0x08007924

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08007924 	.word	0x08007924

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_f2iz>:
 8000e0c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e10:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e14:	d30f      	bcc.n	8000e36 <__aeabi_f2iz+0x2a>
 8000e16:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e1a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e1e:	d90d      	bls.n	8000e3c <__aeabi_f2iz+0x30>
 8000e20:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e24:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e28:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000e2c:	fa23 f002 	lsr.w	r0, r3, r2
 8000e30:	bf18      	it	ne
 8000e32:	4240      	negne	r0, r0
 8000e34:	4770      	bx	lr
 8000e36:	f04f 0000 	mov.w	r0, #0
 8000e3a:	4770      	bx	lr
 8000e3c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e40:	d101      	bne.n	8000e46 <__aeabi_f2iz+0x3a>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d105      	bne.n	8000e52 <__aeabi_f2iz+0x46>
 8000e46:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000e4a:	bf08      	it	eq
 8000e4c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	4770      	bx	lr

08000e58 <isTemperSensorInit>:
{
	osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);	
}
#else
uint8_t isTemperSensorInit(void){
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
	return m_init;
 8000e5c:	4b02      	ldr	r3, [pc, #8]	@ (8000e68 <isTemperSensorInit+0x10>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	20000214 	.word	0x20000214

08000e6c <isBusy>:

uint8_t isBusy(void){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	return isBusyLine();
 8000e70:	f000 fab4 	bl	80013dc <isBusyLine>
 8000e74:	4603      	mov	r3, r0
	//return m_busy;
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <isConverting>:

uint8_t isConverting(void){
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
	return m_isConverting;
 8000e80:	4b02      	ldr	r3, [pc, #8]	@ (8000e8c <isConverting+0x10>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	20000216 	.word	0x20000216

08000e90 <Ds18b20_Init_Simple>:

bool	Ds18b20_Init_Simple(void){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	m_init = 0;
 8000e94:	4b1c      	ldr	r3, [pc, #112]	@ (8000f08 <Ds18b20_Init_Simple+0x78>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
	OneWire_Init(&OneWire,_DS18B20_GPIO ,_DS18B20_PIN);
 8000e9a:	2208      	movs	r2, #8
 8000e9c:	491b      	ldr	r1, [pc, #108]	@ (8000f0c <Ds18b20_Init_Simple+0x7c>)
 8000e9e:	481c      	ldr	r0, [pc, #112]	@ (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000ea0:	f000 fb0e 	bl	80014c0 <OneWire_Init>

	OneWire.ROM_NO[0] = 0x28;
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000ea6:	2228      	movs	r2, #40	@ 0x28
 8000ea8:	725a      	strb	r2, [r3, #9]
	OneWire.ROM_NO[1] = 0x14;
 8000eaa:	4b19      	ldr	r3, [pc, #100]	@ (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000eac:	2214      	movs	r2, #20
 8000eae:	729a      	strb	r2, [r3, #10]
	OneWire.ROM_NO[2] = 0x1e;
 8000eb0:	4b17      	ldr	r3, [pc, #92]	@ (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000eb2:	221e      	movs	r2, #30
 8000eb4:	72da      	strb	r2, [r3, #11]
	OneWire.ROM_NO[3] = 0x43;
 8000eb6:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000eb8:	2243      	movs	r2, #67	@ 0x43
 8000eba:	731a      	strb	r2, [r3, #12]
	OneWire.ROM_NO[4] = 0xd4;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	@ (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000ebe:	22d4      	movs	r2, #212	@ 0xd4
 8000ec0:	735a      	strb	r2, [r3, #13]
	OneWire.ROM_NO[5] = 0xe1;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	@ (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000ec4:	22e1      	movs	r2, #225	@ 0xe1
 8000ec6:	739a      	strb	r2, [r3, #14]
	OneWire.ROM_NO[6] = 0x3c;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000eca:	223c      	movs	r2, #60	@ 0x3c
 8000ecc:	73da      	strb	r2, [r3, #15]
	OneWire.ROM_NO[7] = 0x4;
 8000ece:	4b10      	ldr	r3, [pc, #64]	@ (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	741a      	strb	r2, [r3, #16]

	OneWire_GetFullROM(&OneWire, temperSensor.Address);
 8000ed4:	490f      	ldr	r1, [pc, #60]	@ (8000f14 <Ds18b20_Init_Simple+0x84>)
 8000ed6:	480e      	ldr	r0, [pc, #56]	@ (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000ed8:	f000 fc34 	bl	8001744 <OneWire_GetFullROM>

	Ds18b20Delay(50);
 8000edc:	2032      	movs	r0, #50	@ 0x32
 8000ede:	f001 fd6d 	bl	80029bc <HAL_Delay>
	DS18B20_SetResolution(&OneWire, temperSensor.Address, DS18B20_Resolution_12bits);
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	490b      	ldr	r1, [pc, #44]	@ (8000f14 <Ds18b20_Init_Simple+0x84>)
 8000ee6:	480a      	ldr	r0, [pc, #40]	@ (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000ee8:	f000 f96e 	bl	80011c8 <DS18B20_SetResolution>
	Ds18b20Delay(50);
 8000eec:	2032      	movs	r0, #50	@ 0x32
 8000eee:	f001 fd65 	bl	80029bc <HAL_Delay>
	DS18B20_DisableAlarmTemperature(&OneWire,  temperSensor.Address);
 8000ef2:	4908      	ldr	r1, [pc, #32]	@ (8000f14 <Ds18b20_Init_Simple+0x84>)
 8000ef4:	4806      	ldr	r0, [pc, #24]	@ (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000ef6:	f000 f9ff 	bl	80012f8 <DS18B20_DisableAlarmTemperature>

	m_init = 1;
 8000efa:	4b03      	ldr	r3, [pc, #12]	@ (8000f08 <Ds18b20_Init_Simple+0x78>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]

	return true;
 8000f00:	2301      	movs	r3, #1
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000214 	.word	0x20000214
 8000f0c:	40010800 	.word	0x40010800
 8000f10:	20000200 	.word	0x20000200
 8000f14:	200001f0 	.word	0x200001f0

08000f18 <StartConverting>:
	return true;
}
#endif
//###########################################################################################

void StartConverting(void){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	m_busy = 1;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <StartConverting+0x20>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]
	DS18B20_StartAll(&OneWire);
 8000f22:	4806      	ldr	r0, [pc, #24]	@ (8000f3c <StartConverting+0x24>)
 8000f24:	f000 f84a 	bl	8000fbc <DS18B20_StartAll>
	m_isConverting = 1;
 8000f28:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <StartConverting+0x28>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
	m_busy = 0;
 8000f2e:	4b02      	ldr	r3, [pc, #8]	@ (8000f38 <StartConverting+0x20>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000215 	.word	0x20000215
 8000f3c:	20000200 	.word	0x20000200
 8000f40:	20000216 	.word	0x20000216

08000f44 <checkConverting>:

void checkConverting(void){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	m_busy = 1;
 8000f48:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <checkConverting+0x2c>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
	m_isConverting = !DS18B20_AllDone(&OneWire);
 8000f4e:	4809      	ldr	r0, [pc, #36]	@ (8000f74 <checkConverting+0x30>)
 8000f50:	f000 fa2d 	bl	80013ae <DS18B20_AllDone>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	bf0c      	ite	eq
 8000f5a:	2301      	moveq	r3, #1
 8000f5c:	2300      	movne	r3, #0
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b05      	ldr	r3, [pc, #20]	@ (8000f78 <checkConverting+0x34>)
 8000f64:	701a      	strb	r2, [r3, #0]
	m_busy = 0;
 8000f66:	4b02      	ldr	r3, [pc, #8]	@ (8000f70 <checkConverting+0x2c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000215 	.word	0x20000215
 8000f74:	20000200 	.word	0x20000200
 8000f78:	20000216 	.word	0x20000216

08000f7c <getTemper>:

float getTemper(void){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	Ds18b20Delay(100);
 8000f80:	2064      	movs	r0, #100	@ 0x64
 8000f82:	f001 fd1b 	bl	80029bc <HAL_Delay>
	m_busy = 1;
 8000f86:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <getTemper+0x30>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	701a      	strb	r2, [r3, #0]
	temperSensor.DataIsValid = DS18B20_Read(&OneWire, temperSensor.Address, &temperSensor.Temperature);
 8000f8c:	4a08      	ldr	r2, [pc, #32]	@ (8000fb0 <getTemper+0x34>)
 8000f8e:	4909      	ldr	r1, [pc, #36]	@ (8000fb4 <getTemper+0x38>)
 8000f90:	4809      	ldr	r0, [pc, #36]	@ (8000fb8 <getTemper+0x3c>)
 8000f92:	f000 f827 	bl	8000fe4 <DS18B20_Read>
 8000f96:	4603      	mov	r3, r0
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <getTemper+0x38>)
 8000f9c:	731a      	strb	r2, [r3, #12]
	m_busy = 0;
 8000f9e:	4b03      	ldr	r3, [pc, #12]	@ (8000fac <getTemper+0x30>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
	return temperSensor.Temperature;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	@ (8000fb4 <getTemper+0x38>)
 8000fa6:	689b      	ldr	r3, [r3, #8]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000215 	.word	0x20000215
 8000fb0:	200001f8 	.word	0x200001f8
 8000fb4:	200001f0 	.word	0x200001f0
 8000fb8:	20000200 	.word	0x20000200

08000fbc <DS18B20_StartAll>:
	
	return 1;
}

void DS18B20_StartAll(OneWire_t* OneWire)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f000 faaf 	bl	8001528 <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8000fca:	21cc      	movs	r1, #204	@ 0xcc
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 fb5b 	bl	8001688 <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8000fd2:	2144      	movs	r1, #68	@ 0x44
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f000 fb57 	bl	8001688 <OneWire_WriteByte>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination) 
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b08b      	sub	sp, #44	@ 0x2c
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	float decimal;
	uint8_t i = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;
	
	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 8000ffa:	68b8      	ldr	r0, [r7, #8]
 8000ffc:	f000 f96c 	bl	80012d8 <DS18B20_Is>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <DS18B20_Read+0x26>
		return false;
 8001006:	2300      	movs	r3, #0
 8001008:	e0d8      	b.n	80011bc <DS18B20_Read+0x1d8>
	}
	
	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire)) 
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f000 fb0a 	bl	8001624 <OneWire_ReadBit>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <DS18B20_Read+0x36>
	{
		/* Conversion is not finished yet */
		return false; 
 8001016:	2300      	movs	r3, #0
 8001018:	e0d0      	b.n	80011bc <DS18B20_Read+0x1d8>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 800101a:	68f8      	ldr	r0, [r7, #12]
 800101c:	f000 fa84 	bl	8001528 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f000 fb6f 	bl	8001706 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8001028:	21be      	movs	r1, #190	@ 0xbe
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f000 fb2c 	bl	8001688 <OneWire_WriteByte>
	
	/* Get data */
	for (i = 0; i < 9; i++) 
 8001030:	2300      	movs	r3, #0
 8001032:	77fb      	strb	r3, [r7, #31]
 8001034:	e00d      	b.n	8001052 <DS18B20_Read+0x6e>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 8001036:	7ffc      	ldrb	r4, [r7, #31]
 8001038:	68f8      	ldr	r0, [r7, #12]
 800103a:	f000 fb43 	bl	80016c4 <OneWire_ReadByte>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8001046:	443b      	add	r3, r7
 8001048:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++) 
 800104c:	7ffb      	ldrb	r3, [r7, #31]
 800104e:	3301      	adds	r3, #1
 8001050:	77fb      	strb	r3, [r7, #31]
 8001052:	7ffb      	ldrb	r3, [r7, #31]
 8001054:	2b08      	cmp	r3, #8
 8001056:	d9ee      	bls.n	8001036 <DS18B20_Read+0x52>
	}
	
	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2108      	movs	r1, #8
 800105e:	4618      	mov	r0, r3
 8001060:	f000 fb8c 	bl	800177c <OneWire_CRC8>
 8001064:	4603      	mov	r3, r0
 8001066:	77bb      	strb	r3, [r7, #30]
	
	/* Check if CRC is ok */
	if (crc != data[8])
 8001068:	7f3b      	ldrb	r3, [r7, #28]
 800106a:	7fba      	ldrb	r2, [r7, #30]
 800106c:	429a      	cmp	r2, r3
 800106e:	d001      	beq.n	8001074 <DS18B20_Read+0x90>
		/* CRC invalid */
		return 0;
 8001070:	2300      	movs	r3, #0
 8001072:	e0a3      	b.n	80011bc <DS18B20_Read+0x1d8>

	
	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 8001074:	7d3b      	ldrb	r3, [r7, #20]
 8001076:	b21a      	sxth	r2, r3
 8001078:	7d7b      	ldrb	r3, [r7, #21]
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	b21b      	sxth	r3, r3
 800107e:	4313      	orrs	r3, r2
 8001080:	b21b      	sxth	r3, r3
 8001082:	84fb      	strh	r3, [r7, #38]	@ 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f000 fa4f 	bl	8001528 <OneWire_Reset>
	
	/* Check if temperature is negative */
	if (temperature & 0x8000)
 800108a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800108e:	2b00      	cmp	r3, #0
 8001090:	da05      	bge.n	800109e <DS18B20_Read+0xba>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 8001092:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001094:	425b      	negs	r3, r3
 8001096:	84fb      	strh	r3, [r7, #38]	@ 0x26
		minus = 1;
 8001098:	2301      	movs	r3, #1
 800109a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	}

	
	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 800109e:	7e3b      	ldrb	r3, [r7, #24]
 80010a0:	115b      	asrs	r3, r3, #5
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	3309      	adds	r3, #9
 80010ac:	777b      	strb	r3, [r7, #29]

	
	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 80010ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80010b0:	091b      	lsrs	r3, r3, #4
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 80010b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80010ba:	0a1b      	lsrs	r3, r3, #8
 80010bc:	b29b      	uxth	r3, r3
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	b25b      	sxtb	r3, r3
 80010c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80010c6:	b25a      	sxtb	r2, r3
 80010c8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80010cc:	4313      	orrs	r3, r2
 80010ce:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	
	/* Store decimal digits */
	switch (resolution) 
 80010d2:	7f7b      	ldrb	r3, [r7, #29]
 80010d4:	3b09      	subs	r3, #9
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d850      	bhi.n	800117c <DS18B20_Read+0x198>
 80010da:	a201      	add	r2, pc, #4	@ (adr r2, 80010e0 <DS18B20_Read+0xfc>)
 80010dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e0:	080010f1 	.word	0x080010f1
 80010e4:	08001115 	.word	0x08001115
 80010e8:	08001139 	.word	0x08001139
 80010ec:	0800115d 	.word	0x0800115d
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 80010f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80010f2:	08db      	lsrs	r3, r3, #3
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fe32 	bl	8000d64 <__aeabi_i2f>
 8001100:	4603      	mov	r3, r0
 8001102:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8001104:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001108:	6a38      	ldr	r0, [r7, #32]
 800110a:	f7ff f829 	bl	8000160 <__aeabi_fmul>
 800110e:	4603      	mov	r3, r0
 8001110:	623b      	str	r3, [r7, #32]
		break;
 8001112:	e038      	b.n	8001186 <DS18B20_Read+0x1a2>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 8001114:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001116:	089b      	lsrs	r3, r3, #2
 8001118:	b29b      	uxth	r3, r3
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fe20 	bl	8000d64 <__aeabi_i2f>
 8001124:	4603      	mov	r3, r0
 8001126:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8001128:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 800112c:	6a38      	ldr	r0, [r7, #32]
 800112e:	f7ff f817 	bl	8000160 <__aeabi_fmul>
 8001132:	4603      	mov	r3, r0
 8001134:	623b      	str	r3, [r7, #32]
		 break;
 8001136:	e026      	b.n	8001186 <DS18B20_Read+0x1a2>
		case 11: 
			decimal = (temperature >> 1) & 0x07;
 8001138:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800113a:	085b      	lsrs	r3, r3, #1
 800113c:	b29b      	uxth	r3, r3
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fe0e 	bl	8000d64 <__aeabi_i2f>
 8001148:	4603      	mov	r3, r0
 800114a:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 800114c:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8001150:	6a38      	ldr	r0, [r7, #32]
 8001152:	f7ff f805 	bl	8000160 <__aeabi_fmul>
 8001156:	4603      	mov	r3, r0
 8001158:	623b      	str	r3, [r7, #32]
		break;
 800115a:	e014      	b.n	8001186 <DS18B20_Read+0x1a2>
		case 12: 
			decimal = temperature & 0x0F;
 800115c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fdfe 	bl	8000d64 <__aeabi_i2f>
 8001168:	4603      	mov	r3, r0
 800116a:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 800116c:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8001170:	6a38      	ldr	r0, [r7, #32]
 8001172:	f7fe fff5 	bl	8000160 <__aeabi_fmul>
 8001176:	4603      	mov	r3, r0
 8001178:	623b      	str	r3, [r7, #32]
		 break;
 800117a:	e004      	b.n	8001186 <DS18B20_Read+0x1a2>
		default: 
			decimal = 0xFF;
 800117c:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <DS18B20_Read+0x1e0>)
 800117e:	623b      	str	r3, [r7, #32]
			digit = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	}
	
	/* Check for negative part */
	decimal = digit + decimal;
 8001186:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fdea 	bl	8000d64 <__aeabi_i2f>
 8001190:	4603      	mov	r3, r0
 8001192:	4619      	mov	r1, r3
 8001194:	6a38      	ldr	r0, [r7, #32]
 8001196:	f7ff fd31 	bl	8000bfc <__addsf3>
 800119a:	4603      	mov	r3, r0
 800119c:	623b      	str	r3, [r7, #32]
	if (minus) 
 800119e:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d006      	beq.n	80011b4 <DS18B20_Read+0x1d0>
		decimal = 0 - decimal;
 80011a6:	6a39      	ldr	r1, [r7, #32]
 80011a8:	f04f 0000 	mov.w	r0, #0
 80011ac:	f7ff fd24 	bl	8000bf8 <__aeabi_fsub>
 80011b0:	4603      	mov	r3, r0
 80011b2:	623b      	str	r3, [r7, #32]
	
	
	/* Set to pointer */
	*destination = decimal;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a3a      	ldr	r2, [r7, #32]
 80011b8:	601a      	str	r2, [r3, #0]
	
	/* Return 1, temperature valid */
	return true;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	372c      	adds	r7, #44	@ 0x2c
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd90      	pop	{r4, r7, pc}
 80011c4:	437f0000 	.word	0x437f0000

080011c8 <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution) 
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	4613      	mov	r3, r2
 80011d4:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM)) 
 80011d6:	68b8      	ldr	r0, [r7, #8]
 80011d8:	f000 f87e 	bl	80012d8 <DS18B20_Is>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <DS18B20_SetResolution+0x1e>
		return 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e074      	b.n	80012d0 <DS18B20_SetResolution+0x108>
	
	
	/* Reset line */
	OneWire_Reset(OneWire);
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	f000 f99e 	bl	8001528 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f000 fa89 	bl	8001706 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 80011f4:	21be      	movs	r1, #190	@ 0xbe
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f000 fa46 	bl	8001688 <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	f000 fa61 	bl	80016c4 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8001202:	68f8      	ldr	r0, [r7, #12]
 8001204:	f000 fa5e 	bl	80016c4 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f000 fa5b 	bl	80016c4 <OneWire_ReadByte>
 800120e:	4603      	mov	r3, r0
 8001210:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f000 fa56 	bl	80016c4 <OneWire_ReadByte>
 8001218:	4603      	mov	r3, r0
 800121a:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f000 fa51 	bl	80016c4 <OneWire_ReadByte>
 8001222:	4603      	mov	r3, r0
 8001224:	75fb      	strb	r3, [r7, #23]
	
	if (resolution == DS18B20_Resolution_9bits) 
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	2b09      	cmp	r3, #9
 800122a:	d108      	bne.n	800123e <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001232:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001234:	7dfb      	ldrb	r3, [r7, #23]
 8001236:	f023 0320 	bic.w	r3, r3, #32
 800123a:	75fb      	strb	r3, [r7, #23]
 800123c:	e022      	b.n	8001284 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits) 
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	2b0a      	cmp	r3, #10
 8001242:	d108      	bne.n	8001256 <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800124a:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 800124c:	7dfb      	ldrb	r3, [r7, #23]
 800124e:	f043 0320 	orr.w	r3, r3, #32
 8001252:	75fb      	strb	r3, [r7, #23]
 8001254:	e016      	b.n	8001284 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2b0b      	cmp	r3, #11
 800125a:	d108      	bne.n	800126e <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 800125c:	7dfb      	ldrb	r3, [r7, #23]
 800125e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001262:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001264:	7dfb      	ldrb	r3, [r7, #23]
 8001266:	f023 0320 	bic.w	r3, r3, #32
 800126a:	75fb      	strb	r3, [r7, #23]
 800126c:	e00a      	b.n	8001284 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	2b0c      	cmp	r3, #12
 8001272:	d107      	bne.n	8001284 <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001274:	7dfb      	ldrb	r3, [r7, #23]
 8001276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800127a:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 800127c:	7dfb      	ldrb	r3, [r7, #23]
 800127e:	f043 0320 	orr.w	r3, r3, #32
 8001282:	75fb      	strb	r3, [r7, #23]
	}
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f000 f94f 	bl	8001528 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 800128a:	68b9      	ldr	r1, [r7, #8]
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	f000 fa3a 	bl	8001706 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8001292:	214e      	movs	r1, #78	@ 0x4e
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	f000 f9f7 	bl	8001688 <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 800129a:	7dbb      	ldrb	r3, [r7, #22]
 800129c:	4619      	mov	r1, r3
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f000 f9f2 	bl	8001688 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 80012a4:	7d7b      	ldrb	r3, [r7, #21]
 80012a6:	4619      	mov	r1, r3
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f000 f9ed 	bl	8001688 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 80012ae:	7dfb      	ldrb	r3, [r7, #23]
 80012b0:	4619      	mov	r1, r3
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f000 f9e8 	bl	8001688 <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 80012b8:	68f8      	ldr	r0, [r7, #12]
 80012ba:	f000 f935 	bl	8001528 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80012be:	68b9      	ldr	r1, [r7, #8]
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f000 fa20 	bl	8001706 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 80012c6:	2148      	movs	r1, #72	@ 0x48
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f000 f9dd 	bl	8001688 <OneWire_WriteByte>
	
	return 1;
 80012ce:	2301      	movs	r3, #1
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM) 
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE) 
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b28      	cmp	r3, #40	@ 0x28
 80012e6:	d101      	bne.n	80012ec <DS18B20_Is+0x14>
		return 1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e000      	b.n	80012ee <DS18B20_Is+0x16>
	
	return 0;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <DS18B20_DisableAlarmTemperature>:
	
	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM) 
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM)) 
 8001302:	6838      	ldr	r0, [r7, #0]
 8001304:	f7ff ffe8 	bl	80012d8 <DS18B20_Is>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 800130e:	2300      	movs	r3, #0
 8001310:	e049      	b.n	80013a6 <DS18B20_DisableAlarmTemperature+0xae>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 f908 	bl	8001528 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001318:	6839      	ldr	r1, [r7, #0]
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 f9f3 	bl	8001706 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8001320:	21be      	movs	r1, #190	@ 0xbe
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 f9b0 	bl	8001688 <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 f9cb 	bl	80016c4 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f000 f9c8 	bl	80016c4 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 f9c5 	bl	80016c4 <OneWire_ReadByte>
 800133a:	4603      	mov	r3, r0
 800133c:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 f9c0 	bl	80016c4 <OneWire_ReadByte>
 8001344:	4603      	mov	r3, r0
 8001346:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 f9bb 	bl	80016c4 <OneWire_ReadByte>
 800134e:	4603      	mov	r3, r0
 8001350:	737b      	strb	r3, [r7, #13]
	
	th = 125;
 8001352:	237d      	movs	r3, #125	@ 0x7d
 8001354:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 8001356:	23c9      	movs	r3, #201	@ 0xc9
 8001358:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 f8e4 	bl	8001528 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001360:	6839      	ldr	r1, [r7, #0]
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f9cf 	bl	8001706 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8001368:	214e      	movs	r1, #78	@ 0x4e
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 f98c 	bl	8001688 <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	4619      	mov	r1, r3
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 f987 	bl	8001688 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 800137a:	7bbb      	ldrb	r3, [r7, #14]
 800137c:	4619      	mov	r1, r3
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 f982 	bl	8001688 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8001384:	7b7b      	ldrb	r3, [r7, #13]
 8001386:	4619      	mov	r1, r3
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 f97d 	bl	8001688 <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 f8ca 	bl	8001528 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001394:	6839      	ldr	r1, [r7, #0]
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 f9b5 	bl	8001706 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 800139c:	2148      	movs	r1, #72	@ 0x48
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 f972 	bl	8001688 <OneWire_WriteByte>
	
	return 1;
 80013a4:	2301      	movs	r3, #1
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 f934 	bl	8001624 <OneWire_ReadBit>
 80013bc:	4603      	mov	r3, r0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <getCurrentTemper>:

float getCurrentTemper(void){
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
	return temperSensor.Temperature;
 80013cc:	4b02      	ldr	r3, [pc, #8]	@ (80013d8 <getCurrentTemper+0x10>)
 80013ce:	689b      	ldr	r3, [r3, #8]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	200001f0 	.word	0x200001f0

080013dc <isBusyLine>:
 */
#include "onewire.h"
#include "ds18b20Config.h"
//#include "tim.h"
static uint8_t m_busy_line = 0;
uint8_t isBusyLine(){
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
	return m_busy_line;
 80013e0:	4b02      	ldr	r3, [pc, #8]	@ (80013ec <isBusyLine+0x10>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr
 80013ec:	20000217 	.word	0x20000217

080013f0 <ONEWIRE_DELAY>:

void ONEWIRE_DELAY(uint16_t time_us)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 80013fa:	4b08      	ldr	r3, [pc, #32]	@ (800141c <ONEWIRE_DELAY+0x2c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2200      	movs	r2, #0
 8001400:	625a      	str	r2, [r3, #36]	@ 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001402:	bf00      	nop
 8001404:	4b05      	ldr	r3, [pc, #20]	@ (800141c <ONEWIRE_DELAY+0x2c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	429a      	cmp	r2, r3
 800140e:	d9f9      	bls.n	8001404 <ONEWIRE_DELAY+0x14>
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	20000694 	.word	0x20000694

08001420 <ONEWIRE_LOW>:
void ONEWIRE_LOW(OneWire_t *gp)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	889b      	ldrh	r3, [r3, #4]
 800142c:	461a      	mov	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	0412      	lsls	r2, r2, #16
 8001434:	611a      	str	r2, [r3, #16]
}	
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	889a      	ldrh	r2, [r3, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	611a      	str	r2, [r3, #16]
}	
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
	gpinit.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 800146c:	2303      	movs	r3, #3
 800146e:	617b      	str	r3, [r7, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	889b      	ldrh	r3, [r3, #4]
 8001474:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f107 0208 	add.w	r2, r7, #8
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f001 fbcd 	bl	8002c20 <HAL_GPIO_Init>
}	
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8001496:	2311      	movs	r3, #17
 8001498:	60fb      	str	r3, [r7, #12]
	gpinit.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 800149e:	2303      	movs	r3, #3
 80014a0:	617b      	str	r3, [r7, #20]
	gpinit.Pin = gp->GPIO_Pin;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	889b      	ldrh	r3, [r3, #4]
 80014a6:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f107 0208 	add.w	r2, r7, #8
 80014b0:	4611      	mov	r1, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f001 fbb4 	bl	8002c20 <HAL_GPIO_Init>

}
 80014b8:	bf00      	nop
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) 
{	
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	4613      	mov	r3, r2
 80014cc:	80fb      	strh	r3, [r7, #6]
	m_busy_line = 0;
 80014ce:	4b14      	ldr	r3, [pc, #80]	@ (8001520 <OneWire_Init+0x60>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(&_DS18B20_TIMER);
 80014d4:	4813      	ldr	r0, [pc, #76]	@ (8001524 <OneWire_Init+0x64>)
 80014d6:	f002 ff81 	bl	80043dc <HAL_TIM_Base_Start>

	OneWireStruct->GPIOx = GPIOx;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	68ba      	ldr	r2, [r7, #8]
 80014de:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	88fa      	ldrh	r2, [r7, #6]
 80014e4:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f7ff ffd1 	bl	800148e <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f7ff ffa7 	bl	8001440 <ONEWIRE_HIGH>
	OneWireDelay(1000);
 80014f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014f6:	f001 fa61 	bl	80029bc <HAL_Delay>
	ONEWIRE_LOW(OneWireStruct);
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f7ff ff90 	bl	8001420 <ONEWIRE_LOW>
	OneWireDelay(1000);
 8001500:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001504:	f001 fa5a 	bl	80029bc <HAL_Delay>
	ONEWIRE_HIGH(OneWireStruct);
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f7ff ff99 	bl	8001440 <ONEWIRE_HIGH>
	OneWireDelay(2000);
 800150e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001512:	f001 fa53 	bl	80029bc <HAL_Delay>
}
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000217 	.word	0x20000217
 8001524:	20000694 	.word	0x20000694

08001528 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff ff75 	bl	8001420 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ffa9 	bl	800148e <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 800153c:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8001540:	f7ff ff56 	bl	80013f0 <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 8001544:	2014      	movs	r0, #20
 8001546:	f7ff ff53 	bl	80013f0 <ONEWIRE_DELAY>
	/* Release line and wait for 70us */
	m_busy_line = 1;
 800154a:	4b0f      	ldr	r3, [pc, #60]	@ (8001588 <OneWire_Reset+0x60>)
 800154c:	2201      	movs	r2, #1
 800154e:	701a      	strb	r2, [r3, #0]
	ONEWIRE_INPUT(OneWireStruct);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ff83 	bl	800145c <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 8001556:	2046      	movs	r0, #70	@ 0x46
 8001558:	f7ff ff4a 	bl	80013f0 <ONEWIRE_DELAY>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	889b      	ldrh	r3, [r3, #4]
 8001564:	4619      	mov	r1, r3
 8001566:	4610      	mov	r0, r2
 8001568:	f001 fcde 	bl	8002f28 <HAL_GPIO_ReadPin>
 800156c:	4603      	mov	r3, r0
 800156e:	73fb      	strb	r3, [r7, #15]
	m_busy_line = 0;
 8001570:	4b05      	ldr	r3, [pc, #20]	@ (8001588 <OneWire_Reset+0x60>)
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]

	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 8001576:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 800157a:	f7ff ff39 	bl	80013f0 <ONEWIRE_DELAY>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 800157e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000217 	.word	0x20000217

0800158c <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	70fb      	strb	r3, [r7, #3]
	if (bit) 
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d01e      	beq.n	80015dc <OneWire_WriteBit+0x50>
	{
		/* Set line low */
		m_busy_line = 1;
 800159e:	4b20      	ldr	r3, [pc, #128]	@ (8001620 <OneWire_WriteBit+0x94>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	701a      	strb	r2, [r3, #0]
		ONEWIRE_LOW(OneWireStruct);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff ff3b 	bl	8001420 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ff6f 	bl	800148e <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(10);
 80015b0:	200a      	movs	r0, #10
 80015b2:	f7ff ff1d 	bl	80013f0 <ONEWIRE_DELAY>
		
		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ff50 	bl	800145c <ONEWIRE_INPUT>
		m_busy_line = 0;
 80015bc:	4b18      	ldr	r3, [pc, #96]	@ (8001620 <OneWire_WriteBit+0x94>)
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
		
		/* Wait for 55 us and release the line */
		ONEWIRE_DELAY(55);
 80015c2:	2037      	movs	r0, #55	@ 0x37
 80015c4:	f7ff ff14 	bl	80013f0 <ONEWIRE_DELAY>
		m_busy_line = 1;
 80015c8:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <OneWire_WriteBit+0x94>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff ff44 	bl	800145c <ONEWIRE_INPUT>
		m_busy_line = 0;
 80015d4:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <OneWire_WriteBit+0x94>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
		ONEWIRE_DELAY(5);
		ONEWIRE_INPUT(OneWireStruct);
		m_busy_line = 0;
	}

}
 80015da:	e01d      	b.n	8001618 <OneWire_WriteBit+0x8c>
		m_busy_line = 1;
 80015dc:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <OneWire_WriteBit+0x94>)
 80015de:	2201      	movs	r2, #1
 80015e0:	701a      	strb	r2, [r3, #0]
		ONEWIRE_LOW(OneWireStruct);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff ff1c 	bl	8001420 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff ff50 	bl	800148e <ONEWIRE_OUTPUT>
		m_busy_line = 0;
 80015ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <OneWire_WriteBit+0x94>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
		ONEWIRE_DELAY(65);
 80015f4:	2041      	movs	r0, #65	@ 0x41
 80015f6:	f7ff fefb 	bl	80013f0 <ONEWIRE_DELAY>
		m_busy_line = 1;
 80015fa:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <OneWire_WriteBit+0x94>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ff2b 	bl	800145c <ONEWIRE_INPUT>
		ONEWIRE_DELAY(5);
 8001606:	2005      	movs	r0, #5
 8001608:	f7ff fef2 	bl	80013f0 <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff25 	bl	800145c <ONEWIRE_INPUT>
		m_busy_line = 0;
 8001612:	4b03      	ldr	r3, [pc, #12]	@ (8001620 <OneWire_WriteBit+0x94>)
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000217 	.word	0x20000217

08001624 <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct) 
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	73fb      	strb	r3, [r7, #15]
	
	/* Line low */
	m_busy_line = 1;
 8001630:	4b14      	ldr	r3, [pc, #80]	@ (8001684 <OneWire_ReadBit+0x60>)
 8001632:	2201      	movs	r2, #1
 8001634:	701a      	strb	r2, [r3, #0]
	ONEWIRE_LOW(OneWireStruct);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff fef2 	bl	8001420 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff26 	bl	800148e <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(2);
 8001642:	2002      	movs	r0, #2
 8001644:	f7ff fed4 	bl	80013f0 <ONEWIRE_DELAY>
	
	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff07 	bl	800145c <ONEWIRE_INPUT>
	ONEWIRE_DELAY(10);
 800164e:	200a      	movs	r0, #10
 8001650:	f7ff fece 	bl	80013f0 <ONEWIRE_DELAY>
	
	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	889b      	ldrh	r3, [r3, #4]
 800165c:	4619      	mov	r1, r3
 800165e:	4610      	mov	r0, r2
 8001660:	f001 fc62 	bl	8002f28 <HAL_GPIO_ReadPin>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <OneWire_ReadBit+0x4a>
		/* Bit is HIGH */
		bit = 1;
 800166a:	2301      	movs	r3, #1
 800166c:	73fb      	strb	r3, [r7, #15]
	}
	
	/* Wait 50us to complete 60us period */
	m_busy_line = 0;
 800166e:	4b05      	ldr	r3, [pc, #20]	@ (8001684 <OneWire_ReadBit+0x60>)
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
	ONEWIRE_DELAY(50);
 8001674:	2032      	movs	r0, #50	@ 0x32
 8001676:	f7ff febb 	bl	80013f0 <ONEWIRE_DELAY>
	
	/* Return bit value */
	return bit;
 800167a:	7bfb      	ldrb	r3, [r7, #15]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000217 	.word	0x20000217

08001688 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8001694:	2308      	movs	r3, #8
 8001696:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 8001698:	e00a      	b.n	80016b0 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 800169a:	78fb      	ldrb	r3, [r7, #3]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	4619      	mov	r1, r3
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ff71 	bl	800158c <OneWire_WriteBit>
		byte >>= 1;
 80016aa:	78fb      	ldrb	r3, [r7, #3]
 80016ac:	085b      	lsrs	r3, r3, #1
 80016ae:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	1e5a      	subs	r2, r3, #1
 80016b4:	73fa      	strb	r2, [r7, #15]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1ef      	bne.n	800169a <OneWire_WriteByte+0x12>
	}
}
 80016ba:	bf00      	nop
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 80016cc:	2308      	movs	r3, #8
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	2300      	movs	r3, #0
 80016d2:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 80016d4:	e00d      	b.n	80016f2 <OneWire_ReadByte+0x2e>
		byte >>= 1;
 80016d6:	7bbb      	ldrb	r3, [r7, #14]
 80016d8:	085b      	lsrs	r3, r3, #1
 80016da:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ffa1 	bl	8001624 <OneWire_ReadBit>
 80016e2:	4603      	mov	r3, r0
 80016e4:	01db      	lsls	r3, r3, #7
 80016e6:	b25a      	sxtb	r2, r3
 80016e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	b25b      	sxtb	r3, r3
 80016f0:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	1e5a      	subs	r2, r3, #1
 80016f6:	73fa      	strb	r2, [r7, #15]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1ec      	bne.n	80016d6 <OneWire_ReadByte+0x12>
	}
	
	return byte;
 80016fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 8001706:	b580      	push	{r7, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 8001710:	2155      	movs	r1, #85	@ 0x55
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff ffb8 	bl	8001688 <OneWire_WriteByte>
	
	for (i = 0; i < 8; i++) {
 8001718:	2300      	movs	r3, #0
 800171a:	73fb      	strb	r3, [r7, #15]
 800171c:	e00a      	b.n	8001734 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	4413      	add	r3, r2
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	4619      	mov	r1, r3
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ffad 	bl	8001688 <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	3301      	adds	r3, #1
 8001732:	73fb      	strb	r3, [r7, #15]
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	2b07      	cmp	r3, #7
 8001738:	d9f1      	bls.n	800171e <OneWire_SelectWithPointer+0x18>
	}	
}
 800173a:	bf00      	nop
 800173c:	bf00      	nop
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 800174e:	2300      	movs	r3, #0
 8001750:	73fb      	strb	r3, [r7, #15]
 8001752:	e00a      	b.n	800176a <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8001754:	7bfa      	ldrb	r2, [r7, #15]
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	6839      	ldr	r1, [r7, #0]
 800175a:	440b      	add	r3, r1
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	440a      	add	r2, r1
 8001760:	7a52      	ldrb	r2, [r2, #9]
 8001762:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	3301      	adds	r3, #1
 8001768:	73fb      	strb	r3, [r7, #15]
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	2b07      	cmp	r3, #7
 800176e:	d9f1      	bls.n	8001754 <OneWire_GetFullROM+0x10>
	}
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr

0800177c <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 8001788:	2300      	movs	r3, #0
 800178a:	73fb      	strb	r3, [r7, #15]
	
	while (len--) {
 800178c:	e022      	b.n	80017d4 <OneWire_CRC8+0x58>
		inbyte = *addr++;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	607a      	str	r2, [r7, #4]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8001798:	2308      	movs	r3, #8
 800179a:	737b      	strb	r3, [r7, #13]
 800179c:	e017      	b.n	80017ce <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 800179e:	7bfa      	ldrb	r2, [r7, #15]
 80017a0:	7bbb      	ldrb	r3, [r7, #14]
 80017a2:	4053      	eors	r3, r2
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	085b      	lsrs	r3, r3, #1
 80017b0:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 80017b2:	7b3b      	ldrb	r3, [r7, #12]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d004      	beq.n	80017c2 <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 80017be:	43db      	mvns	r3, r3
 80017c0:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 80017c2:	7bbb      	ldrb	r3, [r7, #14]
 80017c4:	085b      	lsrs	r3, r3, #1
 80017c6:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 80017c8:	7b7b      	ldrb	r3, [r7, #13]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	737b      	strb	r3, [r7, #13]
 80017ce:	7b7b      	ldrb	r3, [r7, #13]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1e4      	bne.n	800179e <OneWire_CRC8+0x22>
	while (len--) {
 80017d4:	78fb      	ldrb	r3, [r7, #3]
 80017d6:	1e5a      	subs	r2, r3, #1
 80017d8:	70fa      	strb	r2, [r7, #3]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1d7      	bne.n	800178e <OneWire_CRC8+0x12>
		}
	}
	
	/* Return calculated CRC */
	return crc;
 80017de:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr

080017ea <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60ba      	str	r2, [r7, #8]
 80017f2:	461a      	mov	r2, r3
 80017f4:	4603      	mov	r3, r0
 80017f6:	81fb      	strh	r3, [r7, #14]
 80017f8:	460b      	mov	r3, r1
 80017fa:	81bb      	strh	r3, [r7, #12]
 80017fc:	4613      	mov	r3, r2
 80017fe:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001800:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001804:	3307      	adds	r3, #7
 8001806:	2b00      	cmp	r3, #0
 8001808:	da00      	bge.n	800180c <SSD1306_DrawBitmap+0x22>
 800180a:	3307      	adds	r3, #7
 800180c:	10db      	asrs	r3, r3, #3
 800180e:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8001814:	2300      	movs	r3, #0
 8001816:	82bb      	strh	r3, [r7, #20]
 8001818:	e044      	b.n	80018a4 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 800181a:	2300      	movs	r3, #0
 800181c:	827b      	strh	r3, [r7, #18]
 800181e:	e02f      	b.n	8001880 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8001820:	8a7b      	ldrh	r3, [r7, #18]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 800182a:	7dfb      	ldrb	r3, [r7, #23]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	75fb      	strb	r3, [r7, #23]
 8001830:	e012      	b.n	8001858 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001832:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001836:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800183a:	fb03 f202 	mul.w	r2, r3, r2
 800183e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001842:	2b00      	cmp	r3, #0
 8001844:	da00      	bge.n	8001848 <SSD1306_DrawBitmap+0x5e>
 8001846:	3307      	adds	r3, #7
 8001848:	10db      	asrs	r3, r3, #3
 800184a:	b21b      	sxth	r3, r3
 800184c:	4413      	add	r3, r2
 800184e:	461a      	mov	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	4413      	add	r3, r2
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001858:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800185c:	2b00      	cmp	r3, #0
 800185e:	da09      	bge.n	8001874 <SSD1306_DrawBitmap+0x8a>
 8001860:	89fa      	ldrh	r2, [r7, #14]
 8001862:	8a7b      	ldrh	r3, [r7, #18]
 8001864:	4413      	add	r3, r2
 8001866:	b29b      	uxth	r3, r3
 8001868:	89b9      	ldrh	r1, [r7, #12]
 800186a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	4618      	mov	r0, r3
 8001870:	f000 f92e 	bl	8001ad0 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001874:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001878:	b29b      	uxth	r3, r3
 800187a:	3301      	adds	r3, #1
 800187c:	b29b      	uxth	r3, r3
 800187e:	827b      	strh	r3, [r7, #18]
 8001880:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001884:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001888:	429a      	cmp	r2, r3
 800188a:	dbc9      	blt.n	8001820 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 800188c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001890:	b29b      	uxth	r3, r3
 8001892:	3301      	adds	r3, #1
 8001894:	b29b      	uxth	r3, r3
 8001896:	82bb      	strh	r3, [r7, #20]
 8001898:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800189c:	b29b      	uxth	r3, r3
 800189e:	3301      	adds	r3, #1
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	81bb      	strh	r3, [r7, #12]
 80018a4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80018a8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	dbb4      	blt.n	800181a <SSD1306_DrawBitmap+0x30>
        }
    }
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80018c2:	f000 f96d 	bl	8001ba0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&H_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80018c6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80018ca:	2201      	movs	r2, #1
 80018cc:	2178      	movs	r1, #120	@ 0x78
 80018ce:	485b      	ldr	r0, [pc, #364]	@ (8001a3c <SSD1306_Init+0x180>)
 80018d0:	f001 fd9c 	bl	800340c <HAL_I2C_IsDeviceReady>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	e0a9      	b.n	8001a32 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80018de:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80018e2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018e4:	e002      	b.n	80018ec <SSD1306_Init+0x30>
		p--;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3b01      	subs	r3, #1
 80018ea:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f9      	bne.n	80018e6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80018f2:	22ae      	movs	r2, #174	@ 0xae
 80018f4:	2100      	movs	r1, #0
 80018f6:	2078      	movs	r0, #120	@ 0x78
 80018f8:	f000 f9cc 	bl	8001c94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80018fc:	2220      	movs	r2, #32
 80018fe:	2100      	movs	r1, #0
 8001900:	2078      	movs	r0, #120	@ 0x78
 8001902:	f000 f9c7 	bl	8001c94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001906:	2210      	movs	r2, #16
 8001908:	2100      	movs	r1, #0
 800190a:	2078      	movs	r0, #120	@ 0x78
 800190c:	f000 f9c2 	bl	8001c94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001910:	22b0      	movs	r2, #176	@ 0xb0
 8001912:	2100      	movs	r1, #0
 8001914:	2078      	movs	r0, #120	@ 0x78
 8001916:	f000 f9bd 	bl	8001c94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800191a:	22c8      	movs	r2, #200	@ 0xc8
 800191c:	2100      	movs	r1, #0
 800191e:	2078      	movs	r0, #120	@ 0x78
 8001920:	f000 f9b8 	bl	8001c94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001924:	2200      	movs	r2, #0
 8001926:	2100      	movs	r1, #0
 8001928:	2078      	movs	r0, #120	@ 0x78
 800192a:	f000 f9b3 	bl	8001c94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800192e:	2210      	movs	r2, #16
 8001930:	2100      	movs	r1, #0
 8001932:	2078      	movs	r0, #120	@ 0x78
 8001934:	f000 f9ae 	bl	8001c94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001938:	2240      	movs	r2, #64	@ 0x40
 800193a:	2100      	movs	r1, #0
 800193c:	2078      	movs	r0, #120	@ 0x78
 800193e:	f000 f9a9 	bl	8001c94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001942:	2281      	movs	r2, #129	@ 0x81
 8001944:	2100      	movs	r1, #0
 8001946:	2078      	movs	r0, #120	@ 0x78
 8001948:	f000 f9a4 	bl	8001c94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800194c:	22ff      	movs	r2, #255	@ 0xff
 800194e:	2100      	movs	r1, #0
 8001950:	2078      	movs	r0, #120	@ 0x78
 8001952:	f000 f99f 	bl	8001c94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001956:	22a1      	movs	r2, #161	@ 0xa1
 8001958:	2100      	movs	r1, #0
 800195a:	2078      	movs	r0, #120	@ 0x78
 800195c:	f000 f99a 	bl	8001c94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001960:	22a6      	movs	r2, #166	@ 0xa6
 8001962:	2100      	movs	r1, #0
 8001964:	2078      	movs	r0, #120	@ 0x78
 8001966:	f000 f995 	bl	8001c94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800196a:	22a8      	movs	r2, #168	@ 0xa8
 800196c:	2100      	movs	r1, #0
 800196e:	2078      	movs	r0, #120	@ 0x78
 8001970:	f000 f990 	bl	8001c94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001974:	223f      	movs	r2, #63	@ 0x3f
 8001976:	2100      	movs	r1, #0
 8001978:	2078      	movs	r0, #120	@ 0x78
 800197a:	f000 f98b 	bl	8001c94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800197e:	22a4      	movs	r2, #164	@ 0xa4
 8001980:	2100      	movs	r1, #0
 8001982:	2078      	movs	r0, #120	@ 0x78
 8001984:	f000 f986 	bl	8001c94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001988:	22d3      	movs	r2, #211	@ 0xd3
 800198a:	2100      	movs	r1, #0
 800198c:	2078      	movs	r0, #120	@ 0x78
 800198e:	f000 f981 	bl	8001c94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	2078      	movs	r0, #120	@ 0x78
 8001998:	f000 f97c 	bl	8001c94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800199c:	22d5      	movs	r2, #213	@ 0xd5
 800199e:	2100      	movs	r1, #0
 80019a0:	2078      	movs	r0, #120	@ 0x78
 80019a2:	f000 f977 	bl	8001c94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80019a6:	22f0      	movs	r2, #240	@ 0xf0
 80019a8:	2100      	movs	r1, #0
 80019aa:	2078      	movs	r0, #120	@ 0x78
 80019ac:	f000 f972 	bl	8001c94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80019b0:	22d9      	movs	r2, #217	@ 0xd9
 80019b2:	2100      	movs	r1, #0
 80019b4:	2078      	movs	r0, #120	@ 0x78
 80019b6:	f000 f96d 	bl	8001c94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80019ba:	2222      	movs	r2, #34	@ 0x22
 80019bc:	2100      	movs	r1, #0
 80019be:	2078      	movs	r0, #120	@ 0x78
 80019c0:	f000 f968 	bl	8001c94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80019c4:	22da      	movs	r2, #218	@ 0xda
 80019c6:	2100      	movs	r1, #0
 80019c8:	2078      	movs	r0, #120	@ 0x78
 80019ca:	f000 f963 	bl	8001c94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80019ce:	2212      	movs	r2, #18
 80019d0:	2100      	movs	r1, #0
 80019d2:	2078      	movs	r0, #120	@ 0x78
 80019d4:	f000 f95e 	bl	8001c94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80019d8:	22db      	movs	r2, #219	@ 0xdb
 80019da:	2100      	movs	r1, #0
 80019dc:	2078      	movs	r0, #120	@ 0x78
 80019de:	f000 f959 	bl	8001c94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80019e2:	2220      	movs	r2, #32
 80019e4:	2100      	movs	r1, #0
 80019e6:	2078      	movs	r0, #120	@ 0x78
 80019e8:	f000 f954 	bl	8001c94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80019ec:	228d      	movs	r2, #141	@ 0x8d
 80019ee:	2100      	movs	r1, #0
 80019f0:	2078      	movs	r0, #120	@ 0x78
 80019f2:	f000 f94f 	bl	8001c94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80019f6:	2214      	movs	r2, #20
 80019f8:	2100      	movs	r1, #0
 80019fa:	2078      	movs	r0, #120	@ 0x78
 80019fc:	f000 f94a 	bl	8001c94 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001a00:	22af      	movs	r2, #175	@ 0xaf
 8001a02:	2100      	movs	r1, #0
 8001a04:	2078      	movs	r0, #120	@ 0x78
 8001a06:	f000 f945 	bl	8001c94 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001a0a:	222e      	movs	r2, #46	@ 0x2e
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2078      	movs	r0, #120	@ 0x78
 8001a10:	f000 f940 	bl	8001c94 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001a14:	2000      	movs	r0, #0
 8001a16:	f000 f843 	bl	8001aa0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001a1a:	f000 f813 	bl	8001a44 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001a1e:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <SSD1306_Init+0x184>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001a24:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <SSD1306_Init+0x184>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001a2a:	4b05      	ldr	r3, [pc, #20]	@ (8001a40 <SSD1306_Init+0x184>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001a30:	2301      	movs	r3, #1
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000640 	.word	0x20000640
 8001a40:	20000618 	.word	0x20000618

08001a44 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	71fb      	strb	r3, [r7, #7]
 8001a4e:	e01d      	b.n	8001a8c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	3b50      	subs	r3, #80	@ 0x50
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	461a      	mov	r2, r3
 8001a58:	2100      	movs	r1, #0
 8001a5a:	2078      	movs	r0, #120	@ 0x78
 8001a5c:	f000 f91a 	bl	8001c94 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2100      	movs	r1, #0
 8001a64:	2078      	movs	r0, #120	@ 0x78
 8001a66:	f000 f915 	bl	8001c94 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001a6a:	2210      	movs	r2, #16
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	2078      	movs	r0, #120	@ 0x78
 8001a70:	f000 f910 	bl	8001c94 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	01db      	lsls	r3, r3, #7
 8001a78:	4a08      	ldr	r2, [pc, #32]	@ (8001a9c <SSD1306_UpdateScreen+0x58>)
 8001a7a:	441a      	add	r2, r3
 8001a7c:	2380      	movs	r3, #128	@ 0x80
 8001a7e:	2140      	movs	r1, #64	@ 0x40
 8001a80:	2078      	movs	r0, #120	@ 0x78
 8001a82:	f000 f8a1 	bl	8001bc8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	71fb      	strb	r3, [r7, #7]
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	2b07      	cmp	r3, #7
 8001a90:	d9de      	bls.n	8001a50 <SSD1306_UpdateScreen+0xc>
	}
}
 8001a92:	bf00      	nop
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000218 	.word	0x20000218

08001aa0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <SSD1306_Fill+0x14>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	e000      	b.n	8001ab6 <SSD1306_Fill+0x16>
 8001ab4:	23ff      	movs	r3, #255	@ 0xff
 8001ab6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001aba:	4619      	mov	r1, r3
 8001abc:	4803      	ldr	r0, [pc, #12]	@ (8001acc <SSD1306_Fill+0x2c>)
 8001abe:	f004 f806 	bl	8005ace <memset>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000218 	.word	0x20000218

08001ad0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	80fb      	strh	r3, [r7, #6]
 8001ada:	460b      	mov	r3, r1
 8001adc:	80bb      	strh	r3, [r7, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	70fb      	strb	r3, [r7, #3]
	if (
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ae6:	d848      	bhi.n	8001b7a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001ae8:	88bb      	ldrh	r3, [r7, #4]
 8001aea:	2b3f      	cmp	r3, #63	@ 0x3f
 8001aec:	d845      	bhi.n	8001b7a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001aee:	4b25      	ldr	r3, [pc, #148]	@ (8001b84 <SSD1306_DrawPixel+0xb4>)
 8001af0:	791b      	ldrb	r3, [r3, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d006      	beq.n	8001b04 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	bf0c      	ite	eq
 8001afc:	2301      	moveq	r3, #1
 8001afe:	2300      	movne	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001b04:	78fb      	ldrb	r3, [r7, #3]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d11a      	bne.n	8001b40 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001b0a:	88fa      	ldrh	r2, [r7, #6]
 8001b0c:	88bb      	ldrh	r3, [r7, #4]
 8001b0e:	08db      	lsrs	r3, r3, #3
 8001b10:	b298      	uxth	r0, r3
 8001b12:	4603      	mov	r3, r0
 8001b14:	01db      	lsls	r3, r3, #7
 8001b16:	4413      	add	r3, r2
 8001b18:	4a1b      	ldr	r2, [pc, #108]	@ (8001b88 <SSD1306_DrawPixel+0xb8>)
 8001b1a:	5cd3      	ldrb	r3, [r2, r3]
 8001b1c:	b25a      	sxtb	r2, r3
 8001b1e:	88bb      	ldrh	r3, [r7, #4]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	2101      	movs	r1, #1
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	b25b      	sxtb	r3, r3
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	b259      	sxtb	r1, r3
 8001b30:	88fa      	ldrh	r2, [r7, #6]
 8001b32:	4603      	mov	r3, r0
 8001b34:	01db      	lsls	r3, r3, #7
 8001b36:	4413      	add	r3, r2
 8001b38:	b2c9      	uxtb	r1, r1
 8001b3a:	4a13      	ldr	r2, [pc, #76]	@ (8001b88 <SSD1306_DrawPixel+0xb8>)
 8001b3c:	54d1      	strb	r1, [r2, r3]
 8001b3e:	e01d      	b.n	8001b7c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001b40:	88fa      	ldrh	r2, [r7, #6]
 8001b42:	88bb      	ldrh	r3, [r7, #4]
 8001b44:	08db      	lsrs	r3, r3, #3
 8001b46:	b298      	uxth	r0, r3
 8001b48:	4603      	mov	r3, r0
 8001b4a:	01db      	lsls	r3, r3, #7
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4a0e      	ldr	r2, [pc, #56]	@ (8001b88 <SSD1306_DrawPixel+0xb8>)
 8001b50:	5cd3      	ldrb	r3, [r2, r3]
 8001b52:	b25a      	sxtb	r2, r3
 8001b54:	88bb      	ldrh	r3, [r7, #4]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b60:	b25b      	sxtb	r3, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	b25b      	sxtb	r3, r3
 8001b66:	4013      	ands	r3, r2
 8001b68:	b259      	sxtb	r1, r3
 8001b6a:	88fa      	ldrh	r2, [r7, #6]
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	01db      	lsls	r3, r3, #7
 8001b70:	4413      	add	r3, r2
 8001b72:	b2c9      	uxtb	r1, r1
 8001b74:	4a04      	ldr	r2, [pc, #16]	@ (8001b88 <SSD1306_DrawPixel+0xb8>)
 8001b76:	54d1      	strb	r1, [r2, r3]
 8001b78:	e000      	b.n	8001b7c <SSD1306_DrawPixel+0xac>
		return;
 8001b7a:	bf00      	nop
	}
}
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	20000618 	.word	0x20000618
 8001b88:	20000218 	.word	0x20000218

08001b8c <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001b90:	2000      	movs	r0, #0
 8001b92:	f7ff ff85 	bl	8001aa0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001b96:	f7ff ff55 	bl	8001a44 <SSD1306_UpdateScreen>
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001ba6:	4b07      	ldr	r3, [pc, #28]	@ (8001bc4 <ssd1306_I2C_Init+0x24>)
 8001ba8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001baa:	e002      	b.n	8001bb2 <ssd1306_I2C_Init+0x12>
		p--;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f9      	bne.n	8001bac <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&H_I2C);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	0003d090 	.word	0x0003d090

08001bc8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001bc8:	b590      	push	{r4, r7, lr}
 8001bca:	b0c7      	sub	sp, #284	@ 0x11c
 8001bcc:	af02      	add	r7, sp, #8
 8001bce:	4604      	mov	r4, r0
 8001bd0:	4608      	mov	r0, r1
 8001bd2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001bd6:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001bda:	600a      	str	r2, [r1, #0]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001be2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001be6:	4622      	mov	r2, r4
 8001be8:	701a      	strb	r2, [r3, #0]
 8001bea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001bee:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	701a      	strb	r2, [r3, #0]
 8001bf6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001bfa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001bfe:	460a      	mov	r2, r1
 8001c00:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001c02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c0a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001c0e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001c12:	7812      	ldrb	r2, [r2, #0]
 8001c14:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001c1c:	e015      	b.n	8001c4a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001c1e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001c22:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001c26:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	441a      	add	r2, r3
 8001c2e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001c32:	3301      	adds	r3, #1
 8001c34:	7811      	ldrb	r1, [r2, #0]
 8001c36:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001c3a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001c3e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001c40:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001c44:	3301      	adds	r3, #1
 8001c46:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001c4a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001c54:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001c58:	8812      	ldrh	r2, [r2, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d8df      	bhi.n	8001c1e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&H_I2C, address, dt, count+1, 10);
 8001c5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c62:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	b299      	uxth	r1, r3
 8001c6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c6e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	3301      	adds	r3, #1
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	f107 020c 	add.w	r2, r7, #12
 8001c7c:	200a      	movs	r0, #10
 8001c7e:	9000      	str	r0, [sp, #0]
 8001c80:	4803      	ldr	r0, [pc, #12]	@ (8001c90 <ssd1306_I2C_WriteMulti+0xc8>)
 8001c82:	f001 fac5 	bl	8003210 <HAL_I2C_Master_Transmit>
}
 8001c86:	bf00      	nop
 8001c88:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd90      	pop	{r4, r7, pc}
 8001c90:	20000640 	.word	0x20000640

08001c94 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af02      	add	r7, sp, #8
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	71bb      	strb	r3, [r7, #6]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001ca6:	79bb      	ldrb	r3, [r7, #6]
 8001ca8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001caa:	797b      	ldrb	r3, [r7, #5]
 8001cac:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&H_I2C, address, dt, 2, 10);
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	b299      	uxth	r1, r3
 8001cb2:	f107 020c 	add.w	r2, r7, #12
 8001cb6:	230a      	movs	r3, #10
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	2302      	movs	r3, #2
 8001cbc:	4803      	ldr	r0, [pc, #12]	@ (8001ccc <ssd1306_I2C_Write+0x38>)
 8001cbe:	f001 faa7 	bl	8003210 <HAL_I2C_Master_Transmit>
}
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000640 	.word	0x20000640

08001cd0 <init_fnd>:
#define false 0
#define true 1

uint8_t _LED_0F[29];

void init_fnd() {
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
	_LED_0F[0] = 0xC0; //0
 8001cd4:	4b2d      	ldr	r3, [pc, #180]	@ (8001d8c <init_fnd+0xbc>)
 8001cd6:	22c0      	movs	r2, #192	@ 0xc0
 8001cd8:	701a      	strb	r2, [r3, #0]
	_LED_0F[1] = 0xF9; //1
 8001cda:	4b2c      	ldr	r3, [pc, #176]	@ (8001d8c <init_fnd+0xbc>)
 8001cdc:	22f9      	movs	r2, #249	@ 0xf9
 8001cde:	705a      	strb	r2, [r3, #1]
	_LED_0F[2] = 0xA4; //2
 8001ce0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d8c <init_fnd+0xbc>)
 8001ce2:	22a4      	movs	r2, #164	@ 0xa4
 8001ce4:	709a      	strb	r2, [r3, #2]
	_LED_0F[3] = 0xB0; //3
 8001ce6:	4b29      	ldr	r3, [pc, #164]	@ (8001d8c <init_fnd+0xbc>)
 8001ce8:	22b0      	movs	r2, #176	@ 0xb0
 8001cea:	70da      	strb	r2, [r3, #3]
	_LED_0F[4] = 0x99; //4
 8001cec:	4b27      	ldr	r3, [pc, #156]	@ (8001d8c <init_fnd+0xbc>)
 8001cee:	2299      	movs	r2, #153	@ 0x99
 8001cf0:	711a      	strb	r2, [r3, #4]
	_LED_0F[5] = 0x92; //5
 8001cf2:	4b26      	ldr	r3, [pc, #152]	@ (8001d8c <init_fnd+0xbc>)
 8001cf4:	2292      	movs	r2, #146	@ 0x92
 8001cf6:	715a      	strb	r2, [r3, #5]
	_LED_0F[6] = 0x82; //6
 8001cf8:	4b24      	ldr	r3, [pc, #144]	@ (8001d8c <init_fnd+0xbc>)
 8001cfa:	2282      	movs	r2, #130	@ 0x82
 8001cfc:	719a      	strb	r2, [r3, #6]
	_LED_0F[7] = 0xF8; //7
 8001cfe:	4b23      	ldr	r3, [pc, #140]	@ (8001d8c <init_fnd+0xbc>)
 8001d00:	22f8      	movs	r2, #248	@ 0xf8
 8001d02:	71da      	strb	r2, [r3, #7]
	_LED_0F[8] = 0x80; //8
 8001d04:	4b21      	ldr	r3, [pc, #132]	@ (8001d8c <init_fnd+0xbc>)
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	721a      	strb	r2, [r3, #8]
	_LED_0F[9] = 0x90; //9
 8001d0a:	4b20      	ldr	r3, [pc, #128]	@ (8001d8c <init_fnd+0xbc>)
 8001d0c:	2290      	movs	r2, #144	@ 0x90
 8001d0e:	725a      	strb	r2, [r3, #9]
	_LED_0F[10] = 0x88; //A
 8001d10:	4b1e      	ldr	r3, [pc, #120]	@ (8001d8c <init_fnd+0xbc>)
 8001d12:	2288      	movs	r2, #136	@ 0x88
 8001d14:	729a      	strb	r2, [r3, #10]
	_LED_0F[11] = 0x83; //b
 8001d16:	4b1d      	ldr	r3, [pc, #116]	@ (8001d8c <init_fnd+0xbc>)
 8001d18:	2283      	movs	r2, #131	@ 0x83
 8001d1a:	72da      	strb	r2, [r3, #11]
	_LED_0F[12] = 0xC6; //C
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d8c <init_fnd+0xbc>)
 8001d1e:	22c6      	movs	r2, #198	@ 0xc6
 8001d20:	731a      	strb	r2, [r3, #12]
	_LED_0F[13] = 0xA1; //d
 8001d22:	4b1a      	ldr	r3, [pc, #104]	@ (8001d8c <init_fnd+0xbc>)
 8001d24:	22a1      	movs	r2, #161	@ 0xa1
 8001d26:	735a      	strb	r2, [r3, #13]
	_LED_0F[14] = 0x86; //E
 8001d28:	4b18      	ldr	r3, [pc, #96]	@ (8001d8c <init_fnd+0xbc>)
 8001d2a:	2286      	movs	r2, #134	@ 0x86
 8001d2c:	739a      	strb	r2, [r3, #14]
	_LED_0F[15] = 0x8E; //F
 8001d2e:	4b17      	ldr	r3, [pc, #92]	@ (8001d8c <init_fnd+0xbc>)
 8001d30:	228e      	movs	r2, #142	@ 0x8e
 8001d32:	73da      	strb	r2, [r3, #15]
	_LED_0F[16] = 0xC2; //G
 8001d34:	4b15      	ldr	r3, [pc, #84]	@ (8001d8c <init_fnd+0xbc>)
 8001d36:	22c2      	movs	r2, #194	@ 0xc2
 8001d38:	741a      	strb	r2, [r3, #16]
	_LED_0F[17] = 0x89; //H
 8001d3a:	4b14      	ldr	r3, [pc, #80]	@ (8001d8c <init_fnd+0xbc>)
 8001d3c:	2289      	movs	r2, #137	@ 0x89
 8001d3e:	745a      	strb	r2, [r3, #17]
	_LED_0F[18] = 0xF9; //I
 8001d40:	4b12      	ldr	r3, [pc, #72]	@ (8001d8c <init_fnd+0xbc>)
 8001d42:	22f9      	movs	r2, #249	@ 0xf9
 8001d44:	749a      	strb	r2, [r3, #18]
	_LED_0F[19] = 0xF1; //J
 8001d46:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <init_fnd+0xbc>)
 8001d48:	22f1      	movs	r2, #241	@ 0xf1
 8001d4a:	74da      	strb	r2, [r3, #19]
	_LED_0F[20] = 0xC3; //L
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d8c <init_fnd+0xbc>)
 8001d4e:	22c3      	movs	r2, #195	@ 0xc3
 8001d50:	751a      	strb	r2, [r3, #20]
	_LED_0F[21] = 0xA9; //n
 8001d52:	4b0e      	ldr	r3, [pc, #56]	@ (8001d8c <init_fnd+0xbc>)
 8001d54:	22a9      	movs	r2, #169	@ 0xa9
 8001d56:	755a      	strb	r2, [r3, #21]
	_LED_0F[22] = 0xC0; //O
 8001d58:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <init_fnd+0xbc>)
 8001d5a:	22c0      	movs	r2, #192	@ 0xc0
 8001d5c:	759a      	strb	r2, [r3, #22]
	_LED_0F[23] = 0x8C; //P
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d8c <init_fnd+0xbc>)
 8001d60:	228c      	movs	r2, #140	@ 0x8c
 8001d62:	75da      	strb	r2, [r3, #23]
	_LED_0F[24] = 0x98; //q
 8001d64:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <init_fnd+0xbc>)
 8001d66:	2298      	movs	r2, #152	@ 0x98
 8001d68:	761a      	strb	r2, [r3, #24]
	_LED_0F[25] = 0x92; //S
 8001d6a:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <init_fnd+0xbc>)
 8001d6c:	2292      	movs	r2, #146	@ 0x92
 8001d6e:	765a      	strb	r2, [r3, #25]
	_LED_0F[26] = 0xC1; //U
 8001d70:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <init_fnd+0xbc>)
 8001d72:	22c1      	movs	r2, #193	@ 0xc1
 8001d74:	769a      	strb	r2, [r3, #26]
	_LED_0F[27] = 0x91; //Y
 8001d76:	4b05      	ldr	r3, [pc, #20]	@ (8001d8c <init_fnd+0xbc>)
 8001d78:	2291      	movs	r2, #145	@ 0x91
 8001d7a:	76da      	strb	r2, [r3, #27]
	_LED_0F[28] = 0xFE; //hight -
 8001d7c:	4b03      	ldr	r3, [pc, #12]	@ (8001d8c <init_fnd+0xbc>)
 8001d7e:	22fe      	movs	r2, #254	@ 0xfe
 8001d80:	771a      	strb	r2, [r3, #28]
}
 8001d82:	bf00      	nop
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000620 	.word	0x20000620

08001d90 <send>:

void send(uint8_t X){
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
	for (int i = 8; i >= 1; i--) {
 8001d9a:	2308      	movs	r3, #8
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	e022      	b.n	8001de6 <send+0x56>
		if (X & 0x80) {
 8001da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	da06      	bge.n	8001db6 <send+0x26>
			HAL_GPIO_WritePin(FND_DIO_GPIO_Port, FND_DIO_Pin, HIGH);
 8001da8:	2201      	movs	r2, #1
 8001daa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001dae:	4812      	ldr	r0, [pc, #72]	@ (8001df8 <send+0x68>)
 8001db0:	f001 f8d1 	bl	8002f56 <HAL_GPIO_WritePin>
 8001db4:	e005      	b.n	8001dc2 <send+0x32>
		} else {
			HAL_GPIO_WritePin(FND_DIO_GPIO_Port, FND_DIO_Pin, LOW);
 8001db6:	2200      	movs	r2, #0
 8001db8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001dbc:	480e      	ldr	r0, [pc, #56]	@ (8001df8 <send+0x68>)
 8001dbe:	f001 f8ca 	bl	8002f56 <HAL_GPIO_WritePin>
		}
		X <<= 1;
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, LOW);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001dce:	480a      	ldr	r0, [pc, #40]	@ (8001df8 <send+0x68>)
 8001dd0:	f001 f8c1 	bl	8002f56 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, HIGH);
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001dda:	4807      	ldr	r0, [pc, #28]	@ (8001df8 <send+0x68>)
 8001ddc:	f001 f8bb 	bl	8002f56 <HAL_GPIO_WritePin>
	for (int i = 8; i >= 1; i--) {
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	dcd9      	bgt.n	8001da0 <send+0x10>
	}
}
 8001dec:	bf00      	nop
 8001dee:	bf00      	nop
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40010c00 	.word	0x40010c00

08001dfc <send_port>:

void send_port(uint8_t X, uint8_t port){
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	460a      	mov	r2, r1
 8001e06:	71fb      	strb	r3, [r7, #7]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	71bb      	strb	r3, [r7, #6]
	send(X);
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff ffbe 	bl	8001d90 <send>
	send(port);
 8001e14:	79bb      	ldrb	r3, [r7, #6]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff ffba 	bl	8001d90 <send>
	HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, LOW);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001e22:	4806      	ldr	r0, [pc, #24]	@ (8001e3c <send_port+0x40>)
 8001e24:	f001 f897 	bl	8002f56 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, HIGH);
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001e2e:	4803      	ldr	r0, [pc, #12]	@ (8001e3c <send_port+0x40>)
 8001e30:	f001 f891 	bl	8002f56 <HAL_GPIO_WritePin>
}
 8001e34:	bf00      	nop
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40010c00 	.word	0x40010c00

08001e40 <digit4_temper>:
			send_port(_LED_0F[n4], 0b1000);
		}
	}
}
static uint8_t m_tempercount = 0;
void digit4_temper(int temper) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	int n1, n2, n3, n4;

	n1 = (int) temper % 10;
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	4b59      	ldr	r3, [pc, #356]	@ (8001fb0 <digit4_temper+0x170>)
 8001e4c:	fb83 1302 	smull	r1, r3, r3, r2
 8001e50:	1099      	asrs	r1, r3, #2
 8001e52:	17d3      	asrs	r3, r2, #31
 8001e54:	1ac9      	subs	r1, r1, r3
 8001e56:	460b      	mov	r3, r1
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	617b      	str	r3, [r7, #20]
	n2 = (int) ((temper % 100)) / 10;
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	4b53      	ldr	r3, [pc, #332]	@ (8001fb4 <digit4_temper+0x174>)
 8001e66:	fb83 1302 	smull	r1, r3, r3, r2
 8001e6a:	1159      	asrs	r1, r3, #5
 8001e6c:	17d3      	asrs	r3, r2, #31
 8001e6e:	1acb      	subs	r3, r1, r3
 8001e70:	2164      	movs	r1, #100	@ 0x64
 8001e72:	fb01 f303 	mul.w	r3, r1, r3
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	4a4d      	ldr	r2, [pc, #308]	@ (8001fb0 <digit4_temper+0x170>)
 8001e7a:	fb82 1203 	smull	r1, r2, r2, r3
 8001e7e:	1092      	asrs	r2, r2, #2
 8001e80:	17db      	asrs	r3, r3, #31
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	613b      	str	r3, [r7, #16]
	n3 = (int) ((temper % 1000)) / 100;
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	4b4b      	ldr	r3, [pc, #300]	@ (8001fb8 <digit4_temper+0x178>)
 8001e8a:	fb83 1302 	smull	r1, r3, r3, r2
 8001e8e:	1199      	asrs	r1, r3, #6
 8001e90:	17d3      	asrs	r3, r2, #31
 8001e92:	1acb      	subs	r3, r1, r3
 8001e94:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e98:	fb01 f303 	mul.w	r3, r1, r3
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	4a45      	ldr	r2, [pc, #276]	@ (8001fb4 <digit4_temper+0x174>)
 8001ea0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ea4:	1152      	asrs	r2, r2, #5
 8001ea6:	17db      	asrs	r3, r3, #31
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	60fb      	str	r3, [r7, #12]
	n4 = (int) ((temper % 10000)) / 1000;
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	4b43      	ldr	r3, [pc, #268]	@ (8001fbc <digit4_temper+0x17c>)
 8001eb0:	fb83 1302 	smull	r1, r3, r3, r2
 8001eb4:	1319      	asrs	r1, r3, #12
 8001eb6:	17d3      	asrs	r3, r2, #31
 8001eb8:	1acb      	subs	r3, r1, r3
 8001eba:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001ebe:	fb01 f303 	mul.w	r3, r1, r3
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	4a3c      	ldr	r2, [pc, #240]	@ (8001fb8 <digit4_temper+0x178>)
 8001ec6:	fb82 1203 	smull	r1, r2, r2, r3
 8001eca:	1192      	asrs	r2, r2, #6
 8001ecc:	17db      	asrs	r3, r3, #31
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	60bb      	str	r3, [r7, #8]

	switch(m_tempercount){
 8001ed2:	4b3b      	ldr	r3, [pc, #236]	@ (8001fc0 <digit4_temper+0x180>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d838      	bhi.n	8001f4c <digit4_temper+0x10c>
 8001eda:	a201      	add	r2, pc, #4	@ (adr r2, 8001ee0 <digit4_temper+0xa0>)
 8001edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee0:	08001ef1 	.word	0x08001ef1
 8001ee4:	08001f03 	.word	0x08001f03
 8001ee8:	08001f1b 	.word	0x08001f1b
 8001eec:	08001f33 	.word	0x08001f33

	case 0:
		send_port(_LED_0F[n1], 0b0001);
 8001ef0:	4a34      	ldr	r2, [pc, #208]	@ (8001fc4 <digit4_temper+0x184>)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2101      	movs	r1, #1
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff ff7e 	bl	8001dfc <send_port>
		break;
 8001f00:	e029      	b.n	8001f56 <digit4_temper+0x116>
	case 1:
		send_port(_LED_0F[n2] & 0x7F, 0b0010);
 8001f02:	4a30      	ldr	r2, [pc, #192]	@ (8001fc4 <digit4_temper+0x184>)
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4413      	add	r3, r2
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2102      	movs	r1, #2
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff ff72 	bl	8001dfc <send_port>
		break;
 8001f18:	e01d      	b.n	8001f56 <digit4_temper+0x116>
	case 2:
		if (temper > 99)send_port(_LED_0F[n3], 0b0100);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b63      	cmp	r3, #99	@ 0x63
 8001f1e:	dd17      	ble.n	8001f50 <digit4_temper+0x110>
 8001f20:	4a28      	ldr	r2, [pc, #160]	@ (8001fc4 <digit4_temper+0x184>)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4413      	add	r3, r2
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2104      	movs	r1, #4
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff ff66 	bl	8001dfc <send_port>
		break;
 8001f30:	e00e      	b.n	8001f50 <digit4_temper+0x110>
	case 3:
		if (temper > 999)send_port(_LED_0F[n4], 0b1000);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f38:	db0c      	blt.n	8001f54 <digit4_temper+0x114>
 8001f3a:	4a22      	ldr	r2, [pc, #136]	@ (8001fc4 <digit4_temper+0x184>)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	4413      	add	r3, r2
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2108      	movs	r1, #8
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff59 	bl	8001dfc <send_port>
		break;
 8001f4a:	e003      	b.n	8001f54 <digit4_temper+0x114>
	default:
		break;
 8001f4c:	bf00      	nop
 8001f4e:	e002      	b.n	8001f56 <digit4_temper+0x116>
		break;
 8001f50:	bf00      	nop
 8001f52:	e000      	b.n	8001f56 <digit4_temper+0x116>
		break;
 8001f54:	bf00      	nop
	}

	m_tempercount++;
 8001f56:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc0 <digit4_temper+0x180>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	4b18      	ldr	r3, [pc, #96]	@ (8001fc0 <digit4_temper+0x180>)
 8001f60:	701a      	strb	r2, [r3, #0]

	if(temper > 999 && m_tempercount >= 4){
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f68:	db07      	blt.n	8001f7a <digit4_temper+0x13a>
 8001f6a:	4b15      	ldr	r3, [pc, #84]	@ (8001fc0 <digit4_temper+0x180>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	d903      	bls.n	8001f7a <digit4_temper+0x13a>
		m_tempercount = 0;
 8001f72:	4b13      	ldr	r3, [pc, #76]	@ (8001fc0 <digit4_temper+0x180>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
 8001f78:	e015      	b.n	8001fa6 <digit4_temper+0x166>
	}else if(temper > 99 && m_tempercount >= 3){
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b63      	cmp	r3, #99	@ 0x63
 8001f7e:	dd07      	ble.n	8001f90 <digit4_temper+0x150>
 8001f80:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc0 <digit4_temper+0x180>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d903      	bls.n	8001f90 <digit4_temper+0x150>
		m_tempercount = 0;
 8001f88:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc0 <digit4_temper+0x180>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	701a      	strb	r2, [r3, #0]
 8001f8e:	e00a      	b.n	8001fa6 <digit4_temper+0x166>
	}else if(temper <= 99 && m_tempercount >= 2){
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b63      	cmp	r3, #99	@ 0x63
 8001f94:	dc07      	bgt.n	8001fa6 <digit4_temper+0x166>
 8001f96:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc0 <digit4_temper+0x180>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d903      	bls.n	8001fa6 <digit4_temper+0x166>
		m_tempercount = 0;
 8001f9e:	4b08      	ldr	r3, [pc, #32]	@ (8001fc0 <digit4_temper+0x180>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
	}
}
 8001fa4:	e7ff      	b.n	8001fa6 <digit4_temper+0x166>
 8001fa6:	bf00      	nop
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	66666667 	.word	0x66666667
 8001fb4:	51eb851f 	.word	0x51eb851f
 8001fb8:	10624dd3 	.word	0x10624dd3
 8001fbc:	68db8bad 	.word	0x68db8bad
 8001fc0:	2000063d 	.word	0x2000063d
 8001fc4:	20000620 	.word	0x20000620

08001fc8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char * p, int len){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)p, len, 1000);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fdc:	68b9      	ldr	r1, [r7, #8]
 8001fde:	4804      	ldr	r0, [pc, #16]	@ (8001ff0 <_write+0x28>)
 8001fe0:	f002 fe40 	bl	8004c64 <HAL_UART_Transmit>
	return len;
 8001fe4:	687b      	ldr	r3, [r7, #4]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000724 	.word	0x20000724

08001ff4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	float temper = 0.0;
 8001ffa:	f04f 0300 	mov.w	r3, #0
 8001ffe:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002000:	f000 fc7a 	bl	80028f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002004:	f000 f850 	bl	80020a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002008:	f000 f984 	bl	8002314 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800200c:	f000 f958 	bl	80022c0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002010:	f000 f8be 	bl	8002190 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002014:	f000 f908 	bl	8002228 <MX_TIM3_Init>
  MX_I2C2_Init();
 8002018:	f000 f88c 	bl	8002134 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 800201c:	f7ff fc4e 	bl	80018bc <SSD1306_Init>
//

  HAL_Delay(2000);*/


  init_fnd();
 8002020:	f7ff fe56 	bl	8001cd0 <init_fnd>
//  HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_Base_Start_IT(&htim3);
 8002024:	481d      	ldr	r0, [pc, #116]	@ (800209c <main+0xa8>)
 8002026:	f002 fa23 	bl	8004470 <HAL_TIM_Base_Start_IT>

//  Ds18b20_Init();
  Ds18b20_Init_Simple();
 800202a:	f7fe ff31 	bl	8000e90 <Ds18b20_Init_Simple>
//  float ff = 0.7;

  while (1)
  {

	  	  SSD1306_Clear();
 800202e:	f7ff fdad 	bl	8001b8c <SSD1306_Clear>
	  	  SSD1306_DrawBitmap(0,0,kna1,128,64,1);
 8002032:	2301      	movs	r3, #1
 8002034:	9301      	str	r3, [sp, #4]
 8002036:	2340      	movs	r3, #64	@ 0x40
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	2380      	movs	r3, #128	@ 0x80
 800203c:	4a18      	ldr	r2, [pc, #96]	@ (80020a0 <main+0xac>)
 800203e:	2100      	movs	r1, #0
 8002040:	2000      	movs	r0, #0
 8002042:	f7ff fbd2 	bl	80017ea <SSD1306_DrawBitmap>
	  	  SSD1306_UpdateScreen();
 8002046:	f7ff fcfd 	bl	8001a44 <SSD1306_UpdateScreen>
	  	  HAL_Delay(300);
 800204a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800204e:	f000 fcb5 	bl	80029bc <HAL_Delay>

	  	  SSD1306_Clear();
 8002052:	f7ff fd9b 	bl	8001b8c <SSD1306_Clear>
	  	  SSD1306_DrawBitmap(0,0,kna2,128,64,1);
 8002056:	2301      	movs	r3, #1
 8002058:	9301      	str	r3, [sp, #4]
 800205a:	2340      	movs	r3, #64	@ 0x40
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	2380      	movs	r3, #128	@ 0x80
 8002060:	4a10      	ldr	r2, [pc, #64]	@ (80020a4 <main+0xb0>)
 8002062:	2100      	movs	r1, #0
 8002064:	2000      	movs	r0, #0
 8002066:	f7ff fbc0 	bl	80017ea <SSD1306_DrawBitmap>
	  	  SSD1306_UpdateScreen();
 800206a:	f7ff fceb 	bl	8001a44 <SSD1306_UpdateScreen>
	  	  HAL_Delay(300);
 800206e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002072:	f000 fca3 	bl	80029bc <HAL_Delay>


	  if(!isConverting()){
 8002076:	f7fe ff01 	bl	8000e7c <isConverting>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <main+0x90>
		  StartConverting();
 8002080:	f7fe ff4a 	bl	8000f18 <StartConverting>
	  }

	  checkConverting();
 8002084:	f7fe ff5e 	bl	8000f44 <checkConverting>

	  if(!isConverting()){
 8002088:	f7fe fef8 	bl	8000e7c <isConverting>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1cd      	bne.n	800202e <main+0x3a>
		  temper = getTemper();
 8002092:	f7fe ff73 	bl	8000f7c <getTemper>
 8002096:	6078      	str	r0, [r7, #4]
	  	  SSD1306_Clear();
 8002098:	e7c9      	b.n	800202e <main+0x3a>
 800209a:	bf00      	nop
 800209c:	200006dc 	.word	0x200006dc
 80020a0:	08007940 	.word	0x08007940
 80020a4:	08007d40 	.word	0x08007d40

080020a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b090      	sub	sp, #64	@ 0x40
 80020ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ae:	f107 0318 	add.w	r3, r7, #24
 80020b2:	2228      	movs	r2, #40	@ 0x28
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f003 fd09 	bl	8005ace <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020bc:	1d3b      	adds	r3, r7, #4
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	60da      	str	r2, [r3, #12]
 80020c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020ca:	2301      	movs	r3, #1
 80020cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80020d4:	2300      	movs	r3, #0
 80020d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020d8:	2301      	movs	r3, #1
 80020da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020dc:	2302      	movs	r3, #2
 80020de:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80020e6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80020ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020ec:	f107 0318 	add.w	r3, r7, #24
 80020f0:	4618      	mov	r0, r3
 80020f2:	f001 fd13 	bl	8003b1c <HAL_RCC_OscConfig>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80020fc:	f000 f9c6 	bl	800248c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002100:	230f      	movs	r3, #15
 8002102:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002104:	2302      	movs	r3, #2
 8002106:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800210c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002110:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	2102      	movs	r1, #2
 800211a:	4618      	mov	r0, r3
 800211c:	f001 ff80 	bl	8004020 <HAL_RCC_ClockConfig>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002126:	f000 f9b1 	bl	800248c <Error_Handler>
  }
}
 800212a:	bf00      	nop
 800212c:	3740      	adds	r7, #64	@ 0x40
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002138:	4b12      	ldr	r3, [pc, #72]	@ (8002184 <MX_I2C2_Init+0x50>)
 800213a:	4a13      	ldr	r2, [pc, #76]	@ (8002188 <MX_I2C2_Init+0x54>)
 800213c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800213e:	4b11      	ldr	r3, [pc, #68]	@ (8002184 <MX_I2C2_Init+0x50>)
 8002140:	4a12      	ldr	r2, [pc, #72]	@ (800218c <MX_I2C2_Init+0x58>)
 8002142:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002144:	4b0f      	ldr	r3, [pc, #60]	@ (8002184 <MX_I2C2_Init+0x50>)
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800214a:	4b0e      	ldr	r3, [pc, #56]	@ (8002184 <MX_I2C2_Init+0x50>)
 800214c:	2200      	movs	r2, #0
 800214e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002150:	4b0c      	ldr	r3, [pc, #48]	@ (8002184 <MX_I2C2_Init+0x50>)
 8002152:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002156:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002158:	4b0a      	ldr	r3, [pc, #40]	@ (8002184 <MX_I2C2_Init+0x50>)
 800215a:	2200      	movs	r2, #0
 800215c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800215e:	4b09      	ldr	r3, [pc, #36]	@ (8002184 <MX_I2C2_Init+0x50>)
 8002160:	2200      	movs	r2, #0
 8002162:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002164:	4b07      	ldr	r3, [pc, #28]	@ (8002184 <MX_I2C2_Init+0x50>)
 8002166:	2200      	movs	r2, #0
 8002168:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800216a:	4b06      	ldr	r3, [pc, #24]	@ (8002184 <MX_I2C2_Init+0x50>)
 800216c:	2200      	movs	r2, #0
 800216e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002170:	4804      	ldr	r0, [pc, #16]	@ (8002184 <MX_I2C2_Init+0x50>)
 8002172:	f000 ff09 	bl	8002f88 <HAL_I2C_Init>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800217c:	f000 f986 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002180:	bf00      	nop
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20000640 	.word	0x20000640
 8002188:	40005800 	.word	0x40005800
 800218c:	00061a80 	.word	0x00061a80

08002190 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002196:	f107 0308 	add.w	r3, r7, #8
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
 80021a0:	609a      	str	r2, [r3, #8]
 80021a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a4:	463b      	mov	r3, r7
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002224 <MX_TIM2_Init+0x94>)
 80021ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = (72-1);
 80021b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002224 <MX_TIM2_Init+0x94>)
 80021b6:	2247      	movs	r2, #71	@ 0x47
 80021b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002224 <MX_TIM2_Init+0x94>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80021c0:	4b18      	ldr	r3, [pc, #96]	@ (8002224 <MX_TIM2_Init+0x94>)
 80021c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c8:	4b16      	ldr	r3, [pc, #88]	@ (8002224 <MX_TIM2_Init+0x94>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ce:	4b15      	ldr	r3, [pc, #84]	@ (8002224 <MX_TIM2_Init+0x94>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021d4:	4813      	ldr	r0, [pc, #76]	@ (8002224 <MX_TIM2_Init+0x94>)
 80021d6:	f002 f8b1 	bl	800433c <HAL_TIM_Base_Init>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80021e0:	f000 f954 	bl	800248c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021ea:	f107 0308 	add.w	r3, r7, #8
 80021ee:	4619      	mov	r1, r3
 80021f0:	480c      	ldr	r0, [pc, #48]	@ (8002224 <MX_TIM2_Init+0x94>)
 80021f2:	f002 fa7f 	bl	80046f4 <HAL_TIM_ConfigClockSource>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80021fc:	f000 f946 	bl	800248c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002200:	2300      	movs	r3, #0
 8002202:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002204:	2300      	movs	r3, #0
 8002206:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002208:	463b      	mov	r3, r7
 800220a:	4619      	mov	r1, r3
 800220c:	4805      	ldr	r0, [pc, #20]	@ (8002224 <MX_TIM2_Init+0x94>)
 800220e:	f002 fc69 	bl	8004ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002218:	f000 f938 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800221c:	bf00      	nop
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20000694 	.word	0x20000694

08002228 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800222e:	f107 0308 	add.w	r3, r7, #8
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	605a      	str	r2, [r3, #4]
 8002238:	609a      	str	r2, [r3, #8]
 800223a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800223c:	463b      	mov	r3, r7
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002244:	4b1c      	ldr	r3, [pc, #112]	@ (80022b8 <MX_TIM3_Init+0x90>)
 8002246:	4a1d      	ldr	r2, [pc, #116]	@ (80022bc <MX_TIM3_Init+0x94>)
 8002248:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800224a:	4b1b      	ldr	r3, [pc, #108]	@ (80022b8 <MX_TIM3_Init+0x90>)
 800224c:	2247      	movs	r2, #71	@ 0x47
 800224e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002250:	4b19      	ldr	r3, [pc, #100]	@ (80022b8 <MX_TIM3_Init+0x90>)
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 8002256:	4b18      	ldr	r3, [pc, #96]	@ (80022b8 <MX_TIM3_Init+0x90>)
 8002258:	2231      	movs	r2, #49	@ 0x31
 800225a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800225c:	4b16      	ldr	r3, [pc, #88]	@ (80022b8 <MX_TIM3_Init+0x90>)
 800225e:	2200      	movs	r2, #0
 8002260:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002262:	4b15      	ldr	r3, [pc, #84]	@ (80022b8 <MX_TIM3_Init+0x90>)
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002268:	4813      	ldr	r0, [pc, #76]	@ (80022b8 <MX_TIM3_Init+0x90>)
 800226a:	f002 f867 	bl	800433c <HAL_TIM_Base_Init>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002274:	f000 f90a 	bl	800248c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002278:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800227c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800227e:	f107 0308 	add.w	r3, r7, #8
 8002282:	4619      	mov	r1, r3
 8002284:	480c      	ldr	r0, [pc, #48]	@ (80022b8 <MX_TIM3_Init+0x90>)
 8002286:	f002 fa35 	bl	80046f4 <HAL_TIM_ConfigClockSource>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002290:	f000 f8fc 	bl	800248c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002294:	2300      	movs	r3, #0
 8002296:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002298:	2300      	movs	r3, #0
 800229a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800229c:	463b      	mov	r3, r7
 800229e:	4619      	mov	r1, r3
 80022a0:	4805      	ldr	r0, [pc, #20]	@ (80022b8 <MX_TIM3_Init+0x90>)
 80022a2:	f002 fc1f 	bl	8004ae4 <HAL_TIMEx_MasterConfigSynchronization>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80022ac:	f000 f8ee 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80022b0:	bf00      	nop
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	200006dc 	.word	0x200006dc
 80022bc:	40000400 	.word	0x40000400

080022c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022c4:	4b11      	ldr	r3, [pc, #68]	@ (800230c <MX_USART1_UART_Init+0x4c>)
 80022c6:	4a12      	ldr	r2, [pc, #72]	@ (8002310 <MX_USART1_UART_Init+0x50>)
 80022c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022ca:	4b10      	ldr	r3, [pc, #64]	@ (800230c <MX_USART1_UART_Init+0x4c>)
 80022cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022d2:	4b0e      	ldr	r3, [pc, #56]	@ (800230c <MX_USART1_UART_Init+0x4c>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022d8:	4b0c      	ldr	r3, [pc, #48]	@ (800230c <MX_USART1_UART_Init+0x4c>)
 80022da:	2200      	movs	r2, #0
 80022dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022de:	4b0b      	ldr	r3, [pc, #44]	@ (800230c <MX_USART1_UART_Init+0x4c>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022e4:	4b09      	ldr	r3, [pc, #36]	@ (800230c <MX_USART1_UART_Init+0x4c>)
 80022e6:	220c      	movs	r2, #12
 80022e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ea:	4b08      	ldr	r3, [pc, #32]	@ (800230c <MX_USART1_UART_Init+0x4c>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f0:	4b06      	ldr	r3, [pc, #24]	@ (800230c <MX_USART1_UART_Init+0x4c>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022f6:	4805      	ldr	r0, [pc, #20]	@ (800230c <MX_USART1_UART_Init+0x4c>)
 80022f8:	f002 fc64 	bl	8004bc4 <HAL_UART_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002302:	f000 f8c3 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000724 	.word	0x20000724
 8002310:	40013800 	.word	0x40013800

08002314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231a:	f107 0310 	add.w	r3, r7, #16
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	605a      	str	r2, [r3, #4]
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002328:	4b54      	ldr	r3, [pc, #336]	@ (800247c <MX_GPIO_Init+0x168>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	4a53      	ldr	r2, [pc, #332]	@ (800247c <MX_GPIO_Init+0x168>)
 800232e:	f043 0310 	orr.w	r3, r3, #16
 8002332:	6193      	str	r3, [r2, #24]
 8002334:	4b51      	ldr	r3, [pc, #324]	@ (800247c <MX_GPIO_Init+0x168>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002340:	4b4e      	ldr	r3, [pc, #312]	@ (800247c <MX_GPIO_Init+0x168>)
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	4a4d      	ldr	r2, [pc, #308]	@ (800247c <MX_GPIO_Init+0x168>)
 8002346:	f043 0320 	orr.w	r3, r3, #32
 800234a:	6193      	str	r3, [r2, #24]
 800234c:	4b4b      	ldr	r3, [pc, #300]	@ (800247c <MX_GPIO_Init+0x168>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	f003 0320 	and.w	r3, r3, #32
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002358:	4b48      	ldr	r3, [pc, #288]	@ (800247c <MX_GPIO_Init+0x168>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	4a47      	ldr	r2, [pc, #284]	@ (800247c <MX_GPIO_Init+0x168>)
 800235e:	f043 0304 	orr.w	r3, r3, #4
 8002362:	6193      	str	r3, [r2, #24]
 8002364:	4b45      	ldr	r3, [pc, #276]	@ (800247c <MX_GPIO_Init+0x168>)
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	607b      	str	r3, [r7, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002370:	4b42      	ldr	r3, [pc, #264]	@ (800247c <MX_GPIO_Init+0x168>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	4a41      	ldr	r2, [pc, #260]	@ (800247c <MX_GPIO_Init+0x168>)
 8002376:	f043 0308 	orr.w	r3, r3, #8
 800237a:	6193      	str	r3, [r2, #24]
 800237c:	4b3f      	ldr	r3, [pc, #252]	@ (800247c <MX_GPIO_Init+0x168>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	603b      	str	r3, [r7, #0]
 8002386:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_SET);
 8002388:	2201      	movs	r2, #1
 800238a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800238e:	483c      	ldr	r0, [pc, #240]	@ (8002480 <MX_GPIO_Init+0x16c>)
 8002390:	f000 fde1 	bl	8002f56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PA3_TEMP_DATA_GPIO_Port, PA3_TEMP_DATA_Pin, GPIO_PIN_SET);
 8002394:	2201      	movs	r2, #1
 8002396:	2108      	movs	r1, #8
 8002398:	483a      	ldr	r0, [pc, #232]	@ (8002484 <MX_GPIO_Init+0x170>)
 800239a:	f000 fddc 	bl	8002f56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FND_SCLK_Pin|FND_RCLK_Pin|FND_DIO_Pin|PB6_LED1_Pin, GPIO_PIN_SET);
 800239e:	2201      	movs	r2, #1
 80023a0:	f24e 0140 	movw	r1, #57408	@ 0xe040
 80023a4:	4838      	ldr	r0, [pc, #224]	@ (8002488 <MX_GPIO_Init+0x174>)
 80023a6:	f000 fdd6 	bl	8002f56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PB5_RELAY_CTRL_GPIO_Port, PB5_RELAY_CTRL_Pin, GPIO_PIN_RESET);
 80023aa:	2200      	movs	r2, #0
 80023ac:	2120      	movs	r1, #32
 80023ae:	4836      	ldr	r0, [pc, #216]	@ (8002488 <MX_GPIO_Init+0x174>)
 80023b0:	f000 fdd1 	bl	8002f56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 80023b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ba:	2301      	movs	r3, #1
 80023bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023be:	2302      	movs	r3, #2
 80023c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023c2:	2303      	movs	r3, #3
 80023c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 80023c6:	f107 0310 	add.w	r3, r7, #16
 80023ca:	4619      	mov	r1, r3
 80023cc:	482c      	ldr	r0, [pc, #176]	@ (8002480 <MX_GPIO_Init+0x16c>)
 80023ce:	f000 fc27 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_SWITCH_Pin */
  GPIO_InitStruct.Pin = GPIO_SWITCH_Pin;
 80023d2:	2301      	movs	r3, #1
 80023d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023da:	2301      	movs	r3, #1
 80023dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_SWITCH_GPIO_Port, &GPIO_InitStruct);
 80023de:	f107 0310 	add.w	r3, r7, #16
 80023e2:	4619      	mov	r1, r3
 80023e4:	4827      	ldr	r0, [pc, #156]	@ (8002484 <MX_GPIO_Init+0x170>)
 80023e6:	f000 fc1b 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3_TEMP_DATA_Pin */
  GPIO_InitStruct.Pin = PA3_TEMP_DATA_Pin;
 80023ea:	2308      	movs	r3, #8
 80023ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ee:	2301      	movs	r3, #1
 80023f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023f2:	2301      	movs	r3, #1
 80023f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023f6:	2303      	movs	r3, #3
 80023f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PA3_TEMP_DATA_GPIO_Port, &GPIO_InitStruct);
 80023fa:	f107 0310 	add.w	r3, r7, #16
 80023fe:	4619      	mov	r1, r3
 8002400:	4820      	ldr	r0, [pc, #128]	@ (8002484 <MX_GPIO_Init+0x170>)
 8002402:	f000 fc0d 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0_TEMP_SET_UP_Pin */
  GPIO_InitStruct.Pin = PB0_TEMP_SET_UP_Pin;
 8002406:	2301      	movs	r3, #1
 8002408:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800240e:	2301      	movs	r3, #1
 8002410:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PB0_TEMP_SET_UP_GPIO_Port, &GPIO_InitStruct);
 8002412:	f107 0310 	add.w	r3, r7, #16
 8002416:	4619      	mov	r1, r3
 8002418:	481b      	ldr	r0, [pc, #108]	@ (8002488 <MX_GPIO_Init+0x174>)
 800241a:	f000 fc01 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : FND_SCLK_Pin FND_RCLK_Pin FND_DIO_Pin */
  GPIO_InitStruct.Pin = FND_SCLK_Pin|FND_RCLK_Pin|FND_DIO_Pin;
 800241e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002424:	2301      	movs	r3, #1
 8002426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002428:	2301      	movs	r3, #1
 800242a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800242c:	2303      	movs	r3, #3
 800242e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002430:	f107 0310 	add.w	r3, r7, #16
 8002434:	4619      	mov	r1, r3
 8002436:	4814      	ldr	r0, [pc, #80]	@ (8002488 <MX_GPIO_Init+0x174>)
 8002438:	f000 fbf2 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5_RELAY_CTRL_Pin */
  GPIO_InitStruct.Pin = PB5_RELAY_CTRL_Pin;
 800243c:	2320      	movs	r3, #32
 800243e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002440:	2301      	movs	r3, #1
 8002442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002444:	2302      	movs	r3, #2
 8002446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002448:	2303      	movs	r3, #3
 800244a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB5_RELAY_CTRL_GPIO_Port, &GPIO_InitStruct);
 800244c:	f107 0310 	add.w	r3, r7, #16
 8002450:	4619      	mov	r1, r3
 8002452:	480d      	ldr	r0, [pc, #52]	@ (8002488 <MX_GPIO_Init+0x174>)
 8002454:	f000 fbe4 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6_LED1_Pin */
  GPIO_InitStruct.Pin = PB6_LED1_Pin;
 8002458:	2340      	movs	r3, #64	@ 0x40
 800245a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800245c:	2301      	movs	r3, #1
 800245e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002460:	2301      	movs	r3, #1
 8002462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002464:	2302      	movs	r3, #2
 8002466:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB6_LED1_GPIO_Port, &GPIO_InitStruct);
 8002468:	f107 0310 	add.w	r3, r7, #16
 800246c:	4619      	mov	r1, r3
 800246e:	4806      	ldr	r0, [pc, #24]	@ (8002488 <MX_GPIO_Init+0x174>)
 8002470:	f000 fbd6 	bl	8002c20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002474:	bf00      	nop
 8002476:	3720      	adds	r7, #32
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40021000 	.word	0x40021000
 8002480:	40011000 	.word	0x40011000
 8002484:	40010800 	.word	0x40010800
 8002488:	40010c00 	.word	0x40010c00

0800248c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002490:	b672      	cpsid	i
}
 8002492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002494:	bf00      	nop
 8002496:	e7fd      	b.n	8002494 <Error_Handler+0x8>

08002498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800249e:	4b15      	ldr	r3, [pc, #84]	@ (80024f4 <HAL_MspInit+0x5c>)
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	4a14      	ldr	r2, [pc, #80]	@ (80024f4 <HAL_MspInit+0x5c>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	6193      	str	r3, [r2, #24]
 80024aa:	4b12      	ldr	r3, [pc, #72]	@ (80024f4 <HAL_MspInit+0x5c>)
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	60bb      	str	r3, [r7, #8]
 80024b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024b6:	4b0f      	ldr	r3, [pc, #60]	@ (80024f4 <HAL_MspInit+0x5c>)
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	4a0e      	ldr	r2, [pc, #56]	@ (80024f4 <HAL_MspInit+0x5c>)
 80024bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024c0:	61d3      	str	r3, [r2, #28]
 80024c2:	4b0c      	ldr	r3, [pc, #48]	@ (80024f4 <HAL_MspInit+0x5c>)
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ca:	607b      	str	r3, [r7, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024ce:	4b0a      	ldr	r3, [pc, #40]	@ (80024f8 <HAL_MspInit+0x60>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	4a04      	ldr	r2, [pc, #16]	@ (80024f8 <HAL_MspInit+0x60>)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ea:	bf00      	nop
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40010000 	.word	0x40010000

080024fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	f107 0310 	add.w	r3, r7, #16
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a16      	ldr	r2, [pc, #88]	@ (8002570 <HAL_I2C_MspInit+0x74>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d124      	bne.n	8002566 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800251c:	4b15      	ldr	r3, [pc, #84]	@ (8002574 <HAL_I2C_MspInit+0x78>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	4a14      	ldr	r2, [pc, #80]	@ (8002574 <HAL_I2C_MspInit+0x78>)
 8002522:	f043 0308 	orr.w	r3, r3, #8
 8002526:	6193      	str	r3, [r2, #24]
 8002528:	4b12      	ldr	r3, [pc, #72]	@ (8002574 <HAL_I2C_MspInit+0x78>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002534:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002538:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800253a:	2312      	movs	r3, #18
 800253c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800253e:	2303      	movs	r3, #3
 8002540:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002542:	f107 0310 	add.w	r3, r7, #16
 8002546:	4619      	mov	r1, r3
 8002548:	480b      	ldr	r0, [pc, #44]	@ (8002578 <HAL_I2C_MspInit+0x7c>)
 800254a:	f000 fb69 	bl	8002c20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800254e:	4b09      	ldr	r3, [pc, #36]	@ (8002574 <HAL_I2C_MspInit+0x78>)
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	4a08      	ldr	r2, [pc, #32]	@ (8002574 <HAL_I2C_MspInit+0x78>)
 8002554:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002558:	61d3      	str	r3, [r2, #28]
 800255a:	4b06      	ldr	r3, [pc, #24]	@ (8002574 <HAL_I2C_MspInit+0x78>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002566:	bf00      	nop
 8002568:	3720      	adds	r7, #32
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40005800 	.word	0x40005800
 8002574:	40021000 	.word	0x40021000
 8002578:	40010c00 	.word	0x40010c00

0800257c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800258c:	d114      	bne.n	80025b8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800258e:	4b19      	ldr	r3, [pc, #100]	@ (80025f4 <HAL_TIM_Base_MspInit+0x78>)
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	4a18      	ldr	r2, [pc, #96]	@ (80025f4 <HAL_TIM_Base_MspInit+0x78>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	61d3      	str	r3, [r2, #28]
 800259a:	4b16      	ldr	r3, [pc, #88]	@ (80025f4 <HAL_TIM_Base_MspInit+0x78>)
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025a6:	2200      	movs	r2, #0
 80025a8:	2100      	movs	r1, #0
 80025aa:	201c      	movs	r0, #28
 80025ac:	f000 fb01 	bl	8002bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025b0:	201c      	movs	r0, #28
 80025b2:	f000 fb1a 	bl	8002bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025b6:	e018      	b.n	80025ea <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0e      	ldr	r2, [pc, #56]	@ (80025f8 <HAL_TIM_Base_MspInit+0x7c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d113      	bne.n	80025ea <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025c2:	4b0c      	ldr	r3, [pc, #48]	@ (80025f4 <HAL_TIM_Base_MspInit+0x78>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	4a0b      	ldr	r2, [pc, #44]	@ (80025f4 <HAL_TIM_Base_MspInit+0x78>)
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	61d3      	str	r3, [r2, #28]
 80025ce:	4b09      	ldr	r3, [pc, #36]	@ (80025f4 <HAL_TIM_Base_MspInit+0x78>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	60bb      	str	r3, [r7, #8]
 80025d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 10, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	210a      	movs	r1, #10
 80025de:	201d      	movs	r0, #29
 80025e0:	f000 fae7 	bl	8002bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025e4:	201d      	movs	r0, #29
 80025e6:	f000 fb00 	bl	8002bea <HAL_NVIC_EnableIRQ>
}
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40000400 	.word	0x40000400

080025fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002604:	f107 0310 	add.w	r3, r7, #16
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a1c      	ldr	r2, [pc, #112]	@ (8002688 <HAL_UART_MspInit+0x8c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d131      	bne.n	8002680 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800261c:	4b1b      	ldr	r3, [pc, #108]	@ (800268c <HAL_UART_MspInit+0x90>)
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	4a1a      	ldr	r2, [pc, #104]	@ (800268c <HAL_UART_MspInit+0x90>)
 8002622:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002626:	6193      	str	r3, [r2, #24]
 8002628:	4b18      	ldr	r3, [pc, #96]	@ (800268c <HAL_UART_MspInit+0x90>)
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002634:	4b15      	ldr	r3, [pc, #84]	@ (800268c <HAL_UART_MspInit+0x90>)
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	4a14      	ldr	r2, [pc, #80]	@ (800268c <HAL_UART_MspInit+0x90>)
 800263a:	f043 0304 	orr.w	r3, r3, #4
 800263e:	6193      	str	r3, [r2, #24]
 8002640:	4b12      	ldr	r3, [pc, #72]	@ (800268c <HAL_UART_MspInit+0x90>)
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800264c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002650:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002652:	2302      	movs	r3, #2
 8002654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002656:	2303      	movs	r3, #3
 8002658:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265a:	f107 0310 	add.w	r3, r7, #16
 800265e:	4619      	mov	r1, r3
 8002660:	480b      	ldr	r0, [pc, #44]	@ (8002690 <HAL_UART_MspInit+0x94>)
 8002662:	f000 fadd 	bl	8002c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002666:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800266a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002670:	2300      	movs	r3, #0
 8002672:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002674:	f107 0310 	add.w	r3, r7, #16
 8002678:	4619      	mov	r1, r3
 800267a:	4805      	ldr	r0, [pc, #20]	@ (8002690 <HAL_UART_MspInit+0x94>)
 800267c:	f000 fad0 	bl	8002c20 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002680:	bf00      	nop
 8002682:	3720      	adds	r7, #32
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40013800 	.word	0x40013800
 800268c:	40021000 	.word	0x40021000
 8002690:	40010800 	.word	0x40010800

08002694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002698:	bf00      	nop
 800269a:	e7fd      	b.n	8002698 <NMI_Handler+0x4>

0800269c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026a0:	bf00      	nop
 80026a2:	e7fd      	b.n	80026a0 <HardFault_Handler+0x4>

080026a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026a8:	bf00      	nop
 80026aa:	e7fd      	b.n	80026a8 <MemManage_Handler+0x4>

080026ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026b0:	bf00      	nop
 80026b2:	e7fd      	b.n	80026b0 <BusFault_Handler+0x4>

080026b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026b8:	bf00      	nop
 80026ba:	e7fd      	b.n	80026b8 <UsageFault_Handler+0x4>

080026bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026d8:	bf00      	nop
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr

080026e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026e4:	f000 f94e 	bl	8002984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026e8:	bf00      	nop
 80026ea:	bd80      	pop	{r7, pc}

080026ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	m_time++;
 80026f0:	4b04      	ldr	r3, [pc, #16]	@ (8002704 <TIM2_IRQHandler+0x18>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	3301      	adds	r3, #1
 80026f6:	4a03      	ldr	r2, [pc, #12]	@ (8002704 <TIM2_IRQHandler+0x18>)
 80026f8:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026fa:	4803      	ldr	r0, [pc, #12]	@ (8002708 <TIM2_IRQHandler+0x1c>)
 80026fc:	f001 ff0a 	bl	8004514 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002700:	bf00      	nop
 8002702:	bd80      	pop	{r7, pc}
 8002704:	2000076c 	.word	0x2000076c
 8002708:	20000694 	.word	0x20000694

0800270c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(isTemperSensorInit() && !isBusy()){
 8002710:	f7fe fba2 	bl	8000e58 <isTemperSensorInit>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d013      	beq.n	8002742 <TIM3_IRQHandler+0x36>
 800271a:	f7fe fba7 	bl	8000e6c <isBusy>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10e      	bne.n	8002742 <TIM3_IRQHandler+0x36>
		digit4_temper((int)(getCurrentTemper() * 10));
 8002724:	f7fe fe50 	bl	80013c8 <getCurrentTemper>
 8002728:	4603      	mov	r3, r0
 800272a:	4908      	ldr	r1, [pc, #32]	@ (800274c <TIM3_IRQHandler+0x40>)
 800272c:	4618      	mov	r0, r3
 800272e:	f7fd fd17 	bl	8000160 <__aeabi_fmul>
 8002732:	4603      	mov	r3, r0
 8002734:	4618      	mov	r0, r3
 8002736:	f7fe fb69 	bl	8000e0c <__aeabi_f2iz>
 800273a:	4603      	mov	r3, r0
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fb7f 	bl	8001e40 <digit4_temper>
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002742:	4803      	ldr	r0, [pc, #12]	@ (8002750 <TIM3_IRQHandler+0x44>)
 8002744:	f001 fee6 	bl	8004514 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002748:	bf00      	nop
 800274a:	bd80      	pop	{r7, pc}
 800274c:	41200000 	.word	0x41200000
 8002750:	200006dc 	.word	0x200006dc

08002754 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return 1;
 8002758:	2301      	movs	r3, #1
}
 800275a:	4618      	mov	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr

08002762 <_kill>:

int _kill(int pid, int sig)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800276c:	f003 fa02 	bl	8005b74 <__errno>
 8002770:	4603      	mov	r3, r0
 8002772:	2216      	movs	r2, #22
 8002774:	601a      	str	r2, [r3, #0]
  return -1;
 8002776:	f04f 33ff 	mov.w	r3, #4294967295
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <_exit>:

void _exit (int status)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800278a:	f04f 31ff 	mov.w	r1, #4294967295
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff ffe7 	bl	8002762 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002794:	bf00      	nop
 8002796:	e7fd      	b.n	8002794 <_exit+0x12>

08002798 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	e00a      	b.n	80027c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027aa:	f3af 8000 	nop.w
 80027ae:	4601      	mov	r1, r0
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	60ba      	str	r2, [r7, #8]
 80027b6:	b2ca      	uxtb	r2, r1
 80027b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	3301      	adds	r3, #1
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	dbf0      	blt.n	80027aa <_read+0x12>
  }

  return len;
 80027c8:	687b      	ldr	r3, [r7, #4]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027de:	4618      	mov	r0, r3
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027f8:	605a      	str	r2, [r3, #4]
  return 0;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr

08002806 <_isatty>:

int _isatty(int file)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800280e:	2301      	movs	r3, #1
}
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr

0800281a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800281a:	b480      	push	{r7}
 800281c:	b085      	sub	sp, #20
 800281e:	af00      	add	r7, sp, #0
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr
	...

08002834 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800283c:	4a14      	ldr	r2, [pc, #80]	@ (8002890 <_sbrk+0x5c>)
 800283e:	4b15      	ldr	r3, [pc, #84]	@ (8002894 <_sbrk+0x60>)
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002848:	4b13      	ldr	r3, [pc, #76]	@ (8002898 <_sbrk+0x64>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d102      	bne.n	8002856 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002850:	4b11      	ldr	r3, [pc, #68]	@ (8002898 <_sbrk+0x64>)
 8002852:	4a12      	ldr	r2, [pc, #72]	@ (800289c <_sbrk+0x68>)
 8002854:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002856:	4b10      	ldr	r3, [pc, #64]	@ (8002898 <_sbrk+0x64>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4413      	add	r3, r2
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	429a      	cmp	r2, r3
 8002862:	d207      	bcs.n	8002874 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002864:	f003 f986 	bl	8005b74 <__errno>
 8002868:	4603      	mov	r3, r0
 800286a:	220c      	movs	r2, #12
 800286c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800286e:	f04f 33ff 	mov.w	r3, #4294967295
 8002872:	e009      	b.n	8002888 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002874:	4b08      	ldr	r3, [pc, #32]	@ (8002898 <_sbrk+0x64>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800287a:	4b07      	ldr	r3, [pc, #28]	@ (8002898 <_sbrk+0x64>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4413      	add	r3, r2
 8002882:	4a05      	ldr	r2, [pc, #20]	@ (8002898 <_sbrk+0x64>)
 8002884:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002886:	68fb      	ldr	r3, [r7, #12]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20005000 	.word	0x20005000
 8002894:	00000400 	.word	0x00000400
 8002898:	20000770 	.word	0x20000770
 800289c:	200008c8 	.word	0x200008c8

080028a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028ac:	f7ff fff8 	bl	80028a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028b0:	480b      	ldr	r0, [pc, #44]	@ (80028e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80028b2:	490c      	ldr	r1, [pc, #48]	@ (80028e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80028b4:	4a0c      	ldr	r2, [pc, #48]	@ (80028e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80028b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028b8:	e002      	b.n	80028c0 <LoopCopyDataInit>

080028ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028be:	3304      	adds	r3, #4

080028c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028c4:	d3f9      	bcc.n	80028ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028c6:	4a09      	ldr	r2, [pc, #36]	@ (80028ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80028c8:	4c09      	ldr	r4, [pc, #36]	@ (80028f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028cc:	e001      	b.n	80028d2 <LoopFillZerobss>

080028ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028d0:	3204      	adds	r2, #4

080028d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028d4:	d3fb      	bcc.n	80028ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028d6:	f003 f953 	bl	8005b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028da:	f7ff fb8b 	bl	8001ff4 <main>
  bx lr
 80028de:	4770      	bx	lr
  ldr r0, =_sdata
 80028e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028e4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80028e8:	080084e8 	.word	0x080084e8
  ldr r2, =_sbss
 80028ec:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80028f0:	200008c4 	.word	0x200008c4

080028f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028f4:	e7fe      	b.n	80028f4 <ADC1_2_IRQHandler>
	...

080028f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028fc:	4b08      	ldr	r3, [pc, #32]	@ (8002920 <HAL_Init+0x28>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a07      	ldr	r2, [pc, #28]	@ (8002920 <HAL_Init+0x28>)
 8002902:	f043 0310 	orr.w	r3, r3, #16
 8002906:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002908:	2003      	movs	r0, #3
 800290a:	f000 f947 	bl	8002b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800290e:	200f      	movs	r0, #15
 8002910:	f000 f808 	bl	8002924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002914:	f7ff fdc0 	bl	8002498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40022000 	.word	0x40022000

08002924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800292c:	4b12      	ldr	r3, [pc, #72]	@ (8002978 <HAL_InitTick+0x54>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	4b12      	ldr	r3, [pc, #72]	@ (800297c <HAL_InitTick+0x58>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	4619      	mov	r1, r3
 8002936:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800293a:	fbb3 f3f1 	udiv	r3, r3, r1
 800293e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002942:	4618      	mov	r0, r3
 8002944:	f000 f95f 	bl	8002c06 <HAL_SYSTICK_Config>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e00e      	b.n	8002970 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b0f      	cmp	r3, #15
 8002956:	d80a      	bhi.n	800296e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002958:	2200      	movs	r2, #0
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	f04f 30ff 	mov.w	r0, #4294967295
 8002960:	f000 f927 	bl	8002bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002964:	4a06      	ldr	r2, [pc, #24]	@ (8002980 <HAL_InitTick+0x5c>)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	e000      	b.n	8002970 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20000000 	.word	0x20000000
 800297c:	20000008 	.word	0x20000008
 8002980:	20000004 	.word	0x20000004

08002984 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002988:	4b05      	ldr	r3, [pc, #20]	@ (80029a0 <HAL_IncTick+0x1c>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	461a      	mov	r2, r3
 800298e:	4b05      	ldr	r3, [pc, #20]	@ (80029a4 <HAL_IncTick+0x20>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4413      	add	r3, r2
 8002994:	4a03      	ldr	r2, [pc, #12]	@ (80029a4 <HAL_IncTick+0x20>)
 8002996:	6013      	str	r3, [r2, #0]
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr
 80029a0:	20000008 	.word	0x20000008
 80029a4:	20000774 	.word	0x20000774

080029a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return uwTick;
 80029ac:	4b02      	ldr	r3, [pc, #8]	@ (80029b8 <HAL_GetTick+0x10>)
 80029ae:	681b      	ldr	r3, [r3, #0]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr
 80029b8:	20000774 	.word	0x20000774

080029bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029c4:	f7ff fff0 	bl	80029a8 <HAL_GetTick>
 80029c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d4:	d005      	beq.n	80029e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002a00 <HAL_Delay+0x44>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4413      	add	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029e2:	bf00      	nop
 80029e4:	f7ff ffe0 	bl	80029a8 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d8f7      	bhi.n	80029e4 <HAL_Delay+0x28>
  {
  }
}
 80029f4:	bf00      	nop
 80029f6:	bf00      	nop
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000008 	.word	0x20000008

08002a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a14:	4b0c      	ldr	r3, [pc, #48]	@ (8002a48 <__NVIC_SetPriorityGrouping+0x44>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a20:	4013      	ands	r3, r2
 8002a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a36:	4a04      	ldr	r2, [pc, #16]	@ (8002a48 <__NVIC_SetPriorityGrouping+0x44>)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	60d3      	str	r3, [r2, #12]
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a50:	4b04      	ldr	r3, [pc, #16]	@ (8002a64 <__NVIC_GetPriorityGrouping+0x18>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	0a1b      	lsrs	r3, r3, #8
 8002a56:	f003 0307 	and.w	r3, r3, #7
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	db0b      	blt.n	8002a92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	f003 021f 	and.w	r2, r3, #31
 8002a80:	4906      	ldr	r1, [pc, #24]	@ (8002a9c <__NVIC_EnableIRQ+0x34>)
 8002a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	2001      	movs	r0, #1
 8002a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr
 8002a9c:	e000e100 	.word	0xe000e100

08002aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	6039      	str	r1, [r7, #0]
 8002aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	db0a      	blt.n	8002aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	490c      	ldr	r1, [pc, #48]	@ (8002aec <__NVIC_SetPriority+0x4c>)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	0112      	lsls	r2, r2, #4
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ac8:	e00a      	b.n	8002ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	4908      	ldr	r1, [pc, #32]	@ (8002af0 <__NVIC_SetPriority+0x50>)
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	3b04      	subs	r3, #4
 8002ad8:	0112      	lsls	r2, r2, #4
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	440b      	add	r3, r1
 8002ade:	761a      	strb	r2, [r3, #24]
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	e000e100 	.word	0xe000e100
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b089      	sub	sp, #36	@ 0x24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f1c3 0307 	rsb	r3, r3, #7
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	bf28      	it	cs
 8002b12:	2304      	movcs	r3, #4
 8002b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	2b06      	cmp	r3, #6
 8002b1c:	d902      	bls.n	8002b24 <NVIC_EncodePriority+0x30>
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3b03      	subs	r3, #3
 8002b22:	e000      	b.n	8002b26 <NVIC_EncodePriority+0x32>
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b28:	f04f 32ff 	mov.w	r2, #4294967295
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43da      	mvns	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	401a      	ands	r2, r3
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	fa01 f303 	lsl.w	r3, r1, r3
 8002b46:	43d9      	mvns	r1, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b4c:	4313      	orrs	r3, r2
         );
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3724      	adds	r7, #36	@ 0x24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b68:	d301      	bcc.n	8002b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e00f      	b.n	8002b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b98 <SysTick_Config+0x40>)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b76:	210f      	movs	r1, #15
 8002b78:	f04f 30ff 	mov.w	r0, #4294967295
 8002b7c:	f7ff ff90 	bl	8002aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b80:	4b05      	ldr	r3, [pc, #20]	@ (8002b98 <SysTick_Config+0x40>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b86:	4b04      	ldr	r3, [pc, #16]	@ (8002b98 <SysTick_Config+0x40>)
 8002b88:	2207      	movs	r2, #7
 8002b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	e000e010 	.word	0xe000e010

08002b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff ff2d 	bl	8002a04 <__NVIC_SetPriorityGrouping>
}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b086      	sub	sp, #24
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	4603      	mov	r3, r0
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	607a      	str	r2, [r7, #4]
 8002bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bc4:	f7ff ff42 	bl	8002a4c <__NVIC_GetPriorityGrouping>
 8002bc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	68b9      	ldr	r1, [r7, #8]
 8002bce:	6978      	ldr	r0, [r7, #20]
 8002bd0:	f7ff ff90 	bl	8002af4 <NVIC_EncodePriority>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bda:	4611      	mov	r1, r2
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff ff5f 	bl	8002aa0 <__NVIC_SetPriority>
}
 8002be2:	bf00      	nop
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff ff35 	bl	8002a68 <__NVIC_EnableIRQ>
}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff ffa2 	bl	8002b58 <SysTick_Config>
 8002c14:	4603      	mov	r3, r0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b08b      	sub	sp, #44	@ 0x2c
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c32:	e169      	b.n	8002f08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c34:	2201      	movs	r2, #1
 8002c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	f040 8158 	bne.w	8002f02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	4a9a      	ldr	r2, [pc, #616]	@ (8002ec0 <HAL_GPIO_Init+0x2a0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d05e      	beq.n	8002d1a <HAL_GPIO_Init+0xfa>
 8002c5c:	4a98      	ldr	r2, [pc, #608]	@ (8002ec0 <HAL_GPIO_Init+0x2a0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d875      	bhi.n	8002d4e <HAL_GPIO_Init+0x12e>
 8002c62:	4a98      	ldr	r2, [pc, #608]	@ (8002ec4 <HAL_GPIO_Init+0x2a4>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d058      	beq.n	8002d1a <HAL_GPIO_Init+0xfa>
 8002c68:	4a96      	ldr	r2, [pc, #600]	@ (8002ec4 <HAL_GPIO_Init+0x2a4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d86f      	bhi.n	8002d4e <HAL_GPIO_Init+0x12e>
 8002c6e:	4a96      	ldr	r2, [pc, #600]	@ (8002ec8 <HAL_GPIO_Init+0x2a8>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d052      	beq.n	8002d1a <HAL_GPIO_Init+0xfa>
 8002c74:	4a94      	ldr	r2, [pc, #592]	@ (8002ec8 <HAL_GPIO_Init+0x2a8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d869      	bhi.n	8002d4e <HAL_GPIO_Init+0x12e>
 8002c7a:	4a94      	ldr	r2, [pc, #592]	@ (8002ecc <HAL_GPIO_Init+0x2ac>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d04c      	beq.n	8002d1a <HAL_GPIO_Init+0xfa>
 8002c80:	4a92      	ldr	r2, [pc, #584]	@ (8002ecc <HAL_GPIO_Init+0x2ac>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d863      	bhi.n	8002d4e <HAL_GPIO_Init+0x12e>
 8002c86:	4a92      	ldr	r2, [pc, #584]	@ (8002ed0 <HAL_GPIO_Init+0x2b0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d046      	beq.n	8002d1a <HAL_GPIO_Init+0xfa>
 8002c8c:	4a90      	ldr	r2, [pc, #576]	@ (8002ed0 <HAL_GPIO_Init+0x2b0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d85d      	bhi.n	8002d4e <HAL_GPIO_Init+0x12e>
 8002c92:	2b12      	cmp	r3, #18
 8002c94:	d82a      	bhi.n	8002cec <HAL_GPIO_Init+0xcc>
 8002c96:	2b12      	cmp	r3, #18
 8002c98:	d859      	bhi.n	8002d4e <HAL_GPIO_Init+0x12e>
 8002c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8002ca0 <HAL_GPIO_Init+0x80>)
 8002c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca0:	08002d1b 	.word	0x08002d1b
 8002ca4:	08002cf5 	.word	0x08002cf5
 8002ca8:	08002d07 	.word	0x08002d07
 8002cac:	08002d49 	.word	0x08002d49
 8002cb0:	08002d4f 	.word	0x08002d4f
 8002cb4:	08002d4f 	.word	0x08002d4f
 8002cb8:	08002d4f 	.word	0x08002d4f
 8002cbc:	08002d4f 	.word	0x08002d4f
 8002cc0:	08002d4f 	.word	0x08002d4f
 8002cc4:	08002d4f 	.word	0x08002d4f
 8002cc8:	08002d4f 	.word	0x08002d4f
 8002ccc:	08002d4f 	.word	0x08002d4f
 8002cd0:	08002d4f 	.word	0x08002d4f
 8002cd4:	08002d4f 	.word	0x08002d4f
 8002cd8:	08002d4f 	.word	0x08002d4f
 8002cdc:	08002d4f 	.word	0x08002d4f
 8002ce0:	08002d4f 	.word	0x08002d4f
 8002ce4:	08002cfd 	.word	0x08002cfd
 8002ce8:	08002d11 	.word	0x08002d11
 8002cec:	4a79      	ldr	r2, [pc, #484]	@ (8002ed4 <HAL_GPIO_Init+0x2b4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d013      	beq.n	8002d1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002cf2:	e02c      	b.n	8002d4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	623b      	str	r3, [r7, #32]
          break;
 8002cfa:	e029      	b.n	8002d50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	3304      	adds	r3, #4
 8002d02:	623b      	str	r3, [r7, #32]
          break;
 8002d04:	e024      	b.n	8002d50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	3308      	adds	r3, #8
 8002d0c:	623b      	str	r3, [r7, #32]
          break;
 8002d0e:	e01f      	b.n	8002d50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	330c      	adds	r3, #12
 8002d16:	623b      	str	r3, [r7, #32]
          break;
 8002d18:	e01a      	b.n	8002d50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d102      	bne.n	8002d28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d22:	2304      	movs	r3, #4
 8002d24:	623b      	str	r3, [r7, #32]
          break;
 8002d26:	e013      	b.n	8002d50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d105      	bne.n	8002d3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d30:	2308      	movs	r3, #8
 8002d32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	69fa      	ldr	r2, [r7, #28]
 8002d38:	611a      	str	r2, [r3, #16]
          break;
 8002d3a:	e009      	b.n	8002d50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d3c:	2308      	movs	r3, #8
 8002d3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69fa      	ldr	r2, [r7, #28]
 8002d44:	615a      	str	r2, [r3, #20]
          break;
 8002d46:	e003      	b.n	8002d50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	623b      	str	r3, [r7, #32]
          break;
 8002d4c:	e000      	b.n	8002d50 <HAL_GPIO_Init+0x130>
          break;
 8002d4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	2bff      	cmp	r3, #255	@ 0xff
 8002d54:	d801      	bhi.n	8002d5a <HAL_GPIO_Init+0x13a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	e001      	b.n	8002d5e <HAL_GPIO_Init+0x13e>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	2bff      	cmp	r3, #255	@ 0xff
 8002d64:	d802      	bhi.n	8002d6c <HAL_GPIO_Init+0x14c>
 8002d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	e002      	b.n	8002d72 <HAL_GPIO_Init+0x152>
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6e:	3b08      	subs	r3, #8
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	210f      	movs	r1, #15
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	401a      	ands	r2, r3
 8002d84:	6a39      	ldr	r1, [r7, #32]
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 80b1 	beq.w	8002f02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002da0:	4b4d      	ldr	r3, [pc, #308]	@ (8002ed8 <HAL_GPIO_Init+0x2b8>)
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	4a4c      	ldr	r2, [pc, #304]	@ (8002ed8 <HAL_GPIO_Init+0x2b8>)
 8002da6:	f043 0301 	orr.w	r3, r3, #1
 8002daa:	6193      	str	r3, [r2, #24]
 8002dac:	4b4a      	ldr	r3, [pc, #296]	@ (8002ed8 <HAL_GPIO_Init+0x2b8>)
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002db8:	4a48      	ldr	r2, [pc, #288]	@ (8002edc <HAL_GPIO_Init+0x2bc>)
 8002dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbc:	089b      	lsrs	r3, r3, #2
 8002dbe:	3302      	adds	r3, #2
 8002dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	220f      	movs	r2, #15
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a40      	ldr	r2, [pc, #256]	@ (8002ee0 <HAL_GPIO_Init+0x2c0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d013      	beq.n	8002e0c <HAL_GPIO_Init+0x1ec>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a3f      	ldr	r2, [pc, #252]	@ (8002ee4 <HAL_GPIO_Init+0x2c4>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00d      	beq.n	8002e08 <HAL_GPIO_Init+0x1e8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a3e      	ldr	r2, [pc, #248]	@ (8002ee8 <HAL_GPIO_Init+0x2c8>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d007      	beq.n	8002e04 <HAL_GPIO_Init+0x1e4>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a3d      	ldr	r2, [pc, #244]	@ (8002eec <HAL_GPIO_Init+0x2cc>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d101      	bne.n	8002e00 <HAL_GPIO_Init+0x1e0>
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e006      	b.n	8002e0e <HAL_GPIO_Init+0x1ee>
 8002e00:	2304      	movs	r3, #4
 8002e02:	e004      	b.n	8002e0e <HAL_GPIO_Init+0x1ee>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e002      	b.n	8002e0e <HAL_GPIO_Init+0x1ee>
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e000      	b.n	8002e0e <HAL_GPIO_Init+0x1ee>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e10:	f002 0203 	and.w	r2, r2, #3
 8002e14:	0092      	lsls	r2, r2, #2
 8002e16:	4093      	lsls	r3, r2
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e1e:	492f      	ldr	r1, [pc, #188]	@ (8002edc <HAL_GPIO_Init+0x2bc>)
 8002e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e22:	089b      	lsrs	r3, r3, #2
 8002e24:	3302      	adds	r3, #2
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d006      	beq.n	8002e46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e38:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	492c      	ldr	r1, [pc, #176]	@ (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	608b      	str	r3, [r1, #8]
 8002e44:	e006      	b.n	8002e54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e46:	4b2a      	ldr	r3, [pc, #168]	@ (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	4928      	ldr	r1, [pc, #160]	@ (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d006      	beq.n	8002e6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e60:	4b23      	ldr	r3, [pc, #140]	@ (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	4922      	ldr	r1, [pc, #136]	@ (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	60cb      	str	r3, [r1, #12]
 8002e6c:	e006      	b.n	8002e7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e6e:	4b20      	ldr	r3, [pc, #128]	@ (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	43db      	mvns	r3, r3
 8002e76:	491e      	ldr	r1, [pc, #120]	@ (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d006      	beq.n	8002e96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e88:	4b19      	ldr	r3, [pc, #100]	@ (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	4918      	ldr	r1, [pc, #96]	@ (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	604b      	str	r3, [r1, #4]
 8002e94:	e006      	b.n	8002ea4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e96:	4b16      	ldr	r3, [pc, #88]	@ (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	4914      	ldr	r1, [pc, #80]	@ (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d021      	beq.n	8002ef4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	490e      	ldr	r1, [pc, #56]	@ (8002ef0 <HAL_GPIO_Init+0x2d0>)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	600b      	str	r3, [r1, #0]
 8002ebc:	e021      	b.n	8002f02 <HAL_GPIO_Init+0x2e2>
 8002ebe:	bf00      	nop
 8002ec0:	10320000 	.word	0x10320000
 8002ec4:	10310000 	.word	0x10310000
 8002ec8:	10220000 	.word	0x10220000
 8002ecc:	10210000 	.word	0x10210000
 8002ed0:	10120000 	.word	0x10120000
 8002ed4:	10110000 	.word	0x10110000
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	40010000 	.word	0x40010000
 8002ee0:	40010800 	.word	0x40010800
 8002ee4:	40010c00 	.word	0x40010c00
 8002ee8:	40011000 	.word	0x40011000
 8002eec:	40011400 	.word	0x40011400
 8002ef0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f24 <HAL_GPIO_Init+0x304>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	4909      	ldr	r1, [pc, #36]	@ (8002f24 <HAL_GPIO_Init+0x304>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f04:	3301      	adds	r3, #1
 8002f06:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f47f ae8e 	bne.w	8002c34 <HAL_GPIO_Init+0x14>
  }
}
 8002f18:	bf00      	nop
 8002f1a:	bf00      	nop
 8002f1c:	372c      	adds	r7, #44	@ 0x2c
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr
 8002f24:	40010400 	.word	0x40010400

08002f28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	887b      	ldrh	r3, [r7, #2]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f40:	2301      	movs	r3, #1
 8002f42:	73fb      	strb	r3, [r7, #15]
 8002f44:	e001      	b.n	8002f4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f46:	2300      	movs	r3, #0
 8002f48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr

08002f56 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	807b      	strh	r3, [r7, #2]
 8002f62:	4613      	mov	r3, r2
 8002f64:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f66:	787b      	ldrb	r3, [r7, #1]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f6c:	887a      	ldrh	r2, [r7, #2]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f72:	e003      	b.n	8002f7c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f74:	887b      	ldrh	r3, [r7, #2]
 8002f76:	041a      	lsls	r2, r3, #16
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	611a      	str	r2, [r3, #16]
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bc80      	pop	{r7}
 8002f84:	4770      	bx	lr
	...

08002f88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e12b      	b.n	80031f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d106      	bne.n	8002fb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7ff faa4 	bl	80024fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2224      	movs	r2, #36	@ 0x24
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0201 	bic.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fec:	f001 f960 	bl	80042b0 <HAL_RCC_GetPCLK1Freq>
 8002ff0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	4a81      	ldr	r2, [pc, #516]	@ (80031fc <HAL_I2C_Init+0x274>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d807      	bhi.n	800300c <HAL_I2C_Init+0x84>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4a80      	ldr	r2, [pc, #512]	@ (8003200 <HAL_I2C_Init+0x278>)
 8003000:	4293      	cmp	r3, r2
 8003002:	bf94      	ite	ls
 8003004:	2301      	movls	r3, #1
 8003006:	2300      	movhi	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	e006      	b.n	800301a <HAL_I2C_Init+0x92>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4a7d      	ldr	r2, [pc, #500]	@ (8003204 <HAL_I2C_Init+0x27c>)
 8003010:	4293      	cmp	r3, r2
 8003012:	bf94      	ite	ls
 8003014:	2301      	movls	r3, #1
 8003016:	2300      	movhi	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e0e7      	b.n	80031f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	4a78      	ldr	r2, [pc, #480]	@ (8003208 <HAL_I2C_Init+0x280>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	0c9b      	lsrs	r3, r3, #18
 800302c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	430a      	orrs	r2, r1
 8003040:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	4a6a      	ldr	r2, [pc, #424]	@ (80031fc <HAL_I2C_Init+0x274>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d802      	bhi.n	800305c <HAL_I2C_Init+0xd4>
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	3301      	adds	r3, #1
 800305a:	e009      	b.n	8003070 <HAL_I2C_Init+0xe8>
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003062:	fb02 f303 	mul.w	r3, r2, r3
 8003066:	4a69      	ldr	r2, [pc, #420]	@ (800320c <HAL_I2C_Init+0x284>)
 8003068:	fba2 2303 	umull	r2, r3, r2, r3
 800306c:	099b      	lsrs	r3, r3, #6
 800306e:	3301      	adds	r3, #1
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6812      	ldr	r2, [r2, #0]
 8003074:	430b      	orrs	r3, r1
 8003076:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003082:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	495c      	ldr	r1, [pc, #368]	@ (80031fc <HAL_I2C_Init+0x274>)
 800308c:	428b      	cmp	r3, r1
 800308e:	d819      	bhi.n	80030c4 <HAL_I2C_Init+0x13c>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	1e59      	subs	r1, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	fbb1 f3f3 	udiv	r3, r1, r3
 800309e:	1c59      	adds	r1, r3, #1
 80030a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030a4:	400b      	ands	r3, r1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00a      	beq.n	80030c0 <HAL_I2C_Init+0x138>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1e59      	subs	r1, r3, #1
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030b8:	3301      	adds	r3, #1
 80030ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030be:	e051      	b.n	8003164 <HAL_I2C_Init+0x1dc>
 80030c0:	2304      	movs	r3, #4
 80030c2:	e04f      	b.n	8003164 <HAL_I2C_Init+0x1dc>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d111      	bne.n	80030f0 <HAL_I2C_Init+0x168>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	1e58      	subs	r0, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6859      	ldr	r1, [r3, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	440b      	add	r3, r1
 80030da:	fbb0 f3f3 	udiv	r3, r0, r3
 80030de:	3301      	adds	r3, #1
 80030e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	bf0c      	ite	eq
 80030e8:	2301      	moveq	r3, #1
 80030ea:	2300      	movne	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	e012      	b.n	8003116 <HAL_I2C_Init+0x18e>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	1e58      	subs	r0, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6859      	ldr	r1, [r3, #4]
 80030f8:	460b      	mov	r3, r1
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	0099      	lsls	r1, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	fbb0 f3f3 	udiv	r3, r0, r3
 8003106:	3301      	adds	r3, #1
 8003108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf0c      	ite	eq
 8003110:	2301      	moveq	r3, #1
 8003112:	2300      	movne	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_I2C_Init+0x196>
 800311a:	2301      	movs	r3, #1
 800311c:	e022      	b.n	8003164 <HAL_I2C_Init+0x1dc>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10e      	bne.n	8003144 <HAL_I2C_Init+0x1bc>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	1e58      	subs	r0, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6859      	ldr	r1, [r3, #4]
 800312e:	460b      	mov	r3, r1
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	440b      	add	r3, r1
 8003134:	fbb0 f3f3 	udiv	r3, r0, r3
 8003138:	3301      	adds	r3, #1
 800313a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800313e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003142:	e00f      	b.n	8003164 <HAL_I2C_Init+0x1dc>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1e58      	subs	r0, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6859      	ldr	r1, [r3, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	0099      	lsls	r1, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	fbb0 f3f3 	udiv	r3, r0, r3
 800315a:	3301      	adds	r3, #1
 800315c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003160:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	6809      	ldr	r1, [r1, #0]
 8003168:	4313      	orrs	r3, r2
 800316a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69da      	ldr	r2, [r3, #28]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003192:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6911      	ldr	r1, [r2, #16]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	68d2      	ldr	r2, [r2, #12]
 800319e:	4311      	orrs	r1, r2
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	430b      	orrs	r3, r1
 80031a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695a      	ldr	r2, [r3, #20]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0201 	orr.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	000186a0 	.word	0x000186a0
 8003200:	001e847f 	.word	0x001e847f
 8003204:	003d08ff 	.word	0x003d08ff
 8003208:	431bde83 	.word	0x431bde83
 800320c:	10624dd3 	.word	0x10624dd3

08003210 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b088      	sub	sp, #32
 8003214:	af02      	add	r7, sp, #8
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	607a      	str	r2, [r7, #4]
 800321a:	461a      	mov	r2, r3
 800321c:	460b      	mov	r3, r1
 800321e:	817b      	strh	r3, [r7, #10]
 8003220:	4613      	mov	r3, r2
 8003222:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003224:	f7ff fbc0 	bl	80029a8 <HAL_GetTick>
 8003228:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b20      	cmp	r3, #32
 8003234:	f040 80e0 	bne.w	80033f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	2319      	movs	r3, #25
 800323e:	2201      	movs	r2, #1
 8003240:	4970      	ldr	r1, [pc, #448]	@ (8003404 <HAL_I2C_Master_Transmit+0x1f4>)
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 fa92 	bl	800376c <I2C_WaitOnFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800324e:	2302      	movs	r3, #2
 8003250:	e0d3      	b.n	80033fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003258:	2b01      	cmp	r3, #1
 800325a:	d101      	bne.n	8003260 <HAL_I2C_Master_Transmit+0x50>
 800325c:	2302      	movs	r3, #2
 800325e:	e0cc      	b.n	80033fa <HAL_I2C_Master_Transmit+0x1ea>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b01      	cmp	r3, #1
 8003274:	d007      	beq.n	8003286 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f042 0201 	orr.w	r2, r2, #1
 8003284:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003294:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2221      	movs	r2, #33	@ 0x21
 800329a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2210      	movs	r2, #16
 80032a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	893a      	ldrh	r2, [r7, #8]
 80032b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4a50      	ldr	r2, [pc, #320]	@ (8003408 <HAL_I2C_Master_Transmit+0x1f8>)
 80032c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032c8:	8979      	ldrh	r1, [r7, #10]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	6a3a      	ldr	r2, [r7, #32]
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 f9ca 	bl	8003668 <I2C_MasterRequestWrite>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e08d      	b.n	80033fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032de:	2300      	movs	r3, #0
 80032e0:	613b      	str	r3, [r7, #16]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80032f4:	e066      	b.n	80033c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	6a39      	ldr	r1, [r7, #32]
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 fb50 	bl	80039a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00d      	beq.n	8003322 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330a:	2b04      	cmp	r3, #4
 800330c:	d107      	bne.n	800331e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800331c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e06b      	b.n	80033fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003326:	781a      	ldrb	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800333c:	b29b      	uxth	r3, r3
 800333e:	3b01      	subs	r3, #1
 8003340:	b29a      	uxth	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b04      	cmp	r3, #4
 800335e:	d11b      	bne.n	8003398 <HAL_I2C_Master_Transmit+0x188>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003364:	2b00      	cmp	r3, #0
 8003366:	d017      	beq.n	8003398 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336c:	781a      	ldrb	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003382:	b29b      	uxth	r3, r3
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	6a39      	ldr	r1, [r7, #32]
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 fb47 	bl	8003a30 <I2C_WaitOnBTFFlagUntilTimeout>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00d      	beq.n	80033c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d107      	bne.n	80033c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e01a      	b.n	80033fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d194      	bne.n	80032f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	e000      	b.n	80033fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80033f8:	2302      	movs	r3, #2
  }
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	00100002 	.word	0x00100002
 8003408:	ffff0000 	.word	0xffff0000

0800340c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b08a      	sub	sp, #40	@ 0x28
 8003410:	af02      	add	r7, sp, #8
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	607a      	str	r2, [r7, #4]
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	460b      	mov	r3, r1
 800341a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800341c:	f7ff fac4 	bl	80029a8 <HAL_GetTick>
 8003420:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b20      	cmp	r3, #32
 8003430:	f040 8111 	bne.w	8003656 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	2319      	movs	r3, #25
 800343a:	2201      	movs	r2, #1
 800343c:	4988      	ldr	r1, [pc, #544]	@ (8003660 <HAL_I2C_IsDeviceReady+0x254>)
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 f994 	bl	800376c <I2C_WaitOnFlagUntilTimeout>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800344a:	2302      	movs	r3, #2
 800344c:	e104      	b.n	8003658 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_I2C_IsDeviceReady+0x50>
 8003458:	2302      	movs	r3, #2
 800345a:	e0fd      	b.n	8003658 <HAL_I2C_IsDeviceReady+0x24c>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b01      	cmp	r3, #1
 8003470:	d007      	beq.n	8003482 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f042 0201 	orr.w	r2, r2, #1
 8003480:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003490:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2224      	movs	r2, #36	@ 0x24
 8003496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4a70      	ldr	r2, [pc, #448]	@ (8003664 <HAL_I2C_IsDeviceReady+0x258>)
 80034a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034b4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2200      	movs	r2, #0
 80034be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 f952 	bl	800376c <I2C_WaitOnFlagUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00d      	beq.n	80034ea <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034dc:	d103      	bne.n	80034e6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034e4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e0b6      	b.n	8003658 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034ea:	897b      	ldrh	r3, [r7, #10]
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	461a      	mov	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80034f8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80034fa:	f7ff fa55 	bl	80029a8 <HAL_GetTick>
 80034fe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b02      	cmp	r3, #2
 800350c:	bf0c      	ite	eq
 800350e:	2301      	moveq	r3, #1
 8003510:	2300      	movne	r3, #0
 8003512:	b2db      	uxtb	r3, r3
 8003514:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003520:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003524:	bf0c      	ite	eq
 8003526:	2301      	moveq	r3, #1
 8003528:	2300      	movne	r3, #0
 800352a:	b2db      	uxtb	r3, r3
 800352c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800352e:	e025      	b.n	800357c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003530:	f7ff fa3a 	bl	80029a8 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d302      	bcc.n	8003546 <HAL_I2C_IsDeviceReady+0x13a>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d103      	bne.n	800354e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	22a0      	movs	r2, #160	@ 0xa0
 800354a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b02      	cmp	r3, #2
 800355a:	bf0c      	ite	eq
 800355c:	2301      	moveq	r3, #1
 800355e:	2300      	movne	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800356e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003572:	bf0c      	ite	eq
 8003574:	2301      	moveq	r3, #1
 8003576:	2300      	movne	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2ba0      	cmp	r3, #160	@ 0xa0
 8003586:	d005      	beq.n	8003594 <HAL_I2C_IsDeviceReady+0x188>
 8003588:	7dfb      	ldrb	r3, [r7, #23]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d102      	bne.n	8003594 <HAL_I2C_IsDeviceReady+0x188>
 800358e:	7dbb      	ldrb	r3, [r7, #22]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0cd      	beq.n	8003530 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d129      	bne.n	80035fe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035b8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	613b      	str	r3, [r7, #16]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	2319      	movs	r3, #25
 80035d6:	2201      	movs	r2, #1
 80035d8:	4921      	ldr	r1, [pc, #132]	@ (8003660 <HAL_I2C_IsDeviceReady+0x254>)
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 f8c6 	bl	800376c <I2C_WaitOnFlagUntilTimeout>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e036      	b.n	8003658 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	e02c      	b.n	8003658 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800360c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003616:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	2319      	movs	r3, #25
 800361e:	2201      	movs	r2, #1
 8003620:	490f      	ldr	r1, [pc, #60]	@ (8003660 <HAL_I2C_IsDeviceReady+0x254>)
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 f8a2 	bl	800376c <I2C_WaitOnFlagUntilTimeout>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e012      	b.n	8003658 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	3301      	adds	r3, #1
 8003636:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	429a      	cmp	r2, r3
 800363e:	f4ff af32 	bcc.w	80034a6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2220      	movs	r2, #32
 8003646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003656:	2302      	movs	r3, #2
  }
}
 8003658:	4618      	mov	r0, r3
 800365a:	3720      	adds	r7, #32
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	00100002 	.word	0x00100002
 8003664:	ffff0000 	.word	0xffff0000

08003668 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af02      	add	r7, sp, #8
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	607a      	str	r2, [r7, #4]
 8003672:	603b      	str	r3, [r7, #0]
 8003674:	460b      	mov	r3, r1
 8003676:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2b08      	cmp	r3, #8
 8003682:	d006      	beq.n	8003692 <I2C_MasterRequestWrite+0x2a>
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d003      	beq.n	8003692 <I2C_MasterRequestWrite+0x2a>
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003690:	d108      	bne.n	80036a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	e00b      	b.n	80036bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a8:	2b12      	cmp	r3, #18
 80036aa:	d107      	bne.n	80036bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 f84f 	bl	800376c <I2C_WaitOnFlagUntilTimeout>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00d      	beq.n	80036f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036e2:	d103      	bne.n	80036ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e035      	b.n	800375c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036f8:	d108      	bne.n	800370c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036fa:	897b      	ldrh	r3, [r7, #10]
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	461a      	mov	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003708:	611a      	str	r2, [r3, #16]
 800370a:	e01b      	b.n	8003744 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800370c:	897b      	ldrh	r3, [r7, #10]
 800370e:	11db      	asrs	r3, r3, #7
 8003710:	b2db      	uxtb	r3, r3
 8003712:	f003 0306 	and.w	r3, r3, #6
 8003716:	b2db      	uxtb	r3, r3
 8003718:	f063 030f 	orn	r3, r3, #15
 800371c:	b2da      	uxtb	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	490e      	ldr	r1, [pc, #56]	@ (8003764 <I2C_MasterRequestWrite+0xfc>)
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 f898 	bl	8003860 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e010      	b.n	800375c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800373a:	897b      	ldrh	r3, [r7, #10]
 800373c:	b2da      	uxtb	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	4907      	ldr	r1, [pc, #28]	@ (8003768 <I2C_MasterRequestWrite+0x100>)
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 f888 	bl	8003860 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	00010008 	.word	0x00010008
 8003768:	00010002 	.word	0x00010002

0800376c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	4613      	mov	r3, r2
 800377a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800377c:	e048      	b.n	8003810 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003784:	d044      	beq.n	8003810 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003786:	f7ff f90f 	bl	80029a8 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d302      	bcc.n	800379c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d139      	bne.n	8003810 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	0c1b      	lsrs	r3, r3, #16
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d10d      	bne.n	80037c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	43da      	mvns	r2, r3
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	4013      	ands	r3, r2
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	bf0c      	ite	eq
 80037b8:	2301      	moveq	r3, #1
 80037ba:	2300      	movne	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	461a      	mov	r2, r3
 80037c0:	e00c      	b.n	80037dc <I2C_WaitOnFlagUntilTimeout+0x70>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	43da      	mvns	r2, r3
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	4013      	ands	r3, r2
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	bf0c      	ite	eq
 80037d4:	2301      	moveq	r3, #1
 80037d6:	2300      	movne	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	461a      	mov	r2, r3
 80037dc:	79fb      	ldrb	r3, [r7, #7]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d116      	bne.n	8003810 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fc:	f043 0220 	orr.w	r2, r3, #32
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e023      	b.n	8003858 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	0c1b      	lsrs	r3, r3, #16
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b01      	cmp	r3, #1
 8003818:	d10d      	bne.n	8003836 <I2C_WaitOnFlagUntilTimeout+0xca>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	43da      	mvns	r2, r3
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	4013      	ands	r3, r2
 8003826:	b29b      	uxth	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	bf0c      	ite	eq
 800382c:	2301      	moveq	r3, #1
 800382e:	2300      	movne	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	461a      	mov	r2, r3
 8003834:	e00c      	b.n	8003850 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	43da      	mvns	r2, r3
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	4013      	ands	r3, r2
 8003842:	b29b      	uxth	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	461a      	mov	r2, r3
 8003850:	79fb      	ldrb	r3, [r7, #7]
 8003852:	429a      	cmp	r2, r3
 8003854:	d093      	beq.n	800377e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800386e:	e071      	b.n	8003954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800387a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800387e:	d123      	bne.n	80038c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800388e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003898:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b4:	f043 0204 	orr.w	r2, r3, #4
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e067      	b.n	8003998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ce:	d041      	beq.n	8003954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d0:	f7ff f86a 	bl	80029a8 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d302      	bcc.n	80038e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d136      	bne.n	8003954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	0c1b      	lsrs	r3, r3, #16
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d10c      	bne.n	800390a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	43da      	mvns	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	4013      	ands	r3, r2
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	bf14      	ite	ne
 8003902:	2301      	movne	r3, #1
 8003904:	2300      	moveq	r3, #0
 8003906:	b2db      	uxtb	r3, r3
 8003908:	e00b      	b.n	8003922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	43da      	mvns	r2, r3
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	4013      	ands	r3, r2
 8003916:	b29b      	uxth	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	bf14      	ite	ne
 800391c:	2301      	movne	r3, #1
 800391e:	2300      	moveq	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d016      	beq.n	8003954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2220      	movs	r2, #32
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003940:	f043 0220 	orr.w	r2, r3, #32
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e021      	b.n	8003998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	0c1b      	lsrs	r3, r3, #16
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b01      	cmp	r3, #1
 800395c:	d10c      	bne.n	8003978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	43da      	mvns	r2, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	4013      	ands	r3, r2
 800396a:	b29b      	uxth	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	bf14      	ite	ne
 8003970:	2301      	movne	r3, #1
 8003972:	2300      	moveq	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	e00b      	b.n	8003990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	43da      	mvns	r2, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4013      	ands	r3, r2
 8003984:	b29b      	uxth	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	bf14      	ite	ne
 800398a:	2301      	movne	r3, #1
 800398c:	2300      	moveq	r3, #0
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	f47f af6d 	bne.w	8003870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039ac:	e034      	b.n	8003a18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 f886 	bl	8003ac0 <I2C_IsAcknowledgeFailed>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e034      	b.n	8003a28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c4:	d028      	beq.n	8003a18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c6:	f7fe ffef 	bl	80029a8 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d302      	bcc.n	80039dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d11d      	bne.n	8003a18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039e6:	2b80      	cmp	r3, #128	@ 0x80
 80039e8:	d016      	beq.n	8003a18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a04:	f043 0220 	orr.w	r2, r3, #32
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e007      	b.n	8003a28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a22:	2b80      	cmp	r3, #128	@ 0x80
 8003a24:	d1c3      	bne.n	80039ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a3c:	e034      	b.n	8003aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 f83e 	bl	8003ac0 <I2C_IsAcknowledgeFailed>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e034      	b.n	8003ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a54:	d028      	beq.n	8003aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a56:	f7fe ffa7 	bl	80029a8 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d302      	bcc.n	8003a6c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d11d      	bne.n	8003aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	f003 0304 	and.w	r3, r3, #4
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d016      	beq.n	8003aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a94:	f043 0220 	orr.w	r2, r3, #32
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e007      	b.n	8003ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d1c3      	bne.n	8003a3e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ad6:	d11b      	bne.n	8003b10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ae0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afc:	f043 0204 	orr.w	r2, r3, #4
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e000      	b.n	8003b12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bc80      	pop	{r7}
 8003b1a:	4770      	bx	lr

08003b1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e272      	b.n	8004014 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 8087 	beq.w	8003c4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b3c:	4b92      	ldr	r3, [pc, #584]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f003 030c 	and.w	r3, r3, #12
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d00c      	beq.n	8003b62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b48:	4b8f      	ldr	r3, [pc, #572]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f003 030c 	and.w	r3, r3, #12
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d112      	bne.n	8003b7a <HAL_RCC_OscConfig+0x5e>
 8003b54:	4b8c      	ldr	r3, [pc, #560]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b60:	d10b      	bne.n	8003b7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b62:	4b89      	ldr	r3, [pc, #548]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d06c      	beq.n	8003c48 <HAL_RCC_OscConfig+0x12c>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d168      	bne.n	8003c48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e24c      	b.n	8004014 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b82:	d106      	bne.n	8003b92 <HAL_RCC_OscConfig+0x76>
 8003b84:	4b80      	ldr	r3, [pc, #512]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a7f      	ldr	r2, [pc, #508]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003b8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b8e:	6013      	str	r3, [r2, #0]
 8003b90:	e02e      	b.n	8003bf0 <HAL_RCC_OscConfig+0xd4>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10c      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x98>
 8003b9a:	4b7b      	ldr	r3, [pc, #492]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a7a      	ldr	r2, [pc, #488]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003ba0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	4b78      	ldr	r3, [pc, #480]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a77      	ldr	r2, [pc, #476]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003bac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	e01d      	b.n	8003bf0 <HAL_RCC_OscConfig+0xd4>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_RCC_OscConfig+0xbc>
 8003bbe:	4b72      	ldr	r3, [pc, #456]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a71      	ldr	r2, [pc, #452]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003bc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	4b6f      	ldr	r3, [pc, #444]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a6e      	ldr	r2, [pc, #440]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003bd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	e00b      	b.n	8003bf0 <HAL_RCC_OscConfig+0xd4>
 8003bd8:	4b6b      	ldr	r3, [pc, #428]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a6a      	ldr	r2, [pc, #424]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003bde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	4b68      	ldr	r3, [pc, #416]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a67      	ldr	r2, [pc, #412]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003bea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d013      	beq.n	8003c20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf8:	f7fe fed6 	bl	80029a8 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c00:	f7fe fed2 	bl	80029a8 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b64      	cmp	r3, #100	@ 0x64
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e200      	b.n	8004014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c12:	4b5d      	ldr	r3, [pc, #372]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0f0      	beq.n	8003c00 <HAL_RCC_OscConfig+0xe4>
 8003c1e:	e014      	b.n	8003c4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c20:	f7fe fec2 	bl	80029a8 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c28:	f7fe febe 	bl	80029a8 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b64      	cmp	r3, #100	@ 0x64
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e1ec      	b.n	8004014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c3a:	4b53      	ldr	r3, [pc, #332]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0x10c>
 8003c46:	e000      	b.n	8003c4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d063      	beq.n	8003d1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c56:	4b4c      	ldr	r3, [pc, #304]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00b      	beq.n	8003c7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c62:	4b49      	ldr	r3, [pc, #292]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 030c 	and.w	r3, r3, #12
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d11c      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x18c>
 8003c6e:	4b46      	ldr	r3, [pc, #280]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d116      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c7a:	4b43      	ldr	r3, [pc, #268]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d005      	beq.n	8003c92 <HAL_RCC_OscConfig+0x176>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d001      	beq.n	8003c92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e1c0      	b.n	8004014 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c92:	4b3d      	ldr	r3, [pc, #244]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	4939      	ldr	r1, [pc, #228]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ca6:	e03a      	b.n	8003d1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d020      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cb0:	4b36      	ldr	r3, [pc, #216]	@ (8003d8c <HAL_RCC_OscConfig+0x270>)
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb6:	f7fe fe77 	bl	80029a8 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cbe:	f7fe fe73 	bl	80029a8 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e1a1      	b.n	8004014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd0:	4b2d      	ldr	r3, [pc, #180]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0f0      	beq.n	8003cbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cdc:	4b2a      	ldr	r3, [pc, #168]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	4927      	ldr	r1, [pc, #156]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	600b      	str	r3, [r1, #0]
 8003cf0:	e015      	b.n	8003d1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cf2:	4b26      	ldr	r3, [pc, #152]	@ (8003d8c <HAL_RCC_OscConfig+0x270>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf8:	f7fe fe56 	bl	80029a8 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d00:	f7fe fe52 	bl	80029a8 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e180      	b.n	8004014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d12:	4b1d      	ldr	r3, [pc, #116]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d03a      	beq.n	8003da0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d019      	beq.n	8003d66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d32:	4b17      	ldr	r3, [pc, #92]	@ (8003d90 <HAL_RCC_OscConfig+0x274>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d38:	f7fe fe36 	bl	80029a8 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d40:	f7fe fe32 	bl	80029a8 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e160      	b.n	8004014 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d52:	4b0d      	ldr	r3, [pc, #52]	@ (8003d88 <HAL_RCC_OscConfig+0x26c>)
 8003d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0f0      	beq.n	8003d40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d5e:	2001      	movs	r0, #1
 8003d60:	f000 face 	bl	8004300 <RCC_Delay>
 8003d64:	e01c      	b.n	8003da0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d66:	4b0a      	ldr	r3, [pc, #40]	@ (8003d90 <HAL_RCC_OscConfig+0x274>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d6c:	f7fe fe1c 	bl	80029a8 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d72:	e00f      	b.n	8003d94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d74:	f7fe fe18 	bl	80029a8 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d908      	bls.n	8003d94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e146      	b.n	8004014 <HAL_RCC_OscConfig+0x4f8>
 8003d86:	bf00      	nop
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	42420000 	.word	0x42420000
 8003d90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d94:	4b92      	ldr	r3, [pc, #584]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1e9      	bne.n	8003d74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 80a6 	beq.w	8003efa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dae:	2300      	movs	r3, #0
 8003db0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003db2:	4b8b      	ldr	r3, [pc, #556]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10d      	bne.n	8003dda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dbe:	4b88      	ldr	r3, [pc, #544]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	4a87      	ldr	r2, [pc, #540]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dc8:	61d3      	str	r3, [r2, #28]
 8003dca:	4b85      	ldr	r3, [pc, #532]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dd2:	60bb      	str	r3, [r7, #8]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dda:	4b82      	ldr	r3, [pc, #520]	@ (8003fe4 <HAL_RCC_OscConfig+0x4c8>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d118      	bne.n	8003e18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003de6:	4b7f      	ldr	r3, [pc, #508]	@ (8003fe4 <HAL_RCC_OscConfig+0x4c8>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a7e      	ldr	r2, [pc, #504]	@ (8003fe4 <HAL_RCC_OscConfig+0x4c8>)
 8003dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003df2:	f7fe fdd9 	bl	80029a8 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dfa:	f7fe fdd5 	bl	80029a8 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b64      	cmp	r3, #100	@ 0x64
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e103      	b.n	8004014 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0c:	4b75      	ldr	r3, [pc, #468]	@ (8003fe4 <HAL_RCC_OscConfig+0x4c8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f0      	beq.n	8003dfa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d106      	bne.n	8003e2e <HAL_RCC_OscConfig+0x312>
 8003e20:	4b6f      	ldr	r3, [pc, #444]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	4a6e      	ldr	r2, [pc, #440]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	6213      	str	r3, [r2, #32]
 8003e2c:	e02d      	b.n	8003e8a <HAL_RCC_OscConfig+0x36e>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10c      	bne.n	8003e50 <HAL_RCC_OscConfig+0x334>
 8003e36:	4b6a      	ldr	r3, [pc, #424]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	4a69      	ldr	r2, [pc, #420]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003e3c:	f023 0301 	bic.w	r3, r3, #1
 8003e40:	6213      	str	r3, [r2, #32]
 8003e42:	4b67      	ldr	r3, [pc, #412]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	4a66      	ldr	r2, [pc, #408]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003e48:	f023 0304 	bic.w	r3, r3, #4
 8003e4c:	6213      	str	r3, [r2, #32]
 8003e4e:	e01c      	b.n	8003e8a <HAL_RCC_OscConfig+0x36e>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	2b05      	cmp	r3, #5
 8003e56:	d10c      	bne.n	8003e72 <HAL_RCC_OscConfig+0x356>
 8003e58:	4b61      	ldr	r3, [pc, #388]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	4a60      	ldr	r2, [pc, #384]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003e5e:	f043 0304 	orr.w	r3, r3, #4
 8003e62:	6213      	str	r3, [r2, #32]
 8003e64:	4b5e      	ldr	r3, [pc, #376]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	4a5d      	ldr	r2, [pc, #372]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003e6a:	f043 0301 	orr.w	r3, r3, #1
 8003e6e:	6213      	str	r3, [r2, #32]
 8003e70:	e00b      	b.n	8003e8a <HAL_RCC_OscConfig+0x36e>
 8003e72:	4b5b      	ldr	r3, [pc, #364]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	4a5a      	ldr	r2, [pc, #360]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003e78:	f023 0301 	bic.w	r3, r3, #1
 8003e7c:	6213      	str	r3, [r2, #32]
 8003e7e:	4b58      	ldr	r3, [pc, #352]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	4a57      	ldr	r2, [pc, #348]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003e84:	f023 0304 	bic.w	r3, r3, #4
 8003e88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d015      	beq.n	8003ebe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e92:	f7fe fd89 	bl	80029a8 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e98:	e00a      	b.n	8003eb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9a:	f7fe fd85 	bl	80029a8 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e0b1      	b.n	8004014 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb0:	4b4b      	ldr	r3, [pc, #300]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0ee      	beq.n	8003e9a <HAL_RCC_OscConfig+0x37e>
 8003ebc:	e014      	b.n	8003ee8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ebe:	f7fe fd73 	bl	80029a8 <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ec4:	e00a      	b.n	8003edc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec6:	f7fe fd6f 	bl	80029a8 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e09b      	b.n	8004014 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003edc:	4b40      	ldr	r3, [pc, #256]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1ee      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ee8:	7dfb      	ldrb	r3, [r7, #23]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d105      	bne.n	8003efa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eee:	4b3c      	ldr	r3, [pc, #240]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	4a3b      	ldr	r2, [pc, #236]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003ef4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ef8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 8087 	beq.w	8004012 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f04:	4b36      	ldr	r3, [pc, #216]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 030c 	and.w	r3, r3, #12
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d061      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d146      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f18:	4b33      	ldr	r3, [pc, #204]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1e:	f7fe fd43 	bl	80029a8 <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f24:	e008      	b.n	8003f38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f26:	f7fe fd3f 	bl	80029a8 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e06d      	b.n	8004014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f38:	4b29      	ldr	r3, [pc, #164]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1f0      	bne.n	8003f26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f4c:	d108      	bne.n	8003f60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f4e:	4b24      	ldr	r3, [pc, #144]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	4921      	ldr	r1, [pc, #132]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f60:	4b1f      	ldr	r3, [pc, #124]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a19      	ldr	r1, [r3, #32]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f70:	430b      	orrs	r3, r1
 8003f72:	491b      	ldr	r1, [pc, #108]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f78:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7e:	f7fe fd13 	bl	80029a8 <HAL_GetTick>
 8003f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f86:	f7fe fd0f 	bl	80029a8 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e03d      	b.n	8004014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f98:	4b11      	ldr	r3, [pc, #68]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0f0      	beq.n	8003f86 <HAL_RCC_OscConfig+0x46a>
 8003fa4:	e035      	b.n	8004012 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa6:	4b10      	ldr	r3, [pc, #64]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fac:	f7fe fcfc 	bl	80029a8 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb4:	f7fe fcf8 	bl	80029a8 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e026      	b.n	8004014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fc6:	4b06      	ldr	r3, [pc, #24]	@ (8003fe0 <HAL_RCC_OscConfig+0x4c4>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f0      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x498>
 8003fd2:	e01e      	b.n	8004012 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	69db      	ldr	r3, [r3, #28]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d107      	bne.n	8003fec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e019      	b.n	8004014 <HAL_RCC_OscConfig+0x4f8>
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	40007000 	.word	0x40007000
 8003fe8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fec:	4b0b      	ldr	r3, [pc, #44]	@ (800401c <HAL_RCC_OscConfig+0x500>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d106      	bne.n	800400e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800400a:	429a      	cmp	r2, r3
 800400c:	d001      	beq.n	8004012 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e000      	b.n	8004014 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40021000 	.word	0x40021000

08004020 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e0d0      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004034:	4b6a      	ldr	r3, [pc, #424]	@ (80041e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d910      	bls.n	8004064 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004042:	4b67      	ldr	r3, [pc, #412]	@ (80041e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f023 0207 	bic.w	r2, r3, #7
 800404a:	4965      	ldr	r1, [pc, #404]	@ (80041e0 <HAL_RCC_ClockConfig+0x1c0>)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	4313      	orrs	r3, r2
 8004050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004052:	4b63      	ldr	r3, [pc, #396]	@ (80041e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d001      	beq.n	8004064 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e0b8      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d020      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800407c:	4b59      	ldr	r3, [pc, #356]	@ (80041e4 <HAL_RCC_ClockConfig+0x1c4>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	4a58      	ldr	r2, [pc, #352]	@ (80041e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004082:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004086:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0308 	and.w	r3, r3, #8
 8004090:	2b00      	cmp	r3, #0
 8004092:	d005      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004094:	4b53      	ldr	r3, [pc, #332]	@ (80041e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	4a52      	ldr	r2, [pc, #328]	@ (80041e4 <HAL_RCC_ClockConfig+0x1c4>)
 800409a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800409e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a0:	4b50      	ldr	r3, [pc, #320]	@ (80041e4 <HAL_RCC_ClockConfig+0x1c4>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	494d      	ldr	r1, [pc, #308]	@ (80041e4 <HAL_RCC_ClockConfig+0x1c4>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d040      	beq.n	8004140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d107      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040c6:	4b47      	ldr	r3, [pc, #284]	@ (80041e4 <HAL_RCC_ClockConfig+0x1c4>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d115      	bne.n	80040fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e07f      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d107      	bne.n	80040ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040de:	4b41      	ldr	r3, [pc, #260]	@ (80041e4 <HAL_RCC_ClockConfig+0x1c4>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d109      	bne.n	80040fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e073      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ee:	4b3d      	ldr	r3, [pc, #244]	@ (80041e4 <HAL_RCC_ClockConfig+0x1c4>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e06b      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040fe:	4b39      	ldr	r3, [pc, #228]	@ (80041e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f023 0203 	bic.w	r2, r3, #3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	4936      	ldr	r1, [pc, #216]	@ (80041e4 <HAL_RCC_ClockConfig+0x1c4>)
 800410c:	4313      	orrs	r3, r2
 800410e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004110:	f7fe fc4a 	bl	80029a8 <HAL_GetTick>
 8004114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004116:	e00a      	b.n	800412e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004118:	f7fe fc46 	bl	80029a8 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004126:	4293      	cmp	r3, r2
 8004128:	d901      	bls.n	800412e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e053      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800412e:	4b2d      	ldr	r3, [pc, #180]	@ (80041e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f003 020c 	and.w	r2, r3, #12
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	429a      	cmp	r2, r3
 800413e:	d1eb      	bne.n	8004118 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004140:	4b27      	ldr	r3, [pc, #156]	@ (80041e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d210      	bcs.n	8004170 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414e:	4b24      	ldr	r3, [pc, #144]	@ (80041e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f023 0207 	bic.w	r2, r3, #7
 8004156:	4922      	ldr	r1, [pc, #136]	@ (80041e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	4313      	orrs	r3, r2
 800415c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800415e:	4b20      	ldr	r3, [pc, #128]	@ (80041e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d001      	beq.n	8004170 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e032      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	d008      	beq.n	800418e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800417c:	4b19      	ldr	r3, [pc, #100]	@ (80041e4 <HAL_RCC_ClockConfig+0x1c4>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	4916      	ldr	r1, [pc, #88]	@ (80041e4 <HAL_RCC_ClockConfig+0x1c4>)
 800418a:	4313      	orrs	r3, r2
 800418c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	2b00      	cmp	r3, #0
 8004198:	d009      	beq.n	80041ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800419a:	4b12      	ldr	r3, [pc, #72]	@ (80041e4 <HAL_RCC_ClockConfig+0x1c4>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	490e      	ldr	r1, [pc, #56]	@ (80041e4 <HAL_RCC_ClockConfig+0x1c4>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041ae:	f000 f821 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 80041b2:	4602      	mov	r2, r0
 80041b4:	4b0b      	ldr	r3, [pc, #44]	@ (80041e4 <HAL_RCC_ClockConfig+0x1c4>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	091b      	lsrs	r3, r3, #4
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	490a      	ldr	r1, [pc, #40]	@ (80041e8 <HAL_RCC_ClockConfig+0x1c8>)
 80041c0:	5ccb      	ldrb	r3, [r1, r3]
 80041c2:	fa22 f303 	lsr.w	r3, r2, r3
 80041c6:	4a09      	ldr	r2, [pc, #36]	@ (80041ec <HAL_RCC_ClockConfig+0x1cc>)
 80041c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041ca:	4b09      	ldr	r3, [pc, #36]	@ (80041f0 <HAL_RCC_ClockConfig+0x1d0>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fe fba8 	bl	8002924 <HAL_InitTick>

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40022000 	.word	0x40022000
 80041e4:	40021000 	.word	0x40021000
 80041e8:	08008140 	.word	0x08008140
 80041ec:	20000000 	.word	0x20000000
 80041f0:	20000004 	.word	0x20000004

080041f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	2300      	movs	r3, #0
 8004200:	60bb      	str	r3, [r7, #8]
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]
 8004206:	2300      	movs	r3, #0
 8004208:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800420e:	4b1e      	ldr	r3, [pc, #120]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x94>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f003 030c 	and.w	r3, r3, #12
 800421a:	2b04      	cmp	r3, #4
 800421c:	d002      	beq.n	8004224 <HAL_RCC_GetSysClockFreq+0x30>
 800421e:	2b08      	cmp	r3, #8
 8004220:	d003      	beq.n	800422a <HAL_RCC_GetSysClockFreq+0x36>
 8004222:	e027      	b.n	8004274 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004224:	4b19      	ldr	r3, [pc, #100]	@ (800428c <HAL_RCC_GetSysClockFreq+0x98>)
 8004226:	613b      	str	r3, [r7, #16]
      break;
 8004228:	e027      	b.n	800427a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	0c9b      	lsrs	r3, r3, #18
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	4a17      	ldr	r2, [pc, #92]	@ (8004290 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004234:	5cd3      	ldrb	r3, [r2, r3]
 8004236:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d010      	beq.n	8004264 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004242:	4b11      	ldr	r3, [pc, #68]	@ (8004288 <HAL_RCC_GetSysClockFreq+0x94>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	0c5b      	lsrs	r3, r3, #17
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	4a11      	ldr	r2, [pc, #68]	@ (8004294 <HAL_RCC_GetSysClockFreq+0xa0>)
 800424e:	5cd3      	ldrb	r3, [r2, r3]
 8004250:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a0d      	ldr	r2, [pc, #52]	@ (800428c <HAL_RCC_GetSysClockFreq+0x98>)
 8004256:	fb03 f202 	mul.w	r2, r3, r2
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004260:	617b      	str	r3, [r7, #20]
 8004262:	e004      	b.n	800426e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a0c      	ldr	r2, [pc, #48]	@ (8004298 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004268:	fb02 f303 	mul.w	r3, r2, r3
 800426c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	613b      	str	r3, [r7, #16]
      break;
 8004272:	e002      	b.n	800427a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004274:	4b05      	ldr	r3, [pc, #20]	@ (800428c <HAL_RCC_GetSysClockFreq+0x98>)
 8004276:	613b      	str	r3, [r7, #16]
      break;
 8004278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800427a:	693b      	ldr	r3, [r7, #16]
}
 800427c:	4618      	mov	r0, r3
 800427e:	371c      	adds	r7, #28
 8004280:	46bd      	mov	sp, r7
 8004282:	bc80      	pop	{r7}
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40021000 	.word	0x40021000
 800428c:	007a1200 	.word	0x007a1200
 8004290:	08008158 	.word	0x08008158
 8004294:	08008168 	.word	0x08008168
 8004298:	003d0900 	.word	0x003d0900

0800429c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042a0:	4b02      	ldr	r3, [pc, #8]	@ (80042ac <HAL_RCC_GetHCLKFreq+0x10>)
 80042a2:	681b      	ldr	r3, [r3, #0]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr
 80042ac:	20000000 	.word	0x20000000

080042b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042b4:	f7ff fff2 	bl	800429c <HAL_RCC_GetHCLKFreq>
 80042b8:	4602      	mov	r2, r0
 80042ba:	4b05      	ldr	r3, [pc, #20]	@ (80042d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	0a1b      	lsrs	r3, r3, #8
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	4903      	ldr	r1, [pc, #12]	@ (80042d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042c6:	5ccb      	ldrb	r3, [r1, r3]
 80042c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40021000 	.word	0x40021000
 80042d4:	08008150 	.word	0x08008150

080042d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042dc:	f7ff ffde 	bl	800429c <HAL_RCC_GetHCLKFreq>
 80042e0:	4602      	mov	r2, r0
 80042e2:	4b05      	ldr	r3, [pc, #20]	@ (80042f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	0adb      	lsrs	r3, r3, #11
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	4903      	ldr	r1, [pc, #12]	@ (80042fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ee:	5ccb      	ldrb	r3, [r1, r3]
 80042f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	40021000 	.word	0x40021000
 80042fc:	08008150 	.word	0x08008150

08004300 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004308:	4b0a      	ldr	r3, [pc, #40]	@ (8004334 <RCC_Delay+0x34>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a0a      	ldr	r2, [pc, #40]	@ (8004338 <RCC_Delay+0x38>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	0a5b      	lsrs	r3, r3, #9
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	fb02 f303 	mul.w	r3, r2, r3
 800431a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800431c:	bf00      	nop
  }
  while (Delay --);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	1e5a      	subs	r2, r3, #1
 8004322:	60fa      	str	r2, [r7, #12]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1f9      	bne.n	800431c <RCC_Delay+0x1c>
}
 8004328:	bf00      	nop
 800432a:	bf00      	nop
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr
 8004334:	20000000 	.word	0x20000000
 8004338:	10624dd3 	.word	0x10624dd3

0800433c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e041      	b.n	80043d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d106      	bne.n	8004368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fe f90a 	bl	800257c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3304      	adds	r3, #4
 8004378:	4619      	mov	r1, r3
 800437a:	4610      	mov	r0, r2
 800437c:	f000 faae 	bl	80048dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
	...

080043dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d001      	beq.n	80043f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e032      	b.n	800445a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a18      	ldr	r2, [pc, #96]	@ (8004464 <HAL_TIM_Base_Start+0x88>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00e      	beq.n	8004424 <HAL_TIM_Base_Start+0x48>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800440e:	d009      	beq.n	8004424 <HAL_TIM_Base_Start+0x48>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a14      	ldr	r2, [pc, #80]	@ (8004468 <HAL_TIM_Base_Start+0x8c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d004      	beq.n	8004424 <HAL_TIM_Base_Start+0x48>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a13      	ldr	r2, [pc, #76]	@ (800446c <HAL_TIM_Base_Start+0x90>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d111      	bne.n	8004448 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2b06      	cmp	r3, #6
 8004434:	d010      	beq.n	8004458 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f042 0201 	orr.w	r2, r2, #1
 8004444:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004446:	e007      	b.n	8004458 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0201 	orr.w	r2, r2, #1
 8004456:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr
 8004464:	40012c00 	.word	0x40012c00
 8004468:	40000400 	.word	0x40000400
 800446c:	40000800 	.word	0x40000800

08004470 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b01      	cmp	r3, #1
 8004482:	d001      	beq.n	8004488 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e03a      	b.n	80044fe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0201 	orr.w	r2, r2, #1
 800449e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a18      	ldr	r2, [pc, #96]	@ (8004508 <HAL_TIM_Base_Start_IT+0x98>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d00e      	beq.n	80044c8 <HAL_TIM_Base_Start_IT+0x58>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044b2:	d009      	beq.n	80044c8 <HAL_TIM_Base_Start_IT+0x58>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a14      	ldr	r2, [pc, #80]	@ (800450c <HAL_TIM_Base_Start_IT+0x9c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d004      	beq.n	80044c8 <HAL_TIM_Base_Start_IT+0x58>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a13      	ldr	r2, [pc, #76]	@ (8004510 <HAL_TIM_Base_Start_IT+0xa0>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d111      	bne.n	80044ec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b06      	cmp	r3, #6
 80044d8:	d010      	beq.n	80044fc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f042 0201 	orr.w	r2, r2, #1
 80044e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ea:	e007      	b.n	80044fc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0201 	orr.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	bc80      	pop	{r7}
 8004506:	4770      	bx	lr
 8004508:	40012c00 	.word	0x40012c00
 800450c:	40000400 	.word	0x40000400
 8004510:	40000800 	.word	0x40000800

08004514 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d020      	beq.n	8004578 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d01b      	beq.n	8004578 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f06f 0202 	mvn.w	r2, #2
 8004548:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f9a1 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
 8004564:	e005      	b.n	8004572 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f994 	bl	8004894 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f9a3 	bl	80048b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b00      	cmp	r3, #0
 8004580:	d020      	beq.n	80045c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	d01b      	beq.n	80045c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f06f 0204 	mvn.w	r2, #4
 8004594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2202      	movs	r2, #2
 800459a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f97b 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
 80045b0:	e005      	b.n	80045be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f96e 	bl	8004894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f97d 	bl	80048b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d020      	beq.n	8004610 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d01b      	beq.n	8004610 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f06f 0208 	mvn.w	r2, #8
 80045e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2204      	movs	r2, #4
 80045e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	f003 0303 	and.w	r3, r3, #3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f955 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
 80045fc:	e005      	b.n	800460a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f948 	bl	8004894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f957 	bl	80048b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f003 0310 	and.w	r3, r3, #16
 8004616:	2b00      	cmp	r3, #0
 8004618:	d020      	beq.n	800465c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2b00      	cmp	r3, #0
 8004622:	d01b      	beq.n	800465c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0210 	mvn.w	r2, #16
 800462c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2208      	movs	r2, #8
 8004632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f92f 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
 8004648:	e005      	b.n	8004656 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f922 	bl	8004894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f931 	bl	80048b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00c      	beq.n	8004680 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b00      	cmp	r3, #0
 800466e:	d007      	beq.n	8004680 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f06f 0201 	mvn.w	r2, #1
 8004678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f901 	bl	8004882 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00c      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004690:	2b00      	cmp	r3, #0
 8004692:	d007      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800469c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 fa87 	bl	8004bb2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00c      	beq.n	80046c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d007      	beq.n	80046c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f901 	bl	80048ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00c      	beq.n	80046ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f003 0320 	and.w	r3, r3, #32
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d007      	beq.n	80046ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f06f 0220 	mvn.w	r2, #32
 80046e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fa5a 	bl	8004ba0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046ec:	bf00      	nop
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_TIM_ConfigClockSource+0x1c>
 800470c:	2302      	movs	r3, #2
 800470e:	e0b4      	b.n	800487a <HAL_TIM_ConfigClockSource+0x186>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800472e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004736:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004748:	d03e      	beq.n	80047c8 <HAL_TIM_ConfigClockSource+0xd4>
 800474a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800474e:	f200 8087 	bhi.w	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004752:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004756:	f000 8086 	beq.w	8004866 <HAL_TIM_ConfigClockSource+0x172>
 800475a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800475e:	d87f      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004760:	2b70      	cmp	r3, #112	@ 0x70
 8004762:	d01a      	beq.n	800479a <HAL_TIM_ConfigClockSource+0xa6>
 8004764:	2b70      	cmp	r3, #112	@ 0x70
 8004766:	d87b      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004768:	2b60      	cmp	r3, #96	@ 0x60
 800476a:	d050      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x11a>
 800476c:	2b60      	cmp	r3, #96	@ 0x60
 800476e:	d877      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004770:	2b50      	cmp	r3, #80	@ 0x50
 8004772:	d03c      	beq.n	80047ee <HAL_TIM_ConfigClockSource+0xfa>
 8004774:	2b50      	cmp	r3, #80	@ 0x50
 8004776:	d873      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004778:	2b40      	cmp	r3, #64	@ 0x40
 800477a:	d058      	beq.n	800482e <HAL_TIM_ConfigClockSource+0x13a>
 800477c:	2b40      	cmp	r3, #64	@ 0x40
 800477e:	d86f      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004780:	2b30      	cmp	r3, #48	@ 0x30
 8004782:	d064      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x15a>
 8004784:	2b30      	cmp	r3, #48	@ 0x30
 8004786:	d86b      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004788:	2b20      	cmp	r3, #32
 800478a:	d060      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x15a>
 800478c:	2b20      	cmp	r3, #32
 800478e:	d867      	bhi.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
 8004790:	2b00      	cmp	r3, #0
 8004792:	d05c      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x15a>
 8004794:	2b10      	cmp	r3, #16
 8004796:	d05a      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x15a>
 8004798:	e062      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047aa:	f000 f97c 	bl	8004aa6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80047bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	609a      	str	r2, [r3, #8]
      break;
 80047c6:	e04f      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047d8:	f000 f965 	bl	8004aa6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047ea:	609a      	str	r2, [r3, #8]
      break;
 80047ec:	e03c      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047fa:	461a      	mov	r2, r3
 80047fc:	f000 f8dc 	bl	80049b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2150      	movs	r1, #80	@ 0x50
 8004806:	4618      	mov	r0, r3
 8004808:	f000 f933 	bl	8004a72 <TIM_ITRx_SetConfig>
      break;
 800480c:	e02c      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800481a:	461a      	mov	r2, r3
 800481c:	f000 f8fa 	bl	8004a14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2160      	movs	r1, #96	@ 0x60
 8004826:	4618      	mov	r0, r3
 8004828:	f000 f923 	bl	8004a72 <TIM_ITRx_SetConfig>
      break;
 800482c:	e01c      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800483a:	461a      	mov	r2, r3
 800483c:	f000 f8bc 	bl	80049b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2140      	movs	r1, #64	@ 0x40
 8004846:	4618      	mov	r0, r3
 8004848:	f000 f913 	bl	8004a72 <TIM_ITRx_SetConfig>
      break;
 800484c:	e00c      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4619      	mov	r1, r3
 8004858:	4610      	mov	r0, r2
 800485a:	f000 f90a 	bl	8004a72 <TIM_ITRx_SetConfig>
      break;
 800485e:	e003      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	73fb      	strb	r3, [r7, #15]
      break;
 8004864:	e000      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004866:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004878:	7bfb      	ldrb	r3, [r7, #15]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	bc80      	pop	{r7}
 8004892:	4770      	bx	lr

08004894 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bc80      	pop	{r7}
 80048a4:	4770      	bx	lr

080048a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bc80      	pop	{r7}
 80048b6:	4770      	bx	lr

080048b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr

080048ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr

080048dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a2f      	ldr	r2, [pc, #188]	@ (80049ac <TIM_Base_SetConfig+0xd0>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d00b      	beq.n	800490c <TIM_Base_SetConfig+0x30>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048fa:	d007      	beq.n	800490c <TIM_Base_SetConfig+0x30>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a2c      	ldr	r2, [pc, #176]	@ (80049b0 <TIM_Base_SetConfig+0xd4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d003      	beq.n	800490c <TIM_Base_SetConfig+0x30>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a2b      	ldr	r2, [pc, #172]	@ (80049b4 <TIM_Base_SetConfig+0xd8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d108      	bne.n	800491e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a22      	ldr	r2, [pc, #136]	@ (80049ac <TIM_Base_SetConfig+0xd0>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00b      	beq.n	800493e <TIM_Base_SetConfig+0x62>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800492c:	d007      	beq.n	800493e <TIM_Base_SetConfig+0x62>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a1f      	ldr	r2, [pc, #124]	@ (80049b0 <TIM_Base_SetConfig+0xd4>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d003      	beq.n	800493e <TIM_Base_SetConfig+0x62>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a1e      	ldr	r2, [pc, #120]	@ (80049b4 <TIM_Base_SetConfig+0xd8>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d108      	bne.n	8004950 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4313      	orrs	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a0d      	ldr	r2, [pc, #52]	@ (80049ac <TIM_Base_SetConfig+0xd0>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d103      	bne.n	8004984 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	691a      	ldr	r2, [r3, #16]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d005      	beq.n	80049a2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f023 0201 	bic.w	r2, r3, #1
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	611a      	str	r2, [r3, #16]
  }
}
 80049a2:	bf00      	nop
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr
 80049ac:	40012c00 	.word	0x40012c00
 80049b0:	40000400 	.word	0x40000400
 80049b4:	40000800 	.word	0x40000800

080049b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	f023 0201 	bic.w	r2, r3, #1
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f023 030a 	bic.w	r3, r3, #10
 80049f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	621a      	str	r2, [r3, #32]
}
 8004a0a:	bf00      	nop
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr

08004a14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	f023 0210 	bic.w	r2, r3, #16
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	031b      	lsls	r3, r3, #12
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a50:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	621a      	str	r2, [r3, #32]
}
 8004a68:	bf00      	nop
 8004a6a:	371c      	adds	r7, #28
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bc80      	pop	{r7}
 8004a70:	4770      	bx	lr

08004a72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b085      	sub	sp, #20
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
 8004a7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f043 0307 	orr.w	r3, r3, #7
 8004a94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	609a      	str	r2, [r3, #8]
}
 8004a9c:	bf00      	nop
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bc80      	pop	{r7}
 8004aa4:	4770      	bx	lr

08004aa6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b087      	sub	sp, #28
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	60f8      	str	r0, [r7, #12]
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	607a      	str	r2, [r7, #4]
 8004ab2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ac0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	021a      	lsls	r2, r3, #8
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	609a      	str	r2, [r3, #8]
}
 8004ada:	bf00      	nop
 8004adc:	371c      	adds	r7, #28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bc80      	pop	{r7}
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d101      	bne.n	8004afc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004af8:	2302      	movs	r3, #2
 8004afa:	e046      	b.n	8004b8a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a16      	ldr	r2, [pc, #88]	@ (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d00e      	beq.n	8004b5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b48:	d009      	beq.n	8004b5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a12      	ldr	r2, [pc, #72]	@ (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d004      	beq.n	8004b5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a10      	ldr	r2, [pc, #64]	@ (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d10c      	bne.n	8004b78 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr
 8004b94:	40012c00 	.word	0x40012c00
 8004b98:	40000400 	.word	0x40000400
 8004b9c:	40000800 	.word	0x40000800

08004ba0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc80      	pop	{r7}
 8004bb0:	4770      	bx	lr

08004bb2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e042      	b.n	8004c5c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d106      	bne.n	8004bf0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fd fd06 	bl	80025fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2224      	movs	r2, #36	@ 0x24
 8004bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f971 	bl	8004ef0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	691a      	ldr	r2, [r3, #16]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	695a      	ldr	r2, [r3, #20]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2220      	movs	r2, #32
 8004c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08a      	sub	sp, #40	@ 0x28
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	603b      	str	r3, [r7, #0]
 8004c70:	4613      	mov	r3, r2
 8004c72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	d175      	bne.n	8004d70 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d002      	beq.n	8004c90 <HAL_UART_Transmit+0x2c>
 8004c8a:	88fb      	ldrh	r3, [r7, #6]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e06e      	b.n	8004d72 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2221      	movs	r2, #33	@ 0x21
 8004c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ca2:	f7fd fe81 	bl	80029a8 <HAL_GetTick>
 8004ca6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	88fa      	ldrh	r2, [r7, #6]
 8004cac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	88fa      	ldrh	r2, [r7, #6]
 8004cb2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cbc:	d108      	bne.n	8004cd0 <HAL_UART_Transmit+0x6c>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d104      	bne.n	8004cd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	61bb      	str	r3, [r7, #24]
 8004cce:	e003      	b.n	8004cd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cd8:	e02e      	b.n	8004d38 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	2180      	movs	r1, #128	@ 0x80
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 f848 	bl	8004d7a <UART_WaitOnFlagUntilTimeout>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d005      	beq.n	8004cfc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e03a      	b.n	8004d72 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10b      	bne.n	8004d1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	881b      	ldrh	r3, [r3, #0]
 8004d06:	461a      	mov	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	3302      	adds	r3, #2
 8004d16:	61bb      	str	r3, [r7, #24]
 8004d18:	e007      	b.n	8004d2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	781a      	ldrb	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	3301      	adds	r3, #1
 8004d28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1cb      	bne.n	8004cda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	2140      	movs	r1, #64	@ 0x40
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 f814 	bl	8004d7a <UART_WaitOnFlagUntilTimeout>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d005      	beq.n	8004d64 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e006      	b.n	8004d72 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	e000      	b.n	8004d72 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004d70:	2302      	movs	r3, #2
  }
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3720      	adds	r7, #32
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b086      	sub	sp, #24
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	60f8      	str	r0, [r7, #12]
 8004d82:	60b9      	str	r1, [r7, #8]
 8004d84:	603b      	str	r3, [r7, #0]
 8004d86:	4613      	mov	r3, r2
 8004d88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d8a:	e03b      	b.n	8004e04 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d92:	d037      	beq.n	8004e04 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d94:	f7fd fe08 	bl	80029a8 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	6a3a      	ldr	r2, [r7, #32]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d302      	bcc.n	8004daa <UART_WaitOnFlagUntilTimeout+0x30>
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e03a      	b.n	8004e24 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d023      	beq.n	8004e04 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2b80      	cmp	r3, #128	@ 0x80
 8004dc0:	d020      	beq.n	8004e04 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2b40      	cmp	r3, #64	@ 0x40
 8004dc6:	d01d      	beq.n	8004e04 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0308 	and.w	r3, r3, #8
 8004dd2:	2b08      	cmp	r3, #8
 8004dd4:	d116      	bne.n	8004e04 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	617b      	str	r3, [r7, #20]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 f81d 	bl	8004e2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2208      	movs	r2, #8
 8004df6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e00f      	b.n	8004e24 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	bf0c      	ite	eq
 8004e14:	2301      	moveq	r3, #1
 8004e16:	2300      	movne	r3, #0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	79fb      	ldrb	r3, [r7, #7]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d0b4      	beq.n	8004d8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3718      	adds	r7, #24
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b095      	sub	sp, #84	@ 0x54
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	330c      	adds	r3, #12
 8004e3a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e3e:	e853 3f00 	ldrex	r3, [r3]
 8004e42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	330c      	adds	r3, #12
 8004e52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e54:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e5c:	e841 2300 	strex	r3, r2, [r1]
 8004e60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1e5      	bne.n	8004e34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3314      	adds	r3, #20
 8004e6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e70:	6a3b      	ldr	r3, [r7, #32]
 8004e72:	e853 3f00 	ldrex	r3, [r3]
 8004e76:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	f023 0301 	bic.w	r3, r3, #1
 8004e7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	3314      	adds	r3, #20
 8004e86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e90:	e841 2300 	strex	r3, r2, [r1]
 8004e94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1e5      	bne.n	8004e68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d119      	bne.n	8004ed8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	330c      	adds	r3, #12
 8004eaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	e853 3f00 	ldrex	r3, [r3]
 8004eb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f023 0310 	bic.w	r3, r3, #16
 8004eba:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	330c      	adds	r3, #12
 8004ec2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ec4:	61ba      	str	r2, [r7, #24]
 8004ec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec8:	6979      	ldr	r1, [r7, #20]
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	e841 2300 	strex	r3, r2, [r1]
 8004ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1e5      	bne.n	8004ea4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ee6:	bf00      	nop
 8004ee8:	3754      	adds	r7, #84	@ 0x54
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bc80      	pop	{r7}
 8004eee:	4770      	bx	lr

08004ef0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004f2a:	f023 030c 	bic.w	r3, r3, #12
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	6812      	ldr	r2, [r2, #0]
 8004f32:	68b9      	ldr	r1, [r7, #8]
 8004f34:	430b      	orrs	r3, r1
 8004f36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	699a      	ldr	r2, [r3, #24]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a2c      	ldr	r2, [pc, #176]	@ (8005004 <UART_SetConfig+0x114>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d103      	bne.n	8004f60 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f58:	f7ff f9be 	bl	80042d8 <HAL_RCC_GetPCLK2Freq>
 8004f5c:	60f8      	str	r0, [r7, #12]
 8004f5e:	e002      	b.n	8004f66 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f60:	f7ff f9a6 	bl	80042b0 <HAL_RCC_GetPCLK1Freq>
 8004f64:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	009a      	lsls	r2, r3, #2
 8004f70:	441a      	add	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7c:	4a22      	ldr	r2, [pc, #136]	@ (8005008 <UART_SetConfig+0x118>)
 8004f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f82:	095b      	lsrs	r3, r3, #5
 8004f84:	0119      	lsls	r1, r3, #4
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009a      	lsls	r2, r3, #2
 8004f90:	441a      	add	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8005008 <UART_SetConfig+0x118>)
 8004f9e:	fba3 0302 	umull	r0, r3, r3, r2
 8004fa2:	095b      	lsrs	r3, r3, #5
 8004fa4:	2064      	movs	r0, #100	@ 0x64
 8004fa6:	fb00 f303 	mul.w	r3, r0, r3
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	011b      	lsls	r3, r3, #4
 8004fae:	3332      	adds	r3, #50	@ 0x32
 8004fb0:	4a15      	ldr	r2, [pc, #84]	@ (8005008 <UART_SetConfig+0x118>)
 8004fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb6:	095b      	lsrs	r3, r3, #5
 8004fb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fbc:	4419      	add	r1, r3
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009a      	lsls	r2, r3, #2
 8004fc8:	441a      	add	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8005008 <UART_SetConfig+0x118>)
 8004fd6:	fba3 0302 	umull	r0, r3, r3, r2
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	2064      	movs	r0, #100	@ 0x64
 8004fde:	fb00 f303 	mul.w	r3, r0, r3
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	011b      	lsls	r3, r3, #4
 8004fe6:	3332      	adds	r3, #50	@ 0x32
 8004fe8:	4a07      	ldr	r2, [pc, #28]	@ (8005008 <UART_SetConfig+0x118>)
 8004fea:	fba2 2303 	umull	r2, r3, r2, r3
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	f003 020f 	and.w	r2, r3, #15
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	440a      	add	r2, r1
 8004ffa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ffc:	bf00      	nop
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40013800 	.word	0x40013800
 8005008:	51eb851f 	.word	0x51eb851f

0800500c <__cvt>:
 800500c:	2b00      	cmp	r3, #0
 800500e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005012:	461d      	mov	r5, r3
 8005014:	bfbb      	ittet	lt
 8005016:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800501a:	461d      	movlt	r5, r3
 800501c:	2300      	movge	r3, #0
 800501e:	232d      	movlt	r3, #45	@ 0x2d
 8005020:	b088      	sub	sp, #32
 8005022:	4614      	mov	r4, r2
 8005024:	bfb8      	it	lt
 8005026:	4614      	movlt	r4, r2
 8005028:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800502a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800502c:	7013      	strb	r3, [r2, #0]
 800502e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005030:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005034:	f023 0820 	bic.w	r8, r3, #32
 8005038:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800503c:	d005      	beq.n	800504a <__cvt+0x3e>
 800503e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005042:	d100      	bne.n	8005046 <__cvt+0x3a>
 8005044:	3601      	adds	r6, #1
 8005046:	2302      	movs	r3, #2
 8005048:	e000      	b.n	800504c <__cvt+0x40>
 800504a:	2303      	movs	r3, #3
 800504c:	aa07      	add	r2, sp, #28
 800504e:	9204      	str	r2, [sp, #16]
 8005050:	aa06      	add	r2, sp, #24
 8005052:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005056:	e9cd 3600 	strd	r3, r6, [sp]
 800505a:	4622      	mov	r2, r4
 800505c:	462b      	mov	r3, r5
 800505e:	f000 fe4f 	bl	8005d00 <_dtoa_r>
 8005062:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005066:	4607      	mov	r7, r0
 8005068:	d119      	bne.n	800509e <__cvt+0x92>
 800506a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800506c:	07db      	lsls	r3, r3, #31
 800506e:	d50e      	bpl.n	800508e <__cvt+0x82>
 8005070:	eb00 0906 	add.w	r9, r0, r6
 8005074:	2200      	movs	r2, #0
 8005076:	2300      	movs	r3, #0
 8005078:	4620      	mov	r0, r4
 800507a:	4629      	mov	r1, r5
 800507c:	f7fb fd48 	bl	8000b10 <__aeabi_dcmpeq>
 8005080:	b108      	cbz	r0, 8005086 <__cvt+0x7a>
 8005082:	f8cd 901c 	str.w	r9, [sp, #28]
 8005086:	2230      	movs	r2, #48	@ 0x30
 8005088:	9b07      	ldr	r3, [sp, #28]
 800508a:	454b      	cmp	r3, r9
 800508c:	d31e      	bcc.n	80050cc <__cvt+0xc0>
 800508e:	4638      	mov	r0, r7
 8005090:	9b07      	ldr	r3, [sp, #28]
 8005092:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005094:	1bdb      	subs	r3, r3, r7
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	b008      	add	sp, #32
 800509a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800509e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80050a2:	eb00 0906 	add.w	r9, r0, r6
 80050a6:	d1e5      	bne.n	8005074 <__cvt+0x68>
 80050a8:	7803      	ldrb	r3, [r0, #0]
 80050aa:	2b30      	cmp	r3, #48	@ 0x30
 80050ac:	d10a      	bne.n	80050c4 <__cvt+0xb8>
 80050ae:	2200      	movs	r2, #0
 80050b0:	2300      	movs	r3, #0
 80050b2:	4620      	mov	r0, r4
 80050b4:	4629      	mov	r1, r5
 80050b6:	f7fb fd2b 	bl	8000b10 <__aeabi_dcmpeq>
 80050ba:	b918      	cbnz	r0, 80050c4 <__cvt+0xb8>
 80050bc:	f1c6 0601 	rsb	r6, r6, #1
 80050c0:	f8ca 6000 	str.w	r6, [sl]
 80050c4:	f8da 3000 	ldr.w	r3, [sl]
 80050c8:	4499      	add	r9, r3
 80050ca:	e7d3      	b.n	8005074 <__cvt+0x68>
 80050cc:	1c59      	adds	r1, r3, #1
 80050ce:	9107      	str	r1, [sp, #28]
 80050d0:	701a      	strb	r2, [r3, #0]
 80050d2:	e7d9      	b.n	8005088 <__cvt+0x7c>

080050d4 <__exponent>:
 80050d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050d6:	2900      	cmp	r1, #0
 80050d8:	bfb6      	itet	lt
 80050da:	232d      	movlt	r3, #45	@ 0x2d
 80050dc:	232b      	movge	r3, #43	@ 0x2b
 80050de:	4249      	neglt	r1, r1
 80050e0:	2909      	cmp	r1, #9
 80050e2:	7002      	strb	r2, [r0, #0]
 80050e4:	7043      	strb	r3, [r0, #1]
 80050e6:	dd29      	ble.n	800513c <__exponent+0x68>
 80050e8:	f10d 0307 	add.w	r3, sp, #7
 80050ec:	461d      	mov	r5, r3
 80050ee:	270a      	movs	r7, #10
 80050f0:	fbb1 f6f7 	udiv	r6, r1, r7
 80050f4:	461a      	mov	r2, r3
 80050f6:	fb07 1416 	mls	r4, r7, r6, r1
 80050fa:	3430      	adds	r4, #48	@ 0x30
 80050fc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005100:	460c      	mov	r4, r1
 8005102:	2c63      	cmp	r4, #99	@ 0x63
 8005104:	4631      	mov	r1, r6
 8005106:	f103 33ff 	add.w	r3, r3, #4294967295
 800510a:	dcf1      	bgt.n	80050f0 <__exponent+0x1c>
 800510c:	3130      	adds	r1, #48	@ 0x30
 800510e:	1e94      	subs	r4, r2, #2
 8005110:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005114:	4623      	mov	r3, r4
 8005116:	1c41      	adds	r1, r0, #1
 8005118:	42ab      	cmp	r3, r5
 800511a:	d30a      	bcc.n	8005132 <__exponent+0x5e>
 800511c:	f10d 0309 	add.w	r3, sp, #9
 8005120:	1a9b      	subs	r3, r3, r2
 8005122:	42ac      	cmp	r4, r5
 8005124:	bf88      	it	hi
 8005126:	2300      	movhi	r3, #0
 8005128:	3302      	adds	r3, #2
 800512a:	4403      	add	r3, r0
 800512c:	1a18      	subs	r0, r3, r0
 800512e:	b003      	add	sp, #12
 8005130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005132:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005136:	f801 6f01 	strb.w	r6, [r1, #1]!
 800513a:	e7ed      	b.n	8005118 <__exponent+0x44>
 800513c:	2330      	movs	r3, #48	@ 0x30
 800513e:	3130      	adds	r1, #48	@ 0x30
 8005140:	7083      	strb	r3, [r0, #2]
 8005142:	70c1      	strb	r1, [r0, #3]
 8005144:	1d03      	adds	r3, r0, #4
 8005146:	e7f1      	b.n	800512c <__exponent+0x58>

08005148 <_printf_float>:
 8005148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800514c:	b091      	sub	sp, #68	@ 0x44
 800514e:	460c      	mov	r4, r1
 8005150:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005154:	4616      	mov	r6, r2
 8005156:	461f      	mov	r7, r3
 8005158:	4605      	mov	r5, r0
 800515a:	f000 fcc1 	bl	8005ae0 <_localeconv_r>
 800515e:	6803      	ldr	r3, [r0, #0]
 8005160:	4618      	mov	r0, r3
 8005162:	9308      	str	r3, [sp, #32]
 8005164:	f7fa fff4 	bl	8000150 <strlen>
 8005168:	2300      	movs	r3, #0
 800516a:	930e      	str	r3, [sp, #56]	@ 0x38
 800516c:	f8d8 3000 	ldr.w	r3, [r8]
 8005170:	9009      	str	r0, [sp, #36]	@ 0x24
 8005172:	3307      	adds	r3, #7
 8005174:	f023 0307 	bic.w	r3, r3, #7
 8005178:	f103 0208 	add.w	r2, r3, #8
 800517c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005180:	f8d4 b000 	ldr.w	fp, [r4]
 8005184:	f8c8 2000 	str.w	r2, [r8]
 8005188:	e9d3 8900 	ldrd	r8, r9, [r3]
 800518c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005190:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005192:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005196:	f04f 32ff 	mov.w	r2, #4294967295
 800519a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800519e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80051a2:	4b9c      	ldr	r3, [pc, #624]	@ (8005414 <_printf_float+0x2cc>)
 80051a4:	f7fb fce6 	bl	8000b74 <__aeabi_dcmpun>
 80051a8:	bb70      	cbnz	r0, 8005208 <_printf_float+0xc0>
 80051aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80051ae:	f04f 32ff 	mov.w	r2, #4294967295
 80051b2:	4b98      	ldr	r3, [pc, #608]	@ (8005414 <_printf_float+0x2cc>)
 80051b4:	f7fb fcc0 	bl	8000b38 <__aeabi_dcmple>
 80051b8:	bb30      	cbnz	r0, 8005208 <_printf_float+0xc0>
 80051ba:	2200      	movs	r2, #0
 80051bc:	2300      	movs	r3, #0
 80051be:	4640      	mov	r0, r8
 80051c0:	4649      	mov	r1, r9
 80051c2:	f7fb fcaf 	bl	8000b24 <__aeabi_dcmplt>
 80051c6:	b110      	cbz	r0, 80051ce <_printf_float+0x86>
 80051c8:	232d      	movs	r3, #45	@ 0x2d
 80051ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051ce:	4a92      	ldr	r2, [pc, #584]	@ (8005418 <_printf_float+0x2d0>)
 80051d0:	4b92      	ldr	r3, [pc, #584]	@ (800541c <_printf_float+0x2d4>)
 80051d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80051d6:	bf94      	ite	ls
 80051d8:	4690      	movls	r8, r2
 80051da:	4698      	movhi	r8, r3
 80051dc:	2303      	movs	r3, #3
 80051de:	f04f 0900 	mov.w	r9, #0
 80051e2:	6123      	str	r3, [r4, #16]
 80051e4:	f02b 0304 	bic.w	r3, fp, #4
 80051e8:	6023      	str	r3, [r4, #0]
 80051ea:	4633      	mov	r3, r6
 80051ec:	4621      	mov	r1, r4
 80051ee:	4628      	mov	r0, r5
 80051f0:	9700      	str	r7, [sp, #0]
 80051f2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80051f4:	f000 f9d4 	bl	80055a0 <_printf_common>
 80051f8:	3001      	adds	r0, #1
 80051fa:	f040 8090 	bne.w	800531e <_printf_float+0x1d6>
 80051fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005202:	b011      	add	sp, #68	@ 0x44
 8005204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005208:	4642      	mov	r2, r8
 800520a:	464b      	mov	r3, r9
 800520c:	4640      	mov	r0, r8
 800520e:	4649      	mov	r1, r9
 8005210:	f7fb fcb0 	bl	8000b74 <__aeabi_dcmpun>
 8005214:	b148      	cbz	r0, 800522a <_printf_float+0xe2>
 8005216:	464b      	mov	r3, r9
 8005218:	2b00      	cmp	r3, #0
 800521a:	bfb8      	it	lt
 800521c:	232d      	movlt	r3, #45	@ 0x2d
 800521e:	4a80      	ldr	r2, [pc, #512]	@ (8005420 <_printf_float+0x2d8>)
 8005220:	bfb8      	it	lt
 8005222:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005226:	4b7f      	ldr	r3, [pc, #508]	@ (8005424 <_printf_float+0x2dc>)
 8005228:	e7d3      	b.n	80051d2 <_printf_float+0x8a>
 800522a:	6863      	ldr	r3, [r4, #4]
 800522c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	d13f      	bne.n	80052b4 <_printf_float+0x16c>
 8005234:	2306      	movs	r3, #6
 8005236:	6063      	str	r3, [r4, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800523e:	6023      	str	r3, [r4, #0]
 8005240:	9206      	str	r2, [sp, #24]
 8005242:	aa0e      	add	r2, sp, #56	@ 0x38
 8005244:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005248:	aa0d      	add	r2, sp, #52	@ 0x34
 800524a:	9203      	str	r2, [sp, #12]
 800524c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005250:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005254:	6863      	ldr	r3, [r4, #4]
 8005256:	4642      	mov	r2, r8
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	4628      	mov	r0, r5
 800525c:	464b      	mov	r3, r9
 800525e:	910a      	str	r1, [sp, #40]	@ 0x28
 8005260:	f7ff fed4 	bl	800500c <__cvt>
 8005264:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005266:	4680      	mov	r8, r0
 8005268:	2947      	cmp	r1, #71	@ 0x47
 800526a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800526c:	d128      	bne.n	80052c0 <_printf_float+0x178>
 800526e:	1cc8      	adds	r0, r1, #3
 8005270:	db02      	blt.n	8005278 <_printf_float+0x130>
 8005272:	6863      	ldr	r3, [r4, #4]
 8005274:	4299      	cmp	r1, r3
 8005276:	dd40      	ble.n	80052fa <_printf_float+0x1b2>
 8005278:	f1aa 0a02 	sub.w	sl, sl, #2
 800527c:	fa5f fa8a 	uxtb.w	sl, sl
 8005280:	4652      	mov	r2, sl
 8005282:	3901      	subs	r1, #1
 8005284:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005288:	910d      	str	r1, [sp, #52]	@ 0x34
 800528a:	f7ff ff23 	bl	80050d4 <__exponent>
 800528e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005290:	4681      	mov	r9, r0
 8005292:	1813      	adds	r3, r2, r0
 8005294:	2a01      	cmp	r2, #1
 8005296:	6123      	str	r3, [r4, #16]
 8005298:	dc02      	bgt.n	80052a0 <_printf_float+0x158>
 800529a:	6822      	ldr	r2, [r4, #0]
 800529c:	07d2      	lsls	r2, r2, #31
 800529e:	d501      	bpl.n	80052a4 <_printf_float+0x15c>
 80052a0:	3301      	adds	r3, #1
 80052a2:	6123      	str	r3, [r4, #16]
 80052a4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d09e      	beq.n	80051ea <_printf_float+0xa2>
 80052ac:	232d      	movs	r3, #45	@ 0x2d
 80052ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052b2:	e79a      	b.n	80051ea <_printf_float+0xa2>
 80052b4:	2947      	cmp	r1, #71	@ 0x47
 80052b6:	d1bf      	bne.n	8005238 <_printf_float+0xf0>
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1bd      	bne.n	8005238 <_printf_float+0xf0>
 80052bc:	2301      	movs	r3, #1
 80052be:	e7ba      	b.n	8005236 <_printf_float+0xee>
 80052c0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80052c4:	d9dc      	bls.n	8005280 <_printf_float+0x138>
 80052c6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80052ca:	d118      	bne.n	80052fe <_printf_float+0x1b6>
 80052cc:	2900      	cmp	r1, #0
 80052ce:	6863      	ldr	r3, [r4, #4]
 80052d0:	dd0b      	ble.n	80052ea <_printf_float+0x1a2>
 80052d2:	6121      	str	r1, [r4, #16]
 80052d4:	b913      	cbnz	r3, 80052dc <_printf_float+0x194>
 80052d6:	6822      	ldr	r2, [r4, #0]
 80052d8:	07d0      	lsls	r0, r2, #31
 80052da:	d502      	bpl.n	80052e2 <_printf_float+0x19a>
 80052dc:	3301      	adds	r3, #1
 80052de:	440b      	add	r3, r1
 80052e0:	6123      	str	r3, [r4, #16]
 80052e2:	f04f 0900 	mov.w	r9, #0
 80052e6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80052e8:	e7dc      	b.n	80052a4 <_printf_float+0x15c>
 80052ea:	b913      	cbnz	r3, 80052f2 <_printf_float+0x1aa>
 80052ec:	6822      	ldr	r2, [r4, #0]
 80052ee:	07d2      	lsls	r2, r2, #31
 80052f0:	d501      	bpl.n	80052f6 <_printf_float+0x1ae>
 80052f2:	3302      	adds	r3, #2
 80052f4:	e7f4      	b.n	80052e0 <_printf_float+0x198>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e7f2      	b.n	80052e0 <_printf_float+0x198>
 80052fa:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80052fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005300:	4299      	cmp	r1, r3
 8005302:	db05      	blt.n	8005310 <_printf_float+0x1c8>
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	6121      	str	r1, [r4, #16]
 8005308:	07d8      	lsls	r0, r3, #31
 800530a:	d5ea      	bpl.n	80052e2 <_printf_float+0x19a>
 800530c:	1c4b      	adds	r3, r1, #1
 800530e:	e7e7      	b.n	80052e0 <_printf_float+0x198>
 8005310:	2900      	cmp	r1, #0
 8005312:	bfcc      	ite	gt
 8005314:	2201      	movgt	r2, #1
 8005316:	f1c1 0202 	rsble	r2, r1, #2
 800531a:	4413      	add	r3, r2
 800531c:	e7e0      	b.n	80052e0 <_printf_float+0x198>
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	055a      	lsls	r2, r3, #21
 8005322:	d407      	bmi.n	8005334 <_printf_float+0x1ec>
 8005324:	6923      	ldr	r3, [r4, #16]
 8005326:	4642      	mov	r2, r8
 8005328:	4631      	mov	r1, r6
 800532a:	4628      	mov	r0, r5
 800532c:	47b8      	blx	r7
 800532e:	3001      	adds	r0, #1
 8005330:	d12b      	bne.n	800538a <_printf_float+0x242>
 8005332:	e764      	b.n	80051fe <_printf_float+0xb6>
 8005334:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005338:	f240 80dc 	bls.w	80054f4 <_printf_float+0x3ac>
 800533c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005340:	2200      	movs	r2, #0
 8005342:	2300      	movs	r3, #0
 8005344:	f7fb fbe4 	bl	8000b10 <__aeabi_dcmpeq>
 8005348:	2800      	cmp	r0, #0
 800534a:	d033      	beq.n	80053b4 <_printf_float+0x26c>
 800534c:	2301      	movs	r3, #1
 800534e:	4631      	mov	r1, r6
 8005350:	4628      	mov	r0, r5
 8005352:	4a35      	ldr	r2, [pc, #212]	@ (8005428 <_printf_float+0x2e0>)
 8005354:	47b8      	blx	r7
 8005356:	3001      	adds	r0, #1
 8005358:	f43f af51 	beq.w	80051fe <_printf_float+0xb6>
 800535c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005360:	4543      	cmp	r3, r8
 8005362:	db02      	blt.n	800536a <_printf_float+0x222>
 8005364:	6823      	ldr	r3, [r4, #0]
 8005366:	07d8      	lsls	r0, r3, #31
 8005368:	d50f      	bpl.n	800538a <_printf_float+0x242>
 800536a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800536e:	4631      	mov	r1, r6
 8005370:	4628      	mov	r0, r5
 8005372:	47b8      	blx	r7
 8005374:	3001      	adds	r0, #1
 8005376:	f43f af42 	beq.w	80051fe <_printf_float+0xb6>
 800537a:	f04f 0900 	mov.w	r9, #0
 800537e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005382:	f104 0a1a 	add.w	sl, r4, #26
 8005386:	45c8      	cmp	r8, r9
 8005388:	dc09      	bgt.n	800539e <_printf_float+0x256>
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	079b      	lsls	r3, r3, #30
 800538e:	f100 8102 	bmi.w	8005596 <_printf_float+0x44e>
 8005392:	68e0      	ldr	r0, [r4, #12]
 8005394:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005396:	4298      	cmp	r0, r3
 8005398:	bfb8      	it	lt
 800539a:	4618      	movlt	r0, r3
 800539c:	e731      	b.n	8005202 <_printf_float+0xba>
 800539e:	2301      	movs	r3, #1
 80053a0:	4652      	mov	r2, sl
 80053a2:	4631      	mov	r1, r6
 80053a4:	4628      	mov	r0, r5
 80053a6:	47b8      	blx	r7
 80053a8:	3001      	adds	r0, #1
 80053aa:	f43f af28 	beq.w	80051fe <_printf_float+0xb6>
 80053ae:	f109 0901 	add.w	r9, r9, #1
 80053b2:	e7e8      	b.n	8005386 <_printf_float+0x23e>
 80053b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	dc38      	bgt.n	800542c <_printf_float+0x2e4>
 80053ba:	2301      	movs	r3, #1
 80053bc:	4631      	mov	r1, r6
 80053be:	4628      	mov	r0, r5
 80053c0:	4a19      	ldr	r2, [pc, #100]	@ (8005428 <_printf_float+0x2e0>)
 80053c2:	47b8      	blx	r7
 80053c4:	3001      	adds	r0, #1
 80053c6:	f43f af1a 	beq.w	80051fe <_printf_float+0xb6>
 80053ca:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80053ce:	ea59 0303 	orrs.w	r3, r9, r3
 80053d2:	d102      	bne.n	80053da <_printf_float+0x292>
 80053d4:	6823      	ldr	r3, [r4, #0]
 80053d6:	07d9      	lsls	r1, r3, #31
 80053d8:	d5d7      	bpl.n	800538a <_printf_float+0x242>
 80053da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80053de:	4631      	mov	r1, r6
 80053e0:	4628      	mov	r0, r5
 80053e2:	47b8      	blx	r7
 80053e4:	3001      	adds	r0, #1
 80053e6:	f43f af0a 	beq.w	80051fe <_printf_float+0xb6>
 80053ea:	f04f 0a00 	mov.w	sl, #0
 80053ee:	f104 0b1a 	add.w	fp, r4, #26
 80053f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80053f4:	425b      	negs	r3, r3
 80053f6:	4553      	cmp	r3, sl
 80053f8:	dc01      	bgt.n	80053fe <_printf_float+0x2b6>
 80053fa:	464b      	mov	r3, r9
 80053fc:	e793      	b.n	8005326 <_printf_float+0x1de>
 80053fe:	2301      	movs	r3, #1
 8005400:	465a      	mov	r2, fp
 8005402:	4631      	mov	r1, r6
 8005404:	4628      	mov	r0, r5
 8005406:	47b8      	blx	r7
 8005408:	3001      	adds	r0, #1
 800540a:	f43f aef8 	beq.w	80051fe <_printf_float+0xb6>
 800540e:	f10a 0a01 	add.w	sl, sl, #1
 8005412:	e7ee      	b.n	80053f2 <_printf_float+0x2aa>
 8005414:	7fefffff 	.word	0x7fefffff
 8005418:	0800816a 	.word	0x0800816a
 800541c:	0800816e 	.word	0x0800816e
 8005420:	08008172 	.word	0x08008172
 8005424:	08008176 	.word	0x08008176
 8005428:	0800817a 	.word	0x0800817a
 800542c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800542e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005432:	4553      	cmp	r3, sl
 8005434:	bfa8      	it	ge
 8005436:	4653      	movge	r3, sl
 8005438:	2b00      	cmp	r3, #0
 800543a:	4699      	mov	r9, r3
 800543c:	dc36      	bgt.n	80054ac <_printf_float+0x364>
 800543e:	f04f 0b00 	mov.w	fp, #0
 8005442:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005446:	f104 021a 	add.w	r2, r4, #26
 800544a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800544c:	930a      	str	r3, [sp, #40]	@ 0x28
 800544e:	eba3 0309 	sub.w	r3, r3, r9
 8005452:	455b      	cmp	r3, fp
 8005454:	dc31      	bgt.n	80054ba <_printf_float+0x372>
 8005456:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005458:	459a      	cmp	sl, r3
 800545a:	dc3a      	bgt.n	80054d2 <_printf_float+0x38a>
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	07da      	lsls	r2, r3, #31
 8005460:	d437      	bmi.n	80054d2 <_printf_float+0x38a>
 8005462:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005464:	ebaa 0903 	sub.w	r9, sl, r3
 8005468:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800546a:	ebaa 0303 	sub.w	r3, sl, r3
 800546e:	4599      	cmp	r9, r3
 8005470:	bfa8      	it	ge
 8005472:	4699      	movge	r9, r3
 8005474:	f1b9 0f00 	cmp.w	r9, #0
 8005478:	dc33      	bgt.n	80054e2 <_printf_float+0x39a>
 800547a:	f04f 0800 	mov.w	r8, #0
 800547e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005482:	f104 0b1a 	add.w	fp, r4, #26
 8005486:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005488:	ebaa 0303 	sub.w	r3, sl, r3
 800548c:	eba3 0309 	sub.w	r3, r3, r9
 8005490:	4543      	cmp	r3, r8
 8005492:	f77f af7a 	ble.w	800538a <_printf_float+0x242>
 8005496:	2301      	movs	r3, #1
 8005498:	465a      	mov	r2, fp
 800549a:	4631      	mov	r1, r6
 800549c:	4628      	mov	r0, r5
 800549e:	47b8      	blx	r7
 80054a0:	3001      	adds	r0, #1
 80054a2:	f43f aeac 	beq.w	80051fe <_printf_float+0xb6>
 80054a6:	f108 0801 	add.w	r8, r8, #1
 80054aa:	e7ec      	b.n	8005486 <_printf_float+0x33e>
 80054ac:	4642      	mov	r2, r8
 80054ae:	4631      	mov	r1, r6
 80054b0:	4628      	mov	r0, r5
 80054b2:	47b8      	blx	r7
 80054b4:	3001      	adds	r0, #1
 80054b6:	d1c2      	bne.n	800543e <_printf_float+0x2f6>
 80054b8:	e6a1      	b.n	80051fe <_printf_float+0xb6>
 80054ba:	2301      	movs	r3, #1
 80054bc:	4631      	mov	r1, r6
 80054be:	4628      	mov	r0, r5
 80054c0:	920a      	str	r2, [sp, #40]	@ 0x28
 80054c2:	47b8      	blx	r7
 80054c4:	3001      	adds	r0, #1
 80054c6:	f43f ae9a 	beq.w	80051fe <_printf_float+0xb6>
 80054ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80054cc:	f10b 0b01 	add.w	fp, fp, #1
 80054d0:	e7bb      	b.n	800544a <_printf_float+0x302>
 80054d2:	4631      	mov	r1, r6
 80054d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80054d8:	4628      	mov	r0, r5
 80054da:	47b8      	blx	r7
 80054dc:	3001      	adds	r0, #1
 80054de:	d1c0      	bne.n	8005462 <_printf_float+0x31a>
 80054e0:	e68d      	b.n	80051fe <_printf_float+0xb6>
 80054e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80054e4:	464b      	mov	r3, r9
 80054e6:	4631      	mov	r1, r6
 80054e8:	4628      	mov	r0, r5
 80054ea:	4442      	add	r2, r8
 80054ec:	47b8      	blx	r7
 80054ee:	3001      	adds	r0, #1
 80054f0:	d1c3      	bne.n	800547a <_printf_float+0x332>
 80054f2:	e684      	b.n	80051fe <_printf_float+0xb6>
 80054f4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80054f8:	f1ba 0f01 	cmp.w	sl, #1
 80054fc:	dc01      	bgt.n	8005502 <_printf_float+0x3ba>
 80054fe:	07db      	lsls	r3, r3, #31
 8005500:	d536      	bpl.n	8005570 <_printf_float+0x428>
 8005502:	2301      	movs	r3, #1
 8005504:	4642      	mov	r2, r8
 8005506:	4631      	mov	r1, r6
 8005508:	4628      	mov	r0, r5
 800550a:	47b8      	blx	r7
 800550c:	3001      	adds	r0, #1
 800550e:	f43f ae76 	beq.w	80051fe <_printf_float+0xb6>
 8005512:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005516:	4631      	mov	r1, r6
 8005518:	4628      	mov	r0, r5
 800551a:	47b8      	blx	r7
 800551c:	3001      	adds	r0, #1
 800551e:	f43f ae6e 	beq.w	80051fe <_printf_float+0xb6>
 8005522:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005526:	2200      	movs	r2, #0
 8005528:	2300      	movs	r3, #0
 800552a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800552e:	f7fb faef 	bl	8000b10 <__aeabi_dcmpeq>
 8005532:	b9c0      	cbnz	r0, 8005566 <_printf_float+0x41e>
 8005534:	4653      	mov	r3, sl
 8005536:	f108 0201 	add.w	r2, r8, #1
 800553a:	4631      	mov	r1, r6
 800553c:	4628      	mov	r0, r5
 800553e:	47b8      	blx	r7
 8005540:	3001      	adds	r0, #1
 8005542:	d10c      	bne.n	800555e <_printf_float+0x416>
 8005544:	e65b      	b.n	80051fe <_printf_float+0xb6>
 8005546:	2301      	movs	r3, #1
 8005548:	465a      	mov	r2, fp
 800554a:	4631      	mov	r1, r6
 800554c:	4628      	mov	r0, r5
 800554e:	47b8      	blx	r7
 8005550:	3001      	adds	r0, #1
 8005552:	f43f ae54 	beq.w	80051fe <_printf_float+0xb6>
 8005556:	f108 0801 	add.w	r8, r8, #1
 800555a:	45d0      	cmp	r8, sl
 800555c:	dbf3      	blt.n	8005546 <_printf_float+0x3fe>
 800555e:	464b      	mov	r3, r9
 8005560:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005564:	e6e0      	b.n	8005328 <_printf_float+0x1e0>
 8005566:	f04f 0800 	mov.w	r8, #0
 800556a:	f104 0b1a 	add.w	fp, r4, #26
 800556e:	e7f4      	b.n	800555a <_printf_float+0x412>
 8005570:	2301      	movs	r3, #1
 8005572:	4642      	mov	r2, r8
 8005574:	e7e1      	b.n	800553a <_printf_float+0x3f2>
 8005576:	2301      	movs	r3, #1
 8005578:	464a      	mov	r2, r9
 800557a:	4631      	mov	r1, r6
 800557c:	4628      	mov	r0, r5
 800557e:	47b8      	blx	r7
 8005580:	3001      	adds	r0, #1
 8005582:	f43f ae3c 	beq.w	80051fe <_printf_float+0xb6>
 8005586:	f108 0801 	add.w	r8, r8, #1
 800558a:	68e3      	ldr	r3, [r4, #12]
 800558c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800558e:	1a5b      	subs	r3, r3, r1
 8005590:	4543      	cmp	r3, r8
 8005592:	dcf0      	bgt.n	8005576 <_printf_float+0x42e>
 8005594:	e6fd      	b.n	8005392 <_printf_float+0x24a>
 8005596:	f04f 0800 	mov.w	r8, #0
 800559a:	f104 0919 	add.w	r9, r4, #25
 800559e:	e7f4      	b.n	800558a <_printf_float+0x442>

080055a0 <_printf_common>:
 80055a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055a4:	4616      	mov	r6, r2
 80055a6:	4698      	mov	r8, r3
 80055a8:	688a      	ldr	r2, [r1, #8]
 80055aa:	690b      	ldr	r3, [r1, #16]
 80055ac:	4607      	mov	r7, r0
 80055ae:	4293      	cmp	r3, r2
 80055b0:	bfb8      	it	lt
 80055b2:	4613      	movlt	r3, r2
 80055b4:	6033      	str	r3, [r6, #0]
 80055b6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80055ba:	460c      	mov	r4, r1
 80055bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055c0:	b10a      	cbz	r2, 80055c6 <_printf_common+0x26>
 80055c2:	3301      	adds	r3, #1
 80055c4:	6033      	str	r3, [r6, #0]
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	0699      	lsls	r1, r3, #26
 80055ca:	bf42      	ittt	mi
 80055cc:	6833      	ldrmi	r3, [r6, #0]
 80055ce:	3302      	addmi	r3, #2
 80055d0:	6033      	strmi	r3, [r6, #0]
 80055d2:	6825      	ldr	r5, [r4, #0]
 80055d4:	f015 0506 	ands.w	r5, r5, #6
 80055d8:	d106      	bne.n	80055e8 <_printf_common+0x48>
 80055da:	f104 0a19 	add.w	sl, r4, #25
 80055de:	68e3      	ldr	r3, [r4, #12]
 80055e0:	6832      	ldr	r2, [r6, #0]
 80055e2:	1a9b      	subs	r3, r3, r2
 80055e4:	42ab      	cmp	r3, r5
 80055e6:	dc2b      	bgt.n	8005640 <_printf_common+0xa0>
 80055e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80055ec:	6822      	ldr	r2, [r4, #0]
 80055ee:	3b00      	subs	r3, #0
 80055f0:	bf18      	it	ne
 80055f2:	2301      	movne	r3, #1
 80055f4:	0692      	lsls	r2, r2, #26
 80055f6:	d430      	bmi.n	800565a <_printf_common+0xba>
 80055f8:	4641      	mov	r1, r8
 80055fa:	4638      	mov	r0, r7
 80055fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005600:	47c8      	blx	r9
 8005602:	3001      	adds	r0, #1
 8005604:	d023      	beq.n	800564e <_printf_common+0xae>
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	6922      	ldr	r2, [r4, #16]
 800560a:	f003 0306 	and.w	r3, r3, #6
 800560e:	2b04      	cmp	r3, #4
 8005610:	bf14      	ite	ne
 8005612:	2500      	movne	r5, #0
 8005614:	6833      	ldreq	r3, [r6, #0]
 8005616:	f04f 0600 	mov.w	r6, #0
 800561a:	bf08      	it	eq
 800561c:	68e5      	ldreq	r5, [r4, #12]
 800561e:	f104 041a 	add.w	r4, r4, #26
 8005622:	bf08      	it	eq
 8005624:	1aed      	subeq	r5, r5, r3
 8005626:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800562a:	bf08      	it	eq
 800562c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005630:	4293      	cmp	r3, r2
 8005632:	bfc4      	itt	gt
 8005634:	1a9b      	subgt	r3, r3, r2
 8005636:	18ed      	addgt	r5, r5, r3
 8005638:	42b5      	cmp	r5, r6
 800563a:	d11a      	bne.n	8005672 <_printf_common+0xd2>
 800563c:	2000      	movs	r0, #0
 800563e:	e008      	b.n	8005652 <_printf_common+0xb2>
 8005640:	2301      	movs	r3, #1
 8005642:	4652      	mov	r2, sl
 8005644:	4641      	mov	r1, r8
 8005646:	4638      	mov	r0, r7
 8005648:	47c8      	blx	r9
 800564a:	3001      	adds	r0, #1
 800564c:	d103      	bne.n	8005656 <_printf_common+0xb6>
 800564e:	f04f 30ff 	mov.w	r0, #4294967295
 8005652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005656:	3501      	adds	r5, #1
 8005658:	e7c1      	b.n	80055de <_printf_common+0x3e>
 800565a:	2030      	movs	r0, #48	@ 0x30
 800565c:	18e1      	adds	r1, r4, r3
 800565e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005662:	1c5a      	adds	r2, r3, #1
 8005664:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005668:	4422      	add	r2, r4
 800566a:	3302      	adds	r3, #2
 800566c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005670:	e7c2      	b.n	80055f8 <_printf_common+0x58>
 8005672:	2301      	movs	r3, #1
 8005674:	4622      	mov	r2, r4
 8005676:	4641      	mov	r1, r8
 8005678:	4638      	mov	r0, r7
 800567a:	47c8      	blx	r9
 800567c:	3001      	adds	r0, #1
 800567e:	d0e6      	beq.n	800564e <_printf_common+0xae>
 8005680:	3601      	adds	r6, #1
 8005682:	e7d9      	b.n	8005638 <_printf_common+0x98>

08005684 <_printf_i>:
 8005684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005688:	7e0f      	ldrb	r7, [r1, #24]
 800568a:	4691      	mov	r9, r2
 800568c:	2f78      	cmp	r7, #120	@ 0x78
 800568e:	4680      	mov	r8, r0
 8005690:	460c      	mov	r4, r1
 8005692:	469a      	mov	sl, r3
 8005694:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005696:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800569a:	d807      	bhi.n	80056ac <_printf_i+0x28>
 800569c:	2f62      	cmp	r7, #98	@ 0x62
 800569e:	d80a      	bhi.n	80056b6 <_printf_i+0x32>
 80056a0:	2f00      	cmp	r7, #0
 80056a2:	f000 80d3 	beq.w	800584c <_printf_i+0x1c8>
 80056a6:	2f58      	cmp	r7, #88	@ 0x58
 80056a8:	f000 80ba 	beq.w	8005820 <_printf_i+0x19c>
 80056ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80056b4:	e03a      	b.n	800572c <_printf_i+0xa8>
 80056b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80056ba:	2b15      	cmp	r3, #21
 80056bc:	d8f6      	bhi.n	80056ac <_printf_i+0x28>
 80056be:	a101      	add	r1, pc, #4	@ (adr r1, 80056c4 <_printf_i+0x40>)
 80056c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056c4:	0800571d 	.word	0x0800571d
 80056c8:	08005731 	.word	0x08005731
 80056cc:	080056ad 	.word	0x080056ad
 80056d0:	080056ad 	.word	0x080056ad
 80056d4:	080056ad 	.word	0x080056ad
 80056d8:	080056ad 	.word	0x080056ad
 80056dc:	08005731 	.word	0x08005731
 80056e0:	080056ad 	.word	0x080056ad
 80056e4:	080056ad 	.word	0x080056ad
 80056e8:	080056ad 	.word	0x080056ad
 80056ec:	080056ad 	.word	0x080056ad
 80056f0:	08005833 	.word	0x08005833
 80056f4:	0800575b 	.word	0x0800575b
 80056f8:	080057ed 	.word	0x080057ed
 80056fc:	080056ad 	.word	0x080056ad
 8005700:	080056ad 	.word	0x080056ad
 8005704:	08005855 	.word	0x08005855
 8005708:	080056ad 	.word	0x080056ad
 800570c:	0800575b 	.word	0x0800575b
 8005710:	080056ad 	.word	0x080056ad
 8005714:	080056ad 	.word	0x080056ad
 8005718:	080057f5 	.word	0x080057f5
 800571c:	6833      	ldr	r3, [r6, #0]
 800571e:	1d1a      	adds	r2, r3, #4
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	6032      	str	r2, [r6, #0]
 8005724:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005728:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800572c:	2301      	movs	r3, #1
 800572e:	e09e      	b.n	800586e <_printf_i+0x1ea>
 8005730:	6833      	ldr	r3, [r6, #0]
 8005732:	6820      	ldr	r0, [r4, #0]
 8005734:	1d19      	adds	r1, r3, #4
 8005736:	6031      	str	r1, [r6, #0]
 8005738:	0606      	lsls	r6, r0, #24
 800573a:	d501      	bpl.n	8005740 <_printf_i+0xbc>
 800573c:	681d      	ldr	r5, [r3, #0]
 800573e:	e003      	b.n	8005748 <_printf_i+0xc4>
 8005740:	0645      	lsls	r5, r0, #25
 8005742:	d5fb      	bpl.n	800573c <_printf_i+0xb8>
 8005744:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005748:	2d00      	cmp	r5, #0
 800574a:	da03      	bge.n	8005754 <_printf_i+0xd0>
 800574c:	232d      	movs	r3, #45	@ 0x2d
 800574e:	426d      	negs	r5, r5
 8005750:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005754:	230a      	movs	r3, #10
 8005756:	4859      	ldr	r0, [pc, #356]	@ (80058bc <_printf_i+0x238>)
 8005758:	e011      	b.n	800577e <_printf_i+0xfa>
 800575a:	6821      	ldr	r1, [r4, #0]
 800575c:	6833      	ldr	r3, [r6, #0]
 800575e:	0608      	lsls	r0, r1, #24
 8005760:	f853 5b04 	ldr.w	r5, [r3], #4
 8005764:	d402      	bmi.n	800576c <_printf_i+0xe8>
 8005766:	0649      	lsls	r1, r1, #25
 8005768:	bf48      	it	mi
 800576a:	b2ad      	uxthmi	r5, r5
 800576c:	2f6f      	cmp	r7, #111	@ 0x6f
 800576e:	6033      	str	r3, [r6, #0]
 8005770:	bf14      	ite	ne
 8005772:	230a      	movne	r3, #10
 8005774:	2308      	moveq	r3, #8
 8005776:	4851      	ldr	r0, [pc, #324]	@ (80058bc <_printf_i+0x238>)
 8005778:	2100      	movs	r1, #0
 800577a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800577e:	6866      	ldr	r6, [r4, #4]
 8005780:	2e00      	cmp	r6, #0
 8005782:	bfa8      	it	ge
 8005784:	6821      	ldrge	r1, [r4, #0]
 8005786:	60a6      	str	r6, [r4, #8]
 8005788:	bfa4      	itt	ge
 800578a:	f021 0104 	bicge.w	r1, r1, #4
 800578e:	6021      	strge	r1, [r4, #0]
 8005790:	b90d      	cbnz	r5, 8005796 <_printf_i+0x112>
 8005792:	2e00      	cmp	r6, #0
 8005794:	d04b      	beq.n	800582e <_printf_i+0x1aa>
 8005796:	4616      	mov	r6, r2
 8005798:	fbb5 f1f3 	udiv	r1, r5, r3
 800579c:	fb03 5711 	mls	r7, r3, r1, r5
 80057a0:	5dc7      	ldrb	r7, [r0, r7]
 80057a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057a6:	462f      	mov	r7, r5
 80057a8:	42bb      	cmp	r3, r7
 80057aa:	460d      	mov	r5, r1
 80057ac:	d9f4      	bls.n	8005798 <_printf_i+0x114>
 80057ae:	2b08      	cmp	r3, #8
 80057b0:	d10b      	bne.n	80057ca <_printf_i+0x146>
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	07df      	lsls	r7, r3, #31
 80057b6:	d508      	bpl.n	80057ca <_printf_i+0x146>
 80057b8:	6923      	ldr	r3, [r4, #16]
 80057ba:	6861      	ldr	r1, [r4, #4]
 80057bc:	4299      	cmp	r1, r3
 80057be:	bfde      	ittt	le
 80057c0:	2330      	movle	r3, #48	@ 0x30
 80057c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057ca:	1b92      	subs	r2, r2, r6
 80057cc:	6122      	str	r2, [r4, #16]
 80057ce:	464b      	mov	r3, r9
 80057d0:	4621      	mov	r1, r4
 80057d2:	4640      	mov	r0, r8
 80057d4:	f8cd a000 	str.w	sl, [sp]
 80057d8:	aa03      	add	r2, sp, #12
 80057da:	f7ff fee1 	bl	80055a0 <_printf_common>
 80057de:	3001      	adds	r0, #1
 80057e0:	d14a      	bne.n	8005878 <_printf_i+0x1f4>
 80057e2:	f04f 30ff 	mov.w	r0, #4294967295
 80057e6:	b004      	add	sp, #16
 80057e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	f043 0320 	orr.w	r3, r3, #32
 80057f2:	6023      	str	r3, [r4, #0]
 80057f4:	2778      	movs	r7, #120	@ 0x78
 80057f6:	4832      	ldr	r0, [pc, #200]	@ (80058c0 <_printf_i+0x23c>)
 80057f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80057fc:	6823      	ldr	r3, [r4, #0]
 80057fe:	6831      	ldr	r1, [r6, #0]
 8005800:	061f      	lsls	r7, r3, #24
 8005802:	f851 5b04 	ldr.w	r5, [r1], #4
 8005806:	d402      	bmi.n	800580e <_printf_i+0x18a>
 8005808:	065f      	lsls	r7, r3, #25
 800580a:	bf48      	it	mi
 800580c:	b2ad      	uxthmi	r5, r5
 800580e:	6031      	str	r1, [r6, #0]
 8005810:	07d9      	lsls	r1, r3, #31
 8005812:	bf44      	itt	mi
 8005814:	f043 0320 	orrmi.w	r3, r3, #32
 8005818:	6023      	strmi	r3, [r4, #0]
 800581a:	b11d      	cbz	r5, 8005824 <_printf_i+0x1a0>
 800581c:	2310      	movs	r3, #16
 800581e:	e7ab      	b.n	8005778 <_printf_i+0xf4>
 8005820:	4826      	ldr	r0, [pc, #152]	@ (80058bc <_printf_i+0x238>)
 8005822:	e7e9      	b.n	80057f8 <_printf_i+0x174>
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	f023 0320 	bic.w	r3, r3, #32
 800582a:	6023      	str	r3, [r4, #0]
 800582c:	e7f6      	b.n	800581c <_printf_i+0x198>
 800582e:	4616      	mov	r6, r2
 8005830:	e7bd      	b.n	80057ae <_printf_i+0x12a>
 8005832:	6833      	ldr	r3, [r6, #0]
 8005834:	6825      	ldr	r5, [r4, #0]
 8005836:	1d18      	adds	r0, r3, #4
 8005838:	6961      	ldr	r1, [r4, #20]
 800583a:	6030      	str	r0, [r6, #0]
 800583c:	062e      	lsls	r6, r5, #24
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	d501      	bpl.n	8005846 <_printf_i+0x1c2>
 8005842:	6019      	str	r1, [r3, #0]
 8005844:	e002      	b.n	800584c <_printf_i+0x1c8>
 8005846:	0668      	lsls	r0, r5, #25
 8005848:	d5fb      	bpl.n	8005842 <_printf_i+0x1be>
 800584a:	8019      	strh	r1, [r3, #0]
 800584c:	2300      	movs	r3, #0
 800584e:	4616      	mov	r6, r2
 8005850:	6123      	str	r3, [r4, #16]
 8005852:	e7bc      	b.n	80057ce <_printf_i+0x14a>
 8005854:	6833      	ldr	r3, [r6, #0]
 8005856:	2100      	movs	r1, #0
 8005858:	1d1a      	adds	r2, r3, #4
 800585a:	6032      	str	r2, [r6, #0]
 800585c:	681e      	ldr	r6, [r3, #0]
 800585e:	6862      	ldr	r2, [r4, #4]
 8005860:	4630      	mov	r0, r6
 8005862:	f000 f9b4 	bl	8005bce <memchr>
 8005866:	b108      	cbz	r0, 800586c <_printf_i+0x1e8>
 8005868:	1b80      	subs	r0, r0, r6
 800586a:	6060      	str	r0, [r4, #4]
 800586c:	6863      	ldr	r3, [r4, #4]
 800586e:	6123      	str	r3, [r4, #16]
 8005870:	2300      	movs	r3, #0
 8005872:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005876:	e7aa      	b.n	80057ce <_printf_i+0x14a>
 8005878:	4632      	mov	r2, r6
 800587a:	4649      	mov	r1, r9
 800587c:	4640      	mov	r0, r8
 800587e:	6923      	ldr	r3, [r4, #16]
 8005880:	47d0      	blx	sl
 8005882:	3001      	adds	r0, #1
 8005884:	d0ad      	beq.n	80057e2 <_printf_i+0x15e>
 8005886:	6823      	ldr	r3, [r4, #0]
 8005888:	079b      	lsls	r3, r3, #30
 800588a:	d413      	bmi.n	80058b4 <_printf_i+0x230>
 800588c:	68e0      	ldr	r0, [r4, #12]
 800588e:	9b03      	ldr	r3, [sp, #12]
 8005890:	4298      	cmp	r0, r3
 8005892:	bfb8      	it	lt
 8005894:	4618      	movlt	r0, r3
 8005896:	e7a6      	b.n	80057e6 <_printf_i+0x162>
 8005898:	2301      	movs	r3, #1
 800589a:	4632      	mov	r2, r6
 800589c:	4649      	mov	r1, r9
 800589e:	4640      	mov	r0, r8
 80058a0:	47d0      	blx	sl
 80058a2:	3001      	adds	r0, #1
 80058a4:	d09d      	beq.n	80057e2 <_printf_i+0x15e>
 80058a6:	3501      	adds	r5, #1
 80058a8:	68e3      	ldr	r3, [r4, #12]
 80058aa:	9903      	ldr	r1, [sp, #12]
 80058ac:	1a5b      	subs	r3, r3, r1
 80058ae:	42ab      	cmp	r3, r5
 80058b0:	dcf2      	bgt.n	8005898 <_printf_i+0x214>
 80058b2:	e7eb      	b.n	800588c <_printf_i+0x208>
 80058b4:	2500      	movs	r5, #0
 80058b6:	f104 0619 	add.w	r6, r4, #25
 80058ba:	e7f5      	b.n	80058a8 <_printf_i+0x224>
 80058bc:	0800817c 	.word	0x0800817c
 80058c0:	0800818d 	.word	0x0800818d

080058c4 <std>:
 80058c4:	2300      	movs	r3, #0
 80058c6:	b510      	push	{r4, lr}
 80058c8:	4604      	mov	r4, r0
 80058ca:	e9c0 3300 	strd	r3, r3, [r0]
 80058ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058d2:	6083      	str	r3, [r0, #8]
 80058d4:	8181      	strh	r1, [r0, #12]
 80058d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80058d8:	81c2      	strh	r2, [r0, #14]
 80058da:	6183      	str	r3, [r0, #24]
 80058dc:	4619      	mov	r1, r3
 80058de:	2208      	movs	r2, #8
 80058e0:	305c      	adds	r0, #92	@ 0x5c
 80058e2:	f000 f8f4 	bl	8005ace <memset>
 80058e6:	4b0d      	ldr	r3, [pc, #52]	@ (800591c <std+0x58>)
 80058e8:	6224      	str	r4, [r4, #32]
 80058ea:	6263      	str	r3, [r4, #36]	@ 0x24
 80058ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005920 <std+0x5c>)
 80058ee:	62a3      	str	r3, [r4, #40]	@ 0x28
 80058f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005924 <std+0x60>)
 80058f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80058f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005928 <std+0x64>)
 80058f6:	6323      	str	r3, [r4, #48]	@ 0x30
 80058f8:	4b0c      	ldr	r3, [pc, #48]	@ (800592c <std+0x68>)
 80058fa:	429c      	cmp	r4, r3
 80058fc:	d006      	beq.n	800590c <std+0x48>
 80058fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005902:	4294      	cmp	r4, r2
 8005904:	d002      	beq.n	800590c <std+0x48>
 8005906:	33d0      	adds	r3, #208	@ 0xd0
 8005908:	429c      	cmp	r4, r3
 800590a:	d105      	bne.n	8005918 <std+0x54>
 800590c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005914:	f000 b958 	b.w	8005bc8 <__retarget_lock_init_recursive>
 8005918:	bd10      	pop	{r4, pc}
 800591a:	bf00      	nop
 800591c:	08005a49 	.word	0x08005a49
 8005920:	08005a6b 	.word	0x08005a6b
 8005924:	08005aa3 	.word	0x08005aa3
 8005928:	08005ac7 	.word	0x08005ac7
 800592c:	20000778 	.word	0x20000778

08005930 <stdio_exit_handler>:
 8005930:	4a02      	ldr	r2, [pc, #8]	@ (800593c <stdio_exit_handler+0xc>)
 8005932:	4903      	ldr	r1, [pc, #12]	@ (8005940 <stdio_exit_handler+0x10>)
 8005934:	4803      	ldr	r0, [pc, #12]	@ (8005944 <stdio_exit_handler+0x14>)
 8005936:	f000 b869 	b.w	8005a0c <_fwalk_sglue>
 800593a:	bf00      	nop
 800593c:	2000000c 	.word	0x2000000c
 8005940:	0800728d 	.word	0x0800728d
 8005944:	2000001c 	.word	0x2000001c

08005948 <cleanup_stdio>:
 8005948:	6841      	ldr	r1, [r0, #4]
 800594a:	4b0c      	ldr	r3, [pc, #48]	@ (800597c <cleanup_stdio+0x34>)
 800594c:	b510      	push	{r4, lr}
 800594e:	4299      	cmp	r1, r3
 8005950:	4604      	mov	r4, r0
 8005952:	d001      	beq.n	8005958 <cleanup_stdio+0x10>
 8005954:	f001 fc9a 	bl	800728c <_fflush_r>
 8005958:	68a1      	ldr	r1, [r4, #8]
 800595a:	4b09      	ldr	r3, [pc, #36]	@ (8005980 <cleanup_stdio+0x38>)
 800595c:	4299      	cmp	r1, r3
 800595e:	d002      	beq.n	8005966 <cleanup_stdio+0x1e>
 8005960:	4620      	mov	r0, r4
 8005962:	f001 fc93 	bl	800728c <_fflush_r>
 8005966:	68e1      	ldr	r1, [r4, #12]
 8005968:	4b06      	ldr	r3, [pc, #24]	@ (8005984 <cleanup_stdio+0x3c>)
 800596a:	4299      	cmp	r1, r3
 800596c:	d004      	beq.n	8005978 <cleanup_stdio+0x30>
 800596e:	4620      	mov	r0, r4
 8005970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005974:	f001 bc8a 	b.w	800728c <_fflush_r>
 8005978:	bd10      	pop	{r4, pc}
 800597a:	bf00      	nop
 800597c:	20000778 	.word	0x20000778
 8005980:	200007e0 	.word	0x200007e0
 8005984:	20000848 	.word	0x20000848

08005988 <global_stdio_init.part.0>:
 8005988:	b510      	push	{r4, lr}
 800598a:	4b0b      	ldr	r3, [pc, #44]	@ (80059b8 <global_stdio_init.part.0+0x30>)
 800598c:	4c0b      	ldr	r4, [pc, #44]	@ (80059bc <global_stdio_init.part.0+0x34>)
 800598e:	4a0c      	ldr	r2, [pc, #48]	@ (80059c0 <global_stdio_init.part.0+0x38>)
 8005990:	4620      	mov	r0, r4
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	2104      	movs	r1, #4
 8005996:	2200      	movs	r2, #0
 8005998:	f7ff ff94 	bl	80058c4 <std>
 800599c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80059a0:	2201      	movs	r2, #1
 80059a2:	2109      	movs	r1, #9
 80059a4:	f7ff ff8e 	bl	80058c4 <std>
 80059a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80059ac:	2202      	movs	r2, #2
 80059ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059b2:	2112      	movs	r1, #18
 80059b4:	f7ff bf86 	b.w	80058c4 <std>
 80059b8:	200008b0 	.word	0x200008b0
 80059bc:	20000778 	.word	0x20000778
 80059c0:	08005931 	.word	0x08005931

080059c4 <__sfp_lock_acquire>:
 80059c4:	4801      	ldr	r0, [pc, #4]	@ (80059cc <__sfp_lock_acquire+0x8>)
 80059c6:	f000 b900 	b.w	8005bca <__retarget_lock_acquire_recursive>
 80059ca:	bf00      	nop
 80059cc:	200008b9 	.word	0x200008b9

080059d0 <__sfp_lock_release>:
 80059d0:	4801      	ldr	r0, [pc, #4]	@ (80059d8 <__sfp_lock_release+0x8>)
 80059d2:	f000 b8fb 	b.w	8005bcc <__retarget_lock_release_recursive>
 80059d6:	bf00      	nop
 80059d8:	200008b9 	.word	0x200008b9

080059dc <__sinit>:
 80059dc:	b510      	push	{r4, lr}
 80059de:	4604      	mov	r4, r0
 80059e0:	f7ff fff0 	bl	80059c4 <__sfp_lock_acquire>
 80059e4:	6a23      	ldr	r3, [r4, #32]
 80059e6:	b11b      	cbz	r3, 80059f0 <__sinit+0x14>
 80059e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059ec:	f7ff bff0 	b.w	80059d0 <__sfp_lock_release>
 80059f0:	4b04      	ldr	r3, [pc, #16]	@ (8005a04 <__sinit+0x28>)
 80059f2:	6223      	str	r3, [r4, #32]
 80059f4:	4b04      	ldr	r3, [pc, #16]	@ (8005a08 <__sinit+0x2c>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1f5      	bne.n	80059e8 <__sinit+0xc>
 80059fc:	f7ff ffc4 	bl	8005988 <global_stdio_init.part.0>
 8005a00:	e7f2      	b.n	80059e8 <__sinit+0xc>
 8005a02:	bf00      	nop
 8005a04:	08005949 	.word	0x08005949
 8005a08:	200008b0 	.word	0x200008b0

08005a0c <_fwalk_sglue>:
 8005a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a10:	4607      	mov	r7, r0
 8005a12:	4688      	mov	r8, r1
 8005a14:	4614      	mov	r4, r2
 8005a16:	2600      	movs	r6, #0
 8005a18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a1c:	f1b9 0901 	subs.w	r9, r9, #1
 8005a20:	d505      	bpl.n	8005a2e <_fwalk_sglue+0x22>
 8005a22:	6824      	ldr	r4, [r4, #0]
 8005a24:	2c00      	cmp	r4, #0
 8005a26:	d1f7      	bne.n	8005a18 <_fwalk_sglue+0xc>
 8005a28:	4630      	mov	r0, r6
 8005a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a2e:	89ab      	ldrh	r3, [r5, #12]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d907      	bls.n	8005a44 <_fwalk_sglue+0x38>
 8005a34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	d003      	beq.n	8005a44 <_fwalk_sglue+0x38>
 8005a3c:	4629      	mov	r1, r5
 8005a3e:	4638      	mov	r0, r7
 8005a40:	47c0      	blx	r8
 8005a42:	4306      	orrs	r6, r0
 8005a44:	3568      	adds	r5, #104	@ 0x68
 8005a46:	e7e9      	b.n	8005a1c <_fwalk_sglue+0x10>

08005a48 <__sread>:
 8005a48:	b510      	push	{r4, lr}
 8005a4a:	460c      	mov	r4, r1
 8005a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a50:	f000 f86c 	bl	8005b2c <_read_r>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	bfab      	itete	ge
 8005a58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a5a:	89a3      	ldrhlt	r3, [r4, #12]
 8005a5c:	181b      	addge	r3, r3, r0
 8005a5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a62:	bfac      	ite	ge
 8005a64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a66:	81a3      	strhlt	r3, [r4, #12]
 8005a68:	bd10      	pop	{r4, pc}

08005a6a <__swrite>:
 8005a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a6e:	461f      	mov	r7, r3
 8005a70:	898b      	ldrh	r3, [r1, #12]
 8005a72:	4605      	mov	r5, r0
 8005a74:	05db      	lsls	r3, r3, #23
 8005a76:	460c      	mov	r4, r1
 8005a78:	4616      	mov	r6, r2
 8005a7a:	d505      	bpl.n	8005a88 <__swrite+0x1e>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a84:	f000 f840 	bl	8005b08 <_lseek_r>
 8005a88:	89a3      	ldrh	r3, [r4, #12]
 8005a8a:	4632      	mov	r2, r6
 8005a8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a90:	81a3      	strh	r3, [r4, #12]
 8005a92:	4628      	mov	r0, r5
 8005a94:	463b      	mov	r3, r7
 8005a96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a9e:	f000 b857 	b.w	8005b50 <_write_r>

08005aa2 <__sseek>:
 8005aa2:	b510      	push	{r4, lr}
 8005aa4:	460c      	mov	r4, r1
 8005aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aaa:	f000 f82d 	bl	8005b08 <_lseek_r>
 8005aae:	1c43      	adds	r3, r0, #1
 8005ab0:	89a3      	ldrh	r3, [r4, #12]
 8005ab2:	bf15      	itete	ne
 8005ab4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005ab6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005aba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005abe:	81a3      	strheq	r3, [r4, #12]
 8005ac0:	bf18      	it	ne
 8005ac2:	81a3      	strhne	r3, [r4, #12]
 8005ac4:	bd10      	pop	{r4, pc}

08005ac6 <__sclose>:
 8005ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aca:	f000 b80d 	b.w	8005ae8 <_close_r>

08005ace <memset>:
 8005ace:	4603      	mov	r3, r0
 8005ad0:	4402      	add	r2, r0
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d100      	bne.n	8005ad8 <memset+0xa>
 8005ad6:	4770      	bx	lr
 8005ad8:	f803 1b01 	strb.w	r1, [r3], #1
 8005adc:	e7f9      	b.n	8005ad2 <memset+0x4>
	...

08005ae0 <_localeconv_r>:
 8005ae0:	4800      	ldr	r0, [pc, #0]	@ (8005ae4 <_localeconv_r+0x4>)
 8005ae2:	4770      	bx	lr
 8005ae4:	20000158 	.word	0x20000158

08005ae8 <_close_r>:
 8005ae8:	b538      	push	{r3, r4, r5, lr}
 8005aea:	2300      	movs	r3, #0
 8005aec:	4d05      	ldr	r5, [pc, #20]	@ (8005b04 <_close_r+0x1c>)
 8005aee:	4604      	mov	r4, r0
 8005af0:	4608      	mov	r0, r1
 8005af2:	602b      	str	r3, [r5, #0]
 8005af4:	f7fc fe6d 	bl	80027d2 <_close>
 8005af8:	1c43      	adds	r3, r0, #1
 8005afa:	d102      	bne.n	8005b02 <_close_r+0x1a>
 8005afc:	682b      	ldr	r3, [r5, #0]
 8005afe:	b103      	cbz	r3, 8005b02 <_close_r+0x1a>
 8005b00:	6023      	str	r3, [r4, #0]
 8005b02:	bd38      	pop	{r3, r4, r5, pc}
 8005b04:	200008b4 	.word	0x200008b4

08005b08 <_lseek_r>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	4608      	mov	r0, r1
 8005b0e:	4611      	mov	r1, r2
 8005b10:	2200      	movs	r2, #0
 8005b12:	4d05      	ldr	r5, [pc, #20]	@ (8005b28 <_lseek_r+0x20>)
 8005b14:	602a      	str	r2, [r5, #0]
 8005b16:	461a      	mov	r2, r3
 8005b18:	f7fc fe7f 	bl	800281a <_lseek>
 8005b1c:	1c43      	adds	r3, r0, #1
 8005b1e:	d102      	bne.n	8005b26 <_lseek_r+0x1e>
 8005b20:	682b      	ldr	r3, [r5, #0]
 8005b22:	b103      	cbz	r3, 8005b26 <_lseek_r+0x1e>
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	bd38      	pop	{r3, r4, r5, pc}
 8005b28:	200008b4 	.word	0x200008b4

08005b2c <_read_r>:
 8005b2c:	b538      	push	{r3, r4, r5, lr}
 8005b2e:	4604      	mov	r4, r0
 8005b30:	4608      	mov	r0, r1
 8005b32:	4611      	mov	r1, r2
 8005b34:	2200      	movs	r2, #0
 8005b36:	4d05      	ldr	r5, [pc, #20]	@ (8005b4c <_read_r+0x20>)
 8005b38:	602a      	str	r2, [r5, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f7fc fe2c 	bl	8002798 <_read>
 8005b40:	1c43      	adds	r3, r0, #1
 8005b42:	d102      	bne.n	8005b4a <_read_r+0x1e>
 8005b44:	682b      	ldr	r3, [r5, #0]
 8005b46:	b103      	cbz	r3, 8005b4a <_read_r+0x1e>
 8005b48:	6023      	str	r3, [r4, #0]
 8005b4a:	bd38      	pop	{r3, r4, r5, pc}
 8005b4c:	200008b4 	.word	0x200008b4

08005b50 <_write_r>:
 8005b50:	b538      	push	{r3, r4, r5, lr}
 8005b52:	4604      	mov	r4, r0
 8005b54:	4608      	mov	r0, r1
 8005b56:	4611      	mov	r1, r2
 8005b58:	2200      	movs	r2, #0
 8005b5a:	4d05      	ldr	r5, [pc, #20]	@ (8005b70 <_write_r+0x20>)
 8005b5c:	602a      	str	r2, [r5, #0]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	f7fc fa32 	bl	8001fc8 <_write>
 8005b64:	1c43      	adds	r3, r0, #1
 8005b66:	d102      	bne.n	8005b6e <_write_r+0x1e>
 8005b68:	682b      	ldr	r3, [r5, #0]
 8005b6a:	b103      	cbz	r3, 8005b6e <_write_r+0x1e>
 8005b6c:	6023      	str	r3, [r4, #0]
 8005b6e:	bd38      	pop	{r3, r4, r5, pc}
 8005b70:	200008b4 	.word	0x200008b4

08005b74 <__errno>:
 8005b74:	4b01      	ldr	r3, [pc, #4]	@ (8005b7c <__errno+0x8>)
 8005b76:	6818      	ldr	r0, [r3, #0]
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	20000018 	.word	0x20000018

08005b80 <__libc_init_array>:
 8005b80:	b570      	push	{r4, r5, r6, lr}
 8005b82:	2600      	movs	r6, #0
 8005b84:	4d0c      	ldr	r5, [pc, #48]	@ (8005bb8 <__libc_init_array+0x38>)
 8005b86:	4c0d      	ldr	r4, [pc, #52]	@ (8005bbc <__libc_init_array+0x3c>)
 8005b88:	1b64      	subs	r4, r4, r5
 8005b8a:	10a4      	asrs	r4, r4, #2
 8005b8c:	42a6      	cmp	r6, r4
 8005b8e:	d109      	bne.n	8005ba4 <__libc_init_array+0x24>
 8005b90:	f001 fec8 	bl	8007924 <_init>
 8005b94:	2600      	movs	r6, #0
 8005b96:	4d0a      	ldr	r5, [pc, #40]	@ (8005bc0 <__libc_init_array+0x40>)
 8005b98:	4c0a      	ldr	r4, [pc, #40]	@ (8005bc4 <__libc_init_array+0x44>)
 8005b9a:	1b64      	subs	r4, r4, r5
 8005b9c:	10a4      	asrs	r4, r4, #2
 8005b9e:	42a6      	cmp	r6, r4
 8005ba0:	d105      	bne.n	8005bae <__libc_init_array+0x2e>
 8005ba2:	bd70      	pop	{r4, r5, r6, pc}
 8005ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ba8:	4798      	blx	r3
 8005baa:	3601      	adds	r6, #1
 8005bac:	e7ee      	b.n	8005b8c <__libc_init_array+0xc>
 8005bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bb2:	4798      	blx	r3
 8005bb4:	3601      	adds	r6, #1
 8005bb6:	e7f2      	b.n	8005b9e <__libc_init_array+0x1e>
 8005bb8:	080084e0 	.word	0x080084e0
 8005bbc:	080084e0 	.word	0x080084e0
 8005bc0:	080084e0 	.word	0x080084e0
 8005bc4:	080084e4 	.word	0x080084e4

08005bc8 <__retarget_lock_init_recursive>:
 8005bc8:	4770      	bx	lr

08005bca <__retarget_lock_acquire_recursive>:
 8005bca:	4770      	bx	lr

08005bcc <__retarget_lock_release_recursive>:
 8005bcc:	4770      	bx	lr

08005bce <memchr>:
 8005bce:	4603      	mov	r3, r0
 8005bd0:	b510      	push	{r4, lr}
 8005bd2:	b2c9      	uxtb	r1, r1
 8005bd4:	4402      	add	r2, r0
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	4618      	mov	r0, r3
 8005bda:	d101      	bne.n	8005be0 <memchr+0x12>
 8005bdc:	2000      	movs	r0, #0
 8005bde:	e003      	b.n	8005be8 <memchr+0x1a>
 8005be0:	7804      	ldrb	r4, [r0, #0]
 8005be2:	3301      	adds	r3, #1
 8005be4:	428c      	cmp	r4, r1
 8005be6:	d1f6      	bne.n	8005bd6 <memchr+0x8>
 8005be8:	bd10      	pop	{r4, pc}

08005bea <quorem>:
 8005bea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bee:	6903      	ldr	r3, [r0, #16]
 8005bf0:	690c      	ldr	r4, [r1, #16]
 8005bf2:	4607      	mov	r7, r0
 8005bf4:	42a3      	cmp	r3, r4
 8005bf6:	db7e      	blt.n	8005cf6 <quorem+0x10c>
 8005bf8:	3c01      	subs	r4, #1
 8005bfa:	00a3      	lsls	r3, r4, #2
 8005bfc:	f100 0514 	add.w	r5, r0, #20
 8005c00:	f101 0814 	add.w	r8, r1, #20
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c0a:	9301      	str	r3, [sp, #4]
 8005c0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c14:	3301      	adds	r3, #1
 8005c16:	429a      	cmp	r2, r3
 8005c18:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c20:	d32e      	bcc.n	8005c80 <quorem+0x96>
 8005c22:	f04f 0a00 	mov.w	sl, #0
 8005c26:	46c4      	mov	ip, r8
 8005c28:	46ae      	mov	lr, r5
 8005c2a:	46d3      	mov	fp, sl
 8005c2c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005c30:	b298      	uxth	r0, r3
 8005c32:	fb06 a000 	mla	r0, r6, r0, sl
 8005c36:	0c1b      	lsrs	r3, r3, #16
 8005c38:	0c02      	lsrs	r2, r0, #16
 8005c3a:	fb06 2303 	mla	r3, r6, r3, r2
 8005c3e:	f8de 2000 	ldr.w	r2, [lr]
 8005c42:	b280      	uxth	r0, r0
 8005c44:	b292      	uxth	r2, r2
 8005c46:	1a12      	subs	r2, r2, r0
 8005c48:	445a      	add	r2, fp
 8005c4a:	f8de 0000 	ldr.w	r0, [lr]
 8005c4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005c58:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005c5c:	b292      	uxth	r2, r2
 8005c5e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005c62:	45e1      	cmp	r9, ip
 8005c64:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005c68:	f84e 2b04 	str.w	r2, [lr], #4
 8005c6c:	d2de      	bcs.n	8005c2c <quorem+0x42>
 8005c6e:	9b00      	ldr	r3, [sp, #0]
 8005c70:	58eb      	ldr	r3, [r5, r3]
 8005c72:	b92b      	cbnz	r3, 8005c80 <quorem+0x96>
 8005c74:	9b01      	ldr	r3, [sp, #4]
 8005c76:	3b04      	subs	r3, #4
 8005c78:	429d      	cmp	r5, r3
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	d32f      	bcc.n	8005cde <quorem+0xf4>
 8005c7e:	613c      	str	r4, [r7, #16]
 8005c80:	4638      	mov	r0, r7
 8005c82:	f001 f97b 	bl	8006f7c <__mcmp>
 8005c86:	2800      	cmp	r0, #0
 8005c88:	db25      	blt.n	8005cd6 <quorem+0xec>
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c92:	f8d1 c000 	ldr.w	ip, [r1]
 8005c96:	fa1f fe82 	uxth.w	lr, r2
 8005c9a:	fa1f f38c 	uxth.w	r3, ip
 8005c9e:	eba3 030e 	sub.w	r3, r3, lr
 8005ca2:	4403      	add	r3, r0
 8005ca4:	0c12      	lsrs	r2, r2, #16
 8005ca6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005caa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cb4:	45c1      	cmp	r9, r8
 8005cb6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005cba:	f841 3b04 	str.w	r3, [r1], #4
 8005cbe:	d2e6      	bcs.n	8005c8e <quorem+0xa4>
 8005cc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cc8:	b922      	cbnz	r2, 8005cd4 <quorem+0xea>
 8005cca:	3b04      	subs	r3, #4
 8005ccc:	429d      	cmp	r5, r3
 8005cce:	461a      	mov	r2, r3
 8005cd0:	d30b      	bcc.n	8005cea <quorem+0x100>
 8005cd2:	613c      	str	r4, [r7, #16]
 8005cd4:	3601      	adds	r6, #1
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	b003      	add	sp, #12
 8005cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cde:	6812      	ldr	r2, [r2, #0]
 8005ce0:	3b04      	subs	r3, #4
 8005ce2:	2a00      	cmp	r2, #0
 8005ce4:	d1cb      	bne.n	8005c7e <quorem+0x94>
 8005ce6:	3c01      	subs	r4, #1
 8005ce8:	e7c6      	b.n	8005c78 <quorem+0x8e>
 8005cea:	6812      	ldr	r2, [r2, #0]
 8005cec:	3b04      	subs	r3, #4
 8005cee:	2a00      	cmp	r2, #0
 8005cf0:	d1ef      	bne.n	8005cd2 <quorem+0xe8>
 8005cf2:	3c01      	subs	r4, #1
 8005cf4:	e7ea      	b.n	8005ccc <quorem+0xe2>
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	e7ee      	b.n	8005cd8 <quorem+0xee>
 8005cfa:	0000      	movs	r0, r0
 8005cfc:	0000      	movs	r0, r0
	...

08005d00 <_dtoa_r>:
 8005d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d04:	4614      	mov	r4, r2
 8005d06:	461d      	mov	r5, r3
 8005d08:	69c7      	ldr	r7, [r0, #28]
 8005d0a:	b097      	sub	sp, #92	@ 0x5c
 8005d0c:	4683      	mov	fp, r0
 8005d0e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005d12:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005d14:	b97f      	cbnz	r7, 8005d36 <_dtoa_r+0x36>
 8005d16:	2010      	movs	r0, #16
 8005d18:	f000 fe02 	bl	8006920 <malloc>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	f8cb 001c 	str.w	r0, [fp, #28]
 8005d22:	b920      	cbnz	r0, 8005d2e <_dtoa_r+0x2e>
 8005d24:	21ef      	movs	r1, #239	@ 0xef
 8005d26:	4ba8      	ldr	r3, [pc, #672]	@ (8005fc8 <_dtoa_r+0x2c8>)
 8005d28:	48a8      	ldr	r0, [pc, #672]	@ (8005fcc <_dtoa_r+0x2cc>)
 8005d2a:	f001 faf5 	bl	8007318 <__assert_func>
 8005d2e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005d32:	6007      	str	r7, [r0, #0]
 8005d34:	60c7      	str	r7, [r0, #12]
 8005d36:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005d3a:	6819      	ldr	r1, [r3, #0]
 8005d3c:	b159      	cbz	r1, 8005d56 <_dtoa_r+0x56>
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	2301      	movs	r3, #1
 8005d42:	4093      	lsls	r3, r2
 8005d44:	604a      	str	r2, [r1, #4]
 8005d46:	608b      	str	r3, [r1, #8]
 8005d48:	4658      	mov	r0, fp
 8005d4a:	f000 fedf 	bl	8006b0c <_Bfree>
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	1e2b      	subs	r3, r5, #0
 8005d58:	bfaf      	iteee	ge
 8005d5a:	2300      	movge	r3, #0
 8005d5c:	2201      	movlt	r2, #1
 8005d5e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005d62:	9303      	strlt	r3, [sp, #12]
 8005d64:	bfa8      	it	ge
 8005d66:	6033      	strge	r3, [r6, #0]
 8005d68:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005d6c:	4b98      	ldr	r3, [pc, #608]	@ (8005fd0 <_dtoa_r+0x2d0>)
 8005d6e:	bfb8      	it	lt
 8005d70:	6032      	strlt	r2, [r6, #0]
 8005d72:	ea33 0308 	bics.w	r3, r3, r8
 8005d76:	d112      	bne.n	8005d9e <_dtoa_r+0x9e>
 8005d78:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005d7c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005d84:	4323      	orrs	r3, r4
 8005d86:	f000 8550 	beq.w	800682a <_dtoa_r+0xb2a>
 8005d8a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005d8c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005fd4 <_dtoa_r+0x2d4>
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 8552 	beq.w	800683a <_dtoa_r+0xb3a>
 8005d96:	f10a 0303 	add.w	r3, sl, #3
 8005d9a:	f000 bd4c 	b.w	8006836 <_dtoa_r+0xb36>
 8005d9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005da2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005da6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005daa:	2200      	movs	r2, #0
 8005dac:	2300      	movs	r3, #0
 8005dae:	f7fa feaf 	bl	8000b10 <__aeabi_dcmpeq>
 8005db2:	4607      	mov	r7, r0
 8005db4:	b158      	cbz	r0, 8005dce <_dtoa_r+0xce>
 8005db6:	2301      	movs	r3, #1
 8005db8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005dba:	6013      	str	r3, [r2, #0]
 8005dbc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005dbe:	b113      	cbz	r3, 8005dc6 <_dtoa_r+0xc6>
 8005dc0:	4b85      	ldr	r3, [pc, #532]	@ (8005fd8 <_dtoa_r+0x2d8>)
 8005dc2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005fdc <_dtoa_r+0x2dc>
 8005dca:	f000 bd36 	b.w	800683a <_dtoa_r+0xb3a>
 8005dce:	ab14      	add	r3, sp, #80	@ 0x50
 8005dd0:	9301      	str	r3, [sp, #4]
 8005dd2:	ab15      	add	r3, sp, #84	@ 0x54
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	4658      	mov	r0, fp
 8005dd8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005ddc:	f001 f97e 	bl	80070dc <__d2b>
 8005de0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005de4:	4681      	mov	r9, r0
 8005de6:	2e00      	cmp	r6, #0
 8005de8:	d077      	beq.n	8005eda <_dtoa_r+0x1da>
 8005dea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005dee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005df0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005df8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005dfc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005e00:	9712      	str	r7, [sp, #72]	@ 0x48
 8005e02:	4619      	mov	r1, r3
 8005e04:	2200      	movs	r2, #0
 8005e06:	4b76      	ldr	r3, [pc, #472]	@ (8005fe0 <_dtoa_r+0x2e0>)
 8005e08:	f7fa fa62 	bl	80002d0 <__aeabi_dsub>
 8005e0c:	a368      	add	r3, pc, #416	@ (adr r3, 8005fb0 <_dtoa_r+0x2b0>)
 8005e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e12:	f7fa fc15 	bl	8000640 <__aeabi_dmul>
 8005e16:	a368      	add	r3, pc, #416	@ (adr r3, 8005fb8 <_dtoa_r+0x2b8>)
 8005e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1c:	f7fa fa5a 	bl	80002d4 <__adddf3>
 8005e20:	4604      	mov	r4, r0
 8005e22:	4630      	mov	r0, r6
 8005e24:	460d      	mov	r5, r1
 8005e26:	f7fa fba1 	bl	800056c <__aeabi_i2d>
 8005e2a:	a365      	add	r3, pc, #404	@ (adr r3, 8005fc0 <_dtoa_r+0x2c0>)
 8005e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e30:	f7fa fc06 	bl	8000640 <__aeabi_dmul>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4620      	mov	r0, r4
 8005e3a:	4629      	mov	r1, r5
 8005e3c:	f7fa fa4a 	bl	80002d4 <__adddf3>
 8005e40:	4604      	mov	r4, r0
 8005e42:	460d      	mov	r5, r1
 8005e44:	f7fa feac 	bl	8000ba0 <__aeabi_d2iz>
 8005e48:	2200      	movs	r2, #0
 8005e4a:	4607      	mov	r7, r0
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	4620      	mov	r0, r4
 8005e50:	4629      	mov	r1, r5
 8005e52:	f7fa fe67 	bl	8000b24 <__aeabi_dcmplt>
 8005e56:	b140      	cbz	r0, 8005e6a <_dtoa_r+0x16a>
 8005e58:	4638      	mov	r0, r7
 8005e5a:	f7fa fb87 	bl	800056c <__aeabi_i2d>
 8005e5e:	4622      	mov	r2, r4
 8005e60:	462b      	mov	r3, r5
 8005e62:	f7fa fe55 	bl	8000b10 <__aeabi_dcmpeq>
 8005e66:	b900      	cbnz	r0, 8005e6a <_dtoa_r+0x16a>
 8005e68:	3f01      	subs	r7, #1
 8005e6a:	2f16      	cmp	r7, #22
 8005e6c:	d853      	bhi.n	8005f16 <_dtoa_r+0x216>
 8005e6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e72:	4b5c      	ldr	r3, [pc, #368]	@ (8005fe4 <_dtoa_r+0x2e4>)
 8005e74:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7c:	f7fa fe52 	bl	8000b24 <__aeabi_dcmplt>
 8005e80:	2800      	cmp	r0, #0
 8005e82:	d04a      	beq.n	8005f1a <_dtoa_r+0x21a>
 8005e84:	2300      	movs	r3, #0
 8005e86:	3f01      	subs	r7, #1
 8005e88:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005e8a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005e8c:	1b9b      	subs	r3, r3, r6
 8005e8e:	1e5a      	subs	r2, r3, #1
 8005e90:	bf46      	itte	mi
 8005e92:	f1c3 0801 	rsbmi	r8, r3, #1
 8005e96:	2300      	movmi	r3, #0
 8005e98:	f04f 0800 	movpl.w	r8, #0
 8005e9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e9e:	bf48      	it	mi
 8005ea0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005ea2:	2f00      	cmp	r7, #0
 8005ea4:	db3b      	blt.n	8005f1e <_dtoa_r+0x21e>
 8005ea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ea8:	970e      	str	r7, [sp, #56]	@ 0x38
 8005eaa:	443b      	add	r3, r7
 8005eac:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eae:	2300      	movs	r3, #0
 8005eb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005eb2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005eb4:	2b09      	cmp	r3, #9
 8005eb6:	d866      	bhi.n	8005f86 <_dtoa_r+0x286>
 8005eb8:	2b05      	cmp	r3, #5
 8005eba:	bfc4      	itt	gt
 8005ebc:	3b04      	subgt	r3, #4
 8005ebe:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005ec0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ec2:	bfc8      	it	gt
 8005ec4:	2400      	movgt	r4, #0
 8005ec6:	f1a3 0302 	sub.w	r3, r3, #2
 8005eca:	bfd8      	it	le
 8005ecc:	2401      	movle	r4, #1
 8005ece:	2b03      	cmp	r3, #3
 8005ed0:	d864      	bhi.n	8005f9c <_dtoa_r+0x29c>
 8005ed2:	e8df f003 	tbb	[pc, r3]
 8005ed6:	382b      	.short	0x382b
 8005ed8:	5636      	.short	0x5636
 8005eda:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005ede:	441e      	add	r6, r3
 8005ee0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005ee4:	2b20      	cmp	r3, #32
 8005ee6:	bfc1      	itttt	gt
 8005ee8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005eec:	fa08 f803 	lslgt.w	r8, r8, r3
 8005ef0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005ef4:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005ef8:	bfd6      	itet	le
 8005efa:	f1c3 0320 	rsble	r3, r3, #32
 8005efe:	ea48 0003 	orrgt.w	r0, r8, r3
 8005f02:	fa04 f003 	lslle.w	r0, r4, r3
 8005f06:	f7fa fb21 	bl	800054c <__aeabi_ui2d>
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005f10:	3e01      	subs	r6, #1
 8005f12:	9212      	str	r2, [sp, #72]	@ 0x48
 8005f14:	e775      	b.n	8005e02 <_dtoa_r+0x102>
 8005f16:	2301      	movs	r3, #1
 8005f18:	e7b6      	b.n	8005e88 <_dtoa_r+0x188>
 8005f1a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005f1c:	e7b5      	b.n	8005e8a <_dtoa_r+0x18a>
 8005f1e:	427b      	negs	r3, r7
 8005f20:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f22:	2300      	movs	r3, #0
 8005f24:	eba8 0807 	sub.w	r8, r8, r7
 8005f28:	930e      	str	r3, [sp, #56]	@ 0x38
 8005f2a:	e7c2      	b.n	8005eb2 <_dtoa_r+0x1b2>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f30:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	dc35      	bgt.n	8005fa2 <_dtoa_r+0x2a2>
 8005f36:	2301      	movs	r3, #1
 8005f38:	461a      	mov	r2, r3
 8005f3a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005f3e:	9221      	str	r2, [sp, #132]	@ 0x84
 8005f40:	e00b      	b.n	8005f5a <_dtoa_r+0x25a>
 8005f42:	2301      	movs	r3, #1
 8005f44:	e7f3      	b.n	8005f2e <_dtoa_r+0x22e>
 8005f46:	2300      	movs	r3, #0
 8005f48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f4a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f4c:	18fb      	adds	r3, r7, r3
 8005f4e:	9308      	str	r3, [sp, #32]
 8005f50:	3301      	adds	r3, #1
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	9307      	str	r3, [sp, #28]
 8005f56:	bfb8      	it	lt
 8005f58:	2301      	movlt	r3, #1
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	2204      	movs	r2, #4
 8005f5e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005f62:	f102 0514 	add.w	r5, r2, #20
 8005f66:	429d      	cmp	r5, r3
 8005f68:	d91f      	bls.n	8005faa <_dtoa_r+0x2aa>
 8005f6a:	6041      	str	r1, [r0, #4]
 8005f6c:	4658      	mov	r0, fp
 8005f6e:	f000 fd8d 	bl	8006a8c <_Balloc>
 8005f72:	4682      	mov	sl, r0
 8005f74:	2800      	cmp	r0, #0
 8005f76:	d139      	bne.n	8005fec <_dtoa_r+0x2ec>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	f240 11af 	movw	r1, #431	@ 0x1af
 8005f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8005fe8 <_dtoa_r+0x2e8>)
 8005f80:	e6d2      	b.n	8005d28 <_dtoa_r+0x28>
 8005f82:	2301      	movs	r3, #1
 8005f84:	e7e0      	b.n	8005f48 <_dtoa_r+0x248>
 8005f86:	2401      	movs	r4, #1
 8005f88:	2300      	movs	r3, #0
 8005f8a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005f8c:	9320      	str	r3, [sp, #128]	@ 0x80
 8005f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f92:	2200      	movs	r2, #0
 8005f94:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005f98:	2312      	movs	r3, #18
 8005f9a:	e7d0      	b.n	8005f3e <_dtoa_r+0x23e>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fa0:	e7f5      	b.n	8005f8e <_dtoa_r+0x28e>
 8005fa2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005fa4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005fa8:	e7d7      	b.n	8005f5a <_dtoa_r+0x25a>
 8005faa:	3101      	adds	r1, #1
 8005fac:	0052      	lsls	r2, r2, #1
 8005fae:	e7d8      	b.n	8005f62 <_dtoa_r+0x262>
 8005fb0:	636f4361 	.word	0x636f4361
 8005fb4:	3fd287a7 	.word	0x3fd287a7
 8005fb8:	8b60c8b3 	.word	0x8b60c8b3
 8005fbc:	3fc68a28 	.word	0x3fc68a28
 8005fc0:	509f79fb 	.word	0x509f79fb
 8005fc4:	3fd34413 	.word	0x3fd34413
 8005fc8:	080081ab 	.word	0x080081ab
 8005fcc:	080081c2 	.word	0x080081c2
 8005fd0:	7ff00000 	.word	0x7ff00000
 8005fd4:	080081a7 	.word	0x080081a7
 8005fd8:	0800817b 	.word	0x0800817b
 8005fdc:	0800817a 	.word	0x0800817a
 8005fe0:	3ff80000 	.word	0x3ff80000
 8005fe4:	080082b8 	.word	0x080082b8
 8005fe8:	0800821a 	.word	0x0800821a
 8005fec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ff0:	6018      	str	r0, [r3, #0]
 8005ff2:	9b07      	ldr	r3, [sp, #28]
 8005ff4:	2b0e      	cmp	r3, #14
 8005ff6:	f200 80a4 	bhi.w	8006142 <_dtoa_r+0x442>
 8005ffa:	2c00      	cmp	r4, #0
 8005ffc:	f000 80a1 	beq.w	8006142 <_dtoa_r+0x442>
 8006000:	2f00      	cmp	r7, #0
 8006002:	dd33      	ble.n	800606c <_dtoa_r+0x36c>
 8006004:	4b86      	ldr	r3, [pc, #536]	@ (8006220 <_dtoa_r+0x520>)
 8006006:	f007 020f 	and.w	r2, r7, #15
 800600a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800600e:	05f8      	lsls	r0, r7, #23
 8006010:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006014:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006018:	ea4f 1427 	mov.w	r4, r7, asr #4
 800601c:	d516      	bpl.n	800604c <_dtoa_r+0x34c>
 800601e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006022:	4b80      	ldr	r3, [pc, #512]	@ (8006224 <_dtoa_r+0x524>)
 8006024:	2603      	movs	r6, #3
 8006026:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800602a:	f7fa fc33 	bl	8000894 <__aeabi_ddiv>
 800602e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006032:	f004 040f 	and.w	r4, r4, #15
 8006036:	4d7b      	ldr	r5, [pc, #492]	@ (8006224 <_dtoa_r+0x524>)
 8006038:	b954      	cbnz	r4, 8006050 <_dtoa_r+0x350>
 800603a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800603e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006042:	f7fa fc27 	bl	8000894 <__aeabi_ddiv>
 8006046:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800604a:	e028      	b.n	800609e <_dtoa_r+0x39e>
 800604c:	2602      	movs	r6, #2
 800604e:	e7f2      	b.n	8006036 <_dtoa_r+0x336>
 8006050:	07e1      	lsls	r1, r4, #31
 8006052:	d508      	bpl.n	8006066 <_dtoa_r+0x366>
 8006054:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006058:	e9d5 2300 	ldrd	r2, r3, [r5]
 800605c:	f7fa faf0 	bl	8000640 <__aeabi_dmul>
 8006060:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006064:	3601      	adds	r6, #1
 8006066:	1064      	asrs	r4, r4, #1
 8006068:	3508      	adds	r5, #8
 800606a:	e7e5      	b.n	8006038 <_dtoa_r+0x338>
 800606c:	f000 80d2 	beq.w	8006214 <_dtoa_r+0x514>
 8006070:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006074:	427c      	negs	r4, r7
 8006076:	4b6a      	ldr	r3, [pc, #424]	@ (8006220 <_dtoa_r+0x520>)
 8006078:	f004 020f 	and.w	r2, r4, #15
 800607c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006084:	f7fa fadc 	bl	8000640 <__aeabi_dmul>
 8006088:	2602      	movs	r6, #2
 800608a:	2300      	movs	r3, #0
 800608c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006090:	4d64      	ldr	r5, [pc, #400]	@ (8006224 <_dtoa_r+0x524>)
 8006092:	1124      	asrs	r4, r4, #4
 8006094:	2c00      	cmp	r4, #0
 8006096:	f040 80b2 	bne.w	80061fe <_dtoa_r+0x4fe>
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1d3      	bne.n	8006046 <_dtoa_r+0x346>
 800609e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80060a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 80b7 	beq.w	8006218 <_dtoa_r+0x518>
 80060aa:	2200      	movs	r2, #0
 80060ac:	4620      	mov	r0, r4
 80060ae:	4629      	mov	r1, r5
 80060b0:	4b5d      	ldr	r3, [pc, #372]	@ (8006228 <_dtoa_r+0x528>)
 80060b2:	f7fa fd37 	bl	8000b24 <__aeabi_dcmplt>
 80060b6:	2800      	cmp	r0, #0
 80060b8:	f000 80ae 	beq.w	8006218 <_dtoa_r+0x518>
 80060bc:	9b07      	ldr	r3, [sp, #28]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f000 80aa 	beq.w	8006218 <_dtoa_r+0x518>
 80060c4:	9b08      	ldr	r3, [sp, #32]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	dd37      	ble.n	800613a <_dtoa_r+0x43a>
 80060ca:	1e7b      	subs	r3, r7, #1
 80060cc:	4620      	mov	r0, r4
 80060ce:	9304      	str	r3, [sp, #16]
 80060d0:	2200      	movs	r2, #0
 80060d2:	4629      	mov	r1, r5
 80060d4:	4b55      	ldr	r3, [pc, #340]	@ (800622c <_dtoa_r+0x52c>)
 80060d6:	f7fa fab3 	bl	8000640 <__aeabi_dmul>
 80060da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060de:	9c08      	ldr	r4, [sp, #32]
 80060e0:	3601      	adds	r6, #1
 80060e2:	4630      	mov	r0, r6
 80060e4:	f7fa fa42 	bl	800056c <__aeabi_i2d>
 80060e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060ec:	f7fa faa8 	bl	8000640 <__aeabi_dmul>
 80060f0:	2200      	movs	r2, #0
 80060f2:	4b4f      	ldr	r3, [pc, #316]	@ (8006230 <_dtoa_r+0x530>)
 80060f4:	f7fa f8ee 	bl	80002d4 <__adddf3>
 80060f8:	4605      	mov	r5, r0
 80060fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80060fe:	2c00      	cmp	r4, #0
 8006100:	f040 809a 	bne.w	8006238 <_dtoa_r+0x538>
 8006104:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006108:	2200      	movs	r2, #0
 800610a:	4b4a      	ldr	r3, [pc, #296]	@ (8006234 <_dtoa_r+0x534>)
 800610c:	f7fa f8e0 	bl	80002d0 <__aeabi_dsub>
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
 8006114:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006118:	462a      	mov	r2, r5
 800611a:	4633      	mov	r3, r6
 800611c:	f7fa fd20 	bl	8000b60 <__aeabi_dcmpgt>
 8006120:	2800      	cmp	r0, #0
 8006122:	f040 828e 	bne.w	8006642 <_dtoa_r+0x942>
 8006126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800612a:	462a      	mov	r2, r5
 800612c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006130:	f7fa fcf8 	bl	8000b24 <__aeabi_dcmplt>
 8006134:	2800      	cmp	r0, #0
 8006136:	f040 8127 	bne.w	8006388 <_dtoa_r+0x688>
 800613a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800613e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006142:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006144:	2b00      	cmp	r3, #0
 8006146:	f2c0 8163 	blt.w	8006410 <_dtoa_r+0x710>
 800614a:	2f0e      	cmp	r7, #14
 800614c:	f300 8160 	bgt.w	8006410 <_dtoa_r+0x710>
 8006150:	4b33      	ldr	r3, [pc, #204]	@ (8006220 <_dtoa_r+0x520>)
 8006152:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006156:	e9d3 3400 	ldrd	r3, r4, [r3]
 800615a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800615e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006160:	2b00      	cmp	r3, #0
 8006162:	da03      	bge.n	800616c <_dtoa_r+0x46c>
 8006164:	9b07      	ldr	r3, [sp, #28]
 8006166:	2b00      	cmp	r3, #0
 8006168:	f340 8100 	ble.w	800636c <_dtoa_r+0x66c>
 800616c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006170:	4656      	mov	r6, sl
 8006172:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006176:	4620      	mov	r0, r4
 8006178:	4629      	mov	r1, r5
 800617a:	f7fa fb8b 	bl	8000894 <__aeabi_ddiv>
 800617e:	f7fa fd0f 	bl	8000ba0 <__aeabi_d2iz>
 8006182:	4680      	mov	r8, r0
 8006184:	f7fa f9f2 	bl	800056c <__aeabi_i2d>
 8006188:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800618c:	f7fa fa58 	bl	8000640 <__aeabi_dmul>
 8006190:	4602      	mov	r2, r0
 8006192:	460b      	mov	r3, r1
 8006194:	4620      	mov	r0, r4
 8006196:	4629      	mov	r1, r5
 8006198:	f7fa f89a 	bl	80002d0 <__aeabi_dsub>
 800619c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80061a0:	9d07      	ldr	r5, [sp, #28]
 80061a2:	f806 4b01 	strb.w	r4, [r6], #1
 80061a6:	eba6 040a 	sub.w	r4, r6, sl
 80061aa:	42a5      	cmp	r5, r4
 80061ac:	4602      	mov	r2, r0
 80061ae:	460b      	mov	r3, r1
 80061b0:	f040 8116 	bne.w	80063e0 <_dtoa_r+0x6e0>
 80061b4:	f7fa f88e 	bl	80002d4 <__adddf3>
 80061b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061bc:	4604      	mov	r4, r0
 80061be:	460d      	mov	r5, r1
 80061c0:	f7fa fcce 	bl	8000b60 <__aeabi_dcmpgt>
 80061c4:	2800      	cmp	r0, #0
 80061c6:	f040 80f8 	bne.w	80063ba <_dtoa_r+0x6ba>
 80061ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061ce:	4620      	mov	r0, r4
 80061d0:	4629      	mov	r1, r5
 80061d2:	f7fa fc9d 	bl	8000b10 <__aeabi_dcmpeq>
 80061d6:	b118      	cbz	r0, 80061e0 <_dtoa_r+0x4e0>
 80061d8:	f018 0f01 	tst.w	r8, #1
 80061dc:	f040 80ed 	bne.w	80063ba <_dtoa_r+0x6ba>
 80061e0:	4649      	mov	r1, r9
 80061e2:	4658      	mov	r0, fp
 80061e4:	f000 fc92 	bl	8006b0c <_Bfree>
 80061e8:	2300      	movs	r3, #0
 80061ea:	7033      	strb	r3, [r6, #0]
 80061ec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80061ee:	3701      	adds	r7, #1
 80061f0:	601f      	str	r7, [r3, #0]
 80061f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 8320 	beq.w	800683a <_dtoa_r+0xb3a>
 80061fa:	601e      	str	r6, [r3, #0]
 80061fc:	e31d      	b.n	800683a <_dtoa_r+0xb3a>
 80061fe:	07e2      	lsls	r2, r4, #31
 8006200:	d505      	bpl.n	800620e <_dtoa_r+0x50e>
 8006202:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006206:	f7fa fa1b 	bl	8000640 <__aeabi_dmul>
 800620a:	2301      	movs	r3, #1
 800620c:	3601      	adds	r6, #1
 800620e:	1064      	asrs	r4, r4, #1
 8006210:	3508      	adds	r5, #8
 8006212:	e73f      	b.n	8006094 <_dtoa_r+0x394>
 8006214:	2602      	movs	r6, #2
 8006216:	e742      	b.n	800609e <_dtoa_r+0x39e>
 8006218:	9c07      	ldr	r4, [sp, #28]
 800621a:	9704      	str	r7, [sp, #16]
 800621c:	e761      	b.n	80060e2 <_dtoa_r+0x3e2>
 800621e:	bf00      	nop
 8006220:	080082b8 	.word	0x080082b8
 8006224:	08008290 	.word	0x08008290
 8006228:	3ff00000 	.word	0x3ff00000
 800622c:	40240000 	.word	0x40240000
 8006230:	401c0000 	.word	0x401c0000
 8006234:	40140000 	.word	0x40140000
 8006238:	4b70      	ldr	r3, [pc, #448]	@ (80063fc <_dtoa_r+0x6fc>)
 800623a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800623c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006240:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006244:	4454      	add	r4, sl
 8006246:	2900      	cmp	r1, #0
 8006248:	d045      	beq.n	80062d6 <_dtoa_r+0x5d6>
 800624a:	2000      	movs	r0, #0
 800624c:	496c      	ldr	r1, [pc, #432]	@ (8006400 <_dtoa_r+0x700>)
 800624e:	f7fa fb21 	bl	8000894 <__aeabi_ddiv>
 8006252:	4633      	mov	r3, r6
 8006254:	462a      	mov	r2, r5
 8006256:	f7fa f83b 	bl	80002d0 <__aeabi_dsub>
 800625a:	4656      	mov	r6, sl
 800625c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006260:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006264:	f7fa fc9c 	bl	8000ba0 <__aeabi_d2iz>
 8006268:	4605      	mov	r5, r0
 800626a:	f7fa f97f 	bl	800056c <__aeabi_i2d>
 800626e:	4602      	mov	r2, r0
 8006270:	460b      	mov	r3, r1
 8006272:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006276:	f7fa f82b 	bl	80002d0 <__aeabi_dsub>
 800627a:	4602      	mov	r2, r0
 800627c:	460b      	mov	r3, r1
 800627e:	3530      	adds	r5, #48	@ 0x30
 8006280:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006284:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006288:	f806 5b01 	strb.w	r5, [r6], #1
 800628c:	f7fa fc4a 	bl	8000b24 <__aeabi_dcmplt>
 8006290:	2800      	cmp	r0, #0
 8006292:	d163      	bne.n	800635c <_dtoa_r+0x65c>
 8006294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006298:	2000      	movs	r0, #0
 800629a:	495a      	ldr	r1, [pc, #360]	@ (8006404 <_dtoa_r+0x704>)
 800629c:	f7fa f818 	bl	80002d0 <__aeabi_dsub>
 80062a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80062a4:	f7fa fc3e 	bl	8000b24 <__aeabi_dcmplt>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	f040 8087 	bne.w	80063bc <_dtoa_r+0x6bc>
 80062ae:	42a6      	cmp	r6, r4
 80062b0:	f43f af43 	beq.w	800613a <_dtoa_r+0x43a>
 80062b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80062b8:	2200      	movs	r2, #0
 80062ba:	4b53      	ldr	r3, [pc, #332]	@ (8006408 <_dtoa_r+0x708>)
 80062bc:	f7fa f9c0 	bl	8000640 <__aeabi_dmul>
 80062c0:	2200      	movs	r2, #0
 80062c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80062c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062ca:	4b4f      	ldr	r3, [pc, #316]	@ (8006408 <_dtoa_r+0x708>)
 80062cc:	f7fa f9b8 	bl	8000640 <__aeabi_dmul>
 80062d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062d4:	e7c4      	b.n	8006260 <_dtoa_r+0x560>
 80062d6:	4631      	mov	r1, r6
 80062d8:	4628      	mov	r0, r5
 80062da:	f7fa f9b1 	bl	8000640 <__aeabi_dmul>
 80062de:	4656      	mov	r6, sl
 80062e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80062e4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80062e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062ea:	f7fa fc59 	bl	8000ba0 <__aeabi_d2iz>
 80062ee:	4605      	mov	r5, r0
 80062f0:	f7fa f93c 	bl	800056c <__aeabi_i2d>
 80062f4:	4602      	mov	r2, r0
 80062f6:	460b      	mov	r3, r1
 80062f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062fc:	f7f9 ffe8 	bl	80002d0 <__aeabi_dsub>
 8006300:	4602      	mov	r2, r0
 8006302:	460b      	mov	r3, r1
 8006304:	3530      	adds	r5, #48	@ 0x30
 8006306:	f806 5b01 	strb.w	r5, [r6], #1
 800630a:	42a6      	cmp	r6, r4
 800630c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006310:	f04f 0200 	mov.w	r2, #0
 8006314:	d124      	bne.n	8006360 <_dtoa_r+0x660>
 8006316:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800631a:	4b39      	ldr	r3, [pc, #228]	@ (8006400 <_dtoa_r+0x700>)
 800631c:	f7f9 ffda 	bl	80002d4 <__adddf3>
 8006320:	4602      	mov	r2, r0
 8006322:	460b      	mov	r3, r1
 8006324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006328:	f7fa fc1a 	bl	8000b60 <__aeabi_dcmpgt>
 800632c:	2800      	cmp	r0, #0
 800632e:	d145      	bne.n	80063bc <_dtoa_r+0x6bc>
 8006330:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006334:	2000      	movs	r0, #0
 8006336:	4932      	ldr	r1, [pc, #200]	@ (8006400 <_dtoa_r+0x700>)
 8006338:	f7f9 ffca 	bl	80002d0 <__aeabi_dsub>
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006344:	f7fa fbee 	bl	8000b24 <__aeabi_dcmplt>
 8006348:	2800      	cmp	r0, #0
 800634a:	f43f aef6 	beq.w	800613a <_dtoa_r+0x43a>
 800634e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006350:	1e73      	subs	r3, r6, #1
 8006352:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006354:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006358:	2b30      	cmp	r3, #48	@ 0x30
 800635a:	d0f8      	beq.n	800634e <_dtoa_r+0x64e>
 800635c:	9f04      	ldr	r7, [sp, #16]
 800635e:	e73f      	b.n	80061e0 <_dtoa_r+0x4e0>
 8006360:	4b29      	ldr	r3, [pc, #164]	@ (8006408 <_dtoa_r+0x708>)
 8006362:	f7fa f96d 	bl	8000640 <__aeabi_dmul>
 8006366:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800636a:	e7bc      	b.n	80062e6 <_dtoa_r+0x5e6>
 800636c:	d10c      	bne.n	8006388 <_dtoa_r+0x688>
 800636e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006372:	2200      	movs	r2, #0
 8006374:	4b25      	ldr	r3, [pc, #148]	@ (800640c <_dtoa_r+0x70c>)
 8006376:	f7fa f963 	bl	8000640 <__aeabi_dmul>
 800637a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800637e:	f7fa fbe5 	bl	8000b4c <__aeabi_dcmpge>
 8006382:	2800      	cmp	r0, #0
 8006384:	f000 815b 	beq.w	800663e <_dtoa_r+0x93e>
 8006388:	2400      	movs	r4, #0
 800638a:	4625      	mov	r5, r4
 800638c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800638e:	4656      	mov	r6, sl
 8006390:	43db      	mvns	r3, r3
 8006392:	9304      	str	r3, [sp, #16]
 8006394:	2700      	movs	r7, #0
 8006396:	4621      	mov	r1, r4
 8006398:	4658      	mov	r0, fp
 800639a:	f000 fbb7 	bl	8006b0c <_Bfree>
 800639e:	2d00      	cmp	r5, #0
 80063a0:	d0dc      	beq.n	800635c <_dtoa_r+0x65c>
 80063a2:	b12f      	cbz	r7, 80063b0 <_dtoa_r+0x6b0>
 80063a4:	42af      	cmp	r7, r5
 80063a6:	d003      	beq.n	80063b0 <_dtoa_r+0x6b0>
 80063a8:	4639      	mov	r1, r7
 80063aa:	4658      	mov	r0, fp
 80063ac:	f000 fbae 	bl	8006b0c <_Bfree>
 80063b0:	4629      	mov	r1, r5
 80063b2:	4658      	mov	r0, fp
 80063b4:	f000 fbaa 	bl	8006b0c <_Bfree>
 80063b8:	e7d0      	b.n	800635c <_dtoa_r+0x65c>
 80063ba:	9704      	str	r7, [sp, #16]
 80063bc:	4633      	mov	r3, r6
 80063be:	461e      	mov	r6, r3
 80063c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063c4:	2a39      	cmp	r2, #57	@ 0x39
 80063c6:	d107      	bne.n	80063d8 <_dtoa_r+0x6d8>
 80063c8:	459a      	cmp	sl, r3
 80063ca:	d1f8      	bne.n	80063be <_dtoa_r+0x6be>
 80063cc:	9a04      	ldr	r2, [sp, #16]
 80063ce:	3201      	adds	r2, #1
 80063d0:	9204      	str	r2, [sp, #16]
 80063d2:	2230      	movs	r2, #48	@ 0x30
 80063d4:	f88a 2000 	strb.w	r2, [sl]
 80063d8:	781a      	ldrb	r2, [r3, #0]
 80063da:	3201      	adds	r2, #1
 80063dc:	701a      	strb	r2, [r3, #0]
 80063de:	e7bd      	b.n	800635c <_dtoa_r+0x65c>
 80063e0:	2200      	movs	r2, #0
 80063e2:	4b09      	ldr	r3, [pc, #36]	@ (8006408 <_dtoa_r+0x708>)
 80063e4:	f7fa f92c 	bl	8000640 <__aeabi_dmul>
 80063e8:	2200      	movs	r2, #0
 80063ea:	2300      	movs	r3, #0
 80063ec:	4604      	mov	r4, r0
 80063ee:	460d      	mov	r5, r1
 80063f0:	f7fa fb8e 	bl	8000b10 <__aeabi_dcmpeq>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	f43f aebc 	beq.w	8006172 <_dtoa_r+0x472>
 80063fa:	e6f1      	b.n	80061e0 <_dtoa_r+0x4e0>
 80063fc:	080082b8 	.word	0x080082b8
 8006400:	3fe00000 	.word	0x3fe00000
 8006404:	3ff00000 	.word	0x3ff00000
 8006408:	40240000 	.word	0x40240000
 800640c:	40140000 	.word	0x40140000
 8006410:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006412:	2a00      	cmp	r2, #0
 8006414:	f000 80db 	beq.w	80065ce <_dtoa_r+0x8ce>
 8006418:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800641a:	2a01      	cmp	r2, #1
 800641c:	f300 80bf 	bgt.w	800659e <_dtoa_r+0x89e>
 8006420:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006422:	2a00      	cmp	r2, #0
 8006424:	f000 80b7 	beq.w	8006596 <_dtoa_r+0x896>
 8006428:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800642c:	4646      	mov	r6, r8
 800642e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006430:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006432:	2101      	movs	r1, #1
 8006434:	441a      	add	r2, r3
 8006436:	4658      	mov	r0, fp
 8006438:	4498      	add	r8, r3
 800643a:	9209      	str	r2, [sp, #36]	@ 0x24
 800643c:	f000 fc1a 	bl	8006c74 <__i2b>
 8006440:	4605      	mov	r5, r0
 8006442:	b15e      	cbz	r6, 800645c <_dtoa_r+0x75c>
 8006444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006446:	2b00      	cmp	r3, #0
 8006448:	dd08      	ble.n	800645c <_dtoa_r+0x75c>
 800644a:	42b3      	cmp	r3, r6
 800644c:	bfa8      	it	ge
 800644e:	4633      	movge	r3, r6
 8006450:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006452:	eba8 0803 	sub.w	r8, r8, r3
 8006456:	1af6      	subs	r6, r6, r3
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	9309      	str	r3, [sp, #36]	@ 0x24
 800645c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800645e:	b1f3      	cbz	r3, 800649e <_dtoa_r+0x79e>
 8006460:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006462:	2b00      	cmp	r3, #0
 8006464:	f000 80b7 	beq.w	80065d6 <_dtoa_r+0x8d6>
 8006468:	b18c      	cbz	r4, 800648e <_dtoa_r+0x78e>
 800646a:	4629      	mov	r1, r5
 800646c:	4622      	mov	r2, r4
 800646e:	4658      	mov	r0, fp
 8006470:	f000 fcbe 	bl	8006df0 <__pow5mult>
 8006474:	464a      	mov	r2, r9
 8006476:	4601      	mov	r1, r0
 8006478:	4605      	mov	r5, r0
 800647a:	4658      	mov	r0, fp
 800647c:	f000 fc10 	bl	8006ca0 <__multiply>
 8006480:	4649      	mov	r1, r9
 8006482:	9004      	str	r0, [sp, #16]
 8006484:	4658      	mov	r0, fp
 8006486:	f000 fb41 	bl	8006b0c <_Bfree>
 800648a:	9b04      	ldr	r3, [sp, #16]
 800648c:	4699      	mov	r9, r3
 800648e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006490:	1b1a      	subs	r2, r3, r4
 8006492:	d004      	beq.n	800649e <_dtoa_r+0x79e>
 8006494:	4649      	mov	r1, r9
 8006496:	4658      	mov	r0, fp
 8006498:	f000 fcaa 	bl	8006df0 <__pow5mult>
 800649c:	4681      	mov	r9, r0
 800649e:	2101      	movs	r1, #1
 80064a0:	4658      	mov	r0, fp
 80064a2:	f000 fbe7 	bl	8006c74 <__i2b>
 80064a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064a8:	4604      	mov	r4, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 81c9 	beq.w	8006842 <_dtoa_r+0xb42>
 80064b0:	461a      	mov	r2, r3
 80064b2:	4601      	mov	r1, r0
 80064b4:	4658      	mov	r0, fp
 80064b6:	f000 fc9b 	bl	8006df0 <__pow5mult>
 80064ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80064bc:	4604      	mov	r4, r0
 80064be:	2b01      	cmp	r3, #1
 80064c0:	f300 808f 	bgt.w	80065e2 <_dtoa_r+0x8e2>
 80064c4:	9b02      	ldr	r3, [sp, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f040 8087 	bne.w	80065da <_dtoa_r+0x8da>
 80064cc:	9b03      	ldr	r3, [sp, #12]
 80064ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f040 8083 	bne.w	80065de <_dtoa_r+0x8de>
 80064d8:	9b03      	ldr	r3, [sp, #12]
 80064da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80064de:	0d1b      	lsrs	r3, r3, #20
 80064e0:	051b      	lsls	r3, r3, #20
 80064e2:	b12b      	cbz	r3, 80064f0 <_dtoa_r+0x7f0>
 80064e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064e6:	f108 0801 	add.w	r8, r8, #1
 80064ea:	3301      	adds	r3, #1
 80064ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80064ee:	2301      	movs	r3, #1
 80064f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80064f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 81aa 	beq.w	800684e <_dtoa_r+0xb4e>
 80064fa:	6923      	ldr	r3, [r4, #16]
 80064fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006500:	6918      	ldr	r0, [r3, #16]
 8006502:	f000 fb6b 	bl	8006bdc <__hi0bits>
 8006506:	f1c0 0020 	rsb	r0, r0, #32
 800650a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800650c:	4418      	add	r0, r3
 800650e:	f010 001f 	ands.w	r0, r0, #31
 8006512:	d071      	beq.n	80065f8 <_dtoa_r+0x8f8>
 8006514:	f1c0 0320 	rsb	r3, r0, #32
 8006518:	2b04      	cmp	r3, #4
 800651a:	dd65      	ble.n	80065e8 <_dtoa_r+0x8e8>
 800651c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800651e:	f1c0 001c 	rsb	r0, r0, #28
 8006522:	4403      	add	r3, r0
 8006524:	4480      	add	r8, r0
 8006526:	4406      	add	r6, r0
 8006528:	9309      	str	r3, [sp, #36]	@ 0x24
 800652a:	f1b8 0f00 	cmp.w	r8, #0
 800652e:	dd05      	ble.n	800653c <_dtoa_r+0x83c>
 8006530:	4649      	mov	r1, r9
 8006532:	4642      	mov	r2, r8
 8006534:	4658      	mov	r0, fp
 8006536:	f000 fcb5 	bl	8006ea4 <__lshift>
 800653a:	4681      	mov	r9, r0
 800653c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800653e:	2b00      	cmp	r3, #0
 8006540:	dd05      	ble.n	800654e <_dtoa_r+0x84e>
 8006542:	4621      	mov	r1, r4
 8006544:	461a      	mov	r2, r3
 8006546:	4658      	mov	r0, fp
 8006548:	f000 fcac 	bl	8006ea4 <__lshift>
 800654c:	4604      	mov	r4, r0
 800654e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006550:	2b00      	cmp	r3, #0
 8006552:	d053      	beq.n	80065fc <_dtoa_r+0x8fc>
 8006554:	4621      	mov	r1, r4
 8006556:	4648      	mov	r0, r9
 8006558:	f000 fd10 	bl	8006f7c <__mcmp>
 800655c:	2800      	cmp	r0, #0
 800655e:	da4d      	bge.n	80065fc <_dtoa_r+0x8fc>
 8006560:	1e7b      	subs	r3, r7, #1
 8006562:	4649      	mov	r1, r9
 8006564:	9304      	str	r3, [sp, #16]
 8006566:	220a      	movs	r2, #10
 8006568:	2300      	movs	r3, #0
 800656a:	4658      	mov	r0, fp
 800656c:	f000 faf0 	bl	8006b50 <__multadd>
 8006570:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006572:	4681      	mov	r9, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 816c 	beq.w	8006852 <_dtoa_r+0xb52>
 800657a:	2300      	movs	r3, #0
 800657c:	4629      	mov	r1, r5
 800657e:	220a      	movs	r2, #10
 8006580:	4658      	mov	r0, fp
 8006582:	f000 fae5 	bl	8006b50 <__multadd>
 8006586:	9b08      	ldr	r3, [sp, #32]
 8006588:	4605      	mov	r5, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	dc61      	bgt.n	8006652 <_dtoa_r+0x952>
 800658e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006590:	2b02      	cmp	r3, #2
 8006592:	dc3b      	bgt.n	800660c <_dtoa_r+0x90c>
 8006594:	e05d      	b.n	8006652 <_dtoa_r+0x952>
 8006596:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006598:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800659c:	e746      	b.n	800642c <_dtoa_r+0x72c>
 800659e:	9b07      	ldr	r3, [sp, #28]
 80065a0:	1e5c      	subs	r4, r3, #1
 80065a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065a4:	42a3      	cmp	r3, r4
 80065a6:	bfbf      	itttt	lt
 80065a8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80065aa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80065ac:	1ae3      	sublt	r3, r4, r3
 80065ae:	18d2      	addlt	r2, r2, r3
 80065b0:	bfa8      	it	ge
 80065b2:	1b1c      	subge	r4, r3, r4
 80065b4:	9b07      	ldr	r3, [sp, #28]
 80065b6:	bfbe      	ittt	lt
 80065b8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80065ba:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80065bc:	2400      	movlt	r4, #0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	bfb5      	itete	lt
 80065c2:	eba8 0603 	sublt.w	r6, r8, r3
 80065c6:	4646      	movge	r6, r8
 80065c8:	2300      	movlt	r3, #0
 80065ca:	9b07      	ldrge	r3, [sp, #28]
 80065cc:	e730      	b.n	8006430 <_dtoa_r+0x730>
 80065ce:	4646      	mov	r6, r8
 80065d0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80065d2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80065d4:	e735      	b.n	8006442 <_dtoa_r+0x742>
 80065d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80065d8:	e75c      	b.n	8006494 <_dtoa_r+0x794>
 80065da:	2300      	movs	r3, #0
 80065dc:	e788      	b.n	80064f0 <_dtoa_r+0x7f0>
 80065de:	9b02      	ldr	r3, [sp, #8]
 80065e0:	e786      	b.n	80064f0 <_dtoa_r+0x7f0>
 80065e2:	2300      	movs	r3, #0
 80065e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80065e6:	e788      	b.n	80064fa <_dtoa_r+0x7fa>
 80065e8:	d09f      	beq.n	800652a <_dtoa_r+0x82a>
 80065ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065ec:	331c      	adds	r3, #28
 80065ee:	441a      	add	r2, r3
 80065f0:	4498      	add	r8, r3
 80065f2:	441e      	add	r6, r3
 80065f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80065f6:	e798      	b.n	800652a <_dtoa_r+0x82a>
 80065f8:	4603      	mov	r3, r0
 80065fa:	e7f6      	b.n	80065ea <_dtoa_r+0x8ea>
 80065fc:	9b07      	ldr	r3, [sp, #28]
 80065fe:	9704      	str	r7, [sp, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	dc20      	bgt.n	8006646 <_dtoa_r+0x946>
 8006604:	9308      	str	r3, [sp, #32]
 8006606:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006608:	2b02      	cmp	r3, #2
 800660a:	dd1e      	ble.n	800664a <_dtoa_r+0x94a>
 800660c:	9b08      	ldr	r3, [sp, #32]
 800660e:	2b00      	cmp	r3, #0
 8006610:	f47f aebc 	bne.w	800638c <_dtoa_r+0x68c>
 8006614:	4621      	mov	r1, r4
 8006616:	2205      	movs	r2, #5
 8006618:	4658      	mov	r0, fp
 800661a:	f000 fa99 	bl	8006b50 <__multadd>
 800661e:	4601      	mov	r1, r0
 8006620:	4604      	mov	r4, r0
 8006622:	4648      	mov	r0, r9
 8006624:	f000 fcaa 	bl	8006f7c <__mcmp>
 8006628:	2800      	cmp	r0, #0
 800662a:	f77f aeaf 	ble.w	800638c <_dtoa_r+0x68c>
 800662e:	2331      	movs	r3, #49	@ 0x31
 8006630:	4656      	mov	r6, sl
 8006632:	f806 3b01 	strb.w	r3, [r6], #1
 8006636:	9b04      	ldr	r3, [sp, #16]
 8006638:	3301      	adds	r3, #1
 800663a:	9304      	str	r3, [sp, #16]
 800663c:	e6aa      	b.n	8006394 <_dtoa_r+0x694>
 800663e:	9c07      	ldr	r4, [sp, #28]
 8006640:	9704      	str	r7, [sp, #16]
 8006642:	4625      	mov	r5, r4
 8006644:	e7f3      	b.n	800662e <_dtoa_r+0x92e>
 8006646:	9b07      	ldr	r3, [sp, #28]
 8006648:	9308      	str	r3, [sp, #32]
 800664a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 8104 	beq.w	800685a <_dtoa_r+0xb5a>
 8006652:	2e00      	cmp	r6, #0
 8006654:	dd05      	ble.n	8006662 <_dtoa_r+0x962>
 8006656:	4629      	mov	r1, r5
 8006658:	4632      	mov	r2, r6
 800665a:	4658      	mov	r0, fp
 800665c:	f000 fc22 	bl	8006ea4 <__lshift>
 8006660:	4605      	mov	r5, r0
 8006662:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006664:	2b00      	cmp	r3, #0
 8006666:	d05a      	beq.n	800671e <_dtoa_r+0xa1e>
 8006668:	4658      	mov	r0, fp
 800666a:	6869      	ldr	r1, [r5, #4]
 800666c:	f000 fa0e 	bl	8006a8c <_Balloc>
 8006670:	4606      	mov	r6, r0
 8006672:	b928      	cbnz	r0, 8006680 <_dtoa_r+0x980>
 8006674:	4602      	mov	r2, r0
 8006676:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800667a:	4b83      	ldr	r3, [pc, #524]	@ (8006888 <_dtoa_r+0xb88>)
 800667c:	f7ff bb54 	b.w	8005d28 <_dtoa_r+0x28>
 8006680:	692a      	ldr	r2, [r5, #16]
 8006682:	f105 010c 	add.w	r1, r5, #12
 8006686:	3202      	adds	r2, #2
 8006688:	0092      	lsls	r2, r2, #2
 800668a:	300c      	adds	r0, #12
 800668c:	f000 fe36 	bl	80072fc <memcpy>
 8006690:	2201      	movs	r2, #1
 8006692:	4631      	mov	r1, r6
 8006694:	4658      	mov	r0, fp
 8006696:	f000 fc05 	bl	8006ea4 <__lshift>
 800669a:	462f      	mov	r7, r5
 800669c:	4605      	mov	r5, r0
 800669e:	f10a 0301 	add.w	r3, sl, #1
 80066a2:	9307      	str	r3, [sp, #28]
 80066a4:	9b08      	ldr	r3, [sp, #32]
 80066a6:	4453      	add	r3, sl
 80066a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066aa:	9b02      	ldr	r3, [sp, #8]
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80066b2:	9b07      	ldr	r3, [sp, #28]
 80066b4:	4621      	mov	r1, r4
 80066b6:	3b01      	subs	r3, #1
 80066b8:	4648      	mov	r0, r9
 80066ba:	9302      	str	r3, [sp, #8]
 80066bc:	f7ff fa95 	bl	8005bea <quorem>
 80066c0:	4639      	mov	r1, r7
 80066c2:	9008      	str	r0, [sp, #32]
 80066c4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80066c8:	4648      	mov	r0, r9
 80066ca:	f000 fc57 	bl	8006f7c <__mcmp>
 80066ce:	462a      	mov	r2, r5
 80066d0:	9009      	str	r0, [sp, #36]	@ 0x24
 80066d2:	4621      	mov	r1, r4
 80066d4:	4658      	mov	r0, fp
 80066d6:	f000 fc6d 	bl	8006fb4 <__mdiff>
 80066da:	68c2      	ldr	r2, [r0, #12]
 80066dc:	4606      	mov	r6, r0
 80066de:	bb02      	cbnz	r2, 8006722 <_dtoa_r+0xa22>
 80066e0:	4601      	mov	r1, r0
 80066e2:	4648      	mov	r0, r9
 80066e4:	f000 fc4a 	bl	8006f7c <__mcmp>
 80066e8:	4602      	mov	r2, r0
 80066ea:	4631      	mov	r1, r6
 80066ec:	4658      	mov	r0, fp
 80066ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80066f0:	f000 fa0c 	bl	8006b0c <_Bfree>
 80066f4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80066f6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80066f8:	9e07      	ldr	r6, [sp, #28]
 80066fa:	ea43 0102 	orr.w	r1, r3, r2
 80066fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006700:	4319      	orrs	r1, r3
 8006702:	d110      	bne.n	8006726 <_dtoa_r+0xa26>
 8006704:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006708:	d029      	beq.n	800675e <_dtoa_r+0xa5e>
 800670a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800670c:	2b00      	cmp	r3, #0
 800670e:	dd02      	ble.n	8006716 <_dtoa_r+0xa16>
 8006710:	9b08      	ldr	r3, [sp, #32]
 8006712:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006716:	9b02      	ldr	r3, [sp, #8]
 8006718:	f883 8000 	strb.w	r8, [r3]
 800671c:	e63b      	b.n	8006396 <_dtoa_r+0x696>
 800671e:	4628      	mov	r0, r5
 8006720:	e7bb      	b.n	800669a <_dtoa_r+0x99a>
 8006722:	2201      	movs	r2, #1
 8006724:	e7e1      	b.n	80066ea <_dtoa_r+0x9ea>
 8006726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006728:	2b00      	cmp	r3, #0
 800672a:	db04      	blt.n	8006736 <_dtoa_r+0xa36>
 800672c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800672e:	430b      	orrs	r3, r1
 8006730:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006732:	430b      	orrs	r3, r1
 8006734:	d120      	bne.n	8006778 <_dtoa_r+0xa78>
 8006736:	2a00      	cmp	r2, #0
 8006738:	dded      	ble.n	8006716 <_dtoa_r+0xa16>
 800673a:	4649      	mov	r1, r9
 800673c:	2201      	movs	r2, #1
 800673e:	4658      	mov	r0, fp
 8006740:	f000 fbb0 	bl	8006ea4 <__lshift>
 8006744:	4621      	mov	r1, r4
 8006746:	4681      	mov	r9, r0
 8006748:	f000 fc18 	bl	8006f7c <__mcmp>
 800674c:	2800      	cmp	r0, #0
 800674e:	dc03      	bgt.n	8006758 <_dtoa_r+0xa58>
 8006750:	d1e1      	bne.n	8006716 <_dtoa_r+0xa16>
 8006752:	f018 0f01 	tst.w	r8, #1
 8006756:	d0de      	beq.n	8006716 <_dtoa_r+0xa16>
 8006758:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800675c:	d1d8      	bne.n	8006710 <_dtoa_r+0xa10>
 800675e:	2339      	movs	r3, #57	@ 0x39
 8006760:	9a02      	ldr	r2, [sp, #8]
 8006762:	7013      	strb	r3, [r2, #0]
 8006764:	4633      	mov	r3, r6
 8006766:	461e      	mov	r6, r3
 8006768:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800676c:	3b01      	subs	r3, #1
 800676e:	2a39      	cmp	r2, #57	@ 0x39
 8006770:	d052      	beq.n	8006818 <_dtoa_r+0xb18>
 8006772:	3201      	adds	r2, #1
 8006774:	701a      	strb	r2, [r3, #0]
 8006776:	e60e      	b.n	8006396 <_dtoa_r+0x696>
 8006778:	2a00      	cmp	r2, #0
 800677a:	dd07      	ble.n	800678c <_dtoa_r+0xa8c>
 800677c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006780:	d0ed      	beq.n	800675e <_dtoa_r+0xa5e>
 8006782:	9a02      	ldr	r2, [sp, #8]
 8006784:	f108 0301 	add.w	r3, r8, #1
 8006788:	7013      	strb	r3, [r2, #0]
 800678a:	e604      	b.n	8006396 <_dtoa_r+0x696>
 800678c:	9b07      	ldr	r3, [sp, #28]
 800678e:	9a07      	ldr	r2, [sp, #28]
 8006790:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006794:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006796:	4293      	cmp	r3, r2
 8006798:	d028      	beq.n	80067ec <_dtoa_r+0xaec>
 800679a:	4649      	mov	r1, r9
 800679c:	2300      	movs	r3, #0
 800679e:	220a      	movs	r2, #10
 80067a0:	4658      	mov	r0, fp
 80067a2:	f000 f9d5 	bl	8006b50 <__multadd>
 80067a6:	42af      	cmp	r7, r5
 80067a8:	4681      	mov	r9, r0
 80067aa:	f04f 0300 	mov.w	r3, #0
 80067ae:	f04f 020a 	mov.w	r2, #10
 80067b2:	4639      	mov	r1, r7
 80067b4:	4658      	mov	r0, fp
 80067b6:	d107      	bne.n	80067c8 <_dtoa_r+0xac8>
 80067b8:	f000 f9ca 	bl	8006b50 <__multadd>
 80067bc:	4607      	mov	r7, r0
 80067be:	4605      	mov	r5, r0
 80067c0:	9b07      	ldr	r3, [sp, #28]
 80067c2:	3301      	adds	r3, #1
 80067c4:	9307      	str	r3, [sp, #28]
 80067c6:	e774      	b.n	80066b2 <_dtoa_r+0x9b2>
 80067c8:	f000 f9c2 	bl	8006b50 <__multadd>
 80067cc:	4629      	mov	r1, r5
 80067ce:	4607      	mov	r7, r0
 80067d0:	2300      	movs	r3, #0
 80067d2:	220a      	movs	r2, #10
 80067d4:	4658      	mov	r0, fp
 80067d6:	f000 f9bb 	bl	8006b50 <__multadd>
 80067da:	4605      	mov	r5, r0
 80067dc:	e7f0      	b.n	80067c0 <_dtoa_r+0xac0>
 80067de:	9b08      	ldr	r3, [sp, #32]
 80067e0:	2700      	movs	r7, #0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	bfcc      	ite	gt
 80067e6:	461e      	movgt	r6, r3
 80067e8:	2601      	movle	r6, #1
 80067ea:	4456      	add	r6, sl
 80067ec:	4649      	mov	r1, r9
 80067ee:	2201      	movs	r2, #1
 80067f0:	4658      	mov	r0, fp
 80067f2:	f000 fb57 	bl	8006ea4 <__lshift>
 80067f6:	4621      	mov	r1, r4
 80067f8:	4681      	mov	r9, r0
 80067fa:	f000 fbbf 	bl	8006f7c <__mcmp>
 80067fe:	2800      	cmp	r0, #0
 8006800:	dcb0      	bgt.n	8006764 <_dtoa_r+0xa64>
 8006802:	d102      	bne.n	800680a <_dtoa_r+0xb0a>
 8006804:	f018 0f01 	tst.w	r8, #1
 8006808:	d1ac      	bne.n	8006764 <_dtoa_r+0xa64>
 800680a:	4633      	mov	r3, r6
 800680c:	461e      	mov	r6, r3
 800680e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006812:	2a30      	cmp	r2, #48	@ 0x30
 8006814:	d0fa      	beq.n	800680c <_dtoa_r+0xb0c>
 8006816:	e5be      	b.n	8006396 <_dtoa_r+0x696>
 8006818:	459a      	cmp	sl, r3
 800681a:	d1a4      	bne.n	8006766 <_dtoa_r+0xa66>
 800681c:	9b04      	ldr	r3, [sp, #16]
 800681e:	3301      	adds	r3, #1
 8006820:	9304      	str	r3, [sp, #16]
 8006822:	2331      	movs	r3, #49	@ 0x31
 8006824:	f88a 3000 	strb.w	r3, [sl]
 8006828:	e5b5      	b.n	8006396 <_dtoa_r+0x696>
 800682a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800682c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800688c <_dtoa_r+0xb8c>
 8006830:	b11b      	cbz	r3, 800683a <_dtoa_r+0xb3a>
 8006832:	f10a 0308 	add.w	r3, sl, #8
 8006836:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006838:	6013      	str	r3, [r2, #0]
 800683a:	4650      	mov	r0, sl
 800683c:	b017      	add	sp, #92	@ 0x5c
 800683e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006842:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006844:	2b01      	cmp	r3, #1
 8006846:	f77f ae3d 	ble.w	80064c4 <_dtoa_r+0x7c4>
 800684a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800684c:	930a      	str	r3, [sp, #40]	@ 0x28
 800684e:	2001      	movs	r0, #1
 8006850:	e65b      	b.n	800650a <_dtoa_r+0x80a>
 8006852:	9b08      	ldr	r3, [sp, #32]
 8006854:	2b00      	cmp	r3, #0
 8006856:	f77f aed6 	ble.w	8006606 <_dtoa_r+0x906>
 800685a:	4656      	mov	r6, sl
 800685c:	4621      	mov	r1, r4
 800685e:	4648      	mov	r0, r9
 8006860:	f7ff f9c3 	bl	8005bea <quorem>
 8006864:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006868:	9b08      	ldr	r3, [sp, #32]
 800686a:	f806 8b01 	strb.w	r8, [r6], #1
 800686e:	eba6 020a 	sub.w	r2, r6, sl
 8006872:	4293      	cmp	r3, r2
 8006874:	ddb3      	ble.n	80067de <_dtoa_r+0xade>
 8006876:	4649      	mov	r1, r9
 8006878:	2300      	movs	r3, #0
 800687a:	220a      	movs	r2, #10
 800687c:	4658      	mov	r0, fp
 800687e:	f000 f967 	bl	8006b50 <__multadd>
 8006882:	4681      	mov	r9, r0
 8006884:	e7ea      	b.n	800685c <_dtoa_r+0xb5c>
 8006886:	bf00      	nop
 8006888:	0800821a 	.word	0x0800821a
 800688c:	0800819e 	.word	0x0800819e

08006890 <_free_r>:
 8006890:	b538      	push	{r3, r4, r5, lr}
 8006892:	4605      	mov	r5, r0
 8006894:	2900      	cmp	r1, #0
 8006896:	d040      	beq.n	800691a <_free_r+0x8a>
 8006898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800689c:	1f0c      	subs	r4, r1, #4
 800689e:	2b00      	cmp	r3, #0
 80068a0:	bfb8      	it	lt
 80068a2:	18e4      	addlt	r4, r4, r3
 80068a4:	f000 f8e6 	bl	8006a74 <__malloc_lock>
 80068a8:	4a1c      	ldr	r2, [pc, #112]	@ (800691c <_free_r+0x8c>)
 80068aa:	6813      	ldr	r3, [r2, #0]
 80068ac:	b933      	cbnz	r3, 80068bc <_free_r+0x2c>
 80068ae:	6063      	str	r3, [r4, #4]
 80068b0:	6014      	str	r4, [r2, #0]
 80068b2:	4628      	mov	r0, r5
 80068b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068b8:	f000 b8e2 	b.w	8006a80 <__malloc_unlock>
 80068bc:	42a3      	cmp	r3, r4
 80068be:	d908      	bls.n	80068d2 <_free_r+0x42>
 80068c0:	6820      	ldr	r0, [r4, #0]
 80068c2:	1821      	adds	r1, r4, r0
 80068c4:	428b      	cmp	r3, r1
 80068c6:	bf01      	itttt	eq
 80068c8:	6819      	ldreq	r1, [r3, #0]
 80068ca:	685b      	ldreq	r3, [r3, #4]
 80068cc:	1809      	addeq	r1, r1, r0
 80068ce:	6021      	streq	r1, [r4, #0]
 80068d0:	e7ed      	b.n	80068ae <_free_r+0x1e>
 80068d2:	461a      	mov	r2, r3
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	b10b      	cbz	r3, 80068dc <_free_r+0x4c>
 80068d8:	42a3      	cmp	r3, r4
 80068da:	d9fa      	bls.n	80068d2 <_free_r+0x42>
 80068dc:	6811      	ldr	r1, [r2, #0]
 80068de:	1850      	adds	r0, r2, r1
 80068e0:	42a0      	cmp	r0, r4
 80068e2:	d10b      	bne.n	80068fc <_free_r+0x6c>
 80068e4:	6820      	ldr	r0, [r4, #0]
 80068e6:	4401      	add	r1, r0
 80068e8:	1850      	adds	r0, r2, r1
 80068ea:	4283      	cmp	r3, r0
 80068ec:	6011      	str	r1, [r2, #0]
 80068ee:	d1e0      	bne.n	80068b2 <_free_r+0x22>
 80068f0:	6818      	ldr	r0, [r3, #0]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	4408      	add	r0, r1
 80068f6:	6010      	str	r0, [r2, #0]
 80068f8:	6053      	str	r3, [r2, #4]
 80068fa:	e7da      	b.n	80068b2 <_free_r+0x22>
 80068fc:	d902      	bls.n	8006904 <_free_r+0x74>
 80068fe:	230c      	movs	r3, #12
 8006900:	602b      	str	r3, [r5, #0]
 8006902:	e7d6      	b.n	80068b2 <_free_r+0x22>
 8006904:	6820      	ldr	r0, [r4, #0]
 8006906:	1821      	adds	r1, r4, r0
 8006908:	428b      	cmp	r3, r1
 800690a:	bf01      	itttt	eq
 800690c:	6819      	ldreq	r1, [r3, #0]
 800690e:	685b      	ldreq	r3, [r3, #4]
 8006910:	1809      	addeq	r1, r1, r0
 8006912:	6021      	streq	r1, [r4, #0]
 8006914:	6063      	str	r3, [r4, #4]
 8006916:	6054      	str	r4, [r2, #4]
 8006918:	e7cb      	b.n	80068b2 <_free_r+0x22>
 800691a:	bd38      	pop	{r3, r4, r5, pc}
 800691c:	200008c0 	.word	0x200008c0

08006920 <malloc>:
 8006920:	4b02      	ldr	r3, [pc, #8]	@ (800692c <malloc+0xc>)
 8006922:	4601      	mov	r1, r0
 8006924:	6818      	ldr	r0, [r3, #0]
 8006926:	f000 b825 	b.w	8006974 <_malloc_r>
 800692a:	bf00      	nop
 800692c:	20000018 	.word	0x20000018

08006930 <sbrk_aligned>:
 8006930:	b570      	push	{r4, r5, r6, lr}
 8006932:	4e0f      	ldr	r6, [pc, #60]	@ (8006970 <sbrk_aligned+0x40>)
 8006934:	460c      	mov	r4, r1
 8006936:	6831      	ldr	r1, [r6, #0]
 8006938:	4605      	mov	r5, r0
 800693a:	b911      	cbnz	r1, 8006942 <sbrk_aligned+0x12>
 800693c:	f000 fcce 	bl	80072dc <_sbrk_r>
 8006940:	6030      	str	r0, [r6, #0]
 8006942:	4621      	mov	r1, r4
 8006944:	4628      	mov	r0, r5
 8006946:	f000 fcc9 	bl	80072dc <_sbrk_r>
 800694a:	1c43      	adds	r3, r0, #1
 800694c:	d103      	bne.n	8006956 <sbrk_aligned+0x26>
 800694e:	f04f 34ff 	mov.w	r4, #4294967295
 8006952:	4620      	mov	r0, r4
 8006954:	bd70      	pop	{r4, r5, r6, pc}
 8006956:	1cc4      	adds	r4, r0, #3
 8006958:	f024 0403 	bic.w	r4, r4, #3
 800695c:	42a0      	cmp	r0, r4
 800695e:	d0f8      	beq.n	8006952 <sbrk_aligned+0x22>
 8006960:	1a21      	subs	r1, r4, r0
 8006962:	4628      	mov	r0, r5
 8006964:	f000 fcba 	bl	80072dc <_sbrk_r>
 8006968:	3001      	adds	r0, #1
 800696a:	d1f2      	bne.n	8006952 <sbrk_aligned+0x22>
 800696c:	e7ef      	b.n	800694e <sbrk_aligned+0x1e>
 800696e:	bf00      	nop
 8006970:	200008bc 	.word	0x200008bc

08006974 <_malloc_r>:
 8006974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006978:	1ccd      	adds	r5, r1, #3
 800697a:	f025 0503 	bic.w	r5, r5, #3
 800697e:	3508      	adds	r5, #8
 8006980:	2d0c      	cmp	r5, #12
 8006982:	bf38      	it	cc
 8006984:	250c      	movcc	r5, #12
 8006986:	2d00      	cmp	r5, #0
 8006988:	4606      	mov	r6, r0
 800698a:	db01      	blt.n	8006990 <_malloc_r+0x1c>
 800698c:	42a9      	cmp	r1, r5
 800698e:	d904      	bls.n	800699a <_malloc_r+0x26>
 8006990:	230c      	movs	r3, #12
 8006992:	6033      	str	r3, [r6, #0]
 8006994:	2000      	movs	r0, #0
 8006996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800699a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a70 <_malloc_r+0xfc>
 800699e:	f000 f869 	bl	8006a74 <__malloc_lock>
 80069a2:	f8d8 3000 	ldr.w	r3, [r8]
 80069a6:	461c      	mov	r4, r3
 80069a8:	bb44      	cbnz	r4, 80069fc <_malloc_r+0x88>
 80069aa:	4629      	mov	r1, r5
 80069ac:	4630      	mov	r0, r6
 80069ae:	f7ff ffbf 	bl	8006930 <sbrk_aligned>
 80069b2:	1c43      	adds	r3, r0, #1
 80069b4:	4604      	mov	r4, r0
 80069b6:	d158      	bne.n	8006a6a <_malloc_r+0xf6>
 80069b8:	f8d8 4000 	ldr.w	r4, [r8]
 80069bc:	4627      	mov	r7, r4
 80069be:	2f00      	cmp	r7, #0
 80069c0:	d143      	bne.n	8006a4a <_malloc_r+0xd6>
 80069c2:	2c00      	cmp	r4, #0
 80069c4:	d04b      	beq.n	8006a5e <_malloc_r+0xea>
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	4639      	mov	r1, r7
 80069ca:	4630      	mov	r0, r6
 80069cc:	eb04 0903 	add.w	r9, r4, r3
 80069d0:	f000 fc84 	bl	80072dc <_sbrk_r>
 80069d4:	4581      	cmp	r9, r0
 80069d6:	d142      	bne.n	8006a5e <_malloc_r+0xea>
 80069d8:	6821      	ldr	r1, [r4, #0]
 80069da:	4630      	mov	r0, r6
 80069dc:	1a6d      	subs	r5, r5, r1
 80069de:	4629      	mov	r1, r5
 80069e0:	f7ff ffa6 	bl	8006930 <sbrk_aligned>
 80069e4:	3001      	adds	r0, #1
 80069e6:	d03a      	beq.n	8006a5e <_malloc_r+0xea>
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	442b      	add	r3, r5
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	f8d8 3000 	ldr.w	r3, [r8]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	bb62      	cbnz	r2, 8006a50 <_malloc_r+0xdc>
 80069f6:	f8c8 7000 	str.w	r7, [r8]
 80069fa:	e00f      	b.n	8006a1c <_malloc_r+0xa8>
 80069fc:	6822      	ldr	r2, [r4, #0]
 80069fe:	1b52      	subs	r2, r2, r5
 8006a00:	d420      	bmi.n	8006a44 <_malloc_r+0xd0>
 8006a02:	2a0b      	cmp	r2, #11
 8006a04:	d917      	bls.n	8006a36 <_malloc_r+0xc2>
 8006a06:	1961      	adds	r1, r4, r5
 8006a08:	42a3      	cmp	r3, r4
 8006a0a:	6025      	str	r5, [r4, #0]
 8006a0c:	bf18      	it	ne
 8006a0e:	6059      	strne	r1, [r3, #4]
 8006a10:	6863      	ldr	r3, [r4, #4]
 8006a12:	bf08      	it	eq
 8006a14:	f8c8 1000 	streq.w	r1, [r8]
 8006a18:	5162      	str	r2, [r4, r5]
 8006a1a:	604b      	str	r3, [r1, #4]
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	f000 f82f 	bl	8006a80 <__malloc_unlock>
 8006a22:	f104 000b 	add.w	r0, r4, #11
 8006a26:	1d23      	adds	r3, r4, #4
 8006a28:	f020 0007 	bic.w	r0, r0, #7
 8006a2c:	1ac2      	subs	r2, r0, r3
 8006a2e:	bf1c      	itt	ne
 8006a30:	1a1b      	subne	r3, r3, r0
 8006a32:	50a3      	strne	r3, [r4, r2]
 8006a34:	e7af      	b.n	8006996 <_malloc_r+0x22>
 8006a36:	6862      	ldr	r2, [r4, #4]
 8006a38:	42a3      	cmp	r3, r4
 8006a3a:	bf0c      	ite	eq
 8006a3c:	f8c8 2000 	streq.w	r2, [r8]
 8006a40:	605a      	strne	r2, [r3, #4]
 8006a42:	e7eb      	b.n	8006a1c <_malloc_r+0xa8>
 8006a44:	4623      	mov	r3, r4
 8006a46:	6864      	ldr	r4, [r4, #4]
 8006a48:	e7ae      	b.n	80069a8 <_malloc_r+0x34>
 8006a4a:	463c      	mov	r4, r7
 8006a4c:	687f      	ldr	r7, [r7, #4]
 8006a4e:	e7b6      	b.n	80069be <_malloc_r+0x4a>
 8006a50:	461a      	mov	r2, r3
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	42a3      	cmp	r3, r4
 8006a56:	d1fb      	bne.n	8006a50 <_malloc_r+0xdc>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	6053      	str	r3, [r2, #4]
 8006a5c:	e7de      	b.n	8006a1c <_malloc_r+0xa8>
 8006a5e:	230c      	movs	r3, #12
 8006a60:	4630      	mov	r0, r6
 8006a62:	6033      	str	r3, [r6, #0]
 8006a64:	f000 f80c 	bl	8006a80 <__malloc_unlock>
 8006a68:	e794      	b.n	8006994 <_malloc_r+0x20>
 8006a6a:	6005      	str	r5, [r0, #0]
 8006a6c:	e7d6      	b.n	8006a1c <_malloc_r+0xa8>
 8006a6e:	bf00      	nop
 8006a70:	200008c0 	.word	0x200008c0

08006a74 <__malloc_lock>:
 8006a74:	4801      	ldr	r0, [pc, #4]	@ (8006a7c <__malloc_lock+0x8>)
 8006a76:	f7ff b8a8 	b.w	8005bca <__retarget_lock_acquire_recursive>
 8006a7a:	bf00      	nop
 8006a7c:	200008b8 	.word	0x200008b8

08006a80 <__malloc_unlock>:
 8006a80:	4801      	ldr	r0, [pc, #4]	@ (8006a88 <__malloc_unlock+0x8>)
 8006a82:	f7ff b8a3 	b.w	8005bcc <__retarget_lock_release_recursive>
 8006a86:	bf00      	nop
 8006a88:	200008b8 	.word	0x200008b8

08006a8c <_Balloc>:
 8006a8c:	b570      	push	{r4, r5, r6, lr}
 8006a8e:	69c6      	ldr	r6, [r0, #28]
 8006a90:	4604      	mov	r4, r0
 8006a92:	460d      	mov	r5, r1
 8006a94:	b976      	cbnz	r6, 8006ab4 <_Balloc+0x28>
 8006a96:	2010      	movs	r0, #16
 8006a98:	f7ff ff42 	bl	8006920 <malloc>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	61e0      	str	r0, [r4, #28]
 8006aa0:	b920      	cbnz	r0, 8006aac <_Balloc+0x20>
 8006aa2:	216b      	movs	r1, #107	@ 0x6b
 8006aa4:	4b17      	ldr	r3, [pc, #92]	@ (8006b04 <_Balloc+0x78>)
 8006aa6:	4818      	ldr	r0, [pc, #96]	@ (8006b08 <_Balloc+0x7c>)
 8006aa8:	f000 fc36 	bl	8007318 <__assert_func>
 8006aac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ab0:	6006      	str	r6, [r0, #0]
 8006ab2:	60c6      	str	r6, [r0, #12]
 8006ab4:	69e6      	ldr	r6, [r4, #28]
 8006ab6:	68f3      	ldr	r3, [r6, #12]
 8006ab8:	b183      	cbz	r3, 8006adc <_Balloc+0x50>
 8006aba:	69e3      	ldr	r3, [r4, #28]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ac2:	b9b8      	cbnz	r0, 8006af4 <_Balloc+0x68>
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	fa01 f605 	lsl.w	r6, r1, r5
 8006aca:	1d72      	adds	r2, r6, #5
 8006acc:	4620      	mov	r0, r4
 8006ace:	0092      	lsls	r2, r2, #2
 8006ad0:	f000 fc40 	bl	8007354 <_calloc_r>
 8006ad4:	b160      	cbz	r0, 8006af0 <_Balloc+0x64>
 8006ad6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ada:	e00e      	b.n	8006afa <_Balloc+0x6e>
 8006adc:	2221      	movs	r2, #33	@ 0x21
 8006ade:	2104      	movs	r1, #4
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	f000 fc37 	bl	8007354 <_calloc_r>
 8006ae6:	69e3      	ldr	r3, [r4, #28]
 8006ae8:	60f0      	str	r0, [r6, #12]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1e4      	bne.n	8006aba <_Balloc+0x2e>
 8006af0:	2000      	movs	r0, #0
 8006af2:	bd70      	pop	{r4, r5, r6, pc}
 8006af4:	6802      	ldr	r2, [r0, #0]
 8006af6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006afa:	2300      	movs	r3, #0
 8006afc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b00:	e7f7      	b.n	8006af2 <_Balloc+0x66>
 8006b02:	bf00      	nop
 8006b04:	080081ab 	.word	0x080081ab
 8006b08:	0800822b 	.word	0x0800822b

08006b0c <_Bfree>:
 8006b0c:	b570      	push	{r4, r5, r6, lr}
 8006b0e:	69c6      	ldr	r6, [r0, #28]
 8006b10:	4605      	mov	r5, r0
 8006b12:	460c      	mov	r4, r1
 8006b14:	b976      	cbnz	r6, 8006b34 <_Bfree+0x28>
 8006b16:	2010      	movs	r0, #16
 8006b18:	f7ff ff02 	bl	8006920 <malloc>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	61e8      	str	r0, [r5, #28]
 8006b20:	b920      	cbnz	r0, 8006b2c <_Bfree+0x20>
 8006b22:	218f      	movs	r1, #143	@ 0x8f
 8006b24:	4b08      	ldr	r3, [pc, #32]	@ (8006b48 <_Bfree+0x3c>)
 8006b26:	4809      	ldr	r0, [pc, #36]	@ (8006b4c <_Bfree+0x40>)
 8006b28:	f000 fbf6 	bl	8007318 <__assert_func>
 8006b2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b30:	6006      	str	r6, [r0, #0]
 8006b32:	60c6      	str	r6, [r0, #12]
 8006b34:	b13c      	cbz	r4, 8006b46 <_Bfree+0x3a>
 8006b36:	69eb      	ldr	r3, [r5, #28]
 8006b38:	6862      	ldr	r2, [r4, #4]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b40:	6021      	str	r1, [r4, #0]
 8006b42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b46:	bd70      	pop	{r4, r5, r6, pc}
 8006b48:	080081ab 	.word	0x080081ab
 8006b4c:	0800822b 	.word	0x0800822b

08006b50 <__multadd>:
 8006b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b54:	4607      	mov	r7, r0
 8006b56:	460c      	mov	r4, r1
 8006b58:	461e      	mov	r6, r3
 8006b5a:	2000      	movs	r0, #0
 8006b5c:	690d      	ldr	r5, [r1, #16]
 8006b5e:	f101 0c14 	add.w	ip, r1, #20
 8006b62:	f8dc 3000 	ldr.w	r3, [ip]
 8006b66:	3001      	adds	r0, #1
 8006b68:	b299      	uxth	r1, r3
 8006b6a:	fb02 6101 	mla	r1, r2, r1, r6
 8006b6e:	0c1e      	lsrs	r6, r3, #16
 8006b70:	0c0b      	lsrs	r3, r1, #16
 8006b72:	fb02 3306 	mla	r3, r2, r6, r3
 8006b76:	b289      	uxth	r1, r1
 8006b78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006b7c:	4285      	cmp	r5, r0
 8006b7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b82:	f84c 1b04 	str.w	r1, [ip], #4
 8006b86:	dcec      	bgt.n	8006b62 <__multadd+0x12>
 8006b88:	b30e      	cbz	r6, 8006bce <__multadd+0x7e>
 8006b8a:	68a3      	ldr	r3, [r4, #8]
 8006b8c:	42ab      	cmp	r3, r5
 8006b8e:	dc19      	bgt.n	8006bc4 <__multadd+0x74>
 8006b90:	6861      	ldr	r1, [r4, #4]
 8006b92:	4638      	mov	r0, r7
 8006b94:	3101      	adds	r1, #1
 8006b96:	f7ff ff79 	bl	8006a8c <_Balloc>
 8006b9a:	4680      	mov	r8, r0
 8006b9c:	b928      	cbnz	r0, 8006baa <__multadd+0x5a>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	21ba      	movs	r1, #186	@ 0xba
 8006ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8006bd4 <__multadd+0x84>)
 8006ba4:	480c      	ldr	r0, [pc, #48]	@ (8006bd8 <__multadd+0x88>)
 8006ba6:	f000 fbb7 	bl	8007318 <__assert_func>
 8006baa:	6922      	ldr	r2, [r4, #16]
 8006bac:	f104 010c 	add.w	r1, r4, #12
 8006bb0:	3202      	adds	r2, #2
 8006bb2:	0092      	lsls	r2, r2, #2
 8006bb4:	300c      	adds	r0, #12
 8006bb6:	f000 fba1 	bl	80072fc <memcpy>
 8006bba:	4621      	mov	r1, r4
 8006bbc:	4638      	mov	r0, r7
 8006bbe:	f7ff ffa5 	bl	8006b0c <_Bfree>
 8006bc2:	4644      	mov	r4, r8
 8006bc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006bc8:	3501      	adds	r5, #1
 8006bca:	615e      	str	r6, [r3, #20]
 8006bcc:	6125      	str	r5, [r4, #16]
 8006bce:	4620      	mov	r0, r4
 8006bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bd4:	0800821a 	.word	0x0800821a
 8006bd8:	0800822b 	.word	0x0800822b

08006bdc <__hi0bits>:
 8006bdc:	4603      	mov	r3, r0
 8006bde:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006be2:	bf3a      	itte	cc
 8006be4:	0403      	lslcc	r3, r0, #16
 8006be6:	2010      	movcc	r0, #16
 8006be8:	2000      	movcs	r0, #0
 8006bea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006bee:	bf3c      	itt	cc
 8006bf0:	021b      	lslcc	r3, r3, #8
 8006bf2:	3008      	addcc	r0, #8
 8006bf4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bf8:	bf3c      	itt	cc
 8006bfa:	011b      	lslcc	r3, r3, #4
 8006bfc:	3004      	addcc	r0, #4
 8006bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c02:	bf3c      	itt	cc
 8006c04:	009b      	lslcc	r3, r3, #2
 8006c06:	3002      	addcc	r0, #2
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	db05      	blt.n	8006c18 <__hi0bits+0x3c>
 8006c0c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006c10:	f100 0001 	add.w	r0, r0, #1
 8006c14:	bf08      	it	eq
 8006c16:	2020      	moveq	r0, #32
 8006c18:	4770      	bx	lr

08006c1a <__lo0bits>:
 8006c1a:	6803      	ldr	r3, [r0, #0]
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	f013 0007 	ands.w	r0, r3, #7
 8006c22:	d00b      	beq.n	8006c3c <__lo0bits+0x22>
 8006c24:	07d9      	lsls	r1, r3, #31
 8006c26:	d421      	bmi.n	8006c6c <__lo0bits+0x52>
 8006c28:	0798      	lsls	r0, r3, #30
 8006c2a:	bf49      	itett	mi
 8006c2c:	085b      	lsrmi	r3, r3, #1
 8006c2e:	089b      	lsrpl	r3, r3, #2
 8006c30:	2001      	movmi	r0, #1
 8006c32:	6013      	strmi	r3, [r2, #0]
 8006c34:	bf5c      	itt	pl
 8006c36:	2002      	movpl	r0, #2
 8006c38:	6013      	strpl	r3, [r2, #0]
 8006c3a:	4770      	bx	lr
 8006c3c:	b299      	uxth	r1, r3
 8006c3e:	b909      	cbnz	r1, 8006c44 <__lo0bits+0x2a>
 8006c40:	2010      	movs	r0, #16
 8006c42:	0c1b      	lsrs	r3, r3, #16
 8006c44:	b2d9      	uxtb	r1, r3
 8006c46:	b909      	cbnz	r1, 8006c4c <__lo0bits+0x32>
 8006c48:	3008      	adds	r0, #8
 8006c4a:	0a1b      	lsrs	r3, r3, #8
 8006c4c:	0719      	lsls	r1, r3, #28
 8006c4e:	bf04      	itt	eq
 8006c50:	091b      	lsreq	r3, r3, #4
 8006c52:	3004      	addeq	r0, #4
 8006c54:	0799      	lsls	r1, r3, #30
 8006c56:	bf04      	itt	eq
 8006c58:	089b      	lsreq	r3, r3, #2
 8006c5a:	3002      	addeq	r0, #2
 8006c5c:	07d9      	lsls	r1, r3, #31
 8006c5e:	d403      	bmi.n	8006c68 <__lo0bits+0x4e>
 8006c60:	085b      	lsrs	r3, r3, #1
 8006c62:	f100 0001 	add.w	r0, r0, #1
 8006c66:	d003      	beq.n	8006c70 <__lo0bits+0x56>
 8006c68:	6013      	str	r3, [r2, #0]
 8006c6a:	4770      	bx	lr
 8006c6c:	2000      	movs	r0, #0
 8006c6e:	4770      	bx	lr
 8006c70:	2020      	movs	r0, #32
 8006c72:	4770      	bx	lr

08006c74 <__i2b>:
 8006c74:	b510      	push	{r4, lr}
 8006c76:	460c      	mov	r4, r1
 8006c78:	2101      	movs	r1, #1
 8006c7a:	f7ff ff07 	bl	8006a8c <_Balloc>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	b928      	cbnz	r0, 8006c8e <__i2b+0x1a>
 8006c82:	f240 1145 	movw	r1, #325	@ 0x145
 8006c86:	4b04      	ldr	r3, [pc, #16]	@ (8006c98 <__i2b+0x24>)
 8006c88:	4804      	ldr	r0, [pc, #16]	@ (8006c9c <__i2b+0x28>)
 8006c8a:	f000 fb45 	bl	8007318 <__assert_func>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	6144      	str	r4, [r0, #20]
 8006c92:	6103      	str	r3, [r0, #16]
 8006c94:	bd10      	pop	{r4, pc}
 8006c96:	bf00      	nop
 8006c98:	0800821a 	.word	0x0800821a
 8006c9c:	0800822b 	.word	0x0800822b

08006ca0 <__multiply>:
 8006ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca4:	4614      	mov	r4, r2
 8006ca6:	690a      	ldr	r2, [r1, #16]
 8006ca8:	6923      	ldr	r3, [r4, #16]
 8006caa:	460f      	mov	r7, r1
 8006cac:	429a      	cmp	r2, r3
 8006cae:	bfa2      	ittt	ge
 8006cb0:	4623      	movge	r3, r4
 8006cb2:	460c      	movge	r4, r1
 8006cb4:	461f      	movge	r7, r3
 8006cb6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006cba:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006cbe:	68a3      	ldr	r3, [r4, #8]
 8006cc0:	6861      	ldr	r1, [r4, #4]
 8006cc2:	eb0a 0609 	add.w	r6, sl, r9
 8006cc6:	42b3      	cmp	r3, r6
 8006cc8:	b085      	sub	sp, #20
 8006cca:	bfb8      	it	lt
 8006ccc:	3101      	addlt	r1, #1
 8006cce:	f7ff fedd 	bl	8006a8c <_Balloc>
 8006cd2:	b930      	cbnz	r0, 8006ce2 <__multiply+0x42>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006cda:	4b43      	ldr	r3, [pc, #268]	@ (8006de8 <__multiply+0x148>)
 8006cdc:	4843      	ldr	r0, [pc, #268]	@ (8006dec <__multiply+0x14c>)
 8006cde:	f000 fb1b 	bl	8007318 <__assert_func>
 8006ce2:	f100 0514 	add.w	r5, r0, #20
 8006ce6:	462b      	mov	r3, r5
 8006ce8:	2200      	movs	r2, #0
 8006cea:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006cee:	4543      	cmp	r3, r8
 8006cf0:	d321      	bcc.n	8006d36 <__multiply+0x96>
 8006cf2:	f107 0114 	add.w	r1, r7, #20
 8006cf6:	f104 0214 	add.w	r2, r4, #20
 8006cfa:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006cfe:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006d02:	9302      	str	r3, [sp, #8]
 8006d04:	1b13      	subs	r3, r2, r4
 8006d06:	3b15      	subs	r3, #21
 8006d08:	f023 0303 	bic.w	r3, r3, #3
 8006d0c:	3304      	adds	r3, #4
 8006d0e:	f104 0715 	add.w	r7, r4, #21
 8006d12:	42ba      	cmp	r2, r7
 8006d14:	bf38      	it	cc
 8006d16:	2304      	movcc	r3, #4
 8006d18:	9301      	str	r3, [sp, #4]
 8006d1a:	9b02      	ldr	r3, [sp, #8]
 8006d1c:	9103      	str	r1, [sp, #12]
 8006d1e:	428b      	cmp	r3, r1
 8006d20:	d80c      	bhi.n	8006d3c <__multiply+0x9c>
 8006d22:	2e00      	cmp	r6, #0
 8006d24:	dd03      	ble.n	8006d2e <__multiply+0x8e>
 8006d26:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d05a      	beq.n	8006de4 <__multiply+0x144>
 8006d2e:	6106      	str	r6, [r0, #16]
 8006d30:	b005      	add	sp, #20
 8006d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d36:	f843 2b04 	str.w	r2, [r3], #4
 8006d3a:	e7d8      	b.n	8006cee <__multiply+0x4e>
 8006d3c:	f8b1 a000 	ldrh.w	sl, [r1]
 8006d40:	f1ba 0f00 	cmp.w	sl, #0
 8006d44:	d023      	beq.n	8006d8e <__multiply+0xee>
 8006d46:	46a9      	mov	r9, r5
 8006d48:	f04f 0c00 	mov.w	ip, #0
 8006d4c:	f104 0e14 	add.w	lr, r4, #20
 8006d50:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006d54:	f8d9 3000 	ldr.w	r3, [r9]
 8006d58:	fa1f fb87 	uxth.w	fp, r7
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	fb0a 330b 	mla	r3, sl, fp, r3
 8006d62:	4463      	add	r3, ip
 8006d64:	f8d9 c000 	ldr.w	ip, [r9]
 8006d68:	0c3f      	lsrs	r7, r7, #16
 8006d6a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006d6e:	fb0a c707 	mla	r7, sl, r7, ip
 8006d72:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006d7c:	4572      	cmp	r2, lr
 8006d7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006d82:	f849 3b04 	str.w	r3, [r9], #4
 8006d86:	d8e3      	bhi.n	8006d50 <__multiply+0xb0>
 8006d88:	9b01      	ldr	r3, [sp, #4]
 8006d8a:	f845 c003 	str.w	ip, [r5, r3]
 8006d8e:	9b03      	ldr	r3, [sp, #12]
 8006d90:	3104      	adds	r1, #4
 8006d92:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006d96:	f1b9 0f00 	cmp.w	r9, #0
 8006d9a:	d021      	beq.n	8006de0 <__multiply+0x140>
 8006d9c:	46ae      	mov	lr, r5
 8006d9e:	f04f 0a00 	mov.w	sl, #0
 8006da2:	682b      	ldr	r3, [r5, #0]
 8006da4:	f104 0c14 	add.w	ip, r4, #20
 8006da8:	f8bc b000 	ldrh.w	fp, [ip]
 8006dac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	fb09 770b 	mla	r7, r9, fp, r7
 8006db6:	4457      	add	r7, sl
 8006db8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006dbc:	f84e 3b04 	str.w	r3, [lr], #4
 8006dc0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006dc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006dc8:	f8be 3000 	ldrh.w	r3, [lr]
 8006dcc:	4562      	cmp	r2, ip
 8006dce:	fb09 330a 	mla	r3, r9, sl, r3
 8006dd2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006dd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006dda:	d8e5      	bhi.n	8006da8 <__multiply+0x108>
 8006ddc:	9f01      	ldr	r7, [sp, #4]
 8006dde:	51eb      	str	r3, [r5, r7]
 8006de0:	3504      	adds	r5, #4
 8006de2:	e79a      	b.n	8006d1a <__multiply+0x7a>
 8006de4:	3e01      	subs	r6, #1
 8006de6:	e79c      	b.n	8006d22 <__multiply+0x82>
 8006de8:	0800821a 	.word	0x0800821a
 8006dec:	0800822b 	.word	0x0800822b

08006df0 <__pow5mult>:
 8006df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006df4:	4615      	mov	r5, r2
 8006df6:	f012 0203 	ands.w	r2, r2, #3
 8006dfa:	4607      	mov	r7, r0
 8006dfc:	460e      	mov	r6, r1
 8006dfe:	d007      	beq.n	8006e10 <__pow5mult+0x20>
 8006e00:	4c25      	ldr	r4, [pc, #148]	@ (8006e98 <__pow5mult+0xa8>)
 8006e02:	3a01      	subs	r2, #1
 8006e04:	2300      	movs	r3, #0
 8006e06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e0a:	f7ff fea1 	bl	8006b50 <__multadd>
 8006e0e:	4606      	mov	r6, r0
 8006e10:	10ad      	asrs	r5, r5, #2
 8006e12:	d03d      	beq.n	8006e90 <__pow5mult+0xa0>
 8006e14:	69fc      	ldr	r4, [r7, #28]
 8006e16:	b97c      	cbnz	r4, 8006e38 <__pow5mult+0x48>
 8006e18:	2010      	movs	r0, #16
 8006e1a:	f7ff fd81 	bl	8006920 <malloc>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	61f8      	str	r0, [r7, #28]
 8006e22:	b928      	cbnz	r0, 8006e30 <__pow5mult+0x40>
 8006e24:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006e28:	4b1c      	ldr	r3, [pc, #112]	@ (8006e9c <__pow5mult+0xac>)
 8006e2a:	481d      	ldr	r0, [pc, #116]	@ (8006ea0 <__pow5mult+0xb0>)
 8006e2c:	f000 fa74 	bl	8007318 <__assert_func>
 8006e30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e34:	6004      	str	r4, [r0, #0]
 8006e36:	60c4      	str	r4, [r0, #12]
 8006e38:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006e3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e40:	b94c      	cbnz	r4, 8006e56 <__pow5mult+0x66>
 8006e42:	f240 2171 	movw	r1, #625	@ 0x271
 8006e46:	4638      	mov	r0, r7
 8006e48:	f7ff ff14 	bl	8006c74 <__i2b>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	4604      	mov	r4, r0
 8006e50:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e54:	6003      	str	r3, [r0, #0]
 8006e56:	f04f 0900 	mov.w	r9, #0
 8006e5a:	07eb      	lsls	r3, r5, #31
 8006e5c:	d50a      	bpl.n	8006e74 <__pow5mult+0x84>
 8006e5e:	4631      	mov	r1, r6
 8006e60:	4622      	mov	r2, r4
 8006e62:	4638      	mov	r0, r7
 8006e64:	f7ff ff1c 	bl	8006ca0 <__multiply>
 8006e68:	4680      	mov	r8, r0
 8006e6a:	4631      	mov	r1, r6
 8006e6c:	4638      	mov	r0, r7
 8006e6e:	f7ff fe4d 	bl	8006b0c <_Bfree>
 8006e72:	4646      	mov	r6, r8
 8006e74:	106d      	asrs	r5, r5, #1
 8006e76:	d00b      	beq.n	8006e90 <__pow5mult+0xa0>
 8006e78:	6820      	ldr	r0, [r4, #0]
 8006e7a:	b938      	cbnz	r0, 8006e8c <__pow5mult+0x9c>
 8006e7c:	4622      	mov	r2, r4
 8006e7e:	4621      	mov	r1, r4
 8006e80:	4638      	mov	r0, r7
 8006e82:	f7ff ff0d 	bl	8006ca0 <__multiply>
 8006e86:	6020      	str	r0, [r4, #0]
 8006e88:	f8c0 9000 	str.w	r9, [r0]
 8006e8c:	4604      	mov	r4, r0
 8006e8e:	e7e4      	b.n	8006e5a <__pow5mult+0x6a>
 8006e90:	4630      	mov	r0, r6
 8006e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e96:	bf00      	nop
 8006e98:	08008284 	.word	0x08008284
 8006e9c:	080081ab 	.word	0x080081ab
 8006ea0:	0800822b 	.word	0x0800822b

08006ea4 <__lshift>:
 8006ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ea8:	460c      	mov	r4, r1
 8006eaa:	4607      	mov	r7, r0
 8006eac:	4691      	mov	r9, r2
 8006eae:	6923      	ldr	r3, [r4, #16]
 8006eb0:	6849      	ldr	r1, [r1, #4]
 8006eb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006eb6:	68a3      	ldr	r3, [r4, #8]
 8006eb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ebc:	f108 0601 	add.w	r6, r8, #1
 8006ec0:	42b3      	cmp	r3, r6
 8006ec2:	db0b      	blt.n	8006edc <__lshift+0x38>
 8006ec4:	4638      	mov	r0, r7
 8006ec6:	f7ff fde1 	bl	8006a8c <_Balloc>
 8006eca:	4605      	mov	r5, r0
 8006ecc:	b948      	cbnz	r0, 8006ee2 <__lshift+0x3e>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006ed4:	4b27      	ldr	r3, [pc, #156]	@ (8006f74 <__lshift+0xd0>)
 8006ed6:	4828      	ldr	r0, [pc, #160]	@ (8006f78 <__lshift+0xd4>)
 8006ed8:	f000 fa1e 	bl	8007318 <__assert_func>
 8006edc:	3101      	adds	r1, #1
 8006ede:	005b      	lsls	r3, r3, #1
 8006ee0:	e7ee      	b.n	8006ec0 <__lshift+0x1c>
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	f100 0114 	add.w	r1, r0, #20
 8006ee8:	f100 0210 	add.w	r2, r0, #16
 8006eec:	4618      	mov	r0, r3
 8006eee:	4553      	cmp	r3, sl
 8006ef0:	db33      	blt.n	8006f5a <__lshift+0xb6>
 8006ef2:	6920      	ldr	r0, [r4, #16]
 8006ef4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ef8:	f104 0314 	add.w	r3, r4, #20
 8006efc:	f019 091f 	ands.w	r9, r9, #31
 8006f00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006f08:	d02b      	beq.n	8006f62 <__lshift+0xbe>
 8006f0a:	468a      	mov	sl, r1
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f1c9 0e20 	rsb	lr, r9, #32
 8006f12:	6818      	ldr	r0, [r3, #0]
 8006f14:	fa00 f009 	lsl.w	r0, r0, r9
 8006f18:	4310      	orrs	r0, r2
 8006f1a:	f84a 0b04 	str.w	r0, [sl], #4
 8006f1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f22:	459c      	cmp	ip, r3
 8006f24:	fa22 f20e 	lsr.w	r2, r2, lr
 8006f28:	d8f3      	bhi.n	8006f12 <__lshift+0x6e>
 8006f2a:	ebac 0304 	sub.w	r3, ip, r4
 8006f2e:	3b15      	subs	r3, #21
 8006f30:	f023 0303 	bic.w	r3, r3, #3
 8006f34:	3304      	adds	r3, #4
 8006f36:	f104 0015 	add.w	r0, r4, #21
 8006f3a:	4584      	cmp	ip, r0
 8006f3c:	bf38      	it	cc
 8006f3e:	2304      	movcc	r3, #4
 8006f40:	50ca      	str	r2, [r1, r3]
 8006f42:	b10a      	cbz	r2, 8006f48 <__lshift+0xa4>
 8006f44:	f108 0602 	add.w	r6, r8, #2
 8006f48:	3e01      	subs	r6, #1
 8006f4a:	4638      	mov	r0, r7
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	612e      	str	r6, [r5, #16]
 8006f50:	f7ff fddc 	bl	8006b0c <_Bfree>
 8006f54:	4628      	mov	r0, r5
 8006f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f5e:	3301      	adds	r3, #1
 8006f60:	e7c5      	b.n	8006eee <__lshift+0x4a>
 8006f62:	3904      	subs	r1, #4
 8006f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f68:	459c      	cmp	ip, r3
 8006f6a:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f6e:	d8f9      	bhi.n	8006f64 <__lshift+0xc0>
 8006f70:	e7ea      	b.n	8006f48 <__lshift+0xa4>
 8006f72:	bf00      	nop
 8006f74:	0800821a 	.word	0x0800821a
 8006f78:	0800822b 	.word	0x0800822b

08006f7c <__mcmp>:
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	690a      	ldr	r2, [r1, #16]
 8006f80:	6900      	ldr	r0, [r0, #16]
 8006f82:	b530      	push	{r4, r5, lr}
 8006f84:	1a80      	subs	r0, r0, r2
 8006f86:	d10e      	bne.n	8006fa6 <__mcmp+0x2a>
 8006f88:	3314      	adds	r3, #20
 8006f8a:	3114      	adds	r1, #20
 8006f8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006f90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006f94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006f98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006f9c:	4295      	cmp	r5, r2
 8006f9e:	d003      	beq.n	8006fa8 <__mcmp+0x2c>
 8006fa0:	d205      	bcs.n	8006fae <__mcmp+0x32>
 8006fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa6:	bd30      	pop	{r4, r5, pc}
 8006fa8:	42a3      	cmp	r3, r4
 8006faa:	d3f3      	bcc.n	8006f94 <__mcmp+0x18>
 8006fac:	e7fb      	b.n	8006fa6 <__mcmp+0x2a>
 8006fae:	2001      	movs	r0, #1
 8006fb0:	e7f9      	b.n	8006fa6 <__mcmp+0x2a>
	...

08006fb4 <__mdiff>:
 8006fb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb8:	4689      	mov	r9, r1
 8006fba:	4606      	mov	r6, r0
 8006fbc:	4611      	mov	r1, r2
 8006fbe:	4648      	mov	r0, r9
 8006fc0:	4614      	mov	r4, r2
 8006fc2:	f7ff ffdb 	bl	8006f7c <__mcmp>
 8006fc6:	1e05      	subs	r5, r0, #0
 8006fc8:	d112      	bne.n	8006ff0 <__mdiff+0x3c>
 8006fca:	4629      	mov	r1, r5
 8006fcc:	4630      	mov	r0, r6
 8006fce:	f7ff fd5d 	bl	8006a8c <_Balloc>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	b928      	cbnz	r0, 8006fe2 <__mdiff+0x2e>
 8006fd6:	f240 2137 	movw	r1, #567	@ 0x237
 8006fda:	4b3e      	ldr	r3, [pc, #248]	@ (80070d4 <__mdiff+0x120>)
 8006fdc:	483e      	ldr	r0, [pc, #248]	@ (80070d8 <__mdiff+0x124>)
 8006fde:	f000 f99b 	bl	8007318 <__assert_func>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006fe8:	4610      	mov	r0, r2
 8006fea:	b003      	add	sp, #12
 8006fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ff0:	bfbc      	itt	lt
 8006ff2:	464b      	movlt	r3, r9
 8006ff4:	46a1      	movlt	r9, r4
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006ffc:	bfba      	itte	lt
 8006ffe:	461c      	movlt	r4, r3
 8007000:	2501      	movlt	r5, #1
 8007002:	2500      	movge	r5, #0
 8007004:	f7ff fd42 	bl	8006a8c <_Balloc>
 8007008:	4602      	mov	r2, r0
 800700a:	b918      	cbnz	r0, 8007014 <__mdiff+0x60>
 800700c:	f240 2145 	movw	r1, #581	@ 0x245
 8007010:	4b30      	ldr	r3, [pc, #192]	@ (80070d4 <__mdiff+0x120>)
 8007012:	e7e3      	b.n	8006fdc <__mdiff+0x28>
 8007014:	f100 0b14 	add.w	fp, r0, #20
 8007018:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800701c:	f109 0310 	add.w	r3, r9, #16
 8007020:	60c5      	str	r5, [r0, #12]
 8007022:	f04f 0c00 	mov.w	ip, #0
 8007026:	f109 0514 	add.w	r5, r9, #20
 800702a:	46d9      	mov	r9, fp
 800702c:	6926      	ldr	r6, [r4, #16]
 800702e:	f104 0e14 	add.w	lr, r4, #20
 8007032:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007036:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800703a:	9301      	str	r3, [sp, #4]
 800703c:	9b01      	ldr	r3, [sp, #4]
 800703e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007042:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007046:	b281      	uxth	r1, r0
 8007048:	9301      	str	r3, [sp, #4]
 800704a:	fa1f f38a 	uxth.w	r3, sl
 800704e:	1a5b      	subs	r3, r3, r1
 8007050:	0c00      	lsrs	r0, r0, #16
 8007052:	4463      	add	r3, ip
 8007054:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007058:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800705c:	b29b      	uxth	r3, r3
 800705e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007062:	4576      	cmp	r6, lr
 8007064:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007068:	f849 3b04 	str.w	r3, [r9], #4
 800706c:	d8e6      	bhi.n	800703c <__mdiff+0x88>
 800706e:	1b33      	subs	r3, r6, r4
 8007070:	3b15      	subs	r3, #21
 8007072:	f023 0303 	bic.w	r3, r3, #3
 8007076:	3415      	adds	r4, #21
 8007078:	3304      	adds	r3, #4
 800707a:	42a6      	cmp	r6, r4
 800707c:	bf38      	it	cc
 800707e:	2304      	movcc	r3, #4
 8007080:	441d      	add	r5, r3
 8007082:	445b      	add	r3, fp
 8007084:	461e      	mov	r6, r3
 8007086:	462c      	mov	r4, r5
 8007088:	4544      	cmp	r4, r8
 800708a:	d30e      	bcc.n	80070aa <__mdiff+0xf6>
 800708c:	f108 0103 	add.w	r1, r8, #3
 8007090:	1b49      	subs	r1, r1, r5
 8007092:	f021 0103 	bic.w	r1, r1, #3
 8007096:	3d03      	subs	r5, #3
 8007098:	45a8      	cmp	r8, r5
 800709a:	bf38      	it	cc
 800709c:	2100      	movcc	r1, #0
 800709e:	440b      	add	r3, r1
 80070a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80070a4:	b199      	cbz	r1, 80070ce <__mdiff+0x11a>
 80070a6:	6117      	str	r7, [r2, #16]
 80070a8:	e79e      	b.n	8006fe8 <__mdiff+0x34>
 80070aa:	46e6      	mov	lr, ip
 80070ac:	f854 1b04 	ldr.w	r1, [r4], #4
 80070b0:	fa1f fc81 	uxth.w	ip, r1
 80070b4:	44f4      	add	ip, lr
 80070b6:	0c08      	lsrs	r0, r1, #16
 80070b8:	4471      	add	r1, lr
 80070ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80070be:	b289      	uxth	r1, r1
 80070c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80070c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80070c8:	f846 1b04 	str.w	r1, [r6], #4
 80070cc:	e7dc      	b.n	8007088 <__mdiff+0xd4>
 80070ce:	3f01      	subs	r7, #1
 80070d0:	e7e6      	b.n	80070a0 <__mdiff+0xec>
 80070d2:	bf00      	nop
 80070d4:	0800821a 	.word	0x0800821a
 80070d8:	0800822b 	.word	0x0800822b

080070dc <__d2b>:
 80070dc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80070e0:	2101      	movs	r1, #1
 80070e2:	4690      	mov	r8, r2
 80070e4:	4699      	mov	r9, r3
 80070e6:	9e08      	ldr	r6, [sp, #32]
 80070e8:	f7ff fcd0 	bl	8006a8c <_Balloc>
 80070ec:	4604      	mov	r4, r0
 80070ee:	b930      	cbnz	r0, 80070fe <__d2b+0x22>
 80070f0:	4602      	mov	r2, r0
 80070f2:	f240 310f 	movw	r1, #783	@ 0x30f
 80070f6:	4b23      	ldr	r3, [pc, #140]	@ (8007184 <__d2b+0xa8>)
 80070f8:	4823      	ldr	r0, [pc, #140]	@ (8007188 <__d2b+0xac>)
 80070fa:	f000 f90d 	bl	8007318 <__assert_func>
 80070fe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007102:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007106:	b10d      	cbz	r5, 800710c <__d2b+0x30>
 8007108:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800710c:	9301      	str	r3, [sp, #4]
 800710e:	f1b8 0300 	subs.w	r3, r8, #0
 8007112:	d024      	beq.n	800715e <__d2b+0x82>
 8007114:	4668      	mov	r0, sp
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	f7ff fd7f 	bl	8006c1a <__lo0bits>
 800711c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007120:	b1d8      	cbz	r0, 800715a <__d2b+0x7e>
 8007122:	f1c0 0320 	rsb	r3, r0, #32
 8007126:	fa02 f303 	lsl.w	r3, r2, r3
 800712a:	430b      	orrs	r3, r1
 800712c:	40c2      	lsrs	r2, r0
 800712e:	6163      	str	r3, [r4, #20]
 8007130:	9201      	str	r2, [sp, #4]
 8007132:	9b01      	ldr	r3, [sp, #4]
 8007134:	2b00      	cmp	r3, #0
 8007136:	bf0c      	ite	eq
 8007138:	2201      	moveq	r2, #1
 800713a:	2202      	movne	r2, #2
 800713c:	61a3      	str	r3, [r4, #24]
 800713e:	6122      	str	r2, [r4, #16]
 8007140:	b1ad      	cbz	r5, 800716e <__d2b+0x92>
 8007142:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007146:	4405      	add	r5, r0
 8007148:	6035      	str	r5, [r6, #0]
 800714a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800714e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007150:	6018      	str	r0, [r3, #0]
 8007152:	4620      	mov	r0, r4
 8007154:	b002      	add	sp, #8
 8007156:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800715a:	6161      	str	r1, [r4, #20]
 800715c:	e7e9      	b.n	8007132 <__d2b+0x56>
 800715e:	a801      	add	r0, sp, #4
 8007160:	f7ff fd5b 	bl	8006c1a <__lo0bits>
 8007164:	9b01      	ldr	r3, [sp, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	6163      	str	r3, [r4, #20]
 800716a:	3020      	adds	r0, #32
 800716c:	e7e7      	b.n	800713e <__d2b+0x62>
 800716e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007172:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007176:	6030      	str	r0, [r6, #0]
 8007178:	6918      	ldr	r0, [r3, #16]
 800717a:	f7ff fd2f 	bl	8006bdc <__hi0bits>
 800717e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007182:	e7e4      	b.n	800714e <__d2b+0x72>
 8007184:	0800821a 	.word	0x0800821a
 8007188:	0800822b 	.word	0x0800822b

0800718c <__sflush_r>:
 800718c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007192:	0716      	lsls	r6, r2, #28
 8007194:	4605      	mov	r5, r0
 8007196:	460c      	mov	r4, r1
 8007198:	d454      	bmi.n	8007244 <__sflush_r+0xb8>
 800719a:	684b      	ldr	r3, [r1, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	dc02      	bgt.n	80071a6 <__sflush_r+0x1a>
 80071a0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	dd48      	ble.n	8007238 <__sflush_r+0xac>
 80071a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80071a8:	2e00      	cmp	r6, #0
 80071aa:	d045      	beq.n	8007238 <__sflush_r+0xac>
 80071ac:	2300      	movs	r3, #0
 80071ae:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80071b2:	682f      	ldr	r7, [r5, #0]
 80071b4:	6a21      	ldr	r1, [r4, #32]
 80071b6:	602b      	str	r3, [r5, #0]
 80071b8:	d030      	beq.n	800721c <__sflush_r+0x90>
 80071ba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80071bc:	89a3      	ldrh	r3, [r4, #12]
 80071be:	0759      	lsls	r1, r3, #29
 80071c0:	d505      	bpl.n	80071ce <__sflush_r+0x42>
 80071c2:	6863      	ldr	r3, [r4, #4]
 80071c4:	1ad2      	subs	r2, r2, r3
 80071c6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80071c8:	b10b      	cbz	r3, 80071ce <__sflush_r+0x42>
 80071ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80071cc:	1ad2      	subs	r2, r2, r3
 80071ce:	2300      	movs	r3, #0
 80071d0:	4628      	mov	r0, r5
 80071d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80071d4:	6a21      	ldr	r1, [r4, #32]
 80071d6:	47b0      	blx	r6
 80071d8:	1c43      	adds	r3, r0, #1
 80071da:	89a3      	ldrh	r3, [r4, #12]
 80071dc:	d106      	bne.n	80071ec <__sflush_r+0x60>
 80071de:	6829      	ldr	r1, [r5, #0]
 80071e0:	291d      	cmp	r1, #29
 80071e2:	d82b      	bhi.n	800723c <__sflush_r+0xb0>
 80071e4:	4a28      	ldr	r2, [pc, #160]	@ (8007288 <__sflush_r+0xfc>)
 80071e6:	410a      	asrs	r2, r1
 80071e8:	07d6      	lsls	r6, r2, #31
 80071ea:	d427      	bmi.n	800723c <__sflush_r+0xb0>
 80071ec:	2200      	movs	r2, #0
 80071ee:	6062      	str	r2, [r4, #4]
 80071f0:	6922      	ldr	r2, [r4, #16]
 80071f2:	04d9      	lsls	r1, r3, #19
 80071f4:	6022      	str	r2, [r4, #0]
 80071f6:	d504      	bpl.n	8007202 <__sflush_r+0x76>
 80071f8:	1c42      	adds	r2, r0, #1
 80071fa:	d101      	bne.n	8007200 <__sflush_r+0x74>
 80071fc:	682b      	ldr	r3, [r5, #0]
 80071fe:	b903      	cbnz	r3, 8007202 <__sflush_r+0x76>
 8007200:	6560      	str	r0, [r4, #84]	@ 0x54
 8007202:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007204:	602f      	str	r7, [r5, #0]
 8007206:	b1b9      	cbz	r1, 8007238 <__sflush_r+0xac>
 8007208:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800720c:	4299      	cmp	r1, r3
 800720e:	d002      	beq.n	8007216 <__sflush_r+0x8a>
 8007210:	4628      	mov	r0, r5
 8007212:	f7ff fb3d 	bl	8006890 <_free_r>
 8007216:	2300      	movs	r3, #0
 8007218:	6363      	str	r3, [r4, #52]	@ 0x34
 800721a:	e00d      	b.n	8007238 <__sflush_r+0xac>
 800721c:	2301      	movs	r3, #1
 800721e:	4628      	mov	r0, r5
 8007220:	47b0      	blx	r6
 8007222:	4602      	mov	r2, r0
 8007224:	1c50      	adds	r0, r2, #1
 8007226:	d1c9      	bne.n	80071bc <__sflush_r+0x30>
 8007228:	682b      	ldr	r3, [r5, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d0c6      	beq.n	80071bc <__sflush_r+0x30>
 800722e:	2b1d      	cmp	r3, #29
 8007230:	d001      	beq.n	8007236 <__sflush_r+0xaa>
 8007232:	2b16      	cmp	r3, #22
 8007234:	d11d      	bne.n	8007272 <__sflush_r+0xe6>
 8007236:	602f      	str	r7, [r5, #0]
 8007238:	2000      	movs	r0, #0
 800723a:	e021      	b.n	8007280 <__sflush_r+0xf4>
 800723c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007240:	b21b      	sxth	r3, r3
 8007242:	e01a      	b.n	800727a <__sflush_r+0xee>
 8007244:	690f      	ldr	r7, [r1, #16]
 8007246:	2f00      	cmp	r7, #0
 8007248:	d0f6      	beq.n	8007238 <__sflush_r+0xac>
 800724a:	0793      	lsls	r3, r2, #30
 800724c:	bf18      	it	ne
 800724e:	2300      	movne	r3, #0
 8007250:	680e      	ldr	r6, [r1, #0]
 8007252:	bf08      	it	eq
 8007254:	694b      	ldreq	r3, [r1, #20]
 8007256:	1bf6      	subs	r6, r6, r7
 8007258:	600f      	str	r7, [r1, #0]
 800725a:	608b      	str	r3, [r1, #8]
 800725c:	2e00      	cmp	r6, #0
 800725e:	ddeb      	ble.n	8007238 <__sflush_r+0xac>
 8007260:	4633      	mov	r3, r6
 8007262:	463a      	mov	r2, r7
 8007264:	4628      	mov	r0, r5
 8007266:	6a21      	ldr	r1, [r4, #32]
 8007268:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800726c:	47e0      	blx	ip
 800726e:	2800      	cmp	r0, #0
 8007270:	dc07      	bgt.n	8007282 <__sflush_r+0xf6>
 8007272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800727a:	f04f 30ff 	mov.w	r0, #4294967295
 800727e:	81a3      	strh	r3, [r4, #12]
 8007280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007282:	4407      	add	r7, r0
 8007284:	1a36      	subs	r6, r6, r0
 8007286:	e7e9      	b.n	800725c <__sflush_r+0xd0>
 8007288:	dfbffffe 	.word	0xdfbffffe

0800728c <_fflush_r>:
 800728c:	b538      	push	{r3, r4, r5, lr}
 800728e:	690b      	ldr	r3, [r1, #16]
 8007290:	4605      	mov	r5, r0
 8007292:	460c      	mov	r4, r1
 8007294:	b913      	cbnz	r3, 800729c <_fflush_r+0x10>
 8007296:	2500      	movs	r5, #0
 8007298:	4628      	mov	r0, r5
 800729a:	bd38      	pop	{r3, r4, r5, pc}
 800729c:	b118      	cbz	r0, 80072a6 <_fflush_r+0x1a>
 800729e:	6a03      	ldr	r3, [r0, #32]
 80072a0:	b90b      	cbnz	r3, 80072a6 <_fflush_r+0x1a>
 80072a2:	f7fe fb9b 	bl	80059dc <__sinit>
 80072a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d0f3      	beq.n	8007296 <_fflush_r+0xa>
 80072ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80072b0:	07d0      	lsls	r0, r2, #31
 80072b2:	d404      	bmi.n	80072be <_fflush_r+0x32>
 80072b4:	0599      	lsls	r1, r3, #22
 80072b6:	d402      	bmi.n	80072be <_fflush_r+0x32>
 80072b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072ba:	f7fe fc86 	bl	8005bca <__retarget_lock_acquire_recursive>
 80072be:	4628      	mov	r0, r5
 80072c0:	4621      	mov	r1, r4
 80072c2:	f7ff ff63 	bl	800718c <__sflush_r>
 80072c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072c8:	4605      	mov	r5, r0
 80072ca:	07da      	lsls	r2, r3, #31
 80072cc:	d4e4      	bmi.n	8007298 <_fflush_r+0xc>
 80072ce:	89a3      	ldrh	r3, [r4, #12]
 80072d0:	059b      	lsls	r3, r3, #22
 80072d2:	d4e1      	bmi.n	8007298 <_fflush_r+0xc>
 80072d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072d6:	f7fe fc79 	bl	8005bcc <__retarget_lock_release_recursive>
 80072da:	e7dd      	b.n	8007298 <_fflush_r+0xc>

080072dc <_sbrk_r>:
 80072dc:	b538      	push	{r3, r4, r5, lr}
 80072de:	2300      	movs	r3, #0
 80072e0:	4d05      	ldr	r5, [pc, #20]	@ (80072f8 <_sbrk_r+0x1c>)
 80072e2:	4604      	mov	r4, r0
 80072e4:	4608      	mov	r0, r1
 80072e6:	602b      	str	r3, [r5, #0]
 80072e8:	f7fb faa4 	bl	8002834 <_sbrk>
 80072ec:	1c43      	adds	r3, r0, #1
 80072ee:	d102      	bne.n	80072f6 <_sbrk_r+0x1a>
 80072f0:	682b      	ldr	r3, [r5, #0]
 80072f2:	b103      	cbz	r3, 80072f6 <_sbrk_r+0x1a>
 80072f4:	6023      	str	r3, [r4, #0]
 80072f6:	bd38      	pop	{r3, r4, r5, pc}
 80072f8:	200008b4 	.word	0x200008b4

080072fc <memcpy>:
 80072fc:	440a      	add	r2, r1
 80072fe:	4291      	cmp	r1, r2
 8007300:	f100 33ff 	add.w	r3, r0, #4294967295
 8007304:	d100      	bne.n	8007308 <memcpy+0xc>
 8007306:	4770      	bx	lr
 8007308:	b510      	push	{r4, lr}
 800730a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800730e:	4291      	cmp	r1, r2
 8007310:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007314:	d1f9      	bne.n	800730a <memcpy+0xe>
 8007316:	bd10      	pop	{r4, pc}

08007318 <__assert_func>:
 8007318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800731a:	4614      	mov	r4, r2
 800731c:	461a      	mov	r2, r3
 800731e:	4b09      	ldr	r3, [pc, #36]	@ (8007344 <__assert_func+0x2c>)
 8007320:	4605      	mov	r5, r0
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68d8      	ldr	r0, [r3, #12]
 8007326:	b954      	cbnz	r4, 800733e <__assert_func+0x26>
 8007328:	4b07      	ldr	r3, [pc, #28]	@ (8007348 <__assert_func+0x30>)
 800732a:	461c      	mov	r4, r3
 800732c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007330:	9100      	str	r1, [sp, #0]
 8007332:	462b      	mov	r3, r5
 8007334:	4905      	ldr	r1, [pc, #20]	@ (800734c <__assert_func+0x34>)
 8007336:	f000 f841 	bl	80073bc <fiprintf>
 800733a:	f000 f851 	bl	80073e0 <abort>
 800733e:	4b04      	ldr	r3, [pc, #16]	@ (8007350 <__assert_func+0x38>)
 8007340:	e7f4      	b.n	800732c <__assert_func+0x14>
 8007342:	bf00      	nop
 8007344:	20000018 	.word	0x20000018
 8007348:	080083c5 	.word	0x080083c5
 800734c:	08008397 	.word	0x08008397
 8007350:	0800838a 	.word	0x0800838a

08007354 <_calloc_r>:
 8007354:	b570      	push	{r4, r5, r6, lr}
 8007356:	fba1 5402 	umull	r5, r4, r1, r2
 800735a:	b93c      	cbnz	r4, 800736c <_calloc_r+0x18>
 800735c:	4629      	mov	r1, r5
 800735e:	f7ff fb09 	bl	8006974 <_malloc_r>
 8007362:	4606      	mov	r6, r0
 8007364:	b928      	cbnz	r0, 8007372 <_calloc_r+0x1e>
 8007366:	2600      	movs	r6, #0
 8007368:	4630      	mov	r0, r6
 800736a:	bd70      	pop	{r4, r5, r6, pc}
 800736c:	220c      	movs	r2, #12
 800736e:	6002      	str	r2, [r0, #0]
 8007370:	e7f9      	b.n	8007366 <_calloc_r+0x12>
 8007372:	462a      	mov	r2, r5
 8007374:	4621      	mov	r1, r4
 8007376:	f7fe fbaa 	bl	8005ace <memset>
 800737a:	e7f5      	b.n	8007368 <_calloc_r+0x14>

0800737c <__ascii_mbtowc>:
 800737c:	b082      	sub	sp, #8
 800737e:	b901      	cbnz	r1, 8007382 <__ascii_mbtowc+0x6>
 8007380:	a901      	add	r1, sp, #4
 8007382:	b142      	cbz	r2, 8007396 <__ascii_mbtowc+0x1a>
 8007384:	b14b      	cbz	r3, 800739a <__ascii_mbtowc+0x1e>
 8007386:	7813      	ldrb	r3, [r2, #0]
 8007388:	600b      	str	r3, [r1, #0]
 800738a:	7812      	ldrb	r2, [r2, #0]
 800738c:	1e10      	subs	r0, r2, #0
 800738e:	bf18      	it	ne
 8007390:	2001      	movne	r0, #1
 8007392:	b002      	add	sp, #8
 8007394:	4770      	bx	lr
 8007396:	4610      	mov	r0, r2
 8007398:	e7fb      	b.n	8007392 <__ascii_mbtowc+0x16>
 800739a:	f06f 0001 	mvn.w	r0, #1
 800739e:	e7f8      	b.n	8007392 <__ascii_mbtowc+0x16>

080073a0 <__ascii_wctomb>:
 80073a0:	4603      	mov	r3, r0
 80073a2:	4608      	mov	r0, r1
 80073a4:	b141      	cbz	r1, 80073b8 <__ascii_wctomb+0x18>
 80073a6:	2aff      	cmp	r2, #255	@ 0xff
 80073a8:	d904      	bls.n	80073b4 <__ascii_wctomb+0x14>
 80073aa:	228a      	movs	r2, #138	@ 0x8a
 80073ac:	f04f 30ff 	mov.w	r0, #4294967295
 80073b0:	601a      	str	r2, [r3, #0]
 80073b2:	4770      	bx	lr
 80073b4:	2001      	movs	r0, #1
 80073b6:	700a      	strb	r2, [r1, #0]
 80073b8:	4770      	bx	lr
	...

080073bc <fiprintf>:
 80073bc:	b40e      	push	{r1, r2, r3}
 80073be:	b503      	push	{r0, r1, lr}
 80073c0:	4601      	mov	r1, r0
 80073c2:	ab03      	add	r3, sp, #12
 80073c4:	4805      	ldr	r0, [pc, #20]	@ (80073dc <fiprintf+0x20>)
 80073c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80073ca:	6800      	ldr	r0, [r0, #0]
 80073cc:	9301      	str	r3, [sp, #4]
 80073ce:	f000 f835 	bl	800743c <_vfiprintf_r>
 80073d2:	b002      	add	sp, #8
 80073d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80073d8:	b003      	add	sp, #12
 80073da:	4770      	bx	lr
 80073dc:	20000018 	.word	0x20000018

080073e0 <abort>:
 80073e0:	2006      	movs	r0, #6
 80073e2:	b508      	push	{r3, lr}
 80073e4:	f000 f9fe 	bl	80077e4 <raise>
 80073e8:	2001      	movs	r0, #1
 80073ea:	f7fb f9ca 	bl	8002782 <_exit>

080073ee <__sfputc_r>:
 80073ee:	6893      	ldr	r3, [r2, #8]
 80073f0:	b410      	push	{r4}
 80073f2:	3b01      	subs	r3, #1
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	6093      	str	r3, [r2, #8]
 80073f8:	da07      	bge.n	800740a <__sfputc_r+0x1c>
 80073fa:	6994      	ldr	r4, [r2, #24]
 80073fc:	42a3      	cmp	r3, r4
 80073fe:	db01      	blt.n	8007404 <__sfputc_r+0x16>
 8007400:	290a      	cmp	r1, #10
 8007402:	d102      	bne.n	800740a <__sfputc_r+0x1c>
 8007404:	bc10      	pop	{r4}
 8007406:	f000 b931 	b.w	800766c <__swbuf_r>
 800740a:	6813      	ldr	r3, [r2, #0]
 800740c:	1c58      	adds	r0, r3, #1
 800740e:	6010      	str	r0, [r2, #0]
 8007410:	7019      	strb	r1, [r3, #0]
 8007412:	4608      	mov	r0, r1
 8007414:	bc10      	pop	{r4}
 8007416:	4770      	bx	lr

08007418 <__sfputs_r>:
 8007418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741a:	4606      	mov	r6, r0
 800741c:	460f      	mov	r7, r1
 800741e:	4614      	mov	r4, r2
 8007420:	18d5      	adds	r5, r2, r3
 8007422:	42ac      	cmp	r4, r5
 8007424:	d101      	bne.n	800742a <__sfputs_r+0x12>
 8007426:	2000      	movs	r0, #0
 8007428:	e007      	b.n	800743a <__sfputs_r+0x22>
 800742a:	463a      	mov	r2, r7
 800742c:	4630      	mov	r0, r6
 800742e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007432:	f7ff ffdc 	bl	80073ee <__sfputc_r>
 8007436:	1c43      	adds	r3, r0, #1
 8007438:	d1f3      	bne.n	8007422 <__sfputs_r+0xa>
 800743a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800743c <_vfiprintf_r>:
 800743c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007440:	460d      	mov	r5, r1
 8007442:	4614      	mov	r4, r2
 8007444:	4698      	mov	r8, r3
 8007446:	4606      	mov	r6, r0
 8007448:	b09d      	sub	sp, #116	@ 0x74
 800744a:	b118      	cbz	r0, 8007454 <_vfiprintf_r+0x18>
 800744c:	6a03      	ldr	r3, [r0, #32]
 800744e:	b90b      	cbnz	r3, 8007454 <_vfiprintf_r+0x18>
 8007450:	f7fe fac4 	bl	80059dc <__sinit>
 8007454:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007456:	07d9      	lsls	r1, r3, #31
 8007458:	d405      	bmi.n	8007466 <_vfiprintf_r+0x2a>
 800745a:	89ab      	ldrh	r3, [r5, #12]
 800745c:	059a      	lsls	r2, r3, #22
 800745e:	d402      	bmi.n	8007466 <_vfiprintf_r+0x2a>
 8007460:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007462:	f7fe fbb2 	bl	8005bca <__retarget_lock_acquire_recursive>
 8007466:	89ab      	ldrh	r3, [r5, #12]
 8007468:	071b      	lsls	r3, r3, #28
 800746a:	d501      	bpl.n	8007470 <_vfiprintf_r+0x34>
 800746c:	692b      	ldr	r3, [r5, #16]
 800746e:	b99b      	cbnz	r3, 8007498 <_vfiprintf_r+0x5c>
 8007470:	4629      	mov	r1, r5
 8007472:	4630      	mov	r0, r6
 8007474:	f000 f938 	bl	80076e8 <__swsetup_r>
 8007478:	b170      	cbz	r0, 8007498 <_vfiprintf_r+0x5c>
 800747a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800747c:	07dc      	lsls	r4, r3, #31
 800747e:	d504      	bpl.n	800748a <_vfiprintf_r+0x4e>
 8007480:	f04f 30ff 	mov.w	r0, #4294967295
 8007484:	b01d      	add	sp, #116	@ 0x74
 8007486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800748a:	89ab      	ldrh	r3, [r5, #12]
 800748c:	0598      	lsls	r0, r3, #22
 800748e:	d4f7      	bmi.n	8007480 <_vfiprintf_r+0x44>
 8007490:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007492:	f7fe fb9b 	bl	8005bcc <__retarget_lock_release_recursive>
 8007496:	e7f3      	b.n	8007480 <_vfiprintf_r+0x44>
 8007498:	2300      	movs	r3, #0
 800749a:	9309      	str	r3, [sp, #36]	@ 0x24
 800749c:	2320      	movs	r3, #32
 800749e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80074a2:	2330      	movs	r3, #48	@ 0x30
 80074a4:	f04f 0901 	mov.w	r9, #1
 80074a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80074ac:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007658 <_vfiprintf_r+0x21c>
 80074b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80074b4:	4623      	mov	r3, r4
 80074b6:	469a      	mov	sl, r3
 80074b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074bc:	b10a      	cbz	r2, 80074c2 <_vfiprintf_r+0x86>
 80074be:	2a25      	cmp	r2, #37	@ 0x25
 80074c0:	d1f9      	bne.n	80074b6 <_vfiprintf_r+0x7a>
 80074c2:	ebba 0b04 	subs.w	fp, sl, r4
 80074c6:	d00b      	beq.n	80074e0 <_vfiprintf_r+0xa4>
 80074c8:	465b      	mov	r3, fp
 80074ca:	4622      	mov	r2, r4
 80074cc:	4629      	mov	r1, r5
 80074ce:	4630      	mov	r0, r6
 80074d0:	f7ff ffa2 	bl	8007418 <__sfputs_r>
 80074d4:	3001      	adds	r0, #1
 80074d6:	f000 80a7 	beq.w	8007628 <_vfiprintf_r+0x1ec>
 80074da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074dc:	445a      	add	r2, fp
 80074de:	9209      	str	r2, [sp, #36]	@ 0x24
 80074e0:	f89a 3000 	ldrb.w	r3, [sl]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 809f 	beq.w	8007628 <_vfiprintf_r+0x1ec>
 80074ea:	2300      	movs	r3, #0
 80074ec:	f04f 32ff 	mov.w	r2, #4294967295
 80074f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074f4:	f10a 0a01 	add.w	sl, sl, #1
 80074f8:	9304      	str	r3, [sp, #16]
 80074fa:	9307      	str	r3, [sp, #28]
 80074fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007500:	931a      	str	r3, [sp, #104]	@ 0x68
 8007502:	4654      	mov	r4, sl
 8007504:	2205      	movs	r2, #5
 8007506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800750a:	4853      	ldr	r0, [pc, #332]	@ (8007658 <_vfiprintf_r+0x21c>)
 800750c:	f7fe fb5f 	bl	8005bce <memchr>
 8007510:	9a04      	ldr	r2, [sp, #16]
 8007512:	b9d8      	cbnz	r0, 800754c <_vfiprintf_r+0x110>
 8007514:	06d1      	lsls	r1, r2, #27
 8007516:	bf44      	itt	mi
 8007518:	2320      	movmi	r3, #32
 800751a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800751e:	0713      	lsls	r3, r2, #28
 8007520:	bf44      	itt	mi
 8007522:	232b      	movmi	r3, #43	@ 0x2b
 8007524:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007528:	f89a 3000 	ldrb.w	r3, [sl]
 800752c:	2b2a      	cmp	r3, #42	@ 0x2a
 800752e:	d015      	beq.n	800755c <_vfiprintf_r+0x120>
 8007530:	4654      	mov	r4, sl
 8007532:	2000      	movs	r0, #0
 8007534:	f04f 0c0a 	mov.w	ip, #10
 8007538:	9a07      	ldr	r2, [sp, #28]
 800753a:	4621      	mov	r1, r4
 800753c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007540:	3b30      	subs	r3, #48	@ 0x30
 8007542:	2b09      	cmp	r3, #9
 8007544:	d94b      	bls.n	80075de <_vfiprintf_r+0x1a2>
 8007546:	b1b0      	cbz	r0, 8007576 <_vfiprintf_r+0x13a>
 8007548:	9207      	str	r2, [sp, #28]
 800754a:	e014      	b.n	8007576 <_vfiprintf_r+0x13a>
 800754c:	eba0 0308 	sub.w	r3, r0, r8
 8007550:	fa09 f303 	lsl.w	r3, r9, r3
 8007554:	4313      	orrs	r3, r2
 8007556:	46a2      	mov	sl, r4
 8007558:	9304      	str	r3, [sp, #16]
 800755a:	e7d2      	b.n	8007502 <_vfiprintf_r+0xc6>
 800755c:	9b03      	ldr	r3, [sp, #12]
 800755e:	1d19      	adds	r1, r3, #4
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	9103      	str	r1, [sp, #12]
 8007564:	2b00      	cmp	r3, #0
 8007566:	bfbb      	ittet	lt
 8007568:	425b      	neglt	r3, r3
 800756a:	f042 0202 	orrlt.w	r2, r2, #2
 800756e:	9307      	strge	r3, [sp, #28]
 8007570:	9307      	strlt	r3, [sp, #28]
 8007572:	bfb8      	it	lt
 8007574:	9204      	strlt	r2, [sp, #16]
 8007576:	7823      	ldrb	r3, [r4, #0]
 8007578:	2b2e      	cmp	r3, #46	@ 0x2e
 800757a:	d10a      	bne.n	8007592 <_vfiprintf_r+0x156>
 800757c:	7863      	ldrb	r3, [r4, #1]
 800757e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007580:	d132      	bne.n	80075e8 <_vfiprintf_r+0x1ac>
 8007582:	9b03      	ldr	r3, [sp, #12]
 8007584:	3402      	adds	r4, #2
 8007586:	1d1a      	adds	r2, r3, #4
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	9203      	str	r2, [sp, #12]
 800758c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007590:	9305      	str	r3, [sp, #20]
 8007592:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800765c <_vfiprintf_r+0x220>
 8007596:	2203      	movs	r2, #3
 8007598:	4650      	mov	r0, sl
 800759a:	7821      	ldrb	r1, [r4, #0]
 800759c:	f7fe fb17 	bl	8005bce <memchr>
 80075a0:	b138      	cbz	r0, 80075b2 <_vfiprintf_r+0x176>
 80075a2:	2240      	movs	r2, #64	@ 0x40
 80075a4:	9b04      	ldr	r3, [sp, #16]
 80075a6:	eba0 000a 	sub.w	r0, r0, sl
 80075aa:	4082      	lsls	r2, r0
 80075ac:	4313      	orrs	r3, r2
 80075ae:	3401      	adds	r4, #1
 80075b0:	9304      	str	r3, [sp, #16]
 80075b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075b6:	2206      	movs	r2, #6
 80075b8:	4829      	ldr	r0, [pc, #164]	@ (8007660 <_vfiprintf_r+0x224>)
 80075ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80075be:	f7fe fb06 	bl	8005bce <memchr>
 80075c2:	2800      	cmp	r0, #0
 80075c4:	d03f      	beq.n	8007646 <_vfiprintf_r+0x20a>
 80075c6:	4b27      	ldr	r3, [pc, #156]	@ (8007664 <_vfiprintf_r+0x228>)
 80075c8:	bb1b      	cbnz	r3, 8007612 <_vfiprintf_r+0x1d6>
 80075ca:	9b03      	ldr	r3, [sp, #12]
 80075cc:	3307      	adds	r3, #7
 80075ce:	f023 0307 	bic.w	r3, r3, #7
 80075d2:	3308      	adds	r3, #8
 80075d4:	9303      	str	r3, [sp, #12]
 80075d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075d8:	443b      	add	r3, r7
 80075da:	9309      	str	r3, [sp, #36]	@ 0x24
 80075dc:	e76a      	b.n	80074b4 <_vfiprintf_r+0x78>
 80075de:	460c      	mov	r4, r1
 80075e0:	2001      	movs	r0, #1
 80075e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80075e6:	e7a8      	b.n	800753a <_vfiprintf_r+0xfe>
 80075e8:	2300      	movs	r3, #0
 80075ea:	f04f 0c0a 	mov.w	ip, #10
 80075ee:	4619      	mov	r1, r3
 80075f0:	3401      	adds	r4, #1
 80075f2:	9305      	str	r3, [sp, #20]
 80075f4:	4620      	mov	r0, r4
 80075f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075fa:	3a30      	subs	r2, #48	@ 0x30
 80075fc:	2a09      	cmp	r2, #9
 80075fe:	d903      	bls.n	8007608 <_vfiprintf_r+0x1cc>
 8007600:	2b00      	cmp	r3, #0
 8007602:	d0c6      	beq.n	8007592 <_vfiprintf_r+0x156>
 8007604:	9105      	str	r1, [sp, #20]
 8007606:	e7c4      	b.n	8007592 <_vfiprintf_r+0x156>
 8007608:	4604      	mov	r4, r0
 800760a:	2301      	movs	r3, #1
 800760c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007610:	e7f0      	b.n	80075f4 <_vfiprintf_r+0x1b8>
 8007612:	ab03      	add	r3, sp, #12
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	462a      	mov	r2, r5
 8007618:	4630      	mov	r0, r6
 800761a:	4b13      	ldr	r3, [pc, #76]	@ (8007668 <_vfiprintf_r+0x22c>)
 800761c:	a904      	add	r1, sp, #16
 800761e:	f7fd fd93 	bl	8005148 <_printf_float>
 8007622:	4607      	mov	r7, r0
 8007624:	1c78      	adds	r0, r7, #1
 8007626:	d1d6      	bne.n	80075d6 <_vfiprintf_r+0x19a>
 8007628:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800762a:	07d9      	lsls	r1, r3, #31
 800762c:	d405      	bmi.n	800763a <_vfiprintf_r+0x1fe>
 800762e:	89ab      	ldrh	r3, [r5, #12]
 8007630:	059a      	lsls	r2, r3, #22
 8007632:	d402      	bmi.n	800763a <_vfiprintf_r+0x1fe>
 8007634:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007636:	f7fe fac9 	bl	8005bcc <__retarget_lock_release_recursive>
 800763a:	89ab      	ldrh	r3, [r5, #12]
 800763c:	065b      	lsls	r3, r3, #25
 800763e:	f53f af1f 	bmi.w	8007480 <_vfiprintf_r+0x44>
 8007642:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007644:	e71e      	b.n	8007484 <_vfiprintf_r+0x48>
 8007646:	ab03      	add	r3, sp, #12
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	462a      	mov	r2, r5
 800764c:	4630      	mov	r0, r6
 800764e:	4b06      	ldr	r3, [pc, #24]	@ (8007668 <_vfiprintf_r+0x22c>)
 8007650:	a904      	add	r1, sp, #16
 8007652:	f7fe f817 	bl	8005684 <_printf_i>
 8007656:	e7e4      	b.n	8007622 <_vfiprintf_r+0x1e6>
 8007658:	080084c7 	.word	0x080084c7
 800765c:	080084cd 	.word	0x080084cd
 8007660:	080084d1 	.word	0x080084d1
 8007664:	08005149 	.word	0x08005149
 8007668:	08007419 	.word	0x08007419

0800766c <__swbuf_r>:
 800766c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800766e:	460e      	mov	r6, r1
 8007670:	4614      	mov	r4, r2
 8007672:	4605      	mov	r5, r0
 8007674:	b118      	cbz	r0, 800767e <__swbuf_r+0x12>
 8007676:	6a03      	ldr	r3, [r0, #32]
 8007678:	b90b      	cbnz	r3, 800767e <__swbuf_r+0x12>
 800767a:	f7fe f9af 	bl	80059dc <__sinit>
 800767e:	69a3      	ldr	r3, [r4, #24]
 8007680:	60a3      	str	r3, [r4, #8]
 8007682:	89a3      	ldrh	r3, [r4, #12]
 8007684:	071a      	lsls	r2, r3, #28
 8007686:	d501      	bpl.n	800768c <__swbuf_r+0x20>
 8007688:	6923      	ldr	r3, [r4, #16]
 800768a:	b943      	cbnz	r3, 800769e <__swbuf_r+0x32>
 800768c:	4621      	mov	r1, r4
 800768e:	4628      	mov	r0, r5
 8007690:	f000 f82a 	bl	80076e8 <__swsetup_r>
 8007694:	b118      	cbz	r0, 800769e <__swbuf_r+0x32>
 8007696:	f04f 37ff 	mov.w	r7, #4294967295
 800769a:	4638      	mov	r0, r7
 800769c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800769e:	6823      	ldr	r3, [r4, #0]
 80076a0:	6922      	ldr	r2, [r4, #16]
 80076a2:	b2f6      	uxtb	r6, r6
 80076a4:	1a98      	subs	r0, r3, r2
 80076a6:	6963      	ldr	r3, [r4, #20]
 80076a8:	4637      	mov	r7, r6
 80076aa:	4283      	cmp	r3, r0
 80076ac:	dc05      	bgt.n	80076ba <__swbuf_r+0x4e>
 80076ae:	4621      	mov	r1, r4
 80076b0:	4628      	mov	r0, r5
 80076b2:	f7ff fdeb 	bl	800728c <_fflush_r>
 80076b6:	2800      	cmp	r0, #0
 80076b8:	d1ed      	bne.n	8007696 <__swbuf_r+0x2a>
 80076ba:	68a3      	ldr	r3, [r4, #8]
 80076bc:	3b01      	subs	r3, #1
 80076be:	60a3      	str	r3, [r4, #8]
 80076c0:	6823      	ldr	r3, [r4, #0]
 80076c2:	1c5a      	adds	r2, r3, #1
 80076c4:	6022      	str	r2, [r4, #0]
 80076c6:	701e      	strb	r6, [r3, #0]
 80076c8:	6962      	ldr	r2, [r4, #20]
 80076ca:	1c43      	adds	r3, r0, #1
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d004      	beq.n	80076da <__swbuf_r+0x6e>
 80076d0:	89a3      	ldrh	r3, [r4, #12]
 80076d2:	07db      	lsls	r3, r3, #31
 80076d4:	d5e1      	bpl.n	800769a <__swbuf_r+0x2e>
 80076d6:	2e0a      	cmp	r6, #10
 80076d8:	d1df      	bne.n	800769a <__swbuf_r+0x2e>
 80076da:	4621      	mov	r1, r4
 80076dc:	4628      	mov	r0, r5
 80076de:	f7ff fdd5 	bl	800728c <_fflush_r>
 80076e2:	2800      	cmp	r0, #0
 80076e4:	d0d9      	beq.n	800769a <__swbuf_r+0x2e>
 80076e6:	e7d6      	b.n	8007696 <__swbuf_r+0x2a>

080076e8 <__swsetup_r>:
 80076e8:	b538      	push	{r3, r4, r5, lr}
 80076ea:	4b29      	ldr	r3, [pc, #164]	@ (8007790 <__swsetup_r+0xa8>)
 80076ec:	4605      	mov	r5, r0
 80076ee:	6818      	ldr	r0, [r3, #0]
 80076f0:	460c      	mov	r4, r1
 80076f2:	b118      	cbz	r0, 80076fc <__swsetup_r+0x14>
 80076f4:	6a03      	ldr	r3, [r0, #32]
 80076f6:	b90b      	cbnz	r3, 80076fc <__swsetup_r+0x14>
 80076f8:	f7fe f970 	bl	80059dc <__sinit>
 80076fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007700:	0719      	lsls	r1, r3, #28
 8007702:	d422      	bmi.n	800774a <__swsetup_r+0x62>
 8007704:	06da      	lsls	r2, r3, #27
 8007706:	d407      	bmi.n	8007718 <__swsetup_r+0x30>
 8007708:	2209      	movs	r2, #9
 800770a:	602a      	str	r2, [r5, #0]
 800770c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007710:	f04f 30ff 	mov.w	r0, #4294967295
 8007714:	81a3      	strh	r3, [r4, #12]
 8007716:	e033      	b.n	8007780 <__swsetup_r+0x98>
 8007718:	0758      	lsls	r0, r3, #29
 800771a:	d512      	bpl.n	8007742 <__swsetup_r+0x5a>
 800771c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800771e:	b141      	cbz	r1, 8007732 <__swsetup_r+0x4a>
 8007720:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007724:	4299      	cmp	r1, r3
 8007726:	d002      	beq.n	800772e <__swsetup_r+0x46>
 8007728:	4628      	mov	r0, r5
 800772a:	f7ff f8b1 	bl	8006890 <_free_r>
 800772e:	2300      	movs	r3, #0
 8007730:	6363      	str	r3, [r4, #52]	@ 0x34
 8007732:	89a3      	ldrh	r3, [r4, #12]
 8007734:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007738:	81a3      	strh	r3, [r4, #12]
 800773a:	2300      	movs	r3, #0
 800773c:	6063      	str	r3, [r4, #4]
 800773e:	6923      	ldr	r3, [r4, #16]
 8007740:	6023      	str	r3, [r4, #0]
 8007742:	89a3      	ldrh	r3, [r4, #12]
 8007744:	f043 0308 	orr.w	r3, r3, #8
 8007748:	81a3      	strh	r3, [r4, #12]
 800774a:	6923      	ldr	r3, [r4, #16]
 800774c:	b94b      	cbnz	r3, 8007762 <__swsetup_r+0x7a>
 800774e:	89a3      	ldrh	r3, [r4, #12]
 8007750:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007754:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007758:	d003      	beq.n	8007762 <__swsetup_r+0x7a>
 800775a:	4621      	mov	r1, r4
 800775c:	4628      	mov	r0, r5
 800775e:	f000 f882 	bl	8007866 <__smakebuf_r>
 8007762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007766:	f013 0201 	ands.w	r2, r3, #1
 800776a:	d00a      	beq.n	8007782 <__swsetup_r+0x9a>
 800776c:	2200      	movs	r2, #0
 800776e:	60a2      	str	r2, [r4, #8]
 8007770:	6962      	ldr	r2, [r4, #20]
 8007772:	4252      	negs	r2, r2
 8007774:	61a2      	str	r2, [r4, #24]
 8007776:	6922      	ldr	r2, [r4, #16]
 8007778:	b942      	cbnz	r2, 800778c <__swsetup_r+0xa4>
 800777a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800777e:	d1c5      	bne.n	800770c <__swsetup_r+0x24>
 8007780:	bd38      	pop	{r3, r4, r5, pc}
 8007782:	0799      	lsls	r1, r3, #30
 8007784:	bf58      	it	pl
 8007786:	6962      	ldrpl	r2, [r4, #20]
 8007788:	60a2      	str	r2, [r4, #8]
 800778a:	e7f4      	b.n	8007776 <__swsetup_r+0x8e>
 800778c:	2000      	movs	r0, #0
 800778e:	e7f7      	b.n	8007780 <__swsetup_r+0x98>
 8007790:	20000018 	.word	0x20000018

08007794 <_raise_r>:
 8007794:	291f      	cmp	r1, #31
 8007796:	b538      	push	{r3, r4, r5, lr}
 8007798:	4605      	mov	r5, r0
 800779a:	460c      	mov	r4, r1
 800779c:	d904      	bls.n	80077a8 <_raise_r+0x14>
 800779e:	2316      	movs	r3, #22
 80077a0:	6003      	str	r3, [r0, #0]
 80077a2:	f04f 30ff 	mov.w	r0, #4294967295
 80077a6:	bd38      	pop	{r3, r4, r5, pc}
 80077a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80077aa:	b112      	cbz	r2, 80077b2 <_raise_r+0x1e>
 80077ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80077b0:	b94b      	cbnz	r3, 80077c6 <_raise_r+0x32>
 80077b2:	4628      	mov	r0, r5
 80077b4:	f000 f830 	bl	8007818 <_getpid_r>
 80077b8:	4622      	mov	r2, r4
 80077ba:	4601      	mov	r1, r0
 80077bc:	4628      	mov	r0, r5
 80077be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077c2:	f000 b817 	b.w	80077f4 <_kill_r>
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d00a      	beq.n	80077e0 <_raise_r+0x4c>
 80077ca:	1c59      	adds	r1, r3, #1
 80077cc:	d103      	bne.n	80077d6 <_raise_r+0x42>
 80077ce:	2316      	movs	r3, #22
 80077d0:	6003      	str	r3, [r0, #0]
 80077d2:	2001      	movs	r0, #1
 80077d4:	e7e7      	b.n	80077a6 <_raise_r+0x12>
 80077d6:	2100      	movs	r1, #0
 80077d8:	4620      	mov	r0, r4
 80077da:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80077de:	4798      	blx	r3
 80077e0:	2000      	movs	r0, #0
 80077e2:	e7e0      	b.n	80077a6 <_raise_r+0x12>

080077e4 <raise>:
 80077e4:	4b02      	ldr	r3, [pc, #8]	@ (80077f0 <raise+0xc>)
 80077e6:	4601      	mov	r1, r0
 80077e8:	6818      	ldr	r0, [r3, #0]
 80077ea:	f7ff bfd3 	b.w	8007794 <_raise_r>
 80077ee:	bf00      	nop
 80077f0:	20000018 	.word	0x20000018

080077f4 <_kill_r>:
 80077f4:	b538      	push	{r3, r4, r5, lr}
 80077f6:	2300      	movs	r3, #0
 80077f8:	4d06      	ldr	r5, [pc, #24]	@ (8007814 <_kill_r+0x20>)
 80077fa:	4604      	mov	r4, r0
 80077fc:	4608      	mov	r0, r1
 80077fe:	4611      	mov	r1, r2
 8007800:	602b      	str	r3, [r5, #0]
 8007802:	f7fa ffae 	bl	8002762 <_kill>
 8007806:	1c43      	adds	r3, r0, #1
 8007808:	d102      	bne.n	8007810 <_kill_r+0x1c>
 800780a:	682b      	ldr	r3, [r5, #0]
 800780c:	b103      	cbz	r3, 8007810 <_kill_r+0x1c>
 800780e:	6023      	str	r3, [r4, #0]
 8007810:	bd38      	pop	{r3, r4, r5, pc}
 8007812:	bf00      	nop
 8007814:	200008b4 	.word	0x200008b4

08007818 <_getpid_r>:
 8007818:	f7fa bf9c 	b.w	8002754 <_getpid>

0800781c <__swhatbuf_r>:
 800781c:	b570      	push	{r4, r5, r6, lr}
 800781e:	460c      	mov	r4, r1
 8007820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007824:	4615      	mov	r5, r2
 8007826:	2900      	cmp	r1, #0
 8007828:	461e      	mov	r6, r3
 800782a:	b096      	sub	sp, #88	@ 0x58
 800782c:	da0c      	bge.n	8007848 <__swhatbuf_r+0x2c>
 800782e:	89a3      	ldrh	r3, [r4, #12]
 8007830:	2100      	movs	r1, #0
 8007832:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007836:	bf14      	ite	ne
 8007838:	2340      	movne	r3, #64	@ 0x40
 800783a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800783e:	2000      	movs	r0, #0
 8007840:	6031      	str	r1, [r6, #0]
 8007842:	602b      	str	r3, [r5, #0]
 8007844:	b016      	add	sp, #88	@ 0x58
 8007846:	bd70      	pop	{r4, r5, r6, pc}
 8007848:	466a      	mov	r2, sp
 800784a:	f000 f849 	bl	80078e0 <_fstat_r>
 800784e:	2800      	cmp	r0, #0
 8007850:	dbed      	blt.n	800782e <__swhatbuf_r+0x12>
 8007852:	9901      	ldr	r1, [sp, #4]
 8007854:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007858:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800785c:	4259      	negs	r1, r3
 800785e:	4159      	adcs	r1, r3
 8007860:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007864:	e7eb      	b.n	800783e <__swhatbuf_r+0x22>

08007866 <__smakebuf_r>:
 8007866:	898b      	ldrh	r3, [r1, #12]
 8007868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800786a:	079d      	lsls	r5, r3, #30
 800786c:	4606      	mov	r6, r0
 800786e:	460c      	mov	r4, r1
 8007870:	d507      	bpl.n	8007882 <__smakebuf_r+0x1c>
 8007872:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007876:	6023      	str	r3, [r4, #0]
 8007878:	6123      	str	r3, [r4, #16]
 800787a:	2301      	movs	r3, #1
 800787c:	6163      	str	r3, [r4, #20]
 800787e:	b003      	add	sp, #12
 8007880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007882:	466a      	mov	r2, sp
 8007884:	ab01      	add	r3, sp, #4
 8007886:	f7ff ffc9 	bl	800781c <__swhatbuf_r>
 800788a:	9f00      	ldr	r7, [sp, #0]
 800788c:	4605      	mov	r5, r0
 800788e:	4639      	mov	r1, r7
 8007890:	4630      	mov	r0, r6
 8007892:	f7ff f86f 	bl	8006974 <_malloc_r>
 8007896:	b948      	cbnz	r0, 80078ac <__smakebuf_r+0x46>
 8007898:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800789c:	059a      	lsls	r2, r3, #22
 800789e:	d4ee      	bmi.n	800787e <__smakebuf_r+0x18>
 80078a0:	f023 0303 	bic.w	r3, r3, #3
 80078a4:	f043 0302 	orr.w	r3, r3, #2
 80078a8:	81a3      	strh	r3, [r4, #12]
 80078aa:	e7e2      	b.n	8007872 <__smakebuf_r+0xc>
 80078ac:	89a3      	ldrh	r3, [r4, #12]
 80078ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80078b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078b6:	81a3      	strh	r3, [r4, #12]
 80078b8:	9b01      	ldr	r3, [sp, #4]
 80078ba:	6020      	str	r0, [r4, #0]
 80078bc:	b15b      	cbz	r3, 80078d6 <__smakebuf_r+0x70>
 80078be:	4630      	mov	r0, r6
 80078c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078c4:	f000 f81e 	bl	8007904 <_isatty_r>
 80078c8:	b128      	cbz	r0, 80078d6 <__smakebuf_r+0x70>
 80078ca:	89a3      	ldrh	r3, [r4, #12]
 80078cc:	f023 0303 	bic.w	r3, r3, #3
 80078d0:	f043 0301 	orr.w	r3, r3, #1
 80078d4:	81a3      	strh	r3, [r4, #12]
 80078d6:	89a3      	ldrh	r3, [r4, #12]
 80078d8:	431d      	orrs	r5, r3
 80078da:	81a5      	strh	r5, [r4, #12]
 80078dc:	e7cf      	b.n	800787e <__smakebuf_r+0x18>
	...

080078e0 <_fstat_r>:
 80078e0:	b538      	push	{r3, r4, r5, lr}
 80078e2:	2300      	movs	r3, #0
 80078e4:	4d06      	ldr	r5, [pc, #24]	@ (8007900 <_fstat_r+0x20>)
 80078e6:	4604      	mov	r4, r0
 80078e8:	4608      	mov	r0, r1
 80078ea:	4611      	mov	r1, r2
 80078ec:	602b      	str	r3, [r5, #0]
 80078ee:	f7fa ff7b 	bl	80027e8 <_fstat>
 80078f2:	1c43      	adds	r3, r0, #1
 80078f4:	d102      	bne.n	80078fc <_fstat_r+0x1c>
 80078f6:	682b      	ldr	r3, [r5, #0]
 80078f8:	b103      	cbz	r3, 80078fc <_fstat_r+0x1c>
 80078fa:	6023      	str	r3, [r4, #0]
 80078fc:	bd38      	pop	{r3, r4, r5, pc}
 80078fe:	bf00      	nop
 8007900:	200008b4 	.word	0x200008b4

08007904 <_isatty_r>:
 8007904:	b538      	push	{r3, r4, r5, lr}
 8007906:	2300      	movs	r3, #0
 8007908:	4d05      	ldr	r5, [pc, #20]	@ (8007920 <_isatty_r+0x1c>)
 800790a:	4604      	mov	r4, r0
 800790c:	4608      	mov	r0, r1
 800790e:	602b      	str	r3, [r5, #0]
 8007910:	f7fa ff79 	bl	8002806 <_isatty>
 8007914:	1c43      	adds	r3, r0, #1
 8007916:	d102      	bne.n	800791e <_isatty_r+0x1a>
 8007918:	682b      	ldr	r3, [r5, #0]
 800791a:	b103      	cbz	r3, 800791e <_isatty_r+0x1a>
 800791c:	6023      	str	r3, [r4, #0]
 800791e:	bd38      	pop	{r3, r4, r5, pc}
 8007920:	200008b4 	.word	0x200008b4

08007924 <_init>:
 8007924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007926:	bf00      	nop
 8007928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800792a:	bc08      	pop	{r3}
 800792c:	469e      	mov	lr, r3
 800792e:	4770      	bx	lr

08007930 <_fini>:
 8007930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007932:	bf00      	nop
 8007934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007936:	bc08      	pop	{r3}
 8007938:	469e      	mov	lr, r3
 800793a:	4770      	bx	lr
