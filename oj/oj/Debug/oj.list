
oj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ca4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  08004db8  08004db8  00005db8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005150  08005150  000071d4  2**0
                  CONTENTS
  4 .ARM          00000008  08005150  08005150  00006150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005158  08005158  000071d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005158  08005158  00006158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800515c  0800515c  0000615c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08005160  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  200001d4  08005334  000071d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  08005334  000073ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006fea  00000000  00000000  000071fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000167f  00000000  00000000  0000e1e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000730  00000000  00000000  0000f868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000056c  00000000  00000000  0000ff98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179e1  00000000  00000000  00010504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e41  00000000  00000000  00027ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083ca9  00000000  00000000  00030d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b49cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b78  00000000  00000000  000b4a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000039  00000000  00000000  000b758c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08004d9c 	.word	0x08004d9c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08004d9c 	.word	0x08004d9c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <init_fnd>:
#define false 0
#define true 1

uint8_t _LED_0F[29];

void init_fnd() {
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
	_LED_0F[0] = 0xC0; //0
 8000a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000b44 <init_fnd+0xbc>)
 8000a8e:	22c0      	movs	r2, #192	@ 0xc0
 8000a90:	701a      	strb	r2, [r3, #0]
	_LED_0F[1] = 0xF9; //1
 8000a92:	4b2c      	ldr	r3, [pc, #176]	@ (8000b44 <init_fnd+0xbc>)
 8000a94:	22f9      	movs	r2, #249	@ 0xf9
 8000a96:	705a      	strb	r2, [r3, #1]
	_LED_0F[2] = 0xA4; //2
 8000a98:	4b2a      	ldr	r3, [pc, #168]	@ (8000b44 <init_fnd+0xbc>)
 8000a9a:	22a4      	movs	r2, #164	@ 0xa4
 8000a9c:	709a      	strb	r2, [r3, #2]
	_LED_0F[3] = 0xB0; //3
 8000a9e:	4b29      	ldr	r3, [pc, #164]	@ (8000b44 <init_fnd+0xbc>)
 8000aa0:	22b0      	movs	r2, #176	@ 0xb0
 8000aa2:	70da      	strb	r2, [r3, #3]
	_LED_0F[4] = 0x99; //4
 8000aa4:	4b27      	ldr	r3, [pc, #156]	@ (8000b44 <init_fnd+0xbc>)
 8000aa6:	2299      	movs	r2, #153	@ 0x99
 8000aa8:	711a      	strb	r2, [r3, #4]
	_LED_0F[5] = 0x92; //5
 8000aaa:	4b26      	ldr	r3, [pc, #152]	@ (8000b44 <init_fnd+0xbc>)
 8000aac:	2292      	movs	r2, #146	@ 0x92
 8000aae:	715a      	strb	r2, [r3, #5]
	_LED_0F[6] = 0x82; //6
 8000ab0:	4b24      	ldr	r3, [pc, #144]	@ (8000b44 <init_fnd+0xbc>)
 8000ab2:	2282      	movs	r2, #130	@ 0x82
 8000ab4:	719a      	strb	r2, [r3, #6]
	_LED_0F[7] = 0xF8; //7
 8000ab6:	4b23      	ldr	r3, [pc, #140]	@ (8000b44 <init_fnd+0xbc>)
 8000ab8:	22f8      	movs	r2, #248	@ 0xf8
 8000aba:	71da      	strb	r2, [r3, #7]
	_LED_0F[8] = 0x80; //8
 8000abc:	4b21      	ldr	r3, [pc, #132]	@ (8000b44 <init_fnd+0xbc>)
 8000abe:	2280      	movs	r2, #128	@ 0x80
 8000ac0:	721a      	strb	r2, [r3, #8]
	_LED_0F[9] = 0x90; //9
 8000ac2:	4b20      	ldr	r3, [pc, #128]	@ (8000b44 <init_fnd+0xbc>)
 8000ac4:	2290      	movs	r2, #144	@ 0x90
 8000ac6:	725a      	strb	r2, [r3, #9]
	_LED_0F[10] = 0x88; //A
 8000ac8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b44 <init_fnd+0xbc>)
 8000aca:	2288      	movs	r2, #136	@ 0x88
 8000acc:	729a      	strb	r2, [r3, #10]
	_LED_0F[11] = 0x83; //b
 8000ace:	4b1d      	ldr	r3, [pc, #116]	@ (8000b44 <init_fnd+0xbc>)
 8000ad0:	2283      	movs	r2, #131	@ 0x83
 8000ad2:	72da      	strb	r2, [r3, #11]
	_LED_0F[12] = 0xC6; //C
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b44 <init_fnd+0xbc>)
 8000ad6:	22c6      	movs	r2, #198	@ 0xc6
 8000ad8:	731a      	strb	r2, [r3, #12]
	_LED_0F[13] = 0xA1; //d
 8000ada:	4b1a      	ldr	r3, [pc, #104]	@ (8000b44 <init_fnd+0xbc>)
 8000adc:	22a1      	movs	r2, #161	@ 0xa1
 8000ade:	735a      	strb	r2, [r3, #13]
	_LED_0F[14] = 0x86; //E
 8000ae0:	4b18      	ldr	r3, [pc, #96]	@ (8000b44 <init_fnd+0xbc>)
 8000ae2:	2286      	movs	r2, #134	@ 0x86
 8000ae4:	739a      	strb	r2, [r3, #14]
	_LED_0F[15] = 0x8E; //F
 8000ae6:	4b17      	ldr	r3, [pc, #92]	@ (8000b44 <init_fnd+0xbc>)
 8000ae8:	228e      	movs	r2, #142	@ 0x8e
 8000aea:	73da      	strb	r2, [r3, #15]
	_LED_0F[16] = 0xC2; //G
 8000aec:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <init_fnd+0xbc>)
 8000aee:	22c2      	movs	r2, #194	@ 0xc2
 8000af0:	741a      	strb	r2, [r3, #16]
	_LED_0F[17] = 0x89; //H
 8000af2:	4b14      	ldr	r3, [pc, #80]	@ (8000b44 <init_fnd+0xbc>)
 8000af4:	2289      	movs	r2, #137	@ 0x89
 8000af6:	745a      	strb	r2, [r3, #17]
	_LED_0F[18] = 0xF9; //I
 8000af8:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <init_fnd+0xbc>)
 8000afa:	22f9      	movs	r2, #249	@ 0xf9
 8000afc:	749a      	strb	r2, [r3, #18]
	_LED_0F[19] = 0xF1; //J
 8000afe:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <init_fnd+0xbc>)
 8000b00:	22f1      	movs	r2, #241	@ 0xf1
 8000b02:	74da      	strb	r2, [r3, #19]
	_LED_0F[20] = 0xC3; //L
 8000b04:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <init_fnd+0xbc>)
 8000b06:	22c3      	movs	r2, #195	@ 0xc3
 8000b08:	751a      	strb	r2, [r3, #20]
	_LED_0F[21] = 0xA9; //n
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b44 <init_fnd+0xbc>)
 8000b0c:	22a9      	movs	r2, #169	@ 0xa9
 8000b0e:	755a      	strb	r2, [r3, #21]
	_LED_0F[22] = 0xC0; //O
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <init_fnd+0xbc>)
 8000b12:	22c0      	movs	r2, #192	@ 0xc0
 8000b14:	759a      	strb	r2, [r3, #22]
	_LED_0F[23] = 0x8C; //P
 8000b16:	4b0b      	ldr	r3, [pc, #44]	@ (8000b44 <init_fnd+0xbc>)
 8000b18:	228c      	movs	r2, #140	@ 0x8c
 8000b1a:	75da      	strb	r2, [r3, #23]
	_LED_0F[24] = 0x98; //q
 8000b1c:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <init_fnd+0xbc>)
 8000b1e:	2298      	movs	r2, #152	@ 0x98
 8000b20:	761a      	strb	r2, [r3, #24]
	_LED_0F[25] = 0x92; //S
 8000b22:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <init_fnd+0xbc>)
 8000b24:	2292      	movs	r2, #146	@ 0x92
 8000b26:	765a      	strb	r2, [r3, #25]
	_LED_0F[26] = 0xC1; //U
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <init_fnd+0xbc>)
 8000b2a:	22c1      	movs	r2, #193	@ 0xc1
 8000b2c:	769a      	strb	r2, [r3, #26]
	_LED_0F[27] = 0x91; //Y
 8000b2e:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <init_fnd+0xbc>)
 8000b30:	2291      	movs	r2, #145	@ 0x91
 8000b32:	76da      	strb	r2, [r3, #27]
	_LED_0F[28] = 0xFE; //hight -
 8000b34:	4b03      	ldr	r3, [pc, #12]	@ (8000b44 <init_fnd+0xbc>)
 8000b36:	22fe      	movs	r2, #254	@ 0xfe
 8000b38:	771a      	strb	r2, [r3, #28]
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	200001f0 	.word	0x200001f0

08000b48 <send>:

void send(uint8_t X){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
	for (int i = 8; i >= 1; i--) {
 8000b52:	2308      	movs	r3, #8
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	e022      	b.n	8000b9e <send+0x56>
		if (X & 0x80) {
 8000b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	da06      	bge.n	8000b6e <send+0x26>
			HAL_GPIO_WritePin(FND_DIO_GPIO_Port, FND_DIO_Pin, HIGH);
 8000b60:	2201      	movs	r2, #1
 8000b62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b66:	4812      	ldr	r0, [pc, #72]	@ (8000bb0 <send+0x68>)
 8000b68:	f000 fe42 	bl	80017f0 <HAL_GPIO_WritePin>
 8000b6c:	e005      	b.n	8000b7a <send+0x32>
		} else {
			HAL_GPIO_WritePin(FND_DIO_GPIO_Port, FND_DIO_Pin, LOW);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b74:	480e      	ldr	r0, [pc, #56]	@ (8000bb0 <send+0x68>)
 8000b76:	f000 fe3b 	bl	80017f0 <HAL_GPIO_WritePin>
		}
		X <<= 1;
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, LOW);
 8000b80:	2200      	movs	r2, #0
 8000b82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b86:	480a      	ldr	r0, [pc, #40]	@ (8000bb0 <send+0x68>)
 8000b88:	f000 fe32 	bl	80017f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, HIGH);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b92:	4807      	ldr	r0, [pc, #28]	@ (8000bb0 <send+0x68>)
 8000b94:	f000 fe2c 	bl	80017f0 <HAL_GPIO_WritePin>
	for (int i = 8; i >= 1; i--) {
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	dcd9      	bgt.n	8000b58 <send+0x10>
	}
}
 8000ba4:	bf00      	nop
 8000ba6:	bf00      	nop
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40010c00 	.word	0x40010c00

08000bb4 <send_port>:

void send_port(uint8_t X, uint8_t port){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	460a      	mov	r2, r1
 8000bbe:	71fb      	strb	r3, [r7, #7]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	71bb      	strb	r3, [r7, #6]
	send(X);
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff ffbe 	bl	8000b48 <send>
	send(port);
 8000bcc:	79bb      	ldrb	r3, [r7, #6]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ffba 	bl	8000b48 <send>
	HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, LOW);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bda:	4806      	ldr	r0, [pc, #24]	@ (8000bf4 <send_port+0x40>)
 8000bdc:	f000 fe08 	bl	80017f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, HIGH);
 8000be0:	2201      	movs	r2, #1
 8000be2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000be6:	4803      	ldr	r0, [pc, #12]	@ (8000bf4 <send_port+0x40>)
 8000be8:	f000 fe02 	bl	80017f0 <HAL_GPIO_WritePin>
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40010c00 	.word	0x40010c00

08000bf8 <digit4_temper>:
			send_port(_LED_0F[n4], 0b1000);
		}
	}
}

void digit4_temper(int n, int replay) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
	int n1, n2, n3, n4;

	n1 = (int) n % 10;
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	4b3e      	ldr	r3, [pc, #248]	@ (8000d00 <digit4_temper+0x108>)
 8000c06:	fb83 1302 	smull	r1, r3, r3, r2
 8000c0a:	1099      	asrs	r1, r3, #2
 8000c0c:	17d3      	asrs	r3, r2, #31
 8000c0e:	1ac9      	subs	r1, r1, r3
 8000c10:	460b      	mov	r3, r1
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	440b      	add	r3, r1
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	61bb      	str	r3, [r7, #24]
	n2 = (int) ((n % 100)) / 10;
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	4b39      	ldr	r3, [pc, #228]	@ (8000d04 <digit4_temper+0x10c>)
 8000c20:	fb83 1302 	smull	r1, r3, r3, r2
 8000c24:	1159      	asrs	r1, r3, #5
 8000c26:	17d3      	asrs	r3, r2, #31
 8000c28:	1acb      	subs	r3, r1, r3
 8000c2a:	2164      	movs	r1, #100	@ 0x64
 8000c2c:	fb01 f303 	mul.w	r3, r1, r3
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	4a33      	ldr	r2, [pc, #204]	@ (8000d00 <digit4_temper+0x108>)
 8000c34:	fb82 1203 	smull	r1, r2, r2, r3
 8000c38:	1092      	asrs	r2, r2, #2
 8000c3a:	17db      	asrs	r3, r3, #31
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	617b      	str	r3, [r7, #20]
	n3 = (int) ((n % 1000)) / 100;
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	4b31      	ldr	r3, [pc, #196]	@ (8000d08 <digit4_temper+0x110>)
 8000c44:	fb83 1302 	smull	r1, r3, r3, r2
 8000c48:	1199      	asrs	r1, r3, #6
 8000c4a:	17d3      	asrs	r3, r2, #31
 8000c4c:	1acb      	subs	r3, r1, r3
 8000c4e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c52:	fb01 f303 	mul.w	r3, r1, r3
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	4a2a      	ldr	r2, [pc, #168]	@ (8000d04 <digit4_temper+0x10c>)
 8000c5a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c5e:	1152      	asrs	r2, r2, #5
 8000c60:	17db      	asrs	r3, r3, #31
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	613b      	str	r3, [r7, #16]
	n4 = (int) ((n % 10000)) / 1000;
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	4b28      	ldr	r3, [pc, #160]	@ (8000d0c <digit4_temper+0x114>)
 8000c6a:	fb83 1302 	smull	r1, r3, r3, r2
 8000c6e:	1319      	asrs	r1, r3, #12
 8000c70:	17d3      	asrs	r3, r2, #31
 8000c72:	1acb      	subs	r3, r1, r3
 8000c74:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000c78:	fb01 f303 	mul.w	r3, r1, r3
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	4a22      	ldr	r2, [pc, #136]	@ (8000d08 <digit4_temper+0x110>)
 8000c80:	fb82 1203 	smull	r1, r2, r2, r3
 8000c84:	1192      	asrs	r2, r2, #6
 8000c86:	17db      	asrs	r3, r3, #31
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i <= replay; i++) {
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
 8000c90:	e02c      	b.n	8000cec <digit4_temper+0xf4>
		send_port(_LED_0F[n1], 0b0001);
 8000c92:	4a1f      	ldr	r2, [pc, #124]	@ (8000d10 <digit4_temper+0x118>)
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	4413      	add	r3, r2
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ff89 	bl	8000bb4 <send_port>
		send_port(_LED_0F[n2] & 0x7F, 0b0010);
 8000ca2:	4a1b      	ldr	r2, [pc, #108]	@ (8000d10 <digit4_temper+0x118>)
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	2102      	movs	r1, #2
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff7e 	bl	8000bb4 <send_port>
		if (n > 99){
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b63      	cmp	r3, #99	@ 0x63
 8000cbc:	dd07      	ble.n	8000cce <digit4_temper+0xd6>
			send_port(_LED_0F[n3], 0b0100);
 8000cbe:	4a14      	ldr	r2, [pc, #80]	@ (8000d10 <digit4_temper+0x118>)
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2104      	movs	r1, #4
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff73 	bl	8000bb4 <send_port>
		}
		if (n > 999){
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000cd4:	db07      	blt.n	8000ce6 <digit4_temper+0xee>
			send_port(_LED_0F[n4], 0b1000);
 8000cd6:	4a0e      	ldr	r2, [pc, #56]	@ (8000d10 <digit4_temper+0x118>)
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	4413      	add	r3, r2
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2108      	movs	r1, #8
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff67 	bl	8000bb4 <send_port>
	for (int i = 0; i <= replay; i++) {
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	61fb      	str	r3, [r7, #28]
 8000cec:	69fa      	ldr	r2, [r7, #28]
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	ddce      	ble.n	8000c92 <digit4_temper+0x9a>
		}
	}
}
 8000cf4:	bf00      	nop
 8000cf6:	bf00      	nop
 8000cf8:	3720      	adds	r7, #32
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	66666667 	.word	0x66666667
 8000d04:	51eb851f 	.word	0x51eb851f
 8000d08:	10624dd3 	.word	0x10624dd3
 8000d0c:	68db8bad 	.word	0x68db8bad
 8000d10:	200001f0 	.word	0x200001f0

08000d14 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char * p, int len){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)p, len, 1000);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d28:	68b9      	ldr	r1, [r7, #8]
 8000d2a:	4804      	ldr	r0, [pc, #16]	@ (8000d3c <_write+0x28>)
 8000d2c:	f001 f9d8 	bl	80020e0 <HAL_UART_Transmit>
	return len;
 8000d30:	687b      	ldr	r3, [r7, #4]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000210 	.word	0x20000210

08000d40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d46:	f000 fa89 	bl	800125c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4a:	f000 f816 	bl	8000d7a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d4e:	f000 f879 	bl	8000e44 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d52:	f000 f84d 	bl	8000df0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  init_fnd();
 8000d56:	f7ff fe97 	bl	8000a88 <init_fnd>
//	  }
//	  for(int i=0; i<9999; i++){
//		  digit4_replay(i, 50);
//	  }

	  for(int i=0; i<9999; i++){
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	e006      	b.n	8000d6e <main+0x2e>
		  digit4_temper(i, 50);
 8000d60:	2132      	movs	r1, #50	@ 0x32
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff ff48 	bl	8000bf8 <digit4_temper>
	  for(int i=0; i<9999; i++){
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f242 720e 	movw	r2, #9998	@ 0x270e
 8000d74:	4293      	cmp	r3, r2
 8000d76:	ddf3      	ble.n	8000d60 <main+0x20>
 8000d78:	e7ef      	b.n	8000d5a <main+0x1a>

08000d7a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b090      	sub	sp, #64	@ 0x40
 8000d7e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d80:	f107 0318 	add.w	r3, r7, #24
 8000d84:	2228      	movs	r2, #40	@ 0x28
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f002 f8de 	bl	8002f4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da0:	2301      	movs	r3, #1
 8000da2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da4:	2310      	movs	r3, #16
 8000da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dac:	f107 0318 	add.w	r3, r7, #24
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 fd35 	bl	8001820 <HAL_RCC_OscConfig>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000dbc:	f000 f8cc 	bl	8000f58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc0:	230f      	movs	r3, #15
 8000dc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 ffa3 	bl	8001d24 <HAL_RCC_ClockConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000de4:	f000 f8b8 	bl	8000f58 <Error_Handler>
  }
}
 8000de8:	bf00      	nop
 8000dea:	3740      	adds	r7, #64	@ 0x40
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000df4:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000df6:	4a12      	ldr	r2, [pc, #72]	@ (8000e40 <MX_USART1_UART_Init+0x50>)
 8000df8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dfa:	4b10      	ldr	r3, [pc, #64]	@ (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000dfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e02:	4b0e      	ldr	r3, [pc, #56]	@ (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e08:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e14:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e16:	220c      	movs	r2, #12
 8000e18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1a:	4b08      	ldr	r3, [pc, #32]	@ (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e20:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e26:	4805      	ldr	r0, [pc, #20]	@ (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e28:	f001 f90a 	bl	8002040 <HAL_UART_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e32:	f000 f891 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000210 	.word	0x20000210
 8000e40:	40013800 	.word	0x40013800

08000e44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4a:	f107 0310 	add.w	r3, r7, #16
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e58:	4b3b      	ldr	r3, [pc, #236]	@ (8000f48 <MX_GPIO_Init+0x104>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	4a3a      	ldr	r2, [pc, #232]	@ (8000f48 <MX_GPIO_Init+0x104>)
 8000e5e:	f043 0310 	orr.w	r3, r3, #16
 8000e62:	6193      	str	r3, [r2, #24]
 8000e64:	4b38      	ldr	r3, [pc, #224]	@ (8000f48 <MX_GPIO_Init+0x104>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f003 0310 	and.w	r3, r3, #16
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e70:	4b35      	ldr	r3, [pc, #212]	@ (8000f48 <MX_GPIO_Init+0x104>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	4a34      	ldr	r2, [pc, #208]	@ (8000f48 <MX_GPIO_Init+0x104>)
 8000e76:	f043 0304 	orr.w	r3, r3, #4
 8000e7a:	6193      	str	r3, [r2, #24]
 8000e7c:	4b32      	ldr	r3, [pc, #200]	@ (8000f48 <MX_GPIO_Init+0x104>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e88:	4b2f      	ldr	r3, [pc, #188]	@ (8000f48 <MX_GPIO_Init+0x104>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	4a2e      	ldr	r2, [pc, #184]	@ (8000f48 <MX_GPIO_Init+0x104>)
 8000e8e:	f043 0308 	orr.w	r3, r3, #8
 8000e92:	6193      	str	r3, [r2, #24]
 8000e94:	4b2c      	ldr	r3, [pc, #176]	@ (8000f48 <MX_GPIO_Init+0x104>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	f003 0308 	and.w	r3, r3, #8
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ea6:	4829      	ldr	r0, [pc, #164]	@ (8000f4c <MX_GPIO_Init+0x108>)
 8000ea8:	f000 fca2 	bl	80017f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FND_SCLK_Pin|FND_RCLK_Pin|FND_DIO_Pin|PB6_LED1_Pin, GPIO_PIN_SET);
 8000eac:	2201      	movs	r2, #1
 8000eae:	f24e 0140 	movw	r1, #57408	@ 0xe040
 8000eb2:	4827      	ldr	r0, [pc, #156]	@ (8000f50 <MX_GPIO_Init+0x10c>)
 8000eb4:	f000 fc9c 	bl	80017f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 8000eb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ebc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 8000eca:	f107 0310 	add.w	r3, r7, #16
 8000ece:	4619      	mov	r1, r3
 8000ed0:	481e      	ldr	r0, [pc, #120]	@ (8000f4c <MX_GPIO_Init+0x108>)
 8000ed2:	f000 fb09 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_SWITCH_Pin */
  GPIO_InitStruct.Pin = GPIO_SWITCH_Pin;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000ee2:	f107 0310 	add.w	r3, r7, #16
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	481a      	ldr	r0, [pc, #104]	@ (8000f54 <MX_GPIO_Init+0x110>)
 8000eea:	f000 fafd 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0_TEMP_SET_UP_Pin */
  GPIO_InitStruct.Pin = PB0_TEMP_SET_UP_Pin;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PB0_TEMP_SET_UP_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 0310 	add.w	r3, r7, #16
 8000efe:	4619      	mov	r1, r3
 8000f00:	4813      	ldr	r0, [pc, #76]	@ (8000f50 <MX_GPIO_Init+0x10c>)
 8000f02:	f000 faf1 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FND_SCLK_Pin FND_RCLK_Pin FND_DIO_Pin */
  GPIO_InitStruct.Pin = FND_SCLK_Pin|FND_RCLK_Pin|FND_DIO_Pin;
 8000f06:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000f0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f10:	2301      	movs	r3, #1
 8000f12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f14:	2303      	movs	r3, #3
 8000f16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480c      	ldr	r0, [pc, #48]	@ (8000f50 <MX_GPIO_Init+0x10c>)
 8000f20:	f000 fae2 	bl	80014e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6_LED1_Pin */
  GPIO_InitStruct.Pin = PB6_LED1_Pin;
 8000f24:	2340      	movs	r3, #64	@ 0x40
 8000f26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2302      	movs	r3, #2
 8000f32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB6_LED1_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4805      	ldr	r0, [pc, #20]	@ (8000f50 <MX_GPIO_Init+0x10c>)
 8000f3c:	f000 fad4 	bl	80014e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f40:	bf00      	nop
 8000f42:	3720      	adds	r7, #32
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	40011000 	.word	0x40011000
 8000f50:	40010c00 	.word	0x40010c00
 8000f54:	40010800 	.word	0x40010800

08000f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f5c:	b672      	cpsid	i
}
 8000f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <Error_Handler+0x8>

08000f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f6a:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <HAL_MspInit+0x5c>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	4a14      	ldr	r2, [pc, #80]	@ (8000fc0 <HAL_MspInit+0x5c>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6193      	str	r3, [r2, #24]
 8000f76:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <HAL_MspInit+0x5c>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f82:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc0 <HAL_MspInit+0x5c>)
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	4a0e      	ldr	r2, [pc, #56]	@ (8000fc0 <HAL_MspInit+0x5c>)
 8000f88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f8c:	61d3      	str	r3, [r2, #28]
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <HAL_MspInit+0x5c>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <HAL_MspInit+0x60>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	4a04      	ldr	r2, [pc, #16]	@ (8000fc4 <HAL_MspInit+0x60>)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40010000 	.word	0x40010000

08000fc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0310 	add.w	r3, r7, #16
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a1c      	ldr	r2, [pc, #112]	@ (8001054 <HAL_UART_MspInit+0x8c>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d131      	bne.n	800104c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8001058 <HAL_UART_MspInit+0x90>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a1a      	ldr	r2, [pc, #104]	@ (8001058 <HAL_UART_MspInit+0x90>)
 8000fee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <HAL_UART_MspInit+0x90>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001000:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <HAL_UART_MspInit+0x90>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a14      	ldr	r2, [pc, #80]	@ (8001058 <HAL_UART_MspInit+0x90>)
 8001006:	f043 0304 	orr.w	r3, r3, #4
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <HAL_UART_MspInit+0x90>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001018:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800101c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001022:	2303      	movs	r3, #3
 8001024:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001026:	f107 0310 	add.w	r3, r7, #16
 800102a:	4619      	mov	r1, r3
 800102c:	480b      	ldr	r0, [pc, #44]	@ (800105c <HAL_UART_MspInit+0x94>)
 800102e:	f000 fa5b 	bl	80014e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001032:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001036:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	4619      	mov	r1, r3
 8001046:	4805      	ldr	r0, [pc, #20]	@ (800105c <HAL_UART_MspInit+0x94>)
 8001048:	f000 fa4e 	bl	80014e8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800104c:	bf00      	nop
 800104e:	3720      	adds	r7, #32
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40013800 	.word	0x40013800
 8001058:	40021000 	.word	0x40021000
 800105c:	40010800 	.word	0x40010800

08001060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <NMI_Handler+0x4>

08001068 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <HardFault_Handler+0x4>

08001070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <MemManage_Handler+0x4>

08001078 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <BusFault_Handler+0x4>

08001080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <UsageFault_Handler+0x4>

08001088 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr

08001094 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr

080010a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b0:	f000 f91a 	bl	80012e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return 1;
 80010bc:	2301      	movs	r3, #1
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr

080010c6 <_kill>:

int _kill(int pid, int sig)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
 80010ce:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010d0:	f001 ff8e 	bl	8002ff0 <__errno>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2216      	movs	r2, #22
 80010d8:	601a      	str	r2, [r3, #0]
  return -1;
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <_exit>:

void _exit (int status)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010ee:	f04f 31ff 	mov.w	r1, #4294967295
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ffe7 	bl	80010c6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <_exit+0x12>

080010fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	e00a      	b.n	8001124 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800110e:	f3af 8000 	nop.w
 8001112:	4601      	mov	r1, r0
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	60ba      	str	r2, [r7, #8]
 800111a:	b2ca      	uxtb	r2, r1
 800111c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	3301      	adds	r3, #1
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	dbf0      	blt.n	800110e <_read+0x12>
  }

  return len;
 800112c:	687b      	ldr	r3, [r7, #4]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800115c:	605a      	str	r2, [r3, #4]
  return 0;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr

0800116a <_isatty>:

int _isatty(int file)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001172:	2301      	movs	r3, #1
}
 8001174:	4618      	mov	r0, r3
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr

0800117e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800117e:	b480      	push	{r7}
 8001180:	b085      	sub	sp, #20
 8001182:	af00      	add	r7, sp, #0
 8001184:	60f8      	str	r0, [r7, #12]
 8001186:	60b9      	str	r1, [r7, #8]
 8001188:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr
	...

08001198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a0:	4a14      	ldr	r2, [pc, #80]	@ (80011f4 <_sbrk+0x5c>)
 80011a2:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <_sbrk+0x60>)
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011ac:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b4:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <_sbrk+0x64>)
 80011b6:	4a12      	ldr	r2, [pc, #72]	@ (8001200 <_sbrk+0x68>)
 80011b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ba:	4b10      	ldr	r3, [pc, #64]	@ (80011fc <_sbrk+0x64>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d207      	bcs.n	80011d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c8:	f001 ff12 	bl	8002ff0 <__errno>
 80011cc:	4603      	mov	r3, r0
 80011ce:	220c      	movs	r2, #12
 80011d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
 80011d6:	e009      	b.n	80011ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d8:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011de:	4b07      	ldr	r3, [pc, #28]	@ (80011fc <_sbrk+0x64>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	4a05      	ldr	r2, [pc, #20]	@ (80011fc <_sbrk+0x64>)
 80011e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ea:	68fb      	ldr	r3, [r7, #12]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20005000 	.word	0x20005000
 80011f8:	00000400 	.word	0x00000400
 80011fc:	20000258 	.word	0x20000258
 8001200:	200003b0 	.word	0x200003b0

08001204 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001210:	f7ff fff8 	bl	8001204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001214:	480b      	ldr	r0, [pc, #44]	@ (8001244 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001216:	490c      	ldr	r1, [pc, #48]	@ (8001248 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001218:	4a0c      	ldr	r2, [pc, #48]	@ (800124c <LoopFillZerobss+0x16>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800121c:	e002      	b.n	8001224 <LoopCopyDataInit>

0800121e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001222:	3304      	adds	r3, #4

08001224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001228:	d3f9      	bcc.n	800121e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122a:	4a09      	ldr	r2, [pc, #36]	@ (8001250 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800122c:	4c09      	ldr	r4, [pc, #36]	@ (8001254 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001230:	e001      	b.n	8001236 <LoopFillZerobss>

08001232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001234:	3204      	adds	r2, #4

08001236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001238:	d3fb      	bcc.n	8001232 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800123a:	f001 fedf 	bl	8002ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800123e:	f7ff fd7f 	bl	8000d40 <main>
  bx lr
 8001242:	4770      	bx	lr
  ldr r0, =_sdata
 8001244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001248:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800124c:	08005160 	.word	0x08005160
  ldr r2, =_sbss
 8001250:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001254:	200003ac 	.word	0x200003ac

08001258 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <ADC1_2_IRQHandler>
	...

0800125c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001260:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <HAL_Init+0x28>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a07      	ldr	r2, [pc, #28]	@ (8001284 <HAL_Init+0x28>)
 8001266:	f043 0310 	orr.w	r3, r3, #16
 800126a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800126c:	2003      	movs	r0, #3
 800126e:	f000 f907 	bl	8001480 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001272:	200f      	movs	r0, #15
 8001274:	f000 f808 	bl	8001288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001278:	f7ff fe74 	bl	8000f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40022000 	.word	0x40022000

08001288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001290:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <HAL_InitTick+0x54>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <HAL_InitTick+0x58>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4619      	mov	r1, r3
 800129a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800129e:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f911 	bl	80014ce <HAL_SYSTICK_Config>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00e      	b.n	80012d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b0f      	cmp	r3, #15
 80012ba:	d80a      	bhi.n	80012d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012bc:	2200      	movs	r2, #0
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f000 f8e7 	bl	8001496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c8:	4a06      	ldr	r2, [pc, #24]	@ (80012e4 <HAL_InitTick+0x5c>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	e000      	b.n	80012d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000000 	.word	0x20000000
 80012e0:	20000008 	.word	0x20000008
 80012e4:	20000004 	.word	0x20000004

080012e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ec:	4b05      	ldr	r3, [pc, #20]	@ (8001304 <HAL_IncTick+0x1c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b05      	ldr	r3, [pc, #20]	@ (8001308 <HAL_IncTick+0x20>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4413      	add	r3, r2
 80012f8:	4a03      	ldr	r2, [pc, #12]	@ (8001308 <HAL_IncTick+0x20>)
 80012fa:	6013      	str	r3, [r2, #0]
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	20000008 	.word	0x20000008
 8001308:	2000025c 	.word	0x2000025c

0800130c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return uwTick;
 8001310:	4b02      	ldr	r3, [pc, #8]	@ (800131c <HAL_GetTick+0x10>)
 8001312:	681b      	ldr	r3, [r3, #0]
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	2000025c 	.word	0x2000025c

08001320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001330:	4b0c      	ldr	r3, [pc, #48]	@ (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800133c:	4013      	ands	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001348:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800134c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001352:	4a04      	ldr	r2, [pc, #16]	@ (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	60d3      	str	r3, [r2, #12]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800136c:	4b04      	ldr	r3, [pc, #16]	@ (8001380 <__NVIC_GetPriorityGrouping+0x18>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	f003 0307 	and.w	r3, r3, #7
}
 8001376:	4618      	mov	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	db0a      	blt.n	80013ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	490c      	ldr	r1, [pc, #48]	@ (80013d0 <__NVIC_SetPriority+0x4c>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	0112      	lsls	r2, r2, #4
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	440b      	add	r3, r1
 80013a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ac:	e00a      	b.n	80013c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4908      	ldr	r1, [pc, #32]	@ (80013d4 <__NVIC_SetPriority+0x50>)
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	3b04      	subs	r3, #4
 80013bc:	0112      	lsls	r2, r2, #4
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	440b      	add	r3, r1
 80013c2:	761a      	strb	r2, [r3, #24]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000e100 	.word	0xe000e100
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b089      	sub	sp, #36	@ 0x24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f1c3 0307 	rsb	r3, r3, #7
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	bf28      	it	cs
 80013f6:	2304      	movcs	r3, #4
 80013f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3304      	adds	r3, #4
 80013fe:	2b06      	cmp	r3, #6
 8001400:	d902      	bls.n	8001408 <NVIC_EncodePriority+0x30>
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3b03      	subs	r3, #3
 8001406:	e000      	b.n	800140a <NVIC_EncodePriority+0x32>
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	f04f 32ff 	mov.w	r2, #4294967295
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43da      	mvns	r2, r3
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	401a      	ands	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001420:	f04f 31ff 	mov.w	r1, #4294967295
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	43d9      	mvns	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	4313      	orrs	r3, r2
         );
}
 8001432:	4618      	mov	r0, r3
 8001434:	3724      	adds	r7, #36	@ 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800144c:	d301      	bcc.n	8001452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144e:	2301      	movs	r3, #1
 8001450:	e00f      	b.n	8001472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001452:	4a0a      	ldr	r2, [pc, #40]	@ (800147c <SysTick_Config+0x40>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145a:	210f      	movs	r1, #15
 800145c:	f04f 30ff 	mov.w	r0, #4294967295
 8001460:	f7ff ff90 	bl	8001384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001464:	4b05      	ldr	r3, [pc, #20]	@ (800147c <SysTick_Config+0x40>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146a:	4b04      	ldr	r3, [pc, #16]	@ (800147c <SysTick_Config+0x40>)
 800146c:	2207      	movs	r2, #7
 800146e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	e000e010 	.word	0xe000e010

08001480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ff49 	bl	8001320 <__NVIC_SetPriorityGrouping>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001496:	b580      	push	{r7, lr}
 8001498:	b086      	sub	sp, #24
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a8:	f7ff ff5e 	bl	8001368 <__NVIC_GetPriorityGrouping>
 80014ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	68b9      	ldr	r1, [r7, #8]
 80014b2:	6978      	ldr	r0, [r7, #20]
 80014b4:	f7ff ff90 	bl	80013d8 <NVIC_EncodePriority>
 80014b8:	4602      	mov	r2, r0
 80014ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff5f 	bl	8001384 <__NVIC_SetPriority>
}
 80014c6:	bf00      	nop
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ffb0 	bl	800143c <SysTick_Config>
 80014dc:	4603      	mov	r3, r0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b08b      	sub	sp, #44	@ 0x2c
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014f2:	2300      	movs	r3, #0
 80014f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014f6:	2300      	movs	r3, #0
 80014f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014fa:	e169      	b.n	80017d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014fc:	2201      	movs	r2, #1
 80014fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	69fa      	ldr	r2, [r7, #28]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	429a      	cmp	r2, r3
 8001516:	f040 8158 	bne.w	80017ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	4a9a      	ldr	r2, [pc, #616]	@ (8001788 <HAL_GPIO_Init+0x2a0>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d05e      	beq.n	80015e2 <HAL_GPIO_Init+0xfa>
 8001524:	4a98      	ldr	r2, [pc, #608]	@ (8001788 <HAL_GPIO_Init+0x2a0>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d875      	bhi.n	8001616 <HAL_GPIO_Init+0x12e>
 800152a:	4a98      	ldr	r2, [pc, #608]	@ (800178c <HAL_GPIO_Init+0x2a4>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d058      	beq.n	80015e2 <HAL_GPIO_Init+0xfa>
 8001530:	4a96      	ldr	r2, [pc, #600]	@ (800178c <HAL_GPIO_Init+0x2a4>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d86f      	bhi.n	8001616 <HAL_GPIO_Init+0x12e>
 8001536:	4a96      	ldr	r2, [pc, #600]	@ (8001790 <HAL_GPIO_Init+0x2a8>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d052      	beq.n	80015e2 <HAL_GPIO_Init+0xfa>
 800153c:	4a94      	ldr	r2, [pc, #592]	@ (8001790 <HAL_GPIO_Init+0x2a8>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d869      	bhi.n	8001616 <HAL_GPIO_Init+0x12e>
 8001542:	4a94      	ldr	r2, [pc, #592]	@ (8001794 <HAL_GPIO_Init+0x2ac>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d04c      	beq.n	80015e2 <HAL_GPIO_Init+0xfa>
 8001548:	4a92      	ldr	r2, [pc, #584]	@ (8001794 <HAL_GPIO_Init+0x2ac>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d863      	bhi.n	8001616 <HAL_GPIO_Init+0x12e>
 800154e:	4a92      	ldr	r2, [pc, #584]	@ (8001798 <HAL_GPIO_Init+0x2b0>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d046      	beq.n	80015e2 <HAL_GPIO_Init+0xfa>
 8001554:	4a90      	ldr	r2, [pc, #576]	@ (8001798 <HAL_GPIO_Init+0x2b0>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d85d      	bhi.n	8001616 <HAL_GPIO_Init+0x12e>
 800155a:	2b12      	cmp	r3, #18
 800155c:	d82a      	bhi.n	80015b4 <HAL_GPIO_Init+0xcc>
 800155e:	2b12      	cmp	r3, #18
 8001560:	d859      	bhi.n	8001616 <HAL_GPIO_Init+0x12e>
 8001562:	a201      	add	r2, pc, #4	@ (adr r2, 8001568 <HAL_GPIO_Init+0x80>)
 8001564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001568:	080015e3 	.word	0x080015e3
 800156c:	080015bd 	.word	0x080015bd
 8001570:	080015cf 	.word	0x080015cf
 8001574:	08001611 	.word	0x08001611
 8001578:	08001617 	.word	0x08001617
 800157c:	08001617 	.word	0x08001617
 8001580:	08001617 	.word	0x08001617
 8001584:	08001617 	.word	0x08001617
 8001588:	08001617 	.word	0x08001617
 800158c:	08001617 	.word	0x08001617
 8001590:	08001617 	.word	0x08001617
 8001594:	08001617 	.word	0x08001617
 8001598:	08001617 	.word	0x08001617
 800159c:	08001617 	.word	0x08001617
 80015a0:	08001617 	.word	0x08001617
 80015a4:	08001617 	.word	0x08001617
 80015a8:	08001617 	.word	0x08001617
 80015ac:	080015c5 	.word	0x080015c5
 80015b0:	080015d9 	.word	0x080015d9
 80015b4:	4a79      	ldr	r2, [pc, #484]	@ (800179c <HAL_GPIO_Init+0x2b4>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d013      	beq.n	80015e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015ba:	e02c      	b.n	8001616 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	623b      	str	r3, [r7, #32]
          break;
 80015c2:	e029      	b.n	8001618 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	3304      	adds	r3, #4
 80015ca:	623b      	str	r3, [r7, #32]
          break;
 80015cc:	e024      	b.n	8001618 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	3308      	adds	r3, #8
 80015d4:	623b      	str	r3, [r7, #32]
          break;
 80015d6:	e01f      	b.n	8001618 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	330c      	adds	r3, #12
 80015de:	623b      	str	r3, [r7, #32]
          break;
 80015e0:	e01a      	b.n	8001618 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d102      	bne.n	80015f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015ea:	2304      	movs	r3, #4
 80015ec:	623b      	str	r3, [r7, #32]
          break;
 80015ee:	e013      	b.n	8001618 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d105      	bne.n	8001604 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015f8:	2308      	movs	r3, #8
 80015fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69fa      	ldr	r2, [r7, #28]
 8001600:	611a      	str	r2, [r3, #16]
          break;
 8001602:	e009      	b.n	8001618 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001604:	2308      	movs	r3, #8
 8001606:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69fa      	ldr	r2, [r7, #28]
 800160c:	615a      	str	r2, [r3, #20]
          break;
 800160e:	e003      	b.n	8001618 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001610:	2300      	movs	r3, #0
 8001612:	623b      	str	r3, [r7, #32]
          break;
 8001614:	e000      	b.n	8001618 <HAL_GPIO_Init+0x130>
          break;
 8001616:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	2bff      	cmp	r3, #255	@ 0xff
 800161c:	d801      	bhi.n	8001622 <HAL_GPIO_Init+0x13a>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	e001      	b.n	8001626 <HAL_GPIO_Init+0x13e>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3304      	adds	r3, #4
 8001626:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	2bff      	cmp	r3, #255	@ 0xff
 800162c:	d802      	bhi.n	8001634 <HAL_GPIO_Init+0x14c>
 800162e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	e002      	b.n	800163a <HAL_GPIO_Init+0x152>
 8001634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001636:	3b08      	subs	r3, #8
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	210f      	movs	r1, #15
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	fa01 f303 	lsl.w	r3, r1, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	401a      	ands	r2, r3
 800164c:	6a39      	ldr	r1, [r7, #32]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	fa01 f303 	lsl.w	r3, r1, r3
 8001654:	431a      	orrs	r2, r3
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 80b1 	beq.w	80017ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001668:	4b4d      	ldr	r3, [pc, #308]	@ (80017a0 <HAL_GPIO_Init+0x2b8>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	4a4c      	ldr	r2, [pc, #304]	@ (80017a0 <HAL_GPIO_Init+0x2b8>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6193      	str	r3, [r2, #24]
 8001674:	4b4a      	ldr	r3, [pc, #296]	@ (80017a0 <HAL_GPIO_Init+0x2b8>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001680:	4a48      	ldr	r2, [pc, #288]	@ (80017a4 <HAL_GPIO_Init+0x2bc>)
 8001682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001684:	089b      	lsrs	r3, r3, #2
 8001686:	3302      	adds	r3, #2
 8001688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800168e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	220f      	movs	r2, #15
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	4013      	ands	r3, r2
 80016a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a40      	ldr	r2, [pc, #256]	@ (80017a8 <HAL_GPIO_Init+0x2c0>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d013      	beq.n	80016d4 <HAL_GPIO_Init+0x1ec>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a3f      	ldr	r2, [pc, #252]	@ (80017ac <HAL_GPIO_Init+0x2c4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d00d      	beq.n	80016d0 <HAL_GPIO_Init+0x1e8>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a3e      	ldr	r2, [pc, #248]	@ (80017b0 <HAL_GPIO_Init+0x2c8>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d007      	beq.n	80016cc <HAL_GPIO_Init+0x1e4>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a3d      	ldr	r2, [pc, #244]	@ (80017b4 <HAL_GPIO_Init+0x2cc>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d101      	bne.n	80016c8 <HAL_GPIO_Init+0x1e0>
 80016c4:	2303      	movs	r3, #3
 80016c6:	e006      	b.n	80016d6 <HAL_GPIO_Init+0x1ee>
 80016c8:	2304      	movs	r3, #4
 80016ca:	e004      	b.n	80016d6 <HAL_GPIO_Init+0x1ee>
 80016cc:	2302      	movs	r3, #2
 80016ce:	e002      	b.n	80016d6 <HAL_GPIO_Init+0x1ee>
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <HAL_GPIO_Init+0x1ee>
 80016d4:	2300      	movs	r3, #0
 80016d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016d8:	f002 0203 	and.w	r2, r2, #3
 80016dc:	0092      	lsls	r2, r2, #2
 80016de:	4093      	lsls	r3, r2
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016e6:	492f      	ldr	r1, [pc, #188]	@ (80017a4 <HAL_GPIO_Init+0x2bc>)
 80016e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ea:	089b      	lsrs	r3, r3, #2
 80016ec:	3302      	adds	r3, #2
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d006      	beq.n	800170e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001700:	4b2d      	ldr	r3, [pc, #180]	@ (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	492c      	ldr	r1, [pc, #176]	@ (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	608b      	str	r3, [r1, #8]
 800170c:	e006      	b.n	800171c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800170e:	4b2a      	ldr	r3, [pc, #168]	@ (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001710:	689a      	ldr	r2, [r3, #8]
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	43db      	mvns	r3, r3
 8001716:	4928      	ldr	r1, [pc, #160]	@ (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001718:	4013      	ands	r3, r2
 800171a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d006      	beq.n	8001736 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001728:	4b23      	ldr	r3, [pc, #140]	@ (80017b8 <HAL_GPIO_Init+0x2d0>)
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	4922      	ldr	r1, [pc, #136]	@ (80017b8 <HAL_GPIO_Init+0x2d0>)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	60cb      	str	r3, [r1, #12]
 8001734:	e006      	b.n	8001744 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001736:	4b20      	ldr	r3, [pc, #128]	@ (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001738:	68da      	ldr	r2, [r3, #12]
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	43db      	mvns	r3, r3
 800173e:	491e      	ldr	r1, [pc, #120]	@ (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001740:	4013      	ands	r3, r2
 8001742:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d006      	beq.n	800175e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001750:	4b19      	ldr	r3, [pc, #100]	@ (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	4918      	ldr	r1, [pc, #96]	@ (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
 800175c:	e006      	b.n	800176c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800175e:	4b16      	ldr	r3, [pc, #88]	@ (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	43db      	mvns	r3, r3
 8001766:	4914      	ldr	r1, [pc, #80]	@ (80017b8 <HAL_GPIO_Init+0x2d0>)
 8001768:	4013      	ands	r3, r2
 800176a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d021      	beq.n	80017bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001778:	4b0f      	ldr	r3, [pc, #60]	@ (80017b8 <HAL_GPIO_Init+0x2d0>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	490e      	ldr	r1, [pc, #56]	@ (80017b8 <HAL_GPIO_Init+0x2d0>)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	4313      	orrs	r3, r2
 8001782:	600b      	str	r3, [r1, #0]
 8001784:	e021      	b.n	80017ca <HAL_GPIO_Init+0x2e2>
 8001786:	bf00      	nop
 8001788:	10320000 	.word	0x10320000
 800178c:	10310000 	.word	0x10310000
 8001790:	10220000 	.word	0x10220000
 8001794:	10210000 	.word	0x10210000
 8001798:	10120000 	.word	0x10120000
 800179c:	10110000 	.word	0x10110000
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010000 	.word	0x40010000
 80017a8:	40010800 	.word	0x40010800
 80017ac:	40010c00 	.word	0x40010c00
 80017b0:	40011000 	.word	0x40011000
 80017b4:	40011400 	.word	0x40011400
 80017b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017bc:	4b0b      	ldr	r3, [pc, #44]	@ (80017ec <HAL_GPIO_Init+0x304>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	4909      	ldr	r1, [pc, #36]	@ (80017ec <HAL_GPIO_Init+0x304>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017cc:	3301      	adds	r3, #1
 80017ce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d6:	fa22 f303 	lsr.w	r3, r2, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f47f ae8e 	bne.w	80014fc <HAL_GPIO_Init+0x14>
  }
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	372c      	adds	r7, #44	@ 0x2c
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	40010400 	.word	0x40010400

080017f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	807b      	strh	r3, [r7, #2]
 80017fc:	4613      	mov	r3, r2
 80017fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001800:	787b      	ldrb	r3, [r7, #1]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001806:	887a      	ldrh	r2, [r7, #2]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800180c:	e003      	b.n	8001816 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800180e:	887b      	ldrh	r3, [r7, #2]
 8001810:	041a      	lsls	r2, r3, #16
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	611a      	str	r2, [r3, #16]
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr

08001820 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e272      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 8087 	beq.w	800194e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001840:	4b92      	ldr	r3, [pc, #584]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 030c 	and.w	r3, r3, #12
 8001848:	2b04      	cmp	r3, #4
 800184a:	d00c      	beq.n	8001866 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800184c:	4b8f      	ldr	r3, [pc, #572]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 030c 	and.w	r3, r3, #12
 8001854:	2b08      	cmp	r3, #8
 8001856:	d112      	bne.n	800187e <HAL_RCC_OscConfig+0x5e>
 8001858:	4b8c      	ldr	r3, [pc, #560]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001864:	d10b      	bne.n	800187e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001866:	4b89      	ldr	r3, [pc, #548]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d06c      	beq.n	800194c <HAL_RCC_OscConfig+0x12c>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d168      	bne.n	800194c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e24c      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001886:	d106      	bne.n	8001896 <HAL_RCC_OscConfig+0x76>
 8001888:	4b80      	ldr	r3, [pc, #512]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a7f      	ldr	r2, [pc, #508]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 800188e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	e02e      	b.n	80018f4 <HAL_RCC_OscConfig+0xd4>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10c      	bne.n	80018b8 <HAL_RCC_OscConfig+0x98>
 800189e:	4b7b      	ldr	r3, [pc, #492]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a7a      	ldr	r2, [pc, #488]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	4b78      	ldr	r3, [pc, #480]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a77      	ldr	r2, [pc, #476]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e01d      	b.n	80018f4 <HAL_RCC_OscConfig+0xd4>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018c0:	d10c      	bne.n	80018dc <HAL_RCC_OscConfig+0xbc>
 80018c2:	4b72      	ldr	r3, [pc, #456]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a71      	ldr	r2, [pc, #452]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	4b6f      	ldr	r3, [pc, #444]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a6e      	ldr	r2, [pc, #440]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e00b      	b.n	80018f4 <HAL_RCC_OscConfig+0xd4>
 80018dc:	4b6b      	ldr	r3, [pc, #428]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a6a      	ldr	r2, [pc, #424]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b68      	ldr	r3, [pc, #416]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a67      	ldr	r2, [pc, #412]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80018ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d013      	beq.n	8001924 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7ff fd06 	bl	800130c <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff fd02 	bl	800130c <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	@ 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e200      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001916:	4b5d      	ldr	r3, [pc, #372]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0xe4>
 8001922:	e014      	b.n	800194e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001924:	f7ff fcf2 	bl	800130c <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800192c:	f7ff fcee 	bl	800130c <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	@ 0x64
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e1ec      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193e:	4b53      	ldr	r3, [pc, #332]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x10c>
 800194a:	e000      	b.n	800194e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d063      	beq.n	8001a22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800195a:	4b4c      	ldr	r3, [pc, #304]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 030c 	and.w	r3, r3, #12
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00b      	beq.n	800197e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001966:	4b49      	ldr	r3, [pc, #292]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 030c 	and.w	r3, r3, #12
 800196e:	2b08      	cmp	r3, #8
 8001970:	d11c      	bne.n	80019ac <HAL_RCC_OscConfig+0x18c>
 8001972:	4b46      	ldr	r3, [pc, #280]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d116      	bne.n	80019ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197e:	4b43      	ldr	r3, [pc, #268]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d005      	beq.n	8001996 <HAL_RCC_OscConfig+0x176>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d001      	beq.n	8001996 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e1c0      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001996:	4b3d      	ldr	r3, [pc, #244]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	4939      	ldr	r1, [pc, #228]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019aa:	e03a      	b.n	8001a22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d020      	beq.n	80019f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b4:	4b36      	ldr	r3, [pc, #216]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ba:	f7ff fca7 	bl	800130c <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019c2:	f7ff fca3 	bl	800130c <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e1a1      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	4927      	ldr	r1, [pc, #156]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	600b      	str	r3, [r1, #0]
 80019f4:	e015      	b.n	8001a22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019f6:	4b26      	ldr	r3, [pc, #152]	@ (8001a90 <HAL_RCC_OscConfig+0x270>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fc:	f7ff fc86 	bl	800130c <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a04:	f7ff fc82 	bl	800130c <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e180      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a16:	4b1d      	ldr	r3, [pc, #116]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d03a      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d019      	beq.n	8001a6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a36:	4b17      	ldr	r3, [pc, #92]	@ (8001a94 <HAL_RCC_OscConfig+0x274>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3c:	f7ff fc66 	bl	800130c <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a44:	f7ff fc62 	bl	800130c <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e160      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a56:	4b0d      	ldr	r3, [pc, #52]	@ (8001a8c <HAL_RCC_OscConfig+0x26c>)
 8001a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a62:	2001      	movs	r0, #1
 8001a64:	f000 face 	bl	8002004 <RCC_Delay>
 8001a68:	e01c      	b.n	8001aa4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a94 <HAL_RCC_OscConfig+0x274>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a70:	f7ff fc4c 	bl	800130c <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a76:	e00f      	b.n	8001a98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a78:	f7ff fc48 	bl	800130c <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d908      	bls.n	8001a98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e146      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	42420000 	.word	0x42420000
 8001a94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a98:	4b92      	ldr	r3, [pc, #584]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1e9      	bne.n	8001a78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 80a6 	beq.w	8001bfe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ab6:	4b8b      	ldr	r3, [pc, #556]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10d      	bne.n	8001ade <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ac2:	4b88      	ldr	r3, [pc, #544]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	4a87      	ldr	r2, [pc, #540]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001acc:	61d3      	str	r3, [r2, #28]
 8001ace:	4b85      	ldr	r3, [pc, #532]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ada:	2301      	movs	r3, #1
 8001adc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ade:	4b82      	ldr	r3, [pc, #520]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d118      	bne.n	8001b1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aea:	4b7f      	ldr	r3, [pc, #508]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c8>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a7e      	ldr	r2, [pc, #504]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c8>)
 8001af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af6:	f7ff fc09 	bl	800130c <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001afe:	f7ff fc05 	bl	800130c <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b64      	cmp	r3, #100	@ 0x64
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e103      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b10:	4b75      	ldr	r3, [pc, #468]	@ (8001ce8 <HAL_RCC_OscConfig+0x4c8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d106      	bne.n	8001b32 <HAL_RCC_OscConfig+0x312>
 8001b24:	4b6f      	ldr	r3, [pc, #444]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	4a6e      	ldr	r2, [pc, #440]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6213      	str	r3, [r2, #32]
 8001b30:	e02d      	b.n	8001b8e <HAL_RCC_OscConfig+0x36e>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10c      	bne.n	8001b54 <HAL_RCC_OscConfig+0x334>
 8001b3a:	4b6a      	ldr	r3, [pc, #424]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	4a69      	ldr	r2, [pc, #420]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b40:	f023 0301 	bic.w	r3, r3, #1
 8001b44:	6213      	str	r3, [r2, #32]
 8001b46:	4b67      	ldr	r3, [pc, #412]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	4a66      	ldr	r2, [pc, #408]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	f023 0304 	bic.w	r3, r3, #4
 8001b50:	6213      	str	r3, [r2, #32]
 8001b52:	e01c      	b.n	8001b8e <HAL_RCC_OscConfig+0x36e>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	2b05      	cmp	r3, #5
 8001b5a:	d10c      	bne.n	8001b76 <HAL_RCC_OscConfig+0x356>
 8001b5c:	4b61      	ldr	r3, [pc, #388]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	4a60      	ldr	r2, [pc, #384]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b62:	f043 0304 	orr.w	r3, r3, #4
 8001b66:	6213      	str	r3, [r2, #32]
 8001b68:	4b5e      	ldr	r3, [pc, #376]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	4a5d      	ldr	r2, [pc, #372]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	6213      	str	r3, [r2, #32]
 8001b74:	e00b      	b.n	8001b8e <HAL_RCC_OscConfig+0x36e>
 8001b76:	4b5b      	ldr	r3, [pc, #364]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	4a5a      	ldr	r2, [pc, #360]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b7c:	f023 0301 	bic.w	r3, r3, #1
 8001b80:	6213      	str	r3, [r2, #32]
 8001b82:	4b58      	ldr	r3, [pc, #352]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	4a57      	ldr	r2, [pc, #348]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001b88:	f023 0304 	bic.w	r3, r3, #4
 8001b8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d015      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b96:	f7ff fbb9 	bl	800130c <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b9c:	e00a      	b.n	8001bb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9e:	f7ff fbb5 	bl	800130c <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e0b1      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb4:	4b4b      	ldr	r3, [pc, #300]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0ee      	beq.n	8001b9e <HAL_RCC_OscConfig+0x37e>
 8001bc0:	e014      	b.n	8001bec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc2:	f7ff fba3 	bl	800130c <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc8:	e00a      	b.n	8001be0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bca:	f7ff fb9f 	bl	800130c <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e09b      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be0:	4b40      	ldr	r3, [pc, #256]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1ee      	bne.n	8001bca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bec:	7dfb      	ldrb	r3, [r7, #23]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d105      	bne.n	8001bfe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	4a3b      	ldr	r2, [pc, #236]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bfc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 8087 	beq.w	8001d16 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c08:	4b36      	ldr	r3, [pc, #216]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 030c 	and.w	r3, r3, #12
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d061      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d146      	bne.n	8001caa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1c:	4b33      	ldr	r3, [pc, #204]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c22:	f7ff fb73 	bl	800130c <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2a:	f7ff fb6f 	bl	800130c <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e06d      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3c:	4b29      	ldr	r3, [pc, #164]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1f0      	bne.n	8001c2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c50:	d108      	bne.n	8001c64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c52:	4b24      	ldr	r3, [pc, #144]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	4921      	ldr	r1, [pc, #132]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c64:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a19      	ldr	r1, [r3, #32]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c74:	430b      	orrs	r3, r1
 8001c76:	491b      	ldr	r1, [pc, #108]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c82:	f7ff fb43 	bl	800130c <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8a:	f7ff fb3f 	bl	800130c <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e03d      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0f0      	beq.n	8001c8a <HAL_RCC_OscConfig+0x46a>
 8001ca8:	e035      	b.n	8001d16 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001caa:	4b10      	ldr	r3, [pc, #64]	@ (8001cec <HAL_RCC_OscConfig+0x4cc>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff fb2c 	bl	800130c <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb8:	f7ff fb28 	bl	800130c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e026      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cca:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x498>
 8001cd6:	e01e      	b.n	8001d16 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d107      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e019      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40007000 	.word	0x40007000
 8001cec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <HAL_RCC_OscConfig+0x500>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d106      	bne.n	8001d12 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d001      	beq.n	8001d16 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40021000 	.word	0x40021000

08001d24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0d0      	b.n	8001eda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d38:	4b6a      	ldr	r3, [pc, #424]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d910      	bls.n	8001d68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d46:	4b67      	ldr	r3, [pc, #412]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 0207 	bic.w	r2, r3, #7
 8001d4e:	4965      	ldr	r1, [pc, #404]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d56:	4b63      	ldr	r3, [pc, #396]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0b8      	b.n	8001eda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d020      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d80:	4b59      	ldr	r3, [pc, #356]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	4a58      	ldr	r2, [pc, #352]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d98:	4b53      	ldr	r3, [pc, #332]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	4a52      	ldr	r2, [pc, #328]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001da2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da4:	4b50      	ldr	r3, [pc, #320]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	494d      	ldr	r1, [pc, #308]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d040      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d107      	bne.n	8001dda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dca:	4b47      	ldr	r3, [pc, #284]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d115      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e07f      	b.n	8001eda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d107      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de2:	4b41      	ldr	r3, [pc, #260]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d109      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e073      	b.n	8001eda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e06b      	b.n	8001eda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e02:	4b39      	ldr	r3, [pc, #228]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f023 0203 	bic.w	r2, r3, #3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	4936      	ldr	r1, [pc, #216]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e14:	f7ff fa7a 	bl	800130c <HAL_GetTick>
 8001e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1a:	e00a      	b.n	8001e32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1c:	f7ff fa76 	bl	800130c <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e053      	b.n	8001eda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e32:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 020c 	and.w	r2, r3, #12
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d1eb      	bne.n	8001e1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e44:	4b27      	ldr	r3, [pc, #156]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d210      	bcs.n	8001e74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e52:	4b24      	ldr	r3, [pc, #144]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 0207 	bic.w	r2, r3, #7
 8001e5a:	4922      	ldr	r1, [pc, #136]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e62:	4b20      	ldr	r3, [pc, #128]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e032      	b.n	8001eda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d008      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e80:	4b19      	ldr	r3, [pc, #100]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	4916      	ldr	r1, [pc, #88]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d009      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	490e      	ldr	r1, [pc, #56]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eb2:	f000 f821 	bl	8001ef8 <HAL_RCC_GetSysClockFreq>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	490a      	ldr	r1, [pc, #40]	@ (8001eec <HAL_RCC_ClockConfig+0x1c8>)
 8001ec4:	5ccb      	ldrb	r3, [r1, r3]
 8001ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eca:	4a09      	ldr	r2, [pc, #36]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1cc>)
 8001ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ece:	4b09      	ldr	r3, [pc, #36]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff f9d8 	bl	8001288 <HAL_InitTick>

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40022000 	.word	0x40022000
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	08004db8 	.word	0x08004db8
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	20000004 	.word	0x20000004

08001ef8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	2300      	movs	r3, #0
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f12:	4b1e      	ldr	r3, [pc, #120]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0x94>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d002      	beq.n	8001f28 <HAL_RCC_GetSysClockFreq+0x30>
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d003      	beq.n	8001f2e <HAL_RCC_GetSysClockFreq+0x36>
 8001f26:	e027      	b.n	8001f78 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f28:	4b19      	ldr	r3, [pc, #100]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f2a:	613b      	str	r3, [r7, #16]
      break;
 8001f2c:	e027      	b.n	8001f7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	0c9b      	lsrs	r3, r3, #18
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	4a17      	ldr	r2, [pc, #92]	@ (8001f94 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f38:	5cd3      	ldrb	r3, [r2, r3]
 8001f3a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d010      	beq.n	8001f68 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f46:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0x94>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	0c5b      	lsrs	r3, r3, #17
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	4a11      	ldr	r2, [pc, #68]	@ (8001f98 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f52:	5cd3      	ldrb	r3, [r2, r3]
 8001f54:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a0d      	ldr	r2, [pc, #52]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f5a:	fb03 f202 	mul.w	r2, r3, r2
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	e004      	b.n	8001f72 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f6c:	fb02 f303 	mul.w	r3, r2, r3
 8001f70:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	613b      	str	r3, [r7, #16]
      break;
 8001f76:	e002      	b.n	8001f7e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f78:	4b05      	ldr	r3, [pc, #20]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f7a:	613b      	str	r3, [r7, #16]
      break;
 8001f7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f7e:	693b      	ldr	r3, [r7, #16]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	371c      	adds	r7, #28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	007a1200 	.word	0x007a1200
 8001f94:	08004dd0 	.word	0x08004dd0
 8001f98:	08004de0 	.word	0x08004de0
 8001f9c:	003d0900 	.word	0x003d0900

08001fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa4:	4b02      	ldr	r3, [pc, #8]	@ (8001fb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	20000000 	.word	0x20000000

08001fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fb8:	f7ff fff2 	bl	8001fa0 <HAL_RCC_GetHCLKFreq>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	0a1b      	lsrs	r3, r3, #8
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	4903      	ldr	r1, [pc, #12]	@ (8001fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fca:	5ccb      	ldrb	r3, [r1, r3]
 8001fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	08004dc8 	.word	0x08004dc8

08001fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fe0:	f7ff ffde 	bl	8001fa0 <HAL_RCC_GetHCLKFreq>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	4b05      	ldr	r3, [pc, #20]	@ (8001ffc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	0adb      	lsrs	r3, r3, #11
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	4903      	ldr	r1, [pc, #12]	@ (8002000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ff2:	5ccb      	ldrb	r3, [r1, r3]
 8001ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40021000 	.word	0x40021000
 8002000:	08004dc8 	.word	0x08004dc8

08002004 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800200c:	4b0a      	ldr	r3, [pc, #40]	@ (8002038 <RCC_Delay+0x34>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a0a      	ldr	r2, [pc, #40]	@ (800203c <RCC_Delay+0x38>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	0a5b      	lsrs	r3, r3, #9
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	fb02 f303 	mul.w	r3, r2, r3
 800201e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002020:	bf00      	nop
  }
  while (Delay --);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	1e5a      	subs	r2, r3, #1
 8002026:	60fa      	str	r2, [r7, #12]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f9      	bne.n	8002020 <RCC_Delay+0x1c>
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr
 8002038:	20000000 	.word	0x20000000
 800203c:	10624dd3 	.word	0x10624dd3

08002040 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e042      	b.n	80020d8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d106      	bne.n	800206c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7fe ffae 	bl	8000fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2224      	movs	r2, #36	@ 0x24
 8002070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002082:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f971 	bl	800236c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002098:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	695a      	ldr	r2, [r3, #20]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80020a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68da      	ldr	r2, [r3, #12]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80020b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2220      	movs	r2, #32
 80020c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	@ 0x28
 80020e4:	af02      	add	r7, sp, #8
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	4613      	mov	r3, r2
 80020ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b20      	cmp	r3, #32
 80020fe:	d175      	bne.n	80021ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <HAL_UART_Transmit+0x2c>
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e06e      	b.n	80021ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2221      	movs	r2, #33	@ 0x21
 800211a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800211e:	f7ff f8f5 	bl	800130c <HAL_GetTick>
 8002122:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	88fa      	ldrh	r2, [r7, #6]
 8002128:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	88fa      	ldrh	r2, [r7, #6]
 800212e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002138:	d108      	bne.n	800214c <HAL_UART_Transmit+0x6c>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d104      	bne.n	800214c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	61bb      	str	r3, [r7, #24]
 800214a:	e003      	b.n	8002154 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002150:	2300      	movs	r3, #0
 8002152:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002154:	e02e      	b.n	80021b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2200      	movs	r2, #0
 800215e:	2180      	movs	r1, #128	@ 0x80
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 f848 	bl	80021f6 <UART_WaitOnFlagUntilTimeout>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e03a      	b.n	80021ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10b      	bne.n	8002196 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800218c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	3302      	adds	r3, #2
 8002192:	61bb      	str	r3, [r7, #24]
 8002194:	e007      	b.n	80021a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	781a      	ldrb	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	3301      	adds	r3, #1
 80021a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1cb      	bne.n	8002156 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2200      	movs	r2, #0
 80021c6:	2140      	movs	r1, #64	@ 0x40
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 f814 	bl	80021f6 <UART_WaitOnFlagUntilTimeout>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2220      	movs	r2, #32
 80021d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e006      	b.n	80021ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2220      	movs	r2, #32
 80021e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	e000      	b.n	80021ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80021ec:	2302      	movs	r3, #2
  }
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3720      	adds	r7, #32
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b086      	sub	sp, #24
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	603b      	str	r3, [r7, #0]
 8002202:	4613      	mov	r3, r2
 8002204:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002206:	e03b      	b.n	8002280 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002208:	6a3b      	ldr	r3, [r7, #32]
 800220a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220e:	d037      	beq.n	8002280 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002210:	f7ff f87c 	bl	800130c <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	6a3a      	ldr	r2, [r7, #32]
 800221c:	429a      	cmp	r2, r3
 800221e:	d302      	bcc.n	8002226 <UART_WaitOnFlagUntilTimeout+0x30>
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e03a      	b.n	80022a0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d023      	beq.n	8002280 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b80      	cmp	r3, #128	@ 0x80
 800223c:	d020      	beq.n	8002280 <UART_WaitOnFlagUntilTimeout+0x8a>
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2b40      	cmp	r3, #64	@ 0x40
 8002242:	d01d      	beq.n	8002280 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b08      	cmp	r3, #8
 8002250:	d116      	bne.n	8002280 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 f81d 	bl	80022a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2208      	movs	r2, #8
 8002272:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e00f      	b.n	80022a0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	4013      	ands	r3, r2
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	429a      	cmp	r2, r3
 800228e:	bf0c      	ite	eq
 8002290:	2301      	moveq	r3, #1
 8002292:	2300      	movne	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	461a      	mov	r2, r3
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	429a      	cmp	r2, r3
 800229c:	d0b4      	beq.n	8002208 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b095      	sub	sp, #84	@ 0x54
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	330c      	adds	r3, #12
 80022b6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022ba:	e853 3f00 	ldrex	r3, [r3]
 80022be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80022c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80022c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	330c      	adds	r3, #12
 80022ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022d0:	643a      	str	r2, [r7, #64]	@ 0x40
 80022d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80022d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022d8:	e841 2300 	strex	r3, r2, [r1]
 80022dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80022de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1e5      	bne.n	80022b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	3314      	adds	r3, #20
 80022ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	e853 3f00 	ldrex	r3, [r3]
 80022f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f023 0301 	bic.w	r3, r3, #1
 80022fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	3314      	adds	r3, #20
 8002302:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002304:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002306:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002308:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800230a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800230c:	e841 2300 	strex	r3, r2, [r1]
 8002310:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1e5      	bne.n	80022e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231c:	2b01      	cmp	r3, #1
 800231e:	d119      	bne.n	8002354 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	330c      	adds	r3, #12
 8002326:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	e853 3f00 	ldrex	r3, [r3]
 800232e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f023 0310 	bic.w	r3, r3, #16
 8002336:	647b      	str	r3, [r7, #68]	@ 0x44
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	330c      	adds	r3, #12
 800233e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002340:	61ba      	str	r2, [r7, #24]
 8002342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002344:	6979      	ldr	r1, [r7, #20]
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	e841 2300 	strex	r3, r2, [r1]
 800234c:	613b      	str	r3, [r7, #16]
   return(result);
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1e5      	bne.n	8002320 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002362:	bf00      	nop
 8002364:	3754      	adds	r7, #84	@ 0x54
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	4313      	orrs	r3, r2
 800239a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80023a6:	f023 030c 	bic.w	r3, r3, #12
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	68b9      	ldr	r1, [r7, #8]
 80023b0:	430b      	orrs	r3, r1
 80023b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699a      	ldr	r2, [r3, #24]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a2c      	ldr	r2, [pc, #176]	@ (8002480 <UART_SetConfig+0x114>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d103      	bne.n	80023dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80023d4:	f7ff fe02 	bl	8001fdc <HAL_RCC_GetPCLK2Freq>
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	e002      	b.n	80023e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80023dc:	f7ff fdea 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 80023e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	009a      	lsls	r2, r3, #2
 80023ec:	441a      	add	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f8:	4a22      	ldr	r2, [pc, #136]	@ (8002484 <UART_SetConfig+0x118>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	0119      	lsls	r1, r3, #4
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	009a      	lsls	r2, r3, #2
 800240c:	441a      	add	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	fbb2 f2f3 	udiv	r2, r2, r3
 8002418:	4b1a      	ldr	r3, [pc, #104]	@ (8002484 <UART_SetConfig+0x118>)
 800241a:	fba3 0302 	umull	r0, r3, r3, r2
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	2064      	movs	r0, #100	@ 0x64
 8002422:	fb00 f303 	mul.w	r3, r0, r3
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	3332      	adds	r3, #50	@ 0x32
 800242c:	4a15      	ldr	r2, [pc, #84]	@ (8002484 <UART_SetConfig+0x118>)
 800242e:	fba2 2303 	umull	r2, r3, r2, r3
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002438:	4419      	add	r1, r3
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	009a      	lsls	r2, r3, #2
 8002444:	441a      	add	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002450:	4b0c      	ldr	r3, [pc, #48]	@ (8002484 <UART_SetConfig+0x118>)
 8002452:	fba3 0302 	umull	r0, r3, r3, r2
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	2064      	movs	r0, #100	@ 0x64
 800245a:	fb00 f303 	mul.w	r3, r0, r3
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	3332      	adds	r3, #50	@ 0x32
 8002464:	4a07      	ldr	r2, [pc, #28]	@ (8002484 <UART_SetConfig+0x118>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	f003 020f 	and.w	r2, r3, #15
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	440a      	add	r2, r1
 8002476:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002478:	bf00      	nop
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40013800 	.word	0x40013800
 8002484:	51eb851f 	.word	0x51eb851f

08002488 <__cvt>:
 8002488:	2b00      	cmp	r3, #0
 800248a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800248e:	461d      	mov	r5, r3
 8002490:	bfbb      	ittet	lt
 8002492:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8002496:	461d      	movlt	r5, r3
 8002498:	2300      	movge	r3, #0
 800249a:	232d      	movlt	r3, #45	@ 0x2d
 800249c:	b088      	sub	sp, #32
 800249e:	4614      	mov	r4, r2
 80024a0:	bfb8      	it	lt
 80024a2:	4614      	movlt	r4, r2
 80024a4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80024a6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80024a8:	7013      	strb	r3, [r2, #0]
 80024aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80024ac:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80024b0:	f023 0820 	bic.w	r8, r3, #32
 80024b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80024b8:	d005      	beq.n	80024c6 <__cvt+0x3e>
 80024ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80024be:	d100      	bne.n	80024c2 <__cvt+0x3a>
 80024c0:	3601      	adds	r6, #1
 80024c2:	2302      	movs	r3, #2
 80024c4:	e000      	b.n	80024c8 <__cvt+0x40>
 80024c6:	2303      	movs	r3, #3
 80024c8:	aa07      	add	r2, sp, #28
 80024ca:	9204      	str	r2, [sp, #16]
 80024cc:	aa06      	add	r2, sp, #24
 80024ce:	e9cd a202 	strd	sl, r2, [sp, #8]
 80024d2:	e9cd 3600 	strd	r3, r6, [sp]
 80024d6:	4622      	mov	r2, r4
 80024d8:	462b      	mov	r3, r5
 80024da:	f000 fe4d 	bl	8003178 <_dtoa_r>
 80024de:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80024e2:	4607      	mov	r7, r0
 80024e4:	d119      	bne.n	800251a <__cvt+0x92>
 80024e6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80024e8:	07db      	lsls	r3, r3, #31
 80024ea:	d50e      	bpl.n	800250a <__cvt+0x82>
 80024ec:	eb00 0906 	add.w	r9, r0, r6
 80024f0:	2200      	movs	r2, #0
 80024f2:	2300      	movs	r3, #0
 80024f4:	4620      	mov	r0, r4
 80024f6:	4629      	mov	r1, r5
 80024f8:	f7fe fa56 	bl	80009a8 <__aeabi_dcmpeq>
 80024fc:	b108      	cbz	r0, 8002502 <__cvt+0x7a>
 80024fe:	f8cd 901c 	str.w	r9, [sp, #28]
 8002502:	2230      	movs	r2, #48	@ 0x30
 8002504:	9b07      	ldr	r3, [sp, #28]
 8002506:	454b      	cmp	r3, r9
 8002508:	d31e      	bcc.n	8002548 <__cvt+0xc0>
 800250a:	4638      	mov	r0, r7
 800250c:	9b07      	ldr	r3, [sp, #28]
 800250e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8002510:	1bdb      	subs	r3, r3, r7
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	b008      	add	sp, #32
 8002516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800251a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800251e:	eb00 0906 	add.w	r9, r0, r6
 8002522:	d1e5      	bne.n	80024f0 <__cvt+0x68>
 8002524:	7803      	ldrb	r3, [r0, #0]
 8002526:	2b30      	cmp	r3, #48	@ 0x30
 8002528:	d10a      	bne.n	8002540 <__cvt+0xb8>
 800252a:	2200      	movs	r2, #0
 800252c:	2300      	movs	r3, #0
 800252e:	4620      	mov	r0, r4
 8002530:	4629      	mov	r1, r5
 8002532:	f7fe fa39 	bl	80009a8 <__aeabi_dcmpeq>
 8002536:	b918      	cbnz	r0, 8002540 <__cvt+0xb8>
 8002538:	f1c6 0601 	rsb	r6, r6, #1
 800253c:	f8ca 6000 	str.w	r6, [sl]
 8002540:	f8da 3000 	ldr.w	r3, [sl]
 8002544:	4499      	add	r9, r3
 8002546:	e7d3      	b.n	80024f0 <__cvt+0x68>
 8002548:	1c59      	adds	r1, r3, #1
 800254a:	9107      	str	r1, [sp, #28]
 800254c:	701a      	strb	r2, [r3, #0]
 800254e:	e7d9      	b.n	8002504 <__cvt+0x7c>

08002550 <__exponent>:
 8002550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002552:	2900      	cmp	r1, #0
 8002554:	bfb6      	itet	lt
 8002556:	232d      	movlt	r3, #45	@ 0x2d
 8002558:	232b      	movge	r3, #43	@ 0x2b
 800255a:	4249      	neglt	r1, r1
 800255c:	2909      	cmp	r1, #9
 800255e:	7002      	strb	r2, [r0, #0]
 8002560:	7043      	strb	r3, [r0, #1]
 8002562:	dd29      	ble.n	80025b8 <__exponent+0x68>
 8002564:	f10d 0307 	add.w	r3, sp, #7
 8002568:	461d      	mov	r5, r3
 800256a:	270a      	movs	r7, #10
 800256c:	fbb1 f6f7 	udiv	r6, r1, r7
 8002570:	461a      	mov	r2, r3
 8002572:	fb07 1416 	mls	r4, r7, r6, r1
 8002576:	3430      	adds	r4, #48	@ 0x30
 8002578:	f802 4c01 	strb.w	r4, [r2, #-1]
 800257c:	460c      	mov	r4, r1
 800257e:	2c63      	cmp	r4, #99	@ 0x63
 8002580:	4631      	mov	r1, r6
 8002582:	f103 33ff 	add.w	r3, r3, #4294967295
 8002586:	dcf1      	bgt.n	800256c <__exponent+0x1c>
 8002588:	3130      	adds	r1, #48	@ 0x30
 800258a:	1e94      	subs	r4, r2, #2
 800258c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002590:	4623      	mov	r3, r4
 8002592:	1c41      	adds	r1, r0, #1
 8002594:	42ab      	cmp	r3, r5
 8002596:	d30a      	bcc.n	80025ae <__exponent+0x5e>
 8002598:	f10d 0309 	add.w	r3, sp, #9
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	42ac      	cmp	r4, r5
 80025a0:	bf88      	it	hi
 80025a2:	2300      	movhi	r3, #0
 80025a4:	3302      	adds	r3, #2
 80025a6:	4403      	add	r3, r0
 80025a8:	1a18      	subs	r0, r3, r0
 80025aa:	b003      	add	sp, #12
 80025ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ae:	f813 6b01 	ldrb.w	r6, [r3], #1
 80025b2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80025b6:	e7ed      	b.n	8002594 <__exponent+0x44>
 80025b8:	2330      	movs	r3, #48	@ 0x30
 80025ba:	3130      	adds	r1, #48	@ 0x30
 80025bc:	7083      	strb	r3, [r0, #2]
 80025be:	70c1      	strb	r1, [r0, #3]
 80025c0:	1d03      	adds	r3, r0, #4
 80025c2:	e7f1      	b.n	80025a8 <__exponent+0x58>

080025c4 <_printf_float>:
 80025c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025c8:	b091      	sub	sp, #68	@ 0x44
 80025ca:	460c      	mov	r4, r1
 80025cc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80025d0:	4616      	mov	r6, r2
 80025d2:	461f      	mov	r7, r3
 80025d4:	4605      	mov	r5, r0
 80025d6:	f000 fcc1 	bl	8002f5c <_localeconv_r>
 80025da:	6803      	ldr	r3, [r0, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	9308      	str	r3, [sp, #32]
 80025e0:	f7fd fdb6 	bl	8000150 <strlen>
 80025e4:	2300      	movs	r3, #0
 80025e6:	930e      	str	r3, [sp, #56]	@ 0x38
 80025e8:	f8d8 3000 	ldr.w	r3, [r8]
 80025ec:	9009      	str	r0, [sp, #36]	@ 0x24
 80025ee:	3307      	adds	r3, #7
 80025f0:	f023 0307 	bic.w	r3, r3, #7
 80025f4:	f103 0208 	add.w	r2, r3, #8
 80025f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80025fc:	f8d4 b000 	ldr.w	fp, [r4]
 8002600:	f8c8 2000 	str.w	r2, [r8]
 8002604:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002608:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800260c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800260e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8002612:	f04f 32ff 	mov.w	r2, #4294967295
 8002616:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800261a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800261e:	4b9c      	ldr	r3, [pc, #624]	@ (8002890 <_printf_float+0x2cc>)
 8002620:	f7fe f9f4 	bl	8000a0c <__aeabi_dcmpun>
 8002624:	bb70      	cbnz	r0, 8002684 <_printf_float+0xc0>
 8002626:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800262a:	f04f 32ff 	mov.w	r2, #4294967295
 800262e:	4b98      	ldr	r3, [pc, #608]	@ (8002890 <_printf_float+0x2cc>)
 8002630:	f7fe f9ce 	bl	80009d0 <__aeabi_dcmple>
 8002634:	bb30      	cbnz	r0, 8002684 <_printf_float+0xc0>
 8002636:	2200      	movs	r2, #0
 8002638:	2300      	movs	r3, #0
 800263a:	4640      	mov	r0, r8
 800263c:	4649      	mov	r1, r9
 800263e:	f7fe f9bd 	bl	80009bc <__aeabi_dcmplt>
 8002642:	b110      	cbz	r0, 800264a <_printf_float+0x86>
 8002644:	232d      	movs	r3, #45	@ 0x2d
 8002646:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800264a:	4a92      	ldr	r2, [pc, #584]	@ (8002894 <_printf_float+0x2d0>)
 800264c:	4b92      	ldr	r3, [pc, #584]	@ (8002898 <_printf_float+0x2d4>)
 800264e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002652:	bf94      	ite	ls
 8002654:	4690      	movls	r8, r2
 8002656:	4698      	movhi	r8, r3
 8002658:	2303      	movs	r3, #3
 800265a:	f04f 0900 	mov.w	r9, #0
 800265e:	6123      	str	r3, [r4, #16]
 8002660:	f02b 0304 	bic.w	r3, fp, #4
 8002664:	6023      	str	r3, [r4, #0]
 8002666:	4633      	mov	r3, r6
 8002668:	4621      	mov	r1, r4
 800266a:	4628      	mov	r0, r5
 800266c:	9700      	str	r7, [sp, #0]
 800266e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8002670:	f000 f9d4 	bl	8002a1c <_printf_common>
 8002674:	3001      	adds	r0, #1
 8002676:	f040 8090 	bne.w	800279a <_printf_float+0x1d6>
 800267a:	f04f 30ff 	mov.w	r0, #4294967295
 800267e:	b011      	add	sp, #68	@ 0x44
 8002680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002684:	4642      	mov	r2, r8
 8002686:	464b      	mov	r3, r9
 8002688:	4640      	mov	r0, r8
 800268a:	4649      	mov	r1, r9
 800268c:	f7fe f9be 	bl	8000a0c <__aeabi_dcmpun>
 8002690:	b148      	cbz	r0, 80026a6 <_printf_float+0xe2>
 8002692:	464b      	mov	r3, r9
 8002694:	2b00      	cmp	r3, #0
 8002696:	bfb8      	it	lt
 8002698:	232d      	movlt	r3, #45	@ 0x2d
 800269a:	4a80      	ldr	r2, [pc, #512]	@ (800289c <_printf_float+0x2d8>)
 800269c:	bfb8      	it	lt
 800269e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80026a2:	4b7f      	ldr	r3, [pc, #508]	@ (80028a0 <_printf_float+0x2dc>)
 80026a4:	e7d3      	b.n	800264e <_printf_float+0x8a>
 80026a6:	6863      	ldr	r3, [r4, #4]
 80026a8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80026ac:	1c5a      	adds	r2, r3, #1
 80026ae:	d13f      	bne.n	8002730 <_printf_float+0x16c>
 80026b0:	2306      	movs	r3, #6
 80026b2:	6063      	str	r3, [r4, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80026ba:	6023      	str	r3, [r4, #0]
 80026bc:	9206      	str	r2, [sp, #24]
 80026be:	aa0e      	add	r2, sp, #56	@ 0x38
 80026c0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80026c4:	aa0d      	add	r2, sp, #52	@ 0x34
 80026c6:	9203      	str	r2, [sp, #12]
 80026c8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80026cc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80026d0:	6863      	ldr	r3, [r4, #4]
 80026d2:	4642      	mov	r2, r8
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	4628      	mov	r0, r5
 80026d8:	464b      	mov	r3, r9
 80026da:	910a      	str	r1, [sp, #40]	@ 0x28
 80026dc:	f7ff fed4 	bl	8002488 <__cvt>
 80026e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80026e2:	4680      	mov	r8, r0
 80026e4:	2947      	cmp	r1, #71	@ 0x47
 80026e6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80026e8:	d128      	bne.n	800273c <_printf_float+0x178>
 80026ea:	1cc8      	adds	r0, r1, #3
 80026ec:	db02      	blt.n	80026f4 <_printf_float+0x130>
 80026ee:	6863      	ldr	r3, [r4, #4]
 80026f0:	4299      	cmp	r1, r3
 80026f2:	dd40      	ble.n	8002776 <_printf_float+0x1b2>
 80026f4:	f1aa 0a02 	sub.w	sl, sl, #2
 80026f8:	fa5f fa8a 	uxtb.w	sl, sl
 80026fc:	4652      	mov	r2, sl
 80026fe:	3901      	subs	r1, #1
 8002700:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002704:	910d      	str	r1, [sp, #52]	@ 0x34
 8002706:	f7ff ff23 	bl	8002550 <__exponent>
 800270a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800270c:	4681      	mov	r9, r0
 800270e:	1813      	adds	r3, r2, r0
 8002710:	2a01      	cmp	r2, #1
 8002712:	6123      	str	r3, [r4, #16]
 8002714:	dc02      	bgt.n	800271c <_printf_float+0x158>
 8002716:	6822      	ldr	r2, [r4, #0]
 8002718:	07d2      	lsls	r2, r2, #31
 800271a:	d501      	bpl.n	8002720 <_printf_float+0x15c>
 800271c:	3301      	adds	r3, #1
 800271e:	6123      	str	r3, [r4, #16]
 8002720:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8002724:	2b00      	cmp	r3, #0
 8002726:	d09e      	beq.n	8002666 <_printf_float+0xa2>
 8002728:	232d      	movs	r3, #45	@ 0x2d
 800272a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800272e:	e79a      	b.n	8002666 <_printf_float+0xa2>
 8002730:	2947      	cmp	r1, #71	@ 0x47
 8002732:	d1bf      	bne.n	80026b4 <_printf_float+0xf0>
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1bd      	bne.n	80026b4 <_printf_float+0xf0>
 8002738:	2301      	movs	r3, #1
 800273a:	e7ba      	b.n	80026b2 <_printf_float+0xee>
 800273c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002740:	d9dc      	bls.n	80026fc <_printf_float+0x138>
 8002742:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002746:	d118      	bne.n	800277a <_printf_float+0x1b6>
 8002748:	2900      	cmp	r1, #0
 800274a:	6863      	ldr	r3, [r4, #4]
 800274c:	dd0b      	ble.n	8002766 <_printf_float+0x1a2>
 800274e:	6121      	str	r1, [r4, #16]
 8002750:	b913      	cbnz	r3, 8002758 <_printf_float+0x194>
 8002752:	6822      	ldr	r2, [r4, #0]
 8002754:	07d0      	lsls	r0, r2, #31
 8002756:	d502      	bpl.n	800275e <_printf_float+0x19a>
 8002758:	3301      	adds	r3, #1
 800275a:	440b      	add	r3, r1
 800275c:	6123      	str	r3, [r4, #16]
 800275e:	f04f 0900 	mov.w	r9, #0
 8002762:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002764:	e7dc      	b.n	8002720 <_printf_float+0x15c>
 8002766:	b913      	cbnz	r3, 800276e <_printf_float+0x1aa>
 8002768:	6822      	ldr	r2, [r4, #0]
 800276a:	07d2      	lsls	r2, r2, #31
 800276c:	d501      	bpl.n	8002772 <_printf_float+0x1ae>
 800276e:	3302      	adds	r3, #2
 8002770:	e7f4      	b.n	800275c <_printf_float+0x198>
 8002772:	2301      	movs	r3, #1
 8002774:	e7f2      	b.n	800275c <_printf_float+0x198>
 8002776:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800277a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800277c:	4299      	cmp	r1, r3
 800277e:	db05      	blt.n	800278c <_printf_float+0x1c8>
 8002780:	6823      	ldr	r3, [r4, #0]
 8002782:	6121      	str	r1, [r4, #16]
 8002784:	07d8      	lsls	r0, r3, #31
 8002786:	d5ea      	bpl.n	800275e <_printf_float+0x19a>
 8002788:	1c4b      	adds	r3, r1, #1
 800278a:	e7e7      	b.n	800275c <_printf_float+0x198>
 800278c:	2900      	cmp	r1, #0
 800278e:	bfcc      	ite	gt
 8002790:	2201      	movgt	r2, #1
 8002792:	f1c1 0202 	rsble	r2, r1, #2
 8002796:	4413      	add	r3, r2
 8002798:	e7e0      	b.n	800275c <_printf_float+0x198>
 800279a:	6823      	ldr	r3, [r4, #0]
 800279c:	055a      	lsls	r2, r3, #21
 800279e:	d407      	bmi.n	80027b0 <_printf_float+0x1ec>
 80027a0:	6923      	ldr	r3, [r4, #16]
 80027a2:	4642      	mov	r2, r8
 80027a4:	4631      	mov	r1, r6
 80027a6:	4628      	mov	r0, r5
 80027a8:	47b8      	blx	r7
 80027aa:	3001      	adds	r0, #1
 80027ac:	d12b      	bne.n	8002806 <_printf_float+0x242>
 80027ae:	e764      	b.n	800267a <_printf_float+0xb6>
 80027b0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80027b4:	f240 80dc 	bls.w	8002970 <_printf_float+0x3ac>
 80027b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80027bc:	2200      	movs	r2, #0
 80027be:	2300      	movs	r3, #0
 80027c0:	f7fe f8f2 	bl	80009a8 <__aeabi_dcmpeq>
 80027c4:	2800      	cmp	r0, #0
 80027c6:	d033      	beq.n	8002830 <_printf_float+0x26c>
 80027c8:	2301      	movs	r3, #1
 80027ca:	4631      	mov	r1, r6
 80027cc:	4628      	mov	r0, r5
 80027ce:	4a35      	ldr	r2, [pc, #212]	@ (80028a4 <_printf_float+0x2e0>)
 80027d0:	47b8      	blx	r7
 80027d2:	3001      	adds	r0, #1
 80027d4:	f43f af51 	beq.w	800267a <_printf_float+0xb6>
 80027d8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80027dc:	4543      	cmp	r3, r8
 80027de:	db02      	blt.n	80027e6 <_printf_float+0x222>
 80027e0:	6823      	ldr	r3, [r4, #0]
 80027e2:	07d8      	lsls	r0, r3, #31
 80027e4:	d50f      	bpl.n	8002806 <_printf_float+0x242>
 80027e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80027ea:	4631      	mov	r1, r6
 80027ec:	4628      	mov	r0, r5
 80027ee:	47b8      	blx	r7
 80027f0:	3001      	adds	r0, #1
 80027f2:	f43f af42 	beq.w	800267a <_printf_float+0xb6>
 80027f6:	f04f 0900 	mov.w	r9, #0
 80027fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80027fe:	f104 0a1a 	add.w	sl, r4, #26
 8002802:	45c8      	cmp	r8, r9
 8002804:	dc09      	bgt.n	800281a <_printf_float+0x256>
 8002806:	6823      	ldr	r3, [r4, #0]
 8002808:	079b      	lsls	r3, r3, #30
 800280a:	f100 8102 	bmi.w	8002a12 <_printf_float+0x44e>
 800280e:	68e0      	ldr	r0, [r4, #12]
 8002810:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002812:	4298      	cmp	r0, r3
 8002814:	bfb8      	it	lt
 8002816:	4618      	movlt	r0, r3
 8002818:	e731      	b.n	800267e <_printf_float+0xba>
 800281a:	2301      	movs	r3, #1
 800281c:	4652      	mov	r2, sl
 800281e:	4631      	mov	r1, r6
 8002820:	4628      	mov	r0, r5
 8002822:	47b8      	blx	r7
 8002824:	3001      	adds	r0, #1
 8002826:	f43f af28 	beq.w	800267a <_printf_float+0xb6>
 800282a:	f109 0901 	add.w	r9, r9, #1
 800282e:	e7e8      	b.n	8002802 <_printf_float+0x23e>
 8002830:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002832:	2b00      	cmp	r3, #0
 8002834:	dc38      	bgt.n	80028a8 <_printf_float+0x2e4>
 8002836:	2301      	movs	r3, #1
 8002838:	4631      	mov	r1, r6
 800283a:	4628      	mov	r0, r5
 800283c:	4a19      	ldr	r2, [pc, #100]	@ (80028a4 <_printf_float+0x2e0>)
 800283e:	47b8      	blx	r7
 8002840:	3001      	adds	r0, #1
 8002842:	f43f af1a 	beq.w	800267a <_printf_float+0xb6>
 8002846:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800284a:	ea59 0303 	orrs.w	r3, r9, r3
 800284e:	d102      	bne.n	8002856 <_printf_float+0x292>
 8002850:	6823      	ldr	r3, [r4, #0]
 8002852:	07d9      	lsls	r1, r3, #31
 8002854:	d5d7      	bpl.n	8002806 <_printf_float+0x242>
 8002856:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800285a:	4631      	mov	r1, r6
 800285c:	4628      	mov	r0, r5
 800285e:	47b8      	blx	r7
 8002860:	3001      	adds	r0, #1
 8002862:	f43f af0a 	beq.w	800267a <_printf_float+0xb6>
 8002866:	f04f 0a00 	mov.w	sl, #0
 800286a:	f104 0b1a 	add.w	fp, r4, #26
 800286e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002870:	425b      	negs	r3, r3
 8002872:	4553      	cmp	r3, sl
 8002874:	dc01      	bgt.n	800287a <_printf_float+0x2b6>
 8002876:	464b      	mov	r3, r9
 8002878:	e793      	b.n	80027a2 <_printf_float+0x1de>
 800287a:	2301      	movs	r3, #1
 800287c:	465a      	mov	r2, fp
 800287e:	4631      	mov	r1, r6
 8002880:	4628      	mov	r0, r5
 8002882:	47b8      	blx	r7
 8002884:	3001      	adds	r0, #1
 8002886:	f43f aef8 	beq.w	800267a <_printf_float+0xb6>
 800288a:	f10a 0a01 	add.w	sl, sl, #1
 800288e:	e7ee      	b.n	800286e <_printf_float+0x2aa>
 8002890:	7fefffff 	.word	0x7fefffff
 8002894:	08004de2 	.word	0x08004de2
 8002898:	08004de6 	.word	0x08004de6
 800289c:	08004dea 	.word	0x08004dea
 80028a0:	08004dee 	.word	0x08004dee
 80028a4:	08004df2 	.word	0x08004df2
 80028a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80028aa:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80028ae:	4553      	cmp	r3, sl
 80028b0:	bfa8      	it	ge
 80028b2:	4653      	movge	r3, sl
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	4699      	mov	r9, r3
 80028b8:	dc36      	bgt.n	8002928 <_printf_float+0x364>
 80028ba:	f04f 0b00 	mov.w	fp, #0
 80028be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80028c2:	f104 021a 	add.w	r2, r4, #26
 80028c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80028c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80028ca:	eba3 0309 	sub.w	r3, r3, r9
 80028ce:	455b      	cmp	r3, fp
 80028d0:	dc31      	bgt.n	8002936 <_printf_float+0x372>
 80028d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80028d4:	459a      	cmp	sl, r3
 80028d6:	dc3a      	bgt.n	800294e <_printf_float+0x38a>
 80028d8:	6823      	ldr	r3, [r4, #0]
 80028da:	07da      	lsls	r2, r3, #31
 80028dc:	d437      	bmi.n	800294e <_printf_float+0x38a>
 80028de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80028e0:	ebaa 0903 	sub.w	r9, sl, r3
 80028e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80028e6:	ebaa 0303 	sub.w	r3, sl, r3
 80028ea:	4599      	cmp	r9, r3
 80028ec:	bfa8      	it	ge
 80028ee:	4699      	movge	r9, r3
 80028f0:	f1b9 0f00 	cmp.w	r9, #0
 80028f4:	dc33      	bgt.n	800295e <_printf_float+0x39a>
 80028f6:	f04f 0800 	mov.w	r8, #0
 80028fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80028fe:	f104 0b1a 	add.w	fp, r4, #26
 8002902:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002904:	ebaa 0303 	sub.w	r3, sl, r3
 8002908:	eba3 0309 	sub.w	r3, r3, r9
 800290c:	4543      	cmp	r3, r8
 800290e:	f77f af7a 	ble.w	8002806 <_printf_float+0x242>
 8002912:	2301      	movs	r3, #1
 8002914:	465a      	mov	r2, fp
 8002916:	4631      	mov	r1, r6
 8002918:	4628      	mov	r0, r5
 800291a:	47b8      	blx	r7
 800291c:	3001      	adds	r0, #1
 800291e:	f43f aeac 	beq.w	800267a <_printf_float+0xb6>
 8002922:	f108 0801 	add.w	r8, r8, #1
 8002926:	e7ec      	b.n	8002902 <_printf_float+0x33e>
 8002928:	4642      	mov	r2, r8
 800292a:	4631      	mov	r1, r6
 800292c:	4628      	mov	r0, r5
 800292e:	47b8      	blx	r7
 8002930:	3001      	adds	r0, #1
 8002932:	d1c2      	bne.n	80028ba <_printf_float+0x2f6>
 8002934:	e6a1      	b.n	800267a <_printf_float+0xb6>
 8002936:	2301      	movs	r3, #1
 8002938:	4631      	mov	r1, r6
 800293a:	4628      	mov	r0, r5
 800293c:	920a      	str	r2, [sp, #40]	@ 0x28
 800293e:	47b8      	blx	r7
 8002940:	3001      	adds	r0, #1
 8002942:	f43f ae9a 	beq.w	800267a <_printf_float+0xb6>
 8002946:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002948:	f10b 0b01 	add.w	fp, fp, #1
 800294c:	e7bb      	b.n	80028c6 <_printf_float+0x302>
 800294e:	4631      	mov	r1, r6
 8002950:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002954:	4628      	mov	r0, r5
 8002956:	47b8      	blx	r7
 8002958:	3001      	adds	r0, #1
 800295a:	d1c0      	bne.n	80028de <_printf_float+0x31a>
 800295c:	e68d      	b.n	800267a <_printf_float+0xb6>
 800295e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002960:	464b      	mov	r3, r9
 8002962:	4631      	mov	r1, r6
 8002964:	4628      	mov	r0, r5
 8002966:	4442      	add	r2, r8
 8002968:	47b8      	blx	r7
 800296a:	3001      	adds	r0, #1
 800296c:	d1c3      	bne.n	80028f6 <_printf_float+0x332>
 800296e:	e684      	b.n	800267a <_printf_float+0xb6>
 8002970:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8002974:	f1ba 0f01 	cmp.w	sl, #1
 8002978:	dc01      	bgt.n	800297e <_printf_float+0x3ba>
 800297a:	07db      	lsls	r3, r3, #31
 800297c:	d536      	bpl.n	80029ec <_printf_float+0x428>
 800297e:	2301      	movs	r3, #1
 8002980:	4642      	mov	r2, r8
 8002982:	4631      	mov	r1, r6
 8002984:	4628      	mov	r0, r5
 8002986:	47b8      	blx	r7
 8002988:	3001      	adds	r0, #1
 800298a:	f43f ae76 	beq.w	800267a <_printf_float+0xb6>
 800298e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002992:	4631      	mov	r1, r6
 8002994:	4628      	mov	r0, r5
 8002996:	47b8      	blx	r7
 8002998:	3001      	adds	r0, #1
 800299a:	f43f ae6e 	beq.w	800267a <_printf_float+0xb6>
 800299e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80029a2:	2200      	movs	r2, #0
 80029a4:	2300      	movs	r3, #0
 80029a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80029aa:	f7fd fffd 	bl	80009a8 <__aeabi_dcmpeq>
 80029ae:	b9c0      	cbnz	r0, 80029e2 <_printf_float+0x41e>
 80029b0:	4653      	mov	r3, sl
 80029b2:	f108 0201 	add.w	r2, r8, #1
 80029b6:	4631      	mov	r1, r6
 80029b8:	4628      	mov	r0, r5
 80029ba:	47b8      	blx	r7
 80029bc:	3001      	adds	r0, #1
 80029be:	d10c      	bne.n	80029da <_printf_float+0x416>
 80029c0:	e65b      	b.n	800267a <_printf_float+0xb6>
 80029c2:	2301      	movs	r3, #1
 80029c4:	465a      	mov	r2, fp
 80029c6:	4631      	mov	r1, r6
 80029c8:	4628      	mov	r0, r5
 80029ca:	47b8      	blx	r7
 80029cc:	3001      	adds	r0, #1
 80029ce:	f43f ae54 	beq.w	800267a <_printf_float+0xb6>
 80029d2:	f108 0801 	add.w	r8, r8, #1
 80029d6:	45d0      	cmp	r8, sl
 80029d8:	dbf3      	blt.n	80029c2 <_printf_float+0x3fe>
 80029da:	464b      	mov	r3, r9
 80029dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80029e0:	e6e0      	b.n	80027a4 <_printf_float+0x1e0>
 80029e2:	f04f 0800 	mov.w	r8, #0
 80029e6:	f104 0b1a 	add.w	fp, r4, #26
 80029ea:	e7f4      	b.n	80029d6 <_printf_float+0x412>
 80029ec:	2301      	movs	r3, #1
 80029ee:	4642      	mov	r2, r8
 80029f0:	e7e1      	b.n	80029b6 <_printf_float+0x3f2>
 80029f2:	2301      	movs	r3, #1
 80029f4:	464a      	mov	r2, r9
 80029f6:	4631      	mov	r1, r6
 80029f8:	4628      	mov	r0, r5
 80029fa:	47b8      	blx	r7
 80029fc:	3001      	adds	r0, #1
 80029fe:	f43f ae3c 	beq.w	800267a <_printf_float+0xb6>
 8002a02:	f108 0801 	add.w	r8, r8, #1
 8002a06:	68e3      	ldr	r3, [r4, #12]
 8002a08:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8002a0a:	1a5b      	subs	r3, r3, r1
 8002a0c:	4543      	cmp	r3, r8
 8002a0e:	dcf0      	bgt.n	80029f2 <_printf_float+0x42e>
 8002a10:	e6fd      	b.n	800280e <_printf_float+0x24a>
 8002a12:	f04f 0800 	mov.w	r8, #0
 8002a16:	f104 0919 	add.w	r9, r4, #25
 8002a1a:	e7f4      	b.n	8002a06 <_printf_float+0x442>

08002a1c <_printf_common>:
 8002a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a20:	4616      	mov	r6, r2
 8002a22:	4698      	mov	r8, r3
 8002a24:	688a      	ldr	r2, [r1, #8]
 8002a26:	690b      	ldr	r3, [r1, #16]
 8002a28:	4607      	mov	r7, r0
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	bfb8      	it	lt
 8002a2e:	4613      	movlt	r3, r2
 8002a30:	6033      	str	r3, [r6, #0]
 8002a32:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002a36:	460c      	mov	r4, r1
 8002a38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002a3c:	b10a      	cbz	r2, 8002a42 <_printf_common+0x26>
 8002a3e:	3301      	adds	r3, #1
 8002a40:	6033      	str	r3, [r6, #0]
 8002a42:	6823      	ldr	r3, [r4, #0]
 8002a44:	0699      	lsls	r1, r3, #26
 8002a46:	bf42      	ittt	mi
 8002a48:	6833      	ldrmi	r3, [r6, #0]
 8002a4a:	3302      	addmi	r3, #2
 8002a4c:	6033      	strmi	r3, [r6, #0]
 8002a4e:	6825      	ldr	r5, [r4, #0]
 8002a50:	f015 0506 	ands.w	r5, r5, #6
 8002a54:	d106      	bne.n	8002a64 <_printf_common+0x48>
 8002a56:	f104 0a19 	add.w	sl, r4, #25
 8002a5a:	68e3      	ldr	r3, [r4, #12]
 8002a5c:	6832      	ldr	r2, [r6, #0]
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	42ab      	cmp	r3, r5
 8002a62:	dc2b      	bgt.n	8002abc <_printf_common+0xa0>
 8002a64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002a68:	6822      	ldr	r2, [r4, #0]
 8002a6a:	3b00      	subs	r3, #0
 8002a6c:	bf18      	it	ne
 8002a6e:	2301      	movne	r3, #1
 8002a70:	0692      	lsls	r2, r2, #26
 8002a72:	d430      	bmi.n	8002ad6 <_printf_common+0xba>
 8002a74:	4641      	mov	r1, r8
 8002a76:	4638      	mov	r0, r7
 8002a78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002a7c:	47c8      	blx	r9
 8002a7e:	3001      	adds	r0, #1
 8002a80:	d023      	beq.n	8002aca <_printf_common+0xae>
 8002a82:	6823      	ldr	r3, [r4, #0]
 8002a84:	6922      	ldr	r2, [r4, #16]
 8002a86:	f003 0306 	and.w	r3, r3, #6
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	bf14      	ite	ne
 8002a8e:	2500      	movne	r5, #0
 8002a90:	6833      	ldreq	r3, [r6, #0]
 8002a92:	f04f 0600 	mov.w	r6, #0
 8002a96:	bf08      	it	eq
 8002a98:	68e5      	ldreq	r5, [r4, #12]
 8002a9a:	f104 041a 	add.w	r4, r4, #26
 8002a9e:	bf08      	it	eq
 8002aa0:	1aed      	subeq	r5, r5, r3
 8002aa2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002aa6:	bf08      	it	eq
 8002aa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002aac:	4293      	cmp	r3, r2
 8002aae:	bfc4      	itt	gt
 8002ab0:	1a9b      	subgt	r3, r3, r2
 8002ab2:	18ed      	addgt	r5, r5, r3
 8002ab4:	42b5      	cmp	r5, r6
 8002ab6:	d11a      	bne.n	8002aee <_printf_common+0xd2>
 8002ab8:	2000      	movs	r0, #0
 8002aba:	e008      	b.n	8002ace <_printf_common+0xb2>
 8002abc:	2301      	movs	r3, #1
 8002abe:	4652      	mov	r2, sl
 8002ac0:	4641      	mov	r1, r8
 8002ac2:	4638      	mov	r0, r7
 8002ac4:	47c8      	blx	r9
 8002ac6:	3001      	adds	r0, #1
 8002ac8:	d103      	bne.n	8002ad2 <_printf_common+0xb6>
 8002aca:	f04f 30ff 	mov.w	r0, #4294967295
 8002ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ad2:	3501      	adds	r5, #1
 8002ad4:	e7c1      	b.n	8002a5a <_printf_common+0x3e>
 8002ad6:	2030      	movs	r0, #48	@ 0x30
 8002ad8:	18e1      	adds	r1, r4, r3
 8002ada:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002ade:	1c5a      	adds	r2, r3, #1
 8002ae0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002ae4:	4422      	add	r2, r4
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002aec:	e7c2      	b.n	8002a74 <_printf_common+0x58>
 8002aee:	2301      	movs	r3, #1
 8002af0:	4622      	mov	r2, r4
 8002af2:	4641      	mov	r1, r8
 8002af4:	4638      	mov	r0, r7
 8002af6:	47c8      	blx	r9
 8002af8:	3001      	adds	r0, #1
 8002afa:	d0e6      	beq.n	8002aca <_printf_common+0xae>
 8002afc:	3601      	adds	r6, #1
 8002afe:	e7d9      	b.n	8002ab4 <_printf_common+0x98>

08002b00 <_printf_i>:
 8002b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b04:	7e0f      	ldrb	r7, [r1, #24]
 8002b06:	4691      	mov	r9, r2
 8002b08:	2f78      	cmp	r7, #120	@ 0x78
 8002b0a:	4680      	mov	r8, r0
 8002b0c:	460c      	mov	r4, r1
 8002b0e:	469a      	mov	sl, r3
 8002b10:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002b12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002b16:	d807      	bhi.n	8002b28 <_printf_i+0x28>
 8002b18:	2f62      	cmp	r7, #98	@ 0x62
 8002b1a:	d80a      	bhi.n	8002b32 <_printf_i+0x32>
 8002b1c:	2f00      	cmp	r7, #0
 8002b1e:	f000 80d3 	beq.w	8002cc8 <_printf_i+0x1c8>
 8002b22:	2f58      	cmp	r7, #88	@ 0x58
 8002b24:	f000 80ba 	beq.w	8002c9c <_printf_i+0x19c>
 8002b28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002b30:	e03a      	b.n	8002ba8 <_printf_i+0xa8>
 8002b32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002b36:	2b15      	cmp	r3, #21
 8002b38:	d8f6      	bhi.n	8002b28 <_printf_i+0x28>
 8002b3a:	a101      	add	r1, pc, #4	@ (adr r1, 8002b40 <_printf_i+0x40>)
 8002b3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b40:	08002b99 	.word	0x08002b99
 8002b44:	08002bad 	.word	0x08002bad
 8002b48:	08002b29 	.word	0x08002b29
 8002b4c:	08002b29 	.word	0x08002b29
 8002b50:	08002b29 	.word	0x08002b29
 8002b54:	08002b29 	.word	0x08002b29
 8002b58:	08002bad 	.word	0x08002bad
 8002b5c:	08002b29 	.word	0x08002b29
 8002b60:	08002b29 	.word	0x08002b29
 8002b64:	08002b29 	.word	0x08002b29
 8002b68:	08002b29 	.word	0x08002b29
 8002b6c:	08002caf 	.word	0x08002caf
 8002b70:	08002bd7 	.word	0x08002bd7
 8002b74:	08002c69 	.word	0x08002c69
 8002b78:	08002b29 	.word	0x08002b29
 8002b7c:	08002b29 	.word	0x08002b29
 8002b80:	08002cd1 	.word	0x08002cd1
 8002b84:	08002b29 	.word	0x08002b29
 8002b88:	08002bd7 	.word	0x08002bd7
 8002b8c:	08002b29 	.word	0x08002b29
 8002b90:	08002b29 	.word	0x08002b29
 8002b94:	08002c71 	.word	0x08002c71
 8002b98:	6833      	ldr	r3, [r6, #0]
 8002b9a:	1d1a      	adds	r2, r3, #4
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6032      	str	r2, [r6, #0]
 8002ba0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002ba4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e09e      	b.n	8002cea <_printf_i+0x1ea>
 8002bac:	6833      	ldr	r3, [r6, #0]
 8002bae:	6820      	ldr	r0, [r4, #0]
 8002bb0:	1d19      	adds	r1, r3, #4
 8002bb2:	6031      	str	r1, [r6, #0]
 8002bb4:	0606      	lsls	r6, r0, #24
 8002bb6:	d501      	bpl.n	8002bbc <_printf_i+0xbc>
 8002bb8:	681d      	ldr	r5, [r3, #0]
 8002bba:	e003      	b.n	8002bc4 <_printf_i+0xc4>
 8002bbc:	0645      	lsls	r5, r0, #25
 8002bbe:	d5fb      	bpl.n	8002bb8 <_printf_i+0xb8>
 8002bc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002bc4:	2d00      	cmp	r5, #0
 8002bc6:	da03      	bge.n	8002bd0 <_printf_i+0xd0>
 8002bc8:	232d      	movs	r3, #45	@ 0x2d
 8002bca:	426d      	negs	r5, r5
 8002bcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002bd0:	230a      	movs	r3, #10
 8002bd2:	4859      	ldr	r0, [pc, #356]	@ (8002d38 <_printf_i+0x238>)
 8002bd4:	e011      	b.n	8002bfa <_printf_i+0xfa>
 8002bd6:	6821      	ldr	r1, [r4, #0]
 8002bd8:	6833      	ldr	r3, [r6, #0]
 8002bda:	0608      	lsls	r0, r1, #24
 8002bdc:	f853 5b04 	ldr.w	r5, [r3], #4
 8002be0:	d402      	bmi.n	8002be8 <_printf_i+0xe8>
 8002be2:	0649      	lsls	r1, r1, #25
 8002be4:	bf48      	it	mi
 8002be6:	b2ad      	uxthmi	r5, r5
 8002be8:	2f6f      	cmp	r7, #111	@ 0x6f
 8002bea:	6033      	str	r3, [r6, #0]
 8002bec:	bf14      	ite	ne
 8002bee:	230a      	movne	r3, #10
 8002bf0:	2308      	moveq	r3, #8
 8002bf2:	4851      	ldr	r0, [pc, #324]	@ (8002d38 <_printf_i+0x238>)
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002bfa:	6866      	ldr	r6, [r4, #4]
 8002bfc:	2e00      	cmp	r6, #0
 8002bfe:	bfa8      	it	ge
 8002c00:	6821      	ldrge	r1, [r4, #0]
 8002c02:	60a6      	str	r6, [r4, #8]
 8002c04:	bfa4      	itt	ge
 8002c06:	f021 0104 	bicge.w	r1, r1, #4
 8002c0a:	6021      	strge	r1, [r4, #0]
 8002c0c:	b90d      	cbnz	r5, 8002c12 <_printf_i+0x112>
 8002c0e:	2e00      	cmp	r6, #0
 8002c10:	d04b      	beq.n	8002caa <_printf_i+0x1aa>
 8002c12:	4616      	mov	r6, r2
 8002c14:	fbb5 f1f3 	udiv	r1, r5, r3
 8002c18:	fb03 5711 	mls	r7, r3, r1, r5
 8002c1c:	5dc7      	ldrb	r7, [r0, r7]
 8002c1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002c22:	462f      	mov	r7, r5
 8002c24:	42bb      	cmp	r3, r7
 8002c26:	460d      	mov	r5, r1
 8002c28:	d9f4      	bls.n	8002c14 <_printf_i+0x114>
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d10b      	bne.n	8002c46 <_printf_i+0x146>
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	07df      	lsls	r7, r3, #31
 8002c32:	d508      	bpl.n	8002c46 <_printf_i+0x146>
 8002c34:	6923      	ldr	r3, [r4, #16]
 8002c36:	6861      	ldr	r1, [r4, #4]
 8002c38:	4299      	cmp	r1, r3
 8002c3a:	bfde      	ittt	le
 8002c3c:	2330      	movle	r3, #48	@ 0x30
 8002c3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002c42:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002c46:	1b92      	subs	r2, r2, r6
 8002c48:	6122      	str	r2, [r4, #16]
 8002c4a:	464b      	mov	r3, r9
 8002c4c:	4621      	mov	r1, r4
 8002c4e:	4640      	mov	r0, r8
 8002c50:	f8cd a000 	str.w	sl, [sp]
 8002c54:	aa03      	add	r2, sp, #12
 8002c56:	f7ff fee1 	bl	8002a1c <_printf_common>
 8002c5a:	3001      	adds	r0, #1
 8002c5c:	d14a      	bne.n	8002cf4 <_printf_i+0x1f4>
 8002c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c62:	b004      	add	sp, #16
 8002c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	f043 0320 	orr.w	r3, r3, #32
 8002c6e:	6023      	str	r3, [r4, #0]
 8002c70:	2778      	movs	r7, #120	@ 0x78
 8002c72:	4832      	ldr	r0, [pc, #200]	@ (8002d3c <_printf_i+0x23c>)
 8002c74:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002c78:	6823      	ldr	r3, [r4, #0]
 8002c7a:	6831      	ldr	r1, [r6, #0]
 8002c7c:	061f      	lsls	r7, r3, #24
 8002c7e:	f851 5b04 	ldr.w	r5, [r1], #4
 8002c82:	d402      	bmi.n	8002c8a <_printf_i+0x18a>
 8002c84:	065f      	lsls	r7, r3, #25
 8002c86:	bf48      	it	mi
 8002c88:	b2ad      	uxthmi	r5, r5
 8002c8a:	6031      	str	r1, [r6, #0]
 8002c8c:	07d9      	lsls	r1, r3, #31
 8002c8e:	bf44      	itt	mi
 8002c90:	f043 0320 	orrmi.w	r3, r3, #32
 8002c94:	6023      	strmi	r3, [r4, #0]
 8002c96:	b11d      	cbz	r5, 8002ca0 <_printf_i+0x1a0>
 8002c98:	2310      	movs	r3, #16
 8002c9a:	e7ab      	b.n	8002bf4 <_printf_i+0xf4>
 8002c9c:	4826      	ldr	r0, [pc, #152]	@ (8002d38 <_printf_i+0x238>)
 8002c9e:	e7e9      	b.n	8002c74 <_printf_i+0x174>
 8002ca0:	6823      	ldr	r3, [r4, #0]
 8002ca2:	f023 0320 	bic.w	r3, r3, #32
 8002ca6:	6023      	str	r3, [r4, #0]
 8002ca8:	e7f6      	b.n	8002c98 <_printf_i+0x198>
 8002caa:	4616      	mov	r6, r2
 8002cac:	e7bd      	b.n	8002c2a <_printf_i+0x12a>
 8002cae:	6833      	ldr	r3, [r6, #0]
 8002cb0:	6825      	ldr	r5, [r4, #0]
 8002cb2:	1d18      	adds	r0, r3, #4
 8002cb4:	6961      	ldr	r1, [r4, #20]
 8002cb6:	6030      	str	r0, [r6, #0]
 8002cb8:	062e      	lsls	r6, r5, #24
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	d501      	bpl.n	8002cc2 <_printf_i+0x1c2>
 8002cbe:	6019      	str	r1, [r3, #0]
 8002cc0:	e002      	b.n	8002cc8 <_printf_i+0x1c8>
 8002cc2:	0668      	lsls	r0, r5, #25
 8002cc4:	d5fb      	bpl.n	8002cbe <_printf_i+0x1be>
 8002cc6:	8019      	strh	r1, [r3, #0]
 8002cc8:	2300      	movs	r3, #0
 8002cca:	4616      	mov	r6, r2
 8002ccc:	6123      	str	r3, [r4, #16]
 8002cce:	e7bc      	b.n	8002c4a <_printf_i+0x14a>
 8002cd0:	6833      	ldr	r3, [r6, #0]
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	1d1a      	adds	r2, r3, #4
 8002cd6:	6032      	str	r2, [r6, #0]
 8002cd8:	681e      	ldr	r6, [r3, #0]
 8002cda:	6862      	ldr	r2, [r4, #4]
 8002cdc:	4630      	mov	r0, r6
 8002cde:	f000 f9b4 	bl	800304a <memchr>
 8002ce2:	b108      	cbz	r0, 8002ce8 <_printf_i+0x1e8>
 8002ce4:	1b80      	subs	r0, r0, r6
 8002ce6:	6060      	str	r0, [r4, #4]
 8002ce8:	6863      	ldr	r3, [r4, #4]
 8002cea:	6123      	str	r3, [r4, #16]
 8002cec:	2300      	movs	r3, #0
 8002cee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002cf2:	e7aa      	b.n	8002c4a <_printf_i+0x14a>
 8002cf4:	4632      	mov	r2, r6
 8002cf6:	4649      	mov	r1, r9
 8002cf8:	4640      	mov	r0, r8
 8002cfa:	6923      	ldr	r3, [r4, #16]
 8002cfc:	47d0      	blx	sl
 8002cfe:	3001      	adds	r0, #1
 8002d00:	d0ad      	beq.n	8002c5e <_printf_i+0x15e>
 8002d02:	6823      	ldr	r3, [r4, #0]
 8002d04:	079b      	lsls	r3, r3, #30
 8002d06:	d413      	bmi.n	8002d30 <_printf_i+0x230>
 8002d08:	68e0      	ldr	r0, [r4, #12]
 8002d0a:	9b03      	ldr	r3, [sp, #12]
 8002d0c:	4298      	cmp	r0, r3
 8002d0e:	bfb8      	it	lt
 8002d10:	4618      	movlt	r0, r3
 8002d12:	e7a6      	b.n	8002c62 <_printf_i+0x162>
 8002d14:	2301      	movs	r3, #1
 8002d16:	4632      	mov	r2, r6
 8002d18:	4649      	mov	r1, r9
 8002d1a:	4640      	mov	r0, r8
 8002d1c:	47d0      	blx	sl
 8002d1e:	3001      	adds	r0, #1
 8002d20:	d09d      	beq.n	8002c5e <_printf_i+0x15e>
 8002d22:	3501      	adds	r5, #1
 8002d24:	68e3      	ldr	r3, [r4, #12]
 8002d26:	9903      	ldr	r1, [sp, #12]
 8002d28:	1a5b      	subs	r3, r3, r1
 8002d2a:	42ab      	cmp	r3, r5
 8002d2c:	dcf2      	bgt.n	8002d14 <_printf_i+0x214>
 8002d2e:	e7eb      	b.n	8002d08 <_printf_i+0x208>
 8002d30:	2500      	movs	r5, #0
 8002d32:	f104 0619 	add.w	r6, r4, #25
 8002d36:	e7f5      	b.n	8002d24 <_printf_i+0x224>
 8002d38:	08004df4 	.word	0x08004df4
 8002d3c:	08004e05 	.word	0x08004e05

08002d40 <std>:
 8002d40:	2300      	movs	r3, #0
 8002d42:	b510      	push	{r4, lr}
 8002d44:	4604      	mov	r4, r0
 8002d46:	e9c0 3300 	strd	r3, r3, [r0]
 8002d4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d4e:	6083      	str	r3, [r0, #8]
 8002d50:	8181      	strh	r1, [r0, #12]
 8002d52:	6643      	str	r3, [r0, #100]	@ 0x64
 8002d54:	81c2      	strh	r2, [r0, #14]
 8002d56:	6183      	str	r3, [r0, #24]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	2208      	movs	r2, #8
 8002d5c:	305c      	adds	r0, #92	@ 0x5c
 8002d5e:	f000 f8f4 	bl	8002f4a <memset>
 8002d62:	4b0d      	ldr	r3, [pc, #52]	@ (8002d98 <std+0x58>)
 8002d64:	6224      	str	r4, [r4, #32]
 8002d66:	6263      	str	r3, [r4, #36]	@ 0x24
 8002d68:	4b0c      	ldr	r3, [pc, #48]	@ (8002d9c <std+0x5c>)
 8002d6a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002da0 <std+0x60>)
 8002d6e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002d70:	4b0c      	ldr	r3, [pc, #48]	@ (8002da4 <std+0x64>)
 8002d72:	6323      	str	r3, [r4, #48]	@ 0x30
 8002d74:	4b0c      	ldr	r3, [pc, #48]	@ (8002da8 <std+0x68>)
 8002d76:	429c      	cmp	r4, r3
 8002d78:	d006      	beq.n	8002d88 <std+0x48>
 8002d7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002d7e:	4294      	cmp	r4, r2
 8002d80:	d002      	beq.n	8002d88 <std+0x48>
 8002d82:	33d0      	adds	r3, #208	@ 0xd0
 8002d84:	429c      	cmp	r4, r3
 8002d86:	d105      	bne.n	8002d94 <std+0x54>
 8002d88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d90:	f000 b958 	b.w	8003044 <__retarget_lock_init_recursive>
 8002d94:	bd10      	pop	{r4, pc}
 8002d96:	bf00      	nop
 8002d98:	08002ec5 	.word	0x08002ec5
 8002d9c:	08002ee7 	.word	0x08002ee7
 8002da0:	08002f1f 	.word	0x08002f1f
 8002da4:	08002f43 	.word	0x08002f43
 8002da8:	20000260 	.word	0x20000260

08002dac <stdio_exit_handler>:
 8002dac:	4a02      	ldr	r2, [pc, #8]	@ (8002db8 <stdio_exit_handler+0xc>)
 8002dae:	4903      	ldr	r1, [pc, #12]	@ (8002dbc <stdio_exit_handler+0x10>)
 8002db0:	4803      	ldr	r0, [pc, #12]	@ (8002dc0 <stdio_exit_handler+0x14>)
 8002db2:	f000 b869 	b.w	8002e88 <_fwalk_sglue>
 8002db6:	bf00      	nop
 8002db8:	2000000c 	.word	0x2000000c
 8002dbc:	08004705 	.word	0x08004705
 8002dc0:	2000001c 	.word	0x2000001c

08002dc4 <cleanup_stdio>:
 8002dc4:	6841      	ldr	r1, [r0, #4]
 8002dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8002df8 <cleanup_stdio+0x34>)
 8002dc8:	b510      	push	{r4, lr}
 8002dca:	4299      	cmp	r1, r3
 8002dcc:	4604      	mov	r4, r0
 8002dce:	d001      	beq.n	8002dd4 <cleanup_stdio+0x10>
 8002dd0:	f001 fc98 	bl	8004704 <_fflush_r>
 8002dd4:	68a1      	ldr	r1, [r4, #8]
 8002dd6:	4b09      	ldr	r3, [pc, #36]	@ (8002dfc <cleanup_stdio+0x38>)
 8002dd8:	4299      	cmp	r1, r3
 8002dda:	d002      	beq.n	8002de2 <cleanup_stdio+0x1e>
 8002ddc:	4620      	mov	r0, r4
 8002dde:	f001 fc91 	bl	8004704 <_fflush_r>
 8002de2:	68e1      	ldr	r1, [r4, #12]
 8002de4:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <cleanup_stdio+0x3c>)
 8002de6:	4299      	cmp	r1, r3
 8002de8:	d004      	beq.n	8002df4 <cleanup_stdio+0x30>
 8002dea:	4620      	mov	r0, r4
 8002dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002df0:	f001 bc88 	b.w	8004704 <_fflush_r>
 8002df4:	bd10      	pop	{r4, pc}
 8002df6:	bf00      	nop
 8002df8:	20000260 	.word	0x20000260
 8002dfc:	200002c8 	.word	0x200002c8
 8002e00:	20000330 	.word	0x20000330

08002e04 <global_stdio_init.part.0>:
 8002e04:	b510      	push	{r4, lr}
 8002e06:	4b0b      	ldr	r3, [pc, #44]	@ (8002e34 <global_stdio_init.part.0+0x30>)
 8002e08:	4c0b      	ldr	r4, [pc, #44]	@ (8002e38 <global_stdio_init.part.0+0x34>)
 8002e0a:	4a0c      	ldr	r2, [pc, #48]	@ (8002e3c <global_stdio_init.part.0+0x38>)
 8002e0c:	4620      	mov	r0, r4
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	2104      	movs	r1, #4
 8002e12:	2200      	movs	r2, #0
 8002e14:	f7ff ff94 	bl	8002d40 <std>
 8002e18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	2109      	movs	r1, #9
 8002e20:	f7ff ff8e 	bl	8002d40 <std>
 8002e24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002e28:	2202      	movs	r2, #2
 8002e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e2e:	2112      	movs	r1, #18
 8002e30:	f7ff bf86 	b.w	8002d40 <std>
 8002e34:	20000398 	.word	0x20000398
 8002e38:	20000260 	.word	0x20000260
 8002e3c:	08002dad 	.word	0x08002dad

08002e40 <__sfp_lock_acquire>:
 8002e40:	4801      	ldr	r0, [pc, #4]	@ (8002e48 <__sfp_lock_acquire+0x8>)
 8002e42:	f000 b900 	b.w	8003046 <__retarget_lock_acquire_recursive>
 8002e46:	bf00      	nop
 8002e48:	200003a1 	.word	0x200003a1

08002e4c <__sfp_lock_release>:
 8002e4c:	4801      	ldr	r0, [pc, #4]	@ (8002e54 <__sfp_lock_release+0x8>)
 8002e4e:	f000 b8fb 	b.w	8003048 <__retarget_lock_release_recursive>
 8002e52:	bf00      	nop
 8002e54:	200003a1 	.word	0x200003a1

08002e58 <__sinit>:
 8002e58:	b510      	push	{r4, lr}
 8002e5a:	4604      	mov	r4, r0
 8002e5c:	f7ff fff0 	bl	8002e40 <__sfp_lock_acquire>
 8002e60:	6a23      	ldr	r3, [r4, #32]
 8002e62:	b11b      	cbz	r3, 8002e6c <__sinit+0x14>
 8002e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e68:	f7ff bff0 	b.w	8002e4c <__sfp_lock_release>
 8002e6c:	4b04      	ldr	r3, [pc, #16]	@ (8002e80 <__sinit+0x28>)
 8002e6e:	6223      	str	r3, [r4, #32]
 8002e70:	4b04      	ldr	r3, [pc, #16]	@ (8002e84 <__sinit+0x2c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1f5      	bne.n	8002e64 <__sinit+0xc>
 8002e78:	f7ff ffc4 	bl	8002e04 <global_stdio_init.part.0>
 8002e7c:	e7f2      	b.n	8002e64 <__sinit+0xc>
 8002e7e:	bf00      	nop
 8002e80:	08002dc5 	.word	0x08002dc5
 8002e84:	20000398 	.word	0x20000398

08002e88 <_fwalk_sglue>:
 8002e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e8c:	4607      	mov	r7, r0
 8002e8e:	4688      	mov	r8, r1
 8002e90:	4614      	mov	r4, r2
 8002e92:	2600      	movs	r6, #0
 8002e94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e98:	f1b9 0901 	subs.w	r9, r9, #1
 8002e9c:	d505      	bpl.n	8002eaa <_fwalk_sglue+0x22>
 8002e9e:	6824      	ldr	r4, [r4, #0]
 8002ea0:	2c00      	cmp	r4, #0
 8002ea2:	d1f7      	bne.n	8002e94 <_fwalk_sglue+0xc>
 8002ea4:	4630      	mov	r0, r6
 8002ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002eaa:	89ab      	ldrh	r3, [r5, #12]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d907      	bls.n	8002ec0 <_fwalk_sglue+0x38>
 8002eb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	d003      	beq.n	8002ec0 <_fwalk_sglue+0x38>
 8002eb8:	4629      	mov	r1, r5
 8002eba:	4638      	mov	r0, r7
 8002ebc:	47c0      	blx	r8
 8002ebe:	4306      	orrs	r6, r0
 8002ec0:	3568      	adds	r5, #104	@ 0x68
 8002ec2:	e7e9      	b.n	8002e98 <_fwalk_sglue+0x10>

08002ec4 <__sread>:
 8002ec4:	b510      	push	{r4, lr}
 8002ec6:	460c      	mov	r4, r1
 8002ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ecc:	f000 f86c 	bl	8002fa8 <_read_r>
 8002ed0:	2800      	cmp	r0, #0
 8002ed2:	bfab      	itete	ge
 8002ed4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002ed6:	89a3      	ldrhlt	r3, [r4, #12]
 8002ed8:	181b      	addge	r3, r3, r0
 8002eda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002ede:	bfac      	ite	ge
 8002ee0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002ee2:	81a3      	strhlt	r3, [r4, #12]
 8002ee4:	bd10      	pop	{r4, pc}

08002ee6 <__swrite>:
 8002ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002eea:	461f      	mov	r7, r3
 8002eec:	898b      	ldrh	r3, [r1, #12]
 8002eee:	4605      	mov	r5, r0
 8002ef0:	05db      	lsls	r3, r3, #23
 8002ef2:	460c      	mov	r4, r1
 8002ef4:	4616      	mov	r6, r2
 8002ef6:	d505      	bpl.n	8002f04 <__swrite+0x1e>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	2200      	movs	r2, #0
 8002efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f00:	f000 f840 	bl	8002f84 <_lseek_r>
 8002f04:	89a3      	ldrh	r3, [r4, #12]
 8002f06:	4632      	mov	r2, r6
 8002f08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f0c:	81a3      	strh	r3, [r4, #12]
 8002f0e:	4628      	mov	r0, r5
 8002f10:	463b      	mov	r3, r7
 8002f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f1a:	f000 b857 	b.w	8002fcc <_write_r>

08002f1e <__sseek>:
 8002f1e:	b510      	push	{r4, lr}
 8002f20:	460c      	mov	r4, r1
 8002f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f26:	f000 f82d 	bl	8002f84 <_lseek_r>
 8002f2a:	1c43      	adds	r3, r0, #1
 8002f2c:	89a3      	ldrh	r3, [r4, #12]
 8002f2e:	bf15      	itete	ne
 8002f30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002f32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002f36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002f3a:	81a3      	strheq	r3, [r4, #12]
 8002f3c:	bf18      	it	ne
 8002f3e:	81a3      	strhne	r3, [r4, #12]
 8002f40:	bd10      	pop	{r4, pc}

08002f42 <__sclose>:
 8002f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f46:	f000 b80d 	b.w	8002f64 <_close_r>

08002f4a <memset>:
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	4402      	add	r2, r0
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d100      	bne.n	8002f54 <memset+0xa>
 8002f52:	4770      	bx	lr
 8002f54:	f803 1b01 	strb.w	r1, [r3], #1
 8002f58:	e7f9      	b.n	8002f4e <memset+0x4>
	...

08002f5c <_localeconv_r>:
 8002f5c:	4800      	ldr	r0, [pc, #0]	@ (8002f60 <_localeconv_r+0x4>)
 8002f5e:	4770      	bx	lr
 8002f60:	20000158 	.word	0x20000158

08002f64 <_close_r>:
 8002f64:	b538      	push	{r3, r4, r5, lr}
 8002f66:	2300      	movs	r3, #0
 8002f68:	4d05      	ldr	r5, [pc, #20]	@ (8002f80 <_close_r+0x1c>)
 8002f6a:	4604      	mov	r4, r0
 8002f6c:	4608      	mov	r0, r1
 8002f6e:	602b      	str	r3, [r5, #0]
 8002f70:	f7fe f8e1 	bl	8001136 <_close>
 8002f74:	1c43      	adds	r3, r0, #1
 8002f76:	d102      	bne.n	8002f7e <_close_r+0x1a>
 8002f78:	682b      	ldr	r3, [r5, #0]
 8002f7a:	b103      	cbz	r3, 8002f7e <_close_r+0x1a>
 8002f7c:	6023      	str	r3, [r4, #0]
 8002f7e:	bd38      	pop	{r3, r4, r5, pc}
 8002f80:	2000039c 	.word	0x2000039c

08002f84 <_lseek_r>:
 8002f84:	b538      	push	{r3, r4, r5, lr}
 8002f86:	4604      	mov	r4, r0
 8002f88:	4608      	mov	r0, r1
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	4d05      	ldr	r5, [pc, #20]	@ (8002fa4 <_lseek_r+0x20>)
 8002f90:	602a      	str	r2, [r5, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	f7fe f8f3 	bl	800117e <_lseek>
 8002f98:	1c43      	adds	r3, r0, #1
 8002f9a:	d102      	bne.n	8002fa2 <_lseek_r+0x1e>
 8002f9c:	682b      	ldr	r3, [r5, #0]
 8002f9e:	b103      	cbz	r3, 8002fa2 <_lseek_r+0x1e>
 8002fa0:	6023      	str	r3, [r4, #0]
 8002fa2:	bd38      	pop	{r3, r4, r5, pc}
 8002fa4:	2000039c 	.word	0x2000039c

08002fa8 <_read_r>:
 8002fa8:	b538      	push	{r3, r4, r5, lr}
 8002faa:	4604      	mov	r4, r0
 8002fac:	4608      	mov	r0, r1
 8002fae:	4611      	mov	r1, r2
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	4d05      	ldr	r5, [pc, #20]	@ (8002fc8 <_read_r+0x20>)
 8002fb4:	602a      	str	r2, [r5, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	f7fe f8a0 	bl	80010fc <_read>
 8002fbc:	1c43      	adds	r3, r0, #1
 8002fbe:	d102      	bne.n	8002fc6 <_read_r+0x1e>
 8002fc0:	682b      	ldr	r3, [r5, #0]
 8002fc2:	b103      	cbz	r3, 8002fc6 <_read_r+0x1e>
 8002fc4:	6023      	str	r3, [r4, #0]
 8002fc6:	bd38      	pop	{r3, r4, r5, pc}
 8002fc8:	2000039c 	.word	0x2000039c

08002fcc <_write_r>:
 8002fcc:	b538      	push	{r3, r4, r5, lr}
 8002fce:	4604      	mov	r4, r0
 8002fd0:	4608      	mov	r0, r1
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	4d05      	ldr	r5, [pc, #20]	@ (8002fec <_write_r+0x20>)
 8002fd8:	602a      	str	r2, [r5, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f7fd fe9a 	bl	8000d14 <_write>
 8002fe0:	1c43      	adds	r3, r0, #1
 8002fe2:	d102      	bne.n	8002fea <_write_r+0x1e>
 8002fe4:	682b      	ldr	r3, [r5, #0]
 8002fe6:	b103      	cbz	r3, 8002fea <_write_r+0x1e>
 8002fe8:	6023      	str	r3, [r4, #0]
 8002fea:	bd38      	pop	{r3, r4, r5, pc}
 8002fec:	2000039c 	.word	0x2000039c

08002ff0 <__errno>:
 8002ff0:	4b01      	ldr	r3, [pc, #4]	@ (8002ff8 <__errno+0x8>)
 8002ff2:	6818      	ldr	r0, [r3, #0]
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	20000018 	.word	0x20000018

08002ffc <__libc_init_array>:
 8002ffc:	b570      	push	{r4, r5, r6, lr}
 8002ffe:	2600      	movs	r6, #0
 8003000:	4d0c      	ldr	r5, [pc, #48]	@ (8003034 <__libc_init_array+0x38>)
 8003002:	4c0d      	ldr	r4, [pc, #52]	@ (8003038 <__libc_init_array+0x3c>)
 8003004:	1b64      	subs	r4, r4, r5
 8003006:	10a4      	asrs	r4, r4, #2
 8003008:	42a6      	cmp	r6, r4
 800300a:	d109      	bne.n	8003020 <__libc_init_array+0x24>
 800300c:	f001 fec6 	bl	8004d9c <_init>
 8003010:	2600      	movs	r6, #0
 8003012:	4d0a      	ldr	r5, [pc, #40]	@ (800303c <__libc_init_array+0x40>)
 8003014:	4c0a      	ldr	r4, [pc, #40]	@ (8003040 <__libc_init_array+0x44>)
 8003016:	1b64      	subs	r4, r4, r5
 8003018:	10a4      	asrs	r4, r4, #2
 800301a:	42a6      	cmp	r6, r4
 800301c:	d105      	bne.n	800302a <__libc_init_array+0x2e>
 800301e:	bd70      	pop	{r4, r5, r6, pc}
 8003020:	f855 3b04 	ldr.w	r3, [r5], #4
 8003024:	4798      	blx	r3
 8003026:	3601      	adds	r6, #1
 8003028:	e7ee      	b.n	8003008 <__libc_init_array+0xc>
 800302a:	f855 3b04 	ldr.w	r3, [r5], #4
 800302e:	4798      	blx	r3
 8003030:	3601      	adds	r6, #1
 8003032:	e7f2      	b.n	800301a <__libc_init_array+0x1e>
 8003034:	08005158 	.word	0x08005158
 8003038:	08005158 	.word	0x08005158
 800303c:	08005158 	.word	0x08005158
 8003040:	0800515c 	.word	0x0800515c

08003044 <__retarget_lock_init_recursive>:
 8003044:	4770      	bx	lr

08003046 <__retarget_lock_acquire_recursive>:
 8003046:	4770      	bx	lr

08003048 <__retarget_lock_release_recursive>:
 8003048:	4770      	bx	lr

0800304a <memchr>:
 800304a:	4603      	mov	r3, r0
 800304c:	b510      	push	{r4, lr}
 800304e:	b2c9      	uxtb	r1, r1
 8003050:	4402      	add	r2, r0
 8003052:	4293      	cmp	r3, r2
 8003054:	4618      	mov	r0, r3
 8003056:	d101      	bne.n	800305c <memchr+0x12>
 8003058:	2000      	movs	r0, #0
 800305a:	e003      	b.n	8003064 <memchr+0x1a>
 800305c:	7804      	ldrb	r4, [r0, #0]
 800305e:	3301      	adds	r3, #1
 8003060:	428c      	cmp	r4, r1
 8003062:	d1f6      	bne.n	8003052 <memchr+0x8>
 8003064:	bd10      	pop	{r4, pc}

08003066 <quorem>:
 8003066:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800306a:	6903      	ldr	r3, [r0, #16]
 800306c:	690c      	ldr	r4, [r1, #16]
 800306e:	4607      	mov	r7, r0
 8003070:	42a3      	cmp	r3, r4
 8003072:	db7e      	blt.n	8003172 <quorem+0x10c>
 8003074:	3c01      	subs	r4, #1
 8003076:	00a3      	lsls	r3, r4, #2
 8003078:	f100 0514 	add.w	r5, r0, #20
 800307c:	f101 0814 	add.w	r8, r1, #20
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003086:	9301      	str	r3, [sp, #4]
 8003088:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800308c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003090:	3301      	adds	r3, #1
 8003092:	429a      	cmp	r2, r3
 8003094:	fbb2 f6f3 	udiv	r6, r2, r3
 8003098:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800309c:	d32e      	bcc.n	80030fc <quorem+0x96>
 800309e:	f04f 0a00 	mov.w	sl, #0
 80030a2:	46c4      	mov	ip, r8
 80030a4:	46ae      	mov	lr, r5
 80030a6:	46d3      	mov	fp, sl
 80030a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80030ac:	b298      	uxth	r0, r3
 80030ae:	fb06 a000 	mla	r0, r6, r0, sl
 80030b2:	0c1b      	lsrs	r3, r3, #16
 80030b4:	0c02      	lsrs	r2, r0, #16
 80030b6:	fb06 2303 	mla	r3, r6, r3, r2
 80030ba:	f8de 2000 	ldr.w	r2, [lr]
 80030be:	b280      	uxth	r0, r0
 80030c0:	b292      	uxth	r2, r2
 80030c2:	1a12      	subs	r2, r2, r0
 80030c4:	445a      	add	r2, fp
 80030c6:	f8de 0000 	ldr.w	r0, [lr]
 80030ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80030d4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80030d8:	b292      	uxth	r2, r2
 80030da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80030de:	45e1      	cmp	r9, ip
 80030e0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80030e4:	f84e 2b04 	str.w	r2, [lr], #4
 80030e8:	d2de      	bcs.n	80030a8 <quorem+0x42>
 80030ea:	9b00      	ldr	r3, [sp, #0]
 80030ec:	58eb      	ldr	r3, [r5, r3]
 80030ee:	b92b      	cbnz	r3, 80030fc <quorem+0x96>
 80030f0:	9b01      	ldr	r3, [sp, #4]
 80030f2:	3b04      	subs	r3, #4
 80030f4:	429d      	cmp	r5, r3
 80030f6:	461a      	mov	r2, r3
 80030f8:	d32f      	bcc.n	800315a <quorem+0xf4>
 80030fa:	613c      	str	r4, [r7, #16]
 80030fc:	4638      	mov	r0, r7
 80030fe:	f001 f979 	bl	80043f4 <__mcmp>
 8003102:	2800      	cmp	r0, #0
 8003104:	db25      	blt.n	8003152 <quorem+0xec>
 8003106:	4629      	mov	r1, r5
 8003108:	2000      	movs	r0, #0
 800310a:	f858 2b04 	ldr.w	r2, [r8], #4
 800310e:	f8d1 c000 	ldr.w	ip, [r1]
 8003112:	fa1f fe82 	uxth.w	lr, r2
 8003116:	fa1f f38c 	uxth.w	r3, ip
 800311a:	eba3 030e 	sub.w	r3, r3, lr
 800311e:	4403      	add	r3, r0
 8003120:	0c12      	lsrs	r2, r2, #16
 8003122:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003126:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800312a:	b29b      	uxth	r3, r3
 800312c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003130:	45c1      	cmp	r9, r8
 8003132:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003136:	f841 3b04 	str.w	r3, [r1], #4
 800313a:	d2e6      	bcs.n	800310a <quorem+0xa4>
 800313c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003140:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003144:	b922      	cbnz	r2, 8003150 <quorem+0xea>
 8003146:	3b04      	subs	r3, #4
 8003148:	429d      	cmp	r5, r3
 800314a:	461a      	mov	r2, r3
 800314c:	d30b      	bcc.n	8003166 <quorem+0x100>
 800314e:	613c      	str	r4, [r7, #16]
 8003150:	3601      	adds	r6, #1
 8003152:	4630      	mov	r0, r6
 8003154:	b003      	add	sp, #12
 8003156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800315a:	6812      	ldr	r2, [r2, #0]
 800315c:	3b04      	subs	r3, #4
 800315e:	2a00      	cmp	r2, #0
 8003160:	d1cb      	bne.n	80030fa <quorem+0x94>
 8003162:	3c01      	subs	r4, #1
 8003164:	e7c6      	b.n	80030f4 <quorem+0x8e>
 8003166:	6812      	ldr	r2, [r2, #0]
 8003168:	3b04      	subs	r3, #4
 800316a:	2a00      	cmp	r2, #0
 800316c:	d1ef      	bne.n	800314e <quorem+0xe8>
 800316e:	3c01      	subs	r4, #1
 8003170:	e7ea      	b.n	8003148 <quorem+0xe2>
 8003172:	2000      	movs	r0, #0
 8003174:	e7ee      	b.n	8003154 <quorem+0xee>
	...

08003178 <_dtoa_r>:
 8003178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800317c:	4614      	mov	r4, r2
 800317e:	461d      	mov	r5, r3
 8003180:	69c7      	ldr	r7, [r0, #28]
 8003182:	b097      	sub	sp, #92	@ 0x5c
 8003184:	4683      	mov	fp, r0
 8003186:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800318a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800318c:	b97f      	cbnz	r7, 80031ae <_dtoa_r+0x36>
 800318e:	2010      	movs	r0, #16
 8003190:	f000 fe02 	bl	8003d98 <malloc>
 8003194:	4602      	mov	r2, r0
 8003196:	f8cb 001c 	str.w	r0, [fp, #28]
 800319a:	b920      	cbnz	r0, 80031a6 <_dtoa_r+0x2e>
 800319c:	21ef      	movs	r1, #239	@ 0xef
 800319e:	4ba8      	ldr	r3, [pc, #672]	@ (8003440 <_dtoa_r+0x2c8>)
 80031a0:	48a8      	ldr	r0, [pc, #672]	@ (8003444 <_dtoa_r+0x2cc>)
 80031a2:	f001 faf5 	bl	8004790 <__assert_func>
 80031a6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80031aa:	6007      	str	r7, [r0, #0]
 80031ac:	60c7      	str	r7, [r0, #12]
 80031ae:	f8db 301c 	ldr.w	r3, [fp, #28]
 80031b2:	6819      	ldr	r1, [r3, #0]
 80031b4:	b159      	cbz	r1, 80031ce <_dtoa_r+0x56>
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	2301      	movs	r3, #1
 80031ba:	4093      	lsls	r3, r2
 80031bc:	604a      	str	r2, [r1, #4]
 80031be:	608b      	str	r3, [r1, #8]
 80031c0:	4658      	mov	r0, fp
 80031c2:	f000 fedf 	bl	8003f84 <_Bfree>
 80031c6:	2200      	movs	r2, #0
 80031c8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	1e2b      	subs	r3, r5, #0
 80031d0:	bfaf      	iteee	ge
 80031d2:	2300      	movge	r3, #0
 80031d4:	2201      	movlt	r2, #1
 80031d6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80031da:	9303      	strlt	r3, [sp, #12]
 80031dc:	bfa8      	it	ge
 80031de:	6033      	strge	r3, [r6, #0]
 80031e0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80031e4:	4b98      	ldr	r3, [pc, #608]	@ (8003448 <_dtoa_r+0x2d0>)
 80031e6:	bfb8      	it	lt
 80031e8:	6032      	strlt	r2, [r6, #0]
 80031ea:	ea33 0308 	bics.w	r3, r3, r8
 80031ee:	d112      	bne.n	8003216 <_dtoa_r+0x9e>
 80031f0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80031f4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80031fc:	4323      	orrs	r3, r4
 80031fe:	f000 8550 	beq.w	8003ca2 <_dtoa_r+0xb2a>
 8003202:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003204:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800344c <_dtoa_r+0x2d4>
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 8552 	beq.w	8003cb2 <_dtoa_r+0xb3a>
 800320e:	f10a 0303 	add.w	r3, sl, #3
 8003212:	f000 bd4c 	b.w	8003cae <_dtoa_r+0xb36>
 8003216:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800321a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800321e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003222:	2200      	movs	r2, #0
 8003224:	2300      	movs	r3, #0
 8003226:	f7fd fbbf 	bl	80009a8 <__aeabi_dcmpeq>
 800322a:	4607      	mov	r7, r0
 800322c:	b158      	cbz	r0, 8003246 <_dtoa_r+0xce>
 800322e:	2301      	movs	r3, #1
 8003230:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003236:	b113      	cbz	r3, 800323e <_dtoa_r+0xc6>
 8003238:	4b85      	ldr	r3, [pc, #532]	@ (8003450 <_dtoa_r+0x2d8>)
 800323a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8003454 <_dtoa_r+0x2dc>
 8003242:	f000 bd36 	b.w	8003cb2 <_dtoa_r+0xb3a>
 8003246:	ab14      	add	r3, sp, #80	@ 0x50
 8003248:	9301      	str	r3, [sp, #4]
 800324a:	ab15      	add	r3, sp, #84	@ 0x54
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	4658      	mov	r0, fp
 8003250:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003254:	f001 f97e 	bl	8004554 <__d2b>
 8003258:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800325c:	4681      	mov	r9, r0
 800325e:	2e00      	cmp	r6, #0
 8003260:	d077      	beq.n	8003352 <_dtoa_r+0x1da>
 8003262:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003266:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003268:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800326c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003270:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003274:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003278:	9712      	str	r7, [sp, #72]	@ 0x48
 800327a:	4619      	mov	r1, r3
 800327c:	2200      	movs	r2, #0
 800327e:	4b76      	ldr	r3, [pc, #472]	@ (8003458 <_dtoa_r+0x2e0>)
 8003280:	f7fc ff72 	bl	8000168 <__aeabi_dsub>
 8003284:	a368      	add	r3, pc, #416	@ (adr r3, 8003428 <_dtoa_r+0x2b0>)
 8003286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328a:	f7fd f925 	bl	80004d8 <__aeabi_dmul>
 800328e:	a368      	add	r3, pc, #416	@ (adr r3, 8003430 <_dtoa_r+0x2b8>)
 8003290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003294:	f7fc ff6a 	bl	800016c <__adddf3>
 8003298:	4604      	mov	r4, r0
 800329a:	4630      	mov	r0, r6
 800329c:	460d      	mov	r5, r1
 800329e:	f7fd f8b1 	bl	8000404 <__aeabi_i2d>
 80032a2:	a365      	add	r3, pc, #404	@ (adr r3, 8003438 <_dtoa_r+0x2c0>)
 80032a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a8:	f7fd f916 	bl	80004d8 <__aeabi_dmul>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4620      	mov	r0, r4
 80032b2:	4629      	mov	r1, r5
 80032b4:	f7fc ff5a 	bl	800016c <__adddf3>
 80032b8:	4604      	mov	r4, r0
 80032ba:	460d      	mov	r5, r1
 80032bc:	f7fd fbbc 	bl	8000a38 <__aeabi_d2iz>
 80032c0:	2200      	movs	r2, #0
 80032c2:	4607      	mov	r7, r0
 80032c4:	2300      	movs	r3, #0
 80032c6:	4620      	mov	r0, r4
 80032c8:	4629      	mov	r1, r5
 80032ca:	f7fd fb77 	bl	80009bc <__aeabi_dcmplt>
 80032ce:	b140      	cbz	r0, 80032e2 <_dtoa_r+0x16a>
 80032d0:	4638      	mov	r0, r7
 80032d2:	f7fd f897 	bl	8000404 <__aeabi_i2d>
 80032d6:	4622      	mov	r2, r4
 80032d8:	462b      	mov	r3, r5
 80032da:	f7fd fb65 	bl	80009a8 <__aeabi_dcmpeq>
 80032de:	b900      	cbnz	r0, 80032e2 <_dtoa_r+0x16a>
 80032e0:	3f01      	subs	r7, #1
 80032e2:	2f16      	cmp	r7, #22
 80032e4:	d853      	bhi.n	800338e <_dtoa_r+0x216>
 80032e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80032ea:	4b5c      	ldr	r3, [pc, #368]	@ (800345c <_dtoa_r+0x2e4>)
 80032ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80032f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f4:	f7fd fb62 	bl	80009bc <__aeabi_dcmplt>
 80032f8:	2800      	cmp	r0, #0
 80032fa:	d04a      	beq.n	8003392 <_dtoa_r+0x21a>
 80032fc:	2300      	movs	r3, #0
 80032fe:	3f01      	subs	r7, #1
 8003300:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003302:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003304:	1b9b      	subs	r3, r3, r6
 8003306:	1e5a      	subs	r2, r3, #1
 8003308:	bf46      	itte	mi
 800330a:	f1c3 0801 	rsbmi	r8, r3, #1
 800330e:	2300      	movmi	r3, #0
 8003310:	f04f 0800 	movpl.w	r8, #0
 8003314:	9209      	str	r2, [sp, #36]	@ 0x24
 8003316:	bf48      	it	mi
 8003318:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800331a:	2f00      	cmp	r7, #0
 800331c:	db3b      	blt.n	8003396 <_dtoa_r+0x21e>
 800331e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003320:	970e      	str	r7, [sp, #56]	@ 0x38
 8003322:	443b      	add	r3, r7
 8003324:	9309      	str	r3, [sp, #36]	@ 0x24
 8003326:	2300      	movs	r3, #0
 8003328:	930a      	str	r3, [sp, #40]	@ 0x28
 800332a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800332c:	2b09      	cmp	r3, #9
 800332e:	d866      	bhi.n	80033fe <_dtoa_r+0x286>
 8003330:	2b05      	cmp	r3, #5
 8003332:	bfc4      	itt	gt
 8003334:	3b04      	subgt	r3, #4
 8003336:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003338:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800333a:	bfc8      	it	gt
 800333c:	2400      	movgt	r4, #0
 800333e:	f1a3 0302 	sub.w	r3, r3, #2
 8003342:	bfd8      	it	le
 8003344:	2401      	movle	r4, #1
 8003346:	2b03      	cmp	r3, #3
 8003348:	d864      	bhi.n	8003414 <_dtoa_r+0x29c>
 800334a:	e8df f003 	tbb	[pc, r3]
 800334e:	382b      	.short	0x382b
 8003350:	5636      	.short	0x5636
 8003352:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003356:	441e      	add	r6, r3
 8003358:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800335c:	2b20      	cmp	r3, #32
 800335e:	bfc1      	itttt	gt
 8003360:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003364:	fa08 f803 	lslgt.w	r8, r8, r3
 8003368:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800336c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003370:	bfd6      	itet	le
 8003372:	f1c3 0320 	rsble	r3, r3, #32
 8003376:	ea48 0003 	orrgt.w	r0, r8, r3
 800337a:	fa04 f003 	lslle.w	r0, r4, r3
 800337e:	f7fd f831 	bl	80003e4 <__aeabi_ui2d>
 8003382:	2201      	movs	r2, #1
 8003384:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003388:	3e01      	subs	r6, #1
 800338a:	9212      	str	r2, [sp, #72]	@ 0x48
 800338c:	e775      	b.n	800327a <_dtoa_r+0x102>
 800338e:	2301      	movs	r3, #1
 8003390:	e7b6      	b.n	8003300 <_dtoa_r+0x188>
 8003392:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003394:	e7b5      	b.n	8003302 <_dtoa_r+0x18a>
 8003396:	427b      	negs	r3, r7
 8003398:	930a      	str	r3, [sp, #40]	@ 0x28
 800339a:	2300      	movs	r3, #0
 800339c:	eba8 0807 	sub.w	r8, r8, r7
 80033a0:	930e      	str	r3, [sp, #56]	@ 0x38
 80033a2:	e7c2      	b.n	800332a <_dtoa_r+0x1b2>
 80033a4:	2300      	movs	r3, #0
 80033a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80033a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	dc35      	bgt.n	800341a <_dtoa_r+0x2a2>
 80033ae:	2301      	movs	r3, #1
 80033b0:	461a      	mov	r2, r3
 80033b2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80033b6:	9221      	str	r2, [sp, #132]	@ 0x84
 80033b8:	e00b      	b.n	80033d2 <_dtoa_r+0x25a>
 80033ba:	2301      	movs	r3, #1
 80033bc:	e7f3      	b.n	80033a6 <_dtoa_r+0x22e>
 80033be:	2300      	movs	r3, #0
 80033c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80033c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80033c4:	18fb      	adds	r3, r7, r3
 80033c6:	9308      	str	r3, [sp, #32]
 80033c8:	3301      	adds	r3, #1
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	9307      	str	r3, [sp, #28]
 80033ce:	bfb8      	it	lt
 80033d0:	2301      	movlt	r3, #1
 80033d2:	2100      	movs	r1, #0
 80033d4:	2204      	movs	r2, #4
 80033d6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80033da:	f102 0514 	add.w	r5, r2, #20
 80033de:	429d      	cmp	r5, r3
 80033e0:	d91f      	bls.n	8003422 <_dtoa_r+0x2aa>
 80033e2:	6041      	str	r1, [r0, #4]
 80033e4:	4658      	mov	r0, fp
 80033e6:	f000 fd8d 	bl	8003f04 <_Balloc>
 80033ea:	4682      	mov	sl, r0
 80033ec:	2800      	cmp	r0, #0
 80033ee:	d139      	bne.n	8003464 <_dtoa_r+0x2ec>
 80033f0:	4602      	mov	r2, r0
 80033f2:	f240 11af 	movw	r1, #431	@ 0x1af
 80033f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003460 <_dtoa_r+0x2e8>)
 80033f8:	e6d2      	b.n	80031a0 <_dtoa_r+0x28>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e7e0      	b.n	80033c0 <_dtoa_r+0x248>
 80033fe:	2401      	movs	r4, #1
 8003400:	2300      	movs	r3, #0
 8003402:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003404:	9320      	str	r3, [sp, #128]	@ 0x80
 8003406:	f04f 33ff 	mov.w	r3, #4294967295
 800340a:	2200      	movs	r2, #0
 800340c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003410:	2312      	movs	r3, #18
 8003412:	e7d0      	b.n	80033b6 <_dtoa_r+0x23e>
 8003414:	2301      	movs	r3, #1
 8003416:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003418:	e7f5      	b.n	8003406 <_dtoa_r+0x28e>
 800341a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800341c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003420:	e7d7      	b.n	80033d2 <_dtoa_r+0x25a>
 8003422:	3101      	adds	r1, #1
 8003424:	0052      	lsls	r2, r2, #1
 8003426:	e7d8      	b.n	80033da <_dtoa_r+0x262>
 8003428:	636f4361 	.word	0x636f4361
 800342c:	3fd287a7 	.word	0x3fd287a7
 8003430:	8b60c8b3 	.word	0x8b60c8b3
 8003434:	3fc68a28 	.word	0x3fc68a28
 8003438:	509f79fb 	.word	0x509f79fb
 800343c:	3fd34413 	.word	0x3fd34413
 8003440:	08004e23 	.word	0x08004e23
 8003444:	08004e3a 	.word	0x08004e3a
 8003448:	7ff00000 	.word	0x7ff00000
 800344c:	08004e1f 	.word	0x08004e1f
 8003450:	08004df3 	.word	0x08004df3
 8003454:	08004df2 	.word	0x08004df2
 8003458:	3ff80000 	.word	0x3ff80000
 800345c:	08004f30 	.word	0x08004f30
 8003460:	08004e92 	.word	0x08004e92
 8003464:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003468:	6018      	str	r0, [r3, #0]
 800346a:	9b07      	ldr	r3, [sp, #28]
 800346c:	2b0e      	cmp	r3, #14
 800346e:	f200 80a4 	bhi.w	80035ba <_dtoa_r+0x442>
 8003472:	2c00      	cmp	r4, #0
 8003474:	f000 80a1 	beq.w	80035ba <_dtoa_r+0x442>
 8003478:	2f00      	cmp	r7, #0
 800347a:	dd33      	ble.n	80034e4 <_dtoa_r+0x36c>
 800347c:	4b86      	ldr	r3, [pc, #536]	@ (8003698 <_dtoa_r+0x520>)
 800347e:	f007 020f 	and.w	r2, r7, #15
 8003482:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003486:	05f8      	lsls	r0, r7, #23
 8003488:	e9d3 3400 	ldrd	r3, r4, [r3]
 800348c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003490:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003494:	d516      	bpl.n	80034c4 <_dtoa_r+0x34c>
 8003496:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800349a:	4b80      	ldr	r3, [pc, #512]	@ (800369c <_dtoa_r+0x524>)
 800349c:	2603      	movs	r6, #3
 800349e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80034a2:	f7fd f943 	bl	800072c <__aeabi_ddiv>
 80034a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80034aa:	f004 040f 	and.w	r4, r4, #15
 80034ae:	4d7b      	ldr	r5, [pc, #492]	@ (800369c <_dtoa_r+0x524>)
 80034b0:	b954      	cbnz	r4, 80034c8 <_dtoa_r+0x350>
 80034b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80034b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80034ba:	f7fd f937 	bl	800072c <__aeabi_ddiv>
 80034be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80034c2:	e028      	b.n	8003516 <_dtoa_r+0x39e>
 80034c4:	2602      	movs	r6, #2
 80034c6:	e7f2      	b.n	80034ae <_dtoa_r+0x336>
 80034c8:	07e1      	lsls	r1, r4, #31
 80034ca:	d508      	bpl.n	80034de <_dtoa_r+0x366>
 80034cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80034d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80034d4:	f7fd f800 	bl	80004d8 <__aeabi_dmul>
 80034d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80034dc:	3601      	adds	r6, #1
 80034de:	1064      	asrs	r4, r4, #1
 80034e0:	3508      	adds	r5, #8
 80034e2:	e7e5      	b.n	80034b0 <_dtoa_r+0x338>
 80034e4:	f000 80d2 	beq.w	800368c <_dtoa_r+0x514>
 80034e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80034ec:	427c      	negs	r4, r7
 80034ee:	4b6a      	ldr	r3, [pc, #424]	@ (8003698 <_dtoa_r+0x520>)
 80034f0:	f004 020f 	and.w	r2, r4, #15
 80034f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80034f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fc:	f7fc ffec 	bl	80004d8 <__aeabi_dmul>
 8003500:	2602      	movs	r6, #2
 8003502:	2300      	movs	r3, #0
 8003504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003508:	4d64      	ldr	r5, [pc, #400]	@ (800369c <_dtoa_r+0x524>)
 800350a:	1124      	asrs	r4, r4, #4
 800350c:	2c00      	cmp	r4, #0
 800350e:	f040 80b2 	bne.w	8003676 <_dtoa_r+0x4fe>
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1d3      	bne.n	80034be <_dtoa_r+0x346>
 8003516:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800351a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 80b7 	beq.w	8003690 <_dtoa_r+0x518>
 8003522:	2200      	movs	r2, #0
 8003524:	4620      	mov	r0, r4
 8003526:	4629      	mov	r1, r5
 8003528:	4b5d      	ldr	r3, [pc, #372]	@ (80036a0 <_dtoa_r+0x528>)
 800352a:	f7fd fa47 	bl	80009bc <__aeabi_dcmplt>
 800352e:	2800      	cmp	r0, #0
 8003530:	f000 80ae 	beq.w	8003690 <_dtoa_r+0x518>
 8003534:	9b07      	ldr	r3, [sp, #28]
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 80aa 	beq.w	8003690 <_dtoa_r+0x518>
 800353c:	9b08      	ldr	r3, [sp, #32]
 800353e:	2b00      	cmp	r3, #0
 8003540:	dd37      	ble.n	80035b2 <_dtoa_r+0x43a>
 8003542:	1e7b      	subs	r3, r7, #1
 8003544:	4620      	mov	r0, r4
 8003546:	9304      	str	r3, [sp, #16]
 8003548:	2200      	movs	r2, #0
 800354a:	4629      	mov	r1, r5
 800354c:	4b55      	ldr	r3, [pc, #340]	@ (80036a4 <_dtoa_r+0x52c>)
 800354e:	f7fc ffc3 	bl	80004d8 <__aeabi_dmul>
 8003552:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003556:	9c08      	ldr	r4, [sp, #32]
 8003558:	3601      	adds	r6, #1
 800355a:	4630      	mov	r0, r6
 800355c:	f7fc ff52 	bl	8000404 <__aeabi_i2d>
 8003560:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003564:	f7fc ffb8 	bl	80004d8 <__aeabi_dmul>
 8003568:	2200      	movs	r2, #0
 800356a:	4b4f      	ldr	r3, [pc, #316]	@ (80036a8 <_dtoa_r+0x530>)
 800356c:	f7fc fdfe 	bl	800016c <__adddf3>
 8003570:	4605      	mov	r5, r0
 8003572:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003576:	2c00      	cmp	r4, #0
 8003578:	f040 809a 	bne.w	80036b0 <_dtoa_r+0x538>
 800357c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003580:	2200      	movs	r2, #0
 8003582:	4b4a      	ldr	r3, [pc, #296]	@ (80036ac <_dtoa_r+0x534>)
 8003584:	f7fc fdf0 	bl	8000168 <__aeabi_dsub>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003590:	462a      	mov	r2, r5
 8003592:	4633      	mov	r3, r6
 8003594:	f7fd fa30 	bl	80009f8 <__aeabi_dcmpgt>
 8003598:	2800      	cmp	r0, #0
 800359a:	f040 828e 	bne.w	8003aba <_dtoa_r+0x942>
 800359e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80035a2:	462a      	mov	r2, r5
 80035a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80035a8:	f7fd fa08 	bl	80009bc <__aeabi_dcmplt>
 80035ac:	2800      	cmp	r0, #0
 80035ae:	f040 8127 	bne.w	8003800 <_dtoa_r+0x688>
 80035b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80035b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80035ba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f2c0 8163 	blt.w	8003888 <_dtoa_r+0x710>
 80035c2:	2f0e      	cmp	r7, #14
 80035c4:	f300 8160 	bgt.w	8003888 <_dtoa_r+0x710>
 80035c8:	4b33      	ldr	r3, [pc, #204]	@ (8003698 <_dtoa_r+0x520>)
 80035ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80035ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80035d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80035d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80035d8:	2b00      	cmp	r3, #0
 80035da:	da03      	bge.n	80035e4 <_dtoa_r+0x46c>
 80035dc:	9b07      	ldr	r3, [sp, #28]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f340 8100 	ble.w	80037e4 <_dtoa_r+0x66c>
 80035e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80035e8:	4656      	mov	r6, sl
 80035ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80035ee:	4620      	mov	r0, r4
 80035f0:	4629      	mov	r1, r5
 80035f2:	f7fd f89b 	bl	800072c <__aeabi_ddiv>
 80035f6:	f7fd fa1f 	bl	8000a38 <__aeabi_d2iz>
 80035fa:	4680      	mov	r8, r0
 80035fc:	f7fc ff02 	bl	8000404 <__aeabi_i2d>
 8003600:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003604:	f7fc ff68 	bl	80004d8 <__aeabi_dmul>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	4620      	mov	r0, r4
 800360e:	4629      	mov	r1, r5
 8003610:	f7fc fdaa 	bl	8000168 <__aeabi_dsub>
 8003614:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003618:	9d07      	ldr	r5, [sp, #28]
 800361a:	f806 4b01 	strb.w	r4, [r6], #1
 800361e:	eba6 040a 	sub.w	r4, r6, sl
 8003622:	42a5      	cmp	r5, r4
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	f040 8116 	bne.w	8003858 <_dtoa_r+0x6e0>
 800362c:	f7fc fd9e 	bl	800016c <__adddf3>
 8003630:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003634:	4604      	mov	r4, r0
 8003636:	460d      	mov	r5, r1
 8003638:	f7fd f9de 	bl	80009f8 <__aeabi_dcmpgt>
 800363c:	2800      	cmp	r0, #0
 800363e:	f040 80f8 	bne.w	8003832 <_dtoa_r+0x6ba>
 8003642:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003646:	4620      	mov	r0, r4
 8003648:	4629      	mov	r1, r5
 800364a:	f7fd f9ad 	bl	80009a8 <__aeabi_dcmpeq>
 800364e:	b118      	cbz	r0, 8003658 <_dtoa_r+0x4e0>
 8003650:	f018 0f01 	tst.w	r8, #1
 8003654:	f040 80ed 	bne.w	8003832 <_dtoa_r+0x6ba>
 8003658:	4649      	mov	r1, r9
 800365a:	4658      	mov	r0, fp
 800365c:	f000 fc92 	bl	8003f84 <_Bfree>
 8003660:	2300      	movs	r3, #0
 8003662:	7033      	strb	r3, [r6, #0]
 8003664:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8003666:	3701      	adds	r7, #1
 8003668:	601f      	str	r7, [r3, #0]
 800366a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 8320 	beq.w	8003cb2 <_dtoa_r+0xb3a>
 8003672:	601e      	str	r6, [r3, #0]
 8003674:	e31d      	b.n	8003cb2 <_dtoa_r+0xb3a>
 8003676:	07e2      	lsls	r2, r4, #31
 8003678:	d505      	bpl.n	8003686 <_dtoa_r+0x50e>
 800367a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800367e:	f7fc ff2b 	bl	80004d8 <__aeabi_dmul>
 8003682:	2301      	movs	r3, #1
 8003684:	3601      	adds	r6, #1
 8003686:	1064      	asrs	r4, r4, #1
 8003688:	3508      	adds	r5, #8
 800368a:	e73f      	b.n	800350c <_dtoa_r+0x394>
 800368c:	2602      	movs	r6, #2
 800368e:	e742      	b.n	8003516 <_dtoa_r+0x39e>
 8003690:	9c07      	ldr	r4, [sp, #28]
 8003692:	9704      	str	r7, [sp, #16]
 8003694:	e761      	b.n	800355a <_dtoa_r+0x3e2>
 8003696:	bf00      	nop
 8003698:	08004f30 	.word	0x08004f30
 800369c:	08004f08 	.word	0x08004f08
 80036a0:	3ff00000 	.word	0x3ff00000
 80036a4:	40240000 	.word	0x40240000
 80036a8:	401c0000 	.word	0x401c0000
 80036ac:	40140000 	.word	0x40140000
 80036b0:	4b70      	ldr	r3, [pc, #448]	@ (8003874 <_dtoa_r+0x6fc>)
 80036b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80036b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80036b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80036bc:	4454      	add	r4, sl
 80036be:	2900      	cmp	r1, #0
 80036c0:	d045      	beq.n	800374e <_dtoa_r+0x5d6>
 80036c2:	2000      	movs	r0, #0
 80036c4:	496c      	ldr	r1, [pc, #432]	@ (8003878 <_dtoa_r+0x700>)
 80036c6:	f7fd f831 	bl	800072c <__aeabi_ddiv>
 80036ca:	4633      	mov	r3, r6
 80036cc:	462a      	mov	r2, r5
 80036ce:	f7fc fd4b 	bl	8000168 <__aeabi_dsub>
 80036d2:	4656      	mov	r6, sl
 80036d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80036d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036dc:	f7fd f9ac 	bl	8000a38 <__aeabi_d2iz>
 80036e0:	4605      	mov	r5, r0
 80036e2:	f7fc fe8f 	bl	8000404 <__aeabi_i2d>
 80036e6:	4602      	mov	r2, r0
 80036e8:	460b      	mov	r3, r1
 80036ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036ee:	f7fc fd3b 	bl	8000168 <__aeabi_dsub>
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	3530      	adds	r5, #48	@ 0x30
 80036f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80036fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003700:	f806 5b01 	strb.w	r5, [r6], #1
 8003704:	f7fd f95a 	bl	80009bc <__aeabi_dcmplt>
 8003708:	2800      	cmp	r0, #0
 800370a:	d163      	bne.n	80037d4 <_dtoa_r+0x65c>
 800370c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003710:	2000      	movs	r0, #0
 8003712:	495a      	ldr	r1, [pc, #360]	@ (800387c <_dtoa_r+0x704>)
 8003714:	f7fc fd28 	bl	8000168 <__aeabi_dsub>
 8003718:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800371c:	f7fd f94e 	bl	80009bc <__aeabi_dcmplt>
 8003720:	2800      	cmp	r0, #0
 8003722:	f040 8087 	bne.w	8003834 <_dtoa_r+0x6bc>
 8003726:	42a6      	cmp	r6, r4
 8003728:	f43f af43 	beq.w	80035b2 <_dtoa_r+0x43a>
 800372c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003730:	2200      	movs	r2, #0
 8003732:	4b53      	ldr	r3, [pc, #332]	@ (8003880 <_dtoa_r+0x708>)
 8003734:	f7fc fed0 	bl	80004d8 <__aeabi_dmul>
 8003738:	2200      	movs	r2, #0
 800373a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800373e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003742:	4b4f      	ldr	r3, [pc, #316]	@ (8003880 <_dtoa_r+0x708>)
 8003744:	f7fc fec8 	bl	80004d8 <__aeabi_dmul>
 8003748:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800374c:	e7c4      	b.n	80036d8 <_dtoa_r+0x560>
 800374e:	4631      	mov	r1, r6
 8003750:	4628      	mov	r0, r5
 8003752:	f7fc fec1 	bl	80004d8 <__aeabi_dmul>
 8003756:	4656      	mov	r6, sl
 8003758:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800375c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800375e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003762:	f7fd f969 	bl	8000a38 <__aeabi_d2iz>
 8003766:	4605      	mov	r5, r0
 8003768:	f7fc fe4c 	bl	8000404 <__aeabi_i2d>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003774:	f7fc fcf8 	bl	8000168 <__aeabi_dsub>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	3530      	adds	r5, #48	@ 0x30
 800377e:	f806 5b01 	strb.w	r5, [r6], #1
 8003782:	42a6      	cmp	r6, r4
 8003784:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	d124      	bne.n	80037d8 <_dtoa_r+0x660>
 800378e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003792:	4b39      	ldr	r3, [pc, #228]	@ (8003878 <_dtoa_r+0x700>)
 8003794:	f7fc fcea 	bl	800016c <__adddf3>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037a0:	f7fd f92a 	bl	80009f8 <__aeabi_dcmpgt>
 80037a4:	2800      	cmp	r0, #0
 80037a6:	d145      	bne.n	8003834 <_dtoa_r+0x6bc>
 80037a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80037ac:	2000      	movs	r0, #0
 80037ae:	4932      	ldr	r1, [pc, #200]	@ (8003878 <_dtoa_r+0x700>)
 80037b0:	f7fc fcda 	bl	8000168 <__aeabi_dsub>
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037bc:	f7fd f8fe 	bl	80009bc <__aeabi_dcmplt>
 80037c0:	2800      	cmp	r0, #0
 80037c2:	f43f aef6 	beq.w	80035b2 <_dtoa_r+0x43a>
 80037c6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80037c8:	1e73      	subs	r3, r6, #1
 80037ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 80037cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80037d0:	2b30      	cmp	r3, #48	@ 0x30
 80037d2:	d0f8      	beq.n	80037c6 <_dtoa_r+0x64e>
 80037d4:	9f04      	ldr	r7, [sp, #16]
 80037d6:	e73f      	b.n	8003658 <_dtoa_r+0x4e0>
 80037d8:	4b29      	ldr	r3, [pc, #164]	@ (8003880 <_dtoa_r+0x708>)
 80037da:	f7fc fe7d 	bl	80004d8 <__aeabi_dmul>
 80037de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80037e2:	e7bc      	b.n	800375e <_dtoa_r+0x5e6>
 80037e4:	d10c      	bne.n	8003800 <_dtoa_r+0x688>
 80037e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80037ea:	2200      	movs	r2, #0
 80037ec:	4b25      	ldr	r3, [pc, #148]	@ (8003884 <_dtoa_r+0x70c>)
 80037ee:	f7fc fe73 	bl	80004d8 <__aeabi_dmul>
 80037f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80037f6:	f7fd f8f5 	bl	80009e4 <__aeabi_dcmpge>
 80037fa:	2800      	cmp	r0, #0
 80037fc:	f000 815b 	beq.w	8003ab6 <_dtoa_r+0x93e>
 8003800:	2400      	movs	r4, #0
 8003802:	4625      	mov	r5, r4
 8003804:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003806:	4656      	mov	r6, sl
 8003808:	43db      	mvns	r3, r3
 800380a:	9304      	str	r3, [sp, #16]
 800380c:	2700      	movs	r7, #0
 800380e:	4621      	mov	r1, r4
 8003810:	4658      	mov	r0, fp
 8003812:	f000 fbb7 	bl	8003f84 <_Bfree>
 8003816:	2d00      	cmp	r5, #0
 8003818:	d0dc      	beq.n	80037d4 <_dtoa_r+0x65c>
 800381a:	b12f      	cbz	r7, 8003828 <_dtoa_r+0x6b0>
 800381c:	42af      	cmp	r7, r5
 800381e:	d003      	beq.n	8003828 <_dtoa_r+0x6b0>
 8003820:	4639      	mov	r1, r7
 8003822:	4658      	mov	r0, fp
 8003824:	f000 fbae 	bl	8003f84 <_Bfree>
 8003828:	4629      	mov	r1, r5
 800382a:	4658      	mov	r0, fp
 800382c:	f000 fbaa 	bl	8003f84 <_Bfree>
 8003830:	e7d0      	b.n	80037d4 <_dtoa_r+0x65c>
 8003832:	9704      	str	r7, [sp, #16]
 8003834:	4633      	mov	r3, r6
 8003836:	461e      	mov	r6, r3
 8003838:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800383c:	2a39      	cmp	r2, #57	@ 0x39
 800383e:	d107      	bne.n	8003850 <_dtoa_r+0x6d8>
 8003840:	459a      	cmp	sl, r3
 8003842:	d1f8      	bne.n	8003836 <_dtoa_r+0x6be>
 8003844:	9a04      	ldr	r2, [sp, #16]
 8003846:	3201      	adds	r2, #1
 8003848:	9204      	str	r2, [sp, #16]
 800384a:	2230      	movs	r2, #48	@ 0x30
 800384c:	f88a 2000 	strb.w	r2, [sl]
 8003850:	781a      	ldrb	r2, [r3, #0]
 8003852:	3201      	adds	r2, #1
 8003854:	701a      	strb	r2, [r3, #0]
 8003856:	e7bd      	b.n	80037d4 <_dtoa_r+0x65c>
 8003858:	2200      	movs	r2, #0
 800385a:	4b09      	ldr	r3, [pc, #36]	@ (8003880 <_dtoa_r+0x708>)
 800385c:	f7fc fe3c 	bl	80004d8 <__aeabi_dmul>
 8003860:	2200      	movs	r2, #0
 8003862:	2300      	movs	r3, #0
 8003864:	4604      	mov	r4, r0
 8003866:	460d      	mov	r5, r1
 8003868:	f7fd f89e 	bl	80009a8 <__aeabi_dcmpeq>
 800386c:	2800      	cmp	r0, #0
 800386e:	f43f aebc 	beq.w	80035ea <_dtoa_r+0x472>
 8003872:	e6f1      	b.n	8003658 <_dtoa_r+0x4e0>
 8003874:	08004f30 	.word	0x08004f30
 8003878:	3fe00000 	.word	0x3fe00000
 800387c:	3ff00000 	.word	0x3ff00000
 8003880:	40240000 	.word	0x40240000
 8003884:	40140000 	.word	0x40140000
 8003888:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800388a:	2a00      	cmp	r2, #0
 800388c:	f000 80db 	beq.w	8003a46 <_dtoa_r+0x8ce>
 8003890:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003892:	2a01      	cmp	r2, #1
 8003894:	f300 80bf 	bgt.w	8003a16 <_dtoa_r+0x89e>
 8003898:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800389a:	2a00      	cmp	r2, #0
 800389c:	f000 80b7 	beq.w	8003a0e <_dtoa_r+0x896>
 80038a0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80038a4:	4646      	mov	r6, r8
 80038a6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80038a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80038aa:	2101      	movs	r1, #1
 80038ac:	441a      	add	r2, r3
 80038ae:	4658      	mov	r0, fp
 80038b0:	4498      	add	r8, r3
 80038b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80038b4:	f000 fc1a 	bl	80040ec <__i2b>
 80038b8:	4605      	mov	r5, r0
 80038ba:	b15e      	cbz	r6, 80038d4 <_dtoa_r+0x75c>
 80038bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80038be:	2b00      	cmp	r3, #0
 80038c0:	dd08      	ble.n	80038d4 <_dtoa_r+0x75c>
 80038c2:	42b3      	cmp	r3, r6
 80038c4:	bfa8      	it	ge
 80038c6:	4633      	movge	r3, r6
 80038c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80038ca:	eba8 0803 	sub.w	r8, r8, r3
 80038ce:	1af6      	subs	r6, r6, r3
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80038d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80038d6:	b1f3      	cbz	r3, 8003916 <_dtoa_r+0x79e>
 80038d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 80b7 	beq.w	8003a4e <_dtoa_r+0x8d6>
 80038e0:	b18c      	cbz	r4, 8003906 <_dtoa_r+0x78e>
 80038e2:	4629      	mov	r1, r5
 80038e4:	4622      	mov	r2, r4
 80038e6:	4658      	mov	r0, fp
 80038e8:	f000 fcbe 	bl	8004268 <__pow5mult>
 80038ec:	464a      	mov	r2, r9
 80038ee:	4601      	mov	r1, r0
 80038f0:	4605      	mov	r5, r0
 80038f2:	4658      	mov	r0, fp
 80038f4:	f000 fc10 	bl	8004118 <__multiply>
 80038f8:	4649      	mov	r1, r9
 80038fa:	9004      	str	r0, [sp, #16]
 80038fc:	4658      	mov	r0, fp
 80038fe:	f000 fb41 	bl	8003f84 <_Bfree>
 8003902:	9b04      	ldr	r3, [sp, #16]
 8003904:	4699      	mov	r9, r3
 8003906:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003908:	1b1a      	subs	r2, r3, r4
 800390a:	d004      	beq.n	8003916 <_dtoa_r+0x79e>
 800390c:	4649      	mov	r1, r9
 800390e:	4658      	mov	r0, fp
 8003910:	f000 fcaa 	bl	8004268 <__pow5mult>
 8003914:	4681      	mov	r9, r0
 8003916:	2101      	movs	r1, #1
 8003918:	4658      	mov	r0, fp
 800391a:	f000 fbe7 	bl	80040ec <__i2b>
 800391e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003920:	4604      	mov	r4, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 81c9 	beq.w	8003cba <_dtoa_r+0xb42>
 8003928:	461a      	mov	r2, r3
 800392a:	4601      	mov	r1, r0
 800392c:	4658      	mov	r0, fp
 800392e:	f000 fc9b 	bl	8004268 <__pow5mult>
 8003932:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003934:	4604      	mov	r4, r0
 8003936:	2b01      	cmp	r3, #1
 8003938:	f300 808f 	bgt.w	8003a5a <_dtoa_r+0x8e2>
 800393c:	9b02      	ldr	r3, [sp, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	f040 8087 	bne.w	8003a52 <_dtoa_r+0x8da>
 8003944:	9b03      	ldr	r3, [sp, #12]
 8003946:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800394a:	2b00      	cmp	r3, #0
 800394c:	f040 8083 	bne.w	8003a56 <_dtoa_r+0x8de>
 8003950:	9b03      	ldr	r3, [sp, #12]
 8003952:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003956:	0d1b      	lsrs	r3, r3, #20
 8003958:	051b      	lsls	r3, r3, #20
 800395a:	b12b      	cbz	r3, 8003968 <_dtoa_r+0x7f0>
 800395c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800395e:	f108 0801 	add.w	r8, r8, #1
 8003962:	3301      	adds	r3, #1
 8003964:	9309      	str	r3, [sp, #36]	@ 0x24
 8003966:	2301      	movs	r3, #1
 8003968:	930a      	str	r3, [sp, #40]	@ 0x28
 800396a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 81aa 	beq.w	8003cc6 <_dtoa_r+0xb4e>
 8003972:	6923      	ldr	r3, [r4, #16]
 8003974:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003978:	6918      	ldr	r0, [r3, #16]
 800397a:	f000 fb6b 	bl	8004054 <__hi0bits>
 800397e:	f1c0 0020 	rsb	r0, r0, #32
 8003982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003984:	4418      	add	r0, r3
 8003986:	f010 001f 	ands.w	r0, r0, #31
 800398a:	d071      	beq.n	8003a70 <_dtoa_r+0x8f8>
 800398c:	f1c0 0320 	rsb	r3, r0, #32
 8003990:	2b04      	cmp	r3, #4
 8003992:	dd65      	ble.n	8003a60 <_dtoa_r+0x8e8>
 8003994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003996:	f1c0 001c 	rsb	r0, r0, #28
 800399a:	4403      	add	r3, r0
 800399c:	4480      	add	r8, r0
 800399e:	4406      	add	r6, r0
 80039a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80039a2:	f1b8 0f00 	cmp.w	r8, #0
 80039a6:	dd05      	ble.n	80039b4 <_dtoa_r+0x83c>
 80039a8:	4649      	mov	r1, r9
 80039aa:	4642      	mov	r2, r8
 80039ac:	4658      	mov	r0, fp
 80039ae:	f000 fcb5 	bl	800431c <__lshift>
 80039b2:	4681      	mov	r9, r0
 80039b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	dd05      	ble.n	80039c6 <_dtoa_r+0x84e>
 80039ba:	4621      	mov	r1, r4
 80039bc:	461a      	mov	r2, r3
 80039be:	4658      	mov	r0, fp
 80039c0:	f000 fcac 	bl	800431c <__lshift>
 80039c4:	4604      	mov	r4, r0
 80039c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d053      	beq.n	8003a74 <_dtoa_r+0x8fc>
 80039cc:	4621      	mov	r1, r4
 80039ce:	4648      	mov	r0, r9
 80039d0:	f000 fd10 	bl	80043f4 <__mcmp>
 80039d4:	2800      	cmp	r0, #0
 80039d6:	da4d      	bge.n	8003a74 <_dtoa_r+0x8fc>
 80039d8:	1e7b      	subs	r3, r7, #1
 80039da:	4649      	mov	r1, r9
 80039dc:	9304      	str	r3, [sp, #16]
 80039de:	220a      	movs	r2, #10
 80039e0:	2300      	movs	r3, #0
 80039e2:	4658      	mov	r0, fp
 80039e4:	f000 faf0 	bl	8003fc8 <__multadd>
 80039e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80039ea:	4681      	mov	r9, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 816c 	beq.w	8003cca <_dtoa_r+0xb52>
 80039f2:	2300      	movs	r3, #0
 80039f4:	4629      	mov	r1, r5
 80039f6:	220a      	movs	r2, #10
 80039f8:	4658      	mov	r0, fp
 80039fa:	f000 fae5 	bl	8003fc8 <__multadd>
 80039fe:	9b08      	ldr	r3, [sp, #32]
 8003a00:	4605      	mov	r5, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	dc61      	bgt.n	8003aca <_dtoa_r+0x952>
 8003a06:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	dc3b      	bgt.n	8003a84 <_dtoa_r+0x90c>
 8003a0c:	e05d      	b.n	8003aca <_dtoa_r+0x952>
 8003a0e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003a10:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8003a14:	e746      	b.n	80038a4 <_dtoa_r+0x72c>
 8003a16:	9b07      	ldr	r3, [sp, #28]
 8003a18:	1e5c      	subs	r4, r3, #1
 8003a1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003a1c:	42a3      	cmp	r3, r4
 8003a1e:	bfbf      	itttt	lt
 8003a20:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8003a22:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8003a24:	1ae3      	sublt	r3, r4, r3
 8003a26:	18d2      	addlt	r2, r2, r3
 8003a28:	bfa8      	it	ge
 8003a2a:	1b1c      	subge	r4, r3, r4
 8003a2c:	9b07      	ldr	r3, [sp, #28]
 8003a2e:	bfbe      	ittt	lt
 8003a30:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8003a32:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8003a34:	2400      	movlt	r4, #0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	bfb5      	itete	lt
 8003a3a:	eba8 0603 	sublt.w	r6, r8, r3
 8003a3e:	4646      	movge	r6, r8
 8003a40:	2300      	movlt	r3, #0
 8003a42:	9b07      	ldrge	r3, [sp, #28]
 8003a44:	e730      	b.n	80038a8 <_dtoa_r+0x730>
 8003a46:	4646      	mov	r6, r8
 8003a48:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003a4a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8003a4c:	e735      	b.n	80038ba <_dtoa_r+0x742>
 8003a4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003a50:	e75c      	b.n	800390c <_dtoa_r+0x794>
 8003a52:	2300      	movs	r3, #0
 8003a54:	e788      	b.n	8003968 <_dtoa_r+0x7f0>
 8003a56:	9b02      	ldr	r3, [sp, #8]
 8003a58:	e786      	b.n	8003968 <_dtoa_r+0x7f0>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8003a5e:	e788      	b.n	8003972 <_dtoa_r+0x7fa>
 8003a60:	d09f      	beq.n	80039a2 <_dtoa_r+0x82a>
 8003a62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a64:	331c      	adds	r3, #28
 8003a66:	441a      	add	r2, r3
 8003a68:	4498      	add	r8, r3
 8003a6a:	441e      	add	r6, r3
 8003a6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003a6e:	e798      	b.n	80039a2 <_dtoa_r+0x82a>
 8003a70:	4603      	mov	r3, r0
 8003a72:	e7f6      	b.n	8003a62 <_dtoa_r+0x8ea>
 8003a74:	9b07      	ldr	r3, [sp, #28]
 8003a76:	9704      	str	r7, [sp, #16]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	dc20      	bgt.n	8003abe <_dtoa_r+0x946>
 8003a7c:	9308      	str	r3, [sp, #32]
 8003a7e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	dd1e      	ble.n	8003ac2 <_dtoa_r+0x94a>
 8003a84:	9b08      	ldr	r3, [sp, #32]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f47f aebc 	bne.w	8003804 <_dtoa_r+0x68c>
 8003a8c:	4621      	mov	r1, r4
 8003a8e:	2205      	movs	r2, #5
 8003a90:	4658      	mov	r0, fp
 8003a92:	f000 fa99 	bl	8003fc8 <__multadd>
 8003a96:	4601      	mov	r1, r0
 8003a98:	4604      	mov	r4, r0
 8003a9a:	4648      	mov	r0, r9
 8003a9c:	f000 fcaa 	bl	80043f4 <__mcmp>
 8003aa0:	2800      	cmp	r0, #0
 8003aa2:	f77f aeaf 	ble.w	8003804 <_dtoa_r+0x68c>
 8003aa6:	2331      	movs	r3, #49	@ 0x31
 8003aa8:	4656      	mov	r6, sl
 8003aaa:	f806 3b01 	strb.w	r3, [r6], #1
 8003aae:	9b04      	ldr	r3, [sp, #16]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	9304      	str	r3, [sp, #16]
 8003ab4:	e6aa      	b.n	800380c <_dtoa_r+0x694>
 8003ab6:	9c07      	ldr	r4, [sp, #28]
 8003ab8:	9704      	str	r7, [sp, #16]
 8003aba:	4625      	mov	r5, r4
 8003abc:	e7f3      	b.n	8003aa6 <_dtoa_r+0x92e>
 8003abe:	9b07      	ldr	r3, [sp, #28]
 8003ac0:	9308      	str	r3, [sp, #32]
 8003ac2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 8104 	beq.w	8003cd2 <_dtoa_r+0xb5a>
 8003aca:	2e00      	cmp	r6, #0
 8003acc:	dd05      	ble.n	8003ada <_dtoa_r+0x962>
 8003ace:	4629      	mov	r1, r5
 8003ad0:	4632      	mov	r2, r6
 8003ad2:	4658      	mov	r0, fp
 8003ad4:	f000 fc22 	bl	800431c <__lshift>
 8003ad8:	4605      	mov	r5, r0
 8003ada:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d05a      	beq.n	8003b96 <_dtoa_r+0xa1e>
 8003ae0:	4658      	mov	r0, fp
 8003ae2:	6869      	ldr	r1, [r5, #4]
 8003ae4:	f000 fa0e 	bl	8003f04 <_Balloc>
 8003ae8:	4606      	mov	r6, r0
 8003aea:	b928      	cbnz	r0, 8003af8 <_dtoa_r+0x980>
 8003aec:	4602      	mov	r2, r0
 8003aee:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8003af2:	4b83      	ldr	r3, [pc, #524]	@ (8003d00 <_dtoa_r+0xb88>)
 8003af4:	f7ff bb54 	b.w	80031a0 <_dtoa_r+0x28>
 8003af8:	692a      	ldr	r2, [r5, #16]
 8003afa:	f105 010c 	add.w	r1, r5, #12
 8003afe:	3202      	adds	r2, #2
 8003b00:	0092      	lsls	r2, r2, #2
 8003b02:	300c      	adds	r0, #12
 8003b04:	f000 fe36 	bl	8004774 <memcpy>
 8003b08:	2201      	movs	r2, #1
 8003b0a:	4631      	mov	r1, r6
 8003b0c:	4658      	mov	r0, fp
 8003b0e:	f000 fc05 	bl	800431c <__lshift>
 8003b12:	462f      	mov	r7, r5
 8003b14:	4605      	mov	r5, r0
 8003b16:	f10a 0301 	add.w	r3, sl, #1
 8003b1a:	9307      	str	r3, [sp, #28]
 8003b1c:	9b08      	ldr	r3, [sp, #32]
 8003b1e:	4453      	add	r3, sl
 8003b20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003b22:	9b02      	ldr	r3, [sp, #8]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	930a      	str	r3, [sp, #40]	@ 0x28
 8003b2a:	9b07      	ldr	r3, [sp, #28]
 8003b2c:	4621      	mov	r1, r4
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	4648      	mov	r0, r9
 8003b32:	9302      	str	r3, [sp, #8]
 8003b34:	f7ff fa97 	bl	8003066 <quorem>
 8003b38:	4639      	mov	r1, r7
 8003b3a:	9008      	str	r0, [sp, #32]
 8003b3c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8003b40:	4648      	mov	r0, r9
 8003b42:	f000 fc57 	bl	80043f4 <__mcmp>
 8003b46:	462a      	mov	r2, r5
 8003b48:	9009      	str	r0, [sp, #36]	@ 0x24
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	4658      	mov	r0, fp
 8003b4e:	f000 fc6d 	bl	800442c <__mdiff>
 8003b52:	68c2      	ldr	r2, [r0, #12]
 8003b54:	4606      	mov	r6, r0
 8003b56:	bb02      	cbnz	r2, 8003b9a <_dtoa_r+0xa22>
 8003b58:	4601      	mov	r1, r0
 8003b5a:	4648      	mov	r0, r9
 8003b5c:	f000 fc4a 	bl	80043f4 <__mcmp>
 8003b60:	4602      	mov	r2, r0
 8003b62:	4631      	mov	r1, r6
 8003b64:	4658      	mov	r0, fp
 8003b66:	920c      	str	r2, [sp, #48]	@ 0x30
 8003b68:	f000 fa0c 	bl	8003f84 <_Bfree>
 8003b6c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003b6e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003b70:	9e07      	ldr	r6, [sp, #28]
 8003b72:	ea43 0102 	orr.w	r1, r3, r2
 8003b76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003b78:	4319      	orrs	r1, r3
 8003b7a:	d110      	bne.n	8003b9e <_dtoa_r+0xa26>
 8003b7c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8003b80:	d029      	beq.n	8003bd6 <_dtoa_r+0xa5e>
 8003b82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	dd02      	ble.n	8003b8e <_dtoa_r+0xa16>
 8003b88:	9b08      	ldr	r3, [sp, #32]
 8003b8a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8003b8e:	9b02      	ldr	r3, [sp, #8]
 8003b90:	f883 8000 	strb.w	r8, [r3]
 8003b94:	e63b      	b.n	800380e <_dtoa_r+0x696>
 8003b96:	4628      	mov	r0, r5
 8003b98:	e7bb      	b.n	8003b12 <_dtoa_r+0x99a>
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	e7e1      	b.n	8003b62 <_dtoa_r+0x9ea>
 8003b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	db04      	blt.n	8003bae <_dtoa_r+0xa36>
 8003ba4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8003ba6:	430b      	orrs	r3, r1
 8003ba8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003baa:	430b      	orrs	r3, r1
 8003bac:	d120      	bne.n	8003bf0 <_dtoa_r+0xa78>
 8003bae:	2a00      	cmp	r2, #0
 8003bb0:	dded      	ble.n	8003b8e <_dtoa_r+0xa16>
 8003bb2:	4649      	mov	r1, r9
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	4658      	mov	r0, fp
 8003bb8:	f000 fbb0 	bl	800431c <__lshift>
 8003bbc:	4621      	mov	r1, r4
 8003bbe:	4681      	mov	r9, r0
 8003bc0:	f000 fc18 	bl	80043f4 <__mcmp>
 8003bc4:	2800      	cmp	r0, #0
 8003bc6:	dc03      	bgt.n	8003bd0 <_dtoa_r+0xa58>
 8003bc8:	d1e1      	bne.n	8003b8e <_dtoa_r+0xa16>
 8003bca:	f018 0f01 	tst.w	r8, #1
 8003bce:	d0de      	beq.n	8003b8e <_dtoa_r+0xa16>
 8003bd0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8003bd4:	d1d8      	bne.n	8003b88 <_dtoa_r+0xa10>
 8003bd6:	2339      	movs	r3, #57	@ 0x39
 8003bd8:	9a02      	ldr	r2, [sp, #8]
 8003bda:	7013      	strb	r3, [r2, #0]
 8003bdc:	4633      	mov	r3, r6
 8003bde:	461e      	mov	r6, r3
 8003be0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8003be4:	3b01      	subs	r3, #1
 8003be6:	2a39      	cmp	r2, #57	@ 0x39
 8003be8:	d052      	beq.n	8003c90 <_dtoa_r+0xb18>
 8003bea:	3201      	adds	r2, #1
 8003bec:	701a      	strb	r2, [r3, #0]
 8003bee:	e60e      	b.n	800380e <_dtoa_r+0x696>
 8003bf0:	2a00      	cmp	r2, #0
 8003bf2:	dd07      	ble.n	8003c04 <_dtoa_r+0xa8c>
 8003bf4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8003bf8:	d0ed      	beq.n	8003bd6 <_dtoa_r+0xa5e>
 8003bfa:	9a02      	ldr	r2, [sp, #8]
 8003bfc:	f108 0301 	add.w	r3, r8, #1
 8003c00:	7013      	strb	r3, [r2, #0]
 8003c02:	e604      	b.n	800380e <_dtoa_r+0x696>
 8003c04:	9b07      	ldr	r3, [sp, #28]
 8003c06:	9a07      	ldr	r2, [sp, #28]
 8003c08:	f803 8c01 	strb.w	r8, [r3, #-1]
 8003c0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d028      	beq.n	8003c64 <_dtoa_r+0xaec>
 8003c12:	4649      	mov	r1, r9
 8003c14:	2300      	movs	r3, #0
 8003c16:	220a      	movs	r2, #10
 8003c18:	4658      	mov	r0, fp
 8003c1a:	f000 f9d5 	bl	8003fc8 <__multadd>
 8003c1e:	42af      	cmp	r7, r5
 8003c20:	4681      	mov	r9, r0
 8003c22:	f04f 0300 	mov.w	r3, #0
 8003c26:	f04f 020a 	mov.w	r2, #10
 8003c2a:	4639      	mov	r1, r7
 8003c2c:	4658      	mov	r0, fp
 8003c2e:	d107      	bne.n	8003c40 <_dtoa_r+0xac8>
 8003c30:	f000 f9ca 	bl	8003fc8 <__multadd>
 8003c34:	4607      	mov	r7, r0
 8003c36:	4605      	mov	r5, r0
 8003c38:	9b07      	ldr	r3, [sp, #28]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	9307      	str	r3, [sp, #28]
 8003c3e:	e774      	b.n	8003b2a <_dtoa_r+0x9b2>
 8003c40:	f000 f9c2 	bl	8003fc8 <__multadd>
 8003c44:	4629      	mov	r1, r5
 8003c46:	4607      	mov	r7, r0
 8003c48:	2300      	movs	r3, #0
 8003c4a:	220a      	movs	r2, #10
 8003c4c:	4658      	mov	r0, fp
 8003c4e:	f000 f9bb 	bl	8003fc8 <__multadd>
 8003c52:	4605      	mov	r5, r0
 8003c54:	e7f0      	b.n	8003c38 <_dtoa_r+0xac0>
 8003c56:	9b08      	ldr	r3, [sp, #32]
 8003c58:	2700      	movs	r7, #0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	bfcc      	ite	gt
 8003c5e:	461e      	movgt	r6, r3
 8003c60:	2601      	movle	r6, #1
 8003c62:	4456      	add	r6, sl
 8003c64:	4649      	mov	r1, r9
 8003c66:	2201      	movs	r2, #1
 8003c68:	4658      	mov	r0, fp
 8003c6a:	f000 fb57 	bl	800431c <__lshift>
 8003c6e:	4621      	mov	r1, r4
 8003c70:	4681      	mov	r9, r0
 8003c72:	f000 fbbf 	bl	80043f4 <__mcmp>
 8003c76:	2800      	cmp	r0, #0
 8003c78:	dcb0      	bgt.n	8003bdc <_dtoa_r+0xa64>
 8003c7a:	d102      	bne.n	8003c82 <_dtoa_r+0xb0a>
 8003c7c:	f018 0f01 	tst.w	r8, #1
 8003c80:	d1ac      	bne.n	8003bdc <_dtoa_r+0xa64>
 8003c82:	4633      	mov	r3, r6
 8003c84:	461e      	mov	r6, r3
 8003c86:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003c8a:	2a30      	cmp	r2, #48	@ 0x30
 8003c8c:	d0fa      	beq.n	8003c84 <_dtoa_r+0xb0c>
 8003c8e:	e5be      	b.n	800380e <_dtoa_r+0x696>
 8003c90:	459a      	cmp	sl, r3
 8003c92:	d1a4      	bne.n	8003bde <_dtoa_r+0xa66>
 8003c94:	9b04      	ldr	r3, [sp, #16]
 8003c96:	3301      	adds	r3, #1
 8003c98:	9304      	str	r3, [sp, #16]
 8003c9a:	2331      	movs	r3, #49	@ 0x31
 8003c9c:	f88a 3000 	strb.w	r3, [sl]
 8003ca0:	e5b5      	b.n	800380e <_dtoa_r+0x696>
 8003ca2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003ca4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8003d04 <_dtoa_r+0xb8c>
 8003ca8:	b11b      	cbz	r3, 8003cb2 <_dtoa_r+0xb3a>
 8003caa:	f10a 0308 	add.w	r3, sl, #8
 8003cae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	4650      	mov	r0, sl
 8003cb4:	b017      	add	sp, #92	@ 0x5c
 8003cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	f77f ae3d 	ble.w	800393c <_dtoa_r+0x7c4>
 8003cc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003cc4:	930a      	str	r3, [sp, #40]	@ 0x28
 8003cc6:	2001      	movs	r0, #1
 8003cc8:	e65b      	b.n	8003982 <_dtoa_r+0x80a>
 8003cca:	9b08      	ldr	r3, [sp, #32]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f77f aed6 	ble.w	8003a7e <_dtoa_r+0x906>
 8003cd2:	4656      	mov	r6, sl
 8003cd4:	4621      	mov	r1, r4
 8003cd6:	4648      	mov	r0, r9
 8003cd8:	f7ff f9c5 	bl	8003066 <quorem>
 8003cdc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8003ce0:	9b08      	ldr	r3, [sp, #32]
 8003ce2:	f806 8b01 	strb.w	r8, [r6], #1
 8003ce6:	eba6 020a 	sub.w	r2, r6, sl
 8003cea:	4293      	cmp	r3, r2
 8003cec:	ddb3      	ble.n	8003c56 <_dtoa_r+0xade>
 8003cee:	4649      	mov	r1, r9
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	220a      	movs	r2, #10
 8003cf4:	4658      	mov	r0, fp
 8003cf6:	f000 f967 	bl	8003fc8 <__multadd>
 8003cfa:	4681      	mov	r9, r0
 8003cfc:	e7ea      	b.n	8003cd4 <_dtoa_r+0xb5c>
 8003cfe:	bf00      	nop
 8003d00:	08004e92 	.word	0x08004e92
 8003d04:	08004e16 	.word	0x08004e16

08003d08 <_free_r>:
 8003d08:	b538      	push	{r3, r4, r5, lr}
 8003d0a:	4605      	mov	r5, r0
 8003d0c:	2900      	cmp	r1, #0
 8003d0e:	d040      	beq.n	8003d92 <_free_r+0x8a>
 8003d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d14:	1f0c      	subs	r4, r1, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	bfb8      	it	lt
 8003d1a:	18e4      	addlt	r4, r4, r3
 8003d1c:	f000 f8e6 	bl	8003eec <__malloc_lock>
 8003d20:	4a1c      	ldr	r2, [pc, #112]	@ (8003d94 <_free_r+0x8c>)
 8003d22:	6813      	ldr	r3, [r2, #0]
 8003d24:	b933      	cbnz	r3, 8003d34 <_free_r+0x2c>
 8003d26:	6063      	str	r3, [r4, #4]
 8003d28:	6014      	str	r4, [r2, #0]
 8003d2a:	4628      	mov	r0, r5
 8003d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d30:	f000 b8e2 	b.w	8003ef8 <__malloc_unlock>
 8003d34:	42a3      	cmp	r3, r4
 8003d36:	d908      	bls.n	8003d4a <_free_r+0x42>
 8003d38:	6820      	ldr	r0, [r4, #0]
 8003d3a:	1821      	adds	r1, r4, r0
 8003d3c:	428b      	cmp	r3, r1
 8003d3e:	bf01      	itttt	eq
 8003d40:	6819      	ldreq	r1, [r3, #0]
 8003d42:	685b      	ldreq	r3, [r3, #4]
 8003d44:	1809      	addeq	r1, r1, r0
 8003d46:	6021      	streq	r1, [r4, #0]
 8003d48:	e7ed      	b.n	8003d26 <_free_r+0x1e>
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	b10b      	cbz	r3, 8003d54 <_free_r+0x4c>
 8003d50:	42a3      	cmp	r3, r4
 8003d52:	d9fa      	bls.n	8003d4a <_free_r+0x42>
 8003d54:	6811      	ldr	r1, [r2, #0]
 8003d56:	1850      	adds	r0, r2, r1
 8003d58:	42a0      	cmp	r0, r4
 8003d5a:	d10b      	bne.n	8003d74 <_free_r+0x6c>
 8003d5c:	6820      	ldr	r0, [r4, #0]
 8003d5e:	4401      	add	r1, r0
 8003d60:	1850      	adds	r0, r2, r1
 8003d62:	4283      	cmp	r3, r0
 8003d64:	6011      	str	r1, [r2, #0]
 8003d66:	d1e0      	bne.n	8003d2a <_free_r+0x22>
 8003d68:	6818      	ldr	r0, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	4408      	add	r0, r1
 8003d6e:	6010      	str	r0, [r2, #0]
 8003d70:	6053      	str	r3, [r2, #4]
 8003d72:	e7da      	b.n	8003d2a <_free_r+0x22>
 8003d74:	d902      	bls.n	8003d7c <_free_r+0x74>
 8003d76:	230c      	movs	r3, #12
 8003d78:	602b      	str	r3, [r5, #0]
 8003d7a:	e7d6      	b.n	8003d2a <_free_r+0x22>
 8003d7c:	6820      	ldr	r0, [r4, #0]
 8003d7e:	1821      	adds	r1, r4, r0
 8003d80:	428b      	cmp	r3, r1
 8003d82:	bf01      	itttt	eq
 8003d84:	6819      	ldreq	r1, [r3, #0]
 8003d86:	685b      	ldreq	r3, [r3, #4]
 8003d88:	1809      	addeq	r1, r1, r0
 8003d8a:	6021      	streq	r1, [r4, #0]
 8003d8c:	6063      	str	r3, [r4, #4]
 8003d8e:	6054      	str	r4, [r2, #4]
 8003d90:	e7cb      	b.n	8003d2a <_free_r+0x22>
 8003d92:	bd38      	pop	{r3, r4, r5, pc}
 8003d94:	200003a8 	.word	0x200003a8

08003d98 <malloc>:
 8003d98:	4b02      	ldr	r3, [pc, #8]	@ (8003da4 <malloc+0xc>)
 8003d9a:	4601      	mov	r1, r0
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	f000 b825 	b.w	8003dec <_malloc_r>
 8003da2:	bf00      	nop
 8003da4:	20000018 	.word	0x20000018

08003da8 <sbrk_aligned>:
 8003da8:	b570      	push	{r4, r5, r6, lr}
 8003daa:	4e0f      	ldr	r6, [pc, #60]	@ (8003de8 <sbrk_aligned+0x40>)
 8003dac:	460c      	mov	r4, r1
 8003dae:	6831      	ldr	r1, [r6, #0]
 8003db0:	4605      	mov	r5, r0
 8003db2:	b911      	cbnz	r1, 8003dba <sbrk_aligned+0x12>
 8003db4:	f000 fcce 	bl	8004754 <_sbrk_r>
 8003db8:	6030      	str	r0, [r6, #0]
 8003dba:	4621      	mov	r1, r4
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	f000 fcc9 	bl	8004754 <_sbrk_r>
 8003dc2:	1c43      	adds	r3, r0, #1
 8003dc4:	d103      	bne.n	8003dce <sbrk_aligned+0x26>
 8003dc6:	f04f 34ff 	mov.w	r4, #4294967295
 8003dca:	4620      	mov	r0, r4
 8003dcc:	bd70      	pop	{r4, r5, r6, pc}
 8003dce:	1cc4      	adds	r4, r0, #3
 8003dd0:	f024 0403 	bic.w	r4, r4, #3
 8003dd4:	42a0      	cmp	r0, r4
 8003dd6:	d0f8      	beq.n	8003dca <sbrk_aligned+0x22>
 8003dd8:	1a21      	subs	r1, r4, r0
 8003dda:	4628      	mov	r0, r5
 8003ddc:	f000 fcba 	bl	8004754 <_sbrk_r>
 8003de0:	3001      	adds	r0, #1
 8003de2:	d1f2      	bne.n	8003dca <sbrk_aligned+0x22>
 8003de4:	e7ef      	b.n	8003dc6 <sbrk_aligned+0x1e>
 8003de6:	bf00      	nop
 8003de8:	200003a4 	.word	0x200003a4

08003dec <_malloc_r>:
 8003dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003df0:	1ccd      	adds	r5, r1, #3
 8003df2:	f025 0503 	bic.w	r5, r5, #3
 8003df6:	3508      	adds	r5, #8
 8003df8:	2d0c      	cmp	r5, #12
 8003dfa:	bf38      	it	cc
 8003dfc:	250c      	movcc	r5, #12
 8003dfe:	2d00      	cmp	r5, #0
 8003e00:	4606      	mov	r6, r0
 8003e02:	db01      	blt.n	8003e08 <_malloc_r+0x1c>
 8003e04:	42a9      	cmp	r1, r5
 8003e06:	d904      	bls.n	8003e12 <_malloc_r+0x26>
 8003e08:	230c      	movs	r3, #12
 8003e0a:	6033      	str	r3, [r6, #0]
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ee8 <_malloc_r+0xfc>
 8003e16:	f000 f869 	bl	8003eec <__malloc_lock>
 8003e1a:	f8d8 3000 	ldr.w	r3, [r8]
 8003e1e:	461c      	mov	r4, r3
 8003e20:	bb44      	cbnz	r4, 8003e74 <_malloc_r+0x88>
 8003e22:	4629      	mov	r1, r5
 8003e24:	4630      	mov	r0, r6
 8003e26:	f7ff ffbf 	bl	8003da8 <sbrk_aligned>
 8003e2a:	1c43      	adds	r3, r0, #1
 8003e2c:	4604      	mov	r4, r0
 8003e2e:	d158      	bne.n	8003ee2 <_malloc_r+0xf6>
 8003e30:	f8d8 4000 	ldr.w	r4, [r8]
 8003e34:	4627      	mov	r7, r4
 8003e36:	2f00      	cmp	r7, #0
 8003e38:	d143      	bne.n	8003ec2 <_malloc_r+0xd6>
 8003e3a:	2c00      	cmp	r4, #0
 8003e3c:	d04b      	beq.n	8003ed6 <_malloc_r+0xea>
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	4639      	mov	r1, r7
 8003e42:	4630      	mov	r0, r6
 8003e44:	eb04 0903 	add.w	r9, r4, r3
 8003e48:	f000 fc84 	bl	8004754 <_sbrk_r>
 8003e4c:	4581      	cmp	r9, r0
 8003e4e:	d142      	bne.n	8003ed6 <_malloc_r+0xea>
 8003e50:	6821      	ldr	r1, [r4, #0]
 8003e52:	4630      	mov	r0, r6
 8003e54:	1a6d      	subs	r5, r5, r1
 8003e56:	4629      	mov	r1, r5
 8003e58:	f7ff ffa6 	bl	8003da8 <sbrk_aligned>
 8003e5c:	3001      	adds	r0, #1
 8003e5e:	d03a      	beq.n	8003ed6 <_malloc_r+0xea>
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	442b      	add	r3, r5
 8003e64:	6023      	str	r3, [r4, #0]
 8003e66:	f8d8 3000 	ldr.w	r3, [r8]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	bb62      	cbnz	r2, 8003ec8 <_malloc_r+0xdc>
 8003e6e:	f8c8 7000 	str.w	r7, [r8]
 8003e72:	e00f      	b.n	8003e94 <_malloc_r+0xa8>
 8003e74:	6822      	ldr	r2, [r4, #0]
 8003e76:	1b52      	subs	r2, r2, r5
 8003e78:	d420      	bmi.n	8003ebc <_malloc_r+0xd0>
 8003e7a:	2a0b      	cmp	r2, #11
 8003e7c:	d917      	bls.n	8003eae <_malloc_r+0xc2>
 8003e7e:	1961      	adds	r1, r4, r5
 8003e80:	42a3      	cmp	r3, r4
 8003e82:	6025      	str	r5, [r4, #0]
 8003e84:	bf18      	it	ne
 8003e86:	6059      	strne	r1, [r3, #4]
 8003e88:	6863      	ldr	r3, [r4, #4]
 8003e8a:	bf08      	it	eq
 8003e8c:	f8c8 1000 	streq.w	r1, [r8]
 8003e90:	5162      	str	r2, [r4, r5]
 8003e92:	604b      	str	r3, [r1, #4]
 8003e94:	4630      	mov	r0, r6
 8003e96:	f000 f82f 	bl	8003ef8 <__malloc_unlock>
 8003e9a:	f104 000b 	add.w	r0, r4, #11
 8003e9e:	1d23      	adds	r3, r4, #4
 8003ea0:	f020 0007 	bic.w	r0, r0, #7
 8003ea4:	1ac2      	subs	r2, r0, r3
 8003ea6:	bf1c      	itt	ne
 8003ea8:	1a1b      	subne	r3, r3, r0
 8003eaa:	50a3      	strne	r3, [r4, r2]
 8003eac:	e7af      	b.n	8003e0e <_malloc_r+0x22>
 8003eae:	6862      	ldr	r2, [r4, #4]
 8003eb0:	42a3      	cmp	r3, r4
 8003eb2:	bf0c      	ite	eq
 8003eb4:	f8c8 2000 	streq.w	r2, [r8]
 8003eb8:	605a      	strne	r2, [r3, #4]
 8003eba:	e7eb      	b.n	8003e94 <_malloc_r+0xa8>
 8003ebc:	4623      	mov	r3, r4
 8003ebe:	6864      	ldr	r4, [r4, #4]
 8003ec0:	e7ae      	b.n	8003e20 <_malloc_r+0x34>
 8003ec2:	463c      	mov	r4, r7
 8003ec4:	687f      	ldr	r7, [r7, #4]
 8003ec6:	e7b6      	b.n	8003e36 <_malloc_r+0x4a>
 8003ec8:	461a      	mov	r2, r3
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	42a3      	cmp	r3, r4
 8003ece:	d1fb      	bne.n	8003ec8 <_malloc_r+0xdc>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	6053      	str	r3, [r2, #4]
 8003ed4:	e7de      	b.n	8003e94 <_malloc_r+0xa8>
 8003ed6:	230c      	movs	r3, #12
 8003ed8:	4630      	mov	r0, r6
 8003eda:	6033      	str	r3, [r6, #0]
 8003edc:	f000 f80c 	bl	8003ef8 <__malloc_unlock>
 8003ee0:	e794      	b.n	8003e0c <_malloc_r+0x20>
 8003ee2:	6005      	str	r5, [r0, #0]
 8003ee4:	e7d6      	b.n	8003e94 <_malloc_r+0xa8>
 8003ee6:	bf00      	nop
 8003ee8:	200003a8 	.word	0x200003a8

08003eec <__malloc_lock>:
 8003eec:	4801      	ldr	r0, [pc, #4]	@ (8003ef4 <__malloc_lock+0x8>)
 8003eee:	f7ff b8aa 	b.w	8003046 <__retarget_lock_acquire_recursive>
 8003ef2:	bf00      	nop
 8003ef4:	200003a0 	.word	0x200003a0

08003ef8 <__malloc_unlock>:
 8003ef8:	4801      	ldr	r0, [pc, #4]	@ (8003f00 <__malloc_unlock+0x8>)
 8003efa:	f7ff b8a5 	b.w	8003048 <__retarget_lock_release_recursive>
 8003efe:	bf00      	nop
 8003f00:	200003a0 	.word	0x200003a0

08003f04 <_Balloc>:
 8003f04:	b570      	push	{r4, r5, r6, lr}
 8003f06:	69c6      	ldr	r6, [r0, #28]
 8003f08:	4604      	mov	r4, r0
 8003f0a:	460d      	mov	r5, r1
 8003f0c:	b976      	cbnz	r6, 8003f2c <_Balloc+0x28>
 8003f0e:	2010      	movs	r0, #16
 8003f10:	f7ff ff42 	bl	8003d98 <malloc>
 8003f14:	4602      	mov	r2, r0
 8003f16:	61e0      	str	r0, [r4, #28]
 8003f18:	b920      	cbnz	r0, 8003f24 <_Balloc+0x20>
 8003f1a:	216b      	movs	r1, #107	@ 0x6b
 8003f1c:	4b17      	ldr	r3, [pc, #92]	@ (8003f7c <_Balloc+0x78>)
 8003f1e:	4818      	ldr	r0, [pc, #96]	@ (8003f80 <_Balloc+0x7c>)
 8003f20:	f000 fc36 	bl	8004790 <__assert_func>
 8003f24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003f28:	6006      	str	r6, [r0, #0]
 8003f2a:	60c6      	str	r6, [r0, #12]
 8003f2c:	69e6      	ldr	r6, [r4, #28]
 8003f2e:	68f3      	ldr	r3, [r6, #12]
 8003f30:	b183      	cbz	r3, 8003f54 <_Balloc+0x50>
 8003f32:	69e3      	ldr	r3, [r4, #28]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003f3a:	b9b8      	cbnz	r0, 8003f6c <_Balloc+0x68>
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	fa01 f605 	lsl.w	r6, r1, r5
 8003f42:	1d72      	adds	r2, r6, #5
 8003f44:	4620      	mov	r0, r4
 8003f46:	0092      	lsls	r2, r2, #2
 8003f48:	f000 fc40 	bl	80047cc <_calloc_r>
 8003f4c:	b160      	cbz	r0, 8003f68 <_Balloc+0x64>
 8003f4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003f52:	e00e      	b.n	8003f72 <_Balloc+0x6e>
 8003f54:	2221      	movs	r2, #33	@ 0x21
 8003f56:	2104      	movs	r1, #4
 8003f58:	4620      	mov	r0, r4
 8003f5a:	f000 fc37 	bl	80047cc <_calloc_r>
 8003f5e:	69e3      	ldr	r3, [r4, #28]
 8003f60:	60f0      	str	r0, [r6, #12]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1e4      	bne.n	8003f32 <_Balloc+0x2e>
 8003f68:	2000      	movs	r0, #0
 8003f6a:	bd70      	pop	{r4, r5, r6, pc}
 8003f6c:	6802      	ldr	r2, [r0, #0]
 8003f6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003f72:	2300      	movs	r3, #0
 8003f74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003f78:	e7f7      	b.n	8003f6a <_Balloc+0x66>
 8003f7a:	bf00      	nop
 8003f7c:	08004e23 	.word	0x08004e23
 8003f80:	08004ea3 	.word	0x08004ea3

08003f84 <_Bfree>:
 8003f84:	b570      	push	{r4, r5, r6, lr}
 8003f86:	69c6      	ldr	r6, [r0, #28]
 8003f88:	4605      	mov	r5, r0
 8003f8a:	460c      	mov	r4, r1
 8003f8c:	b976      	cbnz	r6, 8003fac <_Bfree+0x28>
 8003f8e:	2010      	movs	r0, #16
 8003f90:	f7ff ff02 	bl	8003d98 <malloc>
 8003f94:	4602      	mov	r2, r0
 8003f96:	61e8      	str	r0, [r5, #28]
 8003f98:	b920      	cbnz	r0, 8003fa4 <_Bfree+0x20>
 8003f9a:	218f      	movs	r1, #143	@ 0x8f
 8003f9c:	4b08      	ldr	r3, [pc, #32]	@ (8003fc0 <_Bfree+0x3c>)
 8003f9e:	4809      	ldr	r0, [pc, #36]	@ (8003fc4 <_Bfree+0x40>)
 8003fa0:	f000 fbf6 	bl	8004790 <__assert_func>
 8003fa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003fa8:	6006      	str	r6, [r0, #0]
 8003faa:	60c6      	str	r6, [r0, #12]
 8003fac:	b13c      	cbz	r4, 8003fbe <_Bfree+0x3a>
 8003fae:	69eb      	ldr	r3, [r5, #28]
 8003fb0:	6862      	ldr	r2, [r4, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003fb8:	6021      	str	r1, [r4, #0]
 8003fba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003fbe:	bd70      	pop	{r4, r5, r6, pc}
 8003fc0:	08004e23 	.word	0x08004e23
 8003fc4:	08004ea3 	.word	0x08004ea3

08003fc8 <__multadd>:
 8003fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fcc:	4607      	mov	r7, r0
 8003fce:	460c      	mov	r4, r1
 8003fd0:	461e      	mov	r6, r3
 8003fd2:	2000      	movs	r0, #0
 8003fd4:	690d      	ldr	r5, [r1, #16]
 8003fd6:	f101 0c14 	add.w	ip, r1, #20
 8003fda:	f8dc 3000 	ldr.w	r3, [ip]
 8003fde:	3001      	adds	r0, #1
 8003fe0:	b299      	uxth	r1, r3
 8003fe2:	fb02 6101 	mla	r1, r2, r1, r6
 8003fe6:	0c1e      	lsrs	r6, r3, #16
 8003fe8:	0c0b      	lsrs	r3, r1, #16
 8003fea:	fb02 3306 	mla	r3, r2, r6, r3
 8003fee:	b289      	uxth	r1, r1
 8003ff0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003ff4:	4285      	cmp	r5, r0
 8003ff6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003ffa:	f84c 1b04 	str.w	r1, [ip], #4
 8003ffe:	dcec      	bgt.n	8003fda <__multadd+0x12>
 8004000:	b30e      	cbz	r6, 8004046 <__multadd+0x7e>
 8004002:	68a3      	ldr	r3, [r4, #8]
 8004004:	42ab      	cmp	r3, r5
 8004006:	dc19      	bgt.n	800403c <__multadd+0x74>
 8004008:	6861      	ldr	r1, [r4, #4]
 800400a:	4638      	mov	r0, r7
 800400c:	3101      	adds	r1, #1
 800400e:	f7ff ff79 	bl	8003f04 <_Balloc>
 8004012:	4680      	mov	r8, r0
 8004014:	b928      	cbnz	r0, 8004022 <__multadd+0x5a>
 8004016:	4602      	mov	r2, r0
 8004018:	21ba      	movs	r1, #186	@ 0xba
 800401a:	4b0c      	ldr	r3, [pc, #48]	@ (800404c <__multadd+0x84>)
 800401c:	480c      	ldr	r0, [pc, #48]	@ (8004050 <__multadd+0x88>)
 800401e:	f000 fbb7 	bl	8004790 <__assert_func>
 8004022:	6922      	ldr	r2, [r4, #16]
 8004024:	f104 010c 	add.w	r1, r4, #12
 8004028:	3202      	adds	r2, #2
 800402a:	0092      	lsls	r2, r2, #2
 800402c:	300c      	adds	r0, #12
 800402e:	f000 fba1 	bl	8004774 <memcpy>
 8004032:	4621      	mov	r1, r4
 8004034:	4638      	mov	r0, r7
 8004036:	f7ff ffa5 	bl	8003f84 <_Bfree>
 800403a:	4644      	mov	r4, r8
 800403c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004040:	3501      	adds	r5, #1
 8004042:	615e      	str	r6, [r3, #20]
 8004044:	6125      	str	r5, [r4, #16]
 8004046:	4620      	mov	r0, r4
 8004048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800404c:	08004e92 	.word	0x08004e92
 8004050:	08004ea3 	.word	0x08004ea3

08004054 <__hi0bits>:
 8004054:	4603      	mov	r3, r0
 8004056:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800405a:	bf3a      	itte	cc
 800405c:	0403      	lslcc	r3, r0, #16
 800405e:	2010      	movcc	r0, #16
 8004060:	2000      	movcs	r0, #0
 8004062:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004066:	bf3c      	itt	cc
 8004068:	021b      	lslcc	r3, r3, #8
 800406a:	3008      	addcc	r0, #8
 800406c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004070:	bf3c      	itt	cc
 8004072:	011b      	lslcc	r3, r3, #4
 8004074:	3004      	addcc	r0, #4
 8004076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800407a:	bf3c      	itt	cc
 800407c:	009b      	lslcc	r3, r3, #2
 800407e:	3002      	addcc	r0, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	db05      	blt.n	8004090 <__hi0bits+0x3c>
 8004084:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004088:	f100 0001 	add.w	r0, r0, #1
 800408c:	bf08      	it	eq
 800408e:	2020      	moveq	r0, #32
 8004090:	4770      	bx	lr

08004092 <__lo0bits>:
 8004092:	6803      	ldr	r3, [r0, #0]
 8004094:	4602      	mov	r2, r0
 8004096:	f013 0007 	ands.w	r0, r3, #7
 800409a:	d00b      	beq.n	80040b4 <__lo0bits+0x22>
 800409c:	07d9      	lsls	r1, r3, #31
 800409e:	d421      	bmi.n	80040e4 <__lo0bits+0x52>
 80040a0:	0798      	lsls	r0, r3, #30
 80040a2:	bf49      	itett	mi
 80040a4:	085b      	lsrmi	r3, r3, #1
 80040a6:	089b      	lsrpl	r3, r3, #2
 80040a8:	2001      	movmi	r0, #1
 80040aa:	6013      	strmi	r3, [r2, #0]
 80040ac:	bf5c      	itt	pl
 80040ae:	2002      	movpl	r0, #2
 80040b0:	6013      	strpl	r3, [r2, #0]
 80040b2:	4770      	bx	lr
 80040b4:	b299      	uxth	r1, r3
 80040b6:	b909      	cbnz	r1, 80040bc <__lo0bits+0x2a>
 80040b8:	2010      	movs	r0, #16
 80040ba:	0c1b      	lsrs	r3, r3, #16
 80040bc:	b2d9      	uxtb	r1, r3
 80040be:	b909      	cbnz	r1, 80040c4 <__lo0bits+0x32>
 80040c0:	3008      	adds	r0, #8
 80040c2:	0a1b      	lsrs	r3, r3, #8
 80040c4:	0719      	lsls	r1, r3, #28
 80040c6:	bf04      	itt	eq
 80040c8:	091b      	lsreq	r3, r3, #4
 80040ca:	3004      	addeq	r0, #4
 80040cc:	0799      	lsls	r1, r3, #30
 80040ce:	bf04      	itt	eq
 80040d0:	089b      	lsreq	r3, r3, #2
 80040d2:	3002      	addeq	r0, #2
 80040d4:	07d9      	lsls	r1, r3, #31
 80040d6:	d403      	bmi.n	80040e0 <__lo0bits+0x4e>
 80040d8:	085b      	lsrs	r3, r3, #1
 80040da:	f100 0001 	add.w	r0, r0, #1
 80040de:	d003      	beq.n	80040e8 <__lo0bits+0x56>
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	4770      	bx	lr
 80040e4:	2000      	movs	r0, #0
 80040e6:	4770      	bx	lr
 80040e8:	2020      	movs	r0, #32
 80040ea:	4770      	bx	lr

080040ec <__i2b>:
 80040ec:	b510      	push	{r4, lr}
 80040ee:	460c      	mov	r4, r1
 80040f0:	2101      	movs	r1, #1
 80040f2:	f7ff ff07 	bl	8003f04 <_Balloc>
 80040f6:	4602      	mov	r2, r0
 80040f8:	b928      	cbnz	r0, 8004106 <__i2b+0x1a>
 80040fa:	f240 1145 	movw	r1, #325	@ 0x145
 80040fe:	4b04      	ldr	r3, [pc, #16]	@ (8004110 <__i2b+0x24>)
 8004100:	4804      	ldr	r0, [pc, #16]	@ (8004114 <__i2b+0x28>)
 8004102:	f000 fb45 	bl	8004790 <__assert_func>
 8004106:	2301      	movs	r3, #1
 8004108:	6144      	str	r4, [r0, #20]
 800410a:	6103      	str	r3, [r0, #16]
 800410c:	bd10      	pop	{r4, pc}
 800410e:	bf00      	nop
 8004110:	08004e92 	.word	0x08004e92
 8004114:	08004ea3 	.word	0x08004ea3

08004118 <__multiply>:
 8004118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800411c:	4614      	mov	r4, r2
 800411e:	690a      	ldr	r2, [r1, #16]
 8004120:	6923      	ldr	r3, [r4, #16]
 8004122:	460f      	mov	r7, r1
 8004124:	429a      	cmp	r2, r3
 8004126:	bfa2      	ittt	ge
 8004128:	4623      	movge	r3, r4
 800412a:	460c      	movge	r4, r1
 800412c:	461f      	movge	r7, r3
 800412e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004132:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004136:	68a3      	ldr	r3, [r4, #8]
 8004138:	6861      	ldr	r1, [r4, #4]
 800413a:	eb0a 0609 	add.w	r6, sl, r9
 800413e:	42b3      	cmp	r3, r6
 8004140:	b085      	sub	sp, #20
 8004142:	bfb8      	it	lt
 8004144:	3101      	addlt	r1, #1
 8004146:	f7ff fedd 	bl	8003f04 <_Balloc>
 800414a:	b930      	cbnz	r0, 800415a <__multiply+0x42>
 800414c:	4602      	mov	r2, r0
 800414e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004152:	4b43      	ldr	r3, [pc, #268]	@ (8004260 <__multiply+0x148>)
 8004154:	4843      	ldr	r0, [pc, #268]	@ (8004264 <__multiply+0x14c>)
 8004156:	f000 fb1b 	bl	8004790 <__assert_func>
 800415a:	f100 0514 	add.w	r5, r0, #20
 800415e:	462b      	mov	r3, r5
 8004160:	2200      	movs	r2, #0
 8004162:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004166:	4543      	cmp	r3, r8
 8004168:	d321      	bcc.n	80041ae <__multiply+0x96>
 800416a:	f107 0114 	add.w	r1, r7, #20
 800416e:	f104 0214 	add.w	r2, r4, #20
 8004172:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004176:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800417a:	9302      	str	r3, [sp, #8]
 800417c:	1b13      	subs	r3, r2, r4
 800417e:	3b15      	subs	r3, #21
 8004180:	f023 0303 	bic.w	r3, r3, #3
 8004184:	3304      	adds	r3, #4
 8004186:	f104 0715 	add.w	r7, r4, #21
 800418a:	42ba      	cmp	r2, r7
 800418c:	bf38      	it	cc
 800418e:	2304      	movcc	r3, #4
 8004190:	9301      	str	r3, [sp, #4]
 8004192:	9b02      	ldr	r3, [sp, #8]
 8004194:	9103      	str	r1, [sp, #12]
 8004196:	428b      	cmp	r3, r1
 8004198:	d80c      	bhi.n	80041b4 <__multiply+0x9c>
 800419a:	2e00      	cmp	r6, #0
 800419c:	dd03      	ble.n	80041a6 <__multiply+0x8e>
 800419e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d05a      	beq.n	800425c <__multiply+0x144>
 80041a6:	6106      	str	r6, [r0, #16]
 80041a8:	b005      	add	sp, #20
 80041aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041ae:	f843 2b04 	str.w	r2, [r3], #4
 80041b2:	e7d8      	b.n	8004166 <__multiply+0x4e>
 80041b4:	f8b1 a000 	ldrh.w	sl, [r1]
 80041b8:	f1ba 0f00 	cmp.w	sl, #0
 80041bc:	d023      	beq.n	8004206 <__multiply+0xee>
 80041be:	46a9      	mov	r9, r5
 80041c0:	f04f 0c00 	mov.w	ip, #0
 80041c4:	f104 0e14 	add.w	lr, r4, #20
 80041c8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80041cc:	f8d9 3000 	ldr.w	r3, [r9]
 80041d0:	fa1f fb87 	uxth.w	fp, r7
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	fb0a 330b 	mla	r3, sl, fp, r3
 80041da:	4463      	add	r3, ip
 80041dc:	f8d9 c000 	ldr.w	ip, [r9]
 80041e0:	0c3f      	lsrs	r7, r7, #16
 80041e2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80041e6:	fb0a c707 	mla	r7, sl, r7, ip
 80041ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80041f4:	4572      	cmp	r2, lr
 80041f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80041fa:	f849 3b04 	str.w	r3, [r9], #4
 80041fe:	d8e3      	bhi.n	80041c8 <__multiply+0xb0>
 8004200:	9b01      	ldr	r3, [sp, #4]
 8004202:	f845 c003 	str.w	ip, [r5, r3]
 8004206:	9b03      	ldr	r3, [sp, #12]
 8004208:	3104      	adds	r1, #4
 800420a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800420e:	f1b9 0f00 	cmp.w	r9, #0
 8004212:	d021      	beq.n	8004258 <__multiply+0x140>
 8004214:	46ae      	mov	lr, r5
 8004216:	f04f 0a00 	mov.w	sl, #0
 800421a:	682b      	ldr	r3, [r5, #0]
 800421c:	f104 0c14 	add.w	ip, r4, #20
 8004220:	f8bc b000 	ldrh.w	fp, [ip]
 8004224:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004228:	b29b      	uxth	r3, r3
 800422a:	fb09 770b 	mla	r7, r9, fp, r7
 800422e:	4457      	add	r7, sl
 8004230:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004234:	f84e 3b04 	str.w	r3, [lr], #4
 8004238:	f85c 3b04 	ldr.w	r3, [ip], #4
 800423c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004240:	f8be 3000 	ldrh.w	r3, [lr]
 8004244:	4562      	cmp	r2, ip
 8004246:	fb09 330a 	mla	r3, r9, sl, r3
 800424a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800424e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004252:	d8e5      	bhi.n	8004220 <__multiply+0x108>
 8004254:	9f01      	ldr	r7, [sp, #4]
 8004256:	51eb      	str	r3, [r5, r7]
 8004258:	3504      	adds	r5, #4
 800425a:	e79a      	b.n	8004192 <__multiply+0x7a>
 800425c:	3e01      	subs	r6, #1
 800425e:	e79c      	b.n	800419a <__multiply+0x82>
 8004260:	08004e92 	.word	0x08004e92
 8004264:	08004ea3 	.word	0x08004ea3

08004268 <__pow5mult>:
 8004268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800426c:	4615      	mov	r5, r2
 800426e:	f012 0203 	ands.w	r2, r2, #3
 8004272:	4607      	mov	r7, r0
 8004274:	460e      	mov	r6, r1
 8004276:	d007      	beq.n	8004288 <__pow5mult+0x20>
 8004278:	4c25      	ldr	r4, [pc, #148]	@ (8004310 <__pow5mult+0xa8>)
 800427a:	3a01      	subs	r2, #1
 800427c:	2300      	movs	r3, #0
 800427e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004282:	f7ff fea1 	bl	8003fc8 <__multadd>
 8004286:	4606      	mov	r6, r0
 8004288:	10ad      	asrs	r5, r5, #2
 800428a:	d03d      	beq.n	8004308 <__pow5mult+0xa0>
 800428c:	69fc      	ldr	r4, [r7, #28]
 800428e:	b97c      	cbnz	r4, 80042b0 <__pow5mult+0x48>
 8004290:	2010      	movs	r0, #16
 8004292:	f7ff fd81 	bl	8003d98 <malloc>
 8004296:	4602      	mov	r2, r0
 8004298:	61f8      	str	r0, [r7, #28]
 800429a:	b928      	cbnz	r0, 80042a8 <__pow5mult+0x40>
 800429c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80042a0:	4b1c      	ldr	r3, [pc, #112]	@ (8004314 <__pow5mult+0xac>)
 80042a2:	481d      	ldr	r0, [pc, #116]	@ (8004318 <__pow5mult+0xb0>)
 80042a4:	f000 fa74 	bl	8004790 <__assert_func>
 80042a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80042ac:	6004      	str	r4, [r0, #0]
 80042ae:	60c4      	str	r4, [r0, #12]
 80042b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80042b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80042b8:	b94c      	cbnz	r4, 80042ce <__pow5mult+0x66>
 80042ba:	f240 2171 	movw	r1, #625	@ 0x271
 80042be:	4638      	mov	r0, r7
 80042c0:	f7ff ff14 	bl	80040ec <__i2b>
 80042c4:	2300      	movs	r3, #0
 80042c6:	4604      	mov	r4, r0
 80042c8:	f8c8 0008 	str.w	r0, [r8, #8]
 80042cc:	6003      	str	r3, [r0, #0]
 80042ce:	f04f 0900 	mov.w	r9, #0
 80042d2:	07eb      	lsls	r3, r5, #31
 80042d4:	d50a      	bpl.n	80042ec <__pow5mult+0x84>
 80042d6:	4631      	mov	r1, r6
 80042d8:	4622      	mov	r2, r4
 80042da:	4638      	mov	r0, r7
 80042dc:	f7ff ff1c 	bl	8004118 <__multiply>
 80042e0:	4680      	mov	r8, r0
 80042e2:	4631      	mov	r1, r6
 80042e4:	4638      	mov	r0, r7
 80042e6:	f7ff fe4d 	bl	8003f84 <_Bfree>
 80042ea:	4646      	mov	r6, r8
 80042ec:	106d      	asrs	r5, r5, #1
 80042ee:	d00b      	beq.n	8004308 <__pow5mult+0xa0>
 80042f0:	6820      	ldr	r0, [r4, #0]
 80042f2:	b938      	cbnz	r0, 8004304 <__pow5mult+0x9c>
 80042f4:	4622      	mov	r2, r4
 80042f6:	4621      	mov	r1, r4
 80042f8:	4638      	mov	r0, r7
 80042fa:	f7ff ff0d 	bl	8004118 <__multiply>
 80042fe:	6020      	str	r0, [r4, #0]
 8004300:	f8c0 9000 	str.w	r9, [r0]
 8004304:	4604      	mov	r4, r0
 8004306:	e7e4      	b.n	80042d2 <__pow5mult+0x6a>
 8004308:	4630      	mov	r0, r6
 800430a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800430e:	bf00      	nop
 8004310:	08004efc 	.word	0x08004efc
 8004314:	08004e23 	.word	0x08004e23
 8004318:	08004ea3 	.word	0x08004ea3

0800431c <__lshift>:
 800431c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004320:	460c      	mov	r4, r1
 8004322:	4607      	mov	r7, r0
 8004324:	4691      	mov	r9, r2
 8004326:	6923      	ldr	r3, [r4, #16]
 8004328:	6849      	ldr	r1, [r1, #4]
 800432a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800432e:	68a3      	ldr	r3, [r4, #8]
 8004330:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004334:	f108 0601 	add.w	r6, r8, #1
 8004338:	42b3      	cmp	r3, r6
 800433a:	db0b      	blt.n	8004354 <__lshift+0x38>
 800433c:	4638      	mov	r0, r7
 800433e:	f7ff fde1 	bl	8003f04 <_Balloc>
 8004342:	4605      	mov	r5, r0
 8004344:	b948      	cbnz	r0, 800435a <__lshift+0x3e>
 8004346:	4602      	mov	r2, r0
 8004348:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800434c:	4b27      	ldr	r3, [pc, #156]	@ (80043ec <__lshift+0xd0>)
 800434e:	4828      	ldr	r0, [pc, #160]	@ (80043f0 <__lshift+0xd4>)
 8004350:	f000 fa1e 	bl	8004790 <__assert_func>
 8004354:	3101      	adds	r1, #1
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	e7ee      	b.n	8004338 <__lshift+0x1c>
 800435a:	2300      	movs	r3, #0
 800435c:	f100 0114 	add.w	r1, r0, #20
 8004360:	f100 0210 	add.w	r2, r0, #16
 8004364:	4618      	mov	r0, r3
 8004366:	4553      	cmp	r3, sl
 8004368:	db33      	blt.n	80043d2 <__lshift+0xb6>
 800436a:	6920      	ldr	r0, [r4, #16]
 800436c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004370:	f104 0314 	add.w	r3, r4, #20
 8004374:	f019 091f 	ands.w	r9, r9, #31
 8004378:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800437c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004380:	d02b      	beq.n	80043da <__lshift+0xbe>
 8004382:	468a      	mov	sl, r1
 8004384:	2200      	movs	r2, #0
 8004386:	f1c9 0e20 	rsb	lr, r9, #32
 800438a:	6818      	ldr	r0, [r3, #0]
 800438c:	fa00 f009 	lsl.w	r0, r0, r9
 8004390:	4310      	orrs	r0, r2
 8004392:	f84a 0b04 	str.w	r0, [sl], #4
 8004396:	f853 2b04 	ldr.w	r2, [r3], #4
 800439a:	459c      	cmp	ip, r3
 800439c:	fa22 f20e 	lsr.w	r2, r2, lr
 80043a0:	d8f3      	bhi.n	800438a <__lshift+0x6e>
 80043a2:	ebac 0304 	sub.w	r3, ip, r4
 80043a6:	3b15      	subs	r3, #21
 80043a8:	f023 0303 	bic.w	r3, r3, #3
 80043ac:	3304      	adds	r3, #4
 80043ae:	f104 0015 	add.w	r0, r4, #21
 80043b2:	4584      	cmp	ip, r0
 80043b4:	bf38      	it	cc
 80043b6:	2304      	movcc	r3, #4
 80043b8:	50ca      	str	r2, [r1, r3]
 80043ba:	b10a      	cbz	r2, 80043c0 <__lshift+0xa4>
 80043bc:	f108 0602 	add.w	r6, r8, #2
 80043c0:	3e01      	subs	r6, #1
 80043c2:	4638      	mov	r0, r7
 80043c4:	4621      	mov	r1, r4
 80043c6:	612e      	str	r6, [r5, #16]
 80043c8:	f7ff fddc 	bl	8003f84 <_Bfree>
 80043cc:	4628      	mov	r0, r5
 80043ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80043d6:	3301      	adds	r3, #1
 80043d8:	e7c5      	b.n	8004366 <__lshift+0x4a>
 80043da:	3904      	subs	r1, #4
 80043dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80043e0:	459c      	cmp	ip, r3
 80043e2:	f841 2f04 	str.w	r2, [r1, #4]!
 80043e6:	d8f9      	bhi.n	80043dc <__lshift+0xc0>
 80043e8:	e7ea      	b.n	80043c0 <__lshift+0xa4>
 80043ea:	bf00      	nop
 80043ec:	08004e92 	.word	0x08004e92
 80043f0:	08004ea3 	.word	0x08004ea3

080043f4 <__mcmp>:
 80043f4:	4603      	mov	r3, r0
 80043f6:	690a      	ldr	r2, [r1, #16]
 80043f8:	6900      	ldr	r0, [r0, #16]
 80043fa:	b530      	push	{r4, r5, lr}
 80043fc:	1a80      	subs	r0, r0, r2
 80043fe:	d10e      	bne.n	800441e <__mcmp+0x2a>
 8004400:	3314      	adds	r3, #20
 8004402:	3114      	adds	r1, #20
 8004404:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004408:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800440c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004410:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004414:	4295      	cmp	r5, r2
 8004416:	d003      	beq.n	8004420 <__mcmp+0x2c>
 8004418:	d205      	bcs.n	8004426 <__mcmp+0x32>
 800441a:	f04f 30ff 	mov.w	r0, #4294967295
 800441e:	bd30      	pop	{r4, r5, pc}
 8004420:	42a3      	cmp	r3, r4
 8004422:	d3f3      	bcc.n	800440c <__mcmp+0x18>
 8004424:	e7fb      	b.n	800441e <__mcmp+0x2a>
 8004426:	2001      	movs	r0, #1
 8004428:	e7f9      	b.n	800441e <__mcmp+0x2a>
	...

0800442c <__mdiff>:
 800442c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004430:	4689      	mov	r9, r1
 8004432:	4606      	mov	r6, r0
 8004434:	4611      	mov	r1, r2
 8004436:	4648      	mov	r0, r9
 8004438:	4614      	mov	r4, r2
 800443a:	f7ff ffdb 	bl	80043f4 <__mcmp>
 800443e:	1e05      	subs	r5, r0, #0
 8004440:	d112      	bne.n	8004468 <__mdiff+0x3c>
 8004442:	4629      	mov	r1, r5
 8004444:	4630      	mov	r0, r6
 8004446:	f7ff fd5d 	bl	8003f04 <_Balloc>
 800444a:	4602      	mov	r2, r0
 800444c:	b928      	cbnz	r0, 800445a <__mdiff+0x2e>
 800444e:	f240 2137 	movw	r1, #567	@ 0x237
 8004452:	4b3e      	ldr	r3, [pc, #248]	@ (800454c <__mdiff+0x120>)
 8004454:	483e      	ldr	r0, [pc, #248]	@ (8004550 <__mdiff+0x124>)
 8004456:	f000 f99b 	bl	8004790 <__assert_func>
 800445a:	2301      	movs	r3, #1
 800445c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004460:	4610      	mov	r0, r2
 8004462:	b003      	add	sp, #12
 8004464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004468:	bfbc      	itt	lt
 800446a:	464b      	movlt	r3, r9
 800446c:	46a1      	movlt	r9, r4
 800446e:	4630      	mov	r0, r6
 8004470:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004474:	bfba      	itte	lt
 8004476:	461c      	movlt	r4, r3
 8004478:	2501      	movlt	r5, #1
 800447a:	2500      	movge	r5, #0
 800447c:	f7ff fd42 	bl	8003f04 <_Balloc>
 8004480:	4602      	mov	r2, r0
 8004482:	b918      	cbnz	r0, 800448c <__mdiff+0x60>
 8004484:	f240 2145 	movw	r1, #581	@ 0x245
 8004488:	4b30      	ldr	r3, [pc, #192]	@ (800454c <__mdiff+0x120>)
 800448a:	e7e3      	b.n	8004454 <__mdiff+0x28>
 800448c:	f100 0b14 	add.w	fp, r0, #20
 8004490:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004494:	f109 0310 	add.w	r3, r9, #16
 8004498:	60c5      	str	r5, [r0, #12]
 800449a:	f04f 0c00 	mov.w	ip, #0
 800449e:	f109 0514 	add.w	r5, r9, #20
 80044a2:	46d9      	mov	r9, fp
 80044a4:	6926      	ldr	r6, [r4, #16]
 80044a6:	f104 0e14 	add.w	lr, r4, #20
 80044aa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80044ae:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80044b2:	9301      	str	r3, [sp, #4]
 80044b4:	9b01      	ldr	r3, [sp, #4]
 80044b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80044ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 80044be:	b281      	uxth	r1, r0
 80044c0:	9301      	str	r3, [sp, #4]
 80044c2:	fa1f f38a 	uxth.w	r3, sl
 80044c6:	1a5b      	subs	r3, r3, r1
 80044c8:	0c00      	lsrs	r0, r0, #16
 80044ca:	4463      	add	r3, ip
 80044cc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80044d0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80044da:	4576      	cmp	r6, lr
 80044dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80044e0:	f849 3b04 	str.w	r3, [r9], #4
 80044e4:	d8e6      	bhi.n	80044b4 <__mdiff+0x88>
 80044e6:	1b33      	subs	r3, r6, r4
 80044e8:	3b15      	subs	r3, #21
 80044ea:	f023 0303 	bic.w	r3, r3, #3
 80044ee:	3415      	adds	r4, #21
 80044f0:	3304      	adds	r3, #4
 80044f2:	42a6      	cmp	r6, r4
 80044f4:	bf38      	it	cc
 80044f6:	2304      	movcc	r3, #4
 80044f8:	441d      	add	r5, r3
 80044fa:	445b      	add	r3, fp
 80044fc:	461e      	mov	r6, r3
 80044fe:	462c      	mov	r4, r5
 8004500:	4544      	cmp	r4, r8
 8004502:	d30e      	bcc.n	8004522 <__mdiff+0xf6>
 8004504:	f108 0103 	add.w	r1, r8, #3
 8004508:	1b49      	subs	r1, r1, r5
 800450a:	f021 0103 	bic.w	r1, r1, #3
 800450e:	3d03      	subs	r5, #3
 8004510:	45a8      	cmp	r8, r5
 8004512:	bf38      	it	cc
 8004514:	2100      	movcc	r1, #0
 8004516:	440b      	add	r3, r1
 8004518:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800451c:	b199      	cbz	r1, 8004546 <__mdiff+0x11a>
 800451e:	6117      	str	r7, [r2, #16]
 8004520:	e79e      	b.n	8004460 <__mdiff+0x34>
 8004522:	46e6      	mov	lr, ip
 8004524:	f854 1b04 	ldr.w	r1, [r4], #4
 8004528:	fa1f fc81 	uxth.w	ip, r1
 800452c:	44f4      	add	ip, lr
 800452e:	0c08      	lsrs	r0, r1, #16
 8004530:	4471      	add	r1, lr
 8004532:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004536:	b289      	uxth	r1, r1
 8004538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800453c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004540:	f846 1b04 	str.w	r1, [r6], #4
 8004544:	e7dc      	b.n	8004500 <__mdiff+0xd4>
 8004546:	3f01      	subs	r7, #1
 8004548:	e7e6      	b.n	8004518 <__mdiff+0xec>
 800454a:	bf00      	nop
 800454c:	08004e92 	.word	0x08004e92
 8004550:	08004ea3 	.word	0x08004ea3

08004554 <__d2b>:
 8004554:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8004558:	2101      	movs	r1, #1
 800455a:	4690      	mov	r8, r2
 800455c:	4699      	mov	r9, r3
 800455e:	9e08      	ldr	r6, [sp, #32]
 8004560:	f7ff fcd0 	bl	8003f04 <_Balloc>
 8004564:	4604      	mov	r4, r0
 8004566:	b930      	cbnz	r0, 8004576 <__d2b+0x22>
 8004568:	4602      	mov	r2, r0
 800456a:	f240 310f 	movw	r1, #783	@ 0x30f
 800456e:	4b23      	ldr	r3, [pc, #140]	@ (80045fc <__d2b+0xa8>)
 8004570:	4823      	ldr	r0, [pc, #140]	@ (8004600 <__d2b+0xac>)
 8004572:	f000 f90d 	bl	8004790 <__assert_func>
 8004576:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800457a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800457e:	b10d      	cbz	r5, 8004584 <__d2b+0x30>
 8004580:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004584:	9301      	str	r3, [sp, #4]
 8004586:	f1b8 0300 	subs.w	r3, r8, #0
 800458a:	d024      	beq.n	80045d6 <__d2b+0x82>
 800458c:	4668      	mov	r0, sp
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	f7ff fd7f 	bl	8004092 <__lo0bits>
 8004594:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004598:	b1d8      	cbz	r0, 80045d2 <__d2b+0x7e>
 800459a:	f1c0 0320 	rsb	r3, r0, #32
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	430b      	orrs	r3, r1
 80045a4:	40c2      	lsrs	r2, r0
 80045a6:	6163      	str	r3, [r4, #20]
 80045a8:	9201      	str	r2, [sp, #4]
 80045aa:	9b01      	ldr	r3, [sp, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	bf0c      	ite	eq
 80045b0:	2201      	moveq	r2, #1
 80045b2:	2202      	movne	r2, #2
 80045b4:	61a3      	str	r3, [r4, #24]
 80045b6:	6122      	str	r2, [r4, #16]
 80045b8:	b1ad      	cbz	r5, 80045e6 <__d2b+0x92>
 80045ba:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80045be:	4405      	add	r5, r0
 80045c0:	6035      	str	r5, [r6, #0]
 80045c2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80045c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045c8:	6018      	str	r0, [r3, #0]
 80045ca:	4620      	mov	r0, r4
 80045cc:	b002      	add	sp, #8
 80045ce:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80045d2:	6161      	str	r1, [r4, #20]
 80045d4:	e7e9      	b.n	80045aa <__d2b+0x56>
 80045d6:	a801      	add	r0, sp, #4
 80045d8:	f7ff fd5b 	bl	8004092 <__lo0bits>
 80045dc:	9b01      	ldr	r3, [sp, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	6163      	str	r3, [r4, #20]
 80045e2:	3020      	adds	r0, #32
 80045e4:	e7e7      	b.n	80045b6 <__d2b+0x62>
 80045e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80045ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80045ee:	6030      	str	r0, [r6, #0]
 80045f0:	6918      	ldr	r0, [r3, #16]
 80045f2:	f7ff fd2f 	bl	8004054 <__hi0bits>
 80045f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80045fa:	e7e4      	b.n	80045c6 <__d2b+0x72>
 80045fc:	08004e92 	.word	0x08004e92
 8004600:	08004ea3 	.word	0x08004ea3

08004604 <__sflush_r>:
 8004604:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460a:	0716      	lsls	r6, r2, #28
 800460c:	4605      	mov	r5, r0
 800460e:	460c      	mov	r4, r1
 8004610:	d454      	bmi.n	80046bc <__sflush_r+0xb8>
 8004612:	684b      	ldr	r3, [r1, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	dc02      	bgt.n	800461e <__sflush_r+0x1a>
 8004618:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800461a:	2b00      	cmp	r3, #0
 800461c:	dd48      	ble.n	80046b0 <__sflush_r+0xac>
 800461e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004620:	2e00      	cmp	r6, #0
 8004622:	d045      	beq.n	80046b0 <__sflush_r+0xac>
 8004624:	2300      	movs	r3, #0
 8004626:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800462a:	682f      	ldr	r7, [r5, #0]
 800462c:	6a21      	ldr	r1, [r4, #32]
 800462e:	602b      	str	r3, [r5, #0]
 8004630:	d030      	beq.n	8004694 <__sflush_r+0x90>
 8004632:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004634:	89a3      	ldrh	r3, [r4, #12]
 8004636:	0759      	lsls	r1, r3, #29
 8004638:	d505      	bpl.n	8004646 <__sflush_r+0x42>
 800463a:	6863      	ldr	r3, [r4, #4]
 800463c:	1ad2      	subs	r2, r2, r3
 800463e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004640:	b10b      	cbz	r3, 8004646 <__sflush_r+0x42>
 8004642:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004644:	1ad2      	subs	r2, r2, r3
 8004646:	2300      	movs	r3, #0
 8004648:	4628      	mov	r0, r5
 800464a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800464c:	6a21      	ldr	r1, [r4, #32]
 800464e:	47b0      	blx	r6
 8004650:	1c43      	adds	r3, r0, #1
 8004652:	89a3      	ldrh	r3, [r4, #12]
 8004654:	d106      	bne.n	8004664 <__sflush_r+0x60>
 8004656:	6829      	ldr	r1, [r5, #0]
 8004658:	291d      	cmp	r1, #29
 800465a:	d82b      	bhi.n	80046b4 <__sflush_r+0xb0>
 800465c:	4a28      	ldr	r2, [pc, #160]	@ (8004700 <__sflush_r+0xfc>)
 800465e:	410a      	asrs	r2, r1
 8004660:	07d6      	lsls	r6, r2, #31
 8004662:	d427      	bmi.n	80046b4 <__sflush_r+0xb0>
 8004664:	2200      	movs	r2, #0
 8004666:	6062      	str	r2, [r4, #4]
 8004668:	6922      	ldr	r2, [r4, #16]
 800466a:	04d9      	lsls	r1, r3, #19
 800466c:	6022      	str	r2, [r4, #0]
 800466e:	d504      	bpl.n	800467a <__sflush_r+0x76>
 8004670:	1c42      	adds	r2, r0, #1
 8004672:	d101      	bne.n	8004678 <__sflush_r+0x74>
 8004674:	682b      	ldr	r3, [r5, #0]
 8004676:	b903      	cbnz	r3, 800467a <__sflush_r+0x76>
 8004678:	6560      	str	r0, [r4, #84]	@ 0x54
 800467a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800467c:	602f      	str	r7, [r5, #0]
 800467e:	b1b9      	cbz	r1, 80046b0 <__sflush_r+0xac>
 8004680:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004684:	4299      	cmp	r1, r3
 8004686:	d002      	beq.n	800468e <__sflush_r+0x8a>
 8004688:	4628      	mov	r0, r5
 800468a:	f7ff fb3d 	bl	8003d08 <_free_r>
 800468e:	2300      	movs	r3, #0
 8004690:	6363      	str	r3, [r4, #52]	@ 0x34
 8004692:	e00d      	b.n	80046b0 <__sflush_r+0xac>
 8004694:	2301      	movs	r3, #1
 8004696:	4628      	mov	r0, r5
 8004698:	47b0      	blx	r6
 800469a:	4602      	mov	r2, r0
 800469c:	1c50      	adds	r0, r2, #1
 800469e:	d1c9      	bne.n	8004634 <__sflush_r+0x30>
 80046a0:	682b      	ldr	r3, [r5, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d0c6      	beq.n	8004634 <__sflush_r+0x30>
 80046a6:	2b1d      	cmp	r3, #29
 80046a8:	d001      	beq.n	80046ae <__sflush_r+0xaa>
 80046aa:	2b16      	cmp	r3, #22
 80046ac:	d11d      	bne.n	80046ea <__sflush_r+0xe6>
 80046ae:	602f      	str	r7, [r5, #0]
 80046b0:	2000      	movs	r0, #0
 80046b2:	e021      	b.n	80046f8 <__sflush_r+0xf4>
 80046b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046b8:	b21b      	sxth	r3, r3
 80046ba:	e01a      	b.n	80046f2 <__sflush_r+0xee>
 80046bc:	690f      	ldr	r7, [r1, #16]
 80046be:	2f00      	cmp	r7, #0
 80046c0:	d0f6      	beq.n	80046b0 <__sflush_r+0xac>
 80046c2:	0793      	lsls	r3, r2, #30
 80046c4:	bf18      	it	ne
 80046c6:	2300      	movne	r3, #0
 80046c8:	680e      	ldr	r6, [r1, #0]
 80046ca:	bf08      	it	eq
 80046cc:	694b      	ldreq	r3, [r1, #20]
 80046ce:	1bf6      	subs	r6, r6, r7
 80046d0:	600f      	str	r7, [r1, #0]
 80046d2:	608b      	str	r3, [r1, #8]
 80046d4:	2e00      	cmp	r6, #0
 80046d6:	ddeb      	ble.n	80046b0 <__sflush_r+0xac>
 80046d8:	4633      	mov	r3, r6
 80046da:	463a      	mov	r2, r7
 80046dc:	4628      	mov	r0, r5
 80046de:	6a21      	ldr	r1, [r4, #32]
 80046e0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80046e4:	47e0      	blx	ip
 80046e6:	2800      	cmp	r0, #0
 80046e8:	dc07      	bgt.n	80046fa <__sflush_r+0xf6>
 80046ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046f2:	f04f 30ff 	mov.w	r0, #4294967295
 80046f6:	81a3      	strh	r3, [r4, #12]
 80046f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046fa:	4407      	add	r7, r0
 80046fc:	1a36      	subs	r6, r6, r0
 80046fe:	e7e9      	b.n	80046d4 <__sflush_r+0xd0>
 8004700:	dfbffffe 	.word	0xdfbffffe

08004704 <_fflush_r>:
 8004704:	b538      	push	{r3, r4, r5, lr}
 8004706:	690b      	ldr	r3, [r1, #16]
 8004708:	4605      	mov	r5, r0
 800470a:	460c      	mov	r4, r1
 800470c:	b913      	cbnz	r3, 8004714 <_fflush_r+0x10>
 800470e:	2500      	movs	r5, #0
 8004710:	4628      	mov	r0, r5
 8004712:	bd38      	pop	{r3, r4, r5, pc}
 8004714:	b118      	cbz	r0, 800471e <_fflush_r+0x1a>
 8004716:	6a03      	ldr	r3, [r0, #32]
 8004718:	b90b      	cbnz	r3, 800471e <_fflush_r+0x1a>
 800471a:	f7fe fb9d 	bl	8002e58 <__sinit>
 800471e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0f3      	beq.n	800470e <_fflush_r+0xa>
 8004726:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004728:	07d0      	lsls	r0, r2, #31
 800472a:	d404      	bmi.n	8004736 <_fflush_r+0x32>
 800472c:	0599      	lsls	r1, r3, #22
 800472e:	d402      	bmi.n	8004736 <_fflush_r+0x32>
 8004730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004732:	f7fe fc88 	bl	8003046 <__retarget_lock_acquire_recursive>
 8004736:	4628      	mov	r0, r5
 8004738:	4621      	mov	r1, r4
 800473a:	f7ff ff63 	bl	8004604 <__sflush_r>
 800473e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004740:	4605      	mov	r5, r0
 8004742:	07da      	lsls	r2, r3, #31
 8004744:	d4e4      	bmi.n	8004710 <_fflush_r+0xc>
 8004746:	89a3      	ldrh	r3, [r4, #12]
 8004748:	059b      	lsls	r3, r3, #22
 800474a:	d4e1      	bmi.n	8004710 <_fflush_r+0xc>
 800474c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800474e:	f7fe fc7b 	bl	8003048 <__retarget_lock_release_recursive>
 8004752:	e7dd      	b.n	8004710 <_fflush_r+0xc>

08004754 <_sbrk_r>:
 8004754:	b538      	push	{r3, r4, r5, lr}
 8004756:	2300      	movs	r3, #0
 8004758:	4d05      	ldr	r5, [pc, #20]	@ (8004770 <_sbrk_r+0x1c>)
 800475a:	4604      	mov	r4, r0
 800475c:	4608      	mov	r0, r1
 800475e:	602b      	str	r3, [r5, #0]
 8004760:	f7fc fd1a 	bl	8001198 <_sbrk>
 8004764:	1c43      	adds	r3, r0, #1
 8004766:	d102      	bne.n	800476e <_sbrk_r+0x1a>
 8004768:	682b      	ldr	r3, [r5, #0]
 800476a:	b103      	cbz	r3, 800476e <_sbrk_r+0x1a>
 800476c:	6023      	str	r3, [r4, #0]
 800476e:	bd38      	pop	{r3, r4, r5, pc}
 8004770:	2000039c 	.word	0x2000039c

08004774 <memcpy>:
 8004774:	440a      	add	r2, r1
 8004776:	4291      	cmp	r1, r2
 8004778:	f100 33ff 	add.w	r3, r0, #4294967295
 800477c:	d100      	bne.n	8004780 <memcpy+0xc>
 800477e:	4770      	bx	lr
 8004780:	b510      	push	{r4, lr}
 8004782:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004786:	4291      	cmp	r1, r2
 8004788:	f803 4f01 	strb.w	r4, [r3, #1]!
 800478c:	d1f9      	bne.n	8004782 <memcpy+0xe>
 800478e:	bd10      	pop	{r4, pc}

08004790 <__assert_func>:
 8004790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004792:	4614      	mov	r4, r2
 8004794:	461a      	mov	r2, r3
 8004796:	4b09      	ldr	r3, [pc, #36]	@ (80047bc <__assert_func+0x2c>)
 8004798:	4605      	mov	r5, r0
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68d8      	ldr	r0, [r3, #12]
 800479e:	b954      	cbnz	r4, 80047b6 <__assert_func+0x26>
 80047a0:	4b07      	ldr	r3, [pc, #28]	@ (80047c0 <__assert_func+0x30>)
 80047a2:	461c      	mov	r4, r3
 80047a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80047a8:	9100      	str	r1, [sp, #0]
 80047aa:	462b      	mov	r3, r5
 80047ac:	4905      	ldr	r1, [pc, #20]	@ (80047c4 <__assert_func+0x34>)
 80047ae:	f000 f841 	bl	8004834 <fiprintf>
 80047b2:	f000 f851 	bl	8004858 <abort>
 80047b6:	4b04      	ldr	r3, [pc, #16]	@ (80047c8 <__assert_func+0x38>)
 80047b8:	e7f4      	b.n	80047a4 <__assert_func+0x14>
 80047ba:	bf00      	nop
 80047bc:	20000018 	.word	0x20000018
 80047c0:	0800503d 	.word	0x0800503d
 80047c4:	0800500f 	.word	0x0800500f
 80047c8:	08005002 	.word	0x08005002

080047cc <_calloc_r>:
 80047cc:	b570      	push	{r4, r5, r6, lr}
 80047ce:	fba1 5402 	umull	r5, r4, r1, r2
 80047d2:	b93c      	cbnz	r4, 80047e4 <_calloc_r+0x18>
 80047d4:	4629      	mov	r1, r5
 80047d6:	f7ff fb09 	bl	8003dec <_malloc_r>
 80047da:	4606      	mov	r6, r0
 80047dc:	b928      	cbnz	r0, 80047ea <_calloc_r+0x1e>
 80047de:	2600      	movs	r6, #0
 80047e0:	4630      	mov	r0, r6
 80047e2:	bd70      	pop	{r4, r5, r6, pc}
 80047e4:	220c      	movs	r2, #12
 80047e6:	6002      	str	r2, [r0, #0]
 80047e8:	e7f9      	b.n	80047de <_calloc_r+0x12>
 80047ea:	462a      	mov	r2, r5
 80047ec:	4621      	mov	r1, r4
 80047ee:	f7fe fbac 	bl	8002f4a <memset>
 80047f2:	e7f5      	b.n	80047e0 <_calloc_r+0x14>

080047f4 <__ascii_mbtowc>:
 80047f4:	b082      	sub	sp, #8
 80047f6:	b901      	cbnz	r1, 80047fa <__ascii_mbtowc+0x6>
 80047f8:	a901      	add	r1, sp, #4
 80047fa:	b142      	cbz	r2, 800480e <__ascii_mbtowc+0x1a>
 80047fc:	b14b      	cbz	r3, 8004812 <__ascii_mbtowc+0x1e>
 80047fe:	7813      	ldrb	r3, [r2, #0]
 8004800:	600b      	str	r3, [r1, #0]
 8004802:	7812      	ldrb	r2, [r2, #0]
 8004804:	1e10      	subs	r0, r2, #0
 8004806:	bf18      	it	ne
 8004808:	2001      	movne	r0, #1
 800480a:	b002      	add	sp, #8
 800480c:	4770      	bx	lr
 800480e:	4610      	mov	r0, r2
 8004810:	e7fb      	b.n	800480a <__ascii_mbtowc+0x16>
 8004812:	f06f 0001 	mvn.w	r0, #1
 8004816:	e7f8      	b.n	800480a <__ascii_mbtowc+0x16>

08004818 <__ascii_wctomb>:
 8004818:	4603      	mov	r3, r0
 800481a:	4608      	mov	r0, r1
 800481c:	b141      	cbz	r1, 8004830 <__ascii_wctomb+0x18>
 800481e:	2aff      	cmp	r2, #255	@ 0xff
 8004820:	d904      	bls.n	800482c <__ascii_wctomb+0x14>
 8004822:	228a      	movs	r2, #138	@ 0x8a
 8004824:	f04f 30ff 	mov.w	r0, #4294967295
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	4770      	bx	lr
 800482c:	2001      	movs	r0, #1
 800482e:	700a      	strb	r2, [r1, #0]
 8004830:	4770      	bx	lr
	...

08004834 <fiprintf>:
 8004834:	b40e      	push	{r1, r2, r3}
 8004836:	b503      	push	{r0, r1, lr}
 8004838:	4601      	mov	r1, r0
 800483a:	ab03      	add	r3, sp, #12
 800483c:	4805      	ldr	r0, [pc, #20]	@ (8004854 <fiprintf+0x20>)
 800483e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004842:	6800      	ldr	r0, [r0, #0]
 8004844:	9301      	str	r3, [sp, #4]
 8004846:	f000 f835 	bl	80048b4 <_vfiprintf_r>
 800484a:	b002      	add	sp, #8
 800484c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004850:	b003      	add	sp, #12
 8004852:	4770      	bx	lr
 8004854:	20000018 	.word	0x20000018

08004858 <abort>:
 8004858:	2006      	movs	r0, #6
 800485a:	b508      	push	{r3, lr}
 800485c:	f000 f9fe 	bl	8004c5c <raise>
 8004860:	2001      	movs	r0, #1
 8004862:	f7fc fc40 	bl	80010e6 <_exit>

08004866 <__sfputc_r>:
 8004866:	6893      	ldr	r3, [r2, #8]
 8004868:	b410      	push	{r4}
 800486a:	3b01      	subs	r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	6093      	str	r3, [r2, #8]
 8004870:	da07      	bge.n	8004882 <__sfputc_r+0x1c>
 8004872:	6994      	ldr	r4, [r2, #24]
 8004874:	42a3      	cmp	r3, r4
 8004876:	db01      	blt.n	800487c <__sfputc_r+0x16>
 8004878:	290a      	cmp	r1, #10
 800487a:	d102      	bne.n	8004882 <__sfputc_r+0x1c>
 800487c:	bc10      	pop	{r4}
 800487e:	f000 b931 	b.w	8004ae4 <__swbuf_r>
 8004882:	6813      	ldr	r3, [r2, #0]
 8004884:	1c58      	adds	r0, r3, #1
 8004886:	6010      	str	r0, [r2, #0]
 8004888:	7019      	strb	r1, [r3, #0]
 800488a:	4608      	mov	r0, r1
 800488c:	bc10      	pop	{r4}
 800488e:	4770      	bx	lr

08004890 <__sfputs_r>:
 8004890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004892:	4606      	mov	r6, r0
 8004894:	460f      	mov	r7, r1
 8004896:	4614      	mov	r4, r2
 8004898:	18d5      	adds	r5, r2, r3
 800489a:	42ac      	cmp	r4, r5
 800489c:	d101      	bne.n	80048a2 <__sfputs_r+0x12>
 800489e:	2000      	movs	r0, #0
 80048a0:	e007      	b.n	80048b2 <__sfputs_r+0x22>
 80048a2:	463a      	mov	r2, r7
 80048a4:	4630      	mov	r0, r6
 80048a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048aa:	f7ff ffdc 	bl	8004866 <__sfputc_r>
 80048ae:	1c43      	adds	r3, r0, #1
 80048b0:	d1f3      	bne.n	800489a <__sfputs_r+0xa>
 80048b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080048b4 <_vfiprintf_r>:
 80048b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b8:	460d      	mov	r5, r1
 80048ba:	4614      	mov	r4, r2
 80048bc:	4698      	mov	r8, r3
 80048be:	4606      	mov	r6, r0
 80048c0:	b09d      	sub	sp, #116	@ 0x74
 80048c2:	b118      	cbz	r0, 80048cc <_vfiprintf_r+0x18>
 80048c4:	6a03      	ldr	r3, [r0, #32]
 80048c6:	b90b      	cbnz	r3, 80048cc <_vfiprintf_r+0x18>
 80048c8:	f7fe fac6 	bl	8002e58 <__sinit>
 80048cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048ce:	07d9      	lsls	r1, r3, #31
 80048d0:	d405      	bmi.n	80048de <_vfiprintf_r+0x2a>
 80048d2:	89ab      	ldrh	r3, [r5, #12]
 80048d4:	059a      	lsls	r2, r3, #22
 80048d6:	d402      	bmi.n	80048de <_vfiprintf_r+0x2a>
 80048d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048da:	f7fe fbb4 	bl	8003046 <__retarget_lock_acquire_recursive>
 80048de:	89ab      	ldrh	r3, [r5, #12]
 80048e0:	071b      	lsls	r3, r3, #28
 80048e2:	d501      	bpl.n	80048e8 <_vfiprintf_r+0x34>
 80048e4:	692b      	ldr	r3, [r5, #16]
 80048e6:	b99b      	cbnz	r3, 8004910 <_vfiprintf_r+0x5c>
 80048e8:	4629      	mov	r1, r5
 80048ea:	4630      	mov	r0, r6
 80048ec:	f000 f938 	bl	8004b60 <__swsetup_r>
 80048f0:	b170      	cbz	r0, 8004910 <_vfiprintf_r+0x5c>
 80048f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048f4:	07dc      	lsls	r4, r3, #31
 80048f6:	d504      	bpl.n	8004902 <_vfiprintf_r+0x4e>
 80048f8:	f04f 30ff 	mov.w	r0, #4294967295
 80048fc:	b01d      	add	sp, #116	@ 0x74
 80048fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004902:	89ab      	ldrh	r3, [r5, #12]
 8004904:	0598      	lsls	r0, r3, #22
 8004906:	d4f7      	bmi.n	80048f8 <_vfiprintf_r+0x44>
 8004908:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800490a:	f7fe fb9d 	bl	8003048 <__retarget_lock_release_recursive>
 800490e:	e7f3      	b.n	80048f8 <_vfiprintf_r+0x44>
 8004910:	2300      	movs	r3, #0
 8004912:	9309      	str	r3, [sp, #36]	@ 0x24
 8004914:	2320      	movs	r3, #32
 8004916:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800491a:	2330      	movs	r3, #48	@ 0x30
 800491c:	f04f 0901 	mov.w	r9, #1
 8004920:	f8cd 800c 	str.w	r8, [sp, #12]
 8004924:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004ad0 <_vfiprintf_r+0x21c>
 8004928:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800492c:	4623      	mov	r3, r4
 800492e:	469a      	mov	sl, r3
 8004930:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004934:	b10a      	cbz	r2, 800493a <_vfiprintf_r+0x86>
 8004936:	2a25      	cmp	r2, #37	@ 0x25
 8004938:	d1f9      	bne.n	800492e <_vfiprintf_r+0x7a>
 800493a:	ebba 0b04 	subs.w	fp, sl, r4
 800493e:	d00b      	beq.n	8004958 <_vfiprintf_r+0xa4>
 8004940:	465b      	mov	r3, fp
 8004942:	4622      	mov	r2, r4
 8004944:	4629      	mov	r1, r5
 8004946:	4630      	mov	r0, r6
 8004948:	f7ff ffa2 	bl	8004890 <__sfputs_r>
 800494c:	3001      	adds	r0, #1
 800494e:	f000 80a7 	beq.w	8004aa0 <_vfiprintf_r+0x1ec>
 8004952:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004954:	445a      	add	r2, fp
 8004956:	9209      	str	r2, [sp, #36]	@ 0x24
 8004958:	f89a 3000 	ldrb.w	r3, [sl]
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 809f 	beq.w	8004aa0 <_vfiprintf_r+0x1ec>
 8004962:	2300      	movs	r3, #0
 8004964:	f04f 32ff 	mov.w	r2, #4294967295
 8004968:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800496c:	f10a 0a01 	add.w	sl, sl, #1
 8004970:	9304      	str	r3, [sp, #16]
 8004972:	9307      	str	r3, [sp, #28]
 8004974:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004978:	931a      	str	r3, [sp, #104]	@ 0x68
 800497a:	4654      	mov	r4, sl
 800497c:	2205      	movs	r2, #5
 800497e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004982:	4853      	ldr	r0, [pc, #332]	@ (8004ad0 <_vfiprintf_r+0x21c>)
 8004984:	f7fe fb61 	bl	800304a <memchr>
 8004988:	9a04      	ldr	r2, [sp, #16]
 800498a:	b9d8      	cbnz	r0, 80049c4 <_vfiprintf_r+0x110>
 800498c:	06d1      	lsls	r1, r2, #27
 800498e:	bf44      	itt	mi
 8004990:	2320      	movmi	r3, #32
 8004992:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004996:	0713      	lsls	r3, r2, #28
 8004998:	bf44      	itt	mi
 800499a:	232b      	movmi	r3, #43	@ 0x2b
 800499c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049a0:	f89a 3000 	ldrb.w	r3, [sl]
 80049a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80049a6:	d015      	beq.n	80049d4 <_vfiprintf_r+0x120>
 80049a8:	4654      	mov	r4, sl
 80049aa:	2000      	movs	r0, #0
 80049ac:	f04f 0c0a 	mov.w	ip, #10
 80049b0:	9a07      	ldr	r2, [sp, #28]
 80049b2:	4621      	mov	r1, r4
 80049b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049b8:	3b30      	subs	r3, #48	@ 0x30
 80049ba:	2b09      	cmp	r3, #9
 80049bc:	d94b      	bls.n	8004a56 <_vfiprintf_r+0x1a2>
 80049be:	b1b0      	cbz	r0, 80049ee <_vfiprintf_r+0x13a>
 80049c0:	9207      	str	r2, [sp, #28]
 80049c2:	e014      	b.n	80049ee <_vfiprintf_r+0x13a>
 80049c4:	eba0 0308 	sub.w	r3, r0, r8
 80049c8:	fa09 f303 	lsl.w	r3, r9, r3
 80049cc:	4313      	orrs	r3, r2
 80049ce:	46a2      	mov	sl, r4
 80049d0:	9304      	str	r3, [sp, #16]
 80049d2:	e7d2      	b.n	800497a <_vfiprintf_r+0xc6>
 80049d4:	9b03      	ldr	r3, [sp, #12]
 80049d6:	1d19      	adds	r1, r3, #4
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	9103      	str	r1, [sp, #12]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	bfbb      	ittet	lt
 80049e0:	425b      	neglt	r3, r3
 80049e2:	f042 0202 	orrlt.w	r2, r2, #2
 80049e6:	9307      	strge	r3, [sp, #28]
 80049e8:	9307      	strlt	r3, [sp, #28]
 80049ea:	bfb8      	it	lt
 80049ec:	9204      	strlt	r2, [sp, #16]
 80049ee:	7823      	ldrb	r3, [r4, #0]
 80049f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80049f2:	d10a      	bne.n	8004a0a <_vfiprintf_r+0x156>
 80049f4:	7863      	ldrb	r3, [r4, #1]
 80049f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80049f8:	d132      	bne.n	8004a60 <_vfiprintf_r+0x1ac>
 80049fa:	9b03      	ldr	r3, [sp, #12]
 80049fc:	3402      	adds	r4, #2
 80049fe:	1d1a      	adds	r2, r3, #4
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	9203      	str	r2, [sp, #12]
 8004a04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a08:	9305      	str	r3, [sp, #20]
 8004a0a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004ad4 <_vfiprintf_r+0x220>
 8004a0e:	2203      	movs	r2, #3
 8004a10:	4650      	mov	r0, sl
 8004a12:	7821      	ldrb	r1, [r4, #0]
 8004a14:	f7fe fb19 	bl	800304a <memchr>
 8004a18:	b138      	cbz	r0, 8004a2a <_vfiprintf_r+0x176>
 8004a1a:	2240      	movs	r2, #64	@ 0x40
 8004a1c:	9b04      	ldr	r3, [sp, #16]
 8004a1e:	eba0 000a 	sub.w	r0, r0, sl
 8004a22:	4082      	lsls	r2, r0
 8004a24:	4313      	orrs	r3, r2
 8004a26:	3401      	adds	r4, #1
 8004a28:	9304      	str	r3, [sp, #16]
 8004a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a2e:	2206      	movs	r2, #6
 8004a30:	4829      	ldr	r0, [pc, #164]	@ (8004ad8 <_vfiprintf_r+0x224>)
 8004a32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a36:	f7fe fb08 	bl	800304a <memchr>
 8004a3a:	2800      	cmp	r0, #0
 8004a3c:	d03f      	beq.n	8004abe <_vfiprintf_r+0x20a>
 8004a3e:	4b27      	ldr	r3, [pc, #156]	@ (8004adc <_vfiprintf_r+0x228>)
 8004a40:	bb1b      	cbnz	r3, 8004a8a <_vfiprintf_r+0x1d6>
 8004a42:	9b03      	ldr	r3, [sp, #12]
 8004a44:	3307      	adds	r3, #7
 8004a46:	f023 0307 	bic.w	r3, r3, #7
 8004a4a:	3308      	adds	r3, #8
 8004a4c:	9303      	str	r3, [sp, #12]
 8004a4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a50:	443b      	add	r3, r7
 8004a52:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a54:	e76a      	b.n	800492c <_vfiprintf_r+0x78>
 8004a56:	460c      	mov	r4, r1
 8004a58:	2001      	movs	r0, #1
 8004a5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a5e:	e7a8      	b.n	80049b2 <_vfiprintf_r+0xfe>
 8004a60:	2300      	movs	r3, #0
 8004a62:	f04f 0c0a 	mov.w	ip, #10
 8004a66:	4619      	mov	r1, r3
 8004a68:	3401      	adds	r4, #1
 8004a6a:	9305      	str	r3, [sp, #20]
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a72:	3a30      	subs	r2, #48	@ 0x30
 8004a74:	2a09      	cmp	r2, #9
 8004a76:	d903      	bls.n	8004a80 <_vfiprintf_r+0x1cc>
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0c6      	beq.n	8004a0a <_vfiprintf_r+0x156>
 8004a7c:	9105      	str	r1, [sp, #20]
 8004a7e:	e7c4      	b.n	8004a0a <_vfiprintf_r+0x156>
 8004a80:	4604      	mov	r4, r0
 8004a82:	2301      	movs	r3, #1
 8004a84:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a88:	e7f0      	b.n	8004a6c <_vfiprintf_r+0x1b8>
 8004a8a:	ab03      	add	r3, sp, #12
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	462a      	mov	r2, r5
 8004a90:	4630      	mov	r0, r6
 8004a92:	4b13      	ldr	r3, [pc, #76]	@ (8004ae0 <_vfiprintf_r+0x22c>)
 8004a94:	a904      	add	r1, sp, #16
 8004a96:	f7fd fd95 	bl	80025c4 <_printf_float>
 8004a9a:	4607      	mov	r7, r0
 8004a9c:	1c78      	adds	r0, r7, #1
 8004a9e:	d1d6      	bne.n	8004a4e <_vfiprintf_r+0x19a>
 8004aa0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004aa2:	07d9      	lsls	r1, r3, #31
 8004aa4:	d405      	bmi.n	8004ab2 <_vfiprintf_r+0x1fe>
 8004aa6:	89ab      	ldrh	r3, [r5, #12]
 8004aa8:	059a      	lsls	r2, r3, #22
 8004aaa:	d402      	bmi.n	8004ab2 <_vfiprintf_r+0x1fe>
 8004aac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004aae:	f7fe facb 	bl	8003048 <__retarget_lock_release_recursive>
 8004ab2:	89ab      	ldrh	r3, [r5, #12]
 8004ab4:	065b      	lsls	r3, r3, #25
 8004ab6:	f53f af1f 	bmi.w	80048f8 <_vfiprintf_r+0x44>
 8004aba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004abc:	e71e      	b.n	80048fc <_vfiprintf_r+0x48>
 8004abe:	ab03      	add	r3, sp, #12
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	462a      	mov	r2, r5
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	4b06      	ldr	r3, [pc, #24]	@ (8004ae0 <_vfiprintf_r+0x22c>)
 8004ac8:	a904      	add	r1, sp, #16
 8004aca:	f7fe f819 	bl	8002b00 <_printf_i>
 8004ace:	e7e4      	b.n	8004a9a <_vfiprintf_r+0x1e6>
 8004ad0:	0800513f 	.word	0x0800513f
 8004ad4:	08005145 	.word	0x08005145
 8004ad8:	08005149 	.word	0x08005149
 8004adc:	080025c5 	.word	0x080025c5
 8004ae0:	08004891 	.word	0x08004891

08004ae4 <__swbuf_r>:
 8004ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae6:	460e      	mov	r6, r1
 8004ae8:	4614      	mov	r4, r2
 8004aea:	4605      	mov	r5, r0
 8004aec:	b118      	cbz	r0, 8004af6 <__swbuf_r+0x12>
 8004aee:	6a03      	ldr	r3, [r0, #32]
 8004af0:	b90b      	cbnz	r3, 8004af6 <__swbuf_r+0x12>
 8004af2:	f7fe f9b1 	bl	8002e58 <__sinit>
 8004af6:	69a3      	ldr	r3, [r4, #24]
 8004af8:	60a3      	str	r3, [r4, #8]
 8004afa:	89a3      	ldrh	r3, [r4, #12]
 8004afc:	071a      	lsls	r2, r3, #28
 8004afe:	d501      	bpl.n	8004b04 <__swbuf_r+0x20>
 8004b00:	6923      	ldr	r3, [r4, #16]
 8004b02:	b943      	cbnz	r3, 8004b16 <__swbuf_r+0x32>
 8004b04:	4621      	mov	r1, r4
 8004b06:	4628      	mov	r0, r5
 8004b08:	f000 f82a 	bl	8004b60 <__swsetup_r>
 8004b0c:	b118      	cbz	r0, 8004b16 <__swbuf_r+0x32>
 8004b0e:	f04f 37ff 	mov.w	r7, #4294967295
 8004b12:	4638      	mov	r0, r7
 8004b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	6922      	ldr	r2, [r4, #16]
 8004b1a:	b2f6      	uxtb	r6, r6
 8004b1c:	1a98      	subs	r0, r3, r2
 8004b1e:	6963      	ldr	r3, [r4, #20]
 8004b20:	4637      	mov	r7, r6
 8004b22:	4283      	cmp	r3, r0
 8004b24:	dc05      	bgt.n	8004b32 <__swbuf_r+0x4e>
 8004b26:	4621      	mov	r1, r4
 8004b28:	4628      	mov	r0, r5
 8004b2a:	f7ff fdeb 	bl	8004704 <_fflush_r>
 8004b2e:	2800      	cmp	r0, #0
 8004b30:	d1ed      	bne.n	8004b0e <__swbuf_r+0x2a>
 8004b32:	68a3      	ldr	r3, [r4, #8]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	60a3      	str	r3, [r4, #8]
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	6022      	str	r2, [r4, #0]
 8004b3e:	701e      	strb	r6, [r3, #0]
 8004b40:	6962      	ldr	r2, [r4, #20]
 8004b42:	1c43      	adds	r3, r0, #1
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d004      	beq.n	8004b52 <__swbuf_r+0x6e>
 8004b48:	89a3      	ldrh	r3, [r4, #12]
 8004b4a:	07db      	lsls	r3, r3, #31
 8004b4c:	d5e1      	bpl.n	8004b12 <__swbuf_r+0x2e>
 8004b4e:	2e0a      	cmp	r6, #10
 8004b50:	d1df      	bne.n	8004b12 <__swbuf_r+0x2e>
 8004b52:	4621      	mov	r1, r4
 8004b54:	4628      	mov	r0, r5
 8004b56:	f7ff fdd5 	bl	8004704 <_fflush_r>
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	d0d9      	beq.n	8004b12 <__swbuf_r+0x2e>
 8004b5e:	e7d6      	b.n	8004b0e <__swbuf_r+0x2a>

08004b60 <__swsetup_r>:
 8004b60:	b538      	push	{r3, r4, r5, lr}
 8004b62:	4b29      	ldr	r3, [pc, #164]	@ (8004c08 <__swsetup_r+0xa8>)
 8004b64:	4605      	mov	r5, r0
 8004b66:	6818      	ldr	r0, [r3, #0]
 8004b68:	460c      	mov	r4, r1
 8004b6a:	b118      	cbz	r0, 8004b74 <__swsetup_r+0x14>
 8004b6c:	6a03      	ldr	r3, [r0, #32]
 8004b6e:	b90b      	cbnz	r3, 8004b74 <__swsetup_r+0x14>
 8004b70:	f7fe f972 	bl	8002e58 <__sinit>
 8004b74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b78:	0719      	lsls	r1, r3, #28
 8004b7a:	d422      	bmi.n	8004bc2 <__swsetup_r+0x62>
 8004b7c:	06da      	lsls	r2, r3, #27
 8004b7e:	d407      	bmi.n	8004b90 <__swsetup_r+0x30>
 8004b80:	2209      	movs	r2, #9
 8004b82:	602a      	str	r2, [r5, #0]
 8004b84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b88:	f04f 30ff 	mov.w	r0, #4294967295
 8004b8c:	81a3      	strh	r3, [r4, #12]
 8004b8e:	e033      	b.n	8004bf8 <__swsetup_r+0x98>
 8004b90:	0758      	lsls	r0, r3, #29
 8004b92:	d512      	bpl.n	8004bba <__swsetup_r+0x5a>
 8004b94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b96:	b141      	cbz	r1, 8004baa <__swsetup_r+0x4a>
 8004b98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b9c:	4299      	cmp	r1, r3
 8004b9e:	d002      	beq.n	8004ba6 <__swsetup_r+0x46>
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	f7ff f8b1 	bl	8003d08 <_free_r>
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	6363      	str	r3, [r4, #52]	@ 0x34
 8004baa:	89a3      	ldrh	r3, [r4, #12]
 8004bac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004bb0:	81a3      	strh	r3, [r4, #12]
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	6063      	str	r3, [r4, #4]
 8004bb6:	6923      	ldr	r3, [r4, #16]
 8004bb8:	6023      	str	r3, [r4, #0]
 8004bba:	89a3      	ldrh	r3, [r4, #12]
 8004bbc:	f043 0308 	orr.w	r3, r3, #8
 8004bc0:	81a3      	strh	r3, [r4, #12]
 8004bc2:	6923      	ldr	r3, [r4, #16]
 8004bc4:	b94b      	cbnz	r3, 8004bda <__swsetup_r+0x7a>
 8004bc6:	89a3      	ldrh	r3, [r4, #12]
 8004bc8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004bcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bd0:	d003      	beq.n	8004bda <__swsetup_r+0x7a>
 8004bd2:	4621      	mov	r1, r4
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	f000 f882 	bl	8004cde <__smakebuf_r>
 8004bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bde:	f013 0201 	ands.w	r2, r3, #1
 8004be2:	d00a      	beq.n	8004bfa <__swsetup_r+0x9a>
 8004be4:	2200      	movs	r2, #0
 8004be6:	60a2      	str	r2, [r4, #8]
 8004be8:	6962      	ldr	r2, [r4, #20]
 8004bea:	4252      	negs	r2, r2
 8004bec:	61a2      	str	r2, [r4, #24]
 8004bee:	6922      	ldr	r2, [r4, #16]
 8004bf0:	b942      	cbnz	r2, 8004c04 <__swsetup_r+0xa4>
 8004bf2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004bf6:	d1c5      	bne.n	8004b84 <__swsetup_r+0x24>
 8004bf8:	bd38      	pop	{r3, r4, r5, pc}
 8004bfa:	0799      	lsls	r1, r3, #30
 8004bfc:	bf58      	it	pl
 8004bfe:	6962      	ldrpl	r2, [r4, #20]
 8004c00:	60a2      	str	r2, [r4, #8]
 8004c02:	e7f4      	b.n	8004bee <__swsetup_r+0x8e>
 8004c04:	2000      	movs	r0, #0
 8004c06:	e7f7      	b.n	8004bf8 <__swsetup_r+0x98>
 8004c08:	20000018 	.word	0x20000018

08004c0c <_raise_r>:
 8004c0c:	291f      	cmp	r1, #31
 8004c0e:	b538      	push	{r3, r4, r5, lr}
 8004c10:	4605      	mov	r5, r0
 8004c12:	460c      	mov	r4, r1
 8004c14:	d904      	bls.n	8004c20 <_raise_r+0x14>
 8004c16:	2316      	movs	r3, #22
 8004c18:	6003      	str	r3, [r0, #0]
 8004c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1e:	bd38      	pop	{r3, r4, r5, pc}
 8004c20:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004c22:	b112      	cbz	r2, 8004c2a <_raise_r+0x1e>
 8004c24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004c28:	b94b      	cbnz	r3, 8004c3e <_raise_r+0x32>
 8004c2a:	4628      	mov	r0, r5
 8004c2c:	f000 f830 	bl	8004c90 <_getpid_r>
 8004c30:	4622      	mov	r2, r4
 8004c32:	4601      	mov	r1, r0
 8004c34:	4628      	mov	r0, r5
 8004c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c3a:	f000 b817 	b.w	8004c6c <_kill_r>
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d00a      	beq.n	8004c58 <_raise_r+0x4c>
 8004c42:	1c59      	adds	r1, r3, #1
 8004c44:	d103      	bne.n	8004c4e <_raise_r+0x42>
 8004c46:	2316      	movs	r3, #22
 8004c48:	6003      	str	r3, [r0, #0]
 8004c4a:	2001      	movs	r0, #1
 8004c4c:	e7e7      	b.n	8004c1e <_raise_r+0x12>
 8004c4e:	2100      	movs	r1, #0
 8004c50:	4620      	mov	r0, r4
 8004c52:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004c56:	4798      	blx	r3
 8004c58:	2000      	movs	r0, #0
 8004c5a:	e7e0      	b.n	8004c1e <_raise_r+0x12>

08004c5c <raise>:
 8004c5c:	4b02      	ldr	r3, [pc, #8]	@ (8004c68 <raise+0xc>)
 8004c5e:	4601      	mov	r1, r0
 8004c60:	6818      	ldr	r0, [r3, #0]
 8004c62:	f7ff bfd3 	b.w	8004c0c <_raise_r>
 8004c66:	bf00      	nop
 8004c68:	20000018 	.word	0x20000018

08004c6c <_kill_r>:
 8004c6c:	b538      	push	{r3, r4, r5, lr}
 8004c6e:	2300      	movs	r3, #0
 8004c70:	4d06      	ldr	r5, [pc, #24]	@ (8004c8c <_kill_r+0x20>)
 8004c72:	4604      	mov	r4, r0
 8004c74:	4608      	mov	r0, r1
 8004c76:	4611      	mov	r1, r2
 8004c78:	602b      	str	r3, [r5, #0]
 8004c7a:	f7fc fa24 	bl	80010c6 <_kill>
 8004c7e:	1c43      	adds	r3, r0, #1
 8004c80:	d102      	bne.n	8004c88 <_kill_r+0x1c>
 8004c82:	682b      	ldr	r3, [r5, #0]
 8004c84:	b103      	cbz	r3, 8004c88 <_kill_r+0x1c>
 8004c86:	6023      	str	r3, [r4, #0]
 8004c88:	bd38      	pop	{r3, r4, r5, pc}
 8004c8a:	bf00      	nop
 8004c8c:	2000039c 	.word	0x2000039c

08004c90 <_getpid_r>:
 8004c90:	f7fc ba12 	b.w	80010b8 <_getpid>

08004c94 <__swhatbuf_r>:
 8004c94:	b570      	push	{r4, r5, r6, lr}
 8004c96:	460c      	mov	r4, r1
 8004c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c9c:	4615      	mov	r5, r2
 8004c9e:	2900      	cmp	r1, #0
 8004ca0:	461e      	mov	r6, r3
 8004ca2:	b096      	sub	sp, #88	@ 0x58
 8004ca4:	da0c      	bge.n	8004cc0 <__swhatbuf_r+0x2c>
 8004ca6:	89a3      	ldrh	r3, [r4, #12]
 8004ca8:	2100      	movs	r1, #0
 8004caa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004cae:	bf14      	ite	ne
 8004cb0:	2340      	movne	r3, #64	@ 0x40
 8004cb2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	6031      	str	r1, [r6, #0]
 8004cba:	602b      	str	r3, [r5, #0]
 8004cbc:	b016      	add	sp, #88	@ 0x58
 8004cbe:	bd70      	pop	{r4, r5, r6, pc}
 8004cc0:	466a      	mov	r2, sp
 8004cc2:	f000 f849 	bl	8004d58 <_fstat_r>
 8004cc6:	2800      	cmp	r0, #0
 8004cc8:	dbed      	blt.n	8004ca6 <__swhatbuf_r+0x12>
 8004cca:	9901      	ldr	r1, [sp, #4]
 8004ccc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004cd0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004cd4:	4259      	negs	r1, r3
 8004cd6:	4159      	adcs	r1, r3
 8004cd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004cdc:	e7eb      	b.n	8004cb6 <__swhatbuf_r+0x22>

08004cde <__smakebuf_r>:
 8004cde:	898b      	ldrh	r3, [r1, #12]
 8004ce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ce2:	079d      	lsls	r5, r3, #30
 8004ce4:	4606      	mov	r6, r0
 8004ce6:	460c      	mov	r4, r1
 8004ce8:	d507      	bpl.n	8004cfa <__smakebuf_r+0x1c>
 8004cea:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004cee:	6023      	str	r3, [r4, #0]
 8004cf0:	6123      	str	r3, [r4, #16]
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	6163      	str	r3, [r4, #20]
 8004cf6:	b003      	add	sp, #12
 8004cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cfa:	466a      	mov	r2, sp
 8004cfc:	ab01      	add	r3, sp, #4
 8004cfe:	f7ff ffc9 	bl	8004c94 <__swhatbuf_r>
 8004d02:	9f00      	ldr	r7, [sp, #0]
 8004d04:	4605      	mov	r5, r0
 8004d06:	4639      	mov	r1, r7
 8004d08:	4630      	mov	r0, r6
 8004d0a:	f7ff f86f 	bl	8003dec <_malloc_r>
 8004d0e:	b948      	cbnz	r0, 8004d24 <__smakebuf_r+0x46>
 8004d10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d14:	059a      	lsls	r2, r3, #22
 8004d16:	d4ee      	bmi.n	8004cf6 <__smakebuf_r+0x18>
 8004d18:	f023 0303 	bic.w	r3, r3, #3
 8004d1c:	f043 0302 	orr.w	r3, r3, #2
 8004d20:	81a3      	strh	r3, [r4, #12]
 8004d22:	e7e2      	b.n	8004cea <__smakebuf_r+0xc>
 8004d24:	89a3      	ldrh	r3, [r4, #12]
 8004d26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004d2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d2e:	81a3      	strh	r3, [r4, #12]
 8004d30:	9b01      	ldr	r3, [sp, #4]
 8004d32:	6020      	str	r0, [r4, #0]
 8004d34:	b15b      	cbz	r3, 8004d4e <__smakebuf_r+0x70>
 8004d36:	4630      	mov	r0, r6
 8004d38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d3c:	f000 f81e 	bl	8004d7c <_isatty_r>
 8004d40:	b128      	cbz	r0, 8004d4e <__smakebuf_r+0x70>
 8004d42:	89a3      	ldrh	r3, [r4, #12]
 8004d44:	f023 0303 	bic.w	r3, r3, #3
 8004d48:	f043 0301 	orr.w	r3, r3, #1
 8004d4c:	81a3      	strh	r3, [r4, #12]
 8004d4e:	89a3      	ldrh	r3, [r4, #12]
 8004d50:	431d      	orrs	r5, r3
 8004d52:	81a5      	strh	r5, [r4, #12]
 8004d54:	e7cf      	b.n	8004cf6 <__smakebuf_r+0x18>
	...

08004d58 <_fstat_r>:
 8004d58:	b538      	push	{r3, r4, r5, lr}
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	4d06      	ldr	r5, [pc, #24]	@ (8004d78 <_fstat_r+0x20>)
 8004d5e:	4604      	mov	r4, r0
 8004d60:	4608      	mov	r0, r1
 8004d62:	4611      	mov	r1, r2
 8004d64:	602b      	str	r3, [r5, #0]
 8004d66:	f7fc f9f1 	bl	800114c <_fstat>
 8004d6a:	1c43      	adds	r3, r0, #1
 8004d6c:	d102      	bne.n	8004d74 <_fstat_r+0x1c>
 8004d6e:	682b      	ldr	r3, [r5, #0]
 8004d70:	b103      	cbz	r3, 8004d74 <_fstat_r+0x1c>
 8004d72:	6023      	str	r3, [r4, #0]
 8004d74:	bd38      	pop	{r3, r4, r5, pc}
 8004d76:	bf00      	nop
 8004d78:	2000039c 	.word	0x2000039c

08004d7c <_isatty_r>:
 8004d7c:	b538      	push	{r3, r4, r5, lr}
 8004d7e:	2300      	movs	r3, #0
 8004d80:	4d05      	ldr	r5, [pc, #20]	@ (8004d98 <_isatty_r+0x1c>)
 8004d82:	4604      	mov	r4, r0
 8004d84:	4608      	mov	r0, r1
 8004d86:	602b      	str	r3, [r5, #0]
 8004d88:	f7fc f9ef 	bl	800116a <_isatty>
 8004d8c:	1c43      	adds	r3, r0, #1
 8004d8e:	d102      	bne.n	8004d96 <_isatty_r+0x1a>
 8004d90:	682b      	ldr	r3, [r5, #0]
 8004d92:	b103      	cbz	r3, 8004d96 <_isatty_r+0x1a>
 8004d94:	6023      	str	r3, [r4, #0]
 8004d96:	bd38      	pop	{r3, r4, r5, pc}
 8004d98:	2000039c 	.word	0x2000039c

08004d9c <_init>:
 8004d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9e:	bf00      	nop
 8004da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004da2:	bc08      	pop	{r3}
 8004da4:	469e      	mov	lr, r3
 8004da6:	4770      	bx	lr

08004da8 <_fini>:
 8004da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004daa:	bf00      	nop
 8004dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dae:	bc08      	pop	{r3}
 8004db0:	469e      	mov	lr, r3
 8004db2:	4770      	bx	lr
