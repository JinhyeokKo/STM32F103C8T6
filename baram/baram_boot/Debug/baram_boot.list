
baram_boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039a4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08003ab0  08003ab0  00004ab0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b60  08003b60  000050e4  2**0
                  CONTENTS
  4 .ARM          00000008  08003b60  08003b60  00004b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b68  08003b68  000050e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b68  08003b68  00004b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b6c  08003b6c  00004b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e4  20000000  08003b70  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f14  200000e8  08003c54  000050e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000ffc  08003c54  00005ffc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000050e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012646  00000000  00000000  0000510d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b3a  00000000  00000000  00017753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000062cf  00000000  00000000  0001c28d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e08  00000000  00000000  00022560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fef  00000000  00000000  00023368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bba8  00000000  00000000  00024357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ce6b  00000000  00000000  0003feff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087b40  00000000  00000000  0005cd6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e48aa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ecc  00000000  00000000  000e48f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000047  00000000  00000000  000e67bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e8 	.word	0x200000e8
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a98 	.word	0x08003a98

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ec 	.word	0x200000ec
 8000148:	08003a98 	.word	0x08003a98

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <apInit>:

void apInit(void)
{
//    uartOpen(_DEF_UART1, 57600); // USB
//    uartOpen(_DEF_UART2, 57600); // UART
}
 800015c:	4770      	bx	lr

0800015e <apMain>:

void apMain(void)
{
 800015e:	b510      	push	{r4, lr}
    uint32_t pre_time;

    pre_time = millis();
 8000160:	f000 f80f 	bl	8000182 <millis>
 8000164:	4604      	mov	r4, r0
    while (1)
    {
        if (millis() - pre_time >= 100)
 8000166:	f000 f80c 	bl	8000182 <millis>
 800016a:	1b00      	subs	r0, r0, r4
 800016c:	2863      	cmp	r0, #99	@ 0x63
 800016e:	d9fa      	bls.n	8000166 <apMain+0x8>
        {
            pre_time = millis();
 8000170:	f000 f807 	bl	8000182 <millis>
 8000174:	4604      	mov	r4, r0
            ledToggle(_DEF_LED1);
 8000176:	2000      	movs	r0, #0
 8000178:	f000 f990 	bl	800049c <ledToggle>
 800017c:	e7f3      	b.n	8000166 <apMain+0x8>

0800017e <delay>:
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
}

void delay(uint32_t ms)
{
    HAL_Delay(ms);
 800017e:	f000 baad 	b.w	80006dc <HAL_Delay>

08000182 <millis>:
}

uint32_t millis(void)
{
    return HAL_GetTick();
 8000182:	f000 baa5 	b.w	80006d0 <HAL_GetTick>

08000186 <SystemClock_Config>:
    //    uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
    return 1;
}

void SystemClock_Config(void)
{
 8000186:	b510      	push	{r4, lr}
 8000188:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018a:	2214      	movs	r2, #20
 800018c:	2100      	movs	r1, #0
 800018e:	a80c      	add	r0, sp, #48	@ 0x30
 8000190:	f003 fc55 	bl	8003a3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000194:	2214      	movs	r2, #20
 8000196:	2100      	movs	r1, #0
 8000198:	eb0d 0002 	add.w	r0, sp, r2
 800019c:	f003 fc4f 	bl	8003a3e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001a0:	2210      	movs	r2, #16
 80001a2:	2100      	movs	r1, #0
 80001a4:	a801      	add	r0, sp, #4
 80001a6:	f003 fc4a 	bl	8003a3e <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001aa:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001b0:	2105      	movs	r1, #5
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80001b2:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001b4:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b8:	e9cd 4311 	strd	r4, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001bc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c0:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c2:	e9cd 220d 	strd	r2, r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001c6:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c8:	f001 fc08 	bl	80019dc <HAL_RCC_OscConfig>
 80001cc:	b108      	cbz	r0, 80001d2 <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001ce:	b672      	cpsid	i
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state
     */
    __disable_irq();
    while (1)
 80001d0:	e7fe      	b.n	80001d0 <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d2:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d4:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001dc:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001de:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e2:	4621      	mov	r1, r4
 80001e4:	a805      	add	r0, sp, #20
 80001e6:	f001 fdbb 	bl	8001d60 <HAL_RCC_ClockConfig>
 80001ea:	b108      	cbz	r0, 80001f0 <SystemClock_Config+0x6a>
 80001ec:	b672      	cpsid	i
    while (1)
 80001ee:	e7fe      	b.n	80001ee <SystemClock_Config+0x68>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80001f0:	2211      	movs	r2, #17
 80001f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80001f6:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001f8:	a801      	add	r0, sp, #4
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80001fa:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001fe:	f001 fe5b 	bl	8001eb8 <HAL_RCCEx_PeriphCLKConfig>
 8000202:	b108      	cbz	r0, 8000208 <SystemClock_Config+0x82>
 8000204:	b672      	cpsid	i
    while (1)
 8000206:	e7fe      	b.n	8000206 <SystemClock_Config+0x80>
}
 8000208:	b014      	add	sp, #80	@ 0x50
 800020a:	bd10      	pop	{r4, pc}

0800020c <bspInit>:
{
 800020c:	b570      	push	{r4, r5, r6, lr}
 800020e:	b088      	sub	sp, #32
    HAL_Init();
 8000210:	f000 fa40 	bl	8000694 <HAL_Init>
    SystemClock_Config();
 8000214:	f7ff ffb7 	bl	8000186 <SystemClock_Config>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000218:	4b18      	ldr	r3, [pc, #96]	@ (800027c <bspInit+0x70>)
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_OD;
 800021a:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800021e:	699a      	ldr	r2, [r3, #24]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000220:	2600      	movs	r6, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000222:	f042 0210 	orr.w	r2, r2, #16
 8000226:	619a      	str	r2, [r3, #24]
 8000228:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800022a:	4c15      	ldr	r4, [pc, #84]	@ (8000280 <bspInit+0x74>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800022c:	f002 0210 	and.w	r2, r2, #16
 8000230:	9201      	str	r2, [sp, #4]
 8000232:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000234:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000236:	4620      	mov	r0, r4
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000238:	f042 0220 	orr.w	r2, r2, #32
 800023c:	619a      	str	r2, [r3, #24]
 800023e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000240:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000242:	f002 0220 	and.w	r2, r2, #32
 8000246:	9202      	str	r2, [sp, #8]
 8000248:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800024a:	699a      	ldr	r2, [r3, #24]
 800024c:	f042 0204 	orr.w	r2, r2, #4
 8000250:	619a      	str	r2, [r3, #24]
 8000252:	699b      	ldr	r3, [r3, #24]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000254:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000256:	f003 0304 	and.w	r3, r3, #4
 800025a:	9303      	str	r3, [sp, #12]
 800025c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_OD;
 800025e:	2311      	movs	r3, #17
 8000260:	e9cd 5304 	strd	r5, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000264:	2302      	movs	r3, #2
 8000266:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000268:	f000 fbd4 	bl	8000a14 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800026c:	4632      	mov	r2, r6
 800026e:	4629      	mov	r1, r5
 8000270:	4620      	mov	r0, r4
 8000272:	f000 fca7 	bl	8000bc4 <HAL_GPIO_WritePin>
}
 8000276:	b008      	add	sp, #32
 8000278:	bd70      	pop	{r4, r5, r6, pc}
 800027a:	bf00      	nop
 800027c:	40021000 	.word	0x40021000
 8000280:	40010800 	.word	0x40010800

08000284 <Error_Handler>:
 8000284:	b672      	cpsid	i
    while (1)
 8000286:	e7fe      	b.n	8000286 <Error_Handler+0x2>

08000288 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000288:	4b0e      	ldr	r3, [pc, #56]	@ (80002c4 <HAL_MspInit+0x3c>)
{
 800028a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800028c:	699a      	ldr	r2, [r3, #24]
 800028e:	f042 0201 	orr.w	r2, r2, #1
 8000292:	619a      	str	r2, [r3, #24]
 8000294:	699a      	ldr	r2, [r3, #24]
 8000296:	f002 0201 	and.w	r2, r2, #1
 800029a:	9200      	str	r2, [sp, #0]
 800029c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800029e:	69da      	ldr	r2, [r3, #28]
 80002a0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80002a4:	61da      	str	r2, [r3, #28]
 80002a6:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002a8:	4a07      	ldr	r2, [pc, #28]	@ (80002c8 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80002aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80002ae:	9301      	str	r3, [sp, #4]
 80002b0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80002b2:	6853      	ldr	r3, [r2, #4]
 80002b4:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80002b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80002bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002be:	b002      	add	sp, #8
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	40021000 	.word	0x40021000
 80002c8:	40010000 	.word	0x40010000

080002cc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002cc:	e7fe      	b.n	80002cc <NMI_Handler>

080002ce <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002ce:	e7fe      	b.n	80002ce <HardFault_Handler>

080002d0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002d0:	e7fe      	b.n	80002d0 <MemManage_Handler>

080002d2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002d2:	e7fe      	b.n	80002d2 <BusFault_Handler>

080002d4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002d4:	e7fe      	b.n	80002d4 <UsageFault_Handler>

080002d6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002d6:	4770      	bx	lr

080002d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80002d8:	4770      	bx	lr

080002da <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80002da:	4770      	bx	lr

080002dc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002dc:	f000 b9ec 	b.w	80006b8 <HAL_IncTick>

080002e0 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80002e0:	4801      	ldr	r0, [pc, #4]	@ (80002e8 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80002e2:	f000 bd25 	b.w	8000d30 <HAL_PCD_IRQHandler>
 80002e6:	bf00      	nop
 80002e8:	20000d24 	.word	0x20000d24

080002ec <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002ec:	4770      	bx	lr
	...

080002f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80002f0:	f7ff fffc 	bl	80002ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f4:	480b      	ldr	r0, [pc, #44]	@ (8000324 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80002f6:	490c      	ldr	r1, [pc, #48]	@ (8000328 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80002f8:	4a0c      	ldr	r2, [pc, #48]	@ (800032c <LoopFillZerobss+0x16>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002fc:	e002      	b.n	8000304 <LoopCopyDataInit>

080002fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000302:	3304      	adds	r3, #4

08000304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000308:	d3f9      	bcc.n	80002fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800030a:	4a09      	ldr	r2, [pc, #36]	@ (8000330 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800030c:	4c09      	ldr	r4, [pc, #36]	@ (8000334 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800030e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000310:	e001      	b.n	8000316 <LoopFillZerobss>

08000312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000314:	3204      	adds	r2, #4

08000316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000318:	d3fb      	bcc.n	8000312 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800031a:	f003 fb99 	bl	8003a50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800031e:	f003 fb85 	bl	8003a2c <main>
  bx lr
 8000322:	4770      	bx	lr
  ldr r0, =_sdata
 8000324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000328:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 800032c:	08003b70 	.word	0x08003b70
  ldr r2, =_sbss
 8000330:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8000334:	20000ffc 	.word	0x20000ffc

08000338 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000338:	e7fe      	b.n	8000338 <ADC1_2_IRQHandler>
	...

0800033c <flashInit>:
static flash_tbl_t flash_tbl[FLASH_SECTOR_MAX];

static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);

bool flashInit(void)
{
 800033c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
    for (int i = 0; i < FLASH_SECTOR_MAX; i++)
    {
        flash_tbl[i].addr   = 0x8000000 + i * 1024;
        flash_tbl[i].length = 1024;
 8000340:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000344:	4a05      	ldr	r2, [pc, #20]	@ (800035c <flashInit+0x20>)
    for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 8000346:	4906      	ldr	r1, [pc, #24]	@ (8000360 <flashInit+0x24>)
        flash_tbl[i].addr   = 0x8000000 + i * 1024;
 8000348:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 800034a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800034e:	428b      	cmp	r3, r1
        flash_tbl[i].length = 1024;
 8000350:	8090      	strh	r0, [r2, #4]
    for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 8000352:	f102 0208 	add.w	r2, r2, #8
 8000356:	d1f7      	bne.n	8000348 <flashInit+0xc>
    }
    return true;
}
 8000358:	2001      	movs	r0, #1
 800035a:	4770      	bx	lr
 800035c:	20000104 	.word	0x20000104
 8000360:	08010000 	.word	0x08010000

08000364 <flashErase>:
    uint32_t page_error;

    int16_t start_sector_num = -1;
    uint32_t sector_count     = 0;

    for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 8000364:	2300      	movs	r3, #0
{
 8000366:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000368:	4a24      	ldr	r2, [pc, #144]	@ (80003fc <flashErase+0x98>)
    int16_t start_sector_num = -1;
 800036a:	f04f 36ff 	mov.w	r6, #4294967295
    uint32_t sector_count     = 0;
 800036e:	461c      	mov	r4, r3
 8000370:	4617      	mov	r7, r2
    uint32_t flash_end;

    sector_start = flash_tbl[sector_num].addr;
    sector_end  = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
    flash_start = addr;
    flash_end   = addr + length - 1;
 8000372:	4431      	add	r1, r6
{
 8000374:	b087      	sub	sp, #28
    flash_end   = addr + length - 1;
 8000376:	4401      	add	r1, r0
    sector_start = flash_tbl[sector_num].addr;
 8000378:	f8d2 c000 	ldr.w	ip, [r2]
    sector_end  = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 800037c:	f8b2 e004 	ldrh.w	lr, [r2, #4]
 8000380:	f10c 35ff 	add.w	r5, ip, #4294967295

    if (sector_start >= flash_start && sector_start <= flash_end)
 8000384:	4560      	cmp	r0, ip
    sector_end  = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 8000386:	4475      	add	r5, lr
    if (sector_start >= flash_start && sector_start <= flash_end)
 8000388:	d834      	bhi.n	80003f4 <flashErase+0x90>
 800038a:	458c      	cmp	ip, r1
 800038c:	bf8c      	ite	hi
 800038e:	f04f 0e00 	movhi.w	lr, #0
 8000392:	f04f 0e01 	movls.w	lr, #1
    {
        ret = true;
    }
    if (sector_end >= flash_start && sector_end <= flash_end)
 8000396:	42a8      	cmp	r0, r5
 8000398:	d805      	bhi.n	80003a6 <flashErase+0x42>
    {
        ret = true;
 800039a:	428d      	cmp	r5, r1
 800039c:	bf98      	it	ls
 800039e:	f04f 0e01 	movls.w	lr, #1
    }
    if (flash_start >= sector_start && flash_start <= sector_end)
 80003a2:	4560      	cmp	r0, ip
 80003a4:	d206      	bcs.n	80003b4 <flashErase+0x50>
    {
        ret = true;
    }
    if (flash_end >= sector_start && flash_end <= sector_end)
 80003a6:	458c      	cmp	ip, r1
 80003a8:	d801      	bhi.n	80003ae <flashErase+0x4a>
 80003aa:	428d      	cmp	r5, r1
 80003ac:	d202      	bcs.n	80003b4 <flashErase+0x50>
        if (flashInSector(i, addr, length) == true)
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d003      	beq.n	80003bc <flashErase+0x58>
            if (start_sector_num < 0)
 80003b4:	1c75      	adds	r5, r6, #1
                start_sector_num = i;
 80003b6:	bf08      	it	eq
 80003b8:	b21e      	sxtheq	r6, r3
            sector_count++;
 80003ba:	3401      	adds	r4, #1
    for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 80003bc:	3301      	adds	r3, #1
 80003be:	2b40      	cmp	r3, #64	@ 0x40
 80003c0:	f102 0208 	add.w	r2, r2, #8
 80003c4:	d1d8      	bne.n	8000378 <flashErase+0x14>
    if (sector_count > 0)
 80003c6:	b194      	cbz	r4, 80003ee <flashErase+0x8a>
        HAL_FLASH_Unlock();
 80003c8:	f000 fa26 	bl	8000818 <HAL_FLASH_Unlock>
        init.Banks       = FLASH_BANK_1;
 80003cc:	2200      	movs	r2, #0
 80003ce:	2301      	movs	r3, #1
 80003d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
        init.PageAddress = flash_tbl[start_sector_num].addr;
 80003d4:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
        status = HAL_FLASHEx_Erase(&init, &page_error);
 80003d8:	a901      	add	r1, sp, #4
 80003da:	a802      	add	r0, sp, #8
        init.NbPages     = sector_count;
 80003dc:	e9cd 3404 	strd	r3, r4, [sp, #16]
        status = HAL_FLASHEx_Erase(&init, &page_error);
 80003e0:	f000 fac4 	bl	800096c <HAL_FLASHEx_Erase>
        if (status == HAL_OK)
 80003e4:	fab0 f480 	clz	r4, r0
 80003e8:	0964      	lsrs	r4, r4, #5
        HAL_FLASH_Lock();
 80003ea:	f000 fa27 	bl	800083c <HAL_FLASH_Lock>
}
 80003ee:	4620      	mov	r0, r4
 80003f0:	b007      	add	sp, #28
 80003f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bool ret = false;
 80003f4:	f04f 0e00 	mov.w	lr, #0
 80003f8:	e7cd      	b.n	8000396 <flashErase+0x32>
 80003fa:	bf00      	nop
 80003fc:	20000104 	.word	0x20000104

08000400 <flashWrite>:
{
 8000400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (addr % 2 != 0)
 8000402:	f010 0501 	ands.w	r5, r0, #1
{
 8000406:	4606      	mov	r6, r0
 8000408:	460c      	mov	r4, r1
 800040a:	4617      	mov	r7, r2
    if (addr % 2 != 0)
 800040c:	d119      	bne.n	8000442 <flashWrite+0x42>
    HAL_FLASH_Unlock();
 800040e:	f000 fa03 	bl	8000818 <HAL_FLASH_Unlock>
    for (int i = 0; i < length; i += 2)
 8000412:	3401      	adds	r4, #1
 8000414:	42af      	cmp	r7, r5
 8000416:	d804      	bhi.n	8000422 <flashWrite+0x22>
    bool ret = true;
 8000418:	2401      	movs	r4, #1
    HAL_FLASH_Lock();
 800041a:	f000 fa0f 	bl	800083c <HAL_FLASH_Lock>
}
 800041e:	4620      	mov	r0, r4
 8000420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        data = p_data[i + 0] << 0;
 8000422:	f814 3c01 	ldrb.w	r3, [r4, #-1]
        data |= p_data[i + 1] << 8;
 8000426:	f814 2b02 	ldrb.w	r2, [r4], #2
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + i,
 800042a:	2001      	movs	r0, #1
 800042c:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8000430:	1971      	adds	r1, r6, r5
 8000432:	2300      	movs	r3, #0
 8000434:	f000 fa36 	bl	80008a4 <HAL_FLASH_Program>
        if (status != HAL_OK)
 8000438:	b908      	cbnz	r0, 800043e <flashWrite+0x3e>
    for (int i = 0; i < length; i += 2)
 800043a:	3502      	adds	r5, #2
 800043c:	e7ea      	b.n	8000414 <flashWrite+0x14>
            ret = false;
 800043e:	2400      	movs	r4, #0
 8000440:	e7eb      	b.n	800041a <flashWrite+0x1a>
        return false;
 8000442:	2400      	movs	r4, #0
 8000444:	e7eb      	b.n	800041e <flashWrite+0x1e>
	...

08000448 <ledOff.part.0>:
}
void ledOff(uint8_t ch)
{
    if (ch >= LED_MAX_CH)
        return;
    HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000448:	4b02      	ldr	r3, [pc, #8]	@ (8000454 <ledOff.part.0+0xc>)
 800044a:	79da      	ldrb	r2, [r3, #7]
 800044c:	8899      	ldrh	r1, [r3, #4]
 800044e:	6818      	ldr	r0, [r3, #0]
 8000450:	f000 bbb8 	b.w	8000bc4 <HAL_GPIO_WritePin>
 8000454:	20000004 	.word	0x20000004

08000458 <ledInit>:
{
 8000458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045a:	2210      	movs	r2, #16
 800045c:	2100      	movs	r1, #0
 800045e:	4668      	mov	r0, sp
 8000460:	f003 faed 	bl	8003a3e <memset>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800046a:	480a      	ldr	r0, [pc, #40]	@ (8000494 <ledInit+0x3c>)
 800046c:	f000 fbaa 	bl	8000bc4 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000470:	2401      	movs	r4, #1
 8000472:	2300      	movs	r3, #0
 8000474:	e9cd 4301 	strd	r4, r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000478:	2302      	movs	r3, #2
 800047a:	9303      	str	r3, [sp, #12]
        GPIO_InitStruct.Pin = led_tbl[i].pin;
 800047c:	4b06      	ldr	r3, [pc, #24]	@ (8000498 <ledInit+0x40>)
        HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 800047e:	4669      	mov	r1, sp
        GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000480:	889a      	ldrh	r2, [r3, #4]
        HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000482:	6818      	ldr	r0, [r3, #0]
        GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000484:	9200      	str	r2, [sp, #0]
        HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000486:	f000 fac5 	bl	8000a14 <HAL_GPIO_Init>
    if (ch >= LED_MAX_CH)
 800048a:	f7ff ffdd 	bl	8000448 <ledOff.part.0>
}
 800048e:	4620      	mov	r0, r4
 8000490:	b004      	add	sp, #16
 8000492:	bd10      	pop	{r4, pc}
 8000494:	40011000 	.word	0x40011000
 8000498:	20000004 	.word	0x20000004

0800049c <ledToggle>:
}
void ledToggle(uint8_t ch)
{
    if (ch >= LED_MAX_CH)
 800049c:	b920      	cbnz	r0, 80004a8 <ledToggle+0xc>
        return;
    HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 800049e:	4b03      	ldr	r3, [pc, #12]	@ (80004ac <ledToggle+0x10>)
 80004a0:	8899      	ldrh	r1, [r3, #4]
 80004a2:	6818      	ldr	r0, [r3, #0]
 80004a4:	f000 bb93 	b.w	8000bce <HAL_GPIO_TogglePin>
}
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	20000004 	.word	0x20000004

080004b0 <resetInit>:
bool resetInit(void)
{
    bool ret = true;

    // push reset btn
    if (RCC->CSR == (1 << 26))
 80004b0:	4b1e      	ldr	r3, [pc, #120]	@ (800052c <resetInit+0x7c>)
{
 80004b2:	b510      	push	{r4, lr}
    if (RCC->CSR == (1 << 26))
 80004b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004b6:	4c1e      	ldr	r4, [pc, #120]	@ (8000530 <resetInit+0x80>)
 80004b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80004bc:	d10e      	bne.n	80004dc <resetInit+0x2c>
    {
        rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1);
 80004be:	2001      	movs	r0, #1
 80004c0:	f000 f858 	bl	8000574 <rtcBackupRegRead>
 80004c4:	1c41      	adds	r1, r0, #1
 80004c6:	2001      	movs	r0, #1
 80004c8:	f000 f84c 	bl	8000564 <rtcBackupRegWrite>
        delay(500);
 80004cc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004d0:	f7ff fe55 	bl	800017e <delay>
        reset_count = rtcBackupRegRead(1);
 80004d4:	2001      	movs	r0, #1
 80004d6:	f000 f84d 	bl	8000574 <rtcBackupRegRead>
 80004da:	6020      	str	r0, [r4, #0]
    }

    rtcBackupRegWrite(1, 0);
 80004dc:	2100      	movs	r1, #0
 80004de:	2001      	movs	r0, #1
 80004e0:	f000 f840 	bl	8000564 <rtcBackupRegWrite>

    if (reset_count != 2)
 80004e4:	6823      	ldr	r3, [r4, #0]
 80004e6:	2b02      	cmp	r3, #2
 80004e8:	d01d      	beq.n	8000526 <resetInit+0x76>
    {
        void (**jump_func)() = (void (**)())(0x8005000 + 4);

        if ((uint32_t)*jump_func != 0xFFFFFFFF)
 80004ea:	4b12      	ldr	r3, [pc, #72]	@ (8000534 <resetInit+0x84>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	3301      	adds	r3, #1
 80004f0:	d019      	beq.n	8000526 <resetInit+0x76>
        {
            HAL_RCC_DeInit();
 80004f2:	f001 fa07 	bl	8001904 <HAL_RCC_DeInit>
            HAL_DeInit();
 80004f6:	f000 f899 	bl	800062c <HAL_DeInit>

            for (int i = 0; i < 8; i++)
 80004fa:	2300      	movs	r3, #0
            {

                NVIC->ICER[i] = 0xFFFFFFFF;
 80004fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000500:	4a0d      	ldr	r2, [pc, #52]	@ (8000538 <resetInit+0x88>)
 8000502:	f103 0120 	add.w	r1, r3, #32
 8000506:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800050a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800050e:	f3bf 8f6f 	isb	sy
            for (int i = 0; i < 8; i++)
 8000512:	3301      	adds	r3, #1
 8000514:	2b08      	cmp	r3, #8
 8000516:	d1f4      	bne.n	8000502 <resetInit+0x52>
                __DSB();
                __ISB();
            }
            SysTick->CTRL = 0;
 8000518:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800051c:	2200      	movs	r2, #0
 800051e:	611a      	str	r2, [r3, #16]

            (*jump_func)();
 8000520:	4b04      	ldr	r3, [pc, #16]	@ (8000534 <resetInit+0x84>)
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	4798      	blx	r3
        }
    }

    return ret;
}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000
 8000530:	20000304 	.word	0x20000304
 8000534:	08005000 	.word	0x08005000
 8000538:	e000e100 	.word	0xe000e100

0800053c <rtcInit>:
#include "rtc.h"

static RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 800053c:	b508      	push	{r3, lr}
    bool ret = true;
//    __HAL_RCC_GPIOC_CLK_ENABLE();

    hrtc.Instance          = RTC;
    hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800053e:	f04f 33ff 	mov.w	r3, #4294967295
    hrtc.Instance          = RTC;
 8000542:	4806      	ldr	r0, [pc, #24]	@ (800055c <rtcInit+0x20>)
    hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000544:	4a06      	ldr	r2, [pc, #24]	@ (8000560 <rtcInit+0x24>)
 8000546:	e9c0 2300 	strd	r2, r3, [r0]
    hrtc.Init.OutPut       = RTC_OUTPUTSOURCE_NONE;
 800054a:	2300      	movs	r3, #0
 800054c:	6083      	str	r3, [r0, #8]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800054e:	f001 fdd5 	bl	80020fc <HAL_RTC_Init>
 8000552:	b108      	cbz	r0, 8000558 <rtcInit+0x1c>
    {
        Error_Handler();
 8000554:	f7ff fe96 	bl	8000284 <Error_Handler>
    }

    return ret;
}
 8000558:	2001      	movs	r0, #1
 800055a:	bd08      	pop	{r3, pc}
 800055c:	20000308 	.word	0x20000308
 8000560:	40002800 	.word	0x40002800

08000564 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8000564:	460a      	mov	r2, r1

    HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8000566:	4601      	mov	r1, r0
 8000568:	4801      	ldr	r0, [pc, #4]	@ (8000570 <rtcBackupRegWrite+0xc>)
 800056a:	f001 be0d 	b.w	8002188 <HAL_RTCEx_BKUPWrite>
 800056e:	bf00      	nop
 8000570:	20000308 	.word	0x20000308

08000574 <rtcBackupRegRead>:
}

uint32_t rtcBackupRegRead(uint32_t index)
{
 8000574:	4601      	mov	r1, r0
    return HAL_RTCEx_BKUPRead(&hrtc, index);
 8000576:	4801      	ldr	r0, [pc, #4]	@ (800057c <rtcBackupRegRead+0x8>)
 8000578:	f001 be0e 	b.w	8002198 <HAL_RTCEx_BKUPRead>
 800057c:	20000308 	.word	0x20000308

08000580 <HAL_RTC_MspInit>:
}

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 8000580:	b507      	push	{r0, r1, r2, lr}

    if (rtcHandle->Instance == RTC)
 8000582:	4b0b      	ldr	r3, [pc, #44]	@ (80005b0 <HAL_RTC_MspInit+0x30>)
 8000584:	6802      	ldr	r2, [r0, #0]
 8000586:	429a      	cmp	r2, r3
 8000588:	d10f      	bne.n	80005aa <HAL_RTC_MspInit+0x2a>
    {
        /* USER CODE BEGIN RTC_MspInit 0 */

        /* USER CODE END RTC_MspInit 0 */
        HAL_PWR_EnableBkUpAccess();
 800058a:	f001 f9b5 	bl	80018f8 <HAL_PWR_EnableBkUpAccess>
        /* Enable BKP CLK enable for backup registers */
        __HAL_RCC_BKP_CLK_ENABLE();
 800058e:	4b09      	ldr	r3, [pc, #36]	@ (80005b4 <HAL_RTC_MspInit+0x34>)
 8000590:	69da      	ldr	r2, [r3, #28]
 8000592:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8000596:	61da      	str	r2, [r3, #28]
        /* RTC clock enable */
        __HAL_RCC_RTC_ENABLE();
 8000598:	2201      	movs	r2, #1
        __HAL_RCC_BKP_CLK_ENABLE();
 800059a:	69db      	ldr	r3, [r3, #28]
 800059c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	9b01      	ldr	r3, [sp, #4]
        __HAL_RCC_RTC_ENABLE();
 80005a4:	4b04      	ldr	r3, [pc, #16]	@ (80005b8 <HAL_RTC_MspInit+0x38>)
 80005a6:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
        /* USER CODE BEGIN RTC_MspInit 1 */

        /* USER CODE END RTC_MspInit 1 */
    }
}
 80005aa:	b003      	add	sp, #12
 80005ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80005b0:	40002800 	.word	0x40002800
 80005b4:	40021000 	.word	0x40021000
 80005b8:	42420000 	.word	0x42420000

080005bc <usbInit>:

#include "usb.h"
#include "usb_device.h"


bool usbInit(void){
 80005bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  bool ret = true;

  GPIO_InitTypeDef GPIO_InitStruct = {0};

      GPIO_InitStruct.Pin   = GPIO_PIN_12;
      GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_OD;
 80005be:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 80005c2:	2311      	movs	r3, #17
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c4:	2500      	movs	r5, #0
      GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_OD;
 80005c6:	e9cd 6300 	strd	r6, r3, [sp]
      GPIO_InitStruct.Pull  = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2302      	movs	r3, #2
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005cc:	4c0e      	ldr	r4, [pc, #56]	@ (8000608 <usbInit+0x4c>)
 80005ce:	4669      	mov	r1, sp
 80005d0:	4620      	mov	r0, r4
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	9303      	str	r3, [sp, #12]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	9502      	str	r5, [sp, #8]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d6:	f000 fa1d 	bl	8000a14 <HAL_GPIO_Init>

      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80005da:	462a      	mov	r2, r5
 80005dc:	4631      	mov	r1, r6
 80005de:	4620      	mov	r0, r4
 80005e0:	f000 faf0 	bl	8000bc4 <HAL_GPIO_WritePin>
      delay(200);
 80005e4:	20c8      	movs	r0, #200	@ 0xc8
 80005e6:	f7ff fdca 	bl	800017e <delay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	4631      	mov	r1, r6
 80005ee:	4620      	mov	r0, r4
 80005f0:	f000 fae8 	bl	8000bc4 <HAL_GPIO_WritePin>

      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f4:	4620      	mov	r0, r4
 80005f6:	4669      	mov	r1, sp
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f8:	9501      	str	r5, [sp, #4]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fa:	f000 fa0b 	bl	8000a14 <HAL_GPIO_Init>

      MX_USB_DEVICE_Init();
 80005fe:	f003 f859 	bl	80036b4 <MX_USB_DEVICE_Init>

  return ret;
}
 8000602:	2001      	movs	r0, #1
 8000604:	b004      	add	sp, #16
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	40010800 	.word	0x40010800

0800060c <hwInit>:
 */

#include "hw.h"

void hwInit(void)
{
 800060c:	b508      	push	{r3, lr}
    bspInit();
 800060e:	f7ff fdfd 	bl	800020c <bspInit>
    rtcInit();
 8000612:	f7ff ff93 	bl	800053c <rtcInit>

    resetInit();
 8000616:	f7ff ff4b 	bl	80004b0 <resetInit>
    ledInit();
 800061a:	f7ff ff1d 	bl	8000458 <ledInit>
    usbInit();
 800061e:	f7ff ffcd 	bl	80005bc <usbInit>
//    uartInit();
    flashInit();
}
 8000622:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    flashInit();
 8000626:	f7ff be89 	b.w	800033c <flashInit>

0800062a <HAL_MspDeInit>:

/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
 800062a:	4770      	bx	lr

0800062c <HAL_DeInit>:
{
 800062c:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 800062e:	f04f 32ff 	mov.w	r2, #4294967295
  __HAL_RCC_APB1_RELEASE_RESET();
 8000632:	2400      	movs	r4, #0
  __HAL_RCC_APB1_FORCE_RESET();
 8000634:	4b04      	ldr	r3, [pc, #16]	@ (8000648 <HAL_DeInit+0x1c>)
 8000636:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000638:	611c      	str	r4, [r3, #16]
  __HAL_RCC_APB2_FORCE_RESET();
 800063a:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 800063c:	60dc      	str	r4, [r3, #12]
  HAL_MspDeInit();
 800063e:	f7ff fff4 	bl	800062a <HAL_MspDeInit>
}
 8000642:	4620      	mov	r0, r4
 8000644:	bd10      	pop	{r4, pc}
 8000646:	bf00      	nop
 8000648:	40021000 	.word	0x40021000

0800064c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800064c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800064e:	4b0e      	ldr	r3, [pc, #56]	@ (8000688 <HAL_InitTick+0x3c>)
{
 8000650:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000652:	781a      	ldrb	r2, [r3, #0]
 8000654:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000658:	fbb3 f3f2 	udiv	r3, r3, r2
 800065c:	4a0b      	ldr	r2, [pc, #44]	@ (800068c <HAL_InitTick+0x40>)
 800065e:	6810      	ldr	r0, [r2, #0]
 8000660:	fbb0 f0f3 	udiv	r0, r0, r3
 8000664:	f000 f89c 	bl	80007a0 <HAL_SYSTICK_Config>
 8000668:	4604      	mov	r4, r0
 800066a:	b958      	cbnz	r0, 8000684 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066c:	2d0f      	cmp	r5, #15
 800066e:	d809      	bhi.n	8000684 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000670:	4602      	mov	r2, r0
 8000672:	4629      	mov	r1, r5
 8000674:	f04f 30ff 	mov.w	r0, #4294967295
 8000678:	f000 f854 	bl	8000724 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800067c:	4620      	mov	r0, r4
 800067e:	4b04      	ldr	r3, [pc, #16]	@ (8000690 <HAL_InitTick+0x44>)
 8000680:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000682:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000684:	2001      	movs	r0, #1
 8000686:	e7fc      	b.n	8000682 <HAL_InitTick+0x36>
 8000688:	2000000c 	.word	0x2000000c
 800068c:	20000000 	.word	0x20000000
 8000690:	20000010 	.word	0x20000010

08000694 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000694:	4a07      	ldr	r2, [pc, #28]	@ (80006b4 <HAL_Init+0x20>)
{
 8000696:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000698:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800069a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800069c:	f043 0310 	orr.w	r3, r3, #16
 80006a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a2:	f000 f82d 	bl	8000700 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80006a6:	200f      	movs	r0, #15
 80006a8:	f7ff ffd0 	bl	800064c <HAL_InitTick>
  HAL_MspInit();
 80006ac:	f7ff fdec 	bl	8000288 <HAL_MspInit>
}
 80006b0:	2000      	movs	r0, #0
 80006b2:	bd08      	pop	{r3, pc}
 80006b4:	40022000 	.word	0x40022000

080006b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006b8:	4a03      	ldr	r2, [pc, #12]	@ (80006c8 <HAL_IncTick+0x10>)
 80006ba:	4b04      	ldr	r3, [pc, #16]	@ (80006cc <HAL_IncTick+0x14>)
 80006bc:	6811      	ldr	r1, [r2, #0]
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	440b      	add	r3, r1
 80006c2:	6013      	str	r3, [r2, #0]
}
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	2000031c 	.word	0x2000031c
 80006cc:	2000000c 	.word	0x2000000c

080006d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006d0:	4b01      	ldr	r3, [pc, #4]	@ (80006d8 <HAL_GetTick+0x8>)
 80006d2:	6818      	ldr	r0, [r3, #0]
}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	2000031c 	.word	0x2000031c

080006dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006dc:	b538      	push	{r3, r4, r5, lr}
 80006de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80006e0:	f7ff fff6 	bl	80006d0 <HAL_GetTick>
 80006e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80006e8:	bf1e      	ittt	ne
 80006ea:	4b04      	ldrne	r3, [pc, #16]	@ (80006fc <HAL_Delay+0x20>)
 80006ec:	781b      	ldrbne	r3, [r3, #0]
 80006ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006f0:	f7ff ffee 	bl	80006d0 <HAL_GetTick>
 80006f4:	1b43      	subs	r3, r0, r5
 80006f6:	42a3      	cmp	r3, r4
 80006f8:	d3fa      	bcc.n	80006f0 <HAL_Delay+0x14>
  {
  }
}
 80006fa:	bd38      	pop	{r3, r4, r5, pc}
 80006fc:	2000000c 	.word	0x2000000c

08000700 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000700:	4907      	ldr	r1, [pc, #28]	@ (8000720 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000702:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000704:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000706:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800070a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800070e:	0412      	lsls	r2, r2, #16
 8000710:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000714:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000718:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800071c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800071e:	4770      	bx	lr
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000724:	4b15      	ldr	r3, [pc, #84]	@ (800077c <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	68dc      	ldr	r4, [r3, #12]
 800072a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800072e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000732:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000734:	2b04      	cmp	r3, #4
 8000736:	bf28      	it	cs
 8000738:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000740:	bf94      	ite	ls
 8000742:	2400      	movls	r4, #0
 8000744:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000746:	fa05 f303 	lsl.w	r3, r5, r3
 800074a:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800074e:	40a5      	lsls	r5, r4
 8000750:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8000756:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075c:	bfac      	ite	ge
 800075e:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000762:	4a07      	ldrlt	r2, [pc, #28]	@ (8000780 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000764:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000768:	b2db      	uxtb	r3, r3
 800076a:	bfab      	itete	ge
 800076c:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000770:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000774:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000778:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800077a:	bd30      	pop	{r4, r5, pc}
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	e000ed14 	.word	0xe000ed14

08000784 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000784:	2800      	cmp	r0, #0
 8000786:	db07      	blt.n	8000798 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000788:	2301      	movs	r3, #1
 800078a:	0941      	lsrs	r1, r0, #5
 800078c:	4a03      	ldr	r2, [pc, #12]	@ (800079c <HAL_NVIC_EnableIRQ+0x18>)
 800078e:	f000 001f 	and.w	r0, r0, #31
 8000792:	4083      	lsls	r3, r0
 8000794:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000e100 	.word	0xe000e100

080007a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a0:	3801      	subs	r0, #1
 80007a2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007a6:	d20b      	bcs.n	80007c0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ac:	21f0      	movs	r1, #240	@ 0xf0
 80007ae:	4a05      	ldr	r2, [pc, #20]	@ (80007c4 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007b0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b2:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007ba:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007bc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007be:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007c0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007c2:	4770      	bx	lr
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80007c8:	4a11      	ldr	r2, [pc, #68]	@ (8000810 <FLASH_SetErrorCode+0x48>)
 80007ca:	68d3      	ldr	r3, [r2, #12]
 80007cc:	f013 0310 	ands.w	r3, r3, #16
 80007d0:	d005      	beq.n	80007de <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80007d2:	4910      	ldr	r1, [pc, #64]	@ (8000814 <FLASH_SetErrorCode+0x4c>)
 80007d4:	69cb      	ldr	r3, [r1, #28]
 80007d6:	f043 0302 	orr.w	r3, r3, #2
 80007da:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80007dc:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80007de:	68d2      	ldr	r2, [r2, #12]
 80007e0:	0750      	lsls	r0, r2, #29
 80007e2:	d506      	bpl.n	80007f2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80007e4:	490b      	ldr	r1, [pc, #44]	@ (8000814 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80007e6:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80007ea:	69ca      	ldr	r2, [r1, #28]
 80007ec:	f042 0201 	orr.w	r2, r2, #1
 80007f0:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80007f2:	4a07      	ldr	r2, [pc, #28]	@ (8000810 <FLASH_SetErrorCode+0x48>)
 80007f4:	69d1      	ldr	r1, [r2, #28]
 80007f6:	07c9      	lsls	r1, r1, #31
 80007f8:	d508      	bpl.n	800080c <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80007fa:	4806      	ldr	r0, [pc, #24]	@ (8000814 <FLASH_SetErrorCode+0x4c>)
 80007fc:	69c1      	ldr	r1, [r0, #28]
 80007fe:	f041 0104 	orr.w	r1, r1, #4
 8000802:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000804:	69d1      	ldr	r1, [r2, #28]
 8000806:	f021 0101 	bic.w	r1, r1, #1
 800080a:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800080c:	60d3      	str	r3, [r2, #12]
}  
 800080e:	4770      	bx	lr
 8000810:	40022000 	.word	0x40022000
 8000814:	20000320 	.word	0x20000320

08000818 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <HAL_FLASH_Unlock+0x1c>)
 800081a:	6918      	ldr	r0, [r3, #16]
 800081c:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 8000820:	d007      	beq.n	8000832 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000822:	4a05      	ldr	r2, [pc, #20]	@ (8000838 <HAL_FLASH_Unlock+0x20>)
 8000824:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000826:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 800082a:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800082c:	6918      	ldr	r0, [r3, #16]
 800082e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8000832:	4770      	bx	lr
 8000834:	40022000 	.word	0x40022000
 8000838:	45670123 	.word	0x45670123

0800083c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800083c:	4a03      	ldr	r2, [pc, #12]	@ (800084c <HAL_FLASH_Lock+0x10>)
}
 800083e:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000840:	6913      	ldr	r3, [r2, #16]
 8000842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000846:	6113      	str	r3, [r2, #16]
}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40022000 	.word	0x40022000

08000850 <FLASH_WaitForLastOperation>:
{
 8000850:	b570      	push	{r4, r5, r6, lr}
 8000852:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8000854:	f7ff ff3c 	bl	80006d0 <HAL_GetTick>
 8000858:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800085a:	4c11      	ldr	r4, [pc, #68]	@ (80008a0 <FLASH_WaitForLastOperation+0x50>)
 800085c:	68e3      	ldr	r3, [r4, #12]
 800085e:	07d8      	lsls	r0, r3, #31
 8000860:	d412      	bmi.n	8000888 <FLASH_WaitForLastOperation+0x38>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000862:	68e3      	ldr	r3, [r4, #12]
 8000864:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000866:	bf44      	itt	mi
 8000868:	2320      	movmi	r3, #32
 800086a:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800086c:	68e3      	ldr	r3, [r4, #12]
 800086e:	06da      	lsls	r2, r3, #27
 8000870:	d406      	bmi.n	8000880 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000872:	69e3      	ldr	r3, [r4, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000874:	07db      	lsls	r3, r3, #31
 8000876:	d403      	bmi.n	8000880 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000878:	68e0      	ldr	r0, [r4, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800087a:	f010 0004 	ands.w	r0, r0, #4
 800087e:	d007      	beq.n	8000890 <FLASH_WaitForLastOperation+0x40>
    FLASH_SetErrorCode();
 8000880:	f7ff ffa2 	bl	80007c8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000884:	2001      	movs	r0, #1
 8000886:	e003      	b.n	8000890 <FLASH_WaitForLastOperation+0x40>
    if (Timeout != HAL_MAX_DELAY)
 8000888:	1c6b      	adds	r3, r5, #1
 800088a:	d0e7      	beq.n	800085c <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800088c:	b90d      	cbnz	r5, 8000892 <FLASH_WaitForLastOperation+0x42>
        return HAL_TIMEOUT;
 800088e:	2003      	movs	r0, #3
}
 8000890:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000892:	f7ff ff1d 	bl	80006d0 <HAL_GetTick>
 8000896:	1b80      	subs	r0, r0, r6
 8000898:	42a8      	cmp	r0, r5
 800089a:	d9df      	bls.n	800085c <FLASH_WaitForLastOperation+0xc>
 800089c:	e7f7      	b.n	800088e <FLASH_WaitForLastOperation+0x3e>
 800089e:	bf00      	nop
 80008a0:	40022000 	.word	0x40022000

080008a4 <HAL_FLASH_Program>:
{
 80008a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 80008a8:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8000940 <HAL_FLASH_Program+0x9c>
{
 80008ac:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 80008ae:	f89a 3018 	ldrb.w	r3, [sl, #24]
{
 80008b2:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 80008b4:	2b01      	cmp	r3, #1
{
 80008b6:	4688      	mov	r8, r1
 80008b8:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 80008ba:	d03f      	beq.n	800093c <HAL_FLASH_Program+0x98>
 80008bc:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80008be:	f24c 3050 	movw	r0, #50000	@ 0xc350
  __HAL_LOCK(&pFlash);
 80008c2:	f88a 3018 	strb.w	r3, [sl, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80008c6:	f7ff ffc3 	bl	8000850 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80008ca:	bb90      	cbnz	r0, 8000932 <HAL_FLASH_Program+0x8e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80008cc:	2d01      	cmp	r5, #1
 80008ce:	d003      	beq.n	80008d8 <HAL_FLASH_Program+0x34>
      nbiterations = 2U;
 80008d0:	2d02      	cmp	r5, #2
 80008d2:	bf14      	ite	ne
 80008d4:	2504      	movne	r5, #4
 80008d6:	2502      	moveq	r5, #2
      nbiterations = 4U;
 80008d8:	2600      	movs	r6, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80008da:	4633      	mov	r3, r6
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80008dc:	f8df b064 	ldr.w	fp, [pc, #100]	@ 8000944 <HAL_FLASH_Program+0xa0>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80008e0:	0134      	lsls	r4, r6, #4
 80008e2:	f1c4 0120 	rsb	r1, r4, #32
 80008e6:	f1a4 0220 	sub.w	r2, r4, #32
 80008ea:	fa07 f101 	lsl.w	r1, r7, r1
 80008ee:	fa29 f404 	lsr.w	r4, r9, r4
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80008f2:	f8ca 301c 	str.w	r3, [sl, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80008f6:	430c      	orrs	r4, r1
 80008f8:	fa27 f202 	lsr.w	r2, r7, r2
 80008fc:	4314      	orrs	r4, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80008fe:	f8db 2010 	ldr.w	r2, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000902:	b2a4      	uxth	r4, r4
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000904:	f042 0201 	orr.w	r2, r2, #1
 8000908:	f8cb 2010 	str.w	r2, [fp, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800090c:	f24c 3050 	movw	r0, #50000	@ 0xc350
  *(__IO uint16_t*)Address = Data;
 8000910:	f828 4016 	strh.w	r4, [r8, r6, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000914:	f7ff ff9c 	bl	8000850 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000918:	f8db 2010 	ldr.w	r2, [fp, #16]
 800091c:	f022 0201 	bic.w	r2, r2, #1
 8000920:	f8cb 2010 	str.w	r2, [fp, #16]
      if (status != HAL_OK)
 8000924:	b928      	cbnz	r0, 8000932 <HAL_FLASH_Program+0x8e>
    for (index = 0U; index < nbiterations; index++)
 8000926:	3601      	adds	r6, #1
 8000928:	b2f2      	uxtb	r2, r6
 800092a:	4295      	cmp	r5, r2
 800092c:	f04f 0300 	mov.w	r3, #0
 8000930:	d8d6      	bhi.n	80008e0 <HAL_FLASH_Program+0x3c>
  __HAL_UNLOCK(&pFlash);
 8000932:	2300      	movs	r3, #0
 8000934:	f88a 3018 	strb.w	r3, [sl, #24]
}
 8000938:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 800093c:	2002      	movs	r0, #2
 800093e:	e7fb      	b.n	8000938 <HAL_FLASH_Program+0x94>
 8000940:	20000320 	.word	0x20000320
 8000944:	40022000 	.word	0x40022000

08000948 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000948:	2200      	movs	r2, #0
 800094a:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <FLASH_PageErase+0x1c>)
 800094c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800094e:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <FLASH_PageErase+0x20>)
 8000950:	691a      	ldr	r2, [r3, #16]
 8000952:	f042 0202 	orr.w	r2, r2, #2
 8000956:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000958:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800095a:	691a      	ldr	r2, [r3, #16]
 800095c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000960:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000962:	4770      	bx	lr
 8000964:	20000320 	.word	0x20000320
 8000968:	40022000 	.word	0x40022000

0800096c <HAL_FLASHEx_Erase>:
{
 800096c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8000970:	4f26      	ldr	r7, [pc, #152]	@ (8000a0c <HAL_FLASHEx_Erase+0xa0>)
{
 8000972:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8000974:	7e3b      	ldrb	r3, [r7, #24]
{
 8000976:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8000978:	2b01      	cmp	r3, #1
 800097a:	d044      	beq.n	8000a06 <HAL_FLASHEx_Erase+0x9a>
 800097c:	2401      	movs	r4, #1
 800097e:	763c      	strb	r4, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000980:	6803      	ldr	r3, [r0, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000982:	f24c 3050 	movw	r0, #50000	@ 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000986:	2b02      	cmp	r3, #2
 8000988:	d11a      	bne.n	80009c0 <HAL_FLASHEx_Erase+0x54>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800098a:	f7ff ff61 	bl	8000850 <FLASH_WaitForLastOperation>
 800098e:	b120      	cbz	r0, 800099a <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000990:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8000992:	2300      	movs	r3, #0
 8000994:	763b      	strb	r3, [r7, #24]
}
 8000996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800099a:	4c1d      	ldr	r4, [pc, #116]	@ (8000a10 <HAL_FLASHEx_Erase+0xa4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800099c:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800099e:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80009a0:	f24c 3050 	movw	r0, #50000	@ 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80009a4:	f043 0304 	orr.w	r3, r3, #4
 80009a8:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80009aa:	6923      	ldr	r3, [r4, #16]
 80009ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009b0:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80009b2:	f7ff ff4d 	bl	8000850 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80009b6:	6923      	ldr	r3, [r4, #16]
 80009b8:	f023 0304 	bic.w	r3, r3, #4
 80009bc:	6123      	str	r3, [r4, #16]
 80009be:	e7e8      	b.n	8000992 <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80009c0:	f7ff ff46 	bl	8000850 <FLASH_WaitForLastOperation>
 80009c4:	2800      	cmp	r0, #0
 80009c6:	d1e3      	bne.n	8000990 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 80009c8:	f04f 33ff 	mov.w	r3, #4294967295
 80009cc:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 80009d0:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 80009d2:	68ae      	ldr	r6, [r5, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80009d4:	4c0e      	ldr	r4, [pc, #56]	@ (8000a10 <HAL_FLASHEx_Erase+0xa4>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80009d6:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80009da:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 80009de:	42b3      	cmp	r3, r6
 80009e0:	d9d7      	bls.n	8000992 <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 80009e2:	4630      	mov	r0, r6
 80009e4:	f7ff ffb0 	bl	8000948 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80009e8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80009ec:	f7ff ff30 	bl	8000850 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80009f0:	6923      	ldr	r3, [r4, #16]
 80009f2:	f023 0302 	bic.w	r3, r3, #2
 80009f6:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 80009f8:	b110      	cbz	r0, 8000a00 <HAL_FLASHEx_Erase+0x94>
            *PageError = address;
 80009fa:	f8c8 6000 	str.w	r6, [r8]
            break;
 80009fe:	e7c8      	b.n	8000992 <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8000a00:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8000a04:	e7e7      	b.n	80009d6 <HAL_FLASHEx_Erase+0x6a>
  __HAL_LOCK(&pFlash);
 8000a06:	2002      	movs	r0, #2
 8000a08:	e7c5      	b.n	8000996 <HAL_FLASHEx_Erase+0x2a>
 8000a0a:	bf00      	nop
 8000a0c:	20000320 	.word	0x20000320
 8000a10:	40022000 	.word	0x40022000

08000a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a18:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000a1a:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a1c:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8000ba8 <HAL_GPIO_Init+0x194>
 8000a20:	4b62      	ldr	r3, [pc, #392]	@ (8000bac <HAL_GPIO_Init+0x198>)
      switch (GPIO_Init->Mode)
 8000a22:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 8000bb0 <HAL_GPIO_Init+0x19c>
 8000a26:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8000bb4 <HAL_GPIO_Init+0x1a0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a2a:	680a      	ldr	r2, [r1, #0]
 8000a2c:	fa32 f506 	lsrs.w	r5, r2, r6
 8000a30:	d102      	bne.n	8000a38 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8000a32:	b003      	add	sp, #12
 8000a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000a38:	2701      	movs	r7, #1
 8000a3a:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a3c:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 8000a40:	ea37 0202 	bics.w	r2, r7, r2
 8000a44:	d17a      	bne.n	8000b3c <HAL_GPIO_Init+0x128>
      switch (GPIO_Init->Mode)
 8000a46:	684a      	ldr	r2, [r1, #4]
 8000a48:	2a03      	cmp	r2, #3
 8000a4a:	d807      	bhi.n	8000a5c <HAL_GPIO_Init+0x48>
 8000a4c:	3a01      	subs	r2, #1
 8000a4e:	2a02      	cmp	r2, #2
 8000a50:	f200 8083 	bhi.w	8000b5a <HAL_GPIO_Init+0x146>
 8000a54:	e8df f002 	tbb	[pc, r2]
 8000a58:	9792      	.short	0x9792
 8000a5a:	9d          	.byte	0x9d
 8000a5b:	00          	.byte	0x00
 8000a5c:	2a12      	cmp	r2, #18
 8000a5e:	f000 8095 	beq.w	8000b8c <HAL_GPIO_Init+0x178>
 8000a62:	d86d      	bhi.n	8000b40 <HAL_GPIO_Init+0x12c>
 8000a64:	2a11      	cmp	r2, #17
 8000a66:	f000 808b 	beq.w	8000b80 <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a6a:	2dff      	cmp	r5, #255	@ 0xff
 8000a6c:	bf98      	it	ls
 8000a6e:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a70:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a74:	bf88      	it	hi
 8000a76:	f100 0904 	addhi.w	r9, r0, #4
 8000a7a:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a7e:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a82:	bf88      	it	hi
 8000a84:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a86:	fa0b fa02 	lsl.w	sl, fp, r2
 8000a8a:	ea27 070a 	bic.w	r7, r7, sl
 8000a8e:	fa04 f202 	lsl.w	r2, r4, r2
 8000a92:	4317      	orrs	r7, r2
 8000a94:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a98:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8000a9c:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 8000aa0:	d04c      	beq.n	8000b3c <HAL_GPIO_Init+0x128>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000aa2:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8000aa6:	f026 0703 	bic.w	r7, r6, #3
 8000aaa:	f042 0201 	orr.w	r2, r2, #1
 8000aae:	f8cc 2018 	str.w	r2, [ip, #24]
 8000ab2:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8000ab6:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8000aba:	f002 0201 	and.w	r2, r2, #1
 8000abe:	9201      	str	r2, [sp, #4]
 8000ac0:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ac4:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ac8:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000aca:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000ace:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ad0:	fa0b fb0a 	lsl.w	fp, fp, sl
 8000ad4:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ad8:	4a37      	ldr	r2, [pc, #220]	@ (8000bb8 <HAL_GPIO_Init+0x1a4>)
 8000ada:	4290      	cmp	r0, r2
 8000adc:	d05d      	beq.n	8000b9a <HAL_GPIO_Init+0x186>
 8000ade:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000ae2:	4290      	cmp	r0, r2
 8000ae4:	d05b      	beq.n	8000b9e <HAL_GPIO_Init+0x18a>
 8000ae6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000aea:	4290      	cmp	r0, r2
 8000aec:	d059      	beq.n	8000ba2 <HAL_GPIO_Init+0x18e>
 8000aee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000af2:	4290      	cmp	r0, r2
 8000af4:	bf14      	ite	ne
 8000af6:	2204      	movne	r2, #4
 8000af8:	2203      	moveq	r2, #3
 8000afa:	fa02 f20a 	lsl.w	r2, r2, sl
 8000afe:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8000b02:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b04:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b06:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b0a:	bf14      	ite	ne
 8000b0c:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b0e:	43aa      	biceq	r2, r5
 8000b10:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b12:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b14:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b18:	bf14      	ite	ne
 8000b1a:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b1c:	43aa      	biceq	r2, r5
 8000b1e:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8000b20:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b22:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000b26:	bf14      	ite	ne
 8000b28:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b2a:	43aa      	biceq	r2, r5
 8000b2c:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8000b2e:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b30:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000b34:	bf14      	ite	ne
 8000b36:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b38:	43aa      	biceq	r2, r5
 8000b3a:	601a      	str	r2, [r3, #0]
	position++;
 8000b3c:	3601      	adds	r6, #1
 8000b3e:	e774      	b.n	8000a2a <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8000b40:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8000bbc <HAL_GPIO_Init+0x1a8>
 8000b44:	454a      	cmp	r2, r9
 8000b46:	d008      	beq.n	8000b5a <HAL_GPIO_Init+0x146>
 8000b48:	d810      	bhi.n	8000b6c <HAL_GPIO_Init+0x158>
 8000b4a:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8000b4e:	454a      	cmp	r2, r9
 8000b50:	d003      	beq.n	8000b5a <HAL_GPIO_Init+0x146>
 8000b52:	4572      	cmp	r2, lr
 8000b54:	d001      	beq.n	8000b5a <HAL_GPIO_Init+0x146>
 8000b56:	4542      	cmp	r2, r8
 8000b58:	d187      	bne.n	8000a6a <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b5a:	688a      	ldr	r2, [r1, #8]
 8000b5c:	b1da      	cbz	r2, 8000b96 <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b5e:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b60:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 8000b64:	bf0c      	ite	eq
 8000b66:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 8000b68:	6147      	strne	r7, [r0, #20]
 8000b6a:	e77e      	b.n	8000a6a <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8000b6c:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 8000bc0 <HAL_GPIO_Init+0x1ac>
 8000b70:	454a      	cmp	r2, r9
 8000b72:	d0f2      	beq.n	8000b5a <HAL_GPIO_Init+0x146>
 8000b74:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8000b78:	454a      	cmp	r2, r9
 8000b7a:	e7ed      	b.n	8000b58 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b7c:	68cc      	ldr	r4, [r1, #12]
          break;
 8000b7e:	e774      	b.n	8000a6a <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b80:	68cc      	ldr	r4, [r1, #12]
 8000b82:	3404      	adds	r4, #4
          break;
 8000b84:	e771      	b.n	8000a6a <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b86:	68cc      	ldr	r4, [r1, #12]
 8000b88:	3408      	adds	r4, #8
          break;
 8000b8a:	e76e      	b.n	8000a6a <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b8c:	68cc      	ldr	r4, [r1, #12]
 8000b8e:	340c      	adds	r4, #12
          break;
 8000b90:	e76b      	b.n	8000a6a <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8000b92:	2400      	movs	r4, #0
 8000b94:	e769      	b.n	8000a6a <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b96:	2404      	movs	r4, #4
 8000b98:	e767      	b.n	8000a6a <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	e7ad      	b.n	8000afa <HAL_GPIO_Init+0xe6>
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	e7ab      	b.n	8000afa <HAL_GPIO_Init+0xe6>
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	e7a9      	b.n	8000afa <HAL_GPIO_Init+0xe6>
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40010400 	.word	0x40010400
 8000bb0:	10210000 	.word	0x10210000
 8000bb4:	10110000 	.word	0x10110000
 8000bb8:	40010800 	.word	0x40010800
 8000bbc:	10220000 	.word	0x10220000
 8000bc0:	10310000 	.word	0x10310000

08000bc4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bc4:	b10a      	cbz	r2, 8000bca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bc6:	6101      	str	r1, [r0, #16]
  }
}
 8000bc8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bca:	0409      	lsls	r1, r1, #16
 8000bcc:	e7fb      	b.n	8000bc6 <HAL_GPIO_WritePin+0x2>

08000bce <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000bce:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bd0:	ea01 0203 	and.w	r2, r1, r3
 8000bd4:	ea21 0103 	bic.w	r1, r1, r3
 8000bd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000bdc:	6101      	str	r1, [r0, #16]
}
 8000bde:	4770      	bx	lr

08000be0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000be2:	4604      	mov	r4, r0
 8000be4:	b1e0      	cbz	r0, 8000c20 <HAL_PCD_Init+0x40>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000be6:	f890 3291 	ldrb.w	r3, [r0, #657]	@ 0x291
 8000bea:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000bee:	b91b      	cbnz	r3, 8000bf8 <HAL_PCD_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000bf0:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000bf4:	f002 fe2c 	bl	8003850 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8000bfe:	2300      	movs	r3, #0

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c00:	4625      	mov	r5, r4
  hpcd->Init.dma_enable = 0U;
 8000c02:	7163      	strb	r3, [r4, #5]
  __HAL_PCD_DISABLE(hpcd);
 8000c04:	f855 0b04 	ldr.w	r0, [r5], #4
 8000c08:	f001 fade 	bl	80021c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c0c:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000c10:	6820      	ldr	r0, [r4, #0]
 8000c12:	f001 fac9 	bl	80021a8 <USB_CoreInit>
 8000c16:	4601      	mov	r1, r0
 8000c18:	b128      	cbz	r0, 8000c26 <HAL_PCD_Init+0x46>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 8000c20:	2501      	movs	r5, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8000c22:	4628      	mov	r0, r5
 8000c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000c26:	6820      	ldr	r0, [r4, #0]
 8000c28:	f001 fad8 	bl	80021dc <USB_SetCurrentMode>
 8000c2c:	2800      	cmp	r0, #0
 8000c2e:	d1f4      	bne.n	8000c1a <HAL_PCD_Init+0x3a>
 8000c30:	4602      	mov	r2, r0
    hpcd->IN_ep[i].is_in = 1U;
 8000c32:	2701      	movs	r7, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c34:	7926      	ldrb	r6, [r4, #4]
 8000c36:	f104 0310 	add.w	r3, r4, #16
 8000c3a:	b2c1      	uxtb	r1, r0
 8000c3c:	428e      	cmp	r6, r1
 8000c3e:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8000c42:	d818      	bhi.n	8000c76 <HAL_PCD_Init+0x96>
 8000c44:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8000c46:	460a      	mov	r2, r1
 8000c48:	f504 73a8 	add.w	r3, r4, #336	@ 0x150
 8000c4c:	b2c8      	uxtb	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c4e:	4286      	cmp	r6, r0
 8000c50:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8000c54:	d81b      	bhi.n	8000c8e <HAL_PCD_Init+0xae>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c56:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8000c5a:	6820      	ldr	r0, [r4, #0]
 8000c5c:	f001 fac0 	bl	80021e0 <USB_DevInit>
 8000c60:	4605      	mov	r5, r0
 8000c62:	2800      	cmp	r0, #0
 8000c64:	d1d9      	bne.n	8000c1a <HAL_PCD_Init+0x3a>
  hpcd->State = HAL_PCD_STATE_READY;
 8000c66:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000c68:	7360      	strb	r0, [r4, #13]
  (void)USB_DevDisconnect(hpcd->Instance);
 8000c6a:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8000c6c:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8000c70:	f001 fc99 	bl	80025a6 <USB_DevDisconnect>
  return HAL_OK;
 8000c74:	e7d5      	b.n	8000c22 <HAL_PCD_Init+0x42>
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c76:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->IN_ep[i].is_in = 1U;
 8000c7a:	f803 7c27 	strb.w	r7, [r3, #-39]
    hpcd->IN_ep[i].num = i;
 8000c7e:	f803 1c28 	strb.w	r1, [r3, #-40]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c82:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c86:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c8a:	3001      	adds	r0, #1
 8000c8c:	e7d5      	b.n	8000c3a <HAL_PCD_Init+0x5a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c8e:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->OUT_ep[i].is_in = 0U;
 8000c92:	f803 2c27 	strb.w	r2, [r3, #-39]
    hpcd->OUT_ep[i].num = i;
 8000c96:	f803 0c28 	strb.w	r0, [r3, #-40]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c9a:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000c9e:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ca2:	3101      	adds	r1, #1
 8000ca4:	e7d2      	b.n	8000c4c <HAL_PCD_Init+0x6c>

08000ca6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000ca6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8000ca8:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
{
 8000cac:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d010      	beq.n	8000cd4 <HAL_PCD_Start+0x2e>
 8000cb2:	2501      	movs	r5, #1
 8000cb4:	f880 5290 	strb.w	r5, [r0, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8000cb8:	6800      	ldr	r0, [r0, #0]
 8000cba:	f001 fa7c 	bl	80021b6 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000cbe:	4629      	mov	r1, r5
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	f002 feb2 	bl	8003a2a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000cc6:	6820      	ldr	r0, [r4, #0]
 8000cc8:	f001 fc6b 	bl	80025a2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 8000cd2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000cd4:	2002      	movs	r0, #2
 8000cd6:	e7fc      	b.n	8000cd2 <HAL_PCD_Start+0x2c>

08000cd8 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8000cd8:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000cda:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
{
 8000cde:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d010      	beq.n	8000d06 <HAL_PCD_Stop+0x2e>
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	f880 3290 	strb.w	r3, [r0, #656]	@ 0x290
  __HAL_PCD_DISABLE(hpcd);
 8000cea:	6800      	ldr	r0, [r0, #0]
 8000cec:	f001 fa6c 	bl	80021c8 <USB_DisableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 0U);
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	f002 fe99 	bl	8003a2a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevDisconnect(hpcd->Instance);
 8000cf8:	6820      	ldr	r0, [r4, #0]
 8000cfa:	f001 fc54 	bl	80025a6 <USB_DevDisconnect>

#if defined (USB_OTG_FS)
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 8000d04:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000d06:	2002      	movs	r0, #2
 8000d08:	e7fc      	b.n	8000d04 <HAL_PCD_Stop+0x2c>

08000d0a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000d0a:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000d0c:	f890 2290 	ldrb.w	r2, [r0, #656]	@ 0x290
{
 8000d10:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000d12:	2a01      	cmp	r2, #1
 8000d14:	d00a      	beq.n	8000d2c <HAL_PCD_SetAddress+0x22>
 8000d16:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8000d18:	7341      	strb	r1, [r0, #13]
  __HAL_LOCK(hpcd);
 8000d1a:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000d1e:	6800      	ldr	r0, [r0, #0]
 8000d20:	f001 fc39 	bl	8002596 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000d24:	2000      	movs	r0, #0
 8000d26:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 8000d2a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	e7fc      	b.n	8000d2a <HAL_PCD_SetAddress+0x20>

08000d30 <HAL_PCD_IRQHandler>:
{
 8000d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d34:	4604      	mov	r4, r0
 8000d36:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000d38:	6800      	ldr	r0, [r0, #0]
 8000d3a:	f001 fc36 	bl	80025aa <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000d3e:	f410 4500 	ands.w	r5, r0, #32768	@ 0x8000
 8000d42:	f000 844f 	beq.w	80015e4 <HAL_PCD_IRQHandler+0x8b4>
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);

        if (ep->type == EP_TYPE_ISOC)
 8000d46:	2528      	movs	r5, #40	@ 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000d48:	4ec6      	ldr	r6, [pc, #792]	@ (8001064 <HAL_PCD_IRQHandler+0x334>)
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000d4a:	6820      	ldr	r0, [r4, #0]
 8000d4c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8000d50:	041f      	lsls	r7, r3, #16
 8000d52:	d402      	bmi.n	8000d5a <HAL_PCD_IRQHandler+0x2a>
}
 8000d54:	b005      	add	sp, #20
 8000d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8000d5a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
    if (epindex == 0U)
 8000d5e:	f013 070f 	ands.w	r7, r3, #15
    wIstr = hpcd->Instance->ISTR;
 8000d62:	b299      	uxth	r1, r3
    if (epindex == 0U)
 8000d64:	f040 80c0 	bne.w	8000ee8 <HAL_PCD_IRQHandler+0x1b8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000d68:	f011 0110 	ands.w	r1, r1, #16
 8000d6c:	d126      	bne.n	8000dbc <HAL_PCD_IRQHandler+0x8c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000d6e:	8803      	ldrh	r3, [r0, #0]
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	4033      	ands	r3, r6
 8000d74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d78:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000d7a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8000d7e:	7c22      	ldrb	r2, [r4, #16]
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000d86:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000d8a:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
        ep->xfer_buff += ep->xfer_count;
 8000d8e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000d90:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8000d94:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000d96:	62e3      	str	r3, [r4, #44]	@ 0x2c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000d98:	4620      	mov	r0, r4
        ep->xfer_buff += ep->xfer_count;
 8000d9a:	6262      	str	r2, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000d9c:	f002 fd87 	bl	80038ae <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000da0:	7b63      	ldrb	r3, [r4, #13]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d0d1      	beq.n	8000d4a <HAL_PCD_IRQHandler+0x1a>
 8000da6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000da8:	6821      	ldr	r1, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000daa:	2a00      	cmp	r2, #0
 8000dac:	d1cd      	bne.n	8000d4a <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000dae:	7b63      	ldrb	r3, [r4, #13]
 8000db0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000db4:	f8a1 304c 	strh.w	r3, [r1, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8000db8:	7362      	strb	r2, [r4, #13]
 8000dba:	e7c6      	b.n	8000d4a <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000dbc:	8807      	ldrh	r7, [r0, #0]
 8000dbe:	b2bb      	uxth	r3, r7
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000dc0:	f417 6700 	ands.w	r7, r7, #2048	@ 0x800
 8000dc4:	d021      	beq.n	8000e0a <HAL_PCD_IRQHandler+0xda>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000dc6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8000dca:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000dd4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000dd8:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000ddc:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8000de0:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000de4:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000de8:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 8000dec:	f001 fe28 	bl	8002a40 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000df0:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000df2:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000df4:	8813      	ldrh	r3, [r2, #0]
 8000df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000dfa:	051b      	lsls	r3, r3, #20
 8000dfc:	0d1b      	lsrs	r3, r3, #20
 8000dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e02:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000e04:	f002 fd44 	bl	8003890 <HAL_PCD_SetupStageCallback>
 8000e08:	e79f      	b.n	8000d4a <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000e0a:	0419      	lsls	r1, r3, #16
 8000e0c:	d59d      	bpl.n	8000d4a <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000e0e:	8803      	ldrh	r3, [r0, #0]
 8000e10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000e14:	051b      	lsls	r3, r3, #20
 8000e16:	0d1b      	lsrs	r3, r3, #20
 8000e18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e1c:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000e1e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8000e22:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000e2c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000e30:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 8000e34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e38:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000e3c:	b18b      	cbz	r3, 8000e62 <HAL_PCD_IRQHandler+0x132>
 8000e3e:	f8d4 1164 	ldr.w	r1, [r4, #356]	@ 0x164
 8000e42:	b171      	cbz	r1, 8000e62 <HAL_PCD_IRQHandler+0x132>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000e44:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8000e48:	f001 fdfa 	bl	8002a40 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8000e4c:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 8000e50:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000e54:	4639      	mov	r1, r7
            ep->xfer_buff += ep->xfer_count;
 8000e56:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000e58:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8000e5a:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000e5e:	f002 fd1d 	bl	800389c <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000e62:	6821      	ldr	r1, [r4, #0]
 8000e64:	880a      	ldrh	r2, [r1, #0]
 8000e66:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8000e68:	0512      	lsls	r2, r2, #20
 8000e6a:	f53f af6e 	bmi.w	8000d4a <HAL_PCD_IRQHandler+0x1a>
 8000e6e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8000e72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8000e76:	f43f af68 	beq.w	8000d4a <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000e7a:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 8000e7e:	f201 400c 	addw	r0, r1, #1036	@ 0x40c
 8000e82:	b292      	uxth	r2, r2
 8000e84:	5a83      	ldrh	r3, [r0, r2]
 8000e86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e8a:	5283      	strh	r3, [r0, r2]
 8000e8c:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
 8000e90:	2b3e      	cmp	r3, #62	@ 0x3e
 8000e92:	d91d      	bls.n	8000ed0 <HAL_PCD_IRQHandler+0x1a0>
 8000e94:	095f      	lsrs	r7, r3, #5
 8000e96:	06db      	lsls	r3, r3, #27
 8000e98:	5a83      	ldrh	r3, [r0, r2]
 8000e9a:	bf08      	it	eq
 8000e9c:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8000ea6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000eaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	5283      	strh	r3, [r0, r2]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000eb2:	880b      	ldrh	r3, [r1, #0]
 8000eb4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000eb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000ebc:	041b      	lsls	r3, r3, #16
 8000ebe:	0c1b      	lsrs	r3, r3, #16
 8000ec0:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8000ec4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ec8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ecc:	800b      	strh	r3, [r1, #0]
 8000ece:	e73c      	b.n	8000d4a <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000ed0:	b90b      	cbnz	r3, 8000ed6 <HAL_PCD_IRQHandler+0x1a6>
 8000ed2:	5a83      	ldrh	r3, [r0, r2]
 8000ed4:	e7e7      	b.n	8000ea6 <HAL_PCD_IRQHandler+0x176>
 8000ed6:	085f      	lsrs	r7, r3, #1
 8000ed8:	07db      	lsls	r3, r3, #31
 8000eda:	5a83      	ldrh	r3, [r0, r2]
 8000edc:	bf48      	it	mi
 8000ede:	3701      	addmi	r7, #1
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8000ee6:	e7e2      	b.n	8000eae <HAL_PCD_IRQHandler+0x17e>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000ee8:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000eec:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000eee:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000ef2:	f140 80f6 	bpl.w	80010e2 <HAL_PCD_IRQHandler+0x3b2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000ef6:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 8000efa:	fb05 4107 	mla	r1, r5, r7, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000f02:	051b      	lsls	r3, r3, #20
 8000f04:	0d1b      	lsrs	r3, r3, #20
 8000f06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f0a:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 8000f0e:	f891 315c 	ldrb.w	r3, [r1, #348]	@ 0x15c
 8000f12:	f500 6e80 	add.w	lr, r0, #1024	@ 0x400
 8000f16:	b9bb      	cbnz	r3, 8000f48 <HAL_PCD_IRQHandler+0x218>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000f18:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8000f1c:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	3306      	adds	r3, #6
 8000f24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000f28:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8000f2c:	f3c9 0909 	ubfx	r9, r9, #0, #10
          if (count != 0U)
 8000f30:	f1b9 0f00 	cmp.w	r9, #0
 8000f34:	f000 80ba 	beq.w	80010ac <HAL_PCD_IRQHandler+0x37c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000f38:	464b      	mov	r3, r9
 8000f3a:	f8b1 2156 	ldrh.w	r2, [r1, #342]	@ 0x156
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000f3e:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8000f42:	f001 fd7d 	bl	8002a40 <USB_ReadPMA>
 8000f46:	e0b1      	b.n	80010ac <HAL_PCD_IRQHandler+0x37c>
          if (ep->type == EP_TYPE_BULK)
 8000f48:	f891 3153 	ldrb.w	r3, [r1, #339]	@ 0x153

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f4c:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
          if (ep->type == EP_TYPE_BULK)
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	f040 8089 	bne.w	8001068 <HAL_PCD_IRQHandler+0x338>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f56:	f8b0 9050 	ldrh.w	r9, [r0, #80]	@ 0x50
 8000f5a:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
 8000f5e:	fa1f f989 	uxth.w	r9, r9
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000f62:	f418 4a80 	ands.w	sl, r8, #16384	@ 0x4000

    if (ep->xfer_len >= count)
 8000f66:	f8d1 3168 	ldr.w	r3, [r1, #360]	@ 0x168
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f6a:	44d9      	add	r9, fp
 8000f6c:	f008 0c40 	and.w	ip, r8, #64	@ 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000f70:	d03c      	beq.n	8000fec <HAL_PCD_IRQHandler+0x2bc>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000f72:	f109 0902 	add.w	r9, r9, #2
 8000f76:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 8000f7a:	f3c9 0909 	ubfx	r9, r9, #0, #10
    if (ep->xfer_len >= count)
 8000f7e:	4599      	cmp	r9, r3
 8000f80:	d913      	bls.n	8000faa <HAL_PCD_IRQHandler+0x27a>
 8000f82:	2300      	movs	r3, #0
 8000f84:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8000f88:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000f8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000f94:	041b      	lsls	r3, r3, #16
 8000f96:	0c1b      	lsrs	r3, r3, #16
 8000f98:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000f9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fa4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8000fa8:	e005      	b.n	8000fb6 <HAL_PCD_IRQHandler+0x286>
      ep->xfer_len -= count;
 8000faa:	eba3 0309 	sub.w	r3, r3, r9
 8000fae:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0e8      	beq.n	8000f88 <HAL_PCD_IRQHandler+0x258>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000fb6:	f1bc 0f00 	cmp.w	ip, #0
 8000fba:	d00d      	beq.n	8000fd8 <HAL_PCD_IRQHandler+0x2a8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8000fbc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8000fc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8000fc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000fc8:	041b      	lsls	r3, r3, #16
 8000fca:	0c1b      	lsrs	r3, r3, #16
 8000fcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fd0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000fd4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8000fd8:	f1b9 0f00 	cmp.w	r9, #0
 8000fdc:	d066      	beq.n	80010ac <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000fde:	2128      	movs	r1, #40	@ 0x28
 8000fe0:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000fe4:	464b      	mov	r3, r9
 8000fe6:	f8b1 2158 	ldrh.w	r2, [r1, #344]	@ 0x158
 8000fea:	e7a8      	b.n	8000f3e <HAL_PCD_IRQHandler+0x20e>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000fec:	f109 0906 	add.w	r9, r9, #6
 8000ff0:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 8000ff4:	f3c9 0909 	ubfx	r9, r9, #0, #10

    if (ep->xfer_len >= count)
 8000ff8:	4599      	cmp	r9, r3
 8000ffa:	d912      	bls.n	8001022 <HAL_PCD_IRQHandler+0x2f2>
 8000ffc:	f8c1 a168 	str.w	sl, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001000:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001004:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001008:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c1b      	lsrs	r3, r3, #16
 8001010:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001014:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800101c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001020:	e005      	b.n	800102e <HAL_PCD_IRQHandler+0x2fe>
      ep->xfer_len -= count;
 8001022:	eba3 0309 	sub.w	r3, r3, r9
 8001026:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0e8      	beq.n	8001000 <HAL_PCD_IRQHandler+0x2d0>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800102e:	f1bc 0f00 	cmp.w	ip, #0
 8001032:	d10d      	bne.n	8001050 <HAL_PCD_IRQHandler+0x320>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001034:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001038:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800103c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001040:	041b      	lsls	r3, r3, #16
 8001042:	0c1b      	lsrs	r3, r3, #16
 8001044:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001048:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800104c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8001050:	f1b9 0f00 	cmp.w	r9, #0
 8001054:	d02a      	beq.n	80010ac <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001056:	2128      	movs	r1, #40	@ 0x28
 8001058:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800105c:	464b      	mov	r3, r9
 800105e:	f8b1 215a 	ldrh.w	r2, [r1, #346]	@ 0x15a
 8001062:	e76c      	b.n	8000f3e <HAL_PCD_IRQHandler+0x20e>
 8001064:	ffff8f0f 	.word	0xffff8f0f
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001068:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800106c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001070:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001074:	041b      	lsls	r3, r3, #16
 8001076:	0c1b      	lsrs	r3, r3, #16
 8001078:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800107c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001080:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001084:	f891 3150 	ldrb.w	r3, [r1, #336]	@ 0x150
 8001088:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001092:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8001096:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001098:	d054      	beq.n	8001144 <HAL_PCD_IRQHandler+0x414>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800109a:	3202      	adds	r2, #2
 800109c:	4413      	add	r3, r2
 800109e:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 80010a2:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 80010a6:	f1b9 0f00 	cmp.w	r9, #0
 80010aa:	d19b      	bne.n	8000fe4 <HAL_PCD_IRQHandler+0x2b4>
        ep->xfer_count += count;
 80010ac:	fb05 f107 	mul.w	r1, r5, r7
 80010b0:	1863      	adds	r3, r4, r1
 80010b2:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 80010b6:	444a      	add	r2, r9
 80010b8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        ep->xfer_buff += count;
 80010bc:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 80010c0:	444a      	add	r2, r9
 80010c2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80010c6:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 80010ca:	b11a      	cbz	r2, 80010d4 <HAL_PCD_IRQHandler+0x3a4>
 80010cc:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80010d0:	4599      	cmp	r9, r3
 80010d2:	d241      	bcs.n	8001158 <HAL_PCD_IRQHandler+0x428>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80010d4:	fb05 4307 	mla	r3, r5, r7, r4
 80010d8:	4620      	mov	r0, r4
 80010da:	f893 1150 	ldrb.w	r1, [r3, #336]	@ 0x150
 80010de:	f002 fbdd 	bl	800389c <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80010e2:	f018 0f80 	tst.w	r8, #128	@ 0x80
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80010e6:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80010e8:	f43f ae2f 	beq.w	8000d4a <HAL_PCD_IRQHandler+0x1a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80010ec:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 80010f0:	fb05 fc07 	mul.w	ip, r5, r7
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	4033      	ands	r3, r6
 80010f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010fc:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8001100:	eb04 030c 	add.w	r3, r4, ip
 8001104:	7cda      	ldrb	r2, [r3, #19]
 8001106:	2a01      	cmp	r2, #1
 8001108:	d156      	bne.n	80011b8 <HAL_PCD_IRQHandler+0x488>
          ep->xfer_len = 0U;
 800110a:	2100      	movs	r1, #0
 800110c:	fb07 5205 	mla	r2, r7, r5, r5
 8001110:	50a1      	str	r1, [r4, r2]
          if (ep->doublebuffer != 0U)
 8001112:	7f1a      	ldrb	r2, [r3, #28]
 8001114:	b392      	cbz	r2, 800117c <HAL_PCD_IRQHandler+0x44c>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001116:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800111a:	7c5a      	ldrb	r2, [r3, #17]
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800111c:	d036      	beq.n	800118c <HAL_PCD_IRQHandler+0x45c>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800111e:	bb12      	cbnz	r2, 8001166 <HAL_PCD_IRQHandler+0x436>
 8001120:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8001124:	7c1b      	ldrb	r3, [r3, #16]
 8001126:	b292      	uxth	r2, r2
 8001128:	011b      	lsls	r3, r3, #4
 800112a:	f200 4004 	addw	r0, r0, #1028	@ 0x404
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800112e:	4410      	add	r0, r2
 8001130:	5a1a      	ldrh	r2, [r3, r0]
 8001132:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001136:	521a      	strh	r2, [r3, r0]
 8001138:	5a1a      	ldrh	r2, [r3, r0]
 800113a:	b292      	uxth	r2, r2
 800113c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001140:	521a      	strh	r2, [r3, r0]
 8001142:	e01b      	b.n	800117c <HAL_PCD_IRQHandler+0x44c>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001144:	3206      	adds	r2, #6
 8001146:	4413      	add	r3, r2
 8001148:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 800114c:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8001150:	f1b9 0f00 	cmp.w	r9, #0
 8001154:	d0aa      	beq.n	80010ac <HAL_PCD_IRQHandler+0x37c>
 8001156:	e781      	b.n	800105c <HAL_PCD_IRQHandler+0x32c>
        ep = &hpcd->OUT_ep[epindex];
 8001158:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800115c:	6820      	ldr	r0, [r4, #0]
 800115e:	4421      	add	r1, r4
 8001160:	f001 fa39 	bl	80025d6 <USB_EPStartXfer>
 8001164:	e7bd      	b.n	80010e2 <HAL_PCD_IRQHandler+0x3b2>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001166:	2a01      	cmp	r2, #1
 8001168:	d108      	bne.n	800117c <HAL_PCD_IRQHandler+0x44c>
 800116a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800116e:	7c1b      	ldrb	r3, [r3, #16]
 8001170:	b292      	uxth	r2, r2
 8001172:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 8001176:	011b      	lsls	r3, r3, #4
 8001178:	4410      	add	r0, r2
 800117a:	5219      	strh	r1, [r3, r0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800117c:	2328      	movs	r3, #40	@ 0x28
 800117e:	fb03 4307 	mla	r3, r3, r7, r4
 8001182:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001184:	4620      	mov	r0, r4
 8001186:	f002 fb92 	bl	80038ae <HAL_PCD_DataInStageCallback>
 800118a:	e5de      	b.n	8000d4a <HAL_PCD_IRQHandler+0x1a>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800118c:	b93a      	cbnz	r2, 800119e <HAL_PCD_IRQHandler+0x46e>
 800118e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8001192:	7c1b      	ldrb	r3, [r3, #16]
 8001194:	b292      	uxth	r2, r2
 8001196:	011b      	lsls	r3, r3, #4
 8001198:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 800119c:	e7c7      	b.n	800112e <HAL_PCD_IRQHandler+0x3fe>
 800119e:	2a01      	cmp	r2, #1
 80011a0:	d1ec      	bne.n	800117c <HAL_PCD_IRQHandler+0x44c>
 80011a2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80011a6:	7c1b      	ldrb	r3, [r3, #16]
 80011a8:	b292      	uxth	r2, r2
 80011aa:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 80011ae:	011b      	lsls	r3, r3, #4
 80011b0:	4410      	add	r0, r2
 80011b2:	f823 8000 	strh.w	r8, [r3, r0]
 80011b6:	e7e1      	b.n	800117c <HAL_PCD_IRQHandler+0x44c>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80011b8:	7c19      	ldrb	r1, [r3, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 80011ba:	f418 7e80 	ands.w	lr, r8, #256	@ 0x100
            if (ep->xfer_len > TxPctSize)
 80011be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80011c0:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 80011c4:	f500 6980 	add.w	r9, r0, #1024	@ 0x400
          if ((wEPVal & USB_EP_KIND) == 0U)
 80011c8:	d11b      	bne.n	8001202 <HAL_PCD_IRQHandler+0x4d2>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80011ca:	f8b0 7050 	ldrh.w	r7, [r0, #80]	@ 0x50
 80011ce:	b2bf      	uxth	r7, r7
 80011d0:	4457      	add	r7, sl
 80011d2:	3702      	adds	r7, #2
 80011d4:	f839 7017 	ldrh.w	r7, [r9, r7, lsl #1]
            if (ep->xfer_len > TxPctSize)
 80011d8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80011dc:	4297      	cmp	r7, r2
 80011de:	d302      	bcc.n	80011e6 <HAL_PCD_IRQHandler+0x4b6>
 80011e0:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
 80011e4:	e7ce      	b.n	8001184 <HAL_PCD_IRQHandler+0x454>
              ep->xfer_len -= TxPctSize;
 80011e6:	1bd2      	subs	r2, r2, r7
 80011e8:	629a      	str	r2, [r3, #40]	@ 0x28
              ep->xfer_buff += TxPctSize;
 80011ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        ep = &hpcd->IN_ep[epindex];
 80011ec:	f10c 0110 	add.w	r1, ip, #16
              ep->xfer_buff += TxPctSize;
 80011f0:	443a      	add	r2, r7
 80011f2:	625a      	str	r2, [r3, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 80011f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80011f6:	4421      	add	r1, r4
              ep->xfer_count += TxPctSize;
 80011f8:	443a      	add	r2, r7
 80011fa:	62da      	str	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80011fc:	f001 f9eb 	bl	80025d6 <USB_EPStartXfer>
 8001200:	e5a3      	b.n	8000d4a <HAL_PCD_IRQHandler+0x1a>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001202:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001206:	f018 0e40 	ands.w	lr, r8, #64	@ 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800120a:	fa1f fc8c 	uxth.w	ip, ip
 800120e:	44d4      	add	ip, sl
 8001210:	f408 4880 	and.w	r8, r8, #16384	@ 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001214:	f000 80f4 	beq.w	8001400 <HAL_PCD_IRQHandler+0x6d0>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001218:	f10c 0c02 	add.w	ip, ip, #2
 800121c:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 8001220:	fa1f f888 	uxth.w	r8, r8

    if (ep->xfer_len > TxPctSize)
 8001224:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001228:	4594      	cmp	ip, r2
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 800122a:	bf2c      	ite	cs
 800122c:	2200      	movcs	r2, #0
      ep->xfer_len -= TxPctSize;
 800122e:	eba2 020c 	subcc.w	r2, r2, ip
 8001232:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001234:	2a00      	cmp	r2, #0
 8001236:	d15b      	bne.n	80012f0 <HAL_PCD_IRQHandler+0x5c0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001238:	2328      	movs	r3, #40	@ 0x28
 800123a:	fb03 4307 	mla	r3, r3, r7, r4
 800123e:	7c5b      	ldrb	r3, [r3, #17]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d141      	bne.n	80012c8 <HAL_PCD_IRQHandler+0x598>
 8001244:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8001248:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 800124c:	b292      	uxth	r2, r2
 800124e:	010b      	lsls	r3, r1, #4
 8001250:	4494      	add	ip, r2
 8001252:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8001256:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800125a:	f82c 2003 	strh.w	r2, [ip, r3]
 800125e:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8001262:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8001266:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800126a:	b292      	uxth	r2, r2
 800126c:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001270:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8001274:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8001278:	b292      	uxth	r2, r2
 800127a:	4410      	add	r0, r2
 800127c:	5ac2      	ldrh	r2, [r0, r3]
 800127e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001282:	52c2      	strh	r2, [r0, r3]
 8001284:	5ac2      	ldrh	r2, [r0, r3]
 8001286:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800128a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800128e:	b292      	uxth	r2, r2
 8001290:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001292:	4620      	mov	r0, r4
 8001294:	f002 fb0b 	bl	80038ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001298:	f1b8 0f00 	cmp.w	r8, #0
 800129c:	f000 80f4 	beq.w	8001488 <HAL_PCD_IRQHandler+0x758>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80012a0:	2328      	movs	r3, #40	@ 0x28
 80012a2:	fb03 4307 	mla	r3, r3, r7, r4
 80012a6:	6822      	ldr	r2, [r4, #0]
 80012a8:	7c19      	ldrb	r1, [r3, #16]
 80012aa:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80012ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80012b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80012b6:	041b      	lsls	r3, r3, #16
 80012b8:	0c1b      	lsrs	r3, r3, #16
 80012ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012c2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80012c6:	e0df      	b.n	8001488 <HAL_PCD_IRQHandler+0x758>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d1e2      	bne.n	8001292 <HAL_PCD_IRQHandler+0x562>
 80012cc:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 80012d0:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 80012d4:	fa1f fe8e 	uxth.w	lr, lr
 80012d8:	44f4      	add	ip, lr
 80012da:	010b      	lsls	r3, r1, #4
 80012dc:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80012e0:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 80012e4:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 80012e8:	fa1f fc8c 	uxth.w	ip, ip
 80012ec:	4460      	add	r0, ip
 80012ee:	e7cf      	b.n	8001290 <HAL_PCD_IRQHandler+0x560>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80012f0:	f1b8 0f00 	cmp.w	r8, #0
 80012f4:	d00d      	beq.n	8001312 <HAL_PCD_IRQHandler+0x5e2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80012f6:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 80012fa:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80012fe:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001302:	0412      	lsls	r2, r2, #16
 8001304:	0c12      	lsrs	r2, r2, #16
 8001306:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800130a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800130e:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001312:	f04f 0828 	mov.w	r8, #40	@ 0x28
 8001316:	fb08 4807 	mla	r8, r8, r7, r4
 800131a:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 800131e:	2a01      	cmp	r2, #1
 8001320:	f040 80b2 	bne.w	8001488 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 8001324:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 8001328:	eb02 0e0c 	add.w	lr, r2, ip
 800132c:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8001330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001332:	4462      	add	r2, ip
 8001334:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001336:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 800133a:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800133e:	4293      	cmp	r3, r2
 8001340:	d335      	bcc.n	80013ae <HAL_PCD_IRQHandler+0x67e>
          ep->xfer_len_db -= len;
 8001342:	1a9b      	subs	r3, r3, r2
 8001344:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001348:	2328      	movs	r3, #40	@ 0x28
 800134a:	fb03 4307 	mla	r3, r3, r7, r4
 800134e:	f893 c011 	ldrb.w	ip, [r3, #17]
 8001352:	b293      	uxth	r3, r2
 8001354:	f1bc 0f00 	cmp.w	ip, #0
 8001358:	d145      	bne.n	80013e6 <HAL_PCD_IRQHandler+0x6b6>
 800135a:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 800135e:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8001362:	fa1f f888 	uxth.w	r8, r8
 8001366:	44c4      	add	ip, r8
 8001368:	0109      	lsls	r1, r1, #4
 800136a:	f83c 8001 	ldrh.w	r8, [ip, r1]
 800136e:	2a3e      	cmp	r2, #62	@ 0x3e
 8001370:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8001374:	f82c 8001 	strh.w	r8, [ip, r1]
 8001378:	d925      	bls.n	80013c6 <HAL_PCD_IRQHandler+0x696>
 800137a:	ea4f 1852 	mov.w	r8, r2, lsr #5
 800137e:	06d2      	lsls	r2, r2, #27
 8001380:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8001384:	bf08      	it	eq
 8001386:	f108 38ff 	addeq.w	r8, r8, #4294967295
 800138a:	b292      	uxth	r2, r2
 800138c:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8001390:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8001394:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001398:	b292      	uxth	r2, r2
 800139a:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800139e:	2228      	movs	r2, #40	@ 0x28
 80013a0:	fb02 4207 	mla	r2, r2, r7, r4
 80013a4:	8b12      	ldrh	r2, [r2, #24]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80013a6:	4671      	mov	r1, lr
 80013a8:	f001 f905 	bl	80025b6 <USB_WritePMA>
 80013ac:	e06c      	b.n	8001488 <HAL_PCD_IRQHandler+0x758>
        else if (ep->xfer_len_db == 0U)
 80013ae:	b91b      	cbnz	r3, 80013b8 <HAL_PCD_IRQHandler+0x688>
    if (ep->xfer_len > TxPctSize)
 80013b0:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 80013b2:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 80013b6:	e7c7      	b.n	8001348 <HAL_PCD_IRQHandler+0x618>
          ep->xfer_fill_db = 0U;
 80013b8:	2200      	movs	r2, #0
 80013ba:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          ep->xfer_len_db = 0U;
 80013be:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
 80013c2:	461a      	mov	r2, r3
 80013c4:	e7c0      	b.n	8001348 <HAL_PCD_IRQHandler+0x618>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80013c6:	b912      	cbnz	r2, 80013ce <HAL_PCD_IRQHandler+0x69e>
 80013c8:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80013cc:	e7e0      	b.n	8001390 <HAL_PCD_IRQHandler+0x660>
 80013ce:	ea4f 0852 	mov.w	r8, r2, lsr #1
 80013d2:	07d2      	lsls	r2, r2, #31
 80013d4:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80013d8:	bf48      	it	mi
 80013da:	f108 0801 	addmi.w	r8, r8, #1
 80013de:	b292      	uxth	r2, r2
 80013e0:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 80013e4:	e7d8      	b.n	8001398 <HAL_PCD_IRQHandler+0x668>
 80013e6:	f1bc 0f01 	cmp.w	ip, #1
 80013ea:	d1d8      	bne.n	800139e <HAL_PCD_IRQHandler+0x66e>
 80013ec:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 80013f0:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 80013f4:	fa1f fc8c 	uxth.w	ip, ip
 80013f8:	4462      	add	r2, ip
 80013fa:	0109      	lsls	r1, r1, #4
 80013fc:	5253      	strh	r3, [r2, r1]
 80013fe:	e7ce      	b.n	800139e <HAL_PCD_IRQHandler+0x66e>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001400:	f10c 0c06 	add.w	ip, ip, #6
 8001404:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 8001408:	fa1f f888 	uxth.w	r8, r8
    if (ep->xfer_len >= TxPctSize)
 800140c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001410:	4594      	cmp	ip, r2
      ep->xfer_len = 0U;
 8001412:	bf8c      	ite	hi
 8001414:	4672      	movhi	r2, lr
      ep->xfer_len -= TxPctSize;
 8001416:	eba2 020c 	subls.w	r2, r2, ip
 800141a:	629a      	str	r2, [r3, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 800141c:	2a00      	cmp	r2, #0
 800141e:	d15d      	bne.n	80014dc <HAL_PCD_IRQHandler+0x7ac>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001420:	2328      	movs	r3, #40	@ 0x28
 8001422:	fb03 4307 	mla	r3, r3, r7, r4
 8001426:	7c5b      	ldrb	r3, [r3, #17]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d143      	bne.n	80014b4 <HAL_PCD_IRQHandler+0x784>
 800142c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8001430:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8001434:	b292      	uxth	r2, r2
 8001436:	010b      	lsls	r3, r1, #4
 8001438:	4494      	add	ip, r2
 800143a:	f83c 2003 	ldrh.w	r2, [ip, r3]
 800143e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001442:	f82c 2003 	strh.w	r2, [ip, r3]
 8001446:	f83c 2003 	ldrh.w	r2, [ip, r3]
 800144a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800144e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001452:	b292      	uxth	r2, r2
 8001454:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001458:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800145c:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8001460:	b292      	uxth	r2, r2
 8001462:	4410      	add	r0, r2
 8001464:	5ac2      	ldrh	r2, [r0, r3]
 8001466:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800146a:	52c2      	strh	r2, [r0, r3]
 800146c:	5ac2      	ldrh	r2, [r0, r3]
 800146e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8001472:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001476:	b292      	uxth	r2, r2
 8001478:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800147a:	4620      	mov	r0, r4
 800147c:	f002 fa17 	bl	80038ae <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001480:	f1b8 0f00 	cmp.w	r8, #0
 8001484:	f43f af0c 	beq.w	80012a0 <HAL_PCD_IRQHandler+0x570>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001488:	2328      	movs	r3, #40	@ 0x28
 800148a:	fb03 4307 	mla	r3, r3, r7, r4
 800148e:	6822      	ldr	r2, [r4, #0]
 8001490:	7c19      	ldrb	r1, [r3, #16]
 8001492:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001496:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800149a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800149e:	041b      	lsls	r3, r3, #16
 80014a0:	0c1b      	lsrs	r3, r3, #16
 80014a2:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 80014a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014ae:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80014b2:	e44a      	b.n	8000d4a <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d1e0      	bne.n	800147a <HAL_PCD_IRQHandler+0x74a>
 80014b8:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 80014bc:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 80014c0:	fa1f fe8e 	uxth.w	lr, lr
 80014c4:	44f4      	add	ip, lr
 80014c6:	010b      	lsls	r3, r1, #4
 80014c8:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80014cc:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 80014d0:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 80014d4:	fa1f fc8c 	uxth.w	ip, ip
 80014d8:	4460      	add	r0, ip
 80014da:	e7cd      	b.n	8001478 <HAL_PCD_IRQHandler+0x748>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80014dc:	f1b8 0f00 	cmp.w	r8, #0
 80014e0:	d10d      	bne.n	80014fe <HAL_PCD_IRQHandler+0x7ce>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80014e2:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 80014e6:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80014ea:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80014ee:	0412      	lsls	r2, r2, #16
 80014f0:	0c12      	lsrs	r2, r2, #16
 80014f2:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80014f6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80014fa:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80014fe:	f04f 0828 	mov.w	r8, #40	@ 0x28
 8001502:	fb08 4807 	mla	r8, r8, r7, r4
 8001506:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 800150a:	2a01      	cmp	r2, #1
 800150c:	d1bc      	bne.n	8001488 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 800150e:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 8001512:	eb02 0e0c 	add.w	lr, r2, ip
 8001516:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 800151a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800151c:	4462      	add	r2, ip
 800151e:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001520:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8001524:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8001528:	4293      	cmp	r3, r2
 800152a:	d332      	bcc.n	8001592 <HAL_PCD_IRQHandler+0x862>
          ep->xfer_len_db -= len;
 800152c:	1a9b      	subs	r3, r3, r2
 800152e:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001532:	2328      	movs	r3, #40	@ 0x28
 8001534:	fb03 4307 	mla	r3, r3, r7, r4
 8001538:	f893 c011 	ldrb.w	ip, [r3, #17]
 800153c:	b293      	uxth	r3, r2
 800153e:	f1bc 0f00 	cmp.w	ip, #0
 8001542:	d142      	bne.n	80015ca <HAL_PCD_IRQHandler+0x89a>
 8001544:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 8001548:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 800154c:	fa1f f888 	uxth.w	r8, r8
 8001550:	44c4      	add	ip, r8
 8001552:	0109      	lsls	r1, r1, #4
 8001554:	f83c 8001 	ldrh.w	r8, [ip, r1]
 8001558:	2a3e      	cmp	r2, #62	@ 0x3e
 800155a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800155e:	f82c 8001 	strh.w	r8, [ip, r1]
 8001562:	d922      	bls.n	80015aa <HAL_PCD_IRQHandler+0x87a>
 8001564:	ea4f 1852 	mov.w	r8, r2, lsr #5
 8001568:	06d2      	lsls	r2, r2, #27
 800156a:	f83c 2001 	ldrh.w	r2, [ip, r1]
 800156e:	bf08      	it	eq
 8001570:	f108 38ff 	addeq.w	r8, r8, #4294967295
 8001574:	b292      	uxth	r2, r2
 8001576:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 800157a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800157e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001582:	b292      	uxth	r2, r2
 8001584:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001588:	2228      	movs	r2, #40	@ 0x28
 800158a:	fb02 4207 	mla	r2, r2, r7, r4
 800158e:	8b52      	ldrh	r2, [r2, #26]
 8001590:	e709      	b.n	80013a6 <HAL_PCD_IRQHandler+0x676>
        else if (ep->xfer_len_db == 0U)
 8001592:	b91b      	cbnz	r3, 800159c <HAL_PCD_IRQHandler+0x86c>
    if (ep->xfer_len >= TxPctSize)
 8001594:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 8001596:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 800159a:	e7ca      	b.n	8001532 <HAL_PCD_IRQHandler+0x802>
          ep->xfer_len_db = 0U;
 800159c:	2200      	movs	r2, #0
 800159e:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 80015a2:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
 80015a6:	461a      	mov	r2, r3
 80015a8:	e7c3      	b.n	8001532 <HAL_PCD_IRQHandler+0x802>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80015aa:	b912      	cbnz	r2, 80015b2 <HAL_PCD_IRQHandler+0x882>
 80015ac:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80015b0:	e7e3      	b.n	800157a <HAL_PCD_IRQHandler+0x84a>
 80015b2:	ea4f 0852 	mov.w	r8, r2, lsr #1
 80015b6:	07d2      	lsls	r2, r2, #31
 80015b8:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80015bc:	bf48      	it	mi
 80015be:	f108 0801 	addmi.w	r8, r8, #1
 80015c2:	b292      	uxth	r2, r2
 80015c4:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 80015c8:	e7db      	b.n	8001582 <HAL_PCD_IRQHandler+0x852>
 80015ca:	f1bc 0f01 	cmp.w	ip, #1
 80015ce:	d1db      	bne.n	8001588 <HAL_PCD_IRQHandler+0x858>
 80015d0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80015d4:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 80015d8:	b292      	uxth	r2, r2
 80015da:	4494      	add	ip, r2
 80015dc:	010a      	lsls	r2, r1, #4
 80015de:	f82c 3002 	strh.w	r3, [ip, r2]
 80015e2:	e7d1      	b.n	8001588 <HAL_PCD_IRQHandler+0x858>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80015e4:	0546      	lsls	r6, r0, #21
 80015e6:	d512      	bpl.n	800160e <HAL_PCD_IRQHandler+0x8de>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015e8:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80015ea:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015ec:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80015f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80015f4:	041b      	lsls	r3, r3, #16
 80015f6:	0c1b      	lsrs	r3, r3, #16
 80015f8:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 80015fc:	f002 f963 	bl	80038c6 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001600:	4629      	mov	r1, r5
 8001602:	4620      	mov	r0, r4
}
 8001604:	b005      	add	sp, #20
 8001606:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800160a:	f7ff bb7e 	b.w	8000d0a <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800160e:	0441      	lsls	r1, r0, #17
 8001610:	d50a      	bpl.n	8001628 <HAL_PCD_IRQHandler+0x8f8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001612:	6822      	ldr	r2, [r4, #0]
 8001614:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8001618:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800161c:	041b      	lsls	r3, r3, #16
 800161e:	0c1b      	lsrs	r3, r3, #16
 8001620:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 8001624:	f7ff bb96 	b.w	8000d54 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001628:	0482      	lsls	r2, r0, #18
 800162a:	d505      	bpl.n	8001638 <HAL_PCD_IRQHandler+0x908>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800162c:	6822      	ldr	r2, [r4, #0]
 800162e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8001632:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001636:	e7f1      	b.n	800161c <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001638:	04c3      	lsls	r3, r0, #19
 800163a:	d519      	bpl.n	8001670 <HAL_PCD_IRQHandler+0x940>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800163c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 800163e:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001640:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8001644:	f023 0304 	bic.w	r3, r3, #4
 8001648:	041b      	lsls	r3, r3, #16
 800164a:	0c1b      	lsrs	r3, r3, #16
 800164c:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001650:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8001654:	f023 0308 	bic.w	r3, r3, #8
 8001658:	041b      	lsls	r3, r3, #16
 800165a:	0c1b      	lsrs	r3, r3, #16
 800165c:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8001660:	f002 f954 	bl	800390c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001664:	6822      	ldr	r2, [r4, #0]
 8001666:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800166a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800166e:	e7d5      	b.n	800161c <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001670:	0507      	lsls	r7, r0, #20
 8001672:	d548      	bpl.n	8001706 <HAL_PCD_IRQHandler+0x9d6>
 8001674:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001676:	6823      	ldr	r3, [r4, #0]
 8001678:	4606      	mov	r6, r0
 800167a:	4619      	mov	r1, r3
 800167c:	461a      	mov	r2, r3
 800167e:	f103 0520 	add.w	r5, r3, #32
 8001682:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 8001686:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001688:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 800168c:	d1f9      	bne.n	8001682 <HAL_PCD_IRQHandler+0x952>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800168e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8001692:	b292      	uxth	r2, r2
 8001694:	f042 0201 	orr.w	r2, r2, #1
 8001698:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800169c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80016a0:	f022 0201 	bic.w	r2, r2, #1
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	0c12      	lsrs	r2, r2, #16
 80016a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80016ac:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80016b0:	0556      	lsls	r6, r2, #21
 80016b2:	d5fb      	bpl.n	80016ac <HAL_PCD_IRQHandler+0x97c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80016b4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80016b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016bc:	0412      	lsls	r2, r2, #16
 80016be:	0c12      	lsrs	r2, r2, #16
 80016c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80016c4:	f830 2b02 	ldrh.w	r2, [r0], #2
 80016c8:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 80016cc:	428d      	cmp	r5, r1
 80016ce:	d1f9      	bne.n	80016c4 <HAL_PCD_IRQHandler+0x994>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80016d0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80016d4:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80016d6:	b292      	uxth	r2, r2
 80016d8:	f042 0208 	orr.w	r2, r2, #8
 80016dc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80016e0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80016e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016e8:	0412      	lsls	r2, r2, #16
 80016ea:	0c12      	lsrs	r2, r2, #16
 80016ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80016f0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80016f4:	b292      	uxth	r2, r2
 80016f6:	f042 0204 	orr.w	r2, r2, #4
 80016fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80016fe:	f002 f8f5 	bl	80038ec <HAL_PCD_SuspendCallback>
    return;
 8001702:	f7ff bb27 	b.w	8000d54 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001706:	0582      	lsls	r2, r0, #22
 8001708:	d50d      	bpl.n	8001726 <HAL_PCD_IRQHandler+0x9f6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800170a:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 800170c:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800170e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8001712:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001716:	041b      	lsls	r3, r3, #16
 8001718:	0c1b      	lsrs	r3, r3, #16
 800171a:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 800171e:	f002 f8ce 	bl	80038be <HAL_PCD_SOFCallback>
    return;
 8001722:	f7ff bb17 	b.w	8000d54 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001726:	05c3      	lsls	r3, r0, #23
 8001728:	f57f ab14 	bpl.w	8000d54 <HAL_PCD_IRQHandler+0x24>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800172c:	6822      	ldr	r2, [r4, #0]
 800172e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8001732:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001736:	e771      	b.n	800161c <HAL_PCD_IRQHandler+0x8ec>

08001738 <HAL_PCD_EP_Open>:
{
 8001738:	b570      	push	{r4, r5, r6, lr}
 800173a:	2428      	movs	r4, #40	@ 0x28
 800173c:	4605      	mov	r5, r0
 800173e:	f001 0007 	and.w	r0, r1, #7
 8001742:	4344      	muls	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8001744:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001748:	bf14      	ite	ne
 800174a:	f104 0110 	addne.w	r1, r4, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800174e:	f504 71a8 	addeq.w	r1, r4, #336	@ 0x150
 8001752:	eb05 0604 	add.w	r6, r5, r4
    ep->is_in = 1U;
 8001756:	bf15      	itete	ne
 8001758:	2401      	movne	r4, #1
    ep->is_in = 0U;
 800175a:	2400      	moveq	r4, #0
    ep->is_in = 1U;
 800175c:	7474      	strbne	r4, [r6, #17]
    ep->is_in = 0U;
 800175e:	f886 4151 	strbeq.w	r4, [r6, #337]	@ 0x151
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001762:	bf14      	ite	ne
 8001764:	1949      	addne	r1, r1, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001766:	1949      	addeq	r1, r1, r5
  if (ep_type == EP_TYPE_BULK)
 8001768:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 800176a:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 800176c:	bf08      	it	eq
 800176e:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8001770:	7008      	strb	r0, [r1, #0]
    ep->data_pid_start = 0U;
 8001772:	bf08      	it	eq
 8001774:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 8001776:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8001778:	f895 3290 	ldrb.w	r3, [r5, #656]	@ 0x290
 800177c:	2b01      	cmp	r3, #1
 800177e:	d009      	beq.n	8001794 <HAL_PCD_EP_Open+0x5c>
 8001780:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001782:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8001784:	f885 3290 	strb.w	r3, [r5, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001788:	f000 fd3c 	bl	8002204 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800178c:	2000      	movs	r0, #0
 800178e:	f885 0290 	strb.w	r0, [r5, #656]	@ 0x290
}
 8001792:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8001794:	2002      	movs	r0, #2
 8001796:	e7fc      	b.n	8001792 <HAL_PCD_EP_Open+0x5a>

08001798 <HAL_PCD_EP_Receive>:
{
 8001798:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 800179a:	2428      	movs	r4, #40	@ 0x28
  ep->xfer_count = 0U;
 800179c:	2600      	movs	r6, #0
 800179e:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 80017a2:	434c      	muls	r4, r1
 80017a4:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 80017a6:	f885 1150 	strb.w	r1, [r5, #336]	@ 0x150
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017aa:	f504 71a8 	add.w	r1, r4, #336	@ 0x150
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017ae:	4401      	add	r1, r0
  ep->xfer_len = len;
 80017b0:	e9c5 2359 	strd	r2, r3, [r5, #356]	@ 0x164
  ep->xfer_count = 0U;
 80017b4:	f8c5 616c 	str.w	r6, [r5, #364]	@ 0x16c
  ep->is_in = 0U;
 80017b8:	f885 6151 	strb.w	r6, [r5, #337]	@ 0x151
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017bc:	6800      	ldr	r0, [r0, #0]
 80017be:	f000 ff0a 	bl	80025d6 <USB_EPStartXfer>
}
 80017c2:	4630      	mov	r0, r6
 80017c4:	bd70      	pop	{r4, r5, r6, pc}

080017c6 <HAL_PCD_EP_Transmit>:
{
 80017c6:	b570      	push	{r4, r5, r6, lr}
 80017c8:	2528      	movs	r5, #40	@ 0x28
 80017ca:	f001 0107 	and.w	r1, r1, #7
 80017ce:	434d      	muls	r5, r1
  ep->xfer_buff = pBuf;
 80017d0:	1944      	adds	r4, r0, r5
  ep->xfer_count = 0U;
 80017d2:	2600      	movs	r6, #0
  ep->xfer_len = len;
 80017d4:	e9c4 2309 	strd	r2, r3, [r4, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 80017d8:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80017da:	7421      	strb	r1, [r4, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017dc:	f105 0110 	add.w	r1, r5, #16
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017e0:	4401      	add	r1, r0
  ep->xfer_fill_db = 1U;
 80017e2:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  ep->xfer_len_db = len;
 80017e6:	6323      	str	r3, [r4, #48]	@ 0x30
  ep->xfer_count = 0U;
 80017e8:	62e6      	str	r6, [r4, #44]	@ 0x2c
  ep->is_in = 1U;
 80017ea:	7462      	strb	r2, [r4, #17]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017ec:	6800      	ldr	r0, [r0, #0]
 80017ee:	f000 fef2 	bl	80025d6 <USB_EPStartXfer>
}
 80017f2:	4630      	mov	r0, r6
 80017f4:	bd70      	pop	{r4, r5, r6, pc}

080017f6 <HAL_PCD_EP_SetStall>:
{
 80017f6:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80017f8:	7903      	ldrb	r3, [r0, #4]
 80017fa:	f001 0507 	and.w	r5, r1, #7
 80017fe:	42ab      	cmp	r3, r5
{
 8001800:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001802:	d32a      	bcc.n	800185a <HAL_PCD_EP_SetStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 8001804:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8001808:	f04f 0328 	mov.w	r3, #40	@ 0x28
 800180c:	d01c      	beq.n	8001848 <HAL_PCD_EP_SetStall+0x52>
    ep->is_in = 1U;
 800180e:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001810:	436b      	muls	r3, r5
 8001812:	f103 0110 	add.w	r1, r3, #16
    ep->is_in = 1U;
 8001816:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001818:	4401      	add	r1, r0
    ep->is_in = 1U;
 800181a:	745a      	strb	r2, [r3, #17]
  ep->is_stall = 1U;
 800181c:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800181e:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8001820:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8001822:	f894 2290 	ldrb.w	r2, [r4, #656]	@ 0x290
 8001826:	429a      	cmp	r2, r3
 8001828:	d019      	beq.n	800185e <HAL_PCD_EP_SetStall+0x68>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800182a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800182c:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001830:	f000 fe48 	bl	80024c4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001834:	b925      	cbnz	r5, 8001840 <HAL_PCD_EP_SetStall+0x4a>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001836:	6820      	ldr	r0, [r4, #0]
 8001838:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 800183c:	f000 feb9 	bl	80025b2 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8001840:	2000      	movs	r0, #0
 8001842:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8001846:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8001848:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800184a:	434b      	muls	r3, r1
 800184c:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
    ep->is_in = 0U;
 8001850:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8001852:	4401      	add	r1, r0
    ep->is_in = 0U;
 8001854:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
 8001858:	e7e0      	b.n	800181c <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
 800185a:	2001      	movs	r0, #1
 800185c:	e7f3      	b.n	8001846 <HAL_PCD_EP_SetStall+0x50>
  __HAL_LOCK(hpcd);
 800185e:	2002      	movs	r0, #2
 8001860:	e7f1      	b.n	8001846 <HAL_PCD_EP_SetStall+0x50>

08001862 <HAL_PCD_EP_ClrStall>:
{
 8001862:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001864:	7902      	ldrb	r2, [r0, #4]
 8001866:	f001 030f 	and.w	r3, r1, #15
 800186a:	429a      	cmp	r2, r3
{
 800186c:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800186e:	d326      	bcc.n	80018be <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 8001870:	2328      	movs	r3, #40	@ 0x28
 8001872:	f001 0207 	and.w	r2, r1, #7
 8001876:	4353      	muls	r3, r2
 8001878:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800187c:	bf14      	ite	ne
 800187e:	f103 0110 	addne.w	r1, r3, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001882:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
 8001886:	4418      	add	r0, r3
  ep->is_stall = 0U;
 8001888:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 800188c:	bf15      	itete	ne
 800188e:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8001890:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001892:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001894:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8001896:	bf14      	ite	ne
 8001898:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 800189a:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->is_stall = 0U;
 800189e:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018a0:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80018a2:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d00b      	beq.n	80018c2 <HAL_PCD_EP_ClrStall+0x60>
 80018aa:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80018ac:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80018ae:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80018b2:	f000 fe27 	bl	8002504 <USB_EPClearStall>
  return HAL_OK;
 80018b6:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 80018b8:	f884 5290 	strb.w	r5, [r4, #656]	@ 0x290
}
 80018bc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80018be:	2001      	movs	r0, #1
 80018c0:	e7fc      	b.n	80018bc <HAL_PCD_EP_ClrStall+0x5a>
  __HAL_LOCK(hpcd);
 80018c2:	2002      	movs	r0, #2
 80018c4:	e7fa      	b.n	80018bc <HAL_PCD_EP_ClrStall+0x5a>

080018c6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80018c6:	b510      	push	{r4, lr}
 80018c8:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80018ca:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018ce:	bf1b      	ittet	ne
 80018d0:	f001 0107 	andne.w	r1, r1, #7
 80018d4:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018d8:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018dc:	3010      	addne	r0, #16
    ep = &hpcd->OUT_ep[ep_addr];
 80018de:	bf08      	it	eq
 80018e0:	f500 70a8 	addeq.w	r0, r0, #336	@ 0x150
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80018e4:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 80018e6:	b91a      	cbnz	r2, 80018f0 <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 80018e8:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 80018ea:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80018ec:	2000      	movs	r0, #0
 80018ee:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 80018f0:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80018f2:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 80018f4:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80018f6:	e7f9      	b.n	80018ec <HAL_PCDEx_PMAConfig+0x26>

080018f8 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80018f8:	2201      	movs	r2, #1
 80018fa:	4b01      	ldr	r3, [pc, #4]	@ (8001900 <HAL_PWR_EnableBkUpAccess+0x8>)
 80018fc:	621a      	str	r2, [r3, #32]
}
 80018fe:	4770      	bx	lr
 8001900:	420e0000 	.word	0x420e0000

08001904 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001904:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001906:	f7fe fee3 	bl	80006d0 <HAL_GetTick>
 800190a:	4605      	mov	r5, r0

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800190c:	4c2f      	ldr	r4, [pc, #188]	@ (80019cc <HAL_RCC_DeInit+0xc8>)
 800190e:	6823      	ldr	r3, [r4, #0]
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6023      	str	r3, [r4, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001916:	6823      	ldr	r3, [r4, #0]
 8001918:	079b      	lsls	r3, r3, #30
 800191a:	d53b      	bpl.n	8001994 <HAL_RCC_DeInit+0x90>
      return HAL_TIMEOUT;
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 800191c:	6823      	ldr	r3, [r4, #0]
  CLEAR_REG(RCC->CFGR);

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800191e:	f241 3688 	movw	r6, #5000	@ 0x1388
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8001922:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001926:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800192a:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800192c:	f7fe fed0 	bl	80006d0 <HAL_GetTick>
  CLEAR_REG(RCC->CFGR);
 8001930:	2300      	movs	r3, #0
  tickstart = HAL_GetTick();
 8001932:	4605      	mov	r5, r0
  CLEAR_REG(RCC->CFGR);
 8001934:	6063      	str	r3, [r4, #4]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001936:	6863      	ldr	r3, [r4, #4]
 8001938:	f013 0f0c 	tst.w	r3, #12
 800193c:	d132      	bne.n	80019a4 <HAL_RCC_DeInit+0xa0>
      return HAL_TIMEOUT;
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800193e:	4b24      	ldr	r3, [pc, #144]	@ (80019d0 <HAL_RCC_DeInit+0xcc>)
 8001940:	4a24      	ldr	r2, [pc, #144]	@ (80019d4 <HAL_RCC_DeInit+0xd0>)
 8001942:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001944:	4b24      	ldr	r3, [pc, #144]	@ (80019d8 <HAL_RCC_DeInit+0xd4>)
 8001946:	6818      	ldr	r0, [r3, #0]
 8001948:	f7fe fe80 	bl	800064c <HAL_InitTick>
 800194c:	4605      	mov	r5, r0
 800194e:	2800      	cmp	r0, #0
 8001950:	d13a      	bne.n	80019c8 <HAL_RCC_DeInit+0xc4>
  {
    return HAL_ERROR;
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001952:	f7fe febd 	bl	80006d0 <HAL_GetTick>
 8001956:	4606      	mov	r6, r0

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001958:	6823      	ldr	r3, [r4, #0]
 800195a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800195e:	6023      	str	r3, [r4, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001960:	6823      	ldr	r3, [r4, #0]
 8001962:	f013 7300 	ands.w	r3, r3, #33554432	@ 0x2000000
 8001966:	d123      	bne.n	80019b0 <HAL_RCC_DeInit+0xac>
      return HAL_TIMEOUT;
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8001968:	6063      	str	r3, [r4, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800196a:	f7fe feb1 	bl	80006d0 <HAL_GetTick>
 800196e:	4606      	mov	r6, r0

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001976:	6023      	str	r3, [r4, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001978:	6823      	ldr	r3, [r4, #0]
 800197a:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 800197e:	d11d      	bne.n	80019bc <HAL_RCC_DeInit+0xb8>
      return HAL_TIMEOUT;
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001980:	6822      	ldr	r2, [r4, #0]
 8001982:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001986:	6022      	str	r2, [r4, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001988:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800198a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800198e:	6262      	str	r2, [r4, #36]	@ 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8001990:	60a3      	str	r3, [r4, #8]

  return HAL_OK;
 8001992:	e005      	b.n	80019a0 <HAL_RCC_DeInit+0x9c>
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001994:	f7fe fe9c 	bl	80006d0 <HAL_GetTick>
 8001998:	1b40      	subs	r0, r0, r5
 800199a:	2802      	cmp	r0, #2
 800199c:	d9bb      	bls.n	8001916 <HAL_RCC_DeInit+0x12>
      return HAL_TIMEOUT;
 800199e:	2503      	movs	r5, #3
}
 80019a0:	4628      	mov	r0, r5
 80019a2:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a4:	f7fe fe94 	bl	80006d0 <HAL_GetTick>
 80019a8:	1b40      	subs	r0, r0, r5
 80019aa:	42b0      	cmp	r0, r6
 80019ac:	d9c3      	bls.n	8001936 <HAL_RCC_DeInit+0x32>
 80019ae:	e7f6      	b.n	800199e <HAL_RCC_DeInit+0x9a>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b0:	f7fe fe8e 	bl	80006d0 <HAL_GetTick>
 80019b4:	1b80      	subs	r0, r0, r6
 80019b6:	2802      	cmp	r0, #2
 80019b8:	d9d2      	bls.n	8001960 <HAL_RCC_DeInit+0x5c>
 80019ba:	e7f0      	b.n	800199e <HAL_RCC_DeInit+0x9a>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019bc:	f7fe fe88 	bl	80006d0 <HAL_GetTick>
 80019c0:	1b80      	subs	r0, r0, r6
 80019c2:	2864      	cmp	r0, #100	@ 0x64
 80019c4:	d9d8      	bls.n	8001978 <HAL_RCC_DeInit+0x74>
 80019c6:	e7ea      	b.n	800199e <HAL_RCC_DeInit+0x9a>
    return HAL_ERROR;
 80019c8:	2501      	movs	r5, #1
 80019ca:	e7e9      	b.n	80019a0 <HAL_RCC_DeInit+0x9c>
 80019cc:	40021000 	.word	0x40021000
 80019d0:	20000000 	.word	0x20000000
 80019d4:	007a1200 	.word	0x007a1200
 80019d8:	20000010 	.word	0x20000010

080019dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019e0:	4605      	mov	r5, r0
 80019e2:	b338      	cbz	r0, 8001a34 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e4:	6803      	ldr	r3, [r0, #0]
 80019e6:	07db      	lsls	r3, r3, #31
 80019e8:	d410      	bmi.n	8001a0c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ea:	682b      	ldr	r3, [r5, #0]
 80019ec:	079f      	lsls	r7, r3, #30
 80019ee:	d45e      	bmi.n	8001aae <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f0:	682b      	ldr	r3, [r5, #0]
 80019f2:	0719      	lsls	r1, r3, #28
 80019f4:	f100 8095 	bmi.w	8001b22 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f8:	682b      	ldr	r3, [r5, #0]
 80019fa:	075a      	lsls	r2, r3, #29
 80019fc:	f100 80c1 	bmi.w	8001b82 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a00:	69eb      	ldr	r3, [r5, #28]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f040 812c 	bne.w	8001c60 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8001a08:	2000      	movs	r0, #0
 8001a0a:	e029      	b.n	8001a60 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a0c:	4c90      	ldr	r4, [pc, #576]	@ (8001c50 <HAL_RCC_OscConfig+0x274>)
 8001a0e:	6863      	ldr	r3, [r4, #4]
 8001a10:	f003 030c 	and.w	r3, r3, #12
 8001a14:	2b04      	cmp	r3, #4
 8001a16:	d007      	beq.n	8001a28 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a18:	6863      	ldr	r3, [r4, #4]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d10a      	bne.n	8001a38 <HAL_RCC_OscConfig+0x5c>
 8001a22:	6863      	ldr	r3, [r4, #4]
 8001a24:	03de      	lsls	r6, r3, #15
 8001a26:	d507      	bpl.n	8001a38 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a28:	6823      	ldr	r3, [r4, #0]
 8001a2a:	039c      	lsls	r4, r3, #14
 8001a2c:	d5dd      	bpl.n	80019ea <HAL_RCC_OscConfig+0xe>
 8001a2e:	686b      	ldr	r3, [r5, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1da      	bne.n	80019ea <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8001a34:	2001      	movs	r0, #1
 8001a36:	e013      	b.n	8001a60 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a38:	686b      	ldr	r3, [r5, #4]
 8001a3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a3e:	d112      	bne.n	8001a66 <HAL_RCC_OscConfig+0x8a>
 8001a40:	6823      	ldr	r3, [r4, #0]
 8001a42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a46:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a48:	f7fe fe42 	bl	80006d0 <HAL_GetTick>
 8001a4c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4e:	6823      	ldr	r3, [r4, #0]
 8001a50:	0398      	lsls	r0, r3, #14
 8001a52:	d4ca      	bmi.n	80019ea <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a54:	f7fe fe3c 	bl	80006d0 <HAL_GetTick>
 8001a58:	1b80      	subs	r0, r0, r6
 8001a5a:	2864      	cmp	r0, #100	@ 0x64
 8001a5c:	d9f7      	bls.n	8001a4e <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8001a5e:	2003      	movs	r0, #3
}
 8001a60:	b002      	add	sp, #8
 8001a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a66:	b99b      	cbnz	r3, 8001a90 <HAL_RCC_OscConfig+0xb4>
 8001a68:	6823      	ldr	r3, [r4, #0]
 8001a6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a6e:	6023      	str	r3, [r4, #0]
 8001a70:	6823      	ldr	r3, [r4, #0]
 8001a72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a76:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a78:	f7fe fe2a 	bl	80006d0 <HAL_GetTick>
 8001a7c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7e:	6823      	ldr	r3, [r4, #0]
 8001a80:	0399      	lsls	r1, r3, #14
 8001a82:	d5b2      	bpl.n	80019ea <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a84:	f7fe fe24 	bl	80006d0 <HAL_GetTick>
 8001a88:	1b80      	subs	r0, r0, r6
 8001a8a:	2864      	cmp	r0, #100	@ 0x64
 8001a8c:	d9f7      	bls.n	8001a7e <HAL_RCC_OscConfig+0xa2>
 8001a8e:	e7e6      	b.n	8001a5e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a94:	6823      	ldr	r3, [r4, #0]
 8001a96:	d103      	bne.n	8001aa0 <HAL_RCC_OscConfig+0xc4>
 8001a98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a9c:	6023      	str	r3, [r4, #0]
 8001a9e:	e7cf      	b.n	8001a40 <HAL_RCC_OscConfig+0x64>
 8001aa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001aa4:	6023      	str	r3, [r4, #0]
 8001aa6:	6823      	ldr	r3, [r4, #0]
 8001aa8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aac:	e7cb      	b.n	8001a46 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aae:	4c68      	ldr	r4, [pc, #416]	@ (8001c50 <HAL_RCC_OscConfig+0x274>)
 8001ab0:	6863      	ldr	r3, [r4, #4]
 8001ab2:	f013 0f0c 	tst.w	r3, #12
 8001ab6:	d007      	beq.n	8001ac8 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ab8:	6863      	ldr	r3, [r4, #4]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d110      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x108>
 8001ac2:	6863      	ldr	r3, [r4, #4]
 8001ac4:	03da      	lsls	r2, r3, #15
 8001ac6:	d40d      	bmi.n	8001ae4 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac8:	6823      	ldr	r3, [r4, #0]
 8001aca:	079b      	lsls	r3, r3, #30
 8001acc:	d502      	bpl.n	8001ad4 <HAL_RCC_OscConfig+0xf8>
 8001ace:	692b      	ldr	r3, [r5, #16]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d1af      	bne.n	8001a34 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad4:	6823      	ldr	r3, [r4, #0]
 8001ad6:	696a      	ldr	r2, [r5, #20]
 8001ad8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001adc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ae0:	6023      	str	r3, [r4, #0]
 8001ae2:	e785      	b.n	80019f0 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ae4:	692a      	ldr	r2, [r5, #16]
 8001ae6:	4b5b      	ldr	r3, [pc, #364]	@ (8001c54 <HAL_RCC_OscConfig+0x278>)
 8001ae8:	b16a      	cbz	r2, 8001b06 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8001aea:	2201      	movs	r2, #1
 8001aec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001aee:	f7fe fdef 	bl	80006d0 <HAL_GetTick>
 8001af2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af4:	6823      	ldr	r3, [r4, #0]
 8001af6:	079f      	lsls	r7, r3, #30
 8001af8:	d4ec      	bmi.n	8001ad4 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afa:	f7fe fde9 	bl	80006d0 <HAL_GetTick>
 8001afe:	1b80      	subs	r0, r0, r6
 8001b00:	2802      	cmp	r0, #2
 8001b02:	d9f7      	bls.n	8001af4 <HAL_RCC_OscConfig+0x118>
 8001b04:	e7ab      	b.n	8001a5e <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8001b06:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b08:	f7fe fde2 	bl	80006d0 <HAL_GetTick>
 8001b0c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	0798      	lsls	r0, r3, #30
 8001b12:	f57f af6d 	bpl.w	80019f0 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b16:	f7fe fddb 	bl	80006d0 <HAL_GetTick>
 8001b1a:	1b80      	subs	r0, r0, r6
 8001b1c:	2802      	cmp	r0, #2
 8001b1e:	d9f6      	bls.n	8001b0e <HAL_RCC_OscConfig+0x132>
 8001b20:	e79d      	b.n	8001a5e <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b22:	69aa      	ldr	r2, [r5, #24]
 8001b24:	4e4a      	ldr	r6, [pc, #296]	@ (8001c50 <HAL_RCC_OscConfig+0x274>)
 8001b26:	4b4b      	ldr	r3, [pc, #300]	@ (8001c54 <HAL_RCC_OscConfig+0x278>)
 8001b28:	b1e2      	cbz	r2, 8001b64 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8001b30:	f7fe fdce 	bl	80006d0 <HAL_GetTick>
 8001b34:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b36:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8001b38:	079b      	lsls	r3, r3, #30
 8001b3a:	d50d      	bpl.n	8001b58 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b3c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001b40:	4b45      	ldr	r3, [pc, #276]	@ (8001c58 <HAL_RCC_OscConfig+0x27c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b48:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001b4a:	bf00      	nop
  }
  while (Delay --);
 8001b4c:	9b01      	ldr	r3, [sp, #4]
 8001b4e:	1e5a      	subs	r2, r3, #1
 8001b50:	9201      	str	r2, [sp, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f9      	bne.n	8001b4a <HAL_RCC_OscConfig+0x16e>
 8001b56:	e74f      	b.n	80019f8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b58:	f7fe fdba 	bl	80006d0 <HAL_GetTick>
 8001b5c:	1b00      	subs	r0, r0, r4
 8001b5e:	2802      	cmp	r0, #2
 8001b60:	d9e9      	bls.n	8001b36 <HAL_RCC_OscConfig+0x15a>
 8001b62:	e77c      	b.n	8001a5e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8001b64:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8001b68:	f7fe fdb2 	bl	80006d0 <HAL_GetTick>
 8001b6c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b6e:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8001b70:	079f      	lsls	r7, r3, #30
 8001b72:	f57f af41 	bpl.w	80019f8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b76:	f7fe fdab 	bl	80006d0 <HAL_GetTick>
 8001b7a:	1b00      	subs	r0, r0, r4
 8001b7c:	2802      	cmp	r0, #2
 8001b7e:	d9f6      	bls.n	8001b6e <HAL_RCC_OscConfig+0x192>
 8001b80:	e76d      	b.n	8001a5e <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b82:	4c33      	ldr	r4, [pc, #204]	@ (8001c50 <HAL_RCC_OscConfig+0x274>)
 8001b84:	69e3      	ldr	r3, [r4, #28]
 8001b86:	00d8      	lsls	r0, r3, #3
 8001b88:	d424      	bmi.n	8001bd4 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8001b8a:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b8c:	69e3      	ldr	r3, [r4, #28]
 8001b8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b92:	61e3      	str	r3, [r4, #28]
 8001b94:	69e3      	ldr	r3, [r4, #28]
 8001b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9e:	4e2f      	ldr	r6, [pc, #188]	@ (8001c5c <HAL_RCC_OscConfig+0x280>)
 8001ba0:	6833      	ldr	r3, [r6, #0]
 8001ba2:	05d9      	lsls	r1, r3, #23
 8001ba4:	d518      	bpl.n	8001bd8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba6:	68eb      	ldr	r3, [r5, #12]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d126      	bne.n	8001bfa <HAL_RCC_OscConfig+0x21e>
 8001bac:	6a23      	ldr	r3, [r4, #32]
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001bb4:	f7fe fd8c 	bl	80006d0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb8:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001bbc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bbe:	6a23      	ldr	r3, [r4, #32]
 8001bc0:	079b      	lsls	r3, r3, #30
 8001bc2:	d53f      	bpl.n	8001c44 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8001bc4:	2f00      	cmp	r7, #0
 8001bc6:	f43f af1b 	beq.w	8001a00 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bca:	69e3      	ldr	r3, [r4, #28]
 8001bcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bd0:	61e3      	str	r3, [r4, #28]
 8001bd2:	e715      	b.n	8001a00 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001bd4:	2700      	movs	r7, #0
 8001bd6:	e7e2      	b.n	8001b9e <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bd8:	6833      	ldr	r3, [r6, #0]
 8001bda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bde:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001be0:	f7fe fd76 	bl	80006d0 <HAL_GetTick>
 8001be4:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be6:	6833      	ldr	r3, [r6, #0]
 8001be8:	05da      	lsls	r2, r3, #23
 8001bea:	d4dc      	bmi.n	8001ba6 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bec:	f7fe fd70 	bl	80006d0 <HAL_GetTick>
 8001bf0:	eba0 0008 	sub.w	r0, r0, r8
 8001bf4:	2864      	cmp	r0, #100	@ 0x64
 8001bf6:	d9f6      	bls.n	8001be6 <HAL_RCC_OscConfig+0x20a>
 8001bf8:	e731      	b.n	8001a5e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bfa:	b9ab      	cbnz	r3, 8001c28 <HAL_RCC_OscConfig+0x24c>
 8001bfc:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfe:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c02:	f023 0301 	bic.w	r3, r3, #1
 8001c06:	6223      	str	r3, [r4, #32]
 8001c08:	6a23      	ldr	r3, [r4, #32]
 8001c0a:	f023 0304 	bic.w	r3, r3, #4
 8001c0e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001c10:	f7fe fd5e 	bl	80006d0 <HAL_GetTick>
 8001c14:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c16:	6a23      	ldr	r3, [r4, #32]
 8001c18:	0798      	lsls	r0, r3, #30
 8001c1a:	d5d3      	bpl.n	8001bc4 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1c:	f7fe fd58 	bl	80006d0 <HAL_GetTick>
 8001c20:	1b80      	subs	r0, r0, r6
 8001c22:	4540      	cmp	r0, r8
 8001c24:	d9f7      	bls.n	8001c16 <HAL_RCC_OscConfig+0x23a>
 8001c26:	e71a      	b.n	8001a5e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c28:	2b05      	cmp	r3, #5
 8001c2a:	6a23      	ldr	r3, [r4, #32]
 8001c2c:	d103      	bne.n	8001c36 <HAL_RCC_OscConfig+0x25a>
 8001c2e:	f043 0304 	orr.w	r3, r3, #4
 8001c32:	6223      	str	r3, [r4, #32]
 8001c34:	e7ba      	b.n	8001bac <HAL_RCC_OscConfig+0x1d0>
 8001c36:	f023 0301 	bic.w	r3, r3, #1
 8001c3a:	6223      	str	r3, [r4, #32]
 8001c3c:	6a23      	ldr	r3, [r4, #32]
 8001c3e:	f023 0304 	bic.w	r3, r3, #4
 8001c42:	e7b6      	b.n	8001bb2 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c44:	f7fe fd44 	bl	80006d0 <HAL_GetTick>
 8001c48:	1b80      	subs	r0, r0, r6
 8001c4a:	4540      	cmp	r0, r8
 8001c4c:	d9b7      	bls.n	8001bbe <HAL_RCC_OscConfig+0x1e2>
 8001c4e:	e706      	b.n	8001a5e <HAL_RCC_OscConfig+0x82>
 8001c50:	40021000 	.word	0x40021000
 8001c54:	42420000 	.word	0x42420000
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c60:	4c2a      	ldr	r4, [pc, #168]	@ (8001d0c <HAL_RCC_OscConfig+0x330>)
 8001c62:	6862      	ldr	r2, [r4, #4]
 8001c64:	f002 020c 	and.w	r2, r2, #12
 8001c68:	2a08      	cmp	r2, #8
 8001c6a:	d03e      	beq.n	8001cea <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	4b27      	ldr	r3, [pc, #156]	@ (8001d10 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 8001c72:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c74:	d12c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001c76:	f7fe fd2b 	bl	80006d0 <HAL_GetTick>
 8001c7a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c7c:	6823      	ldr	r3, [r4, #0]
 8001c7e:	0199      	lsls	r1, r3, #6
 8001c80:	d420      	bmi.n	8001cc4 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c82:	6a2b      	ldr	r3, [r5, #32]
 8001c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c88:	d105      	bne.n	8001c96 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c8a:	6862      	ldr	r2, [r4, #4]
 8001c8c:	68a9      	ldr	r1, [r5, #8]
 8001c8e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8001c92:	430a      	orrs	r2, r1
 8001c94:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c96:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8001c98:	6862      	ldr	r2, [r4, #4]
 8001c9a:	430b      	orrs	r3, r1
 8001c9c:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8001ca0:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8001ca2:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d10 <HAL_RCC_OscConfig+0x334>)
 8001ca8:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001caa:	f7fe fd11 	bl	80006d0 <HAL_GetTick>
 8001cae:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cb0:	6823      	ldr	r3, [r4, #0]
 8001cb2:	019a      	lsls	r2, r3, #6
 8001cb4:	f53f aea8 	bmi.w	8001a08 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb8:	f7fe fd0a 	bl	80006d0 <HAL_GetTick>
 8001cbc:	1b40      	subs	r0, r0, r5
 8001cbe:	2802      	cmp	r0, #2
 8001cc0:	d9f6      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x2d4>
 8001cc2:	e6cc      	b.n	8001a5e <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc4:	f7fe fd04 	bl	80006d0 <HAL_GetTick>
 8001cc8:	1b80      	subs	r0, r0, r6
 8001cca:	2802      	cmp	r0, #2
 8001ccc:	d9d6      	bls.n	8001c7c <HAL_RCC_OscConfig+0x2a0>
 8001cce:	e6c6      	b.n	8001a5e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001cd0:	f7fe fcfe 	bl	80006d0 <HAL_GetTick>
 8001cd4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd6:	6823      	ldr	r3, [r4, #0]
 8001cd8:	019b      	lsls	r3, r3, #6
 8001cda:	f57f ae95 	bpl.w	8001a08 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cde:	f7fe fcf7 	bl	80006d0 <HAL_GetTick>
 8001ce2:	1b40      	subs	r0, r0, r5
 8001ce4:	2802      	cmp	r0, #2
 8001ce6:	d9f6      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x2fa>
 8001ce8:	e6b9      	b.n	8001a5e <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	f43f aea2 	beq.w	8001a34 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8001cf0:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	6a2b      	ldr	r3, [r5, #32]
 8001cf4:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	f47f ae9b 	bne.w	8001a34 <HAL_RCC_OscConfig+0x58>
 8001cfe:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d00:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d04:	1ac0      	subs	r0, r0, r3
 8001d06:	bf18      	it	ne
 8001d08:	2001      	movne	r0, #1
 8001d0a:	e6a9      	b.n	8001a60 <HAL_RCC_OscConfig+0x84>
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	42420000 	.word	0x42420000

08001d14 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8001d14:	4a0d      	ldr	r2, [pc, #52]	@ (8001d4c <HAL_RCC_GetSysClockFreq+0x38>)
 8001d16:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001d18:	f003 010c 	and.w	r1, r3, #12
 8001d1c:	2908      	cmp	r1, #8
 8001d1e:	d112      	bne.n	8001d46 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d20:	480b      	ldr	r0, [pc, #44]	@ (8001d50 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001d22:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d26:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d28:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d2a:	d509      	bpl.n	8001d40 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d2c:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d2e:	4a09      	ldr	r2, [pc, #36]	@ (8001d54 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d30:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d34:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d36:	4a08      	ldr	r2, [pc, #32]	@ (8001d58 <HAL_RCC_GetSysClockFreq+0x44>)
 8001d38:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d3a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d3e:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d40:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x48>)
 8001d42:	4358      	muls	r0, r3
 8001d44:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001d46:	4803      	ldr	r0, [pc, #12]	@ (8001d54 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	08003aca 	.word	0x08003aca
 8001d54:	007a1200 	.word	0x007a1200
 8001d58:	08003ac8 	.word	0x08003ac8
 8001d5c:	003d0900 	.word	0x003d0900

08001d60 <HAL_RCC_ClockConfig>:
{
 8001d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d64:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001d66:	4604      	mov	r4, r0
 8001d68:	b910      	cbnz	r0, 8001d70 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001d6a:	2001      	movs	r0, #1
}
 8001d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d70:	4a44      	ldr	r2, [pc, #272]	@ (8001e84 <HAL_RCC_ClockConfig+0x124>)
 8001d72:	6813      	ldr	r3, [r2, #0]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	428b      	cmp	r3, r1
 8001d7a:	d328      	bcc.n	8001dce <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d7c:	6821      	ldr	r1, [r4, #0]
 8001d7e:	078e      	lsls	r6, r1, #30
 8001d80:	d430      	bmi.n	8001de4 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d82:	07ca      	lsls	r2, r1, #31
 8001d84:	d443      	bmi.n	8001e0e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d86:	4a3f      	ldr	r2, [pc, #252]	@ (8001e84 <HAL_RCC_ClockConfig+0x124>)
 8001d88:	6813      	ldr	r3, [r2, #0]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	42ab      	cmp	r3, r5
 8001d90:	d865      	bhi.n	8001e5e <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d92:	6822      	ldr	r2, [r4, #0]
 8001d94:	4d3c      	ldr	r5, [pc, #240]	@ (8001e88 <HAL_RCC_ClockConfig+0x128>)
 8001d96:	f012 0f04 	tst.w	r2, #4
 8001d9a:	d16c      	bne.n	8001e76 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9c:	0713      	lsls	r3, r2, #28
 8001d9e:	d506      	bpl.n	8001dae <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001da0:	686b      	ldr	r3, [r5, #4]
 8001da2:	6922      	ldr	r2, [r4, #16]
 8001da4:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8001da8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001dac:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dae:	f7ff ffb1 	bl	8001d14 <HAL_RCC_GetSysClockFreq>
 8001db2:	686b      	ldr	r3, [r5, #4]
 8001db4:	4a35      	ldr	r2, [pc, #212]	@ (8001e8c <HAL_RCC_ClockConfig+0x12c>)
 8001db6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001dba:	5cd3      	ldrb	r3, [r2, r3]
 8001dbc:	40d8      	lsrs	r0, r3
 8001dbe:	4b34      	ldr	r3, [pc, #208]	@ (8001e90 <HAL_RCC_ClockConfig+0x130>)
 8001dc0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001dc2:	4b34      	ldr	r3, [pc, #208]	@ (8001e94 <HAL_RCC_ClockConfig+0x134>)
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	f7fe fc41 	bl	800064c <HAL_InitTick>
  return HAL_OK;
 8001dca:	2000      	movs	r0, #0
 8001dcc:	e7ce      	b.n	8001d6c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dce:	6813      	ldr	r3, [r2, #0]
 8001dd0:	f023 0307 	bic.w	r3, r3, #7
 8001dd4:	430b      	orrs	r3, r1
 8001dd6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd8:	6813      	ldr	r3, [r2, #0]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	428b      	cmp	r3, r1
 8001de0:	d1c3      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xa>
 8001de2:	e7cb      	b.n	8001d7c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de4:	4b28      	ldr	r3, [pc, #160]	@ (8001e88 <HAL_RCC_ClockConfig+0x128>)
 8001de6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dea:	bf1e      	ittt	ne
 8001dec:	685a      	ldrne	r2, [r3, #4]
 8001dee:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8001df2:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df4:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001df6:	bf42      	ittt	mi
 8001df8:	685a      	ldrmi	r2, [r3, #4]
 8001dfa:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8001dfe:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	68a0      	ldr	r0, [r4, #8]
 8001e04:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001e08:	4302      	orrs	r2, r0
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	e7b9      	b.n	8001d82 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e0e:	6862      	ldr	r2, [r4, #4]
 8001e10:	4e1d      	ldr	r6, [pc, #116]	@ (8001e88 <HAL_RCC_ClockConfig+0x128>)
 8001e12:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e14:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e16:	d11a      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e18:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1c:	d0a5      	beq.n	8001d6a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e1e:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e20:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e24:	f023 0303 	bic.w	r3, r3, #3
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001e2c:	f7fe fc50 	bl	80006d0 <HAL_GetTick>
 8001e30:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e32:	6873      	ldr	r3, [r6, #4]
 8001e34:	6862      	ldr	r2, [r4, #4]
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001e3e:	d0a2      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e40:	f7fe fc46 	bl	80006d0 <HAL_GetTick>
 8001e44:	1bc0      	subs	r0, r0, r7
 8001e46:	4540      	cmp	r0, r8
 8001e48:	d9f3      	bls.n	8001e32 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8001e4a:	2003      	movs	r0, #3
 8001e4c:	e78e      	b.n	8001d6c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e4e:	2a02      	cmp	r2, #2
 8001e50:	d102      	bne.n	8001e58 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e52:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001e56:	e7e1      	b.n	8001e1c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e58:	f013 0f02 	tst.w	r3, #2
 8001e5c:	e7de      	b.n	8001e1c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5e:	6813      	ldr	r3, [r2, #0]
 8001e60:	f023 0307 	bic.w	r3, r3, #7
 8001e64:	432b      	orrs	r3, r5
 8001e66:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e68:	6813      	ldr	r3, [r2, #0]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	42ab      	cmp	r3, r5
 8001e70:	f47f af7b 	bne.w	8001d6a <HAL_RCC_ClockConfig+0xa>
 8001e74:	e78d      	b.n	8001d92 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e76:	686b      	ldr	r3, [r5, #4]
 8001e78:	68e1      	ldr	r1, [r4, #12]
 8001e7a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001e7e:	430b      	orrs	r3, r1
 8001e80:	606b      	str	r3, [r5, #4]
 8001e82:	e78b      	b.n	8001d9c <HAL_RCC_ClockConfig+0x3c>
 8001e84:	40022000 	.word	0x40022000
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	08003ab8 	.word	0x08003ab8
 8001e90:	20000000 	.word	0x20000000
 8001e94:	20000010 	.word	0x20000010

08001e98 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e98:	4b04      	ldr	r3, [pc, #16]	@ (8001eac <HAL_RCC_GetPCLK2Freq+0x14>)
 8001e9a:	4a05      	ldr	r2, [pc, #20]	@ (8001eb0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001ea2:	5cd3      	ldrb	r3, [r2, r3]
 8001ea4:	4a03      	ldr	r2, [pc, #12]	@ (8001eb4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001ea6:	6810      	ldr	r0, [r2, #0]
}
 8001ea8:	40d8      	lsrs	r0, r3
 8001eaa:	4770      	bx	lr
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	08003ab0 	.word	0x08003ab0
 8001eb4:	20000000 	.word	0x20000000

08001eb8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001eb8:	6803      	ldr	r3, [r0, #0]
{
 8001eba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001ebe:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ec0:	07d8      	lsls	r0, r3, #31
 8001ec2:	d521      	bpl.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ec4:	4c36      	ldr	r4, [pc, #216]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001ec6:	69e3      	ldr	r3, [r4, #28]
 8001ec8:	00d9      	lsls	r1, r3, #3
 8001eca:	d42b      	bmi.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001ecc:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ece:	69e3      	ldr	r3, [r4, #28]
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ed4:	61e3      	str	r3, [r4, #28]
 8001ed6:	69e3      	ldr	r3, [r4, #28]
 8001ed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001edc:	9301      	str	r3, [sp, #4]
 8001ede:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee0:	4f30      	ldr	r7, [pc, #192]	@ (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	05da      	lsls	r2, r3, #23
 8001ee6:	d51f      	bpl.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ee8:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001eea:	686a      	ldr	r2, [r5, #4]
 8001eec:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8001ef0:	d12e      	bne.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ef2:	6a23      	ldr	r3, [r4, #32]
 8001ef4:	686a      	ldr	r2, [r5, #4]
 8001ef6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001efa:	4313      	orrs	r3, r2
 8001efc:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001efe:	b11e      	cbz	r6, 8001f08 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f00:	69e3      	ldr	r3, [r4, #28]
 8001f02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f06:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f08:	682a      	ldr	r2, [r5, #0]
 8001f0a:	0791      	lsls	r1, r2, #30
 8001f0c:	d506      	bpl.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f0e:	4924      	ldr	r1, [pc, #144]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001f10:	68a8      	ldr	r0, [r5, #8]
 8001f12:	684b      	ldr	r3, [r1, #4]
 8001f14:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001f18:	4303      	orrs	r3, r0
 8001f1a:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f1c:	06d3      	lsls	r3, r2, #27
 8001f1e:	d436      	bmi.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f20:	2000      	movs	r0, #0
 8001f22:	e012      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 8001f24:	2600      	movs	r6, #0
 8001f26:	e7db      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f2e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001f30:	f7fe fbce 	bl	80006d0 <HAL_GetTick>
 8001f34:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	05db      	lsls	r3, r3, #23
 8001f3a:	d4d5      	bmi.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f3c:	f7fe fbc8 	bl	80006d0 <HAL_GetTick>
 8001f40:	eba0 0008 	sub.w	r0, r0, r8
 8001f44:	2864      	cmp	r0, #100	@ 0x64
 8001f46:	d9f6      	bls.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 8001f48:	2003      	movs	r0, #3
}
 8001f4a:	b002      	add	sp, #8
 8001f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f50:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d0cc      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f58:	2001      	movs	r0, #1
 8001f5a:	4a13      	ldr	r2, [pc, #76]	@ (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f5c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f5e:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f62:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f64:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f68:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f6a:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 8001f6e:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f70:	d5bf      	bpl.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8001f72:	f7fe fbad 	bl	80006d0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f76:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8001f7a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7c:	6a23      	ldr	r3, [r4, #32]
 8001f7e:	0798      	lsls	r0, r3, #30
 8001f80:	d4b7      	bmi.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f82:	f7fe fba5 	bl	80006d0 <HAL_GetTick>
 8001f86:	1bc0      	subs	r0, r0, r7
 8001f88:	4540      	cmp	r0, r8
 8001f8a:	d9f7      	bls.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8001f8c:	e7dc      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f8e:	4a04      	ldr	r2, [pc, #16]	@ (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001f90:	68e9      	ldr	r1, [r5, #12]
 8001f92:	6853      	ldr	r3, [r2, #4]
 8001f94:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001f98:	430b      	orrs	r3, r1
 8001f9a:	6053      	str	r3, [r2, #4]
 8001f9c:	e7c0      	b.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40007000 	.word	0x40007000
 8001fa8:	42420000 	.word	0x42420000

08001fac <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001fac:	2802      	cmp	r0, #2
{
 8001fae:	b508      	push	{r3, lr}
  switch (PeriphClk)
 8001fb0:	d044      	beq.n	800203c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8001fb2:	2810      	cmp	r0, #16
 8001fb4:	d003      	beq.n	8001fbe <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8001fb6:	2801      	cmp	r0, #1
 8001fb8:	d022      	beq.n	8002000 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t temp_reg = 0U, frequency = 0U;
 8001fba:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8001fbc:	e034      	b.n	8002028 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      temp_reg = RCC->CFGR;
 8001fbe:	4b25      	ldr	r3, [pc, #148]	@ (8002054 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8001fc0:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001fc2:	6818      	ldr	r0, [r3, #0]
 8001fc4:	f010 7080 	ands.w	r0, r0, #16777216	@ 0x1000000
 8001fc8:	d02e      	beq.n	8002028 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fca:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8001fce:	4822      	ldr	r0, [pc, #136]	@ (8002058 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fd0:	03d2      	lsls	r2, r2, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fd2:	bf48      	it	mi
 8001fd4:	685a      	ldrmi	r2, [r3, #4]
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fd6:	5c40      	ldrb	r0, [r0, r1]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fd8:	bf41      	itttt	mi
 8001fda:	4920      	ldrmi	r1, [pc, #128]	@ (800205c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8001fdc:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8001fe0:	5c89      	ldrbmi	r1, [r1, r2]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001fe2:	4a1f      	ldrmi	r2, [pc, #124]	@ (8002060 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001fe4:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001fe6:	bf4c      	ite	mi
 8001fe8:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fec:	4a1d      	ldrpl	r2, [pc, #116]	@ (8002064 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001fee:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ff0:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001ff4:	d418      	bmi.n	8002028 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
          frequency = (pllclk * 2) / 3;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001ffa:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001ffe:	e013      	b.n	8002028 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002000:	f240 3102 	movw	r1, #770	@ 0x302
      temp_reg = RCC->BDCR;
 8002004:	4a13      	ldr	r2, [pc, #76]	@ (8002054 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002006:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002008:	4019      	ands	r1, r3
 800200a:	f5b1 7f81 	cmp.w	r1, #258	@ 0x102
 800200e:	d01e      	beq.n	800204e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002010:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002014:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002018:	d107      	bne.n	800202a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        frequency = LSI_VALUE;
 800201a:	f649 4340 	movw	r3, #40000	@ 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800201e:	6a50      	ldr	r0, [r2, #36]	@ 0x24
        frequency = LSI_VALUE;
 8002020:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 8002024:	bf18      	it	ne
 8002026:	4618      	movne	r0, r3
}
 8002028:	bd08      	pop	{r3, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800202a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800202e:	d1c4      	bne.n	8001fba <HAL_RCCEx_GetPeriphCLKFreq+0xe>
 8002030:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8002032:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002036:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800203a:	e7f3      	b.n	8002024 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800203c:	f7ff ff2c 	bl	8001e98 <HAL_RCC_GetPCLK2Freq>
 8002040:	4b04      	ldr	r3, [pc, #16]	@ (8002054 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8002048:	3301      	adds	r3, #1
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	e7d5      	b.n	8001ffa <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
        frequency = LSE_VALUE;
 800204e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002052:	e7e9      	b.n	8002028 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8002054:	40021000 	.word	0x40021000
 8002058:	08003adc 	.word	0x08003adc
 800205c:	08003ada 	.word	0x08003ada
 8002060:	007a1200 	.word	0x007a1200
 8002064:	003d0900 	.word	0x003d0900

08002068 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002068:	b538      	push	{r3, r4, r5, lr}
 800206a:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  tickstart = HAL_GetTick();
 800206c:	f7fe fb30 	bl	80006d0 <HAL_GetTick>
 8002070:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002072:	6823      	ldr	r3, [r4, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	0692      	lsls	r2, r2, #26
 8002078:	d505      	bpl.n	8002086 <RTC_EnterInitMode+0x1e>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);


  return HAL_OK;
 800207a:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	f042 0210 	orr.w	r2, r2, #16
 8002082:	605a      	str	r2, [r3, #4]
}
 8002084:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002086:	f7fe fb23 	bl	80006d0 <HAL_GetTick>
 800208a:	1b40      	subs	r0, r0, r5
 800208c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8002090:	d9ef      	bls.n	8002072 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8002092:	2003      	movs	r0, #3
 8002094:	e7f6      	b.n	8002084 <RTC_EnterInitMode+0x1c>

08002096 <RTC_ExitInitMode>:
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002096:	6802      	ldr	r2, [r0, #0]
{
 8002098:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800209a:	6853      	ldr	r3, [r2, #4]
{
 800209c:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800209e:	f023 0310 	bic.w	r3, r3, #16
 80020a2:	6053      	str	r3, [r2, #4]

  tickstart = HAL_GetTick();
 80020a4:	f7fe fb14 	bl	80006d0 <HAL_GetTick>
 80020a8:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80020aa:	6823      	ldr	r3, [r4, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	069b      	lsls	r3, r3, #26
 80020b0:	d501      	bpl.n	80020b6 <RTC_ExitInitMode+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80020b2:	2000      	movs	r0, #0
}
 80020b4:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80020b6:	f7fe fb0b 	bl	80006d0 <HAL_GetTick>
 80020ba:	1b40      	subs	r0, r0, r5
 80020bc:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80020c0:	d9f3      	bls.n	80020aa <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 80020c2:	2003      	movs	r0, #3
 80020c4:	e7f6      	b.n	80020b4 <RTC_ExitInitMode+0x1e>

080020c6 <HAL_RTC_WaitForSynchro>:
{
 80020c6:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 80020c8:	4604      	mov	r4, r0
 80020ca:	b1a8      	cbz	r0, 80020f8 <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80020cc:	6802      	ldr	r2, [r0, #0]
 80020ce:	6853      	ldr	r3, [r2, #4]
 80020d0:	f023 0308 	bic.w	r3, r3, #8
 80020d4:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80020d6:	f7fe fafb 	bl	80006d0 <HAL_GetTick>
 80020da:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	071b      	lsls	r3, r3, #28
 80020e2:	d501      	bpl.n	80020e8 <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 80020e4:	2000      	movs	r0, #0
}
 80020e6:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80020e8:	f7fe faf2 	bl	80006d0 <HAL_GetTick>
 80020ec:	1b40      	subs	r0, r0, r5
 80020ee:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80020f2:	d9f3      	bls.n	80020dc <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 80020f4:	2003      	movs	r0, #3
 80020f6:	e7f6      	b.n	80020e6 <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 80020f8:	2001      	movs	r0, #1
 80020fa:	e7f4      	b.n	80020e6 <HAL_RTC_WaitForSynchro+0x20>

080020fc <HAL_RTC_Init>:
{
 80020fc:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 80020fe:	4604      	mov	r4, r0
 8002100:	b170      	cbz	r0, 8002120 <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002102:	7c43      	ldrb	r3, [r0, #17]
 8002104:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002108:	b913      	cbnz	r3, 8002110 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 800210a:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 800210c:	f7fe fa38 	bl	8000580 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002110:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002112:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002114:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002116:	f7ff ffd6 	bl	80020c6 <HAL_RTC_WaitForSynchro>
 800211a:	b118      	cbz	r0, 8002124 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_ERROR;
 800211c:	2304      	movs	r3, #4
 800211e:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8002120:	2001      	movs	r0, #1
}
 8002122:	bd10      	pop	{r4, pc}
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002124:	4620      	mov	r0, r4
 8002126:	f7ff ff9f 	bl	8002068 <RTC_EnterInitMode>
 800212a:	2800      	cmp	r0, #0
 800212c:	d1f6      	bne.n	800211c <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800212e:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002130:	68a1      	ldr	r1, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002132:	6853      	ldr	r3, [r2, #4]
 8002134:	f023 0307 	bic.w	r3, r3, #7
 8002138:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800213a:	4a12      	ldr	r2, [pc, #72]	@ (8002184 <HAL_RTC_Init+0x88>)
 800213c:	b119      	cbz	r1, 8002146 <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800213e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	6313      	str	r3, [r2, #48]	@ 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002146:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002148:	f423 7360 	bic.w	r3, r3, #896	@ 0x380
 800214c:	430b      	orrs	r3, r1
 800214e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002150:	6860      	ldr	r0, [r4, #4]
 8002152:	1c43      	adds	r3, r0, #1
 8002154:	d105      	bne.n	8002162 <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002156:	2001      	movs	r0, #1
 8002158:	f7ff ff28 	bl	8001fac <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 800215c:	2800      	cmp	r0, #0
 800215e:	d0dd      	beq.n	800211c <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8002160:	3801      	subs	r0, #1
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002162:	6823      	ldr	r3, [r4, #0]
 8002164:	f3c0 4203 	ubfx	r2, r0, #16, #4
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002168:	b280      	uxth	r0, r0
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800216a:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800216c:	60d8      	str	r0, [r3, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800216e:	4620      	mov	r0, r4
 8002170:	f7ff ff91 	bl	8002096 <RTC_ExitInitMode>
 8002174:	2800      	cmp	r0, #0
 8002176:	d1d1      	bne.n	800211c <HAL_RTC_Init+0x20>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002178:	2301      	movs	r3, #1
 800217a:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800217c:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 800217e:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 8002180:	e7cf      	b.n	8002122 <HAL_RTC_Init+0x26>
 8002182:	bf00      	nop
 8002184:	40006c00 	.word	0x40006c00

08002188 <HAL_RTCEx_BKUPWrite>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
  tmp += (BackupRegister * 4U);
 8002188:	0089      	lsls	r1, r1, #2
 800218a:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800218e:	f501 41d8 	add.w	r1, r1, #27648	@ 0x6c00

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8002192:	b292      	uxth	r2, r2
 8002194:	600a      	str	r2, [r1, #0]
}
 8002196:	4770      	bx	lr

08002198 <HAL_RTCEx_BKUPRead>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
  backupregister += (BackupRegister * 4U);
 8002198:	0089      	lsls	r1, r1, #2
 800219a:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800219e:	f501 41d8 	add.w	r1, r1, #27648	@ 0x6c00

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 80021a2:	6808      	ldr	r0, [r1, #0]

  /* Read the specified register */
  return pvalue;
}
 80021a4:	b280      	uxth	r0, r0
 80021a6:	4770      	bx	lr

080021a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80021a8:	b084      	sub	sp, #16
 80021aa:	a804      	add	r0, sp, #16
 80021ac:	e900 000e 	stmdb	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80021b0:	2000      	movs	r0, #0
 80021b2:	b004      	add	sp, #16
 80021b4:	4770      	bx	lr

080021b6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80021b6:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80021b8:	f44f 423f 	mov.w	r2, #48896	@ 0xbf00
  USBx->ISTR = 0U;
 80021bc:	2000      	movs	r0, #0
 80021be:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 80021c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 80021c6:	4770      	bx	lr

080021c8 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80021c8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 80021cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80021d0:	045b      	lsls	r3, r3, #17
 80021d2:	0c5b      	lsrs	r3, r3, #17
 80021d4:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 80021d8:	2000      	movs	r0, #0
 80021da:	4770      	bx	lr

080021dc <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80021dc:	2000      	movs	r0, #0
 80021de:	4770      	bx	lr

080021e0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80021e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80021e2:	4604      	mov	r4, r0
 80021e4:	a804      	add	r0, sp, #16
 80021e6:	e900 000e 	stmdb	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80021ea:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80021ec:	2301      	movs	r3, #1
 80021ee:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
  USBx->CNTR = 0U;
 80021f2:	f8a4 0040 	strh.w	r0, [r4, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80021f6:	f8a4 0044 	strh.w	r0, [r4, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80021fa:	f8a4 0050 	strh.w	r0, [r4, #80]	@ 0x50

  return HAL_OK;
}
 80021fe:	b004      	add	sp, #16
 8002200:	bd10      	pop	{r4, pc}
	...

08002204 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002204:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002206:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8002208:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800220a:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 800220e:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002210:	f424 44ec 	bic.w	r4, r4, #30208	@ 0x7600
 8002214:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 8002218:	0424      	lsls	r4, r4, #16
 800221a:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 800221c:	2d03      	cmp	r5, #3
 800221e:	d84b      	bhi.n	80022b8 <USB_ActivateEndpoint+0xb4>
 8002220:	e8df f005 	tbb	[pc, r5]
 8002224:	43454702 	.word	0x43454702
  HAL_StatusTypeDef ret = HAL_OK;
 8002228:	4628      	mov	r0, r5
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800222a:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800222e:	f248 0680 	movw	r6, #32896	@ 0x8080
 8002232:	4334      	orrs	r4, r6
 8002234:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002238:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800223c:	4f9e      	ldr	r7, [pc, #632]	@ (80024b8 <USB_ActivateEndpoint+0x2b4>)
 800223e:	b2a4      	uxth	r4, r4
 8002240:	403c      	ands	r4, r7
 8002242:	4314      	orrs	r4, r2
 8002244:	4334      	orrs	r4, r6
 8002246:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 800224a:	7b0c      	ldrb	r4, [r1, #12]
 800224c:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 8002250:	2c00      	cmp	r4, #0
 8002252:	f040 808b 	bne.w	800236c <USB_ActivateEndpoint+0x168>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002256:	88cc      	ldrh	r4, [r1, #6]
    if (ep->is_in != 0U)
 8002258:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800225a:	0864      	lsrs	r4, r4, #1
 800225c:	0064      	lsls	r4, r4, #1
    if (ep->is_in != 0U)
 800225e:	b36e      	cbz	r6, 80022bc <USB_ActivateEndpoint+0xb8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002260:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8002264:	b289      	uxth	r1, r1
 8002266:	4461      	add	r1, ip
 8002268:	f8a1 4400 	strh.w	r4, [r1, #1024]	@ 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800226c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002270:	0649      	lsls	r1, r1, #25
 8002272:	d509      	bpl.n	8002288 <USB_ActivateEndpoint+0x84>
 8002274:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002278:	b289      	uxth	r1, r1
 800227a:	4039      	ands	r1, r7
 800227c:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8002280:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8002284:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002288:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800228c:	4c8b      	ldr	r4, [pc, #556]	@ (80024bc <USB_ActivateEndpoint+0x2b8>)
 800228e:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8002290:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002292:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8002296:	d001      	beq.n	800229c <USB_ActivateEndpoint+0x98>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002298:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800229c:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80022a0:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80022a4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 80022a8:	e04a      	b.n	8002340 <USB_ActivateEndpoint+0x13c>
      wEpRegVal |= USB_EP_INTERRUPT;
 80022aa:	f444 64c0 	orr.w	r4, r4, #1536	@ 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 80022ae:	2000      	movs	r0, #0
      break;
 80022b0:	e7bd      	b.n	800222e <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80022b2:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
      break;
 80022b6:	e7fa      	b.n	80022ae <USB_ActivateEndpoint+0xaa>
  switch (ep->type)
 80022b8:	2001      	movs	r0, #1
 80022ba:	e7b8      	b.n	800222e <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80022bc:	f8b3 5050 	ldrh.w	r5, [r3, #80]	@ 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80022c0:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80022c2:	b2ad      	uxth	r5, r5
 80022c4:	4465      	add	r5, ip
 80022c6:	f8a5 4408 	strh.w	r4, [r5, #1032]	@ 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80022ca:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 80022ce:	293e      	cmp	r1, #62	@ 0x3e
 80022d0:	b2a4      	uxth	r4, r4
 80022d2:	4464      	add	r4, ip
 80022d4:	f8b4 540c 	ldrh.w	r5, [r4, #1036]	@ 0x40c
 80022d8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80022dc:	f8a4 540c 	strh.w	r5, [r4, #1036]	@ 0x40c
 80022e0:	d92f      	bls.n	8002342 <USB_ActivateEndpoint+0x13e>
 80022e2:	094d      	lsrs	r5, r1, #5
 80022e4:	06ce      	lsls	r6, r1, #27
 80022e6:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 80022ea:	bf08      	it	eq
 80022ec:	f105 35ff 	addeq.w	r5, r5, #4294967295
 80022f0:	b289      	uxth	r1, r1
 80022f2:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 80022f6:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80022fa:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80022fe:	b289      	uxth	r1, r1
 8002300:	f8a4 140c 	strh.w	r1, [r4, #1036]	@ 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002304:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002308:	044f      	lsls	r7, r1, #17
 800230a:	d50d      	bpl.n	8002328 <USB_ActivateEndpoint+0x124>
 800230c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002310:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8002314:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8002318:	0409      	lsls	r1, r1, #16
 800231a:	0c09      	lsrs	r1, r1, #16
 800231c:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8002320:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8002324:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 8002328:	4c65      	ldr	r4, [pc, #404]	@ (80024c0 <USB_ActivateEndpoint+0x2bc>)
 800232a:	b9c2      	cbnz	r2, 800235e <USB_ActivateEndpoint+0x15a>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800232c:	881a      	ldrh	r2, [r3, #0]
 800232e:	b292      	uxth	r2, r2
 8002330:	4022      	ands	r2, r4
 8002332:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 8002336:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800233a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800233e:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8002340:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002342:	b911      	cbnz	r1, 800234a <USB_ActivateEndpoint+0x146>
 8002344:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8002348:	e7d5      	b.n	80022f6 <USB_ActivateEndpoint+0xf2>
 800234a:	084d      	lsrs	r5, r1, #1
 800234c:	07c9      	lsls	r1, r1, #31
 800234e:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8002352:	bf48      	it	mi
 8002354:	3501      	addmi	r5, #1
 8002356:	b289      	uxth	r1, r1
 8002358:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 800235c:	e7cf      	b.n	80022fe <USB_ActivateEndpoint+0xfa>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800235e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002362:	b289      	uxth	r1, r1
 8002364:	4021      	ands	r1, r4
 8002366:	f481 5100 	eor.w	r1, r1, #8192	@ 0x2000
 800236a:	e797      	b.n	800229c <USB_ActivateEndpoint+0x98>
    if (ep->type == EP_TYPE_BULK)
 800236c:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800236e:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 8002372:	d15b      	bne.n	800242c <USB_ActivateEndpoint+0x228>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002374:	b2a4      	uxth	r4, r4
 8002376:	403c      	ands	r4, r7
 8002378:	f444 4401 	orr.w	r4, r4, #33024	@ 0x8100
 800237c:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
 8002380:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002384:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8002388:	890e      	ldrh	r6, [r1, #8]
 800238a:	b2a4      	uxth	r4, r4
 800238c:	0876      	lsrs	r6, r6, #1
 800238e:	4464      	add	r4, ip
 8002390:	0076      	lsls	r6, r6, #1
 8002392:	f8a4 6400 	strh.w	r6, [r4, #1024]	@ 0x400
 8002396:	894e      	ldrh	r6, [r1, #10]
 8002398:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 800239c:	0876      	lsrs	r6, r6, #1
 800239e:	b2a4      	uxth	r4, r4
 80023a0:	4464      	add	r4, ip
 80023a2:	0076      	lsls	r6, r6, #1
 80023a4:	f8a4 6408 	strh.w	r6, [r4, #1032]	@ 0x408
    if (ep->is_in == 0U)
 80023a8:	7849      	ldrb	r1, [r1, #1]
 80023aa:	2900      	cmp	r1, #0
 80023ac:	d148      	bne.n	8002440 <USB_ActivateEndpoint+0x23c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80023ae:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80023b2:	044e      	lsls	r6, r1, #17
 80023b4:	d50d      	bpl.n	80023d2 <USB_ActivateEndpoint+0x1ce>
 80023b6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80023ba:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80023be:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80023c2:	0409      	lsls	r1, r1, #16
 80023c4:	0c09      	lsrs	r1, r1, #16
 80023c6:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 80023ca:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80023ce:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80023d2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80023d6:	064d      	lsls	r5, r1, #25
 80023d8:	d50d      	bpl.n	80023f6 <USB_ActivateEndpoint+0x1f2>
 80023da:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80023de:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80023e2:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80023e6:	0409      	lsls	r1, r1, #16
 80023e8:	0c09      	lsrs	r1, r1, #16
 80023ea:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80023ee:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 80023f2:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80023f6:	f248 0480 	movw	r4, #32896	@ 0x8080
 80023fa:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80023fe:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8002402:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8002406:	0409      	lsls	r1, r1, #16
 8002408:	0c09      	lsrs	r1, r1, #16
 800240a:	f481 5140 	eor.w	r1, r1, #12288	@ 0x3000
 800240e:	4321      	orrs	r1, r4
 8002410:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002414:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002418:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 800241c:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8002420:	0409      	lsls	r1, r1, #16
 8002422:	0c09      	lsrs	r1, r1, #16
 8002424:	430c      	orrs	r4, r1
 8002426:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 800242a:	e789      	b.n	8002340 <USB_ActivateEndpoint+0x13c>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800242c:	f424 44e2 	bic.w	r4, r4, #28928	@ 0x7100
 8002430:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 8002434:	0424      	lsls	r4, r4, #16
 8002436:	0c24      	lsrs	r4, r4, #16
 8002438:	4326      	orrs	r6, r4
 800243a:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 800243e:	e7a1      	b.n	8002384 <USB_ActivateEndpoint+0x180>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002440:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002444:	044c      	lsls	r4, r1, #17
 8002446:	d50d      	bpl.n	8002464 <USB_ActivateEndpoint+0x260>
 8002448:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800244c:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8002450:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8002454:	0409      	lsls	r1, r1, #16
 8002456:	0c09      	lsrs	r1, r1, #16
 8002458:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 800245c:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8002460:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002464:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002468:	0649      	lsls	r1, r1, #25
 800246a:	d50d      	bpl.n	8002488 <USB_ActivateEndpoint+0x284>
 800246c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002470:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8002474:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8002478:	0409      	lsls	r1, r1, #16
 800247a:	0c09      	lsrs	r1, r1, #16
 800247c:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8002480:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8002484:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002488:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800248c:	4c0b      	ldr	r4, [pc, #44]	@ (80024bc <USB_ActivateEndpoint+0x2b8>)
 800248e:	b289      	uxth	r1, r1
 8002490:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8002492:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002494:	bf18      	it	ne
 8002496:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800249a:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800249e:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80024a2:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80024a6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80024aa:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 80024ae:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80024b2:	0409      	lsls	r1, r1, #16
 80024b4:	0c09      	lsrs	r1, r1, #16
 80024b6:	e6f1      	b.n	800229c <USB_ActivateEndpoint+0x98>
 80024b8:	ffff8f8f 	.word	0xffff8f8f
 80024bc:	ffff8fbf 	.word	0xffff8fbf
 80024c0:	ffffbf8f 	.word	0xffffbf8f

080024c4 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 80024c4:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80024c6:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 80024c8:	b18b      	cbz	r3, 80024ee <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80024ca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024d6:	041b      	lsls	r3, r3, #16
 80024d8:	0c1b      	lsrs	r3, r3, #16
 80024da:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80024de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024e6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 80024ea:	2000      	movs	r0, #0
 80024ec:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80024ee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80024f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024fa:	041b      	lsls	r3, r3, #16
 80024fc:	0c1b      	lsrs	r3, r3, #16
 80024fe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002502:	e7ec      	b.n	80024de <USB_EPSetStall+0x1a>

08002504 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8002504:	7b0b      	ldrb	r3, [r1, #12]
 8002506:	bb3b      	cbnz	r3, 8002558 <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 8002508:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800250a:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800250c:	b333      	cbz	r3, 800255c <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800250e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002512:	065b      	lsls	r3, r3, #25
 8002514:	d50d      	bpl.n	8002532 <USB_EPClearStall+0x2e>
 8002516:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800251a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800251e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002522:	041b      	lsls	r3, r3, #16
 8002524:	0c1b      	lsrs	r3, r3, #16
 8002526:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800252a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800252e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002532:	78cb      	ldrb	r3, [r1, #3]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d00f      	beq.n	8002558 <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002538:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800253c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002540:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002544:	041b      	lsls	r3, r3, #16
 8002546:	0c1b      	lsrs	r3, r3, #16
 8002548:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800254c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002554:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8002558:	2000      	movs	r0, #0
 800255a:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800255c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002560:	045b      	lsls	r3, r3, #17
 8002562:	d50d      	bpl.n	8002580 <USB_EPClearStall+0x7c>
 8002564:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002568:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800256c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002570:	041b      	lsls	r3, r3, #16
 8002572:	0c1b      	lsrs	r3, r3, #16
 8002574:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002578:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800257c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002580:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002584:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002588:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800258c:	041b      	lsls	r3, r3, #16
 800258e:	0c1b      	lsrs	r3, r3, #16
 8002590:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8002594:	e7da      	b.n	800254c <USB_EPClearStall+0x48>

08002596 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8002596:	b911      	cbnz	r1, 800259e <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8002598:	2380      	movs	r3, #128	@ 0x80
 800259a:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 800259e:	2000      	movs	r0, #0
 80025a0:	4770      	bx	lr

080025a2 <USB_DevConnect>:
/**
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
 80025a2:	2000      	movs	r0, #0
 80025a4:	4770      	bx	lr

080025a6 <USB_DevDisconnect>:
/**
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
 80025a6:	2000      	movs	r0, #0
 80025a8:	4770      	bx	lr

080025aa <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80025aa:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 80025ae:	b280      	uxth	r0, r0
 80025b0:	4770      	bx	lr

080025b2 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80025b2:	2000      	movs	r0, #0
 80025b4:	4770      	bx	lr

080025b6 <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80025b6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80025ba:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80025bc:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80025c0:	085b      	lsrs	r3, r3, #1
 80025c2:	eb00 0383 	add.w	r3, r0, r3, lsl #2

  for (count = n; count != 0U; count--)
 80025c6:	4283      	cmp	r3, r0
 80025c8:	d100      	bne.n	80025cc <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 80025ca:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 80025cc:	f831 2b02 	ldrh.w	r2, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 80025d0:	f820 2b04 	strh.w	r2, [r0], #4
  for (count = n; count != 0U; count--)
 80025d4:	e7f7      	b.n	80025c6 <USB_WritePMA+0x10>

080025d6 <USB_EPStartXfer>:
{
 80025d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 80025da:	784b      	ldrb	r3, [r1, #1]
{
 80025dc:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 80025de:	2b01      	cmp	r3, #1
{
 80025e0:	460d      	mov	r5, r1
    if (ep->doublebuffer == 0U)
 80025e2:	7b0a      	ldrb	r2, [r1, #12]
  if (ep->is_in == 1U)
 80025e4:	f040 8118 	bne.w	8002818 <USB_EPStartXfer+0x242>
    if (ep->xfer_len > ep->maxpacket)
 80025e8:	f8d1 9010 	ldr.w	r9, [r1, #16]
 80025ec:	698f      	ldr	r7, [r1, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80025ee:	6949      	ldr	r1, [r1, #20]
 80025f0:	454f      	cmp	r7, r9
 80025f2:	bf28      	it	cs
 80025f4:	464f      	movcs	r7, r9
    if (ep->doublebuffer == 0U)
 80025f6:	bb0a      	cbnz	r2, 800263c <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80025f8:	b2bf      	uxth	r7, r7
 80025fa:	88ea      	ldrh	r2, [r5, #6]
 80025fc:	463b      	mov	r3, r7
 80025fe:	f7ff ffda 	bl	80025b6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002602:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8002606:	7829      	ldrb	r1, [r5, #0]
 8002608:	b280      	uxth	r0, r0
 800260a:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 800260e:	0109      	lsls	r1, r1, #4
 8002610:	4402      	add	r2, r0
 8002612:	528f      	strh	r7, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002614:	782a      	ldrb	r2, [r5, #0]
 8002616:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800261a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800261e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002622:	041b      	lsls	r3, r3, #16
 8002624:	0c1b      	lsrs	r3, r3, #16
 8002626:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
  return HAL_OK;
 800262a:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800262c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002630:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002634:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8002638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ep->type == EP_TYPE_BULK)
 800263c:	78eb      	ldrb	r3, [r5, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800263e:	f895 e000 	ldrb.w	lr, [r5]
      if (ep->type == EP_TYPE_BULK)
 8002642:	2b02      	cmp	r3, #2
        if (ep->xfer_len_db > ep->maxpacket)
 8002644:	6a2e      	ldr	r6, [r5, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002646:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
      if (ep->type == EP_TYPE_BULK)
 800264a:	f040 80d0 	bne.w	80027ee <USB_EPStartXfer+0x218>
        if (ep->xfer_len_db > ep->maxpacket)
 800264e:	45b1      	cmp	r9, r6
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002650:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 8002654:	f080 80b4 	bcs.w	80027c0 <USB_EPStartXfer+0x1ea>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002658:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800265c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002660:	0412      	lsls	r2, r2, #16
 8002662:	0c12      	lsrs	r2, r2, #16
 8002664:	f442 4201 	orr.w	r2, r2, #33024	@ 0x8100
 8002668:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800266c:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002670:	f830 802e 	ldrh.w	r8, [r0, lr, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002674:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
          ep->xfer_len_db -= len;
 8002678:	1bf6      	subs	r6, r6, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800267a:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
          ep->xfer_len_db -= len;
 800267e:	622e      	str	r6, [r5, #32]
            ep->xfer_buff += len;
 8002680:	eb01 0a07 	add.w	sl, r1, r7
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002684:	b2bb      	uxth	r3, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002686:	fa1f fe8e 	uxth.w	lr, lr
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800268a:	d04e      	beq.n	800272a <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800268c:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 8002690:	4472      	add	r2, lr
 8002692:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002696:	896a      	ldrh	r2, [r5, #10]
 8002698:	f7ff ff8d 	bl	80025b6 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800269c:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 800269e:	bf36      	itet	cc
 80026a0:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 80026a2:	2300      	movcs	r3, #0
 80026a4:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80026a6:	786a      	ldrb	r2, [r5, #1]
 80026a8:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 80026aa:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80026ae:	b2b3      	uxth	r3, r6
 80026b0:	bb7a      	cbnz	r2, 8002712 <USB_EPStartXfer+0x13c>
 80026b2:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 80026b6:	7828      	ldrb	r0, [r5, #0]
 80026b8:	b292      	uxth	r2, r2
 80026ba:	f204 4104 	addw	r1, r4, #1028	@ 0x404
 80026be:	0100      	lsls	r0, r0, #4
 80026c0:	4411      	add	r1, r2
 80026c2:	5a42      	ldrh	r2, [r0, r1]
 80026c4:	2e3e      	cmp	r6, #62	@ 0x3e
 80026c6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80026ca:	5242      	strh	r2, [r0, r1]
 80026cc:	d914      	bls.n	80026f8 <USB_EPStartXfer+0x122>
 80026ce:	5a42      	ldrh	r2, [r0, r1]
 80026d0:	0977      	lsrs	r7, r6, #5
 80026d2:	06f6      	lsls	r6, r6, #27
 80026d4:	bf08      	it	eq
 80026d6:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80026da:	b292      	uxth	r2, r2
 80026dc:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80026e0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80026e4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80026e8:	b292      	uxth	r2, r2
 80026ea:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80026ec:	892a      	ldrh	r2, [r5, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80026ee:	4651      	mov	r1, sl
 80026f0:	4620      	mov	r0, r4
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80026f2:	f7ff ff60 	bl	80025b6 <USB_WritePMA>
 80026f6:	e78d      	b.n	8002614 <USB_EPStartXfer+0x3e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80026f8:	b90e      	cbnz	r6, 80026fe <USB_EPStartXfer+0x128>
 80026fa:	5a42      	ldrh	r2, [r0, r1]
 80026fc:	e7f0      	b.n	80026e0 <USB_EPStartXfer+0x10a>
 80026fe:	07f2      	lsls	r2, r6, #31
 8002700:	5a42      	ldrh	r2, [r0, r1]
 8002702:	ea4f 0756 	mov.w	r7, r6, lsr #1
 8002706:	bf48      	it	mi
 8002708:	3701      	addmi	r7, #1
 800270a:	b292      	uxth	r2, r2
 800270c:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8002710:	e7ea      	b.n	80026e8 <USB_EPStartXfer+0x112>
 8002712:	2a01      	cmp	r2, #1
 8002714:	d1ea      	bne.n	80026ec <USB_EPStartXfer+0x116>
 8002716:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 800271a:	7829      	ldrb	r1, [r5, #0]
 800271c:	b280      	uxth	r0, r0
 800271e:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 8002722:	0109      	lsls	r1, r1, #4
 8002724:	4402      	add	r2, r0
 8002726:	528b      	strh	r3, [r1, r2]
 8002728:	e7e0      	b.n	80026ec <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800272a:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 800272e:	4472      	add	r2, lr
 8002730:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002734:	892a      	ldrh	r2, [r5, #8]
 8002736:	f7ff ff3e 	bl	80025b6 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800273a:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 800273c:	bf36      	itet	cc
 800273e:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 8002740:	4643      	movcs	r3, r8
 8002742:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002744:	786a      	ldrb	r2, [r5, #1]
 8002746:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 8002748:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800274c:	b2b3      	uxth	r3, r6
 800274e:	bb5a      	cbnz	r2, 80027a8 <USB_EPStartXfer+0x1d2>
 8002750:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 8002754:	7828      	ldrb	r0, [r5, #0]
 8002756:	b292      	uxth	r2, r2
 8002758:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 800275c:	0100      	lsls	r0, r0, #4
 800275e:	4411      	add	r1, r2
 8002760:	5a42      	ldrh	r2, [r0, r1]
 8002762:	2e3e      	cmp	r6, #62	@ 0x3e
 8002764:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002768:	5242      	strh	r2, [r0, r1]
 800276a:	d910      	bls.n	800278e <USB_EPStartXfer+0x1b8>
 800276c:	5a42      	ldrh	r2, [r0, r1]
 800276e:	0977      	lsrs	r7, r6, #5
 8002770:	06f6      	lsls	r6, r6, #27
 8002772:	bf08      	it	eq
 8002774:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8002778:	b292      	uxth	r2, r2
 800277a:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800277e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002782:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002786:	b292      	uxth	r2, r2
 8002788:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800278a:	896a      	ldrh	r2, [r5, #10]
 800278c:	e7af      	b.n	80026ee <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800278e:	b90e      	cbnz	r6, 8002794 <USB_EPStartXfer+0x1be>
 8002790:	5a42      	ldrh	r2, [r0, r1]
 8002792:	e7f4      	b.n	800277e <USB_EPStartXfer+0x1a8>
 8002794:	07f2      	lsls	r2, r6, #31
 8002796:	5a42      	ldrh	r2, [r0, r1]
 8002798:	ea4f 0756 	mov.w	r7, r6, lsr #1
 800279c:	bf48      	it	mi
 800279e:	3701      	addmi	r7, #1
 80027a0:	b292      	uxth	r2, r2
 80027a2:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80027a6:	e7ee      	b.n	8002786 <USB_EPStartXfer+0x1b0>
 80027a8:	2a01      	cmp	r2, #1
 80027aa:	d1ee      	bne.n	800278a <USB_EPStartXfer+0x1b4>
 80027ac:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80027b0:	7829      	ldrb	r1, [r5, #0]
 80027b2:	b280      	uxth	r0, r0
 80027b4:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 80027b8:	0109      	lsls	r1, r1, #4
 80027ba:	4402      	add	r2, r0
 80027bc:	528b      	strh	r3, [r1, r2]
 80027be:	e7e4      	b.n	800278a <USB_EPStartXfer+0x1b4>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80027c0:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 80027c4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80027c8:	0412      	lsls	r2, r2, #16
 80027ca:	0c12      	lsrs	r2, r2, #16
 80027cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027d0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80027d4:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80027d8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80027dc:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	441a      	add	r2, r3
 80027e4:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80027e6:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80027ea:	892a      	ldrh	r2, [r5, #8]
 80027ec:	e781      	b.n	80026f2 <USB_EPStartXfer+0x11c>
        ep->xfer_len_db -= len;
 80027ee:	1bf6      	subs	r6, r6, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80027f0:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        ep->xfer_len_db -= len;
 80027f4:	622e      	str	r6, [r5, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80027f6:	f8b0 6050 	ldrh.w	r6, [r0, #80]	@ 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80027fa:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80027fc:	0657      	lsls	r7, r2, #25
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80027fe:	b2b6      	uxth	r6, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002800:	d506      	bpl.n	8002810 <USB_EPStartXfer+0x23a>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002802:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 8002806:	4432      	add	r2, r6
 8002808:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800280c:	896a      	ldrh	r2, [r5, #10]
 800280e:	e770      	b.n	80026f2 <USB_EPStartXfer+0x11c>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002810:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8002814:	4432      	add	r2, r6
 8002816:	e7e6      	b.n	80027e6 <USB_EPStartXfer+0x210>
    if (ep->doublebuffer == 0U)
 8002818:	2a00      	cmp	r2, #0
 800281a:	d13b      	bne.n	8002894 <USB_EPStartXfer+0x2be>
      if (ep->xfer_len > ep->maxpacket)
 800281c:	698b      	ldr	r3, [r1, #24]
 800281e:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002820:	f8b0 0050 	ldrh.w	r0, [r0, #80]	@ 0x50
      if (ep->xfer_len > ep->maxpacket)
 8002824:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 8002826:	bf84      	itt	hi
 8002828:	1a5a      	subhi	r2, r3, r1
 800282a:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800282c:	7829      	ldrb	r1, [r5, #0]
 800282e:	61aa      	str	r2, [r5, #24]
 8002830:	b280      	uxth	r0, r0
 8002832:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 8002836:	0109      	lsls	r1, r1, #4
 8002838:	4402      	add	r2, r0
 800283a:	5a88      	ldrh	r0, [r1, r2]
 800283c:	2b3e      	cmp	r3, #62	@ 0x3e
 800283e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8002842:	5288      	strh	r0, [r1, r2]
 8002844:	d91a      	bls.n	800287c <USB_EPStartXfer+0x2a6>
 8002846:	0958      	lsrs	r0, r3, #5
 8002848:	06de      	lsls	r6, r3, #27
 800284a:	5a8b      	ldrh	r3, [r1, r2]
 800284c:	bf08      	it	eq
 800284e:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002852:	b29b      	uxth	r3, r3
 8002854:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8002858:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800285c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002860:	b29b      	uxth	r3, r3
 8002862:	528b      	strh	r3, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002864:	782a      	ldrb	r2, [r5, #0]
 8002866:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800286a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800286e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002872:	041b      	lsls	r3, r3, #16
 8002874:	0c1b      	lsrs	r3, r3, #16
 8002876:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 800287a:	e6d6      	b.n	800262a <USB_EPStartXfer+0x54>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800287c:	b90b      	cbnz	r3, 8002882 <USB_EPStartXfer+0x2ac>
 800287e:	5a8b      	ldrh	r3, [r1, r2]
 8002880:	e7ea      	b.n	8002858 <USB_EPStartXfer+0x282>
 8002882:	0858      	lsrs	r0, r3, #1
 8002884:	07db      	lsls	r3, r3, #31
 8002886:	5a8b      	ldrh	r3, [r1, r2]
 8002888:	bf48      	it	mi
 800288a:	3001      	addmi	r0, #1
 800288c:	b29b      	uxth	r3, r3
 800288e:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8002892:	e7e5      	b.n	8002860 <USB_EPStartXfer+0x28a>
      if (ep->type == EP_TYPE_BULK)
 8002894:	78ca      	ldrb	r2, [r1, #3]
 8002896:	2a02      	cmp	r2, #2
 8002898:	d170      	bne.n	800297c <USB_EPStartXfer+0x3a6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800289a:	2b00      	cmp	r3, #0
 800289c:	d138      	bne.n	8002910 <USB_EPStartXfer+0x33a>
 800289e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80028a2:	780b      	ldrb	r3, [r1, #0]
 80028a4:	b292      	uxth	r2, r2
 80028a6:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	4410      	add	r0, r2
 80028ae:	5ac2      	ldrh	r2, [r0, r3]
 80028b0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80028b4:	52c2      	strh	r2, [r0, r3]
 80028b6:	690a      	ldr	r2, [r1, #16]
 80028b8:	2a3e      	cmp	r2, #62	@ 0x3e
 80028ba:	d946      	bls.n	800294a <USB_EPStartXfer+0x374>
 80028bc:	5ac1      	ldrh	r1, [r0, r3]
 80028be:	0956      	lsrs	r6, r2, #5
 80028c0:	06d7      	lsls	r7, r2, #27
 80028c2:	bf08      	it	eq
 80028c4:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80028c8:	b289      	uxth	r1, r1
 80028ca:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80028ce:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80028d2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80028d6:	b289      	uxth	r1, r1
 80028d8:	52c1      	strh	r1, [r0, r3]
 80028da:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80028de:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 80028e2:	b280      	uxth	r0, r0
 80028e4:	4401      	add	r1, r0
 80028e6:	5ac8      	ldrh	r0, [r1, r3]
 80028e8:	2a3e      	cmp	r2, #62	@ 0x3e
 80028ea:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80028ee:	52c8      	strh	r0, [r1, r3]
 80028f0:	d938      	bls.n	8002964 <USB_EPStartXfer+0x38e>
 80028f2:	0950      	lsrs	r0, r2, #5
 80028f4:	06d7      	lsls	r7, r2, #27
 80028f6:	5aca      	ldrh	r2, [r1, r3]
 80028f8:	bf08      	it	eq
 80028fa:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80028fe:	b292      	uxth	r2, r2
 8002900:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8002904:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002908:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800290c:	b292      	uxth	r2, r2
 800290e:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 8002910:	69eb      	ldr	r3, [r5, #28]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0a6      	beq.n	8002864 <USB_EPStartXfer+0x28e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8002916:	f244 0340 	movw	r3, #16448	@ 0x4040
 800291a:	782a      	ldrb	r2, [r5, #0]
 800291c:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8002920:	ea03 0001 	and.w	r0, r3, r1
 8002924:	438b      	bics	r3, r1
 8002926:	d001      	beq.n	800292c <USB_EPStartXfer+0x356>
 8002928:	2800      	cmp	r0, #0
 800292a:	d19b      	bne.n	8002864 <USB_EPStartXfer+0x28e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800292c:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002930:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002934:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002938:	041b      	lsls	r3, r3, #16
 800293a:	0c1b      	lsrs	r3, r3, #16
 800293c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002940:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002944:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8002948:	e78c      	b.n	8002864 <USB_EPStartXfer+0x28e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800294a:	b90a      	cbnz	r2, 8002950 <USB_EPStartXfer+0x37a>
 800294c:	5ac1      	ldrh	r1, [r0, r3]
 800294e:	e7be      	b.n	80028ce <USB_EPStartXfer+0x2f8>
 8002950:	07d1      	lsls	r1, r2, #31
 8002952:	5ac1      	ldrh	r1, [r0, r3]
 8002954:	ea4f 0652 	mov.w	r6, r2, lsr #1
 8002958:	bf48      	it	mi
 800295a:	3601      	addmi	r6, #1
 800295c:	b289      	uxth	r1, r1
 800295e:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8002962:	e7b8      	b.n	80028d6 <USB_EPStartXfer+0x300>
 8002964:	b90a      	cbnz	r2, 800296a <USB_EPStartXfer+0x394>
 8002966:	5aca      	ldrh	r2, [r1, r3]
 8002968:	e7cc      	b.n	8002904 <USB_EPStartXfer+0x32e>
 800296a:	0850      	lsrs	r0, r2, #1
 800296c:	07d6      	lsls	r6, r2, #31
 800296e:	5aca      	ldrh	r2, [r1, r3]
 8002970:	bf48      	it	mi
 8002972:	3001      	addmi	r0, #1
 8002974:	b292      	uxth	r2, r2
 8002976:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800297a:	e7c7      	b.n	800290c <USB_EPStartXfer+0x336>
      else if (ep->type == EP_TYPE_ISOC)
 800297c:	2a01      	cmp	r2, #1
 800297e:	d15d      	bne.n	8002a3c <USB_EPStartXfer+0x466>
        if (ep->xfer_len > ep->maxpacket)
 8002980:	698a      	ldr	r2, [r1, #24]
 8002982:	6909      	ldr	r1, [r1, #16]
 8002984:	428a      	cmp	r2, r1
          ep->xfer_len = 0U;
 8002986:	bf94      	ite	ls
 8002988:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 800298a:	1a50      	subhi	r0, r2, r1
 800298c:	61a8      	str	r0, [r5, #24]
 800298e:	bf88      	it	hi
 8002990:	460a      	movhi	r2, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002992:	2b00      	cmp	r3, #0
 8002994:	f47f af66 	bne.w	8002864 <USB_EPStartXfer+0x28e>
 8002998:	f8b4 1050 	ldrh.w	r1, [r4, #80]	@ 0x50
 800299c:	782b      	ldrb	r3, [r5, #0]
 800299e:	b289      	uxth	r1, r1
 80029a0:	f204 4004 	addw	r0, r4, #1028	@ 0x404
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	4408      	add	r0, r1
 80029a8:	5ac1      	ldrh	r1, [r0, r3]
 80029aa:	2a3e      	cmp	r2, #62	@ 0x3e
 80029ac:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80029b0:	52c1      	strh	r1, [r0, r3]
 80029b2:	d92b      	bls.n	8002a0c <USB_EPStartXfer+0x436>
 80029b4:	06d1      	lsls	r1, r2, #27
 80029b6:	5ac1      	ldrh	r1, [r0, r3]
 80029b8:	ea4f 1652 	mov.w	r6, r2, lsr #5
 80029bc:	bf08      	it	eq
 80029be:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80029c2:	b289      	uxth	r1, r1
 80029c4:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80029c8:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80029cc:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80029d0:	b289      	uxth	r1, r1
 80029d2:	52c1      	strh	r1, [r0, r3]
 80029d4:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80029d8:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 80029dc:	b280      	uxth	r0, r0
 80029de:	4401      	add	r1, r0
 80029e0:	5ac8      	ldrh	r0, [r1, r3]
 80029e2:	2a3e      	cmp	r2, #62	@ 0x3e
 80029e4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80029e8:	52c8      	strh	r0, [r1, r3]
 80029ea:	d91b      	bls.n	8002a24 <USB_EPStartXfer+0x44e>
 80029ec:	0950      	lsrs	r0, r2, #5
 80029ee:	06d6      	lsls	r6, r2, #27
 80029f0:	5aca      	ldrh	r2, [r1, r3]
 80029f2:	bf08      	it	eq
 80029f4:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80029f8:	b292      	uxth	r2, r2
 80029fa:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80029fe:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002a02:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002a06:	b292      	uxth	r2, r2
 8002a08:	52ca      	strh	r2, [r1, r3]
 8002a0a:	e72b      	b.n	8002864 <USB_EPStartXfer+0x28e>
 8002a0c:	b90a      	cbnz	r2, 8002a12 <USB_EPStartXfer+0x43c>
 8002a0e:	5ac1      	ldrh	r1, [r0, r3]
 8002a10:	e7da      	b.n	80029c8 <USB_EPStartXfer+0x3f2>
 8002a12:	5ac1      	ldrh	r1, [r0, r3]
 8002a14:	0856      	lsrs	r6, r2, #1
 8002a16:	07d7      	lsls	r7, r2, #31
 8002a18:	bf48      	it	mi
 8002a1a:	3601      	addmi	r6, #1
 8002a1c:	b289      	uxth	r1, r1
 8002a1e:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8002a22:	e7d5      	b.n	80029d0 <USB_EPStartXfer+0x3fa>
 8002a24:	b90a      	cbnz	r2, 8002a2a <USB_EPStartXfer+0x454>
 8002a26:	5aca      	ldrh	r2, [r1, r3]
 8002a28:	e7e9      	b.n	80029fe <USB_EPStartXfer+0x428>
 8002a2a:	0850      	lsrs	r0, r2, #1
 8002a2c:	07d2      	lsls	r2, r2, #31
 8002a2e:	5aca      	ldrh	r2, [r1, r3]
 8002a30:	bf48      	it	mi
 8002a32:	3001      	addmi	r0, #1
 8002a34:	b292      	uxth	r2, r2
 8002a36:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8002a3a:	e7e4      	b.n	8002a06 <USB_EPStartXfer+0x430>
        return HAL_ERROR;
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	e5fb      	b.n	8002638 <USB_EPStartXfer+0x62>

08002a40 <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002a40:	eb00 0042 	add.w	r0, r0, r2, lsl #1
{
 8002a44:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002a46:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8002a4a:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 8002a4c:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002a4e:	4607      	mov	r7, r0
  for (count = n; count != 0U; count--)
 8002a50:	462e      	mov	r6, r5
 8002a52:	3402      	adds	r4, #2
 8002a54:	b936      	cbnz	r6, 8002a64 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8002a56:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 8002a58:	bf44      	itt	mi
 8002a5a:	f830 3025 	ldrhmi.w	r3, [r0, r5, lsl #2]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8002a5e:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8002a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 8002a64:	f837 2b04 	ldrh.w	r2, [r7], #4
  for (count = n; count != 0U; count--)
 8002a68:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 8002a6a:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8002a6c:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8002a70:	0a12      	lsrs	r2, r2, #8
 8002a72:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (count = n; count != 0U; count--)
 8002a76:	e7ec      	b.n	8002a52 <USB_ReadPMA+0x12>

08002a78 <USBD_DFU_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_DFU_GetCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_DFU_CfgDesc);
 8002a78:	231b      	movs	r3, #27
 8002a7a:	8003      	strh	r3, [r0, #0]
  return USBD_DFU_CfgDesc;
}
 8002a7c:	4800      	ldr	r0, [pc, #0]	@ (8002a80 <USBD_DFU_GetCfgDesc+0x8>)
 8002a7e:	4770      	bx	lr
 8002a80:	20000020 	.word	0x20000020

08002a84 <USBD_DFU_DataIn>:
static uint8_t  USBD_DFU_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{

  return USBD_OK;
}
 8002a84:	2000      	movs	r0, #0
 8002a86:	4770      	bx	lr

08002a88 <USBD_DFU_EP0_RxReady>:
  */
static uint8_t  USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{

  return USBD_OK;
}
 8002a88:	2000      	movs	r0, #0
 8002a8a:	4770      	bx	lr

08002a8c <USBD_DFU_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = sizeof(USBD_DFU_DeviceQualifierDesc);
 8002a8c:	230a      	movs	r3, #10
 8002a8e:	8003      	strh	r3, [r0, #0]
  return USBD_DFU_DeviceQualifierDesc;
}
 8002a90:	4800      	ldr	r0, [pc, #0]	@ (8002a94 <USBD_DFU_GetDeviceQualifierDesc+0x8>)
 8002a92:	4770      	bx	lr
 8002a94:	20000014 	.word	0x20000014

08002a98 <USBD_DFU_EP0_TxReady>:
{
 8002a98:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8002a9a:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8
{
 8002a9e:	4605      	mov	r5, r0
  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8002aa0:	f894 3418 	ldrb.w	r3, [r4, #1048]	@ 0x418
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d155      	bne.n	8002b54 <USBD_DFU_EP0_TxReady+0xbc>
    if (hdfu->wblock_num == 0U)
 8002aa8:	f8d4 1400 	ldr.w	r1, [r4, #1024]	@ 0x400
 8002aac:	2900      	cmp	r1, #0
 8002aae:	d142      	bne.n	8002b36 <USBD_DFU_EP0_TxReady+0x9e>
      if ((hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS) && (hdfu->wlength == 1U))
 8002ab0:	7823      	ldrb	r3, [r4, #0]
 8002ab2:	b9a3      	cbnz	r3, 8002ade <USBD_DFU_EP0_TxReady+0x46>
 8002ab4:	f8d4 3404 	ldr.w	r3, [r4, #1028]	@ 0x404
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d12d      	bne.n	8002b18 <USBD_DFU_EP0_TxReady+0x80>
    hdfu->wlength = 0U;
 8002abc:	2300      	movs	r3, #0
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8002abe:	2203      	movs	r2, #3
    hdfu->wlength = 0U;
 8002ac0:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 8002ac4:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8002ac8:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
    hdfu->dev_status[1] = 0U;
 8002acc:	f884 3411 	strb.w	r3, [r4, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8002ad0:	f8a4 3412 	strh.w	r3, [r4, #1042]	@ 0x412
    hdfu->dev_status[4] = hdfu->dev_state;
 8002ad4:	f884 2414 	strb.w	r2, [r4, #1044]	@ 0x414
    return USBD_OK;
 8002ad8:	2000      	movs	r0, #0
}
 8002ada:	b003      	add	sp, #12
 8002adc:	bd30      	pop	{r4, r5, pc}
      else if ((hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER) && (hdfu->wlength == 5U))
 8002ade:	2b21      	cmp	r3, #33	@ 0x21
 8002ae0:	d108      	bne.n	8002af4 <USBD_DFU_EP0_TxReady+0x5c>
 8002ae2:	f8d4 3404 	ldr.w	r3, [r4, #1028]	@ 0x404
 8002ae6:	2b05      	cmp	r3, #5
 8002ae8:	d116      	bne.n	8002b18 <USBD_DFU_EP0_TxReady+0x80>
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8002aea:	f8d4 3001 	ldr.w	r3, [r4, #1]
 8002aee:	f8c4 3408 	str.w	r3, [r4, #1032]	@ 0x408
 8002af2:	e7e3      	b.n	8002abc <USBD_DFU_EP0_TxReady+0x24>
      else if ((hdfu->buffer.d8[0] == DFU_CMD_ERASE) && (hdfu->wlength == 5U))
 8002af4:	2b41      	cmp	r3, #65	@ 0x41
 8002af6:	d10f      	bne.n	8002b18 <USBD_DFU_EP0_TxReady+0x80>
 8002af8:	f8d4 3404 	ldr.w	r3, [r4, #1028]	@ 0x404
 8002afc:	2b05      	cmp	r3, #5
 8002afe:	d10b      	bne.n	8002b18 <USBD_DFU_EP0_TxReady+0x80>
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8002b00:	f8d4 0001 	ldr.w	r0, [r4, #1]
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 8002b04:	f8d5 32bc 	ldr.w	r3, [r5, #700]	@ 0x2bc
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8002b08:	f8c4 0408 	str.w	r0, [r4, #1032]	@ 0x408
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	4798      	blx	r3
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 8002b10:	2800      	cmp	r0, #0
 8002b12:	d0d3      	beq.n	8002abc <USBD_DFU_EP0_TxReady+0x24>
          return USBD_FAIL;
 8002b14:	2002      	movs	r0, #2
 8002b16:	e7e0      	b.n	8002ada <USBD_DFU_EP0_TxReady+0x42>
        hdfu->wlength = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 8002b1e:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
        req.bmRequest = 0U;
 8002b22:	f88d 3000 	strb.w	r3, [sp]
        req.wLength = 1U;
 8002b26:	2301      	movs	r3, #1
        USBD_CtlError(pdev, &req);
 8002b28:	4669      	mov	r1, sp
 8002b2a:	4628      	mov	r0, r5
        req.wLength = 1U;
 8002b2c:	f8ad 3006 	strh.w	r3, [sp, #6]
        USBD_CtlError(pdev, &req);
 8002b30:	f000 fd59 	bl	80035e6 <USBD_CtlError>
 8002b34:	e7c2      	b.n	8002abc <USBD_DFU_EP0_TxReady+0x24>
      if (hdfu->wblock_num > 1U)
 8002b36:	2901      	cmp	r1, #1
 8002b38:	d0c0      	beq.n	8002abc <USBD_DFU_EP0_TxReady+0x24>
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8002b3a:	f8d4 0408 	ldr.w	r0, [r4, #1032]	@ 0x408
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 8002b3e:	f8d5 32bc 	ldr.w	r3, [r5, #700]	@ 0x2bc
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8002b42:	3902      	subs	r1, #2
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 8002b44:	eb00 2181 	add.w	r1, r0, r1, lsl #10
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	f8d4 2404 	ldr.w	r2, [r4, #1028]	@ 0x404
 8002b50:	4798      	blx	r3
 8002b52:	e7dd      	b.n	8002b10 <USBD_DFU_EP0_TxReady+0x78>
    if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8002b54:	2b07      	cmp	r3, #7
 8002b56:	d1bf      	bne.n	8002ad8 <USBD_DFU_EP0_TxReady+0x40>
{
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8002b58:	2200      	movs	r2, #0

  if ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U)
 8002b5a:	4b16      	ldr	r3, [pc, #88]	@ (8002bb4 <USBD_DFU_EP0_TxReady+0x11c>)
  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8002b5c:	f884 2419 	strb.w	r2, [r4, #1049]	@ 0x419
  if ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U)
 8002b60:	7d1b      	ldrb	r3, [r3, #20]
 8002b62:	f013 0304 	ands.w	r3, r3, #4
 8002b66:	d009      	beq.n	8002b7c <USBD_DFU_EP0_TxReady+0xe4>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8002b68:	2306      	movs	r3, #6

    hdfu->dev_status[1] = 0U;
 8002b6a:	f884 2411 	strb.w	r2, [r4, #1041]	@ 0x411
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8002b6e:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
    hdfu->dev_status[2] = 0U;
 8002b72:	f8a4 2412 	strh.w	r2, [r4, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
 8002b76:	f884 3414 	strb.w	r3, [r4, #1044]	@ 0x414
    return;
 8002b7a:	e7ad      	b.n	8002ad8 <USBD_DFU_EP0_TxReady+0x40>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8002b7c:	2208      	movs	r2, #8

    hdfu->dev_status[1] = 0U;
 8002b7e:	f884 3411 	strb.w	r3, [r4, #1041]	@ 0x411
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8002b82:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
    hdfu->dev_status[2] = 0U;
 8002b86:	f8a4 3412 	strh.w	r3, [r4, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
 8002b8a:	f884 2414 	strb.w	r2, [r4, #1044]	@ 0x414

    /* Disconnect the USB device */
    USBD_Stop(pdev);
 8002b8e:	f000 fa0b 	bl	8002fa8 <USBD_Stop>

    /* DeInitilialize the MAL(Media Access Layer) */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8002b92:	f8d5 32bc 	ldr.w	r3, [r5, #700]	@ 0x2bc
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
 8002b9a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002b9e:	4906      	ldr	r1, [pc, #24]	@ (8002bb8 <USBD_DFU_EP0_TxReady+0x120>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002ba0:	4b06      	ldr	r3, [pc, #24]	@ (8002bbc <USBD_DFU_EP0_TxReady+0x124>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002ba2:	68ca      	ldr	r2, [r1, #12]
 8002ba4:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60cb      	str	r3, [r1, #12]
 8002bac:	f3bf 8f4f 	dsb	sy
    __NOP();
 8002bb0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002bb2:	e7fd      	b.n	8002bb0 <USBD_DFU_EP0_TxReady+0x118>
 8002bb4:	20000020 	.word	0x20000020
 8002bb8:	e000ed00 	.word	0xe000ed00
 8002bbc:	05fa0004 	.word	0x05fa0004

08002bc0 <USBD_DFU_DeInit>:
{
 8002bc0:	b538      	push	{r3, r4, r5, lr}
  hdfu->dev_state = DFU_STATE_IDLE;
 8002bc2:	2202      	movs	r2, #2
  hdfu->wblock_num = 0U;
 8002bc4:	2500      	movs	r5, #0
{
 8002bc6:	4604      	mov	r4, r0
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8002bc8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
  hdfu->dev_state = DFU_STATE_IDLE;
 8002bcc:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8002bd0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002bd4:	f883 5410 	strb.w	r5, [r3, #1040]	@ 0x410
  hdfu->wblock_num = 0U;
 8002bd8:	f8c3 5400 	str.w	r5, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8002bdc:	f8c3 5404 	str.w	r5, [r3, #1028]	@ 0x404
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8002be0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002be8:	f8d4 02b8 	ldr.w	r0, [r4, #696]	@ 0x2b8
 8002bec:	f000 ff1c 	bl	8003a28 <USBD_static_free>
}
 8002bf0:	4628      	mov	r0, r5
    pdev->pClassData = NULL;
 8002bf2:	f8c4 52b8 	str.w	r5, [r4, #696]	@ 0x2b8
}
 8002bf6:	bd38      	pop	{r3, r4, r5, pc}

08002bf8 <USBD_DFU_Init>:
{
 8002bf8:	b510      	push	{r4, lr}
 8002bfa:	4604      	mov	r4, r0
  pdev->pClassData = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8002bfc:	f240 401c 	movw	r0, #1052	@ 0x41c
 8002c00:	f000 ff0e 	bl	8003a20 <USBD_static_malloc>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f8c4 02b8 	str.w	r0, [r4, #696]	@ 0x2b8
  if (pdev->pClassData == NULL)
 8002c0a:	2002      	movs	r0, #2
 8002c0c:	b1bb      	cbz	r3, 8002c3e <USBD_DFU_Init+0x46>
    hdfu->wblock_num = 0U;
 8002c0e:	2200      	movs	r2, #0
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8002c10:	490b      	ldr	r1, [pc, #44]	@ (8002c40 <USBD_DFU_Init+0x48>)
    hdfu->dev_state = DFU_STATE_IDLE;
 8002c12:	f8a3 0418 	strh.w	r0, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002c16:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[4] = DFU_STATE_IDLE;
 8002c1a:	f8a3 0414 	strh.w	r0, [r3, #1044]	@ 0x414
    hdfu->wblock_num = 0U;
 8002c1e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8002c22:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8002c26:	f8c3 1408 	str.w	r1, [r3, #1032]	@ 0x408
    hdfu->alt_setting = 0U;
 8002c2a:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8002c2e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4798      	blx	r3
 8002c36:	3800      	subs	r0, #0
 8002c38:	bf18      	it	ne
 8002c3a:	2001      	movne	r0, #1
 8002c3c:	0040      	lsls	r0, r0, #1
}
 8002c3e:	bd10      	pop	{r4, pc}
 8002c40:	08005000 	.word	0x08005000

08002c44 <USBD_DFU_IsoOutIncomplete>:
static uint8_t  USBD_DFU_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
 8002c44:	2000      	movs	r0, #0
 8002c46:	4770      	bx	lr

08002c48 <USBD_DFU_GetUsrStringDesc>:
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8002c48:	2906      	cmp	r1, #6
{
 8002c4a:	b508      	push	{r3, lr}
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8002c4c:	d807      	bhi.n	8002c5e <USBD_DFU_GetUsrStringDesc+0x16>
    USBD_GetString((uint8_t *)((USBD_DFU_MediaTypeDef *)pdev->pUserData)->pStrDesc, USBD_StrDesc, length);
 8002c4e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 8002c52:	4904      	ldr	r1, [pc, #16]	@ (8002c64 <USBD_DFU_GetUsrStringDesc+0x1c>)
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	f000 fcd1 	bl	80035fc <USBD_GetString>
 8002c5a:	4802      	ldr	r0, [pc, #8]	@ (8002c64 <USBD_DFU_GetUsrStringDesc+0x1c>)
}
 8002c5c:	bd08      	pop	{r3, pc}
    return NULL;
 8002c5e:	2000      	movs	r0, #0
 8002c60:	e7fc      	b.n	8002c5c <USBD_DFU_GetUsrStringDesc+0x14>
 8002c62:	bf00      	nop
 8002c64:	20000340 	.word	0x20000340

08002c68 <USBD_DFU_Setup>:
  uint16_t status_info = 0U;
 8002c68:	2300      	movs	r3, #0
{
 8002c6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint16_t status_info = 0U;
 8002c6c:	f8ad 3006 	strh.w	r3, [sp, #6]
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8002c70:	780b      	ldrb	r3, [r1, #0]
{
 8002c72:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002c74:	f013 0360 	ands.w	r3, r3, #96	@ 0x60
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8002c78:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002c7c:	f000 812c 	beq.w	8002ed8 <USBD_DFU_Setup+0x270>
 8002c80:	2b20      	cmp	r3, #32
 8002c82:	f040 813c 	bne.w	8002efe <USBD_DFU_Setup+0x296>
      switch (req->bRequest)
 8002c86:	784b      	ldrb	r3, [r1, #1]
 8002c88:	2b06      	cmp	r3, #6
 8002c8a:	f200 8138 	bhi.w	8002efe <USBD_DFU_Setup+0x296>
 8002c8e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002c92:	00ff      	.short	0x00ff
 8002c94:	00300007 	.word	0x00300007
 8002c98:	00d1008b 	.word	0x00d1008b
 8002c9c:	00e700e3 	.word	0x00e700e3
  if (req->wLength > 0U)
 8002ca0:	88ca      	ldrh	r2, [r1, #6]
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8002ca2:	f894 3418 	ldrb.w	r3, [r4, #1048]	@ 0x418
  if (req->wLength > 0U)
 8002ca6:	b19a      	cbz	r2, 8002cd0 <USBD_DFU_Setup+0x68>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d001      	beq.n	8002cb0 <USBD_DFU_Setup+0x48>
 8002cac:	2b05      	cmp	r3, #5
 8002cae:	d169      	bne.n	8002d84 <USBD_DFU_Setup+0x11c>
      hdfu->wblock_num = req->wValue;
 8002cb0:	884b      	ldrh	r3, [r1, #2]
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 8002cb2:	4628      	mov	r0, r5
      hdfu->wblock_num = req->wValue;
 8002cb4:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8002cb8:	2303      	movs	r3, #3
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 8002cba:	4621      	mov	r1, r4
      hdfu->wlength = req->wLength;
 8002cbc:	f8c4 2404 	str.w	r2, [r4, #1028]	@ 0x404
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8002cc0:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8002cc4:	f884 3414 	strb.w	r3, [r4, #1044]	@ 0x414
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 8002cc8:	f000 fcc9 	bl	800365e <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8002ccc:	2000      	movs	r0, #0
 8002cce:	e11a      	b.n	8002f06 <USBD_DFU_Setup+0x29e>
    if (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_IDLE)
 8002cd0:	2b05      	cmp	r3, #5
 8002cd2:	d001      	beq.n	8002cd8 <USBD_DFU_Setup+0x70>
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d155      	bne.n	8002d84 <USBD_DFU_Setup+0x11c>
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8002cd8:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8002cdc:	f8a4 3418 	strh.w	r3, [r4, #1048]	@ 0x418
      hdfu->dev_status[1] = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f884 3411 	strb.w	r3, [r4, #1041]	@ 0x411
      hdfu->dev_status[2] = 0U;
 8002ce6:	f8a4 3412 	strh.w	r3, [r4, #1042]	@ 0x412
      hdfu->dev_status[4] = hdfu->dev_state;
 8002cea:	2306      	movs	r3, #6
    hdfu->dev_status[4] = hdfu->dev_state;
 8002cec:	f884 3414 	strb.w	r3, [r4, #1044]	@ 0x414
 8002cf0:	e7ec      	b.n	8002ccc <USBD_DFU_Setup+0x64>
  if (req->wLength > 0U)
 8002cf2:	88ca      	ldrh	r2, [r1, #6]
 8002cf4:	2a00      	cmp	r2, #0
 8002cf6:	d04f      	beq.n	8002d98 <USBD_DFU_Setup+0x130>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8002cf8:	f894 0418 	ldrb.w	r0, [r4, #1048]	@ 0x418
 8002cfc:	2802      	cmp	r0, #2
 8002cfe:	d001      	beq.n	8002d04 <USBD_DFU_Setup+0x9c>
 8002d00:	2809      	cmp	r0, #9
 8002d02:	d143      	bne.n	8002d8c <USBD_DFU_Setup+0x124>
      hdfu->wblock_num = req->wValue;
 8002d04:	8848      	ldrh	r0, [r1, #2]
      hdfu->wlength = req->wLength;
 8002d06:	f8c4 2404 	str.w	r2, [r4, #1028]	@ 0x404
      hdfu->wblock_num = req->wValue;
 8002d0a:	f8c4 0400 	str.w	r0, [r4, #1024]	@ 0x400
      if (hdfu->wblock_num == 0U)
 8002d0e:	b9a8      	cbnz	r0, 8002d3c <USBD_DFU_Setup+0xd4>
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8002d10:	2a03      	cmp	r2, #3
 8002d12:	bf98      	it	ls
 8002d14:	2309      	movls	r3, #9
 8002d16:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
        hdfu->dev_status[4] = hdfu->dev_state;
 8002d1a:	f884 3414 	strb.w	r3, [r4, #1044]	@ 0x414
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8002d1e:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 8002d22:	8023      	strh	r3, [r4, #0]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8002d24:	2341      	movs	r3, #65	@ 0x41
        USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8002d26:	2203      	movs	r2, #3
 8002d28:	4621      	mov	r1, r4
        hdfu->dev_status[1] = 0U;
 8002d2a:	f884 0411 	strb.w	r0, [r4, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8002d2e:	f8a4 0412 	strh.w	r0, [r4, #1042]	@ 0x412
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8002d32:	70a3      	strb	r3, [r4, #2]
          USBD_CtlSendData(pdev, pbuf, len);
 8002d34:	4628      	mov	r0, r5
 8002d36:	f000 fc7d 	bl	8003634 <USBD_CtlSendData>
          break;
 8002d3a:	e7c7      	b.n	8002ccc <USBD_DFU_Setup+0x64>
      else if (hdfu->wblock_num > 1U)
 8002d3c:	2801      	cmp	r0, #1
 8002d3e:	f04f 0300 	mov.w	r3, #0
 8002d42:	d016      	beq.n	8002d72 <USBD_DFU_Setup+0x10a>
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8002d44:	2109      	movs	r1, #9
        hdfu->dev_status[1] = 0U;
 8002d46:	f884 3411 	strb.w	r3, [r4, #1041]	@ 0x411
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8002d4a:	f884 1418 	strb.w	r1, [r4, #1048]	@ 0x418
        hdfu->dev_status[4] = hdfu->dev_state;
 8002d4e:	f884 1414 	strb.w	r1, [r4, #1044]	@ 0x414
        hdfu->dev_status[2] = 0U;
 8002d52:	f8a4 3412 	strh.w	r3, [r4, #1042]	@ 0x412
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8002d56:	f8d4 6408 	ldr.w	r6, [r4, #1032]	@ 0x408
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8002d5a:	f8d5 32bc 	ldr.w	r3, [r5, #700]	@ 0x2bc
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8002d5e:	3802      	subs	r0, #2
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8002d60:	4621      	mov	r1, r4
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	eb06 2080 	add.w	r0, r6, r0, lsl #10
 8002d68:	4798      	blx	r3
        USBD_CtlSendData(pdev, phaddr, (uint16_t)hdfu->wlength);
 8002d6a:	f8b4 2404 	ldrh.w	r2, [r4, #1028]	@ 0x404
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8002d6e:	4601      	mov	r1, r0
        USBD_CtlSendData(pdev, phaddr, (uint16_t)hdfu->wlength);
 8002d70:	e7e0      	b.n	8002d34 <USBD_DFU_Setup+0xcc>
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8002d72:	220f      	movs	r2, #15
        hdfu->dev_status[1] = 0U;
 8002d74:	f884 3411 	strb.w	r3, [r4, #1041]	@ 0x411
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8002d78:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
        hdfu->dev_status[2] = 0U;
 8002d7c:	f8a4 3412 	strh.w	r3, [r4, #1042]	@ 0x412
        hdfu->dev_status[4] = hdfu->dev_state;
 8002d80:	f884 2414 	strb.w	r2, [r4, #1044]	@ 0x414
      USBD_CtlError(pdev, req);
 8002d84:	4628      	mov	r0, r5
 8002d86:	f000 fc2e 	bl	80035e6 <USBD_CtlError>
 8002d8a:	e79f      	b.n	8002ccc <USBD_DFU_Setup+0x64>
      hdfu->wlength = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 8002d92:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
 8002d96:	e7f5      	b.n	8002d84 <USBD_DFU_Setup+0x11c>
    hdfu->dev_state = DFU_STATE_IDLE;
 8002d98:	2302      	movs	r3, #2
    hdfu->dev_status[1] = 0U;
 8002d9a:	f884 2411 	strb.w	r2, [r4, #1041]	@ 0x411
    hdfu->dev_state = DFU_STATE_IDLE;
 8002d9e:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
    hdfu->dev_status[2] = 0U;
 8002da2:	f8a4 2412 	strh.w	r2, [r4, #1042]	@ 0x412
 8002da6:	e7a1      	b.n	8002cec <USBD_DFU_Setup+0x84>
  switch (hdfu->dev_state)
 8002da8:	f894 3418 	ldrb.w	r3, [r4, #1048]	@ 0x418
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8002dac:	f504 6682 	add.w	r6, r4, #1040	@ 0x410
  switch (hdfu->dev_state)
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d004      	beq.n	8002dbe <USBD_DFU_Setup+0x156>
 8002db4:	2b06      	cmp	r3, #6
 8002db6:	d026      	beq.n	8002e06 <USBD_DFU_Setup+0x19e>
  USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8002db8:	2206      	movs	r2, #6
 8002dba:	4631      	mov	r1, r6
 8002dbc:	e7ba      	b.n	8002d34 <USBD_DFU_Setup+0xcc>
      if (hdfu->wlength != 0U)
 8002dbe:	f8d4 3404 	ldr.w	r3, [r4, #1028]	@ 0x404
 8002dc2:	b1d3      	cbz	r3, 8002dfa <USBD_DFU_Setup+0x192>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8002dc4:	2304      	movs	r3, #4
        hdfu->dev_status[1] = 0U;
 8002dc6:	2200      	movs	r2, #0
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8002dc8:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 8002dcc:	f884 2411 	strb.w	r2, [r4, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8002dd0:	f8a4 2412 	strh.w	r2, [r4, #1042]	@ 0x412
        hdfu->dev_status[4] = hdfu->dev_state;
 8002dd4:	f884 3414 	strb.w	r3, [r4, #1044]	@ 0x414
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8002dd8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8002ddc:	f8d4 1400 	ldr.w	r1, [r4, #1024]	@ 0x400
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	f8d4 0408 	ldr.w	r0, [r4, #1032]	@ 0x408
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8002de6:	b929      	cbnz	r1, 8002df4 <USBD_DFU_Setup+0x18c>
 8002de8:	7822      	ldrb	r2, [r4, #0]
 8002dea:	2a41      	cmp	r2, #65	@ 0x41
 8002dec:	d102      	bne.n	8002df4 <USBD_DFU_Setup+0x18c>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8002dee:	4632      	mov	r2, r6
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8002df0:	4798      	blx	r3
 8002df2:	e7e1      	b.n	8002db8 <USBD_DFU_Setup+0x150>
 8002df4:	4632      	mov	r2, r6
 8002df6:	2101      	movs	r1, #1
 8002df8:	e7fa      	b.n	8002df0 <USBD_DFU_Setup+0x188>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8002dfa:	2205      	movs	r2, #5
          hdfu->dev_state = DFU_STATE_IDLE;
 8002dfc:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
          hdfu->dev_status[1] = 0U;
 8002e00:	f884 3411 	strb.w	r3, [r4, #1041]	@ 0x411
 8002e04:	e009      	b.n	8002e1a <USBD_DFU_Setup+0x1b2>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8002e06:	f894 3419 	ldrb.w	r3, [r4, #1049]	@ 0x419
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d10a      	bne.n	8002e24 <USBD_DFU_Setup+0x1bc>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8002e0e:	2207      	movs	r2, #7
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8002e10:	f884 3411 	strb.w	r3, [r4, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8002e14:	2300      	movs	r3, #0
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8002e16:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
          hdfu->dev_status[2] = 0U;
 8002e1a:	f8a4 3412 	strh.w	r3, [r4, #1042]	@ 0x412
          hdfu->dev_status[4] = hdfu->dev_state;
 8002e1e:	f884 2414 	strb.w	r2, [r4, #1044]	@ 0x414
 8002e22:	e7c9      	b.n	8002db8 <USBD_DFU_Setup+0x150>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1c7      	bne.n	8002db8 <USBD_DFU_Setup+0x150>
            ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U))
 8002e28:	4a47      	ldr	r2, [pc, #284]	@ (8002f48 <USBD_DFU_Setup+0x2e0>)
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8002e2a:	7d12      	ldrb	r2, [r2, #20]
 8002e2c:	0752      	lsls	r2, r2, #29
 8002e2e:	d5c3      	bpl.n	8002db8 <USBD_DFU_Setup+0x150>
          hdfu->dev_state = DFU_STATE_IDLE;
 8002e30:	2202      	movs	r2, #2
 8002e32:	e7e3      	b.n	8002dfc <USBD_DFU_Setup+0x194>
  if (hdfu->dev_state == DFU_STATE_ERROR)
 8002e34:	f894 3418 	ldrb.w	r3, [r4, #1048]	@ 0x418
 8002e38:	2b0a      	cmp	r3, #10
    hdfu->dev_state = DFU_STATE_IDLE;
 8002e3a:	bf0b      	itete	eq
 8002e3c:	2302      	moveq	r3, #2
    hdfu->dev_state = DFU_STATE_ERROR;
 8002e3e:	230a      	movne	r3, #10
    hdfu->dev_status[0] = DFU_ERROR_NONE;/*bStatus*/
 8002e40:	2200      	moveq	r2, #0
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 8002e42:	220e      	movne	r2, #14
    hdfu->dev_state = DFU_STATE_IDLE;
 8002e44:	bf0c      	ite	eq
 8002e46:	f884 3418 	strbeq.w	r3, [r4, #1048]	@ 0x418
    hdfu->dev_state = DFU_STATE_ERROR;
 8002e4a:	f884 3418 	strbne.w	r3, [r4, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 8002e4e:	f8c4 2410 	str.w	r2, [r4, #1040]	@ 0x410
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 8002e52:	f8a4 3414 	strh.w	r3, [r4, #1044]	@ 0x414
 8002e56:	e739      	b.n	8002ccc <USBD_DFU_Setup+0x64>
  USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f504 6183 	add.w	r1, r4, #1048	@ 0x418
 8002e5e:	e769      	b.n	8002d34 <USBD_DFU_Setup+0xcc>
  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 8002e60:	f894 2418 	ldrb.w	r2, [r4, #1048]	@ 0x418
 8002e64:	2a09      	cmp	r2, #9
 8002e66:	f63f af31 	bhi.w	8002ccc <USBD_DFU_Setup+0x64>
 8002e6a:	f46f 731b 	mvn.w	r3, #620	@ 0x26c
 8002e6e:	4113      	asrs	r3, r2
 8002e70:	f013 0301 	ands.w	r3, r3, #1
 8002e74:	f47f af2a 	bne.w	8002ccc <USBD_DFU_Setup+0x64>
    hdfu->dev_state = DFU_STATE_IDLE;
 8002e78:	2202      	movs	r2, #2
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002e7a:	f8c4 3410 	str.w	r3, [r4, #1040]	@ 0x410
    hdfu->dev_state = DFU_STATE_IDLE;
 8002e7e:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
    hdfu->dev_status[4] = hdfu->dev_state;
 8002e82:	f8a4 2414 	strh.w	r2, [r4, #1044]	@ 0x414
    hdfu->wblock_num = 0U;
 8002e86:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8002e8a:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
 8002e8e:	e71d      	b.n	8002ccc <USBD_DFU_Setup+0x64>
  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 8002e90:	f894 2418 	ldrb.w	r2, [r4, #1048]	@ 0x418
 8002e94:	2a09      	cmp	r2, #9
 8002e96:	d810      	bhi.n	8002eba <USBD_DFU_Setup+0x252>
 8002e98:	f46f 731b 	mvn.w	r3, #620	@ 0x26c
 8002e9c:	4113      	asrs	r3, r2
 8002e9e:	f013 0301 	ands.w	r3, r3, #1
 8002ea2:	d10a      	bne.n	8002eba <USBD_DFU_Setup+0x252>
    hdfu->dev_state = DFU_STATE_IDLE;
 8002ea4:	2202      	movs	r2, #2
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002ea6:	f8c4 3410 	str.w	r3, [r4, #1040]	@ 0x410
    hdfu->dev_state = DFU_STATE_IDLE;
 8002eaa:	f884 2418 	strb.w	r2, [r4, #1048]	@ 0x418
    hdfu->dev_status[4] = hdfu->dev_state;
 8002eae:	f8a4 2414 	strh.w	r2, [r4, #1044]	@ 0x414
    hdfu->wblock_num = 0U;
 8002eb2:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8002eb6:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404
  if ((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK)
 8002eba:	4b23      	ldr	r3, [pc, #140]	@ (8002f48 <USBD_DFU_Setup+0x2e0>)
 8002ebc:	7d5b      	ldrb	r3, [r3, #21]
 8002ebe:	06db      	lsls	r3, r3, #27
 8002ec0:	d506      	bpl.n	8002ed0 <USBD_DFU_Setup+0x268>
    USBD_Stop(pdev);
 8002ec2:	4628      	mov	r0, r5
 8002ec4:	f000 f870 	bl	8002fa8 <USBD_Stop>
    USBD_Start(pdev);
 8002ec8:	4628      	mov	r0, r5
 8002eca:	f000 f868 	bl	8002f9e <USBD_Start>
 8002ece:	e6fd      	b.n	8002ccc <USBD_DFU_Setup+0x64>
    USBD_Delay((uint32_t)req->wValue);
 8002ed0:	8848      	ldrh	r0, [r1, #2]
 8002ed2:	f7fd fc03 	bl	80006dc <HAL_Delay>
 8002ed6:	e6f9      	b.n	8002ccc <USBD_DFU_Setup+0x64>
      switch (req->bRequest)
 8002ed8:	784b      	ldrb	r3, [r1, #1]
 8002eda:	2b0b      	cmp	r3, #11
 8002edc:	d80f      	bhi.n	8002efe <USBD_DFU_Setup+0x296>
 8002ede:	e8df f003 	tbb	[pc, r3]
 8002ee2:	0e06      	.short	0x0e06
 8002ee4:	0e0e0e0e 	.word	0x0e0e0e0e
 8002ee8:	0e0e0e14 	.word	0x0e0e0e14
 8002eec:	2921      	.short	0x2921
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002eee:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	d103      	bne.n	8002efe <USBD_DFU_Setup+0x296>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f10d 0106 	add.w	r1, sp, #6
 8002efc:	e71a      	b.n	8002d34 <USBD_DFU_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8002efe:	4628      	mov	r0, r5
 8002f00:	f000 fb71 	bl	80035e6 <USBD_CtlError>
      ret = USBD_FAIL;
 8002f04:	2002      	movs	r0, #2
}
 8002f06:	b002      	add	sp, #8
 8002f08:	bd70      	pop	{r4, r5, r6, pc}
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8002f0a:	884b      	ldrh	r3, [r1, #2]
 8002f0c:	0a1b      	lsrs	r3, r3, #8
 8002f0e:	2b21      	cmp	r3, #33	@ 0x21
 8002f10:	d105      	bne.n	8002f1e <USBD_DFU_Setup+0x2b6>
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8002f12:	88ca      	ldrh	r2, [r1, #6]
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8002f14:	490d      	ldr	r1, [pc, #52]	@ (8002f4c <USBD_DFU_Setup+0x2e4>)
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8002f16:	2a09      	cmp	r2, #9
 8002f18:	bf28      	it	cs
 8002f1a:	2209      	movcs	r2, #9
 8002f1c:	e70a      	b.n	8002d34 <USBD_DFU_Setup+0xcc>
  uint16_t len = 0U;
 8002f1e:	2200      	movs	r2, #0
  uint8_t *pbuf = 0U;
 8002f20:	4611      	mov	r1, r2
 8002f22:	e707      	b.n	8002d34 <USBD_DFU_Setup+0xcc>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002f24:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d1e8      	bne.n	8002efe <USBD_DFU_Setup+0x296>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hdfu->alt_setting, 1U);
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 8002f32:	e6ff      	b.n	8002d34 <USBD_DFU_Setup+0xcc>
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8002f34:	788b      	ldrb	r3, [r1, #2]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1e1      	bne.n	8002efe <USBD_DFU_Setup+0x296>
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002f3a:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8002f3e:	2a03      	cmp	r2, #3
 8002f40:	d1dd      	bne.n	8002efe <USBD_DFU_Setup+0x296>
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8002f42:	f8c4 340c 	str.w	r3, [r4, #1036]	@ 0x40c
 8002f46:	e6c1      	b.n	8002ccc <USBD_DFU_Setup+0x64>
 8002f48:	20000020 	.word	0x20000020
 8002f4c:	20000032 	.word	0x20000032

08002f50 <USBD_DFU_DataOut>:
static uint8_t  USBD_DFU_DataOut(USBD_HandleTypeDef *pdev,
 8002f50:	2000      	movs	r0, #0
 8002f52:	4770      	bx	lr

08002f54 <USBD_DFU_IsoINIncomplete>:
static uint8_t  USBD_DFU_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
 8002f54:	2000      	movs	r0, #0
 8002f56:	4770      	bx	lr

08002f58 <USBD_DFU_SOF>:
static uint8_t  USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
 8002f58:	2000      	movs	r0, #0
 8002f5a:	4770      	bx	lr

08002f5c <USBD_DFU_RegisterMedia>:
  if (fops != NULL)
 8002f5c:	b109      	cbz	r1, 8002f62 <USBD_DFU_RegisterMedia+0x6>
    pdev->pUserData = fops;
 8002f5e:	f8c0 12bc 	str.w	r1, [r0, #700]	@ 0x2bc
}
 8002f62:	2000      	movs	r0, #0
 8002f64:	4770      	bx	lr

08002f66 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002f66:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8002f68:	b180      	cbz	r0, 8002f8c <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8002f6a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002f6e:	b113      	cbz	r3, 8002f76 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	f8c0 32b4 	str.w	r3, [r0, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8002f76:	b109      	cbz	r1, 8002f7c <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002f78:	f8c0 12b0 	str.w	r1, [r0, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002f7c:	2301      	movs	r3, #1
  pdev->id = id;
 8002f7e:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002f80:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002f84:	f000 fcc6 	bl	8003914 <USBD_LL_Init>

  return USBD_OK;
 8002f88:	2000      	movs	r0, #0
}
 8002f8a:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8002f8c:	2002      	movs	r0, #2
 8002f8e:	e7fc      	b.n	8002f8a <USBD_Init+0x24>

08002f90 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8002f90:	b119      	cbz	r1, 8002f9a <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002f92:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
    status = USBD_OK;
 8002f96:	2000      	movs	r0, #0
 8002f98:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8002f9a:	2002      	movs	r0, #2
  }

  return status;
}
 8002f9c:	4770      	bx	lr

08002f9e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8002f9e:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8002fa0:	f000 fce2 	bl	8003968 <USBD_LL_Start>

  return USBD_OK;
}
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	bd08      	pop	{r3, pc}

08002fa8 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8002fa8:	b510      	push	{r4, lr}
 8002faa:	4604      	mov	r4, r0
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002fac:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002fb0:	7901      	ldrb	r1, [r0, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	f000 fcdf 	bl	800397a <USBD_LL_Stop>

  return USBD_OK;
}
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	bd10      	pop	{r4, pc}

08002fc0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002fc0:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8002fc2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002fc6:	b133      	cbz	r3, 8002fd6 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4798      	blx	r3
 8002fcc:	3800      	subs	r0, #0
 8002fce:	bf18      	it	ne
 8002fd0:	2001      	movne	r0, #1
 8002fd2:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 8002fd4:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8002fd6:	2002      	movs	r0, #2
 8002fd8:	e7fc      	b.n	8002fd4 <USBD_SetClassConfig+0x14>

08002fda <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002fda:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8002fdc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	4798      	blx	r3

  return USBD_OK;
}
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	bd08      	pop	{r3, pc}

08002fe8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002fe8:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002fea:	f500 752a 	add.w	r5, r0, #680	@ 0x2a8
{
 8002fee:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002ff0:	4628      	mov	r0, r5
 8002ff2:	f000 faed 	bl	80035d0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8002ff6:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8002ff8:	f894 12a8 	ldrb.w	r1, [r4, #680]	@ 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8002ffc:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8003000:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	@ 0x2ae
 8003004:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8003008:	f001 031f 	and.w	r3, r1, #31
 800300c:	2b01      	cmp	r3, #1
 800300e:	d008      	beq.n	8003022 <USBD_LL_SetupStage+0x3a>
 8003010:	2b02      	cmp	r3, #2
 8003012:	d00b      	beq.n	800302c <USBD_LL_SetupStage+0x44>
 8003014:	b97b      	cbnz	r3, 8003036 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8003016:	4629      	mov	r1, r5
 8003018:	4620      	mov	r0, r4
 800301a:	f000 f8fb 	bl	8003214 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 800301e:	2000      	movs	r0, #0
 8003020:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8003022:	4629      	mov	r1, r5
 8003024:	4620      	mov	r0, r4
 8003026:	f000 fa27 	bl	8003478 <USBD_StdItfReq>
      break;
 800302a:	e7f8      	b.n	800301e <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 800302c:	4629      	mov	r1, r5
 800302e:	4620      	mov	r0, r4
 8003030:	f000 fa46 	bl	80034c0 <USBD_StdEPReq>
      break;
 8003034:	e7f3      	b.n	800301e <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003036:	4620      	mov	r0, r4
 8003038:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800303c:	f000 fcb2 	bl	80039a4 <USBD_LL_StallEP>
      break;
 8003040:	e7ed      	b.n	800301e <USBD_LL_SetupStage+0x36>

08003042 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003042:	b570      	push	{r4, r5, r6, lr}
 8003044:	4604      	mov	r4, r0
 8003046:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003048:	bb39      	cbnz	r1, 800309a <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800304a:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800304e:	2a03      	cmp	r2, #3
 8003050:	d11c      	bne.n	800308c <USBD_LL_DataOutStage+0x4a>
    {
      if (pep->rem_length > pep->maxpacket)
 8003052:	e9d0 5258 	ldrd	r5, r2, [r0, #352]	@ 0x160
 8003056:	4295      	cmp	r5, r2
 8003058:	d90b      	bls.n	8003072 <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -= pep->maxpacket;
 800305a:	1aad      	subs	r5, r5, r2

        USBD_CtlContinueRx(pdev, pdata,
 800305c:	42aa      	cmp	r2, r5
 800305e:	4631      	mov	r1, r6
        pep->rem_length -= pep->maxpacket;
 8003060:	f8c0 5160 	str.w	r5, [r0, #352]	@ 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8003064:	bf8c      	ite	hi
 8003066:	b2aa      	uxthhi	r2, r5
 8003068:	b292      	uxthls	r2, r2
 800306a:	f000 fb05 	bl	8003678 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800306e:	2000      	movs	r0, #0
}
 8003070:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003072:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	b123      	cbz	r3, 8003084 <USBD_LL_DataOutStage+0x42>
 800307a:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800307e:	2a03      	cmp	r2, #3
 8003080:	d100      	bne.n	8003084 <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev);
 8003082:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003084:	4620      	mov	r0, r4
 8003086:	f000 faff 	bl	8003688 <USBD_CtlSendStatus>
 800308a:	e7f0      	b.n	800306e <USBD_LL_DataOutStage+0x2c>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800308c:	2a05      	cmp	r2, #5
 800308e:	d1ee      	bne.n	800306e <USBD_LL_DataOutStage+0x2c>
        pdev->ep0_state = USBD_EP0_IDLE;
 8003090:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8003094:	f000 fc86 	bl	80039a4 <USBD_LL_StallEP>
 8003098:	e7e9      	b.n	800306e <USBD_LL_DataOutStage+0x2c>
  else if ((pdev->pClass->DataOut != NULL) &&
 800309a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	b12b      	cbz	r3, 80030ae <USBD_LL_DataOutStage+0x6c>
 80030a2:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80030a6:	2a03      	cmp	r2, #3
 80030a8:	d101      	bne.n	80030ae <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 80030aa:	4798      	blx	r3
 80030ac:	e7df      	b.n	800306e <USBD_LL_DataOutStage+0x2c>
    return USBD_FAIL;
 80030ae:	2002      	movs	r0, #2
 80030b0:	e7de      	b.n	8003070 <USBD_LL_DataOutStage+0x2e>

080030b2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80030b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b4:	4604      	mov	r4, r0
 80030b6:	4613      	mov	r3, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80030b8:	460f      	mov	r7, r1
 80030ba:	2900      	cmp	r1, #0
 80030bc:	d149      	bne.n	8003152 <USBD_LL_DataInStage+0xa0>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80030be:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 80030c2:	2a02      	cmp	r2, #2
 80030c4:	d13a      	bne.n	800313c <USBD_LL_DataInStage+0x8a>
    {
      if (pep->rem_length > pep->maxpacket)
 80030c6:	e9d0 5608 	ldrd	r5, r6, [r0, #32]
 80030ca:	42b5      	cmp	r5, r6
 80030cc:	d911      	bls.n	80030f2 <USBD_LL_DataInStage+0x40>
      {
        pep->rem_length -= pep->maxpacket;
 80030ce:	1bad      	subs	r5, r5, r6

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80030d0:	4619      	mov	r1, r3
        pep->rem_length -= pep->maxpacket;
 80030d2:	6205      	str	r5, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80030d4:	b2aa      	uxth	r2, r5
 80030d6:	f000 faba 	bl	800364e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80030da:	463b      	mov	r3, r7
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80030dc:	461a      	mov	r2, r3
 80030de:	4619      	mov	r1, r3
 80030e0:	4620      	mov	r0, r4
 80030e2:	f000 fc94 	bl	8003a0e <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80030e6:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d02d      	beq.n	800314a <USBD_LL_DataInStage+0x98>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80030ee:	2000      	movs	r0, #0
}
 80030f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80030f2:	69c3      	ldr	r3, [r0, #28]
 80030f4:	fbb3 f5f6 	udiv	r5, r3, r6
 80030f8:	fb06 3515 	mls	r5, r6, r5, r3
 80030fc:	b965      	cbnz	r5, 8003118 <USBD_LL_DataInStage+0x66>
 80030fe:	429e      	cmp	r6, r3
 8003100:	d80a      	bhi.n	8003118 <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 8003102:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 8003106:	4293      	cmp	r3, r2
 8003108:	d206      	bcs.n	8003118 <USBD_LL_DataInStage+0x66>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800310a:	462a      	mov	r2, r5
 800310c:	f000 fa9f 	bl	800364e <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003110:	462b      	mov	r3, r5
          pdev->ep0_data_len = 0U;
 8003112:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003116:	e7e1      	b.n	80030dc <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003118:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	b12b      	cbz	r3, 800312c <USBD_LL_DataInStage+0x7a>
 8003120:	f894 229c 	ldrb.w	r2, [r4, #668]	@ 0x29c
 8003124:	2a03      	cmp	r2, #3
 8003126:	d101      	bne.n	800312c <USBD_LL_DataInStage+0x7a>
            pdev->pClass->EP0_TxSent(pdev);
 8003128:	4620      	mov	r0, r4
 800312a:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 800312c:	2180      	movs	r1, #128	@ 0x80
 800312e:	4620      	mov	r0, r4
 8003130:	f000 fc38 	bl	80039a4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003134:	4620      	mov	r0, r4
 8003136:	f000 fab2 	bl	800369e <USBD_CtlReceiveStatus>
 800313a:	e7d4      	b.n	80030e6 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800313c:	f032 0304 	bics.w	r3, r2, #4
 8003140:	d1d1      	bne.n	80030e6 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8003142:	2180      	movs	r1, #128	@ 0x80
 8003144:	f000 fc2e 	bl	80039a4 <USBD_LL_StallEP>
 8003148:	e7cd      	b.n	80030e6 <USBD_LL_DataInStage+0x34>
      pdev->dev_test_mode = 0U;
 800314a:	2300      	movs	r3, #0
 800314c:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
 8003150:	e7cd      	b.n	80030ee <USBD_LL_DataInStage+0x3c>
  else if ((pdev->pClass->DataIn != NULL) &&
 8003152:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	b12b      	cbz	r3, 8003166 <USBD_LL_DataInStage+0xb4>
 800315a:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800315e:	2a03      	cmp	r2, #3
 8003160:	d101      	bne.n	8003166 <USBD_LL_DataInStage+0xb4>
    pdev->pClass->DataIn(pdev, epnum);
 8003162:	4798      	blx	r3
 8003164:	e7c3      	b.n	80030ee <USBD_LL_DataInStage+0x3c>
    return USBD_FAIL;
 8003166:	2002      	movs	r0, #2
 8003168:	e7c2      	b.n	80030f0 <USBD_LL_DataInStage+0x3e>

0800316a <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800316a:	2200      	movs	r2, #0
{
 800316c:	b570      	push	{r4, r5, r6, lr}
 800316e:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003170:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003172:	2640      	movs	r6, #64	@ 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003174:	4611      	mov	r1, r2
 8003176:	2340      	movs	r3, #64	@ 0x40
 8003178:	f000 fc08 	bl	800398c <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800317c:	4633      	mov	r3, r6
 800317e:	2180      	movs	r1, #128	@ 0x80
 8003180:	2200      	movs	r2, #0
 8003182:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003184:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003188:	f8c4 6164 	str.w	r6, [r4, #356]	@ 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800318c:	f000 fbfe 	bl	800398c <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8003190:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8003192:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003196:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003198:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800319a:	f884 529c 	strb.w	r5, [r4, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800319e:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
  pdev->dev_config = 0U;
 80031a2:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80031a4:	f8c4 12a4 	str.w	r1, [r4, #676]	@ 0x2a4
  if (pdev->pClassData)
 80031a8:	b123      	cbz	r3, 80031b4 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80031aa:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 80031ae:	4620      	mov	r0, r4
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	4798      	blx	r3
  }

  return USBD_OK;
}
 80031b4:	2000      	movs	r0, #0
 80031b6:	bd70      	pop	{r4, r5, r6, pc}

080031b8 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80031b8:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80031ba:	2000      	movs	r0, #0
 80031bc:	4770      	bx	lr

080031be <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80031be:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80031c2:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80031c6:	2304      	movs	r3, #4
 80031c8:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 80031cc:	2000      	movs	r0, #0
 80031ce:	4770      	bx	lr

080031d0 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80031d0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80031d4:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80031d6:	bf04      	itt	eq
 80031d8:	f890 329d 	ldrbeq.w	r3, [r0, #669]	@ 0x29d
 80031dc:	f880 329c 	strbeq.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 80031e0:	2000      	movs	r0, #0
 80031e2:	4770      	bx	lr

080031e4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80031e4:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80031e6:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80031ea:	2a03      	cmp	r2, #3
 80031ec:	d104      	bne.n	80031f8 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 80031ee:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	b103      	cbz	r3, 80031f8 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80031f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 80031f8:	2000      	movs	r0, #0
 80031fa:	bd08      	pop	{r3, pc}

080031fc <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80031fc:	b510      	push	{r4, lr}
 80031fe:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8003200:	2180      	movs	r1, #128	@ 0x80
 8003202:	f000 fbcf 	bl	80039a4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8003206:	4620      	mov	r0, r4
}
 8003208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800320c:	2100      	movs	r1, #0
 800320e:	f000 bbc9 	b.w	80039a4 <USBD_LL_StallEP>
	...

08003214 <USBD_StdDevReq>:
{
 8003214:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003216:	780b      	ldrb	r3, [r1, #0]
 8003218:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800321a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800321e:	2b20      	cmp	r3, #32
{
 8003220:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003222:	d012      	beq.n	800324a <USBD_StdDevReq+0x36>
 8003224:	2b40      	cmp	r3, #64	@ 0x40
 8003226:	d010      	beq.n	800324a <USBD_StdDevReq+0x36>
 8003228:	2b00      	cmp	r3, #0
 800322a:	d151      	bne.n	80032d0 <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 800322c:	784b      	ldrb	r3, [r1, #1]
 800322e:	2b09      	cmp	r3, #9
 8003230:	d84e      	bhi.n	80032d0 <USBD_StdDevReq+0xbc>
 8003232:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003236:	00f7      	.short	0x00f7
 8003238:	004d0112 	.word	0x004d0112
 800323c:	004d010b 	.word	0x004d010b
 8003240:	00130090 	.word	0x00130090
 8003244:	00df004d 	.word	0x00df004d
 8003248:	00ac      	.short	0x00ac
      pdev->pClass->Setup(pdev, req);
 800324a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 800324e:	4629      	mov	r1, r5
 8003250:	4620      	mov	r0, r4
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	4798      	blx	r3
}
 8003256:	2000      	movs	r0, #0
 8003258:	b003      	add	sp, #12
 800325a:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 800325c:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 800325e:	8849      	ldrh	r1, [r1, #2]
  uint16_t len = 0U;
 8003260:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8003264:	0a0b      	lsrs	r3, r1, #8
 8003266:	3b01      	subs	r3, #1
 8003268:	2b06      	cmp	r3, #6
 800326a:	d831      	bhi.n	80032d0 <USBD_StdDevReq+0xbc>
 800326c:	e8df f003 	tbb	[pc, r3]
 8003270:	30231604 	.word	0x30231604
 8003274:	5130      	.short	0x5130
 8003276:	5b          	.byte	0x5b
 8003277:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003278:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800327c:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800327e:	7c20      	ldrb	r0, [r4, #16]
 8003280:	f10d 0106 	add.w	r1, sp, #6
 8003284:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8003286:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800328a:	88eb      	ldrh	r3, [r5, #6]
 800328c:	2a00      	cmp	r2, #0
 800328e:	d05e      	beq.n	800334e <USBD_StdDevReq+0x13a>
 8003290:	2b00      	cmp	r3, #0
 8003292:	d153      	bne.n	800333c <USBD_StdDevReq+0x128>
        USBD_CtlSendStatus(pdev);
 8003294:	4620      	mov	r0, r4
 8003296:	f000 f9f7 	bl	8003688 <USBD_CtlSendStatus>
 800329a:	e7dc      	b.n	8003256 <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800329c:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 800329e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80032a2:	b932      	cbnz	r2, 80032b2 <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80032a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80032a6:	f10d 0006 	add.w	r0, sp, #6
 80032aa:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80032ac:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80032ae:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80032b0:	e7e9      	b.n	8003286 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80032b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b4:	e7f7      	b.n	80032a6 <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 80032b6:	b2c9      	uxtb	r1, r1
 80032b8:	2905      	cmp	r1, #5
 80032ba:	d821      	bhi.n	8003300 <USBD_StdDevReq+0xec>
 80032bc:	e8df f001 	tbb	[pc, r1]
 80032c0:	14100c03 	.word	0x14100c03
 80032c4:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80032c6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80032ca:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1d6      	bne.n	800327e <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 80032d0:	4620      	mov	r0, r4
 80032d2:	f7ff ff93 	bl	80031fc <USBD_CtlError.constprop.0>
        break;
 80032d6:	e7be      	b.n	8003256 <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80032d8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	e7f5      	b.n	80032cc <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80032e0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	e7f1      	b.n	80032cc <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80032e8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	e7ed      	b.n	80032cc <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80032f0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	e7e9      	b.n	80032cc <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80032f8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	e7e5      	b.n	80032cc <USBD_StdDevReq+0xb8>
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8003300:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0e2      	beq.n	80032d0 <USBD_StdDevReq+0xbc>
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800330a:	f10d 0206 	add.w	r2, sp, #6
 800330e:	4798      	blx	r3
  if (err != 0U)
 8003310:	e7b9      	b.n	8003286 <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003312:	7c03      	ldrb	r3, [r0, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1db      	bne.n	80032d0 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003318:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800331c:	f10d 0006 	add.w	r0, sp, #6
 8003320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003322:	4798      	blx	r3
  if (err != 0U)
 8003324:	e7af      	b.n	8003286 <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003326:	7c03      	ldrb	r3, [r0, #16]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1d1      	bne.n	80032d0 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800332c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8003330:	f10d 0006 	add.w	r0, sp, #6
 8003334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003336:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003338:	2307      	movs	r3, #7
 800333a:	e7b8      	b.n	80032ae <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 800333c:	429a      	cmp	r2, r3
 800333e:	bf28      	it	cs
 8003340:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003342:	4601      	mov	r1, r0
 8003344:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8003346:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800334a:	f000 f973 	bl	8003634 <USBD_CtlSendData>
    if (req->wLength == 0U)
 800334e:	88eb      	ldrh	r3, [r5, #6]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d180      	bne.n	8003256 <USBD_StdDevReq+0x42>
 8003354:	e79e      	b.n	8003294 <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8003356:	888b      	ldrh	r3, [r1, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1b9      	bne.n	80032d0 <USBD_StdDevReq+0xbc>
 800335c:	88cb      	ldrh	r3, [r1, #6]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1b6      	bne.n	80032d0 <USBD_StdDevReq+0xbc>
 8003362:	884d      	ldrh	r5, [r1, #2]
 8003364:	2d7f      	cmp	r5, #127	@ 0x7f
 8003366:	d8b3      	bhi.n	80032d0 <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003368:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800336c:	2b03      	cmp	r3, #3
 800336e:	d0af      	beq.n	80032d0 <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003370:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8003372:	f880 129e 	strb.w	r1, [r0, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8003376:	f000 fb38 	bl	80039ea <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800337a:	4620      	mov	r0, r4
 800337c:	f000 f984 	bl	8003688 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8003380:	b11d      	cbz	r5, 800338a <USBD_StdDevReq+0x176>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003382:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003384:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8003388:	e765      	b.n	8003256 <USBD_StdDevReq+0x42>
 800338a:	2301      	movs	r3, #1
 800338c:	e7fa      	b.n	8003384 <USBD_StdDevReq+0x170>
  cfgidx = (uint8_t)(req->wValue);
 800338e:	7889      	ldrb	r1, [r1, #2]
 8003390:	4d38      	ldr	r5, [pc, #224]	@ (8003474 <USBD_StdDevReq+0x260>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003392:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8003394:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003396:	d89b      	bhi.n	80032d0 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 8003398:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800339c:	2b02      	cmp	r3, #2
 800339e:	d008      	beq.n	80033b2 <USBD_StdDevReq+0x19e>
 80033a0:	2b03      	cmp	r3, #3
 80033a2:	d015      	beq.n	80033d0 <USBD_StdDevReq+0x1bc>
        USBD_CtlError(pdev, req);
 80033a4:	f7ff ff2a 	bl	80031fc <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 80033a8:	4620      	mov	r0, r4
 80033aa:	7829      	ldrb	r1, [r5, #0]
 80033ac:	f7ff fe15 	bl	8002fda <USBD_ClrClassConfig>
        break;
 80033b0:	e751      	b.n	8003256 <USBD_StdDevReq+0x42>
        if (cfgidx)
 80033b2:	2900      	cmp	r1, #0
 80033b4:	f43f af6e 	beq.w	8003294 <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 80033b8:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80033ba:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 80033bc:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80033be:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80033c2:	4620      	mov	r0, r4
 80033c4:	f7ff fdfc 	bl	8002fc0 <USBD_SetClassConfig>
 80033c8:	2802      	cmp	r0, #2
 80033ca:	f47f af63 	bne.w	8003294 <USBD_StdDevReq+0x80>
 80033ce:	e77f      	b.n	80032d0 <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 80033d0:	b931      	cbnz	r1, 80033e0 <USBD_StdDevReq+0x1cc>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80033d2:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 80033d4:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80033d6:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 80033da:	f7ff fdfe 	bl	8002fda <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80033de:	e759      	b.n	8003294 <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 80033e0:	6841      	ldr	r1, [r0, #4]
 80033e2:	2901      	cmp	r1, #1
 80033e4:	f43f af56 	beq.w	8003294 <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80033e8:	b2c9      	uxtb	r1, r1
 80033ea:	f7ff fdf6 	bl	8002fda <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80033ee:	7829      	ldrb	r1, [r5, #0]
 80033f0:	6061      	str	r1, [r4, #4]
 80033f2:	e7e6      	b.n	80033c2 <USBD_StdDevReq+0x1ae>
  if (req->wLength != 1U)
 80033f4:	88ca      	ldrh	r2, [r1, #6]
 80033f6:	2a01      	cmp	r2, #1
 80033f8:	f47f af6a 	bne.w	80032d0 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 80033fc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003400:	2b02      	cmp	r3, #2
 8003402:	d80a      	bhi.n	800341a <USBD_StdDevReq+0x206>
 8003404:	2b00      	cmp	r3, #0
 8003406:	f43f af63 	beq.w	80032d0 <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 800340a:	4601      	mov	r1, r0
 800340c:	2300      	movs	r3, #0
 800340e:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003412:	4620      	mov	r0, r4
 8003414:	f000 f90e 	bl	8003634 <USBD_CtlSendData>
      break;
 8003418:	e71d      	b.n	8003256 <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 800341a:	2b03      	cmp	r3, #3
 800341c:	f47f af58 	bne.w	80032d0 <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8003420:	1d01      	adds	r1, r0, #4
 8003422:	e7f6      	b.n	8003412 <USBD_StdDevReq+0x1fe>
  switch (pdev->dev_state)
 8003424:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8003428:	3b01      	subs	r3, #1
 800342a:	2b02      	cmp	r3, #2
 800342c:	f63f af50 	bhi.w	80032d0 <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 8003430:	88ca      	ldrh	r2, [r1, #6]
 8003432:	2a02      	cmp	r2, #2
 8003434:	f47f af4c 	bne.w	80032d0 <USBD_StdDevReq+0xbc>
      if (pdev->dev_remote_wakeup)
 8003438:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 800343c:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800343e:	2b00      	cmp	r3, #0
 8003440:	bf0c      	ite	eq
 8003442:	2301      	moveq	r3, #1
 8003444:	2303      	movne	r3, #3
 8003446:	f841 3f0c 	str.w	r3, [r1, #12]!
 800344a:	e7e2      	b.n	8003412 <USBD_StdDevReq+0x1fe>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800344c:	884b      	ldrh	r3, [r1, #2]
 800344e:	2b01      	cmp	r3, #1
 8003450:	f47f af01 	bne.w	8003256 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8003454:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
 8003458:	e71c      	b.n	8003294 <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 800345a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800345e:	3b01      	subs	r3, #1
 8003460:	2b02      	cmp	r3, #2
 8003462:	f63f af35 	bhi.w	80032d0 <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003466:	884b      	ldrh	r3, [r1, #2]
 8003468:	2b01      	cmp	r3, #1
 800346a:	f47f aef4 	bne.w	8003256 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 800346e:	2300      	movs	r3, #0
 8003470:	e7f0      	b.n	8003454 <USBD_StdDevReq+0x240>
 8003472:	bf00      	nop
 8003474:	2000043f 	.word	0x2000043f

08003478 <USBD_StdItfReq>:
{
 8003478:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800347a:	780b      	ldrb	r3, [r1, #0]
{
 800347c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800347e:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003482:	065b      	lsls	r3, r3, #25
{
 8003484:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003486:	d501      	bpl.n	800348c <USBD_StdItfReq+0x14>
 8003488:	2a40      	cmp	r2, #64	@ 0x40
 800348a:	d115      	bne.n	80034b8 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 800348c:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8003490:	3b01      	subs	r3, #1
 8003492:	2b02      	cmp	r3, #2
 8003494:	d810      	bhi.n	80034b8 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003496:	792b      	ldrb	r3, [r5, #4]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d80d      	bhi.n	80034b8 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800349c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 80034a0:	4629      	mov	r1, r5
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	4620      	mov	r0, r4
 80034a6:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80034a8:	88eb      	ldrh	r3, [r5, #6]
 80034aa:	b91b      	cbnz	r3, 80034b4 <USBD_StdItfReq+0x3c>
 80034ac:	b910      	cbnz	r0, 80034b4 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 80034ae:	4620      	mov	r0, r4
 80034b0:	f000 f8ea 	bl	8003688 <USBD_CtlSendStatus>
}
 80034b4:	2000      	movs	r0, #0
 80034b6:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 80034b8:	4620      	mov	r0, r4
 80034ba:	f7ff fe9f 	bl	80031fc <USBD_CtlError.constprop.0>
          break;
 80034be:	e7f9      	b.n	80034b4 <USBD_StdItfReq+0x3c>

080034c0 <USBD_StdEPReq>:
{
 80034c0:	b538      	push	{r3, r4, r5, lr}
 80034c2:	780a      	ldrb	r2, [r1, #0]
 80034c4:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 80034c6:	f002 0260 	and.w	r2, r2, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80034ca:	2a20      	cmp	r2, #32
{
 80034cc:	460b      	mov	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 80034ce:	888d      	ldrh	r5, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80034d0:	d026      	beq.n	8003520 <USBD_StdEPReq+0x60>
 80034d2:	2a40      	cmp	r2, #64	@ 0x40
 80034d4:	d024      	beq.n	8003520 <USBD_StdEPReq+0x60>
 80034d6:	bb8a      	cbnz	r2, 800353c <USBD_StdEPReq+0x7c>
      switch (req->bRequest)
 80034d8:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80034da:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 80034dc:	2a01      	cmp	r2, #1
 80034de:	d03d      	beq.n	800355c <USBD_StdEPReq+0x9c>
 80034e0:	2a03      	cmp	r2, #3
 80034e2:	d025      	beq.n	8003530 <USBD_StdEPReq+0x70>
 80034e4:	bb52      	cbnz	r2, 800353c <USBD_StdEPReq+0x7c>
          switch (pdev->dev_state)
 80034e6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d04d      	beq.n	800358a <USBD_StdEPReq+0xca>
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d124      	bne.n	800353c <USBD_StdEPReq+0x7c>
              if ((ep_addr & 0x80U) == 0x80U)
 80034f2:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80034f4:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 80034f8:	f015 0f80 	tst.w	r5, #128	@ 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80034fc:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8003500:	d053      	beq.n	80035aa <USBD_StdEPReq+0xea>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	b1d3      	cbz	r3, 800353c <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003506:	2514      	movs	r5, #20
 8003508:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 800350c:	fb03 5505 	mla	r5, r3, r5, r5
 8003510:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003512:	064b      	lsls	r3, r1, #25
 8003514:	d155      	bne.n	80035c2 <USBD_StdEPReq+0x102>
{
 8003516:	2300      	movs	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003518:	2202      	movs	r2, #2
 800351a:	4629      	mov	r1, r5
                pep->status = 0x0000U;
 800351c:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800351e:	e040      	b.n	80035a2 <USBD_StdEPReq+0xe2>
      pdev->pClass->Setup(pdev, req);
 8003520:	f8d4 22b4 	ldr.w	r2, [r4, #692]	@ 0x2b4
 8003524:	4619      	mov	r1, r3
 8003526:	4620      	mov	r0, r4
 8003528:	6892      	ldr	r2, [r2, #8]
 800352a:	4790      	blx	r2
}
 800352c:	2000      	movs	r0, #0
 800352e:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 8003530:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8003534:	2a02      	cmp	r2, #2
 8003536:	d01f      	beq.n	8003578 <USBD_StdEPReq+0xb8>
 8003538:	2a03      	cmp	r2, #3
 800353a:	d003      	beq.n	8003544 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 800353c:	4620      	mov	r0, r4
 800353e:	f7ff fe5d 	bl	80031fc <USBD_CtlError.constprop.0>
              break;
 8003542:	e7f3      	b.n	800352c <USBD_StdEPReq+0x6c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003544:	885a      	ldrh	r2, [r3, #2]
 8003546:	b92a      	cbnz	r2, 8003554 <USBD_StdEPReq+0x94>
                if ((ep_addr != 0x00U) &&
 8003548:	064a      	lsls	r2, r1, #25
 800354a:	d003      	beq.n	8003554 <USBD_StdEPReq+0x94>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800354c:	88db      	ldrh	r3, [r3, #6]
 800354e:	b90b      	cbnz	r3, 8003554 <USBD_StdEPReq+0x94>
                  USBD_LL_StallEP(pdev, ep_addr);
 8003550:	f000 fa28 	bl	80039a4 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8003554:	4620      	mov	r0, r4
 8003556:	f000 f897 	bl	8003688 <USBD_CtlSendStatus>
              break;
 800355a:	e7e7      	b.n	800352c <USBD_StdEPReq+0x6c>
          switch (pdev->dev_state)
 800355c:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8003560:	2a02      	cmp	r2, #2
 8003562:	d009      	beq.n	8003578 <USBD_StdEPReq+0xb8>
 8003564:	2a03      	cmp	r2, #3
 8003566:	d1e9      	bne.n	800353c <USBD_StdEPReq+0x7c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003568:	885b      	ldrh	r3, [r3, #2]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1de      	bne.n	800352c <USBD_StdEPReq+0x6c>
                if ((ep_addr & 0x7FU) != 0x00U)
 800356e:	064d      	lsls	r5, r1, #25
 8003570:	d0f0      	beq.n	8003554 <USBD_StdEPReq+0x94>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8003572:	f000 fa20 	bl	80039b6 <USBD_LL_ClearStallEP>
 8003576:	e7ed      	b.n	8003554 <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003578:	064b      	lsls	r3, r1, #25
 800357a:	d0df      	beq.n	800353c <USBD_StdEPReq+0x7c>
                USBD_LL_StallEP(pdev, ep_addr);
 800357c:	f000 fa12 	bl	80039a4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003580:	2180      	movs	r1, #128	@ 0x80
 8003582:	4620      	mov	r0, r4
 8003584:	f000 fa0e 	bl	80039a4 <USBD_LL_StallEP>
 8003588:	e7d0      	b.n	800352c <USBD_StdEPReq+0x6c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800358a:	0649      	lsls	r1, r1, #25
 800358c:	d1d6      	bne.n	800353c <USBD_StdEPReq+0x7c>
              pep->status = 0x0000U;
 800358e:	2300      	movs	r3, #0
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003590:	062a      	lsls	r2, r5, #24
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8003592:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003596:	bf4c      	ite	mi
 8003598:	f100 0114 	addmi.w	r1, r0, #20
 800359c:	f500 71aa 	addpl.w	r1, r0, #340	@ 0x154
              pep->status = 0x0000U;
 80035a0:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80035a2:	4620      	mov	r0, r4
 80035a4:	f000 f846 	bl	8003634 <USBD_CtlSendData>
              break;
 80035a8:	e7c0      	b.n	800352c <USBD_StdEPReq+0x6c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80035aa:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0c4      	beq.n	800353c <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80035b2:	2314      	movs	r3, #20
                    &pdev->ep_out[ep_addr & 0x7FU];
 80035b4:	f001 057f 	and.w	r5, r1, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80035b8:	fb03 0505 	mla	r5, r3, r5, r0
 80035bc:	f505 75aa 	add.w	r5, r5, #340	@ 0x154
 80035c0:	e7a7      	b.n	8003512 <USBD_StdEPReq+0x52>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80035c2:	4620      	mov	r0, r4
 80035c4:	f000 fa00 	bl	80039c8 <USBD_LL_IsStallEP>
 80035c8:	2800      	cmp	r0, #0
 80035ca:	d0a4      	beq.n	8003516 <USBD_StdEPReq+0x56>
 80035cc:	2301      	movs	r3, #1
 80035ce:	e7a3      	b.n	8003518 <USBD_StdEPReq+0x58>

080035d0 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 80035d0:	780b      	ldrb	r3, [r1, #0]
 80035d2:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80035d4:	784b      	ldrb	r3, [r1, #1]
 80035d6:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80035d8:	884b      	ldrh	r3, [r1, #2]
 80035da:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80035dc:	888b      	ldrh	r3, [r1, #4]
 80035de:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80035e0:	88cb      	ldrh	r3, [r1, #6]
 80035e2:	80c3      	strh	r3, [r0, #6]
}
 80035e4:	4770      	bx	lr

080035e6 <USBD_CtlError>:
{
 80035e6:	b510      	push	{r4, lr}
 80035e8:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80035ea:	2180      	movs	r1, #128	@ 0x80
 80035ec:	f000 f9da 	bl	80039a4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80035f0:	4620      	mov	r0, r4
}
 80035f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80035f6:	2100      	movs	r1, #0
 80035f8:	f000 b9d4 	b.w	80039a4 <USBD_LL_StallEP>

080035fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80035fc:	b570      	push	{r4, r5, r6, lr}
 80035fe:	460d      	mov	r5, r1
 8003600:	4616      	mov	r6, r2
  uint8_t idx = 0U;

  if (desc != NULL)
 8003602:	4604      	mov	r4, r0
 8003604:	b170      	cbz	r0, 8003624 <USBD_GetString+0x28>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8003606:	f7fc fda1 	bl	800014c <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800360a:	b2c3      	uxtb	r3, r0
 800360c:	3301      	adds	r3, #1
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8003612:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003614:	2303      	movs	r3, #3
      unicode[idx++] =  0U;
 8003616:	2000      	movs	r0, #0
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003618:	706b      	strb	r3, [r5, #1]
 800361a:	2302      	movs	r3, #2
 800361c:	3c01      	subs	r4, #1
    while (*desc != '\0')
 800361e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8003622:	b901      	cbnz	r1, 8003626 <USBD_GetString+0x2a>
}
 8003624:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	54e9      	strb	r1, [r5, r3]
 800362a:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 800362c:	3302      	adds	r3, #2
 800362e:	b2db      	uxtb	r3, r3
 8003630:	54a8      	strb	r0, [r5, r2]
 8003632:	e7f4      	b.n	800361e <USBD_GetString+0x22>

08003634 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8003634:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003636:	2202      	movs	r2, #2
{
 8003638:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 800363a:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800363e:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003642:	460a      	mov	r2, r1
 8003644:	2100      	movs	r1, #0
 8003646:	f000 f9d9 	bl	80039fc <USBD_LL_Transmit>

  return USBD_OK;
}
 800364a:	2000      	movs	r0, #0
 800364c:	bd10      	pop	{r4, pc}

0800364e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800364e:	b508      	push	{r3, lr}
 8003650:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003652:	460a      	mov	r2, r1
 8003654:	2100      	movs	r1, #0
 8003656:	f000 f9d1 	bl	80039fc <USBD_LL_Transmit>

  return USBD_OK;
}
 800365a:	2000      	movs	r0, #0
 800365c:	bd08      	pop	{r3, pc}

0800365e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800365e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8003660:	2203      	movs	r2, #3
{
 8003662:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8003664:	e9c0 3357 	strd	r3, r3, [r0, #348]	@ 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8003668:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800366c:	460a      	mov	r2, r1
 800366e:	2100      	movs	r1, #0
 8003670:	f000 f9cd 	bl	8003a0e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003674:	2000      	movs	r0, #0
 8003676:	bd10      	pop	{r4, pc}

08003678 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8003678:	b508      	push	{r3, lr}
 800367a:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800367c:	460a      	mov	r2, r1
 800367e:	2100      	movs	r1, #0
 8003680:	f000 f9c5 	bl	8003a0e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003684:	2000      	movs	r0, #0
 8003686:	bd08      	pop	{r3, pc}

08003688 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8003688:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800368a:	2304      	movs	r3, #4
 800368c:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8003690:	2300      	movs	r3, #0
 8003692:	461a      	mov	r2, r3
 8003694:	4619      	mov	r1, r3
 8003696:	f000 f9b1 	bl	80039fc <USBD_LL_Transmit>

  return USBD_OK;
}
 800369a:	2000      	movs	r0, #0
 800369c:	bd08      	pop	{r3, pc}

0800369e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800369e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80036a0:	2305      	movs	r3, #5
 80036a2:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80036a6:	2300      	movs	r3, #0
 80036a8:	461a      	mov	r2, r3
 80036aa:	4619      	mov	r1, r3
 80036ac:	f000 f9af 	bl	8003a0e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80036b0:	2000      	movs	r0, #0
 80036b2:	bd08      	pop	{r3, pc}

080036b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80036b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80036b6:	2200      	movs	r2, #0
 80036b8:	490e      	ldr	r1, [pc, #56]	@ (80036f4 <MX_USB_DEVICE_Init+0x40>)
 80036ba:	480f      	ldr	r0, [pc, #60]	@ (80036f8 <MX_USB_DEVICE_Init+0x44>)
 80036bc:	f7ff fc53 	bl	8002f66 <USBD_Init>
 80036c0:	b108      	cbz	r0, 80036c6 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 80036c2:	f7fc fddf 	bl	8000284 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 80036c6:	490d      	ldr	r1, [pc, #52]	@ (80036fc <MX_USB_DEVICE_Init+0x48>)
 80036c8:	480b      	ldr	r0, [pc, #44]	@ (80036f8 <MX_USB_DEVICE_Init+0x44>)
 80036ca:	f7ff fc61 	bl	8002f90 <USBD_RegisterClass>
 80036ce:	b108      	cbz	r0, 80036d4 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 80036d0:	f7fc fdd8 	bl	8000284 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 80036d4:	490a      	ldr	r1, [pc, #40]	@ (8003700 <MX_USB_DEVICE_Init+0x4c>)
 80036d6:	4808      	ldr	r0, [pc, #32]	@ (80036f8 <MX_USB_DEVICE_Init+0x44>)
 80036d8:	f7ff fc40 	bl	8002f5c <USBD_DFU_RegisterMedia>
 80036dc:	b108      	cbz	r0, 80036e2 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80036de:	f7fc fdd1 	bl	8000284 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80036e2:	4805      	ldr	r0, [pc, #20]	@ (80036f8 <MX_USB_DEVICE_Init+0x44>)
 80036e4:	f7ff fc5b 	bl	8002f9e <USBD_Start>
 80036e8:	b118      	cbz	r0, 80036f2 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80036ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80036ee:	f7fc bdc9 	b.w	8000284 <Error_Handler>
}
 80036f2:	bd08      	pop	{r3, pc}
 80036f4:	200000ac 	.word	0x200000ac
 80036f8:	20000440 	.word	0x20000440
 80036fc:	2000003c 	.word	0x2000003c
 8003700:	200000c8 	.word	0x200000c8

08003704 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8003704:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8003706:	4801      	ldr	r0, [pc, #4]	@ (800370c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8003708:	800b      	strh	r3, [r1, #0]
}
 800370a:	4770      	bx	lr
 800370c:	20000098 	.word	0x20000098

08003710 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8003710:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8003712:	4801      	ldr	r0, [pc, #4]	@ (8003718 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8003714:	800b      	strh	r3, [r1, #0]
}
 8003716:	4770      	bx	lr
 8003718:	20000094 	.word	0x20000094

0800371c <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800371c:	2300      	movs	r3, #0
{
 800371e:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8003720:	461e      	mov	r6, r3
 8003722:	1c4d      	adds	r5, r1, #1
  for (idx = 0; idx < len; idx++)
 8003724:	b2dc      	uxtb	r4, r3
 8003726:	42a2      	cmp	r2, r4
 8003728:	d800      	bhi.n	800372c <IntToUnicode+0x10>
  }
}
 800372a:	bd70      	pop	{r4, r5, r6, pc}
      pbuf[2 * idx] = (value >> 28) + '0';
 800372c:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 800372e:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8003732:	bf34      	ite	cc
 8003734:	3430      	addcc	r4, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003736:	3437      	addcs	r4, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8003738:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    value = value << 4;
 800373c:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 800373e:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 8003742:	3301      	adds	r3, #1
 8003744:	e7ee      	b.n	8003724 <IntToUnicode+0x8>
	...

08003748 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8003748:	231a      	movs	r3, #26
{
 800374a:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800374c:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800374e:	4b0a      	ldr	r3, [pc, #40]	@ (8003778 <USBD_FS_SerialStrDescriptor+0x30>)
 8003750:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	@ 0x7e8
  deviceserial0 += deviceserial2;
 8003754:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	@ 0x7f0
  if (deviceserial0 != 0)
 8003758:	1880      	adds	r0, r0, r2
 800375a:	d00a      	beq.n	8003772 <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800375c:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	@ 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003760:	4906      	ldr	r1, [pc, #24]	@ (800377c <USBD_FS_SerialStrDescriptor+0x34>)
 8003762:	2208      	movs	r2, #8
 8003764:	f7ff ffda 	bl	800371c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8003768:	2204      	movs	r2, #4
 800376a:	4620      	mov	r0, r4
 800376c:	3110      	adds	r1, #16
 800376e:	f7ff ffd5 	bl	800371c <IntToUnicode>
}
 8003772:	4803      	ldr	r0, [pc, #12]	@ (8003780 <USBD_FS_SerialStrDescriptor+0x38>)
 8003774:	bd10      	pop	{r4, pc}
 8003776:	bf00      	nop
 8003778:	1ffff000 	.word	0x1ffff000
 800377c:	2000007a 	.word	0x2000007a
 8003780:	20000078 	.word	0x20000078

08003784 <USBD_FS_ManufacturerStrDescriptor>:
{
 8003784:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003786:	4c04      	ldr	r4, [pc, #16]	@ (8003798 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8003788:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800378a:	4804      	ldr	r0, [pc, #16]	@ (800379c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800378c:	4621      	mov	r1, r4
 800378e:	f7ff ff35 	bl	80035fc <USBD_GetString>
}
 8003792:	4620      	mov	r0, r4
 8003794:	bd10      	pop	{r4, pc}
 8003796:	bf00      	nop
 8003798:	20000704 	.word	0x20000704
 800379c:	08003aec 	.word	0x08003aec

080037a0 <USBD_FS_ProductStrDescriptor>:
{
 80037a0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80037a2:	4c04      	ldr	r4, [pc, #16]	@ (80037b4 <USBD_FS_ProductStrDescriptor+0x14>)
{
 80037a4:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80037a6:	4804      	ldr	r0, [pc, #16]	@ (80037b8 <USBD_FS_ProductStrDescriptor+0x18>)
 80037a8:	4621      	mov	r1, r4
 80037aa:	f7ff ff27 	bl	80035fc <USBD_GetString>
}
 80037ae:	4620      	mov	r0, r4
 80037b0:	bd10      	pop	{r4, pc}
 80037b2:	bf00      	nop
 80037b4:	20000704 	.word	0x20000704
 80037b8:	08003aff 	.word	0x08003aff

080037bc <USBD_FS_ConfigStrDescriptor>:
{
 80037bc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80037be:	4c04      	ldr	r4, [pc, #16]	@ (80037d0 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 80037c0:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80037c2:	4804      	ldr	r0, [pc, #16]	@ (80037d4 <USBD_FS_ConfigStrDescriptor+0x18>)
 80037c4:	4621      	mov	r1, r4
 80037c6:	f7ff ff19 	bl	80035fc <USBD_GetString>
}
 80037ca:	4620      	mov	r0, r4
 80037cc:	bd10      	pop	{r4, pc}
 80037ce:	bf00      	nop
 80037d0:	20000704 	.word	0x20000704
 80037d4:	08003b1e 	.word	0x08003b1e

080037d8 <USBD_FS_InterfaceStrDescriptor>:
{
 80037d8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80037da:	4c04      	ldr	r4, [pc, #16]	@ (80037ec <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 80037dc:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80037de:	4804      	ldr	r0, [pc, #16]	@ (80037f0 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80037e0:	4621      	mov	r1, r4
 80037e2:	f7ff ff0b 	bl	80035fc <USBD_GetString>
}
 80037e6:	4620      	mov	r0, r4
 80037e8:	bd10      	pop	{r4, pc}
 80037ea:	bf00      	nop
 80037ec:	20000704 	.word	0x20000704
 80037f0:	08003b29 	.word	0x08003b29

080037f4 <MEM_If_Init_FS>:
uint16_t MEM_If_Init_FS(void)
{
  /* USER CODE BEGIN 0 */
    return (USBD_OK);
  /* USER CODE END 0 */
}
 80037f4:	2000      	movs	r0, #0
 80037f6:	4770      	bx	lr

080037f8 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 80037f8:	b510      	push	{r4, lr}
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
    for (int i = 0; i < Len; i++)
 80037fa:	2300      	movs	r3, #0
{
 80037fc:	4604      	mov	r4, r0
 80037fe:	4608      	mov	r0, r1
    for (int i = 0; i < Len; i++)
 8003800:	4293      	cmp	r3, r2
 8003802:	d100      	bne.n	8003806 <MEM_If_Read_FS+0xe>
    {
        dest[i] = src[i];
    }
    return (uint8_t *)(dest);
  /* USER CODE END 4 */
}
 8003804:	bd10      	pop	{r4, pc}
        dest[i] = src[i];
 8003806:	5ce1      	ldrb	r1, [r4, r3]
 8003808:	54c1      	strb	r1, [r0, r3]
    for (int i = 0; i < Len; i++)
 800380a:	3301      	adds	r3, #1
 800380c:	e7f8      	b.n	8003800 <MEM_If_Read_FS+0x8>

0800380e <MEM_If_GetStatus_FS>:
  /* USER CODE BEGIN 5 */
    switch (Cmd)
    {
    case DFU_MEDIA_PROGRAM:
        buffer[1] = (50 >> 0);
        buffer[2] = (50 >> 8);
 800380e:	2000      	movs	r0, #0
        buffer[1] = (50 >> 0);
 8003810:	2332      	movs	r3, #50	@ 0x32
        buffer[2] = (50 >> 8);
 8003812:	7090      	strb	r0, [r2, #2]
        buffer[1] = (50 >> 0);
 8003814:	7053      	strb	r3, [r2, #1]
        buffer[3] = 0;
 8003816:	70d0      	strb	r0, [r2, #3]
        buffer[3] = 0;
        break;
    }
    return (USBD_OK);
  /* USER CODE END 5 */
}
 8003818:	4770      	bx	lr

0800381a <MEM_If_Write_FS>:
{
 800381a:	b508      	push	{r3, lr}
 800381c:	460b      	mov	r3, r1
    if (flashWrite((uint32_t)dest, src, Len) != true)
 800381e:	4601      	mov	r1, r0
 8003820:	4618      	mov	r0, r3
 8003822:	f7fc fded 	bl	8000400 <flashWrite>
 8003826:	f080 0001 	eor.w	r0, r0, #1
}
 800382a:	b2c0      	uxtb	r0, r0
 800382c:	bd08      	pop	{r3, pc}

0800382e <MEM_If_Erase_FS>:
    if (flashErase(Add, 1024) != true)
 800382e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
{
 8003832:	b508      	push	{r3, lr}
    if (flashErase(Add, 1024) != true)
 8003834:	f7fc fd96 	bl	8000364 <flashErase>
 8003838:	f080 0001 	eor.w	r0, r0, #1
}
 800383c:	b2c0      	uxtb	r0, r0
 800383e:	bd08      	pop	{r3, pc}

08003840 <MEM_If_DeInit_FS>:
uint16_t MEM_If_DeInit_FS(void)
 8003840:	2000      	movs	r0, #0
 8003842:	4770      	bx	lr

08003844 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8003844:	b118      	cbz	r0, 800384e <USBD_Get_USB_Status+0xa>
 8003846:	2802      	cmp	r0, #2
 8003848:	bf0c      	ite	eq
 800384a:	2001      	moveq	r0, #1
 800384c:	2002      	movne	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800384e:	4770      	bx	lr

08003850 <HAL_PCD_MspInit>:
{
 8003850:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8003852:	4b0e      	ldr	r3, [pc, #56]	@ (800388c <HAL_PCD_MspInit+0x3c>)
 8003854:	6802      	ldr	r2, [r0, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d115      	bne.n	8003886 <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 800385a:	f503 33da 	add.w	r3, r3, #111616	@ 0x1b400
 800385e:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003860:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8003862:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003866:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003868:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800386a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800386c:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800386e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003872:	9301      	str	r3, [sp, #4]
 8003874:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003876:	f7fc ff55 	bl	8000724 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800387a:	2014      	movs	r0, #20
}
 800387c:	b003      	add	sp, #12
 800387e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003882:	f7fc bf7f 	b.w	8000784 <HAL_NVIC_EnableIRQ>
}
 8003886:	b003      	add	sp, #12
 8003888:	f85d fb04 	ldr.w	pc, [sp], #4
 800388c:	40005c00 	.word	0x40005c00

08003890 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003890:	f500 7126 	add.w	r1, r0, #664	@ 0x298
 8003894:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8003898:	f7ff bba6 	b.w	8002fe8 <USBD_LL_SetupStage>

0800389c <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800389c:	2328      	movs	r3, #40	@ 0x28
 800389e:	fb03 0301 	mla	r3, r3, r1, r0
 80038a2:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80038a6:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 80038aa:	f7ff bbca 	b.w	8003042 <USBD_LL_DataOutStage>

080038ae <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80038ae:	2328      	movs	r3, #40	@ 0x28
 80038b0:	fb03 0301 	mla	r3, r3, r1, r0
 80038b4:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80038b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038ba:	f7ff bbfa 	b.w	80030b2 <USBD_LL_DataInStage>

080038be <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80038be:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80038c2:	f7ff bc8f 	b.w	80031e4 <USBD_LL_SOF>

080038c6 <HAL_PCD_ResetCallback>:
{
 80038c6:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80038c8:	7983      	ldrb	r3, [r0, #6]
{
 80038ca:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d001      	beq.n	80038d4 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 80038d0:	f7fc fcd8 	bl	8000284 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80038d4:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
 80038d8:	2101      	movs	r1, #1
 80038da:	f7ff fc6d 	bl	80031b8 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80038de:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
}
 80038e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80038e6:	f7ff bc40 	b.w	800316a <USBD_LL_Reset>
	...

080038ec <HAL_PCD_SuspendCallback>:
{
 80038ec:	b510      	push	{r4, lr}
 80038ee:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80038f0:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80038f4:	f7ff fc63 	bl	80031be <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 80038f8:	7aa3      	ldrb	r3, [r4, #10]
 80038fa:	b123      	cbz	r3, 8003906 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80038fc:	4a02      	ldr	r2, [pc, #8]	@ (8003908 <HAL_PCD_SuspendCallback+0x1c>)
 80038fe:	6913      	ldr	r3, [r2, #16]
 8003900:	f043 0306 	orr.w	r3, r3, #6
 8003904:	6113      	str	r3, [r2, #16]
}
 8003906:	bd10      	pop	{r4, pc}
 8003908:	e000ed00 	.word	0xe000ed00

0800390c <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800390c:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8003910:	f7ff bc5e 	b.w	80031d0 <USBD_LL_Resume>

08003914 <USBD_LL_Init>:
{
 8003914:	b510      	push	{r4, lr}
  hpcd_USB_FS.Instance = USB;
 8003916:	4b12      	ldr	r3, [pc, #72]	@ (8003960 <USBD_LL_Init+0x4c>)
{
 8003918:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800391a:	4812      	ldr	r0, [pc, #72]	@ (8003964 <USBD_LL_Init+0x50>)
  hpcd_USB_FS.Instance = USB;
 800391c:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800391e:	2308      	movs	r3, #8
 8003920:	7103      	strb	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003922:	2302      	movs	r3, #2
 8003924:	7183      	strb	r3, [r0, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003926:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8003928:	f8c0 42d4 	str.w	r4, [r0, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800392c:	f8c4 02c0 	str.w	r0, [r4, #704]	@ 0x2c0
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003930:	8143      	strh	r3, [r0, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003932:	7303      	strb	r3, [r0, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003934:	f7fd f954 	bl	8000be0 <HAL_PCD_Init>
 8003938:	b108      	cbz	r0, 800393e <USBD_LL_Init+0x2a>
    Error_Handler( );
 800393a:	f7fc fca3 	bl	8000284 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800393e:	2200      	movs	r2, #0
 8003940:	2318      	movs	r3, #24
 8003942:	4611      	mov	r1, r2
 8003944:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8003948:	f7fd ffbd 	bl	80018c6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800394c:	2358      	movs	r3, #88	@ 0x58
 800394e:	2200      	movs	r2, #0
 8003950:	2180      	movs	r1, #128	@ 0x80
 8003952:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8003956:	f7fd ffb6 	bl	80018c6 <HAL_PCDEx_PMAConfig>
}
 800395a:	2000      	movs	r0, #0
 800395c:	bd10      	pop	{r4, pc}
 800395e:	bf00      	nop
 8003960:	40005c00 	.word	0x40005c00
 8003964:	20000d24 	.word	0x20000d24

08003968 <USBD_LL_Start>:
{
 8003968:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800396a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800396e:	f7fd f99a 	bl	8000ca6 <HAL_PCD_Start>
}
 8003972:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003976:	f7ff bf65 	b.w	8003844 <USBD_Get_USB_Status>

0800397a <USBD_LL_Stop>:
{
 800397a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Stop(pdev->pData);
 800397c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8003980:	f7fd f9aa 	bl	8000cd8 <HAL_PCD_Stop>
}
 8003984:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003988:	f7ff bf5c 	b.w	8003844 <USBD_Get_USB_Status>

0800398c <USBD_LL_OpenEP>:
{
 800398c:	b510      	push	{r4, lr}
 800398e:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003990:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
{
 8003994:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003996:	4623      	mov	r3, r4
 8003998:	f7fd fece 	bl	8001738 <HAL_PCD_EP_Open>
}
 800399c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80039a0:	f7ff bf50 	b.w	8003844 <USBD_Get_USB_Status>

080039a4 <USBD_LL_StallEP>:
{
 80039a4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80039a6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80039aa:	f7fd ff24 	bl	80017f6 <HAL_PCD_EP_SetStall>
}
 80039ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80039b2:	f7ff bf47 	b.w	8003844 <USBD_Get_USB_Status>

080039b6 <USBD_LL_ClearStallEP>:
{
 80039b6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80039b8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80039bc:	f7fd ff51 	bl	8001862 <HAL_PCD_EP_ClrStall>
}
 80039c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80039c4:	f7ff bf3e 	b.w	8003844 <USBD_Get_USB_Status>

080039c8 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80039c8:	2228      	movs	r2, #40	@ 0x28
  if((ep_addr & 0x80) == 0x80)
 80039ca:	f011 0f80 	tst.w	r1, #128	@ 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80039ce:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80039d2:	bf1b      	ittet	ne
 80039d4:	f001 017f 	andne.w	r1, r1, #127	@ 0x7f
 80039d8:	fb02 3301 	mlane	r3, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80039dc:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80039e0:	7c98      	ldrbne	r0, [r3, #18]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80039e2:	bf08      	it	eq
 80039e4:	f893 0152 	ldrbeq.w	r0, [r3, #338]	@ 0x152
}
 80039e8:	4770      	bx	lr

080039ea <USBD_LL_SetUSBAddress>:
{
 80039ea:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80039ec:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80039f0:	f7fd f98b 	bl	8000d0a <HAL_PCD_SetAddress>
}
 80039f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80039f8:	f7ff bf24 	b.w	8003844 <USBD_Get_USB_Status>

080039fc <USBD_LL_Transmit>:
{
 80039fc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80039fe:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8003a02:	f7fd fee0 	bl	80017c6 <HAL_PCD_EP_Transmit>
}
 8003a06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003a0a:	f7ff bf1b 	b.w	8003844 <USBD_Get_USB_Status>

08003a0e <USBD_LL_PrepareReceive>:
{
 8003a0e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003a10:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8003a14:	f7fd fec0 	bl	8001798 <HAL_PCD_EP_Receive>
}
 8003a18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003a1c:	f7ff bf12 	b.w	8003844 <USBD_Get_USB_Status>

08003a20 <USBD_static_malloc>:
}
 8003a20:	4800      	ldr	r0, [pc, #0]	@ (8003a24 <USBD_static_malloc+0x4>)
 8003a22:	4770      	bx	lr
 8003a24:	20000904 	.word	0x20000904

08003a28 <USBD_static_free>:
}
 8003a28:	4770      	bx	lr

08003a2a <HAL_PCDEx_SetConnectionState>:
}
 8003a2a:	4770      	bx	lr

08003a2c <main>:
 */

#include "main.h"

int main(void)
{
 8003a2c:	b508      	push	{r3, lr}

    hwInit();
 8003a2e:	f7fc fded 	bl	800060c <hwInit>
    apInit();
 8003a32:	f7fc fb93 	bl	800015c <apInit>

    apMain();
 8003a36:	f7fc fb92 	bl	800015e <apMain>

    return 0;
}
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	bd08      	pop	{r3, pc}

08003a3e <memset>:
 8003a3e:	4603      	mov	r3, r0
 8003a40:	4402      	add	r2, r0
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d100      	bne.n	8003a48 <memset+0xa>
 8003a46:	4770      	bx	lr
 8003a48:	f803 1b01 	strb.w	r1, [r3], #1
 8003a4c:	e7f9      	b.n	8003a42 <memset+0x4>
	...

08003a50 <__libc_init_array>:
 8003a50:	b570      	push	{r4, r5, r6, lr}
 8003a52:	2600      	movs	r6, #0
 8003a54:	4d0c      	ldr	r5, [pc, #48]	@ (8003a88 <__libc_init_array+0x38>)
 8003a56:	4c0d      	ldr	r4, [pc, #52]	@ (8003a8c <__libc_init_array+0x3c>)
 8003a58:	1b64      	subs	r4, r4, r5
 8003a5a:	10a4      	asrs	r4, r4, #2
 8003a5c:	42a6      	cmp	r6, r4
 8003a5e:	d109      	bne.n	8003a74 <__libc_init_array+0x24>
 8003a60:	f000 f81a 	bl	8003a98 <_init>
 8003a64:	2600      	movs	r6, #0
 8003a66:	4d0a      	ldr	r5, [pc, #40]	@ (8003a90 <__libc_init_array+0x40>)
 8003a68:	4c0a      	ldr	r4, [pc, #40]	@ (8003a94 <__libc_init_array+0x44>)
 8003a6a:	1b64      	subs	r4, r4, r5
 8003a6c:	10a4      	asrs	r4, r4, #2
 8003a6e:	42a6      	cmp	r6, r4
 8003a70:	d105      	bne.n	8003a7e <__libc_init_array+0x2e>
 8003a72:	bd70      	pop	{r4, r5, r6, pc}
 8003a74:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a78:	4798      	blx	r3
 8003a7a:	3601      	adds	r6, #1
 8003a7c:	e7ee      	b.n	8003a5c <__libc_init_array+0xc>
 8003a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a82:	4798      	blx	r3
 8003a84:	3601      	adds	r6, #1
 8003a86:	e7f2      	b.n	8003a6e <__libc_init_array+0x1e>
 8003a88:	08003b68 	.word	0x08003b68
 8003a8c:	08003b68 	.word	0x08003b68
 8003a90:	08003b68 	.word	0x08003b68
 8003a94:	08003b6c 	.word	0x08003b6c

08003a98 <_init>:
 8003a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9a:	bf00      	nop
 8003a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a9e:	bc08      	pop	{r3}
 8003aa0:	469e      	mov	lr, r3
 8003aa2:	4770      	bx	lr

08003aa4 <_fini>:
 8003aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aa6:	bf00      	nop
 8003aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aaa:	bc08      	pop	{r3}
 8003aac:	469e      	mov	lr, r3
 8003aae:	4770      	bx	lr
