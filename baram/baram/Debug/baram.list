
baram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ce0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08009dec  08009dec  0000adec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e74  08009e74  0000b190  2**0
                  CONTENTS
  4 .ARM          00000000  08009e74  08009e74  0000b190  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009e74  08009e74  0000b190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e74  08009e74  0000ae74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e78  08009e78  0000ae78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000190  20000000  08009e7c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011b4  20000190  0800a00c  0000b190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001344  0800a00c  0000b344  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b190  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130dd  00000000  00000000  0000b1b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040b2  00000000  00000000  0001e296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  00022348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cca  00000000  00000000  00023490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bf7c  00000000  00000000  0002415a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cc16  00000000  00000000  000400d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089b44  00000000  00000000  0005ccec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6830  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004284  00000000  00000000  000e6874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000eaaf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000190 	.word	0x20000190
 8000128:	00000000 	.word	0x00000000
 800012c:	08009dd4 	.word	0x08009dd4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000194 	.word	0x20000194
 8000148:	08009dd4 	.word	0x08009dd4

0800014c <apInit>:
 */

#include "ap.h"

void apInit(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    uartOpen(_DEF_UART1, 57600); // USB
 8000150:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8000154:	2000      	movs	r0, #0
 8000156:	f000 fb75 	bl	8000844 <uartOpen>
    uartOpen(_DEF_UART2, 57600); // UART
 800015a:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 800015e:	2001      	movs	r0, #1
 8000160:	f000 fb70 	bl	8000844 <uartOpen>
}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}

08000168 <apMain>:

void apMain(void)
{
 8000168:	b590      	push	{r4, r7, lr}
 800016a:	b0a5      	sub	sp, #148	@ 0x94
 800016c:	af00      	add	r7, sp, #0
    uint32_t pre_time;
    uint8_t rx_buf[128];
    uint32_t rx_len;

    pre_time = millis();
 800016e:	f000 f8c4 	bl	80002fa <millis>
 8000172:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
    while (1)
    {
        if (millis() - pre_time >= 500)
 8000176:	f000 f8c0 	bl	80002fa <millis>
 800017a:	4602      	mov	r2, r0
 800017c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000180:	1ad3      	subs	r3, r2, r3
 8000182:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000186:	d306      	bcc.n	8000196 <apMain+0x2e>
        {
            pre_time = millis();
 8000188:	f000 f8b7 	bl	80002fa <millis>
 800018c:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
            ledToggle(_DEF_LED1);
 8000190:	2000      	movs	r0, #0
 8000192:	f000 fa91 	bl	80006b8 <ledToggle>
        }
        if (uartGetBaud(_DEF_UART1) != uartGetBaud(_DEF_UART2))
 8000196:	2000      	movs	r0, #0
 8000198:	f000 fc6a 	bl	8000a70 <uartGetBaud>
 800019c:	4604      	mov	r4, r0
 800019e:	2001      	movs	r0, #1
 80001a0:	f000 fc66 	bl	8000a70 <uartGetBaud>
 80001a4:	4603      	mov	r3, r0
 80001a6:	429c      	cmp	r4, r3
 80001a8:	d007      	beq.n	80001ba <apMain+0x52>
        {
            uartOpen(_DEF_UART2, uartGetBaud(_DEF_UART1));
 80001aa:	2000      	movs	r0, #0
 80001ac:	f000 fc60 	bl	8000a70 <uartGetBaud>
 80001b0:	4603      	mov	r3, r0
 80001b2:	4619      	mov	r1, r3
 80001b4:	2001      	movs	r0, #1
 80001b6:	f000 fb45 	bl	8000844 <uartOpen>
        }
        // USB->UART
        rx_len = uartAvailable(_DEF_UART1);
 80001ba:	2000      	movs	r0, #0
 80001bc:	f000 fbd8 	bl	8000970 <uartAvailable>
 80001c0:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
        if (rx_len > 128)
 80001c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80001c8:	2b80      	cmp	r3, #128	@ 0x80
 80001ca:	d902      	bls.n	80001d2 <apMain+0x6a>
        {
            rx_len = 128;
 80001cc:	2380      	movs	r3, #128	@ 0x80
 80001ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        }
        if (rx_len > 0)
 80001d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d020      	beq.n	800021c <apMain+0xb4>
        {
            for (int i = 0; i < rx_len; i++)
 80001da:	2300      	movs	r3, #0
 80001dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80001e0:	e00f      	b.n	8000202 <apMain+0x9a>
            {
                rx_buf[i] = uartRead(_DEF_UART1);
 80001e2:	2000      	movs	r0, #0
 80001e4:	f000 fbf6 	bl	80009d4 <uartRead>
 80001e8:	4603      	mov	r3, r0
 80001ea:	4619      	mov	r1, r3
 80001ec:	463a      	mov	r2, r7
 80001ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80001f2:	4413      	add	r3, r2
 80001f4:	460a      	mov	r2, r1
 80001f6:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < rx_len; i++)
 80001f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80001fc:	3301      	adds	r3, #1
 80001fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000202:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000206:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800020a:	429a      	cmp	r2, r3
 800020c:	d8e9      	bhi.n	80001e2 <apMain+0x7a>
            }
            uartWrite(_DEF_UART2, rx_buf, rx_len);
 800020e:	463b      	mov	r3, r7
 8000210:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000214:	4619      	mov	r1, r3
 8000216:	2001      	movs	r0, #1
 8000218:	f000 fbfe 	bl	8000a18 <uartWrite>
        }
        // UART->USB
        rx_len = uartAvailable(_DEF_UART2);
 800021c:	2001      	movs	r0, #1
 800021e:	f000 fba7 	bl	8000970 <uartAvailable>
 8000222:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
        if (rx_len > 128)
 8000226:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800022a:	2b80      	cmp	r3, #128	@ 0x80
 800022c:	d902      	bls.n	8000234 <apMain+0xcc>
        {
            rx_len = 128;
 800022e:	2380      	movs	r3, #128	@ 0x80
 8000230:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        }
        if (rx_len > 0)
 8000234:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000238:	2b00      	cmp	r3, #0
 800023a:	d09c      	beq.n	8000176 <apMain+0xe>
        {
            for (int i = 0; i < rx_len; i++)
 800023c:	2300      	movs	r3, #0
 800023e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000242:	e00f      	b.n	8000264 <apMain+0xfc>
            {
                rx_buf[i] = uartRead(_DEF_UART2);
 8000244:	2001      	movs	r0, #1
 8000246:	f000 fbc5 	bl	80009d4 <uartRead>
 800024a:	4603      	mov	r3, r0
 800024c:	4619      	mov	r1, r3
 800024e:	463a      	mov	r2, r7
 8000250:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000254:	4413      	add	r3, r2
 8000256:	460a      	mov	r2, r1
 8000258:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < rx_len; i++)
 800025a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800025e:	3301      	adds	r3, #1
 8000260:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000264:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000268:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800026c:	429a      	cmp	r2, r3
 800026e:	d8e9      	bhi.n	8000244 <apMain+0xdc>
            }
            uartWrite(_DEF_UART1, rx_buf, rx_len);
 8000270:	463b      	mov	r3, r7
 8000272:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000276:	4619      	mov	r1, r3
 8000278:	2000      	movs	r0, #0
 800027a:	f000 fbcd 	bl	8000a18 <uartWrite>
        if (millis() - pre_time >= 500)
 800027e:	e77a      	b.n	8000176 <apMain+0xe>

08000280 <bspInit>:
#include "bsp.h"

void SystemClock_Config(void);

void bspInit(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
    HAL_Init();
 8000286:	f000 fd0d 	bl	8000ca4 <HAL_Init>
    SystemClock_Config();
 800028a:	f000 f83d 	bl	8000308 <SystemClock_Config>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800028e:	4b14      	ldr	r3, [pc, #80]	@ (80002e0 <bspInit+0x60>)
 8000290:	699b      	ldr	r3, [r3, #24]
 8000292:	4a13      	ldr	r2, [pc, #76]	@ (80002e0 <bspInit+0x60>)
 8000294:	f043 0310 	orr.w	r3, r3, #16
 8000298:	6193      	str	r3, [r2, #24]
 800029a:	4b11      	ldr	r3, [pc, #68]	@ (80002e0 <bspInit+0x60>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	f003 0310 	and.w	r3, r3, #16
 80002a2:	60fb      	str	r3, [r7, #12]
 80002a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80002a6:	4b0e      	ldr	r3, [pc, #56]	@ (80002e0 <bspInit+0x60>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	4a0d      	ldr	r2, [pc, #52]	@ (80002e0 <bspInit+0x60>)
 80002ac:	f043 0320 	orr.w	r3, r3, #32
 80002b0:	6193      	str	r3, [r2, #24]
 80002b2:	4b0b      	ldr	r3, [pc, #44]	@ (80002e0 <bspInit+0x60>)
 80002b4:	699b      	ldr	r3, [r3, #24]
 80002b6:	f003 0320 	and.w	r3, r3, #32
 80002ba:	60bb      	str	r3, [r7, #8]
 80002bc:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002be:	4b08      	ldr	r3, [pc, #32]	@ (80002e0 <bspInit+0x60>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	4a07      	ldr	r2, [pc, #28]	@ (80002e0 <bspInit+0x60>)
 80002c4:	f043 0304 	orr.w	r3, r3, #4
 80002c8:	6193      	str	r3, [r2, #24]
 80002ca:	4b05      	ldr	r3, [pc, #20]	@ (80002e0 <bspInit+0x60>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	f003 0304 	and.w	r3, r3, #4
 80002d2:	607b      	str	r3, [r7, #4]
 80002d4:	687b      	ldr	r3, [r7, #4]

}
 80002d6:	bf00      	nop
 80002d8:	3710      	adds	r7, #16
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40021000 	.word	0x40021000

080002e4 <delay>:

void delay(uint32_t ms)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 80002ec:	6878      	ldr	r0, [r7, #4]
 80002ee:	f000 fd3b 	bl	8000d68 <HAL_Delay>
}
 80002f2:	bf00      	nop
 80002f4:	3708      	adds	r7, #8
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}

080002fa <millis>:

uint32_t millis(void)
{
 80002fa:	b580      	push	{r7, lr}
 80002fc:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 80002fe:	f000 fd29 	bl	8000d54 <HAL_GetTick>
 8000302:	4603      	mov	r3, r0
}
 8000304:	4618      	mov	r0, r3
 8000306:	bd80      	pop	{r7, pc}

08000308 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b094      	sub	sp, #80	@ 0x50
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000312:	2228      	movs	r2, #40	@ 0x28
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f009 fd2f 	bl	8009d7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031c:	f107 0314 	add.w	r3, r7, #20
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	605a      	str	r2, [r3, #4]
 8000326:	609a      	str	r2, [r3, #8]
 8000328:	60da      	str	r2, [r3, #12]
 800032a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000338:	2305      	movs	r3, #5
 800033a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800033c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000340:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000346:	2301      	movs	r3, #1
 8000348:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034a:	2301      	movs	r3, #1
 800034c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800034e:	2302      	movs	r3, #2
 8000350:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000352:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000356:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000358:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800035c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000362:	4618      	mov	r0, r3
 8000364:	f003 f940 	bl	80035e8 <HAL_RCC_OscConfig>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800036e:	f000 f82a 	bl	80003c6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000372:	230f      	movs	r3, #15
 8000374:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000376:	2302      	movs	r3, #2
 8000378:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800037e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000382:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000384:	2300      	movs	r3, #0
 8000386:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000388:	f107 0314 	add.w	r3, r7, #20
 800038c:	2102      	movs	r1, #2
 800038e:	4618      	mov	r0, r3
 8000390:	f003 fbac 	bl	8003aec <HAL_RCC_ClockConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800039a:	f000 f814 	bl	80003c6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 800039e:	2311      	movs	r3, #17
 80003a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80003a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003a6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003a8:	2300      	movs	r3, #0
 80003aa:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	4618      	mov	r0, r3
 80003b0:	f003 fd2a 	bl	8003e08 <HAL_RCCEx_PeriphCLKConfig>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80003ba:	f000 f804 	bl	80003c6 <Error_Handler>
  }
}
 80003be:	bf00      	nop
 80003c0:	3750      	adds	r7, #80	@ 0x50
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}

080003c6 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80003c6:	b480      	push	{r7}
 80003c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ca:	b672      	cpsid	i
}
 80003cc:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state
     */
    __disable_irq();
    while (1)
 80003ce:	bf00      	nop
 80003d0:	e7fd      	b.n	80003ce <Error_Handler+0x8>
	...

080003d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_AFIO_CLK_ENABLE();
 80003da:	4b15      	ldr	r3, [pc, #84]	@ (8000430 <HAL_MspInit+0x5c>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	4a14      	ldr	r2, [pc, #80]	@ (8000430 <HAL_MspInit+0x5c>)
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	6193      	str	r3, [r2, #24]
 80003e6:	4b12      	ldr	r3, [pc, #72]	@ (8000430 <HAL_MspInit+0x5c>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	f003 0301 	and.w	r3, r3, #1
 80003ee:	60bb      	str	r3, [r7, #8]
 80003f0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_PWR_CLK_ENABLE();
 80003f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000430 <HAL_MspInit+0x5c>)
 80003f4:	69db      	ldr	r3, [r3, #28]
 80003f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000430 <HAL_MspInit+0x5c>)
 80003f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003fc:	61d3      	str	r3, [r2, #28]
 80003fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000430 <HAL_MspInit+0x5c>)
 8000400:	69db      	ldr	r3, [r3, #28]
 8000402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]

    /* System interrupt init*/

    /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
     */
    __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800040a:	4b0a      	ldr	r3, [pc, #40]	@ (8000434 <HAL_MspInit+0x60>)
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	4a04      	ldr	r2, [pc, #16]	@ (8000434 <HAL_MspInit+0x60>)
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	6053      	str	r3, [r2, #4]

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 8000426:	bf00      	nop
 8000428:	3714      	adds	r7, #20
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	40021000 	.word	0x40021000
 8000434:	40010000 	.word	0x40010000

08000438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800043c:	bf00      	nop
 800043e:	e7fd      	b.n	800043c <NMI_Handler+0x4>

08000440 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000444:	bf00      	nop
 8000446:	e7fd      	b.n	8000444 <HardFault_Handler+0x4>

08000448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800044c:	bf00      	nop
 800044e:	e7fd      	b.n	800044c <MemManage_Handler+0x4>

08000450 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000454:	bf00      	nop
 8000456:	e7fd      	b.n	8000454 <BusFault_Handler+0x4>

08000458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800045c:	bf00      	nop
 800045e:	e7fd      	b.n	800045c <UsageFault_Handler+0x4>

08000460 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr

0800046c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000470:	bf00      	nop
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr

08000478 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr

08000484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000488:	f000 fc52 	bl	8000d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}

08000490 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000494:	4802      	ldr	r0, [pc, #8]	@ (80004a0 <DMA1_Channel5_IRQHandler+0x10>)
 8000496:	f000 ff95 	bl	80013c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	20000330 	.word	0x20000330

080004a4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004a8:	4802      	ldr	r0, [pc, #8]	@ (80004b4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80004aa:	f001 fc4c 	bl	8001d46 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	20000e4c 	.word	0x20000e4c

080004b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80004bc:	4802      	ldr	r0, [pc, #8]	@ (80004c8 <USART1_IRQHandler+0x10>)
 80004be:	f004 f881 	bl	80045c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	200002e8 	.word	0x200002e8

080004cc <SystemInit>:
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
     * -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR = VECT_TAB_BASE_ADDRESS |
                VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004d8:	f7ff fff8 	bl	80004cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004dc:	480b      	ldr	r0, [pc, #44]	@ (800050c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004de:	490c      	ldr	r1, [pc, #48]	@ (8000510 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000514 <LoopFillZerobss+0x16>)
  movs r3, #0
 80004e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e4:	e002      	b.n	80004ec <LoopCopyDataInit>

080004e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ea:	3304      	adds	r3, #4

080004ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f0:	d3f9      	bcc.n	80004e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f2:	4a09      	ldr	r2, [pc, #36]	@ (8000518 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004f4:	4c09      	ldr	r4, [pc, #36]	@ (800051c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f8:	e001      	b.n	80004fe <LoopFillZerobss>

080004fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004fc:	3204      	adds	r2, #4

080004fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000500:	d3fb      	bcc.n	80004fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000502:	f009 fc43 	bl	8009d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000506:	f009 fc2d 	bl	8009d64 <main>
  bx lr
 800050a:	4770      	bx	lr
  ldr r0, =_sdata
 800050c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000510:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8000514:	08009e7c 	.word	0x08009e7c
  ldr r2, =_sbss
 8000518:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 800051c:	20001344 	.word	0x20001344

08000520 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000520:	e7fe      	b.n	8000520 <ADC1_2_IRQHandler>

08000522 <qbufferCreate>:
void qbufferInit(void)
{
}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8000522:	b480      	push	{r7}
 8000524:	b087      	sub	sp, #28
 8000526:	af00      	add	r7, sp, #0
 8000528:	60f8      	str	r0, [r7, #12]
 800052a:	60b9      	str	r1, [r7, #8]
 800052c:	607a      	str	r2, [r7, #4]
    bool ret = true;
 800052e:	2301      	movs	r3, #1
 8000530:	75fb      	strb	r3, [r7, #23]

    p_node->in    = 0;
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
    p_node->out   = 0;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	2200      	movs	r2, #0
 800053c:	605a      	str	r2, [r3, #4]
    p_node->len   = length;
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	609a      	str	r2, [r3, #8]
    p_node->p_buf = p_buf;
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	68ba      	ldr	r2, [r7, #8]
 8000548:	60da      	str	r2, [r3, #12]

    return ret;
 800054a:	7dfb      	ldrb	r3, [r7, #23]
}
 800054c:	4618      	mov	r0, r3
 800054e:	371c      	adds	r7, #28
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr

08000556 <qbufferRead>:

    return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000556:	b480      	push	{r7}
 8000558:	b087      	sub	sp, #28
 800055a:	af00      	add	r7, sp, #0
 800055c:	60f8      	str	r0, [r7, #12]
 800055e:	60b9      	str	r1, [r7, #8]
 8000560:	607a      	str	r2, [r7, #4]
    bool ret = true;
 8000562:	2301      	movs	r3, #1
 8000564:	75fb      	strb	r3, [r7, #23]

    for (int i = 0; i < length; i++)
 8000566:	2300      	movs	r3, #0
 8000568:	613b      	str	r3, [r7, #16]
 800056a:	e026      	b.n	80005ba <qbufferRead+0x64>
    {
        if (p_node->p_buf != NULL)
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d009      	beq.n	8000588 <qbufferRead+0x32>
        {
            p_data[i] = p_node->p_buf[p_node->out];
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	68da      	ldr	r2, [r3, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	441a      	add	r2, r3
 800057e:	693b      	ldr	r3, [r7, #16]
 8000580:	68b9      	ldr	r1, [r7, #8]
 8000582:	440b      	add	r3, r1
 8000584:	7812      	ldrb	r2, [r2, #0]
 8000586:	701a      	strb	r2, [r3, #0]
        }

        if (p_node->out != p_node->in)
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	685a      	ldr	r2, [r3, #4]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	429a      	cmp	r2, r3
 8000592:	d00c      	beq.n	80005ae <qbufferRead+0x58>
        {
            p_node->out = (p_node->out + 1) % p_node->len;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	3301      	adds	r3, #1
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	6892      	ldr	r2, [r2, #8]
 800059e:	fbb3 f1f2 	udiv	r1, r3, r2
 80005a2:	fb01 f202 	mul.w	r2, r1, r2
 80005a6:	1a9a      	subs	r2, r3, r2
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	e002      	b.n	80005b4 <qbufferRead+0x5e>
        }
        else
        {
            ret = false;
 80005ae:	2300      	movs	r3, #0
 80005b0:	75fb      	strb	r3, [r7, #23]
            break;
 80005b2:	e006      	b.n	80005c2 <qbufferRead+0x6c>
    for (int i = 0; i < length; i++)
 80005b4:	693b      	ldr	r3, [r7, #16]
 80005b6:	3301      	adds	r3, #1
 80005b8:	613b      	str	r3, [r7, #16]
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	429a      	cmp	r2, r3
 80005c0:	d8d4      	bhi.n	800056c <qbufferRead+0x16>
        }
    }

    return ret;
 80005c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	371c      	adds	r7, #28
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr

080005ce <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 80005ce:	b480      	push	{r7}
 80005d0:	b085      	sub	sp, #20
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
    uint32_t ret;

    ret = (p_node->in - p_node->out) % p_node->len;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	6892      	ldr	r2, [r2, #8]
 80005e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80005e8:	fb01 f202 	mul.w	r2, r1, r2
 80005ec:	1a9b      	subs	r3, r3, r2
 80005ee:	60fb      	str	r3, [r7, #12]

    return ret;
 80005f0:	68fb      	ldr	r3, [r7, #12]
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr

080005fc <ledInit>:
led_tbl_t led_tbl[LED_MAX_CH] = {
    {GPIOC, GPIO_PIN_13, GPIO_PIN_RESET, GPIO_PIN_SET},
};

bool ledInit(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
    bool ret                         = true;
 8000602:	2301      	movs	r3, #1
 8000604:	74fb      	strb	r3, [r7, #19]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000606:	463b      	mov	r3, r7
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]

    /* GPIO Ports Clock Enable */
//    __HAL_RCC_GPIOC_CLK_ENABLE();

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000618:	4815      	ldr	r0, [pc, #84]	@ (8000670 <ledInit+0x74>)
 800061a:	f001 fa47 	bl	8001aac <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PC13 */
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2302      	movs	r3, #2
 8000628:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < LED_MAX_CH; i++)
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
 800062e:	e016      	b.n	800065e <ledInit+0x62>
    {
        GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000630:	4a10      	ldr	r2, [pc, #64]	@ (8000674 <ledInit+0x78>)
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	00db      	lsls	r3, r3, #3
 8000636:	4413      	add	r3, r2
 8000638:	889b      	ldrh	r3, [r3, #4]
 800063a:	603b      	str	r3, [r7, #0]
        HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 800063c:	4a0d      	ldr	r2, [pc, #52]	@ (8000674 <ledInit+0x78>)
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000644:	463a      	mov	r2, r7
 8000646:	4611      	mov	r1, r2
 8000648:	4618      	mov	r0, r3
 800064a:	f000 ffef 	bl	800162c <HAL_GPIO_Init>

        ledOff(i);
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	b2db      	uxtb	r3, r3
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f810 	bl	8000678 <ledOff>
    for (int i = 0; i < LED_MAX_CH; i++)
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	3301      	adds	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	2b00      	cmp	r3, #0
 8000662:	dde5      	ble.n	8000630 <ledInit+0x34>
    }

    return ret;
 8000664:	7cfb      	ldrb	r3, [r7, #19]
}
 8000666:	4618      	mov	r0, r3
 8000668:	3718      	adds	r7, #24
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40011000 	.word	0x40011000
 8000674:	20000004 	.word	0x20000004

08000678 <ledOff>:
    if (ch >= LED_MAX_CH)
        return;
    HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}
void ledOff(uint8_t ch)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
    if (ch >= LED_MAX_CH)
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d111      	bne.n	80006ac <ledOff+0x34>
        return;
    HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	4a0a      	ldr	r2, [pc, #40]	@ (80006b4 <ledOff+0x3c>)
 800068c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	4a08      	ldr	r2, [pc, #32]	@ (80006b4 <ledOff+0x3c>)
 8000694:	00db      	lsls	r3, r3, #3
 8000696:	4413      	add	r3, r2
 8000698:	8899      	ldrh	r1, [r3, #4]
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	4a05      	ldr	r2, [pc, #20]	@ (80006b4 <ledOff+0x3c>)
 800069e:	00db      	lsls	r3, r3, #3
 80006a0:	4413      	add	r3, r2
 80006a2:	79db      	ldrb	r3, [r3, #7]
 80006a4:	461a      	mov	r2, r3
 80006a6:	f001 fa01 	bl	8001aac <HAL_GPIO_WritePin>
 80006aa:	e000      	b.n	80006ae <ledOff+0x36>
        return;
 80006ac:	bf00      	nop
}
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000004 	.word	0x20000004

080006b8 <ledToggle>:
void ledToggle(uint8_t ch)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
    if (ch >= LED_MAX_CH)
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d10d      	bne.n	80006e4 <ledToggle+0x2c>
        return;
    HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	4a08      	ldr	r2, [pc, #32]	@ (80006ec <ledToggle+0x34>)
 80006cc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	4906      	ldr	r1, [pc, #24]	@ (80006ec <ledToggle+0x34>)
 80006d4:	00db      	lsls	r3, r3, #3
 80006d6:	440b      	add	r3, r1
 80006d8:	889b      	ldrh	r3, [r3, #4]
 80006da:	4619      	mov	r1, r3
 80006dc:	4610      	mov	r0, r2
 80006de:	f001 f9fd 	bl	8001adc <HAL_GPIO_TogglePin>
 80006e2:	e000      	b.n	80006e6 <ledToggle+0x2e>
        return;
 80006e4:	bf00      	nop
}
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000004 	.word	0x20000004

080006f0 <resetInit>:
#include "rtc.h"

static uint32_t reset_count = 0;

bool resetInit(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
    bool ret = true;
 80006f6:	2301      	movs	r3, #1
 80006f8:	71fb      	strb	r3, [r7, #7]

    // push reset btn
    if (RCC->CSR & (1 << 26))
 80006fa:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <resetInit+0x50>)
 80006fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006fe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000702:	2b00      	cmp	r3, #0
 8000704:	d012      	beq.n	800072c <resetInit+0x3c>
    {
        rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1);
 8000706:	2001      	movs	r0, #1
 8000708:	f000 f84e 	bl	80007a8 <rtcBackupRegRead>
 800070c:	4603      	mov	r3, r0
 800070e:	3301      	adds	r3, #1
 8000710:	4619      	mov	r1, r3
 8000712:	2001      	movs	r0, #1
 8000714:	f000 f838 	bl	8000788 <rtcBackupRegWrite>
        delay(500);
 8000718:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800071c:	f7ff fde2 	bl	80002e4 <delay>
        reset_count = rtcBackupRegRead(1);
 8000720:	2001      	movs	r0, #1
 8000722:	f000 f841 	bl	80007a8 <rtcBackupRegRead>
 8000726:	4603      	mov	r3, r0
 8000728:	4a06      	ldr	r2, [pc, #24]	@ (8000744 <resetInit+0x54>)
 800072a:	6013      	str	r3, [r2, #0]
    }

    rtcBackupRegWrite(1, 0);
 800072c:	2100      	movs	r1, #0
 800072e:	2001      	movs	r0, #1
 8000730:	f000 f82a 	bl	8000788 <rtcBackupRegWrite>

    return ret;
 8000734:	79fb      	ldrb	r3, [r7, #7]
}
 8000736:	4618      	mov	r0, r3
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40021000 	.word	0x40021000
 8000744:	200001ac 	.word	0x200001ac

08000748 <rtcInit>:
#include "rtc.h"

static RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
    bool ret = true;
 800074e:	2301      	movs	r3, #1
 8000750:	71fb      	strb	r3, [r7, #7]
//    __HAL_RCC_GPIOC_CLK_ENABLE();

    hrtc.Instance          = RTC;
 8000752:	4b0b      	ldr	r3, [pc, #44]	@ (8000780 <rtcInit+0x38>)
 8000754:	4a0b      	ldr	r2, [pc, #44]	@ (8000784 <rtcInit+0x3c>)
 8000756:	601a      	str	r2, [r3, #0]
    hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000758:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <rtcInit+0x38>)
 800075a:	f04f 32ff 	mov.w	r2, #4294967295
 800075e:	605a      	str	r2, [r3, #4]
    hrtc.Init.OutPut       = RTC_OUTPUTSOURCE_NONE;
 8000760:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <rtcInit+0x38>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000766:	4806      	ldr	r0, [pc, #24]	@ (8000780 <rtcInit+0x38>)
 8000768:	f003 fcba 	bl	80040e0 <HAL_RTC_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <rtcInit+0x2e>
    {
        Error_Handler();
 8000772:	f7ff fe28 	bl	80003c6 <Error_Handler>
    }

    return ret;
 8000776:	79fb      	ldrb	r3, [r7, #7]
}
 8000778:	4618      	mov	r0, r3
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200001b0 	.word	0x200001b0
 8000784:	40002800 	.word	0x40002800

08000788 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]

    HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8000792:	683a      	ldr	r2, [r7, #0]
 8000794:	6879      	ldr	r1, [r7, #4]
 8000796:	4803      	ldr	r0, [pc, #12]	@ (80007a4 <rtcBackupRegWrite+0x1c>)
 8000798:	f003 fdac 	bl	80042f4 <HAL_RTCEx_BKUPWrite>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200001b0 	.word	0x200001b0

080007a8 <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
    return HAL_RTCEx_BKUPRead(&hrtc, index);
 80007b0:	6879      	ldr	r1, [r7, #4]
 80007b2:	4804      	ldr	r0, [pc, #16]	@ (80007c4 <rtcBackupRegRead+0x1c>)
 80007b4:	f003 fdb8 	bl	8004328 <HAL_RTCEx_BKUPRead>
 80007b8:	4603      	mov	r3, r0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200001b0 	.word	0x200001b0

080007c8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]

    if (rtcHandle->Instance == RTC)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000804 <HAL_RTC_MspInit+0x3c>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d110      	bne.n	80007fc <HAL_RTC_MspInit+0x34>
    {
        /* USER CODE BEGIN RTC_MspInit 0 */

        /* USER CODE END RTC_MspInit 0 */
        HAL_PWR_EnableBkUpAccess();
 80007da:	f002 fef9 	bl	80035d0 <HAL_PWR_EnableBkUpAccess>
        /* Enable BKP CLK enable for backup registers */
        __HAL_RCC_BKP_CLK_ENABLE();
 80007de:	4b0a      	ldr	r3, [pc, #40]	@ (8000808 <HAL_RTC_MspInit+0x40>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	4a09      	ldr	r2, [pc, #36]	@ (8000808 <HAL_RTC_MspInit+0x40>)
 80007e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80007e8:	61d3      	str	r3, [r2, #28]
 80007ea:	4b07      	ldr	r3, [pc, #28]	@ (8000808 <HAL_RTC_MspInit+0x40>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
        /* RTC clock enable */
        __HAL_RCC_RTC_ENABLE();
 80007f6:	4b05      	ldr	r3, [pc, #20]	@ (800080c <HAL_RTC_MspInit+0x44>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	601a      	str	r2, [r3, #0]
        /* USER CODE BEGIN RTC_MspInit 1 */

        /* USER CODE END RTC_MspInit 1 */
    }
}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40002800 	.word	0x40002800
 8000808:	40021000 	.word	0x40021000
 800080c:	4242043c 	.word	0x4242043c

08000810 <uartInit>:

UART_HandleTypeDef huart1;
DMA_HandleTypeDef hdma_usart1_rx;

bool uartInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
    for (int i = 0; i < UART_MAX_CH; i++)
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	e007      	b.n	800082c <uartInit+0x1c>
    {
        is_open[i] = false;
 800081c:	4a08      	ldr	r2, [pc, #32]	@ (8000840 <uartInit+0x30>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < UART_MAX_CH; i++)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	3301      	adds	r3, #1
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b01      	cmp	r3, #1
 8000830:	ddf4      	ble.n	800081c <uartInit+0xc>
    }

    return true;
 8000832:	2301      	movs	r3, #1
}
 8000834:	4618      	mov	r0, r3
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	200001c4 	.word	0x200001c4

08000844 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	6039      	str	r1, [r7, #0]
 800084e:	71fb      	strb	r3, [r7, #7]
    bool ret = false;
 8000850:	2300      	movs	r3, #0
 8000852:	73fb      	strb	r3, [r7, #15]
    switch (ch)
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d002      	beq.n	8000860 <uartOpen+0x1c>
 800085a:	2b01      	cmp	r3, #1
 800085c:	d007      	beq.n	800086e <uartOpen+0x2a>
 800085e:	e074      	b.n	800094a <uartOpen+0x106>
    {
    case _DEF_UART1:
        is_open[ch] = true;
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	4a3c      	ldr	r2, [pc, #240]	@ (8000954 <uartOpen+0x110>)
 8000864:	2101      	movs	r1, #1
 8000866:	54d1      	strb	r1, [r2, r3]
        ret         = true;
 8000868:	2301      	movs	r3, #1
 800086a:	73fb      	strb	r3, [r7, #15]
        break;
 800086c:	e06d      	b.n	800094a <uartOpen+0x106>

    case _DEF_UART2:
        huart1.Instance          = USART1;
 800086e:	4b3a      	ldr	r3, [pc, #232]	@ (8000958 <uartOpen+0x114>)
 8000870:	4a3a      	ldr	r2, [pc, #232]	@ (800095c <uartOpen+0x118>)
 8000872:	601a      	str	r2, [r3, #0]
        huart1.Init.BaudRate     = baud;
 8000874:	4a38      	ldr	r2, [pc, #224]	@ (8000958 <uartOpen+0x114>)
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	6053      	str	r3, [r2, #4]
        huart1.Init.WordLength   = UART_WORDLENGTH_8B;
 800087a:	4b37      	ldr	r3, [pc, #220]	@ (8000958 <uartOpen+0x114>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
        huart1.Init.StopBits     = UART_STOPBITS_1;
 8000880:	4b35      	ldr	r3, [pc, #212]	@ (8000958 <uartOpen+0x114>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
        huart1.Init.Parity       = UART_PARITY_NONE;
 8000886:	4b34      	ldr	r3, [pc, #208]	@ (8000958 <uartOpen+0x114>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
        huart1.Init.Mode         = UART_MODE_TX_RX;
 800088c:	4b32      	ldr	r3, [pc, #200]	@ (8000958 <uartOpen+0x114>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
        huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8000892:	4b31      	ldr	r3, [pc, #196]	@ (8000958 <uartOpen+0x114>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
        huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b2f      	ldr	r3, [pc, #188]	@ (8000958 <uartOpen+0x114>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]

        HAL_UART_DeInit(&huart1);
 800089e:	482e      	ldr	r0, [pc, #184]	@ (8000958 <uartOpen+0x114>)
 80008a0:	f003 fdae 	bl	8004400 <HAL_UART_DeInit>

        qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	011b      	lsls	r3, r3, #4
 80008a8:	4a2d      	ldr	r2, [pc, #180]	@ (8000960 <uartOpen+0x11c>)
 80008aa:	4413      	add	r3, r2
 80008ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008b0:	492c      	ldr	r1, [pc, #176]	@ (8000964 <uartOpen+0x120>)
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fe35 	bl	8000522 <qbufferCreate>

        __HAL_RCC_DMA1_CLK_ENABLE();
 80008b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000968 <uartOpen+0x124>)
 80008ba:	695b      	ldr	r3, [r3, #20]
 80008bc:	4a2a      	ldr	r2, [pc, #168]	@ (8000968 <uartOpen+0x124>)
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	6153      	str	r3, [r2, #20]
 80008c4:	4b28      	ldr	r3, [pc, #160]	@ (8000968 <uartOpen+0x124>)
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	f003 0301 	and.w	r3, r3, #1
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	68bb      	ldr	r3, [r7, #8]
        HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2100      	movs	r1, #0
 80008d4:	200f      	movs	r0, #15
 80008d6:	f000 fb66 	bl	8000fa6 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80008da:	200f      	movs	r0, #15
 80008dc:	f000 fb7f 	bl	8000fde <HAL_NVIC_EnableIRQ>

        if (HAL_UART_Init(&huart1) != HAL_OK)
 80008e0:	481d      	ldr	r0, [pc, #116]	@ (8000958 <uartOpen+0x114>)
 80008e2:	f003 fd3d 	bl	8004360 <HAL_UART_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d002      	beq.n	80008f2 <uartOpen+0xae>
        {
            ret = false;
 80008ec:	2300      	movs	r3, #0
 80008ee:	73fb      	strb	r3, [r7, #15]
            }

            qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
            qbuffer[ch].out = qbuffer[ch].in;
        }
        break;
 80008f0:	e02a      	b.n	8000948 <uartOpen+0x104>
            ret         = true;
 80008f2:	2301      	movs	r3, #1
 80008f4:	73fb      	strb	r3, [r7, #15]
            is_open[ch] = true;
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	4a16      	ldr	r2, [pc, #88]	@ (8000954 <uartOpen+0x110>)
 80008fa:	2101      	movs	r1, #1
 80008fc:	54d1      	strb	r1, [r2, r3]
            if (HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) !=
 80008fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000902:	4918      	ldr	r1, [pc, #96]	@ (8000964 <uartOpen+0x120>)
 8000904:	4814      	ldr	r0, [pc, #80]	@ (8000958 <uartOpen+0x114>)
 8000906:	f003 fe38 	bl	800457a <HAL_UART_Receive_DMA>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <uartOpen+0xd0>
                ret = false;
 8000910:	2300      	movs	r3, #0
 8000912:	73fb      	strb	r3, [r7, #15]
            qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	4a12      	ldr	r2, [pc, #72]	@ (8000960 <uartOpen+0x11c>)
 8000918:	011b      	lsls	r3, r3, #4
 800091a:	4413      	add	r3, r2
 800091c:	3308      	adds	r3, #8
 800091e:	6819      	ldr	r1, [r3, #0]
 8000920:	4b12      	ldr	r3, [pc, #72]	@ (800096c <uartOpen+0x128>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	685a      	ldr	r2, [r3, #4]
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	1a8a      	subs	r2, r1, r2
 800092a:	490d      	ldr	r1, [pc, #52]	@ (8000960 <uartOpen+0x11c>)
 800092c:	011b      	lsls	r3, r3, #4
 800092e:	440b      	add	r3, r1
 8000930:	601a      	str	r2, [r3, #0]
            qbuffer[ch].out = qbuffer[ch].in;
 8000932:	79fa      	ldrb	r2, [r7, #7]
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	490a      	ldr	r1, [pc, #40]	@ (8000960 <uartOpen+0x11c>)
 8000938:	0112      	lsls	r2, r2, #4
 800093a:	440a      	add	r2, r1
 800093c:	6812      	ldr	r2, [r2, #0]
 800093e:	4908      	ldr	r1, [pc, #32]	@ (8000960 <uartOpen+0x11c>)
 8000940:	011b      	lsls	r3, r3, #4
 8000942:	440b      	add	r3, r1
 8000944:	3304      	adds	r3, #4
 8000946:	601a      	str	r2, [r3, #0]
        break;
 8000948:	bf00      	nop
    }
    return ret;
 800094a:	7bfb      	ldrb	r3, [r7, #15]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200001c4 	.word	0x200001c4
 8000958:	200002e8 	.word	0x200002e8
 800095c:	40013800 	.word	0x40013800
 8000960:	200001c8 	.word	0x200001c8
 8000964:	200001e8 	.word	0x200001e8
 8000968:	40021000 	.word	0x40021000
 800096c:	20000330 	.word	0x20000330

08000970 <uartAvailable>:
uint32_t uartAvailable(uint8_t ch)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
    uint32_t ret = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]

    switch (ch)
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d002      	beq.n	800098a <uartAvailable+0x1a>
 8000984:	2b01      	cmp	r3, #1
 8000986:	d004      	beq.n	8000992 <uartAvailable+0x22>
 8000988:	e01b      	b.n	80009c2 <uartAvailable+0x52>
    {
    case _DEF_UART1:
        ret = cdcAvailable();
 800098a:	f008 fc3b 	bl	8009204 <cdcAvailable>
 800098e:	60f8      	str	r0, [r7, #12]
        break;
 8000990:	e017      	b.n	80009c2 <uartAvailable+0x52>

    case _DEF_UART2:
        qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	4a0d      	ldr	r2, [pc, #52]	@ (80009cc <uartAvailable+0x5c>)
 8000996:	011b      	lsls	r3, r3, #4
 8000998:	4413      	add	r3, r2
 800099a:	3308      	adds	r3, #8
 800099c:	6819      	ldr	r1, [r3, #0]
 800099e:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <uartAvailable+0x60>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	685a      	ldr	r2, [r3, #4]
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	1a8a      	subs	r2, r1, r2
 80009a8:	4908      	ldr	r1, [pc, #32]	@ (80009cc <uartAvailable+0x5c>)
 80009aa:	011b      	lsls	r3, r3, #4
 80009ac:	440b      	add	r3, r1
 80009ae:	601a      	str	r2, [r3, #0]
        ret            = qbufferAvailable(&qbuffer[ch]);
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	011b      	lsls	r3, r3, #4
 80009b4:	4a05      	ldr	r2, [pc, #20]	@ (80009cc <uartAvailable+0x5c>)
 80009b6:	4413      	add	r3, r2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fe08 	bl	80005ce <qbufferAvailable>
 80009be:	60f8      	str	r0, [r7, #12]
        break;
 80009c0:	bf00      	nop
    }

    return ret;
 80009c2:	68fb      	ldr	r3, [r7, #12]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200001c8 	.word	0x200001c8
 80009d0:	20000330 	.word	0x20000330

080009d4 <uartRead>:
uint8_t uartRead(uint8_t ch)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
    uint8_t ret = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	73fb      	strb	r3, [r7, #15]

    switch (ch)
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d002      	beq.n	80009ee <uartRead+0x1a>
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d005      	beq.n	80009f8 <uartRead+0x24>
 80009ec:	e00c      	b.n	8000a08 <uartRead+0x34>
    {
    case _DEF_UART1:
        ret = cdcRead();
 80009ee:	f008 fc25 	bl	800923c <cdcRead>
 80009f2:	4603      	mov	r3, r0
 80009f4:	73fb      	strb	r3, [r7, #15]
        break;
 80009f6:	e007      	b.n	8000a08 <uartRead+0x34>

    case _DEF_UART2:
        qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 80009f8:	f107 030f 	add.w	r3, r7, #15
 80009fc:	2201      	movs	r2, #1
 80009fe:	4619      	mov	r1, r3
 8000a00:	4804      	ldr	r0, [pc, #16]	@ (8000a14 <uartRead+0x40>)
 8000a02:	f7ff fda8 	bl	8000556 <qbufferRead>
        break;
 8000a06:	bf00      	nop
    }

    return ret;
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200001d8 	.word	0x200001d8

08000a18 <uartWrite>:
uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
 8000a24:	73fb      	strb	r3, [r7, #15]
    uint8_t ret = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	75fb      	strb	r3, [r7, #23]
    HAL_StatusTypeDef status;

    switch (ch)
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d002      	beq.n	8000a36 <uartWrite+0x1e>
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d007      	beq.n	8000a44 <uartWrite+0x2c>
 8000a34:	e015      	b.n	8000a62 <uartWrite+0x4a>
    {
    case _DEF_UART1:
        ret = cdcWrite(p_data, length);
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	68b8      	ldr	r0, [r7, #8]
 8000a3a:	f008 fc51 	bl	80092e0 <cdcWrite>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	75fb      	strb	r3, [r7, #23]
        break;
 8000a42:	e00e      	b.n	8000a62 <uartWrite+0x4a>

    case _DEF_UART2:
        status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	2364      	movs	r3, #100	@ 0x64
 8000a4a:	68b9      	ldr	r1, [r7, #8]
 8000a4c:	4807      	ldr	r0, [pc, #28]	@ (8000a6c <uartWrite+0x54>)
 8000a4e:	f003 fd09 	bl	8004464 <HAL_UART_Transmit>
 8000a52:	4603      	mov	r3, r0
 8000a54:	75bb      	strb	r3, [r7, #22]
        if (status == HAL_OK)
 8000a56:	7dbb      	ldrb	r3, [r7, #22]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d101      	bne.n	8000a60 <uartWrite+0x48>
        {
            ret = length;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000a60:	bf00      	nop
    }

    return ret;
 8000a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3718      	adds	r7, #24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200002e8 	.word	0x200002e8

08000a70 <uartGetBaud>:

    return ret;
}

uint32_t uartGetBaud(uint8_t ch)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
    uint32_t ret = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
    switch (ch)
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d002      	beq.n	8000a8a <uartGetBaud+0x1a>
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d004      	beq.n	8000a92 <uartGetBaud+0x22>
 8000a88:	e007      	b.n	8000a9a <uartGetBaud+0x2a>
    {
    case _DEF_UART1:
        ret = cdcGetBaud();
 8000a8a:	f008 fc51 	bl	8009330 <cdcGetBaud>
 8000a8e:	60f8      	str	r0, [r7, #12]
        break;
 8000a90:	e003      	b.n	8000a9a <uartGetBaud+0x2a>

    case _DEF_UART2:
        ret = huart1.Init.BaudRate;
 8000a92:	4b04      	ldr	r3, [pc, #16]	@ (8000aa4 <uartGetBaud+0x34>)
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	60fb      	str	r3, [r7, #12]
        break;
 8000a98:	bf00      	nop
    }
    return ret;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200002e8 	.word	0x200002e8

08000aa8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
    {
    }
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr

08000aba <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
        qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);

        HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
    }
#endif
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b088      	sub	sp, #32
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
    if (uartHandle->Instance == USART1)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a33      	ldr	r2, [pc, #204]	@ (8000bb4 <HAL_UART_MspInit+0xe8>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d15f      	bne.n	8000bac <HAL_UART_MspInit+0xe0>
    {
        /* USER CODE BEGIN USART1_MspInit 0 */

        /* USER CODE END USART1_MspInit 0 */
        /* USART1 clock enable */
        __HAL_RCC_USART1_CLK_ENABLE();
 8000aec:	4b32      	ldr	r3, [pc, #200]	@ (8000bb8 <HAL_UART_MspInit+0xec>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4a31      	ldr	r2, [pc, #196]	@ (8000bb8 <HAL_UART_MspInit+0xec>)
 8000af2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000af6:	6193      	str	r3, [r2, #24]
 8000af8:	4b2f      	ldr	r3, [pc, #188]	@ (8000bb8 <HAL_UART_MspInit+0xec>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b04:	4b2c      	ldr	r3, [pc, #176]	@ (8000bb8 <HAL_UART_MspInit+0xec>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a2b      	ldr	r2, [pc, #172]	@ (8000bb8 <HAL_UART_MspInit+0xec>)
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b29      	ldr	r3, [pc, #164]	@ (8000bb8 <HAL_UART_MspInit+0xec>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f003 0304 	and.w	r3, r3, #4
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
        /**USART1 GPIO Configuration
        PA9     ------> USART1_TX
        PA10     ------> USART1_RX
        */
        GPIO_InitStruct.Pin   = GPIO_PIN_9;
 8000b1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b20:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0310 	add.w	r3, r7, #16
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4822      	ldr	r0, [pc, #136]	@ (8000bbc <HAL_UART_MspInit+0xf0>)
 8000b32:	f000 fd7b 	bl	800162c <HAL_GPIO_Init>

        GPIO_InitStruct.Pin  = GPIO_PIN_10;
 8000b36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b3a:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	4619      	mov	r1, r3
 8000b4a:	481c      	ldr	r0, [pc, #112]	@ (8000bbc <HAL_UART_MspInit+0xf0>)
 8000b4c:	f000 fd6e 	bl	800162c <HAL_GPIO_Init>

        /* USART1 DMA Init */
        /* USART1_RX Init */
        hdma_usart1_rx.Instance                 = DMA1_Channel5;
 8000b50:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc0 <HAL_UART_MspInit+0xf4>)
 8000b52:	4a1c      	ldr	r2, [pc, #112]	@ (8000bc4 <HAL_UART_MspInit+0xf8>)
 8000b54:	601a      	str	r2, [r3, #0]
        hdma_usart1_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000b56:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc0 <HAL_UART_MspInit+0xf4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	605a      	str	r2, [r3, #4]
        hdma_usart1_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000b5c:	4b18      	ldr	r3, [pc, #96]	@ (8000bc0 <HAL_UART_MspInit+0xf4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
        hdma_usart1_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8000b62:	4b17      	ldr	r3, [pc, #92]	@ (8000bc0 <HAL_UART_MspInit+0xf4>)
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	60da      	str	r2, [r3, #12]
        hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b68:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <HAL_UART_MspInit+0xf4>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
        hdma_usart1_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8000b6e:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <HAL_UART_MspInit+0xf4>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	615a      	str	r2, [r3, #20]
        hdma_usart1_rx.Init.Mode                = DMA_CIRCULAR;
 8000b74:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <HAL_UART_MspInit+0xf4>)
 8000b76:	2220      	movs	r2, #32
 8000b78:	619a      	str	r2, [r3, #24]
        hdma_usart1_rx.Init.Priority            = DMA_PRIORITY_LOW;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <HAL_UART_MspInit+0xf4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	61da      	str	r2, [r3, #28]
        if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b80:	480f      	ldr	r0, [pc, #60]	@ (8000bc0 <HAL_UART_MspInit+0xf4>)
 8000b82:	f000 fa55 	bl	8001030 <HAL_DMA_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <HAL_UART_MspInit+0xc4>
        {
            Error_Handler();
 8000b8c:	f7ff fc1b 	bl	80003c6 <Error_Handler>
        }

        __HAL_LINKDMA(uartHandle, hdmarx, hdma_usart1_rx);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc0 <HAL_UART_MspInit+0xf4>)
 8000b94:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b96:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc0 <HAL_UART_MspInit+0xf4>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6253      	str	r3, [r2, #36]	@ 0x24

        /* USART1 interrupt Init */
        HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	2025      	movs	r0, #37	@ 0x25
 8000ba2:	f000 fa00 	bl	8000fa6 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ba6:	2025      	movs	r0, #37	@ 0x25
 8000ba8:	f000 fa19 	bl	8000fde <HAL_NVIC_EnableIRQ>
        /* USER CODE BEGIN USART1_MspInit 1 */

        /* USER CODE END USART1_MspInit 1 */
    }
}
 8000bac:	bf00      	nop
 8000bae:	3720      	adds	r7, #32
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40013800 	.word	0x40013800
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40010800 	.word	0x40010800
 8000bc0:	20000330 	.word	0x20000330
 8000bc4:	40020058 	.word	0x40020058

08000bc8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]

    if (uartHandle->Instance == USART1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000c08 <HAL_UART_MspDeInit+0x40>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d112      	bne.n	8000c00 <HAL_UART_MspDeInit+0x38>
    {
        /* USER CODE BEGIN USART1_MspDeInit 0 */

        /* USER CODE END USART1_MspDeInit 0 */
        /* Peripheral clock disable */
        __HAL_RCC_USART1_CLK_DISABLE();
 8000bda:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <HAL_UART_MspDeInit+0x44>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	4a0b      	ldr	r2, [pc, #44]	@ (8000c0c <HAL_UART_MspDeInit+0x44>)
 8000be0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000be4:	6193      	str	r3, [r2, #24]

        /**USART1 GPIO Configuration
        PA9     ------> USART1_TX
        PA10     ------> USART1_RX
        */
        HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9 | GPIO_PIN_10);
 8000be6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000bea:	4809      	ldr	r0, [pc, #36]	@ (8000c10 <HAL_UART_MspDeInit+0x48>)
 8000bec:	f000 fea2 	bl	8001934 <HAL_GPIO_DeInit>

        /* USART1 DMA DeInit */
        HAL_DMA_DeInit(uartHandle->hdmarx);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 fa75 	bl	80010e4 <HAL_DMA_DeInit>

        /* USART1 interrupt Deinit */
        HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000bfa:	2025      	movs	r0, #37	@ 0x25
 8000bfc:	f000 f9fd 	bl	8000ffa <HAL_NVIC_DisableIRQ>
        /* USER CODE BEGIN USART1_MspDeInit 1 */

        /* USER CODE END USART1_MspDeInit 1 */
    }
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40013800 	.word	0x40013800
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	40010800 	.word	0x40010800

08000c14 <usbInit>:

#include "usb.h"
#include "usb_device.h"


bool usbInit(void){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
  bool ret = true;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	75fb      	strb	r3, [r7, #23]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]

      GPIO_InitStruct.Pin   = GPIO_PIN_12;
 8000c2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c2e:	607b      	str	r3, [r7, #4]
      GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_OD;
 8000c30:	2311      	movs	r3, #17
 8000c32:	60bb      	str	r3, [r7, #8]
      GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	613b      	str	r3, [r7, #16]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480f      	ldr	r0, [pc, #60]	@ (8000c80 <usbInit+0x6c>)
 8000c42:	f000 fcf3 	bl	800162c <HAL_GPIO_Init>

      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c4c:	480c      	ldr	r0, [pc, #48]	@ (8000c80 <usbInit+0x6c>)
 8000c4e:	f000 ff2d 	bl	8001aac <HAL_GPIO_WritePin>
      delay(100);
 8000c52:	2064      	movs	r0, #100	@ 0x64
 8000c54:	f7ff fb46 	bl	80002e4 <delay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c5e:	4808      	ldr	r0, [pc, #32]	@ (8000c80 <usbInit+0x6c>)
 8000c60:	f000 ff24 	bl	8001aac <HAL_GPIO_WritePin>

      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4804      	ldr	r0, [pc, #16]	@ (8000c80 <usbInit+0x6c>)
 8000c6e:	f000 fcdd 	bl	800162c <HAL_GPIO_Init>

      MX_USB_DEVICE_Init();
 8000c72:	f008 fa97 	bl	80091a4 <MX_USB_DEVICE_Init>

  return ret;
 8000c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40010800 	.word	0x40010800

08000c84 <hwInit>:
 */

#include "hw.h"

void hwInit(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
    bspInit();
 8000c88:	f7ff fafa 	bl	8000280 <bspInit>
    rtcInit();
 8000c8c:	f7ff fd5c 	bl	8000748 <rtcInit>

    resetInit();
 8000c90:	f7ff fd2e 	bl	80006f0 <resetInit>
    ledInit();
 8000c94:	f7ff fcb2 	bl	80005fc <ledInit>
    usbInit();
 8000c98:	f7ff ffbc 	bl	8000c14 <usbInit>
    uartInit();
 8000c9c:	f7ff fdb8 	bl	8000810 <uartInit>
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca8:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <HAL_Init+0x28>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a07      	ldr	r2, [pc, #28]	@ (8000ccc <HAL_Init+0x28>)
 8000cae:	f043 0310 	orr.w	r3, r3, #16
 8000cb2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 f96b 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cba:	200f      	movs	r0, #15
 8000cbc:	f000 f808 	bl	8000cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc0:	f7ff fb88 	bl	80003d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40022000 	.word	0x40022000

08000cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd8:	4b12      	ldr	r3, [pc, #72]	@ (8000d24 <HAL_InitTick+0x54>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <HAL_InitTick+0x58>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f991 	bl	8001016 <HAL_SYSTICK_Config>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00e      	b.n	8000d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b0f      	cmp	r3, #15
 8000d02:	d80a      	bhi.n	8000d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d04:	2200      	movs	r2, #0
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f000 f94b 	bl	8000fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d10:	4a06      	ldr	r2, [pc, #24]	@ (8000d2c <HAL_InitTick+0x5c>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	e000      	b.n	8000d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000000 	.word	0x20000000
 8000d28:	20000010 	.word	0x20000010
 8000d2c:	2000000c 	.word	0x2000000c

08000d30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d34:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <HAL_IncTick+0x1c>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b05      	ldr	r3, [pc, #20]	@ (8000d50 <HAL_IncTick+0x20>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a03      	ldr	r2, [pc, #12]	@ (8000d50 <HAL_IncTick+0x20>)
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr
 8000d4c:	20000010 	.word	0x20000010
 8000d50:	20000374 	.word	0x20000374

08000d54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return uwTick;
 8000d58:	4b02      	ldr	r3, [pc, #8]	@ (8000d64 <HAL_GetTick+0x10>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr
 8000d64:	20000374 	.word	0x20000374

08000d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d70:	f7ff fff0 	bl	8000d54 <HAL_GetTick>
 8000d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d80:	d005      	beq.n	8000d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d82:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <HAL_Delay+0x44>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d8e:	bf00      	nop
 8000d90:	f7ff ffe0 	bl	8000d54 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d8f7      	bhi.n	8000d90 <HAL_Delay+0x28>
  {
  }
}
 8000da0:	bf00      	nop
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000010 	.word	0x20000010

08000db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ddc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de2:	4a04      	ldr	r2, [pc, #16]	@ (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	60d3      	str	r3, [r2, #12]
}
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dfc:	4b04      	ldr	r3, [pc, #16]	@ (8000e10 <__NVIC_GetPriorityGrouping+0x18>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	0a1b      	lsrs	r3, r3, #8
 8000e02:	f003 0307 	and.w	r3, r3, #7
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	db0b      	blt.n	8000e3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	f003 021f 	and.w	r2, r3, #31
 8000e2c:	4906      	ldr	r1, [pc, #24]	@ (8000e48 <__NVIC_EnableIRQ+0x34>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	095b      	lsrs	r3, r3, #5
 8000e34:	2001      	movs	r0, #1
 8000e36:	fa00 f202 	lsl.w	r2, r0, r2
 8000e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	e000e100 	.word	0xe000e100

08000e4c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	db12      	blt.n	8000e84 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	f003 021f 	and.w	r2, r3, #31
 8000e64:	490a      	ldr	r1, [pc, #40]	@ (8000e90 <__NVIC_DisableIRQ+0x44>)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	095b      	lsrs	r3, r3, #5
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e72:	3320      	adds	r3, #32
 8000e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e78:	f3bf 8f4f 	dsb	sy
}
 8000e7c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e7e:	f3bf 8f6f 	isb	sy
}
 8000e82:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000e100 	.word	0xe000e100

08000e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	db0a      	blt.n	8000ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	490c      	ldr	r1, [pc, #48]	@ (8000ee0 <__NVIC_SetPriority+0x4c>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	0112      	lsls	r2, r2, #4
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ebc:	e00a      	b.n	8000ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4908      	ldr	r1, [pc, #32]	@ (8000ee4 <__NVIC_SetPriority+0x50>)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	3b04      	subs	r3, #4
 8000ecc:	0112      	lsls	r2, r2, #4
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	761a      	strb	r2, [r3, #24]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000e100 	.word	0xe000e100
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	@ 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f1c3 0307 	rsb	r3, r3, #7
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	bf28      	it	cs
 8000f06:	2304      	movcs	r3, #4
 8000f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	2b06      	cmp	r3, #6
 8000f10:	d902      	bls.n	8000f18 <NVIC_EncodePriority+0x30>
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3b03      	subs	r3, #3
 8000f16:	e000      	b.n	8000f1a <NVIC_EncodePriority+0x32>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43da      	mvns	r2, r3
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f30:	f04f 31ff 	mov.w	r1, #4294967295
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	43d9      	mvns	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	4313      	orrs	r3, r2
         );
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3724      	adds	r7, #36	@ 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr

08000f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f5c:	d301      	bcc.n	8000f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00f      	b.n	8000f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f62:	4a0a      	ldr	r2, [pc, #40]	@ (8000f8c <SysTick_Config+0x40>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6a:	210f      	movs	r1, #15
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f7ff ff90 	bl	8000e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f74:	4b05      	ldr	r3, [pc, #20]	@ (8000f8c <SysTick_Config+0x40>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7a:	4b04      	ldr	r3, [pc, #16]	@ (8000f8c <SysTick_Config+0x40>)
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	e000e010 	.word	0xe000e010

08000f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ff09 	bl	8000db0 <__NVIC_SetPriorityGrouping>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb8:	f7ff ff1e 	bl	8000df8 <__NVIC_GetPriorityGrouping>
 8000fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	68b9      	ldr	r1, [r7, #8]
 8000fc2:	6978      	ldr	r0, [r7, #20]
 8000fc4:	f7ff ff90 	bl	8000ee8 <NVIC_EncodePriority>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff5f 	bl	8000e94 <__NVIC_SetPriority>
}
 8000fd6:	bf00      	nop
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff11 	bl	8000e14 <__NVIC_EnableIRQ>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff1f 	bl	8000e4c <__NVIC_DisableIRQ>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ff94 	bl	8000f4c <SysTick_Config>
 8001024:	4603      	mov	r3, r0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e043      	b.n	80010ce <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	4b22      	ldr	r3, [pc, #136]	@ (80010d8 <HAL_DMA_Init+0xa8>)
 800104e:	4413      	add	r3, r2
 8001050:	4a22      	ldr	r2, [pc, #136]	@ (80010dc <HAL_DMA_Init+0xac>)
 8001052:	fba2 2303 	umull	r2, r3, r2, r3
 8001056:	091b      	lsrs	r3, r3, #4
 8001058:	009a      	lsls	r2, r3, #2
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a1f      	ldr	r2, [pc, #124]	@ (80010e0 <HAL_DMA_Init+0xb0>)
 8001062:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2202      	movs	r2, #2
 8001068:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800107a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800107e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001088:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001094:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010a8:	68fa      	ldr	r2, [r7, #12]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2201      	movs	r2, #1
 80010c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	bffdfff8 	.word	0xbffdfff8
 80010dc:	cccccccd 	.word	0xcccccccd
 80010e0:	40020000 	.word	0x40020000

080010e4 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e046      	b.n	8001184 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f022 0201 	bic.w	r2, r2, #1
 8001104:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2200      	movs	r2, #0
 8001114:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <HAL_DMA_DeInit+0xac>)
 800112e:	4413      	add	r3, r2
 8001130:	4a18      	ldr	r2, [pc, #96]	@ (8001194 <HAL_DMA_DeInit+0xb0>)
 8001132:	fba2 2303 	umull	r2, r3, r2, r3
 8001136:	091b      	lsrs	r3, r3, #4
 8001138:	009a      	lsls	r2, r3, #2
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a15      	ldr	r2, [pc, #84]	@ (8001198 <HAL_DMA_DeInit+0xb4>)
 8001142:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800114c:	2101      	movs	r1, #1
 800114e:	fa01 f202 	lsl.w	r2, r1, r2
 8001152:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma->XferHalfCpltCallback = NULL;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferErrorCallback = NULL;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferAbortCallback = NULL;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	bffdfff8 	.word	0xbffdfff8
 8001194:	cccccccd 	.word	0xcccccccd
 8001198:	40020000 	.word	0x40020000

0800119c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
 80011a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d101      	bne.n	80011bc <HAL_DMA_Start_IT+0x20>
 80011b8:	2302      	movs	r3, #2
 80011ba:	e04b      	b.n	8001254 <HAL_DMA_Start_IT+0xb8>
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2201      	movs	r2, #1
 80011c0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d13a      	bne.n	8001246 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2202      	movs	r2, #2
 80011d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2200      	movs	r2, #0
 80011dc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 0201 	bic.w	r2, r2, #1
 80011ec:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	68b9      	ldr	r1, [r7, #8]
 80011f4:	68f8      	ldr	r0, [r7, #12]
 80011f6:	f000 f9eb 	bl	80015d0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d008      	beq.n	8001214 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f042 020e 	orr.w	r2, r2, #14
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	e00f      	b.n	8001234 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 0204 	bic.w	r2, r2, #4
 8001222:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 020a 	orr.w	r2, r2, #10
 8001232:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f042 0201 	orr.w	r2, r2, #1
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	e005      	b.n	8001252 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2200      	movs	r2, #0
 800124a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800124e:	2302      	movs	r3, #2
 8001250:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001252:	7dfb      	ldrb	r3, [r7, #23]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001264:	2300      	movs	r3, #0
 8001266:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d008      	beq.n	8001286 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2204      	movs	r2, #4
 8001278:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e020      	b.n	80012c8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 020e 	bic.w	r2, r2, #14
 8001294:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f022 0201 	bic.w	r2, r2, #1
 80012a4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012ae:	2101      	movs	r1, #1
 80012b0:	fa01 f202 	lsl.w	r2, r1, r2
 80012b4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2201      	movs	r2, #1
 80012ba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
	...

080012d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012dc:	2300      	movs	r3, #0
 80012de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d005      	beq.n	80012f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2204      	movs	r2, #4
 80012f0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	73fb      	strb	r3, [r7, #15]
 80012f6:	e051      	b.n	800139c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 020e 	bic.w	r2, r2, #14
 8001306:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0201 	bic.w	r2, r2, #1
 8001316:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a22      	ldr	r2, [pc, #136]	@ (80013a8 <HAL_DMA_Abort_IT+0xd4>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d029      	beq.n	8001376 <HAL_DMA_Abort_IT+0xa2>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a21      	ldr	r2, [pc, #132]	@ (80013ac <HAL_DMA_Abort_IT+0xd8>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d022      	beq.n	8001372 <HAL_DMA_Abort_IT+0x9e>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a1f      	ldr	r2, [pc, #124]	@ (80013b0 <HAL_DMA_Abort_IT+0xdc>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d01a      	beq.n	800136c <HAL_DMA_Abort_IT+0x98>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a1e      	ldr	r2, [pc, #120]	@ (80013b4 <HAL_DMA_Abort_IT+0xe0>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d012      	beq.n	8001366 <HAL_DMA_Abort_IT+0x92>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a1c      	ldr	r2, [pc, #112]	@ (80013b8 <HAL_DMA_Abort_IT+0xe4>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d00a      	beq.n	8001360 <HAL_DMA_Abort_IT+0x8c>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a1b      	ldr	r2, [pc, #108]	@ (80013bc <HAL_DMA_Abort_IT+0xe8>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d102      	bne.n	800135a <HAL_DMA_Abort_IT+0x86>
 8001354:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001358:	e00e      	b.n	8001378 <HAL_DMA_Abort_IT+0xa4>
 800135a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800135e:	e00b      	b.n	8001378 <HAL_DMA_Abort_IT+0xa4>
 8001360:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001364:	e008      	b.n	8001378 <HAL_DMA_Abort_IT+0xa4>
 8001366:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800136a:	e005      	b.n	8001378 <HAL_DMA_Abort_IT+0xa4>
 800136c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001370:	e002      	b.n	8001378 <HAL_DMA_Abort_IT+0xa4>
 8001372:	2310      	movs	r3, #16
 8001374:	e000      	b.n	8001378 <HAL_DMA_Abort_IT+0xa4>
 8001376:	2301      	movs	r3, #1
 8001378:	4a11      	ldr	r2, [pc, #68]	@ (80013c0 <HAL_DMA_Abort_IT+0xec>)
 800137a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2201      	movs	r2, #1
 8001380:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	4798      	blx	r3
    } 
  }
  return status;
 800139c:	7bfb      	ldrb	r3, [r7, #15]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40020008 	.word	0x40020008
 80013ac:	4002001c 	.word	0x4002001c
 80013b0:	40020030 	.word	0x40020030
 80013b4:	40020044 	.word	0x40020044
 80013b8:	40020058 	.word	0x40020058
 80013bc:	4002006c 	.word	0x4002006c
 80013c0:	40020000 	.word	0x40020000

080013c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e0:	2204      	movs	r2, #4
 80013e2:	409a      	lsls	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4013      	ands	r3, r2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d04f      	beq.n	800148c <HAL_DMA_IRQHandler+0xc8>
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d04a      	beq.n	800148c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0320 	and.w	r3, r3, #32
 8001400:	2b00      	cmp	r3, #0
 8001402:	d107      	bne.n	8001414 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0204 	bic.w	r2, r2, #4
 8001412:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a66      	ldr	r2, [pc, #408]	@ (80015b4 <HAL_DMA_IRQHandler+0x1f0>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d029      	beq.n	8001472 <HAL_DMA_IRQHandler+0xae>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a65      	ldr	r2, [pc, #404]	@ (80015b8 <HAL_DMA_IRQHandler+0x1f4>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d022      	beq.n	800146e <HAL_DMA_IRQHandler+0xaa>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a63      	ldr	r2, [pc, #396]	@ (80015bc <HAL_DMA_IRQHandler+0x1f8>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d01a      	beq.n	8001468 <HAL_DMA_IRQHandler+0xa4>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a62      	ldr	r2, [pc, #392]	@ (80015c0 <HAL_DMA_IRQHandler+0x1fc>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d012      	beq.n	8001462 <HAL_DMA_IRQHandler+0x9e>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a60      	ldr	r2, [pc, #384]	@ (80015c4 <HAL_DMA_IRQHandler+0x200>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d00a      	beq.n	800145c <HAL_DMA_IRQHandler+0x98>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a5f      	ldr	r2, [pc, #380]	@ (80015c8 <HAL_DMA_IRQHandler+0x204>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d102      	bne.n	8001456 <HAL_DMA_IRQHandler+0x92>
 8001450:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001454:	e00e      	b.n	8001474 <HAL_DMA_IRQHandler+0xb0>
 8001456:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800145a:	e00b      	b.n	8001474 <HAL_DMA_IRQHandler+0xb0>
 800145c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001460:	e008      	b.n	8001474 <HAL_DMA_IRQHandler+0xb0>
 8001462:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001466:	e005      	b.n	8001474 <HAL_DMA_IRQHandler+0xb0>
 8001468:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800146c:	e002      	b.n	8001474 <HAL_DMA_IRQHandler+0xb0>
 800146e:	2340      	movs	r3, #64	@ 0x40
 8001470:	e000      	b.n	8001474 <HAL_DMA_IRQHandler+0xb0>
 8001472:	2304      	movs	r3, #4
 8001474:	4a55      	ldr	r2, [pc, #340]	@ (80015cc <HAL_DMA_IRQHandler+0x208>)
 8001476:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800147c:	2b00      	cmp	r3, #0
 800147e:	f000 8094 	beq.w	80015aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800148a:	e08e      	b.n	80015aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001490:	2202      	movs	r2, #2
 8001492:	409a      	lsls	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4013      	ands	r3, r2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d056      	beq.n	800154a <HAL_DMA_IRQHandler+0x186>
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d051      	beq.n	800154a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0320 	and.w	r3, r3, #32
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d10b      	bne.n	80014cc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 020a 	bic.w	r2, r2, #10
 80014c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a38      	ldr	r2, [pc, #224]	@ (80015b4 <HAL_DMA_IRQHandler+0x1f0>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d029      	beq.n	800152a <HAL_DMA_IRQHandler+0x166>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a37      	ldr	r2, [pc, #220]	@ (80015b8 <HAL_DMA_IRQHandler+0x1f4>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d022      	beq.n	8001526 <HAL_DMA_IRQHandler+0x162>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a35      	ldr	r2, [pc, #212]	@ (80015bc <HAL_DMA_IRQHandler+0x1f8>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d01a      	beq.n	8001520 <HAL_DMA_IRQHandler+0x15c>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a34      	ldr	r2, [pc, #208]	@ (80015c0 <HAL_DMA_IRQHandler+0x1fc>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d012      	beq.n	800151a <HAL_DMA_IRQHandler+0x156>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a32      	ldr	r2, [pc, #200]	@ (80015c4 <HAL_DMA_IRQHandler+0x200>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d00a      	beq.n	8001514 <HAL_DMA_IRQHandler+0x150>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a31      	ldr	r2, [pc, #196]	@ (80015c8 <HAL_DMA_IRQHandler+0x204>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d102      	bne.n	800150e <HAL_DMA_IRQHandler+0x14a>
 8001508:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800150c:	e00e      	b.n	800152c <HAL_DMA_IRQHandler+0x168>
 800150e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001512:	e00b      	b.n	800152c <HAL_DMA_IRQHandler+0x168>
 8001514:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001518:	e008      	b.n	800152c <HAL_DMA_IRQHandler+0x168>
 800151a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800151e:	e005      	b.n	800152c <HAL_DMA_IRQHandler+0x168>
 8001520:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001524:	e002      	b.n	800152c <HAL_DMA_IRQHandler+0x168>
 8001526:	2320      	movs	r3, #32
 8001528:	e000      	b.n	800152c <HAL_DMA_IRQHandler+0x168>
 800152a:	2302      	movs	r3, #2
 800152c:	4a27      	ldr	r2, [pc, #156]	@ (80015cc <HAL_DMA_IRQHandler+0x208>)
 800152e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153c:	2b00      	cmp	r3, #0
 800153e:	d034      	beq.n	80015aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001548:	e02f      	b.n	80015aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	2208      	movs	r2, #8
 8001550:	409a      	lsls	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	4013      	ands	r3, r2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d028      	beq.n	80015ac <HAL_DMA_IRQHandler+0x1e8>
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	f003 0308 	and.w	r3, r3, #8
 8001560:	2b00      	cmp	r3, #0
 8001562:	d023      	beq.n	80015ac <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 020e 	bic.w	r2, r2, #14
 8001572:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800157c:	2101      	movs	r1, #1
 800157e:	fa01 f202 	lsl.w	r2, r1, r2
 8001582:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d004      	beq.n	80015ac <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	4798      	blx	r3
    }
  }
  return;
 80015aa:	bf00      	nop
 80015ac:	bf00      	nop
}
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40020008 	.word	0x40020008
 80015b8:	4002001c 	.word	0x4002001c
 80015bc:	40020030 	.word	0x40020030
 80015c0:	40020044 	.word	0x40020044
 80015c4:	40020058 	.word	0x40020058
 80015c8:	4002006c 	.word	0x4002006c
 80015cc:	40020000 	.word	0x40020000

080015d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015e6:	2101      	movs	r1, #1
 80015e8:	fa01 f202 	lsl.w	r2, r1, r2
 80015ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b10      	cmp	r3, #16
 80015fc:	d108      	bne.n	8001610 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800160e:	e007      	b.n	8001620 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	60da      	str	r2, [r3, #12]
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
	...

0800162c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800162c:	b480      	push	{r7}
 800162e:	b08b      	sub	sp, #44	@ 0x2c
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163e:	e169      	b.n	8001914 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001640:	2201      	movs	r2, #1
 8001642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	69fa      	ldr	r2, [r7, #28]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	429a      	cmp	r2, r3
 800165a:	f040 8158 	bne.w	800190e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	4a9a      	ldr	r2, [pc, #616]	@ (80018cc <HAL_GPIO_Init+0x2a0>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d05e      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 8001668:	4a98      	ldr	r2, [pc, #608]	@ (80018cc <HAL_GPIO_Init+0x2a0>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d875      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 800166e:	4a98      	ldr	r2, [pc, #608]	@ (80018d0 <HAL_GPIO_Init+0x2a4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d058      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 8001674:	4a96      	ldr	r2, [pc, #600]	@ (80018d0 <HAL_GPIO_Init+0x2a4>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d86f      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 800167a:	4a96      	ldr	r2, [pc, #600]	@ (80018d4 <HAL_GPIO_Init+0x2a8>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d052      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 8001680:	4a94      	ldr	r2, [pc, #592]	@ (80018d4 <HAL_GPIO_Init+0x2a8>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d869      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 8001686:	4a94      	ldr	r2, [pc, #592]	@ (80018d8 <HAL_GPIO_Init+0x2ac>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d04c      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 800168c:	4a92      	ldr	r2, [pc, #584]	@ (80018d8 <HAL_GPIO_Init+0x2ac>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d863      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 8001692:	4a92      	ldr	r2, [pc, #584]	@ (80018dc <HAL_GPIO_Init+0x2b0>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d046      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 8001698:	4a90      	ldr	r2, [pc, #576]	@ (80018dc <HAL_GPIO_Init+0x2b0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d85d      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 800169e:	2b12      	cmp	r3, #18
 80016a0:	d82a      	bhi.n	80016f8 <HAL_GPIO_Init+0xcc>
 80016a2:	2b12      	cmp	r3, #18
 80016a4:	d859      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 80016a6:	a201      	add	r2, pc, #4	@ (adr r2, 80016ac <HAL_GPIO_Init+0x80>)
 80016a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ac:	08001727 	.word	0x08001727
 80016b0:	08001701 	.word	0x08001701
 80016b4:	08001713 	.word	0x08001713
 80016b8:	08001755 	.word	0x08001755
 80016bc:	0800175b 	.word	0x0800175b
 80016c0:	0800175b 	.word	0x0800175b
 80016c4:	0800175b 	.word	0x0800175b
 80016c8:	0800175b 	.word	0x0800175b
 80016cc:	0800175b 	.word	0x0800175b
 80016d0:	0800175b 	.word	0x0800175b
 80016d4:	0800175b 	.word	0x0800175b
 80016d8:	0800175b 	.word	0x0800175b
 80016dc:	0800175b 	.word	0x0800175b
 80016e0:	0800175b 	.word	0x0800175b
 80016e4:	0800175b 	.word	0x0800175b
 80016e8:	0800175b 	.word	0x0800175b
 80016ec:	0800175b 	.word	0x0800175b
 80016f0:	08001709 	.word	0x08001709
 80016f4:	0800171d 	.word	0x0800171d
 80016f8:	4a79      	ldr	r2, [pc, #484]	@ (80018e0 <HAL_GPIO_Init+0x2b4>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d013      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016fe:	e02c      	b.n	800175a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	623b      	str	r3, [r7, #32]
          break;
 8001706:	e029      	b.n	800175c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	3304      	adds	r3, #4
 800170e:	623b      	str	r3, [r7, #32]
          break;
 8001710:	e024      	b.n	800175c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	3308      	adds	r3, #8
 8001718:	623b      	str	r3, [r7, #32]
          break;
 800171a:	e01f      	b.n	800175c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	330c      	adds	r3, #12
 8001722:	623b      	str	r3, [r7, #32]
          break;
 8001724:	e01a      	b.n	800175c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d102      	bne.n	8001734 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800172e:	2304      	movs	r3, #4
 8001730:	623b      	str	r3, [r7, #32]
          break;
 8001732:	e013      	b.n	800175c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d105      	bne.n	8001748 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800173c:	2308      	movs	r3, #8
 800173e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69fa      	ldr	r2, [r7, #28]
 8001744:	611a      	str	r2, [r3, #16]
          break;
 8001746:	e009      	b.n	800175c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001748:	2308      	movs	r3, #8
 800174a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	615a      	str	r2, [r3, #20]
          break;
 8001752:	e003      	b.n	800175c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
          break;
 8001758:	e000      	b.n	800175c <HAL_GPIO_Init+0x130>
          break;
 800175a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	2bff      	cmp	r3, #255	@ 0xff
 8001760:	d801      	bhi.n	8001766 <HAL_GPIO_Init+0x13a>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	e001      	b.n	800176a <HAL_GPIO_Init+0x13e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3304      	adds	r3, #4
 800176a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2bff      	cmp	r3, #255	@ 0xff
 8001770:	d802      	bhi.n	8001778 <HAL_GPIO_Init+0x14c>
 8001772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	e002      	b.n	800177e <HAL_GPIO_Init+0x152>
 8001778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177a:	3b08      	subs	r3, #8
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	210f      	movs	r1, #15
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	fa01 f303 	lsl.w	r3, r1, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	401a      	ands	r2, r3
 8001790:	6a39      	ldr	r1, [r7, #32]
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	fa01 f303 	lsl.w	r3, r1, r3
 8001798:	431a      	orrs	r2, r3
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 80b1 	beq.w	800190e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017ac:	4b4d      	ldr	r3, [pc, #308]	@ (80018e4 <HAL_GPIO_Init+0x2b8>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4a4c      	ldr	r2, [pc, #304]	@ (80018e4 <HAL_GPIO_Init+0x2b8>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6193      	str	r3, [r2, #24]
 80017b8:	4b4a      	ldr	r3, [pc, #296]	@ (80018e4 <HAL_GPIO_Init+0x2b8>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017c4:	4a48      	ldr	r2, [pc, #288]	@ (80018e8 <HAL_GPIO_Init+0x2bc>)
 80017c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c8:	089b      	lsrs	r3, r3, #2
 80017ca:	3302      	adds	r3, #2
 80017cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	220f      	movs	r2, #15
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	4013      	ands	r3, r2
 80017e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a40      	ldr	r2, [pc, #256]	@ (80018ec <HAL_GPIO_Init+0x2c0>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d013      	beq.n	8001818 <HAL_GPIO_Init+0x1ec>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a3f      	ldr	r2, [pc, #252]	@ (80018f0 <HAL_GPIO_Init+0x2c4>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d00d      	beq.n	8001814 <HAL_GPIO_Init+0x1e8>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a3e      	ldr	r2, [pc, #248]	@ (80018f4 <HAL_GPIO_Init+0x2c8>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d007      	beq.n	8001810 <HAL_GPIO_Init+0x1e4>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a3d      	ldr	r2, [pc, #244]	@ (80018f8 <HAL_GPIO_Init+0x2cc>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d101      	bne.n	800180c <HAL_GPIO_Init+0x1e0>
 8001808:	2303      	movs	r3, #3
 800180a:	e006      	b.n	800181a <HAL_GPIO_Init+0x1ee>
 800180c:	2304      	movs	r3, #4
 800180e:	e004      	b.n	800181a <HAL_GPIO_Init+0x1ee>
 8001810:	2302      	movs	r3, #2
 8001812:	e002      	b.n	800181a <HAL_GPIO_Init+0x1ee>
 8001814:	2301      	movs	r3, #1
 8001816:	e000      	b.n	800181a <HAL_GPIO_Init+0x1ee>
 8001818:	2300      	movs	r3, #0
 800181a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800181c:	f002 0203 	and.w	r2, r2, #3
 8001820:	0092      	lsls	r2, r2, #2
 8001822:	4093      	lsls	r3, r2
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	4313      	orrs	r3, r2
 8001828:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800182a:	492f      	ldr	r1, [pc, #188]	@ (80018e8 <HAL_GPIO_Init+0x2bc>)
 800182c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182e:	089b      	lsrs	r3, r3, #2
 8001830:	3302      	adds	r3, #2
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d006      	beq.n	8001852 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001844:	4b2d      	ldr	r3, [pc, #180]	@ (80018fc <HAL_GPIO_Init+0x2d0>)
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	492c      	ldr	r1, [pc, #176]	@ (80018fc <HAL_GPIO_Init+0x2d0>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	608b      	str	r3, [r1, #8]
 8001850:	e006      	b.n	8001860 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001852:	4b2a      	ldr	r3, [pc, #168]	@ (80018fc <HAL_GPIO_Init+0x2d0>)
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	43db      	mvns	r3, r3
 800185a:	4928      	ldr	r1, [pc, #160]	@ (80018fc <HAL_GPIO_Init+0x2d0>)
 800185c:	4013      	ands	r3, r2
 800185e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d006      	beq.n	800187a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800186c:	4b23      	ldr	r3, [pc, #140]	@ (80018fc <HAL_GPIO_Init+0x2d0>)
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	4922      	ldr	r1, [pc, #136]	@ (80018fc <HAL_GPIO_Init+0x2d0>)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	60cb      	str	r3, [r1, #12]
 8001878:	e006      	b.n	8001888 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800187a:	4b20      	ldr	r3, [pc, #128]	@ (80018fc <HAL_GPIO_Init+0x2d0>)
 800187c:	68da      	ldr	r2, [r3, #12]
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	43db      	mvns	r3, r3
 8001882:	491e      	ldr	r1, [pc, #120]	@ (80018fc <HAL_GPIO_Init+0x2d0>)
 8001884:	4013      	ands	r3, r2
 8001886:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d006      	beq.n	80018a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001894:	4b19      	ldr	r3, [pc, #100]	@ (80018fc <HAL_GPIO_Init+0x2d0>)
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	4918      	ldr	r1, [pc, #96]	@ (80018fc <HAL_GPIO_Init+0x2d0>)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	604b      	str	r3, [r1, #4]
 80018a0:	e006      	b.n	80018b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018a2:	4b16      	ldr	r3, [pc, #88]	@ (80018fc <HAL_GPIO_Init+0x2d0>)
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	4914      	ldr	r1, [pc, #80]	@ (80018fc <HAL_GPIO_Init+0x2d0>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d021      	beq.n	8001900 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018bc:	4b0f      	ldr	r3, [pc, #60]	@ (80018fc <HAL_GPIO_Init+0x2d0>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	490e      	ldr	r1, [pc, #56]	@ (80018fc <HAL_GPIO_Init+0x2d0>)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	600b      	str	r3, [r1, #0]
 80018c8:	e021      	b.n	800190e <HAL_GPIO_Init+0x2e2>
 80018ca:	bf00      	nop
 80018cc:	10320000 	.word	0x10320000
 80018d0:	10310000 	.word	0x10310000
 80018d4:	10220000 	.word	0x10220000
 80018d8:	10210000 	.word	0x10210000
 80018dc:	10120000 	.word	0x10120000
 80018e0:	10110000 	.word	0x10110000
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40010000 	.word	0x40010000
 80018ec:	40010800 	.word	0x40010800
 80018f0:	40010c00 	.word	0x40010c00
 80018f4:	40011000 	.word	0x40011000
 80018f8:	40011400 	.word	0x40011400
 80018fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001900:	4b0b      	ldr	r3, [pc, #44]	@ (8001930 <HAL_GPIO_Init+0x304>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	43db      	mvns	r3, r3
 8001908:	4909      	ldr	r1, [pc, #36]	@ (8001930 <HAL_GPIO_Init+0x304>)
 800190a:	4013      	ands	r3, r2
 800190c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800190e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001910:	3301      	adds	r3, #1
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191a:	fa22 f303 	lsr.w	r3, r2, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	f47f ae8e 	bne.w	8001640 <HAL_GPIO_Init+0x14>
  }
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	372c      	adds	r7, #44	@ 0x2c
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	40010400 	.word	0x40010400

08001934 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001934:	b480      	push	{r7}
 8001936:	b089      	sub	sp, #36	@ 0x24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001942:	e09a      	b.n	8001a7a <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001944:	2201      	movs	r2, #1
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	4013      	ands	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 808d 	beq.w	8001a74 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800195a:	4a4e      	ldr	r2, [pc, #312]	@ (8001a94 <HAL_GPIO_DeInit+0x160>)
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	089b      	lsrs	r3, r3, #2
 8001960:	3302      	adds	r3, #2
 8001962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001966:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	220f      	movs	r2, #15
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	4013      	ands	r3, r2
 800197a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a46      	ldr	r2, [pc, #280]	@ (8001a98 <HAL_GPIO_DeInit+0x164>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d013      	beq.n	80019ac <HAL_GPIO_DeInit+0x78>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a45      	ldr	r2, [pc, #276]	@ (8001a9c <HAL_GPIO_DeInit+0x168>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d00d      	beq.n	80019a8 <HAL_GPIO_DeInit+0x74>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a44      	ldr	r2, [pc, #272]	@ (8001aa0 <HAL_GPIO_DeInit+0x16c>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d007      	beq.n	80019a4 <HAL_GPIO_DeInit+0x70>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a43      	ldr	r2, [pc, #268]	@ (8001aa4 <HAL_GPIO_DeInit+0x170>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d101      	bne.n	80019a0 <HAL_GPIO_DeInit+0x6c>
 800199c:	2303      	movs	r3, #3
 800199e:	e006      	b.n	80019ae <HAL_GPIO_DeInit+0x7a>
 80019a0:	2304      	movs	r3, #4
 80019a2:	e004      	b.n	80019ae <HAL_GPIO_DeInit+0x7a>
 80019a4:	2302      	movs	r3, #2
 80019a6:	e002      	b.n	80019ae <HAL_GPIO_DeInit+0x7a>
 80019a8:	2301      	movs	r3, #1
 80019aa:	e000      	b.n	80019ae <HAL_GPIO_DeInit+0x7a>
 80019ac:	2300      	movs	r3, #0
 80019ae:	69fa      	ldr	r2, [r7, #28]
 80019b0:	f002 0203 	and.w	r2, r2, #3
 80019b4:	0092      	lsls	r2, r2, #2
 80019b6:	4093      	lsls	r3, r2
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d132      	bne.n	8001a24 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80019be:	4b3a      	ldr	r3, [pc, #232]	@ (8001aa8 <HAL_GPIO_DeInit+0x174>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	43db      	mvns	r3, r3
 80019c6:	4938      	ldr	r1, [pc, #224]	@ (8001aa8 <HAL_GPIO_DeInit+0x174>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80019cc:	4b36      	ldr	r3, [pc, #216]	@ (8001aa8 <HAL_GPIO_DeInit+0x174>)
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	43db      	mvns	r3, r3
 80019d4:	4934      	ldr	r1, [pc, #208]	@ (8001aa8 <HAL_GPIO_DeInit+0x174>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80019da:	4b33      	ldr	r3, [pc, #204]	@ (8001aa8 <HAL_GPIO_DeInit+0x174>)
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	4931      	ldr	r1, [pc, #196]	@ (8001aa8 <HAL_GPIO_DeInit+0x174>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80019e8:	4b2f      	ldr	r3, [pc, #188]	@ (8001aa8 <HAL_GPIO_DeInit+0x174>)
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	43db      	mvns	r3, r3
 80019f0:	492d      	ldr	r1, [pc, #180]	@ (8001aa8 <HAL_GPIO_DeInit+0x174>)
 80019f2:	4013      	ands	r3, r2
 80019f4:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	220f      	movs	r2, #15
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001a06:	4a23      	ldr	r2, [pc, #140]	@ (8001a94 <HAL_GPIO_DeInit+0x160>)
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	089b      	lsrs	r3, r3, #2
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	43da      	mvns	r2, r3
 8001a16:	481f      	ldr	r0, [pc, #124]	@ (8001a94 <HAL_GPIO_DeInit+0x160>)
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	089b      	lsrs	r3, r3, #2
 8001a1c:	400a      	ands	r2, r1
 8001a1e:	3302      	adds	r3, #2
 8001a20:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	2bff      	cmp	r3, #255	@ 0xff
 8001a28:	d801      	bhi.n	8001a2e <HAL_GPIO_DeInit+0xfa>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	e001      	b.n	8001a32 <HAL_GPIO_DeInit+0xfe>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3304      	adds	r3, #4
 8001a32:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	2bff      	cmp	r3, #255	@ 0xff
 8001a38:	d802      	bhi.n	8001a40 <HAL_GPIO_DeInit+0x10c>
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	e002      	b.n	8001a46 <HAL_GPIO_DeInit+0x112>
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	3b08      	subs	r3, #8
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	210f      	movs	r1, #15
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	fa01 f303 	lsl.w	r3, r1, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	401a      	ands	r2, r3
 8001a58:	2104      	movs	r1, #4
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	431a      	orrs	r2, r3
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	401a      	ands	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	3301      	adds	r3, #1
 8001a78:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f47f af5e 	bne.w	8001944 <HAL_GPIO_DeInit+0x10>
  }
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	3724      	adds	r7, #36	@ 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr
 8001a94:	40010000 	.word	0x40010000
 8001a98:	40010800 	.word	0x40010800
 8001a9c:	40010c00 	.word	0x40010c00
 8001aa0:	40011000 	.word	0x40011000
 8001aa4:	40011400 	.word	0x40011400
 8001aa8:	40010400 	.word	0x40010400

08001aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	807b      	strh	r3, [r7, #2]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001abc:	787b      	ldrb	r3, [r7, #1]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ac2:	887a      	ldrh	r2, [r7, #2]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ac8:	e003      	b.n	8001ad2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aca:	887b      	ldrh	r3, [r7, #2]
 8001acc:	041a      	lsls	r2, r3, #16
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	611a      	str	r2, [r3, #16]
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aee:	887a      	ldrh	r2, [r7, #2]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4013      	ands	r3, r2
 8001af4:	041a      	lsls	r2, r3, #16
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	43d9      	mvns	r1, r3
 8001afa:	887b      	ldrh	r3, [r7, #2]
 8001afc:	400b      	ands	r3, r1
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	611a      	str	r2, [r3, #16]
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr

08001b0e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b084      	sub	sp, #16
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0e8      	b.n	8001cf2 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d106      	bne.n	8001b3a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f007 fe6b 	bl	8009810 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f003 fc4c 	bl	80053ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6818      	ldr	r0, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b5c:	f003 fc22 	bl	80053a4 <USB_CoreInit>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d005      	beq.n	8001b72 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2202      	movs	r2, #2
 8001b6a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e0bf      	b.n	8001cf2 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f003 fc50 	bl	800541e <USB_SetCurrentMode>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2202      	movs	r2, #2
 8001b88:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0b0      	b.n	8001cf2 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b90:	2300      	movs	r3, #0
 8001b92:	73fb      	strb	r3, [r7, #15]
 8001b94:	e03e      	b.n	8001c14 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b96:	7bfa      	ldrb	r2, [r7, #15]
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	440b      	add	r3, r1
 8001ba4:	3311      	adds	r3, #17
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001baa:	7bfa      	ldrb	r2, [r7, #15]
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	440b      	add	r3, r1
 8001bb8:	3310      	adds	r3, #16
 8001bba:	7bfa      	ldrb	r2, [r7, #15]
 8001bbc:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bbe:	7bfa      	ldrb	r2, [r7, #15]
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	3313      	adds	r3, #19
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bd2:	7bfa      	ldrb	r2, [r7, #15]
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	440b      	add	r3, r1
 8001be0:	3320      	adds	r3, #32
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001be6:	7bfa      	ldrb	r2, [r7, #15]
 8001be8:	6879      	ldr	r1, [r7, #4]
 8001bea:	4613      	mov	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	440b      	add	r3, r1
 8001bf4:	3324      	adds	r3, #36	@ 0x24
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	440b      	add	r3, r1
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	3301      	adds	r3, #1
 8001c12:	73fb      	strb	r3, [r7, #15]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	791b      	ldrb	r3, [r3, #4]
 8001c18:	7bfa      	ldrb	r2, [r7, #15]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d3bb      	bcc.n	8001b96 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	73fb      	strb	r3, [r7, #15]
 8001c22:	e044      	b.n	8001cae <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c24:	7bfa      	ldrb	r2, [r7, #15]
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	440b      	add	r3, r1
 8001c32:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c3a:	7bfa      	ldrb	r2, [r7, #15]
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	440b      	add	r3, r1
 8001c48:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c4c:	7bfa      	ldrb	r2, [r7, #15]
 8001c4e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c50:	7bfa      	ldrb	r2, [r7, #15]
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	440b      	add	r3, r1
 8001c5e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c66:	7bfa      	ldrb	r2, [r7, #15]
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	440b      	add	r3, r1
 8001c74:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	440b      	add	r3, r1
 8001c8a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c92:	7bfa      	ldrb	r2, [r7, #15]
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	440b      	add	r3, r1
 8001ca0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	3301      	adds	r3, #1
 8001cac:	73fb      	strb	r3, [r7, #15]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	791b      	ldrb	r3, [r3, #4]
 8001cb2:	7bfa      	ldrb	r2, [r7, #15]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d3b5      	bcc.n	8001c24 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6818      	ldr	r0, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cc2:	f003 fbb8 	bl	8005436 <USB_DevInit>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e00c      	b.n	8001cf2 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f005 fe37 	bl	800795e <USB_DevDisconnect>

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <HAL_PCD_Start+0x16>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e016      	b.n	8001d3e <HAL_PCD_Start+0x44>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f003 fb4e 	bl	80053be <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001d22:	2101      	movs	r1, #1
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f007 ffe6 	bl	8009cf6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f005 fe0b 	bl	800794a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b088      	sub	sp, #32
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f005 fe0d 	bl	8007972 <USB_ReadInterrupts>
 8001d58:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 fb1a 	bl	800239e <PCD_EP_ISR_Handler>

    return;
 8001d6a:	e119      	b.n	8001fa0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d013      	beq.n	8001d9e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d88:	b292      	uxth	r2, r2
 8001d8a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f007 fdb9 	bl	8009906 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d94:	2100      	movs	r1, #0
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f905 	bl	8001fa6 <HAL_PCD_SetAddress>

    return;
 8001d9c:	e100      	b.n	8001fa0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00c      	beq.n	8001dc2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001dba:	b292      	uxth	r2, r2
 8001dbc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001dc0:	e0ee      	b.n	8001fa0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00c      	beq.n	8001de6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001dde:	b292      	uxth	r2, r2
 8001de0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001de4:	e0dc      	b.n	8001fa0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d027      	beq.n	8001e40 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0204 	bic.w	r2, r2, #4
 8001e02:	b292      	uxth	r2, r2
 8001e04:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0208 	bic.w	r2, r2, #8
 8001e1a:	b292      	uxth	r2, r2
 8001e1c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f007 fda9 	bl	8009978 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001e38:	b292      	uxth	r2, r2
 8001e3a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001e3e:	e0af      	b.n	8001fa0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8083 	beq.w	8001f52 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	77fb      	strb	r3, [r7, #31]
 8001e50:	e010      	b.n	8001e74 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	7ffb      	ldrb	r3, [r7, #31]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	441a      	add	r2, r3
 8001e5e:	7ffb      	ldrb	r3, [r7, #31]
 8001e60:	8812      	ldrh	r2, [r2, #0]
 8001e62:	b292      	uxth	r2, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	3320      	adds	r3, #32
 8001e68:	443b      	add	r3, r7
 8001e6a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001e6e:	7ffb      	ldrb	r3, [r7, #31]
 8001e70:	3301      	adds	r3, #1
 8001e72:	77fb      	strb	r3, [r7, #31]
 8001e74:	7ffb      	ldrb	r3, [r7, #31]
 8001e76:	2b07      	cmp	r3, #7
 8001e78:	d9eb      	bls.n	8001e52 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f042 0201 	orr.w	r2, r2, #1
 8001e8c:	b292      	uxth	r2, r2
 8001e8e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0201 	bic.w	r2, r2, #1
 8001ea4:	b292      	uxth	r2, r2
 8001ea6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001eaa:	bf00      	nop
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f6      	beq.n	8001eac <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ed0:	b292      	uxth	r2, r2
 8001ed2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	77fb      	strb	r3, [r7, #31]
 8001eda:	e00f      	b.n	8001efc <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001edc:	7ffb      	ldrb	r3, [r7, #31]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	7ffa      	ldrb	r2, [r7, #31]
 8001ee6:	0092      	lsls	r2, r2, #2
 8001ee8:	440a      	add	r2, r1
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	3320      	adds	r3, #32
 8001eee:	443b      	add	r3, r7
 8001ef0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001ef4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001ef6:	7ffb      	ldrb	r3, [r7, #31]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	77fb      	strb	r3, [r7, #31]
 8001efc:	7ffb      	ldrb	r3, [r7, #31]
 8001efe:	2b07      	cmp	r3, #7
 8001f00:	d9ec      	bls.n	8001edc <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 0208 	orr.w	r2, r2, #8
 8001f14:	b292      	uxth	r2, r2
 8001f16:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f2c:	b292      	uxth	r2, r2
 8001f2e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f042 0204 	orr.w	r2, r2, #4
 8001f44:	b292      	uxth	r2, r2
 8001f46:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f007 fcfa 	bl	8009944 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001f50:	e026      	b.n	8001fa0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00f      	beq.n	8001f7c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f6e:	b292      	uxth	r2, r2
 8001f70:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f007 fcb8 	bl	80098ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001f7a:	e011      	b.n	8001fa0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00c      	beq.n	8001fa0 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f98:	b292      	uxth	r2, r2
 8001f9a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001f9e:	bf00      	nop
  }
}
 8001fa0:	3720      	adds	r7, #32
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d101      	bne.n	8001fc0 <HAL_PCD_SetAddress+0x1a>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	e012      	b.n	8001fe6 <HAL_PCD_SetAddress+0x40>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	78fa      	ldrb	r2, [r7, #3]
 8001fcc:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	78fa      	ldrb	r2, [r7, #3]
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f005 fca4 	bl	8007924 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b084      	sub	sp, #16
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	4608      	mov	r0, r1
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	70fb      	strb	r3, [r7, #3]
 8002000:	460b      	mov	r3, r1
 8002002:	803b      	strh	r3, [r7, #0]
 8002004:	4613      	mov	r3, r2
 8002006:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800200c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002010:	2b00      	cmp	r3, #0
 8002012:	da0e      	bge.n	8002032 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	f003 0207 	and.w	r2, r3, #7
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	3310      	adds	r3, #16
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	4413      	add	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2201      	movs	r2, #1
 800202e:	705a      	strb	r2, [r3, #1]
 8002030:	e00e      	b.n	8002050 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	f003 0207 	and.w	r2, r3, #7
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	4413      	add	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002050:	78fb      	ldrb	r3, [r7, #3]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	b2da      	uxtb	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800205c:	883a      	ldrh	r2, [r7, #0]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	78ba      	ldrb	r2, [r7, #2]
 8002066:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002068:	78bb      	ldrb	r3, [r7, #2]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d102      	bne.n	8002074 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800207a:	2b01      	cmp	r3, #1
 800207c:	d101      	bne.n	8002082 <HAL_PCD_EP_Open+0x94>
 800207e:	2302      	movs	r3, #2
 8002080:	e00e      	b.n	80020a0 <HAL_PCD_EP_Open+0xb2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68f9      	ldr	r1, [r7, #12]
 8002090:	4618      	mov	r0, r3
 8002092:	f003 f9ed 	bl	8005470 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800209e:	7afb      	ldrb	r3, [r7, #11]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	da0e      	bge.n	80020da <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	f003 0207 	and.w	r2, r3, #7
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	3310      	adds	r3, #16
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	4413      	add	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2201      	movs	r2, #1
 80020d6:	705a      	strb	r2, [r3, #1]
 80020d8:	e00e      	b.n	80020f8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020da:	78fb      	ldrb	r3, [r7, #3]
 80020dc:	f003 0207 	and.w	r2, r3, #7
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	4413      	add	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800210a:	2b01      	cmp	r3, #1
 800210c:	d101      	bne.n	8002112 <HAL_PCD_EP_Close+0x6a>
 800210e:	2302      	movs	r3, #2
 8002110:	e00e      	b.n	8002130 <HAL_PCD_EP_Close+0x88>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68f9      	ldr	r1, [r7, #12]
 8002120:	4618      	mov	r0, r3
 8002122:	f003 fd65 	bl	8005bf0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	460b      	mov	r3, r1
 8002146:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002148:	7afb      	ldrb	r3, [r7, #11]
 800214a:	f003 0207 	and.w	r2, r3, #7
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4413      	add	r3, r2
 800215e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	2200      	movs	r2, #0
 8002170:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2200      	movs	r2, #0
 8002176:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002178:	7afb      	ldrb	r3, [r7, #11]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	b2da      	uxtb	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6979      	ldr	r1, [r7, #20]
 800218a:	4618      	mov	r0, r3
 800218c:	f003 ff1c 	bl	8005fc8 <USB_EPStartXfer>

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	460b      	mov	r3, r1
 80021a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	f003 0207 	and.w	r2, r3, #7
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	440b      	add	r3, r1
 80021b8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80021bc:	681b      	ldr	r3, [r3, #0]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr

080021c8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	607a      	str	r2, [r7, #4]
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	460b      	mov	r3, r1
 80021d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021d8:	7afb      	ldrb	r3, [r7, #11]
 80021da:	f003 0207 	and.w	r2, r3, #7
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	3310      	adds	r3, #16
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4413      	add	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2200      	movs	r2, #0
 800220c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	2201      	movs	r2, #1
 8002212:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002214:	7afb      	ldrb	r3, [r7, #11]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	b2da      	uxtb	r2, r3
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6979      	ldr	r1, [r7, #20]
 8002226:	4618      	mov	r0, r3
 8002228:	f003 fece 	bl	8005fc8 <USB_EPStartXfer>

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b084      	sub	sp, #16
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	460b      	mov	r3, r1
 8002240:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002242:	78fb      	ldrb	r3, [r7, #3]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	7912      	ldrb	r2, [r2, #4]
 800224c:	4293      	cmp	r3, r2
 800224e:	d901      	bls.n	8002254 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e04c      	b.n	80022ee <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002254:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002258:	2b00      	cmp	r3, #0
 800225a:	da0e      	bge.n	800227a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	f003 0207 	and.w	r2, r3, #7
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	3310      	adds	r3, #16
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	4413      	add	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2201      	movs	r2, #1
 8002276:	705a      	strb	r2, [r3, #1]
 8002278:	e00c      	b.n	8002294 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800227a:	78fa      	ldrb	r2, [r7, #3]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	4413      	add	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2201      	movs	r2, #1
 8002298:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_PCD_EP_SetStall+0x7e>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e01c      	b.n	80022ee <HAL_PCD_EP_SetStall+0xb8>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68f9      	ldr	r1, [r7, #12]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f005 fa31 	bl	800772a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d108      	bne.n	80022e4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80022dc:	4619      	mov	r1, r3
 80022de:	4610      	mov	r0, r2
 80022e0:	f005 fb56 	bl	8007990 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	460b      	mov	r3, r1
 8002300:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002302:	78fb      	ldrb	r3, [r7, #3]
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	7912      	ldrb	r2, [r2, #4]
 800230c:	4293      	cmp	r3, r2
 800230e:	d901      	bls.n	8002314 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e040      	b.n	8002396 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002314:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002318:	2b00      	cmp	r3, #0
 800231a:	da0e      	bge.n	800233a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	f003 0207 	and.w	r2, r3, #7
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	3310      	adds	r3, #16
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	4413      	add	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2201      	movs	r2, #1
 8002336:	705a      	strb	r2, [r3, #1]
 8002338:	e00e      	b.n	8002358 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800233a:	78fb      	ldrb	r3, [r7, #3]
 800233c:	f003 0207 	and.w	r2, r3, #7
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	4413      	add	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800235e:	78fb      	ldrb	r3, [r7, #3]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	b2da      	uxtb	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002370:	2b01      	cmp	r3, #1
 8002372:	d101      	bne.n	8002378 <HAL_PCD_EP_ClrStall+0x82>
 8002374:	2302      	movs	r3, #2
 8002376:	e00e      	b.n	8002396 <HAL_PCD_EP_ClrStall+0xa0>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68f9      	ldr	r1, [r7, #12]
 8002386:	4618      	mov	r0, r3
 8002388:	f005 fa1f 	bl	80077ca <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b096      	sub	sp, #88	@ 0x58
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023a6:	e3bb      	b.n	8002b20 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80023b0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80023b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80023c2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f040 8175 	bne.w	80026b6 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80023cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80023d0:	f003 0310 	and.w	r3, r3, #16
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d14e      	bne.n	8002476 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80023e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023e8:	81fb      	strh	r3, [r7, #14]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	89fb      	ldrh	r3, [r7, #14]
 80023f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3310      	adds	r3, #16
 8002400:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800240a:	b29b      	uxth	r3, r3
 800240c:	461a      	mov	r2, r3
 800240e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4413      	add	r3, r2
 8002416:	3302      	adds	r3, #2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6812      	ldr	r2, [r2, #0]
 800241e:	4413      	add	r3, r2
 8002420:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800242a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800242c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800242e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002430:	695a      	ldr	r2, [r3, #20]
 8002432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	441a      	add	r2, r3
 8002438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800243a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800243c:	2100      	movs	r1, #0
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f007 fa39 	bl	80098b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	7b5b      	ldrb	r3, [r3, #13]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 8368 	beq.w	8002b20 <PCD_EP_ISR_Handler+0x782>
 8002450:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	2b00      	cmp	r3, #0
 8002456:	f040 8363 	bne.w	8002b20 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	7b5b      	ldrb	r3, [r3, #13]
 800245e:	b2db      	uxtb	r3, r3
 8002460:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002464:	b2da      	uxtb	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	735a      	strb	r2, [r3, #13]
 8002474:	e354      	b.n	8002b20 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800247c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002488:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800248c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002490:	2b00      	cmp	r3, #0
 8002492:	d034      	beq.n	80024fe <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800249c:	b29b      	uxth	r3, r3
 800249e:	461a      	mov	r2, r3
 80024a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4413      	add	r3, r2
 80024a8:	3306      	adds	r3, #6
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024be:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80024ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024cc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80024ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024d0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	f005 faac 	bl	8007a30 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	b29a      	uxth	r2, r3
 80024e0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80024e4:	4013      	ands	r3, r2
 80024e6:	823b      	strh	r3, [r7, #16]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	8a3a      	ldrh	r2, [r7, #16]
 80024ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80024f2:	b292      	uxth	r2, r2
 80024f4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f007 f9b0 	bl	800985c <HAL_PCD_SetupStageCallback>
 80024fc:	e310      	b.n	8002b20 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80024fe:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002502:	2b00      	cmp	r3, #0
 8002504:	f280 830c 	bge.w	8002b20 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	b29a      	uxth	r2, r3
 8002510:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002514:	4013      	ands	r3, r2
 8002516:	83fb      	strh	r3, [r7, #30]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	8bfa      	ldrh	r2, [r7, #30]
 800251e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002522:	b292      	uxth	r2, r2
 8002524:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800252e:	b29b      	uxth	r3, r3
 8002530:	461a      	mov	r2, r3
 8002532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4413      	add	r3, r2
 800253a:	3306      	adds	r3, #6
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	4413      	add	r3, r2
 8002544:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800254e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002550:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d019      	beq.n	800258e <PCD_EP_ISR_Handler+0x1f0>
 800255a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d015      	beq.n	800258e <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002568:	6959      	ldr	r1, [r3, #20]
 800256a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800256c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800256e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002570:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002572:	b29b      	uxth	r3, r3
 8002574:	f005 fa5c 	bl	8007a30 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002578:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800257a:	695a      	ldr	r2, [r3, #20]
 800257c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	441a      	add	r2, r3
 8002582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002584:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002586:	2100      	movs	r1, #0
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f007 f979 	bl	8009880 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002598:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800259c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f040 82bd 	bne.w	8002b20 <PCD_EP_ISR_Handler+0x782>
 80025a6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80025aa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80025ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80025b2:	f000 82b5 	beq.w	8002b20 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	61bb      	str	r3, [r7, #24]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	461a      	mov	r2, r3
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	4413      	add	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	b29b      	uxth	r3, r3
 80025dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	801a      	strh	r2, [r3, #0]
 80025e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80025ec:	d91d      	bls.n	800262a <PCD_EP_ISR_Handler+0x28c>
 80025ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80025f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	f003 031f 	and.w	r3, r3, #31
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d102      	bne.n	8002608 <PCD_EP_ISR_Handler+0x26a>
 8002602:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002604:	3b01      	subs	r3, #1
 8002606:	647b      	str	r3, [r7, #68]	@ 0x44
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	b29a      	uxth	r2, r3
 800260e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002610:	b29b      	uxth	r3, r3
 8002612:	029b      	lsls	r3, r3, #10
 8002614:	b29b      	uxth	r3, r3
 8002616:	4313      	orrs	r3, r2
 8002618:	b29b      	uxth	r3, r3
 800261a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800261e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002622:	b29a      	uxth	r2, r3
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	801a      	strh	r2, [r3, #0]
 8002628:	e026      	b.n	8002678 <PCD_EP_ISR_Handler+0x2da>
 800262a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10a      	bne.n	8002648 <PCD_EP_ISR_Handler+0x2aa>
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	b29b      	uxth	r3, r3
 8002638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800263c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002640:	b29a      	uxth	r2, r3
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	801a      	strh	r2, [r3, #0]
 8002646:	e017      	b.n	8002678 <PCD_EP_ISR_Handler+0x2da>
 8002648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	085b      	lsrs	r3, r3, #1
 800264e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <PCD_EP_ISR_Handler+0x2c4>
 800265c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800265e:	3301      	adds	r3, #1
 8002660:	647b      	str	r3, [r7, #68]	@ 0x44
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	b29a      	uxth	r2, r3
 8002668:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800266a:	b29b      	uxth	r3, r3
 800266c:	029b      	lsls	r3, r3, #10
 800266e:	b29b      	uxth	r3, r3
 8002670:	4313      	orrs	r3, r2
 8002672:	b29a      	uxth	r2, r3
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	b29b      	uxth	r3, r3
 8002680:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002684:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002688:	827b      	strh	r3, [r7, #18]
 800268a:	8a7b      	ldrh	r3, [r7, #18]
 800268c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002690:	827b      	strh	r3, [r7, #18]
 8002692:	8a7b      	ldrh	r3, [r7, #18]
 8002694:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002698:	827b      	strh	r3, [r7, #18]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	8a7b      	ldrh	r3, [r7, #18]
 80026a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80026a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80026a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	8013      	strh	r3, [r2, #0]
 80026b4:	e234      	b.n	8002b20 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026ca:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f280 80fc 	bge.w	80028cc <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80026ea:	4013      	ands	r3, r2
 80026ec:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002702:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002706:	b292      	uxth	r2, r2
 8002708:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800270a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800270e:	4613      	mov	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	4413      	add	r3, r2
 800271e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002722:	7b1b      	ldrb	r3, [r3, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d125      	bne.n	8002774 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002730:	b29b      	uxth	r3, r3
 8002732:	461a      	mov	r2, r3
 8002734:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4413      	add	r3, r2
 800273c:	3306      	adds	r3, #6
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	4413      	add	r3, r2
 8002746:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002750:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002754:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 8092 	beq.w	8002882 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002764:	6959      	ldr	r1, [r3, #20]
 8002766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002768:	88da      	ldrh	r2, [r3, #6]
 800276a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800276e:	f005 f95f 	bl	8007a30 <USB_ReadPMA>
 8002772:	e086      	b.n	8002882 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002774:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002776:	78db      	ldrb	r3, [r3, #3]
 8002778:	2b02      	cmp	r3, #2
 800277a:	d10a      	bne.n	8002792 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800277c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002780:	461a      	mov	r2, r3
 8002782:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f9d9 	bl	8002b3c <HAL_PCD_EP_DB_Receive>
 800278a:	4603      	mov	r3, r0
 800278c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002790:	e077      	b.n	8002882 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027ac:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	461a      	mov	r2, r3
 80027b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	441a      	add	r2, r3
 80027be:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80027c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027ce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d024      	beq.n	800283a <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	461a      	mov	r2, r3
 80027fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4413      	add	r3, r2
 8002804:	3302      	adds	r3, #2
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	4413      	add	r3, r2
 800280e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002818:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800281c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002820:	2b00      	cmp	r3, #0
 8002822:	d02e      	beq.n	8002882 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6818      	ldr	r0, [r3, #0]
 8002828:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800282a:	6959      	ldr	r1, [r3, #20]
 800282c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800282e:	891a      	ldrh	r2, [r3, #8]
 8002830:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002834:	f005 f8fc 	bl	8007a30 <USB_ReadPMA>
 8002838:	e023      	b.n	8002882 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002842:	b29b      	uxth	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	4413      	add	r3, r2
 800284e:	3306      	adds	r3, #6
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6812      	ldr	r2, [r2, #0]
 8002856:	4413      	add	r3, r2
 8002858:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002862:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002866:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800286a:	2b00      	cmp	r3, #0
 800286c:	d009      	beq.n	8002882 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6818      	ldr	r0, [r3, #0]
 8002872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002874:	6959      	ldr	r1, [r3, #20]
 8002876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002878:	895a      	ldrh	r2, [r3, #10]
 800287a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800287e:	f005 f8d7 	bl	8007a30 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002884:	69da      	ldr	r2, [r3, #28]
 8002886:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800288a:	441a      	add	r2, r3
 800288c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800288e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002892:	695a      	ldr	r2, [r3, #20]
 8002894:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002898:	441a      	add	r2, r3
 800289a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800289c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800289e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d005      	beq.n	80028b2 <PCD_EP_ISR_Handler+0x514>
 80028a6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80028aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d206      	bcs.n	80028c0 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80028b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	4619      	mov	r1, r3
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f006 ffe1 	bl	8009880 <HAL_PCD_DataOutStageCallback>
 80028be:	e005      	b.n	80028cc <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80028c6:	4618      	mov	r0, r3
 80028c8:	f003 fb7e 	bl	8005fc8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80028cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80028d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 8123 	beq.w	8002b20 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80028da:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	3310      	adds	r3, #16
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	4413      	add	r3, r2
 80028ec:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	b29b      	uxth	r3, r3
 8002900:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002904:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002908:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	461a      	mov	r2, r3
 8002912:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	441a      	add	r2, r3
 800291a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800291e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002926:	b29b      	uxth	r3, r3
 8002928:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800292a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800292c:	78db      	ldrb	r3, [r3, #3]
 800292e:	2b01      	cmp	r3, #1
 8002930:	f040 80a2 	bne.w	8002a78 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002934:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002936:	2200      	movs	r2, #0
 8002938:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800293a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800293c:	7b1b      	ldrb	r3, [r3, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 8093 	beq.w	8002a6a <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002944:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800294c:	2b00      	cmp	r3, #0
 800294e:	d046      	beq.n	80029de <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002952:	785b      	ldrb	r3, [r3, #1]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d126      	bne.n	80029a6 <PCD_EP_ISR_Handler+0x608>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	627b      	str	r3, [r7, #36]	@ 0x24
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002966:	b29b      	uxth	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296c:	4413      	add	r3, r2
 800296e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	011a      	lsls	r2, r3, #4
 8002976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002978:	4413      	add	r3, r2
 800297a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800297e:	623b      	str	r3, [r7, #32]
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	b29b      	uxth	r3, r3
 8002986:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800298a:	b29a      	uxth	r2, r3
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	801a      	strh	r2, [r3, #0]
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	b29b      	uxth	r3, r3
 8002996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800299a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800299e:	b29a      	uxth	r2, r3
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	801a      	strh	r2, [r3, #0]
 80029a4:	e061      	b.n	8002a6a <PCD_EP_ISR_Handler+0x6cc>
 80029a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029a8:	785b      	ldrb	r3, [r3, #1]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d15d      	bne.n	8002a6a <PCD_EP_ISR_Handler+0x6cc>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029bc:	b29b      	uxth	r3, r3
 80029be:	461a      	mov	r2, r3
 80029c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c2:	4413      	add	r3, r2
 80029c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	011a      	lsls	r2, r3, #4
 80029cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ce:	4413      	add	r3, r2
 80029d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80029d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d8:	2200      	movs	r2, #0
 80029da:	801a      	strh	r2, [r3, #0]
 80029dc:	e045      	b.n	8002a6a <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029e6:	785b      	ldrb	r3, [r3, #1]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d126      	bne.n	8002a3a <PCD_EP_ISR_Handler+0x69c>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a00:	4413      	add	r3, r2
 8002a02:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	011a      	lsls	r2, r3, #4
 8002a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002a12:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a22:	801a      	strh	r2, [r3, #0]
 8002a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a36:	801a      	strh	r2, [r3, #0]
 8002a38:	e017      	b.n	8002a6a <PCD_EP_ISR_Handler+0x6cc>
 8002a3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a3c:	785b      	ldrb	r3, [r3, #1]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d113      	bne.n	8002a6a <PCD_EP_ISR_Handler+0x6cc>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a50:	4413      	add	r3, r2
 8002a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	011a      	lsls	r2, r3, #4
 8002a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002a62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a66:	2200      	movs	r2, #0
 8002a68:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	4619      	mov	r1, r3
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f006 ff20 	bl	80098b6 <HAL_PCD_DataInStageCallback>
 8002a76:	e053      	b.n	8002b20 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002a78:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d146      	bne.n	8002b12 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	461a      	mov	r2, r3
 8002a90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	4413      	add	r3, r2
 8002a98:	3302      	adds	r3, #2
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aac:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002ab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ab2:	699a      	ldr	r2, [r3, #24]
 8002ab4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d907      	bls.n	8002acc <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002abc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002abe:	699a      	ldr	r2, [r3, #24]
 8002ac0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002ac4:	1ad2      	subs	r2, r2, r3
 8002ac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ac8:	619a      	str	r2, [r3, #24]
 8002aca:	e002      	b.n	8002ad2 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ace:	2200      	movs	r2, #0
 8002ad0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002ad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ada:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	4619      	mov	r1, r3
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f006 fee8 	bl	80098b6 <HAL_PCD_DataInStageCallback>
 8002ae6:	e01b      	b.n	8002b20 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aea:	695a      	ldr	r2, [r3, #20]
 8002aec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002af0:	441a      	add	r2, r3
 8002af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002af4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002af8:	69da      	ldr	r2, [r3, #28]
 8002afa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002afe:	441a      	add	r2, r3
 8002b00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b02:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f003 fa5c 	bl	8005fc8 <USB_EPStartXfer>
 8002b10:	e006      	b.n	8002b20 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002b12:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002b16:	461a      	mov	r2, r3
 8002b18:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f91b 	bl	8002d56 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	b21b      	sxth	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f6ff ac3b 	blt.w	80023a8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3758      	adds	r7, #88	@ 0x58
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	4613      	mov	r3, r2
 8002b48:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b4a:	88fb      	ldrh	r3, [r7, #6]
 8002b4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d07e      	beq.n	8002c52 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	3302      	adds	r3, #2
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	6812      	ldr	r2, [r2, #0]
 8002b70:	4413      	add	r3, r2
 8002b72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b7c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	699a      	ldr	r2, [r3, #24]
 8002b82:	8b7b      	ldrh	r3, [r7, #26]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d306      	bcc.n	8002b96 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	699a      	ldr	r2, [r3, #24]
 8002b8c:	8b7b      	ldrh	r3, [r7, #26]
 8002b8e:	1ad2      	subs	r2, r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	619a      	str	r2, [r3, #24]
 8002b94:	e002      	b.n	8002b9c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d123      	bne.n	8002bec <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bbe:	833b      	strh	r3, [r7, #24]
 8002bc0:	8b3b      	ldrh	r3, [r7, #24]
 8002bc2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002bc6:	833b      	strh	r3, [r7, #24]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	441a      	add	r2, r3
 8002bd6:	8b3b      	ldrh	r3, [r7, #24]
 8002bd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002bdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002be0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002be4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bec:	88fb      	ldrh	r3, [r7, #6]
 8002bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d01f      	beq.n	8002c36 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c10:	82fb      	strh	r3, [r7, #22]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	461a      	mov	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	441a      	add	r2, r3
 8002c20:	8afb      	ldrh	r3, [r7, #22]
 8002c22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c2e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c36:	8b7b      	ldrh	r3, [r7, #26]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 8087 	beq.w	8002d4c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	6959      	ldr	r1, [r3, #20]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	891a      	ldrh	r2, [r3, #8]
 8002c4a:	8b7b      	ldrh	r3, [r7, #26]
 8002c4c:	f004 fef0 	bl	8007a30 <USB_ReadPMA>
 8002c50:	e07c      	b.n	8002d4c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4413      	add	r3, r2
 8002c66:	3306      	adds	r3, #6
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	6812      	ldr	r2, [r2, #0]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c7a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	699a      	ldr	r2, [r3, #24]
 8002c80:	8b7b      	ldrh	r3, [r7, #26]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d306      	bcc.n	8002c94 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	699a      	ldr	r2, [r3, #24]
 8002c8a:	8b7b      	ldrh	r3, [r7, #26]
 8002c8c:	1ad2      	subs	r2, r2, r3
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	619a      	str	r2, [r3, #24]
 8002c92:	e002      	b.n	8002c9a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2200      	movs	r2, #0
 8002c98:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d123      	bne.n	8002cea <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002cb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cbc:	83fb      	strh	r3, [r7, #30]
 8002cbe:	8bfb      	ldrh	r3, [r7, #30]
 8002cc0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002cc4:	83fb      	strh	r3, [r7, #30]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	441a      	add	r2, r3
 8002cd4:	8bfb      	ldrh	r3, [r7, #30]
 8002cd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002cda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002cde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ce2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d11f      	bne.n	8002d34 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d0e:	83bb      	strh	r3, [r7, #28]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	441a      	add	r2, r3
 8002d1e:	8bbb      	ldrh	r3, [r7, #28]
 8002d20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d2c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d34:	8b7b      	ldrh	r3, [r7, #26]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d008      	beq.n	8002d4c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6818      	ldr	r0, [r3, #0]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	6959      	ldr	r1, [r3, #20]
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	895a      	ldrh	r2, [r3, #10]
 8002d46:	8b7b      	ldrh	r3, [r7, #26]
 8002d48:	f004 fe72 	bl	8007a30 <USB_ReadPMA>
    }
  }

  return count;
 8002d4c:	8b7b      	ldrh	r3, [r7, #26]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3720      	adds	r7, #32
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b0a4      	sub	sp, #144	@ 0x90
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	60f8      	str	r0, [r7, #12]
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	4613      	mov	r3, r2
 8002d62:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d64:	88fb      	ldrh	r3, [r7, #6]
 8002d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 81dd 	beq.w	800312a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	4413      	add	r3, r2
 8002d84:	3302      	adds	r3, #2
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	6812      	ldr	r2, [r2, #0]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d98:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	699a      	ldr	r2, [r3, #24]
 8002da0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d907      	bls.n	8002db8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	699a      	ldr	r2, [r3, #24]
 8002dac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002db0:	1ad2      	subs	r2, r2, r3
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	619a      	str	r2, [r3, #24]
 8002db6:	e002      	b.n	8002dbe <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f040 80b9 	bne.w	8002f3a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	785b      	ldrb	r3, [r3, #1]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d126      	bne.n	8002e1e <HAL_PCD_EP_DB_Transmit+0xc8>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	461a      	mov	r2, r3
 8002de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002de4:	4413      	add	r3, r2
 8002de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	011a      	lsls	r2, r3, #4
 8002dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002df0:	4413      	add	r3, r2
 8002df2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002df6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e06:	801a      	strh	r2, [r3, #0]
 8002e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e0a:	881b      	ldrh	r3, [r3, #0]
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e1a:	801a      	strh	r2, [r3, #0]
 8002e1c:	e01a      	b.n	8002e54 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	785b      	ldrb	r3, [r3, #1]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d116      	bne.n	8002e54 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e3a:	4413      	add	r3, r2
 8002e3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	011a      	lsls	r2, r3, #4
 8002e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e46:	4413      	add	r3, r2
 8002e48:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002e4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e50:	2200      	movs	r2, #0
 8002e52:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	785b      	ldrb	r3, [r3, #1]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d126      	bne.n	8002eb0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	61fb      	str	r3, [r7, #28]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	461a      	mov	r2, r3
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	4413      	add	r3, r2
 8002e78:	61fb      	str	r3, [r7, #28]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	011a      	lsls	r2, r3, #4
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	4413      	add	r3, r2
 8002e84:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002e88:	61bb      	str	r3, [r7, #24]
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	801a      	strh	r2, [r3, #0]
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	801a      	strh	r2, [r3, #0]
 8002eae:	e017      	b.n	8002ee0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	785b      	ldrb	r3, [r3, #1]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d113      	bne.n	8002ee0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec6:	4413      	add	r3, r2
 8002ec8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	011a      	lsls	r2, r3, #4
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002ed8:	623b      	str	r3, [r7, #32]
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	2200      	movs	r2, #0
 8002ede:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f006 fce5 	bl	80098b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 82fc 	beq.w	80034f0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f12:	82fb      	strh	r3, [r7, #22]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	441a      	add	r2, r3
 8002f22:	8afb      	ldrh	r3, [r7, #22]
 8002f24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	8013      	strh	r3, [r2, #0]
 8002f38:	e2da      	b.n	80034f0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f3a:	88fb      	ldrh	r3, [r7, #6]
 8002f3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d021      	beq.n	8002f88 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f5e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	441a      	add	r2, r3
 8002f70:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002f74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	f040 82ae 	bne.w	80034f0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	695a      	ldr	r2, [r3, #20]
 8002f98:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002f9c:	441a      	add	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	69da      	ldr	r2, [r3, #28]
 8002fa6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002faa:	441a      	add	r2, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	6a1a      	ldr	r2, [r3, #32]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d30b      	bcc.n	8002fd4 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	6a1a      	ldr	r2, [r3, #32]
 8002fc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fcc:	1ad2      	subs	r2, r2, r3
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	621a      	str	r2, [r3, #32]
 8002fd2:	e017      	b.n	8003004 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d108      	bne.n	8002fee <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002fdc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002fe0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002fec:	e00a      	b.n	8003004 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2200      	movs	r2, #0
 8003002:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	785b      	ldrb	r3, [r3, #1]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d165      	bne.n	80030d8 <HAL_PCD_EP_DB_Transmit+0x382>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800301a:	b29b      	uxth	r3, r3
 800301c:	461a      	mov	r2, r3
 800301e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003020:	4413      	add	r3, r2
 8003022:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	011a      	lsls	r2, r3, #4
 800302a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800302c:	4413      	add	r3, r2
 800302e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003032:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	b29b      	uxth	r3, r3
 800303a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800303e:	b29a      	uxth	r2, r3
 8003040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003042:	801a      	strh	r2, [r3, #0]
 8003044:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003048:	2b3e      	cmp	r3, #62	@ 0x3e
 800304a:	d91d      	bls.n	8003088 <HAL_PCD_EP_DB_Transmit+0x332>
 800304c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003050:	095b      	lsrs	r3, r3, #5
 8003052:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003054:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	2b00      	cmp	r3, #0
 800305e:	d102      	bne.n	8003066 <HAL_PCD_EP_DB_Transmit+0x310>
 8003060:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003062:	3b01      	subs	r3, #1
 8003064:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	b29a      	uxth	r2, r3
 800306c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800306e:	b29b      	uxth	r3, r3
 8003070:	029b      	lsls	r3, r3, #10
 8003072:	b29b      	uxth	r3, r3
 8003074:	4313      	orrs	r3, r2
 8003076:	b29b      	uxth	r3, r3
 8003078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800307c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003080:	b29a      	uxth	r2, r3
 8003082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003084:	801a      	strh	r2, [r3, #0]
 8003086:	e044      	b.n	8003112 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003088:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10a      	bne.n	80030a6 <HAL_PCD_EP_DB_Transmit+0x350>
 8003090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	b29b      	uxth	r3, r3
 8003096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800309a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800309e:	b29a      	uxth	r2, r3
 80030a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030a2:	801a      	strh	r2, [r3, #0]
 80030a4:	e035      	b.n	8003112 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80030a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030aa:	085b      	lsrs	r3, r3, #1
 80030ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <HAL_PCD_EP_DB_Transmit+0x36a>
 80030ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030bc:	3301      	adds	r3, #1
 80030be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	029b      	lsls	r3, r3, #10
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	4313      	orrs	r3, r2
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030d4:	801a      	strh	r2, [r3, #0]
 80030d6:	e01c      	b.n	8003112 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	785b      	ldrb	r3, [r3, #1]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d118      	bne.n	8003112 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030f4:	4413      	add	r3, r2
 80030f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	011a      	lsls	r2, r3, #4
 80030fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003100:	4413      	add	r3, r2
 8003102:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003106:	643b      	str	r3, [r7, #64]	@ 0x40
 8003108:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800310c:	b29a      	uxth	r2, r3
 800310e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003110:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6818      	ldr	r0, [r3, #0]
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	6959      	ldr	r1, [r3, #20]
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	891a      	ldrh	r2, [r3, #8]
 800311e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003122:	b29b      	uxth	r3, r3
 8003124:	f004 fc3f 	bl	80079a6 <USB_WritePMA>
 8003128:	e1e2      	b.n	80034f0 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003132:	b29b      	uxth	r3, r3
 8003134:	461a      	mov	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4413      	add	r3, r2
 800313e:	3306      	adds	r3, #6
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	6812      	ldr	r2, [r2, #0]
 8003146:	4413      	add	r3, r2
 8003148:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003152:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	699a      	ldr	r2, [r3, #24]
 800315a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800315e:	429a      	cmp	r2, r3
 8003160:	d307      	bcc.n	8003172 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	699a      	ldr	r2, [r3, #24]
 8003166:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800316a:	1ad2      	subs	r2, r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	619a      	str	r2, [r3, #24]
 8003170:	e002      	b.n	8003178 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2200      	movs	r2, #0
 8003176:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	2b00      	cmp	r3, #0
 800317e:	f040 80c0 	bne.w	8003302 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	785b      	ldrb	r3, [r3, #1]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d126      	bne.n	80031d8 <HAL_PCD_EP_DB_Transmit+0x482>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003198:	b29b      	uxth	r3, r3
 800319a:	461a      	mov	r2, r3
 800319c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800319e:	4413      	add	r3, r2
 80031a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	011a      	lsls	r2, r3, #4
 80031a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031aa:	4413      	add	r3, r2
 80031ac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80031b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031bc:	b29a      	uxth	r2, r3
 80031be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031c0:	801a      	strh	r2, [r3, #0]
 80031c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031d4:	801a      	strh	r2, [r3, #0]
 80031d6:	e01a      	b.n	800320e <HAL_PCD_EP_DB_Transmit+0x4b8>
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	785b      	ldrb	r3, [r3, #1]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d116      	bne.n	800320e <HAL_PCD_EP_DB_Transmit+0x4b8>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	461a      	mov	r2, r3
 80031f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031f4:	4413      	add	r3, r2
 80031f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	011a      	lsls	r2, r3, #4
 80031fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003200:	4413      	add	r3, r2
 8003202:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003206:	663b      	str	r3, [r7, #96]	@ 0x60
 8003208:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800320a:	2200      	movs	r2, #0
 800320c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	677b      	str	r3, [r7, #116]	@ 0x74
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	785b      	ldrb	r3, [r3, #1]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d12b      	bne.n	8003274 <HAL_PCD_EP_DB_Transmit+0x51e>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800322a:	b29b      	uxth	r3, r3
 800322c:	461a      	mov	r2, r3
 800322e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003230:	4413      	add	r3, r2
 8003232:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	011a      	lsls	r2, r3, #4
 800323a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800323c:	4413      	add	r3, r2
 800323e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003242:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003246:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	b29b      	uxth	r3, r3
 800324e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003252:	b29a      	uxth	r2, r3
 8003254:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003258:	801a      	strh	r2, [r3, #0]
 800325a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800325e:	881b      	ldrh	r3, [r3, #0]
 8003260:	b29b      	uxth	r3, r3
 8003262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800326a:	b29a      	uxth	r2, r3
 800326c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003270:	801a      	strh	r2, [r3, #0]
 8003272:	e017      	b.n	80032a4 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	785b      	ldrb	r3, [r3, #1]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d113      	bne.n	80032a4 <HAL_PCD_EP_DB_Transmit+0x54e>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003284:	b29b      	uxth	r3, r3
 8003286:	461a      	mov	r2, r3
 8003288:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800328a:	4413      	add	r3, r2
 800328c:	677b      	str	r3, [r7, #116]	@ 0x74
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	011a      	lsls	r2, r3, #4
 8003294:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003296:	4413      	add	r3, r2
 8003298:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800329c:	673b      	str	r3, [r7, #112]	@ 0x70
 800329e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032a0:	2200      	movs	r2, #0
 80032a2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	4619      	mov	r1, r3
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f006 fb03 	bl	80098b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80032b0:	88fb      	ldrh	r3, [r7, #6]
 80032b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f040 811a 	bne.w	80034f0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	461a      	mov	r2, r3
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032d6:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	461a      	mov	r2, r3
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	441a      	add	r2, r3
 80032e8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80032ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	8013      	strh	r3, [r2, #0]
 8003300:	e0f6      	b.n	80034f0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003302:	88fb      	ldrh	r3, [r7, #6]
 8003304:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d121      	bne.n	8003350 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	461a      	mov	r2, r3
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	b29b      	uxth	r3, r3
 800331e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003326:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	441a      	add	r2, r3
 8003338:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800333c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003340:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003344:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003348:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800334c:	b29b      	uxth	r3, r3
 800334e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003356:	2b01      	cmp	r3, #1
 8003358:	f040 80ca 	bne.w	80034f0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	695a      	ldr	r2, [r3, #20]
 8003360:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003364:	441a      	add	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	69da      	ldr	r2, [r3, #28]
 800336e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003372:	441a      	add	r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	6a1a      	ldr	r2, [r3, #32]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	429a      	cmp	r2, r3
 8003382:	d30b      	bcc.n	800339c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	6a1a      	ldr	r2, [r3, #32]
 8003390:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003394:	1ad2      	subs	r2, r2, r3
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	621a      	str	r2, [r3, #32]
 800339a:	e017      	b.n	80033cc <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d108      	bne.n	80033b6 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80033a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80033a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80033b4:	e00a      	b.n	80033cc <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2200      	movs	r2, #0
 80033c2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	785b      	ldrb	r3, [r3, #1]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d165      	bne.n	80034a6 <HAL_PCD_EP_DB_Transmit+0x750>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	461a      	mov	r2, r3
 80033ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033ee:	4413      	add	r3, r2
 80033f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	011a      	lsls	r2, r3, #4
 80033f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033fa:	4413      	add	r3, r2
 80033fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003400:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003402:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	b29b      	uxth	r3, r3
 8003408:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800340c:	b29a      	uxth	r2, r3
 800340e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003410:	801a      	strh	r2, [r3, #0]
 8003412:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003416:	2b3e      	cmp	r3, #62	@ 0x3e
 8003418:	d91d      	bls.n	8003456 <HAL_PCD_EP_DB_Transmit+0x700>
 800341a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800341e:	095b      	lsrs	r3, r3, #5
 8003420:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003422:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003426:	f003 031f 	and.w	r3, r3, #31
 800342a:	2b00      	cmp	r3, #0
 800342c:	d102      	bne.n	8003434 <HAL_PCD_EP_DB_Transmit+0x6de>
 800342e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003430:	3b01      	subs	r3, #1
 8003432:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003434:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	b29a      	uxth	r2, r3
 800343a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800343c:	b29b      	uxth	r3, r3
 800343e:	029b      	lsls	r3, r3, #10
 8003440:	b29b      	uxth	r3, r3
 8003442:	4313      	orrs	r3, r2
 8003444:	b29b      	uxth	r3, r3
 8003446:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800344a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800344e:	b29a      	uxth	r2, r3
 8003450:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003452:	801a      	strh	r2, [r3, #0]
 8003454:	e041      	b.n	80034da <HAL_PCD_EP_DB_Transmit+0x784>
 8003456:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10a      	bne.n	8003474 <HAL_PCD_EP_DB_Transmit+0x71e>
 800345e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	b29b      	uxth	r3, r3
 8003464:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003468:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800346c:	b29a      	uxth	r2, r3
 800346e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003470:	801a      	strh	r2, [r3, #0]
 8003472:	e032      	b.n	80034da <HAL_PCD_EP_DB_Transmit+0x784>
 8003474:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003478:	085b      	lsrs	r3, r3, #1
 800347a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800347c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <HAL_PCD_EP_DB_Transmit+0x738>
 8003488:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800348a:	3301      	adds	r3, #1
 800348c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800348e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	b29a      	uxth	r2, r3
 8003494:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003496:	b29b      	uxth	r3, r3
 8003498:	029b      	lsls	r3, r3, #10
 800349a:	b29b      	uxth	r3, r3
 800349c:	4313      	orrs	r3, r2
 800349e:	b29a      	uxth	r2, r3
 80034a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80034a2:	801a      	strh	r2, [r3, #0]
 80034a4:	e019      	b.n	80034da <HAL_PCD_EP_DB_Transmit+0x784>
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	785b      	ldrb	r3, [r3, #1]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d115      	bne.n	80034da <HAL_PCD_EP_DB_Transmit+0x784>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	461a      	mov	r2, r3
 80034ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034bc:	4413      	add	r3, r2
 80034be:	657b      	str	r3, [r7, #84]	@ 0x54
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	011a      	lsls	r2, r3, #4
 80034c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c8:	4413      	add	r3, r2
 80034ca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80034ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80034d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034d8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	6959      	ldr	r1, [r3, #20]
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	895a      	ldrh	r2, [r3, #10]
 80034e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	f004 fa5b 	bl	80079a6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	461a      	mov	r2, r3
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	b29b      	uxth	r3, r3
 8003502:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003506:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800350a:	82bb      	strh	r3, [r7, #20]
 800350c:	8abb      	ldrh	r3, [r7, #20]
 800350e:	f083 0310 	eor.w	r3, r3, #16
 8003512:	82bb      	strh	r3, [r7, #20]
 8003514:	8abb      	ldrh	r3, [r7, #20]
 8003516:	f083 0320 	eor.w	r3, r3, #32
 800351a:	82bb      	strh	r3, [r7, #20]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	441a      	add	r2, r3
 800352a:	8abb      	ldrh	r3, [r7, #20]
 800352c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003530:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003534:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800353c:	b29b      	uxth	r3, r3
 800353e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3790      	adds	r7, #144	@ 0x90
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800354a:	b480      	push	{r7}
 800354c:	b087      	sub	sp, #28
 800354e:	af00      	add	r7, sp, #0
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	607b      	str	r3, [r7, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	817b      	strh	r3, [r7, #10]
 8003558:	4613      	mov	r3, r2
 800355a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800355c:	897b      	ldrh	r3, [r7, #10]
 800355e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003562:	b29b      	uxth	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00b      	beq.n	8003580 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003568:	897b      	ldrh	r3, [r7, #10]
 800356a:	f003 0207 	and.w	r2, r3, #7
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	3310      	adds	r3, #16
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4413      	add	r3, r2
 800357c:	617b      	str	r3, [r7, #20]
 800357e:	e009      	b.n	8003594 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003580:	897a      	ldrh	r2, [r7, #10]
 8003582:	4613      	mov	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4413      	add	r3, r2
 8003592:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003594:	893b      	ldrh	r3, [r7, #8]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d107      	bne.n	80035aa <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2200      	movs	r2, #0
 800359e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	80da      	strh	r2, [r3, #6]
 80035a8:	e00b      	b.n	80035c2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2201      	movs	r2, #1
 80035ae:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	0c1b      	lsrs	r3, r3, #16
 80035bc:	b29a      	uxth	r2, r3
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	371c      	adds	r7, #28
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr
	...

080035d0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80035d4:	4b03      	ldr	r3, [pc, #12]	@ (80035e4 <HAL_PWR_EnableBkUpAccess+0x14>)
 80035d6:	2201      	movs	r2, #1
 80035d8:	601a      	str	r2, [r3, #0]
}
 80035da:	bf00      	nop
 80035dc:	46bd      	mov	sp, r7
 80035de:	bc80      	pop	{r7}
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	420e0020 	.word	0x420e0020

080035e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e272      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 8087 	beq.w	8003716 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003608:	4b92      	ldr	r3, [pc, #584]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 030c 	and.w	r3, r3, #12
 8003610:	2b04      	cmp	r3, #4
 8003612:	d00c      	beq.n	800362e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003614:	4b8f      	ldr	r3, [pc, #572]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 030c 	and.w	r3, r3, #12
 800361c:	2b08      	cmp	r3, #8
 800361e:	d112      	bne.n	8003646 <HAL_RCC_OscConfig+0x5e>
 8003620:	4b8c      	ldr	r3, [pc, #560]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800362c:	d10b      	bne.n	8003646 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800362e:	4b89      	ldr	r3, [pc, #548]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d06c      	beq.n	8003714 <HAL_RCC_OscConfig+0x12c>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d168      	bne.n	8003714 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e24c      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800364e:	d106      	bne.n	800365e <HAL_RCC_OscConfig+0x76>
 8003650:	4b80      	ldr	r3, [pc, #512]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a7f      	ldr	r2, [pc, #508]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003656:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	e02e      	b.n	80036bc <HAL_RCC_OscConfig+0xd4>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10c      	bne.n	8003680 <HAL_RCC_OscConfig+0x98>
 8003666:	4b7b      	ldr	r3, [pc, #492]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a7a      	ldr	r2, [pc, #488]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 800366c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	4b78      	ldr	r3, [pc, #480]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a77      	ldr	r2, [pc, #476]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003678:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	e01d      	b.n	80036bc <HAL_RCC_OscConfig+0xd4>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003688:	d10c      	bne.n	80036a4 <HAL_RCC_OscConfig+0xbc>
 800368a:	4b72      	ldr	r3, [pc, #456]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a71      	ldr	r2, [pc, #452]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003690:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	4b6f      	ldr	r3, [pc, #444]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a6e      	ldr	r2, [pc, #440]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 800369c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	e00b      	b.n	80036bc <HAL_RCC_OscConfig+0xd4>
 80036a4:	4b6b      	ldr	r3, [pc, #428]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a6a      	ldr	r2, [pc, #424]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 80036aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	4b68      	ldr	r3, [pc, #416]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a67      	ldr	r2, [pc, #412]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 80036b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d013      	beq.n	80036ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c4:	f7fd fb46 	bl	8000d54 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036cc:	f7fd fb42 	bl	8000d54 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b64      	cmp	r3, #100	@ 0x64
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e200      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036de:	4b5d      	ldr	r3, [pc, #372]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0f0      	beq.n	80036cc <HAL_RCC_OscConfig+0xe4>
 80036ea:	e014      	b.n	8003716 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ec:	f7fd fb32 	bl	8000d54 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f4:	f7fd fb2e 	bl	8000d54 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b64      	cmp	r3, #100	@ 0x64
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e1ec      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003706:	4b53      	ldr	r3, [pc, #332]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f0      	bne.n	80036f4 <HAL_RCC_OscConfig+0x10c>
 8003712:	e000      	b.n	8003716 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d063      	beq.n	80037ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003722:	4b4c      	ldr	r3, [pc, #304]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f003 030c 	and.w	r3, r3, #12
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00b      	beq.n	8003746 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800372e:	4b49      	ldr	r3, [pc, #292]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f003 030c 	and.w	r3, r3, #12
 8003736:	2b08      	cmp	r3, #8
 8003738:	d11c      	bne.n	8003774 <HAL_RCC_OscConfig+0x18c>
 800373a:	4b46      	ldr	r3, [pc, #280]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d116      	bne.n	8003774 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003746:	4b43      	ldr	r3, [pc, #268]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <HAL_RCC_OscConfig+0x176>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d001      	beq.n	800375e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e1c0      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800375e:	4b3d      	ldr	r3, [pc, #244]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	00db      	lsls	r3, r3, #3
 800376c:	4939      	ldr	r1, [pc, #228]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 800376e:	4313      	orrs	r3, r2
 8003770:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003772:	e03a      	b.n	80037ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d020      	beq.n	80037be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800377c:	4b36      	ldr	r3, [pc, #216]	@ (8003858 <HAL_RCC_OscConfig+0x270>)
 800377e:	2201      	movs	r2, #1
 8003780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003782:	f7fd fae7 	bl	8000d54 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800378a:	f7fd fae3 	bl	8000d54 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e1a1      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379c:	4b2d      	ldr	r3, [pc, #180]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0f0      	beq.n	800378a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	4927      	ldr	r1, [pc, #156]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	600b      	str	r3, [r1, #0]
 80037bc:	e015      	b.n	80037ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037be:	4b26      	ldr	r3, [pc, #152]	@ (8003858 <HAL_RCC_OscConfig+0x270>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c4:	f7fd fac6 	bl	8000d54 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037cc:	f7fd fac2 	bl	8000d54 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e180      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037de:	4b1d      	ldr	r3, [pc, #116]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d03a      	beq.n	800386c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d019      	beq.n	8003832 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037fe:	4b17      	ldr	r3, [pc, #92]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 8003800:	2201      	movs	r2, #1
 8003802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003804:	f7fd faa6 	bl	8000d54 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800380c:	f7fd faa2 	bl	8000d54 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e160      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800381e:	4b0d      	ldr	r3, [pc, #52]	@ (8003854 <HAL_RCC_OscConfig+0x26c>)
 8003820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f0      	beq.n	800380c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800382a:	2001      	movs	r0, #1
 800382c:	f000 face 	bl	8003dcc <RCC_Delay>
 8003830:	e01c      	b.n	800386c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003832:	4b0a      	ldr	r3, [pc, #40]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003838:	f7fd fa8c 	bl	8000d54 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800383e:	e00f      	b.n	8003860 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003840:	f7fd fa88 	bl	8000d54 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d908      	bls.n	8003860 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e146      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
 8003852:	bf00      	nop
 8003854:	40021000 	.word	0x40021000
 8003858:	42420000 	.word	0x42420000
 800385c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003860:	4b92      	ldr	r3, [pc, #584]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1e9      	bne.n	8003840 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 80a6 	beq.w	80039c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800387a:	2300      	movs	r3, #0
 800387c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800387e:	4b8b      	ldr	r3, [pc, #556]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10d      	bne.n	80038a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800388a:	4b88      	ldr	r3, [pc, #544]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	4a87      	ldr	r2, [pc, #540]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003894:	61d3      	str	r3, [r2, #28]
 8003896:	4b85      	ldr	r3, [pc, #532]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800389e:	60bb      	str	r3, [r7, #8]
 80038a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038a2:	2301      	movs	r3, #1
 80038a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a6:	4b82      	ldr	r3, [pc, #520]	@ (8003ab0 <HAL_RCC_OscConfig+0x4c8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d118      	bne.n	80038e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038b2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ab0 <HAL_RCC_OscConfig+0x4c8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ab0 <HAL_RCC_OscConfig+0x4c8>)
 80038b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038be:	f7fd fa49 	bl	8000d54 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038c6:	f7fd fa45 	bl	8000d54 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b64      	cmp	r3, #100	@ 0x64
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e103      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d8:	4b75      	ldr	r3, [pc, #468]	@ (8003ab0 <HAL_RCC_OscConfig+0x4c8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0f0      	beq.n	80038c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d106      	bne.n	80038fa <HAL_RCC_OscConfig+0x312>
 80038ec:	4b6f      	ldr	r3, [pc, #444]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	4a6e      	ldr	r2, [pc, #440]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 80038f2:	f043 0301 	orr.w	r3, r3, #1
 80038f6:	6213      	str	r3, [r2, #32]
 80038f8:	e02d      	b.n	8003956 <HAL_RCC_OscConfig+0x36e>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10c      	bne.n	800391c <HAL_RCC_OscConfig+0x334>
 8003902:	4b6a      	ldr	r3, [pc, #424]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	4a69      	ldr	r2, [pc, #420]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003908:	f023 0301 	bic.w	r3, r3, #1
 800390c:	6213      	str	r3, [r2, #32]
 800390e:	4b67      	ldr	r3, [pc, #412]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	4a66      	ldr	r2, [pc, #408]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003914:	f023 0304 	bic.w	r3, r3, #4
 8003918:	6213      	str	r3, [r2, #32]
 800391a:	e01c      	b.n	8003956 <HAL_RCC_OscConfig+0x36e>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	2b05      	cmp	r3, #5
 8003922:	d10c      	bne.n	800393e <HAL_RCC_OscConfig+0x356>
 8003924:	4b61      	ldr	r3, [pc, #388]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	4a60      	ldr	r2, [pc, #384]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 800392a:	f043 0304 	orr.w	r3, r3, #4
 800392e:	6213      	str	r3, [r2, #32]
 8003930:	4b5e      	ldr	r3, [pc, #376]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	4a5d      	ldr	r2, [pc, #372]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003936:	f043 0301 	orr.w	r3, r3, #1
 800393a:	6213      	str	r3, [r2, #32]
 800393c:	e00b      	b.n	8003956 <HAL_RCC_OscConfig+0x36e>
 800393e:	4b5b      	ldr	r3, [pc, #364]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	4a5a      	ldr	r2, [pc, #360]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003944:	f023 0301 	bic.w	r3, r3, #1
 8003948:	6213      	str	r3, [r2, #32]
 800394a:	4b58      	ldr	r3, [pc, #352]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	4a57      	ldr	r2, [pc, #348]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003950:	f023 0304 	bic.w	r3, r3, #4
 8003954:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d015      	beq.n	800398a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800395e:	f7fd f9f9 	bl	8000d54 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003964:	e00a      	b.n	800397c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003966:	f7fd f9f5 	bl	8000d54 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003974:	4293      	cmp	r3, r2
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e0b1      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397c:	4b4b      	ldr	r3, [pc, #300]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0ee      	beq.n	8003966 <HAL_RCC_OscConfig+0x37e>
 8003988:	e014      	b.n	80039b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800398a:	f7fd f9e3 	bl	8000d54 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003990:	e00a      	b.n	80039a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003992:	f7fd f9df 	bl	8000d54 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e09b      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a8:	4b40      	ldr	r3, [pc, #256]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1ee      	bne.n	8003992 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039b4:	7dfb      	ldrb	r3, [r7, #23]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d105      	bne.n	80039c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ba:	4b3c      	ldr	r3, [pc, #240]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	4a3b      	ldr	r2, [pc, #236]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 80039c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 8087 	beq.w	8003ade <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039d0:	4b36      	ldr	r3, [pc, #216]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 030c 	and.w	r3, r3, #12
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d061      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d146      	bne.n	8003a72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e4:	4b33      	ldr	r3, [pc, #204]	@ (8003ab4 <HAL_RCC_OscConfig+0x4cc>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ea:	f7fd f9b3 	bl	8000d54 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f2:	f7fd f9af 	bl	8000d54 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e06d      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a04:	4b29      	ldr	r3, [pc, #164]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1f0      	bne.n	80039f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a18:	d108      	bne.n	8003a2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a1a:	4b24      	ldr	r3, [pc, #144]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	4921      	ldr	r1, [pc, #132]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a19      	ldr	r1, [r3, #32]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	491b      	ldr	r1, [pc, #108]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a44:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab4 <HAL_RCC_OscConfig+0x4cc>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4a:	f7fd f983 	bl	8000d54 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a52:	f7fd f97f 	bl	8000d54 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e03d      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a64:	4b11      	ldr	r3, [pc, #68]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0f0      	beq.n	8003a52 <HAL_RCC_OscConfig+0x46a>
 8003a70:	e035      	b.n	8003ade <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a72:	4b10      	ldr	r3, [pc, #64]	@ (8003ab4 <HAL_RCC_OscConfig+0x4cc>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a78:	f7fd f96c 	bl	8000d54 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a80:	f7fd f968 	bl	8000d54 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e026      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a92:	4b06      	ldr	r3, [pc, #24]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f0      	bne.n	8003a80 <HAL_RCC_OscConfig+0x498>
 8003a9e:	e01e      	b.n	8003ade <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d107      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e019      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	40007000 	.word	0x40007000
 8003ab4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae8 <HAL_RCC_OscConfig+0x500>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d106      	bne.n	8003ada <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d001      	beq.n	8003ade <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40021000 	.word	0x40021000

08003aec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e0d0      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b00:	4b6a      	ldr	r3, [pc, #424]	@ (8003cac <HAL_RCC_ClockConfig+0x1c0>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d910      	bls.n	8003b30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0e:	4b67      	ldr	r3, [pc, #412]	@ (8003cac <HAL_RCC_ClockConfig+0x1c0>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f023 0207 	bic.w	r2, r3, #7
 8003b16:	4965      	ldr	r1, [pc, #404]	@ (8003cac <HAL_RCC_ClockConfig+0x1c0>)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1e:	4b63      	ldr	r3, [pc, #396]	@ (8003cac <HAL_RCC_ClockConfig+0x1c0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e0b8      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d020      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d005      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b48:	4b59      	ldr	r3, [pc, #356]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	4a58      	ldr	r2, [pc, #352]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b60:	4b53      	ldr	r3, [pc, #332]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	4a52      	ldr	r2, [pc, #328]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b66:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003b6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b6c:	4b50      	ldr	r3, [pc, #320]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	494d      	ldr	r1, [pc, #308]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d040      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d107      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b92:	4b47      	ldr	r3, [pc, #284]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d115      	bne.n	8003bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e07f      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d107      	bne.n	8003bba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003baa:	4b41      	ldr	r3, [pc, #260]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d109      	bne.n	8003bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e073      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bba:	4b3d      	ldr	r3, [pc, #244]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e06b      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bca:	4b39      	ldr	r3, [pc, #228]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f023 0203 	bic.w	r2, r3, #3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	4936      	ldr	r1, [pc, #216]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bdc:	f7fd f8ba 	bl	8000d54 <HAL_GetTick>
 8003be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be2:	e00a      	b.n	8003bfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be4:	f7fd f8b6 	bl	8000d54 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e053      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bfa:	4b2d      	ldr	r3, [pc, #180]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f003 020c 	and.w	r2, r3, #12
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d1eb      	bne.n	8003be4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c0c:	4b27      	ldr	r3, [pc, #156]	@ (8003cac <HAL_RCC_ClockConfig+0x1c0>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d210      	bcs.n	8003c3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1a:	4b24      	ldr	r3, [pc, #144]	@ (8003cac <HAL_RCC_ClockConfig+0x1c0>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f023 0207 	bic.w	r2, r3, #7
 8003c22:	4922      	ldr	r1, [pc, #136]	@ (8003cac <HAL_RCC_ClockConfig+0x1c0>)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2a:	4b20      	ldr	r3, [pc, #128]	@ (8003cac <HAL_RCC_ClockConfig+0x1c0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d001      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e032      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d008      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c48:	4b19      	ldr	r3, [pc, #100]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	4916      	ldr	r1, [pc, #88]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d009      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c66:	4b12      	ldr	r3, [pc, #72]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	490e      	ldr	r1, [pc, #56]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c7a:	f000 f821 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	091b      	lsrs	r3, r3, #4
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	490a      	ldr	r1, [pc, #40]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c8c:	5ccb      	ldrb	r3, [r1, r3]
 8003c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c92:	4a09      	ldr	r2, [pc, #36]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1cc>)
 8003c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c96:	4b09      	ldr	r3, [pc, #36]	@ (8003cbc <HAL_RCC_ClockConfig+0x1d0>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fd f818 	bl	8000cd0 <HAL_InitTick>

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40022000 	.word	0x40022000
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	08009e34 	.word	0x08009e34
 8003cb8:	20000000 	.word	0x20000000
 8003cbc:	2000000c 	.word	0x2000000c

08003cc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60bb      	str	r3, [r7, #8]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003cda:	4b1e      	ldr	r3, [pc, #120]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0x94>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d002      	beq.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x30>
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d003      	beq.n	8003cf6 <HAL_RCC_GetSysClockFreq+0x36>
 8003cee:	e027      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cf0:	4b19      	ldr	r3, [pc, #100]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cf2:	613b      	str	r3, [r7, #16]
      break;
 8003cf4:	e027      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	0c9b      	lsrs	r3, r3, #18
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	4a17      	ldr	r2, [pc, #92]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d00:	5cd3      	ldrb	r3, [r2, r3]
 8003d02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d010      	beq.n	8003d30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d0e:	4b11      	ldr	r3, [pc, #68]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	0c5b      	lsrs	r3, r3, #17
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	4a11      	ldr	r2, [pc, #68]	@ (8003d60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d1a:	5cd3      	ldrb	r3, [r2, r3]
 8003d1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a0d      	ldr	r2, [pc, #52]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d22:	fb03 f202 	mul.w	r2, r3, r2
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2c:	617b      	str	r3, [r7, #20]
 8003d2e:	e004      	b.n	8003d3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a0c      	ldr	r2, [pc, #48]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d34:	fb02 f303 	mul.w	r3, r2, r3
 8003d38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	613b      	str	r3, [r7, #16]
      break;
 8003d3e:	e002      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d40:	4b05      	ldr	r3, [pc, #20]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d42:	613b      	str	r3, [r7, #16]
      break;
 8003d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d46:	693b      	ldr	r3, [r7, #16]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	371c      	adds	r7, #28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bc80      	pop	{r7}
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	40021000 	.word	0x40021000
 8003d58:	007a1200 	.word	0x007a1200
 8003d5c:	08009e4c 	.word	0x08009e4c
 8003d60:	08009e5c 	.word	0x08009e5c
 8003d64:	003d0900 	.word	0x003d0900

08003d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d6c:	4b02      	ldr	r3, [pc, #8]	@ (8003d78 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr
 8003d78:	20000000 	.word	0x20000000

08003d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d80:	f7ff fff2 	bl	8003d68 <HAL_RCC_GetHCLKFreq>
 8003d84:	4602      	mov	r2, r0
 8003d86:	4b05      	ldr	r3, [pc, #20]	@ (8003d9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	0a1b      	lsrs	r3, r3, #8
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	4903      	ldr	r1, [pc, #12]	@ (8003da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d92:	5ccb      	ldrb	r3, [r1, r3]
 8003d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	08009e44 	.word	0x08009e44

08003da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003da8:	f7ff ffde 	bl	8003d68 <HAL_RCC_GetHCLKFreq>
 8003dac:	4602      	mov	r2, r0
 8003dae:	4b05      	ldr	r3, [pc, #20]	@ (8003dc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	0adb      	lsrs	r3, r3, #11
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	4903      	ldr	r1, [pc, #12]	@ (8003dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dba:	5ccb      	ldrb	r3, [r1, r3]
 8003dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	08009e44 	.word	0x08009e44

08003dcc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8003e00 <RCC_Delay+0x34>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a0a      	ldr	r2, [pc, #40]	@ (8003e04 <RCC_Delay+0x38>)
 8003dda:	fba2 2303 	umull	r2, r3, r2, r3
 8003dde:	0a5b      	lsrs	r3, r3, #9
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	fb02 f303 	mul.w	r3, r2, r3
 8003de6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003de8:	bf00      	nop
  }
  while (Delay --);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	1e5a      	subs	r2, r3, #1
 8003dee:	60fa      	str	r2, [r7, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1f9      	bne.n	8003de8 <RCC_Delay+0x1c>
}
 8003df4:	bf00      	nop
 8003df6:	bf00      	nop
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr
 8003e00:	20000000 	.word	0x20000000
 8003e04:	10624dd3 	.word	0x10624dd3

08003e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	613b      	str	r3, [r7, #16]
 8003e14:	2300      	movs	r3, #0
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d07d      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003e24:	2300      	movs	r3, #0
 8003e26:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e28:	4b4f      	ldr	r3, [pc, #316]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10d      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e34:	4b4c      	ldr	r3, [pc, #304]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	4a4b      	ldr	r2, [pc, #300]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e3e:	61d3      	str	r3, [r2, #28]
 8003e40:	4b49      	ldr	r3, [pc, #292]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e42:	69db      	ldr	r3, [r3, #28]
 8003e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e50:	4b46      	ldr	r3, [pc, #280]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d118      	bne.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e5c:	4b43      	ldr	r3, [pc, #268]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a42      	ldr	r2, [pc, #264]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e68:	f7fc ff74 	bl	8000d54 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6e:	e008      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e70:	f7fc ff70 	bl	8000d54 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b64      	cmp	r3, #100	@ 0x64
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e06d      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e82:	4b3a      	ldr	r3, [pc, #232]	@ (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0f0      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e8e:	4b36      	ldr	r3, [pc, #216]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e96:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d02e      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d027      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eac:	4b2e      	ldr	r3, [pc, #184]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eb4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003eb6:	4b2e      	ldr	r3, [pc, #184]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003eb8:	2201      	movs	r2, #1
 8003eba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ebc:	4b2c      	ldr	r3, [pc, #176]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ec2:	4a29      	ldr	r2, [pc, #164]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d014      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed2:	f7fc ff3f 	bl	8000d54 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed8:	e00a      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eda:	f7fc ff3b 	bl	8000d54 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e036      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0ee      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003efc:	4b1a      	ldr	r3, [pc, #104]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	4917      	ldr	r1, [pc, #92]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f0e:	7dfb      	ldrb	r3, [r7, #23]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d105      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f14:	4b14      	ldr	r3, [pc, #80]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	4a13      	ldr	r2, [pc, #76]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	490b      	ldr	r1, [pc, #44]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0310 	and.w	r3, r3, #16
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d008      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f4a:	4b07      	ldr	r3, [pc, #28]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	4904      	ldr	r1, [pc, #16]	@ (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	40007000 	.word	0x40007000
 8003f70:	42420440 	.word	0x42420440

08003f74 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b088      	sub	sp, #32
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	2300      	movs	r3, #0
 8003f82:	61fb      	str	r3, [r7, #28]
 8003f84:	2300      	movs	r3, #0
 8003f86:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b10      	cmp	r3, #16
 8003f94:	d00a      	beq.n	8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b10      	cmp	r3, #16
 8003f9a:	f200 808a 	bhi.w	80040b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d045      	beq.n	8004030 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d075      	beq.n	8004096 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003faa:	e082      	b.n	80040b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003fac:	4b46      	ldr	r3, [pc, #280]	@ (80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003fb2:	4b45      	ldr	r3, [pc, #276]	@ (80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d07b      	beq.n	80040b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	0c9b      	lsrs	r3, r3, #18
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	4a41      	ldr	r2, [pc, #260]	@ (80040cc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003fc8:	5cd3      	ldrb	r3, [r2, r3]
 8003fca:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d015      	beq.n	8004002 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fd6:	4b3c      	ldr	r3, [pc, #240]	@ (80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	0c5b      	lsrs	r3, r3, #17
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	4a3b      	ldr	r2, [pc, #236]	@ (80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003fe2:	5cd3      	ldrb	r3, [r2, r3]
 8003fe4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00d      	beq.n	800400c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003ff0:	4a38      	ldr	r2, [pc, #224]	@ (80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	fb02 f303 	mul.w	r3, r2, r3
 8003ffe:	61fb      	str	r3, [r7, #28]
 8004000:	e004      	b.n	800400c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	4a34      	ldr	r2, [pc, #208]	@ (80040d8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004006:	fb02 f303 	mul.w	r3, r2, r3
 800400a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800400c:	4b2e      	ldr	r3, [pc, #184]	@ (80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004014:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004018:	d102      	bne.n	8004020 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	61bb      	str	r3, [r7, #24]
      break;
 800401e:	e04a      	b.n	80040b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	4a2d      	ldr	r2, [pc, #180]	@ (80040dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004026:	fba2 2303 	umull	r2, r3, r2, r3
 800402a:	085b      	lsrs	r3, r3, #1
 800402c:	61bb      	str	r3, [r7, #24]
      break;
 800402e:	e042      	b.n	80040b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004030:	4b25      	ldr	r3, [pc, #148]	@ (80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800403c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004040:	d108      	bne.n	8004054 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800404c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004050:	61bb      	str	r3, [r7, #24]
 8004052:	e01f      	b.n	8004094 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800405a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800405e:	d109      	bne.n	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004060:	4b19      	ldr	r3, [pc, #100]	@ (80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800406c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004070:	61bb      	str	r3, [r7, #24]
 8004072:	e00f      	b.n	8004094 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800407a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800407e:	d11c      	bne.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004080:	4b11      	ldr	r3, [pc, #68]	@ (80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d016      	beq.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800408c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004090:	61bb      	str	r3, [r7, #24]
      break;
 8004092:	e012      	b.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004094:	e011      	b.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004096:	f7ff fe85 	bl	8003da4 <HAL_RCC_GetPCLK2Freq>
 800409a:	4602      	mov	r2, r0
 800409c:	4b0a      	ldr	r3, [pc, #40]	@ (80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	0b9b      	lsrs	r3, r3, #14
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	3301      	adds	r3, #1
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ae:	61bb      	str	r3, [r7, #24]
      break;
 80040b0:	e004      	b.n	80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80040b2:	bf00      	nop
 80040b4:	e002      	b.n	80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80040b6:	bf00      	nop
 80040b8:	e000      	b.n	80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80040ba:	bf00      	nop
    }
  }
  return (frequency);
 80040bc:	69bb      	ldr	r3, [r7, #24]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3720      	adds	r7, #32
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40021000 	.word	0x40021000
 80040cc:	08009e60 	.word	0x08009e60
 80040d0:	08009e70 	.word	0x08009e70
 80040d4:	007a1200 	.word	0x007a1200
 80040d8:	003d0900 	.word	0x003d0900
 80040dc:	aaaaaaab 	.word	0xaaaaaaab

080040e0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e07a      	b.n	80041ec <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	7c5b      	ldrb	r3, [r3, #17]
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d105      	bne.n	800410c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7fc fb5e 	bl	80007c8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f870 	bl	80041f8 <HAL_RTC_WaitForSynchro>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d004      	beq.n	8004128 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2204      	movs	r2, #4
 8004122:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e061      	b.n	80041ec <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f892 	bl	8004252 <RTC_EnterInitMode>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d004      	beq.n	800413e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2204      	movs	r2, #4
 8004138:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e056      	b.n	80041ec <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0207 	bic.w	r2, r2, #7
 800414c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d005      	beq.n	8004162 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004156:	4b27      	ldr	r3, [pc, #156]	@ (80041f4 <HAL_RTC_Init+0x114>)
 8004158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415a:	4a26      	ldr	r2, [pc, #152]	@ (80041f4 <HAL_RTC_Init+0x114>)
 800415c:	f023 0301 	bic.w	r3, r3, #1
 8004160:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004162:	4b24      	ldr	r3, [pc, #144]	@ (80041f4 <HAL_RTC_Init+0x114>)
 8004164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004166:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	4921      	ldr	r1, [pc, #132]	@ (80041f4 <HAL_RTC_Init+0x114>)
 8004170:	4313      	orrs	r3, r2
 8004172:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417c:	d003      	beq.n	8004186 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	e00e      	b.n	80041a4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004186:	2001      	movs	r0, #1
 8004188:	f7ff fef4 	bl	8003f74 <HAL_RCCEx_GetPeriphCLKFreq>
 800418c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d104      	bne.n	800419e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2204      	movs	r2, #4
 8004198:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e026      	b.n	80041ec <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	3b01      	subs	r3, #1
 80041a2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	0c1a      	lsrs	r2, r3, #16
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f002 020f 	and.w	r2, r2, #15
 80041b0:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	b292      	uxth	r2, r2
 80041ba:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f870 	bl	80042a2 <RTC_ExitInitMode>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d004      	beq.n	80041d2 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2204      	movs	r2, #4
 80041cc:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e00c      	b.n	80041ec <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80041ea:	2300      	movs	r3, #0
  }
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40006c00 	.word	0x40006c00

080041f8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e01d      	b.n	800424a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0208 	bic.w	r2, r2, #8
 800421c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800421e:	f7fc fd99 	bl	8000d54 <HAL_GetTick>
 8004222:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004224:	e009      	b.n	800423a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004226:	f7fc fd95 	bl	8000d54 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004234:	d901      	bls.n	800423a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e007      	b.n	800424a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f003 0308 	and.w	r3, r3, #8
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0ee      	beq.n	8004226 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800425a:	2300      	movs	r3, #0
 800425c:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800425e:	f7fc fd79 	bl	8000d54 <HAL_GetTick>
 8004262:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004264:	e009      	b.n	800427a <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004266:	f7fc fd75 	bl	8000d54 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004274:	d901      	bls.n	800427a <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e00f      	b.n	800429a <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f003 0320 	and.w	r3, r3, #32
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0ee      	beq.n	8004266 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0210 	orr.w	r2, r2, #16
 8004296:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0210 	bic.w	r2, r2, #16
 80042bc:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80042be:	f7fc fd49 	bl	8000d54 <HAL_GetTick>
 80042c2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80042c4:	e009      	b.n	80042da <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80042c6:	f7fc fd45 	bl	8000d54 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042d4:	d901      	bls.n	80042da <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e007      	b.n	80042ea <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f003 0320 	and.w	r3, r3, #32
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0ee      	beq.n	80042c6 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8004304:	4b07      	ldr	r3, [pc, #28]	@ (8004324 <HAL_RTCEx_BKUPWrite+0x30>)
 8004306:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	4413      	add	r3, r2
 8004310:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	b292      	uxth	r2, r2
 8004318:	601a      	str	r2, [r3, #0]
}
 800431a:	bf00      	nop
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr
 8004324:	40006c00 	.word	0x40006c00

08004328 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 800433a:	4b08      	ldr	r3, [pc, #32]	@ (800435c <HAL_RTCEx_BKUPRead+0x34>)
 800433c:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	4413      	add	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	b29b      	uxth	r3, r3
 800434e:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8004350:	68bb      	ldr	r3, [r7, #8]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	bc80      	pop	{r7}
 800435a:	4770      	bx	lr
 800435c:	40006c00 	.word	0x40006c00

08004360 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e042      	b.n	80043f8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d106      	bne.n	800438c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7fc fba0 	bl	8000acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2224      	movs	r2, #36	@ 0x24
 8004390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 ff6f 	bl	8005288 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695a      	ldr	r2, [r3, #20]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68da      	ldr	r2, [r3, #12]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3708      	adds	r7, #8
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e024      	b.n	800445c <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2224      	movs	r2, #36	@ 0x24
 8004416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004428:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7fc fbcc 	bl	8000bc8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08a      	sub	sp, #40	@ 0x28
 8004468:	af02      	add	r7, sp, #8
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	603b      	str	r3, [r7, #0]
 8004470:	4613      	mov	r3, r2
 8004472:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b20      	cmp	r3, #32
 8004482:	d175      	bne.n	8004570 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <HAL_UART_Transmit+0x2c>
 800448a:	88fb      	ldrh	r3, [r7, #6]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e06e      	b.n	8004572 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2221      	movs	r2, #33	@ 0x21
 800449e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044a2:	f7fc fc57 	bl	8000d54 <HAL_GetTick>
 80044a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	88fa      	ldrh	r2, [r7, #6]
 80044ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	88fa      	ldrh	r2, [r7, #6]
 80044b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044bc:	d108      	bne.n	80044d0 <HAL_UART_Transmit+0x6c>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d104      	bne.n	80044d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80044c6:	2300      	movs	r3, #0
 80044c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	61bb      	str	r3, [r7, #24]
 80044ce:	e003      	b.n	80044d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044d4:	2300      	movs	r3, #0
 80044d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044d8:	e02e      	b.n	8004538 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2200      	movs	r2, #0
 80044e2:	2180      	movs	r1, #128	@ 0x80
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 fc1a 	bl	8004d1e <UART_WaitOnFlagUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d005      	beq.n	80044fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e03a      	b.n	8004572 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10b      	bne.n	800451a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	461a      	mov	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004510:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	3302      	adds	r3, #2
 8004516:	61bb      	str	r3, [r7, #24]
 8004518:	e007      	b.n	800452a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	781a      	ldrb	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	3301      	adds	r3, #1
 8004528:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800452e:	b29b      	uxth	r3, r3
 8004530:	3b01      	subs	r3, #1
 8004532:	b29a      	uxth	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800453c:	b29b      	uxth	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1cb      	bne.n	80044da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2200      	movs	r2, #0
 800454a:	2140      	movs	r1, #64	@ 0x40
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 fbe6 	bl	8004d1e <UART_WaitOnFlagUntilTimeout>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e006      	b.n	8004572 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2220      	movs	r2, #32
 8004568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800456c:	2300      	movs	r3, #0
 800456e:	e000      	b.n	8004572 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004570:	2302      	movs	r3, #2
  }
}
 8004572:	4618      	mov	r0, r3
 8004574:	3720      	adds	r7, #32
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b084      	sub	sp, #16
 800457e:	af00      	add	r7, sp, #0
 8004580:	60f8      	str	r0, [r7, #12]
 8004582:	60b9      	str	r1, [r7, #8]
 8004584:	4613      	mov	r3, r2
 8004586:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b20      	cmp	r3, #32
 8004592:	d112      	bne.n	80045ba <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d002      	beq.n	80045a0 <HAL_UART_Receive_DMA+0x26>
 800459a:	88fb      	ldrh	r3, [r7, #6]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e00b      	b.n	80045bc <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80045aa:	88fb      	ldrh	r3, [r7, #6]
 80045ac:	461a      	mov	r2, r3
 80045ae:	68b9      	ldr	r1, [r7, #8]
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 fc0d 	bl	8004dd0 <UART_Start_Receive_DMA>
 80045b6:	4603      	mov	r3, r0
 80045b8:	e000      	b.n	80045bc <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80045ba:	2302      	movs	r3, #2
  }
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b0ba      	sub	sp, #232	@ 0xe8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80045ea:	2300      	movs	r3, #0
 80045ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004602:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10f      	bne.n	800462a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800460a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b00      	cmp	r3, #0
 8004614:	d009      	beq.n	800462a <HAL_UART_IRQHandler+0x66>
 8004616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800461a:	f003 0320 	and.w	r3, r3, #32
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fd72 	bl	800510c <UART_Receive_IT>
      return;
 8004628:	e25b      	b.n	8004ae2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800462a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 80de 	beq.w	80047f0 <HAL_UART_IRQHandler+0x22c>
 8004634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b00      	cmp	r3, #0
 800463e:	d106      	bne.n	800464e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004644:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 80d1 	beq.w	80047f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800464e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00b      	beq.n	8004672 <HAL_UART_IRQHandler+0xae>
 800465a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800465e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004662:	2b00      	cmp	r3, #0
 8004664:	d005      	beq.n	8004672 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800466a:	f043 0201 	orr.w	r2, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004676:	f003 0304 	and.w	r3, r3, #4
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00b      	beq.n	8004696 <HAL_UART_IRQHandler+0xd2>
 800467e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d005      	beq.n	8004696 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800468e:	f043 0202 	orr.w	r2, r3, #2
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00b      	beq.n	80046ba <HAL_UART_IRQHandler+0xf6>
 80046a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d005      	beq.n	80046ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b2:	f043 0204 	orr.w	r2, r3, #4
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80046ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d011      	beq.n	80046ea <HAL_UART_IRQHandler+0x126>
 80046c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d105      	bne.n	80046de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80046d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d005      	beq.n	80046ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e2:	f043 0208 	orr.w	r2, r3, #8
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 81f2 	beq.w	8004ad8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046f8:	f003 0320 	and.w	r3, r3, #32
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d008      	beq.n	8004712 <HAL_UART_IRQHandler+0x14e>
 8004700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004704:	f003 0320 	and.w	r3, r3, #32
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 fcfd 	bl	800510c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800471c:	2b00      	cmp	r3, #0
 800471e:	bf14      	ite	ne
 8004720:	2301      	movne	r3, #1
 8004722:	2300      	moveq	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	2b00      	cmp	r3, #0
 8004734:	d103      	bne.n	800473e <HAL_UART_IRQHandler+0x17a>
 8004736:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800473a:	2b00      	cmp	r3, #0
 800473c:	d04f      	beq.n	80047de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 fc07 	bl	8004f52 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800474e:	2b00      	cmp	r3, #0
 8004750:	d041      	beq.n	80047d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	3314      	adds	r3, #20
 8004758:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004760:	e853 3f00 	ldrex	r3, [r3]
 8004764:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004768:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800476c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004770:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	3314      	adds	r3, #20
 800477a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800477e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004782:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004786:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800478a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800478e:	e841 2300 	strex	r3, r2, [r1]
 8004792:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004796:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1d9      	bne.n	8004752 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d013      	beq.n	80047ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047aa:	4a7e      	ldr	r2, [pc, #504]	@ (80049a4 <HAL_UART_IRQHandler+0x3e0>)
 80047ac:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fc fd8e 	bl	80012d4 <HAL_DMA_Abort_IT>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d016      	beq.n	80047ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80047c8:	4610      	mov	r0, r2
 80047ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047cc:	e00e      	b.n	80047ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fc f96a 	bl	8000aa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d4:	e00a      	b.n	80047ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7fc f966 	bl	8000aa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047dc:	e006      	b.n	80047ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7fc f962 	bl	8000aa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80047ea:	e175      	b.n	8004ad8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ec:	bf00      	nop
    return;
 80047ee:	e173      	b.n	8004ad8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	f040 814f 	bne.w	8004a98 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047fe:	f003 0310 	and.w	r3, r3, #16
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 8148 	beq.w	8004a98 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800480c:	f003 0310 	and.w	r3, r3, #16
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 8141 	beq.w	8004a98 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004816:	2300      	movs	r3, #0
 8004818:	60bb      	str	r3, [r7, #8]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60bb      	str	r3, [r7, #8]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	60bb      	str	r3, [r7, #8]
 800482a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 80b6 	beq.w	80049a8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004848:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 8145 	beq.w	8004adc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004856:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800485a:	429a      	cmp	r2, r3
 800485c:	f080 813e 	bcs.w	8004adc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004866:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	2b20      	cmp	r3, #32
 8004870:	f000 8088 	beq.w	8004984 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	330c      	adds	r3, #12
 800487a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004882:	e853 3f00 	ldrex	r3, [r3]
 8004886:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800488a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800488e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004892:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	330c      	adds	r3, #12
 800489c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80048a0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80048ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80048b0:	e841 2300 	strex	r3, r2, [r1]
 80048b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80048b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1d9      	bne.n	8004874 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3314      	adds	r3, #20
 80048c6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048ca:	e853 3f00 	ldrex	r3, [r3]
 80048ce:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80048d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048d2:	f023 0301 	bic.w	r3, r3, #1
 80048d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3314      	adds	r3, #20
 80048e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80048e4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80048e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ea:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80048ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80048f0:	e841 2300 	strex	r3, r2, [r1]
 80048f4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80048f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1e1      	bne.n	80048c0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3314      	adds	r3, #20
 8004902:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004904:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004906:	e853 3f00 	ldrex	r3, [r3]
 800490a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800490c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800490e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004912:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3314      	adds	r3, #20
 800491c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004920:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004922:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004924:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004926:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004928:	e841 2300 	strex	r3, r2, [r1]
 800492c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800492e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1e3      	bne.n	80048fc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	330c      	adds	r3, #12
 8004948:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800494c:	e853 3f00 	ldrex	r3, [r3]
 8004950:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004952:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004954:	f023 0310 	bic.w	r3, r3, #16
 8004958:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	330c      	adds	r3, #12
 8004962:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004966:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004968:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800496c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800496e:	e841 2300 	strex	r3, r2, [r1]
 8004972:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004974:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1e3      	bne.n	8004942 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800497e:	4618      	mov	r0, r3
 8004980:	f7fc fc6c 	bl	800125c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004992:	b29b      	uxth	r3, r3
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	b29b      	uxth	r3, r3
 8004998:	4619      	mov	r1, r3
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f8b6 	bl	8004b0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049a0:	e09c      	b.n	8004adc <HAL_UART_IRQHandler+0x518>
 80049a2:	bf00      	nop
 80049a4:	08005017 	.word	0x08005017
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049bc:	b29b      	uxth	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 808e 	beq.w	8004ae0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80049c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 8089 	beq.w	8004ae0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	330c      	adds	r3, #12
 80049d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d8:	e853 3f00 	ldrex	r3, [r3]
 80049dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80049de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	330c      	adds	r3, #12
 80049ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80049f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80049f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049fa:	e841 2300 	strex	r3, r2, [r1]
 80049fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1e3      	bne.n	80049ce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	3314      	adds	r3, #20
 8004a0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a10:	e853 3f00 	ldrex	r3, [r3]
 8004a14:	623b      	str	r3, [r7, #32]
   return(result);
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	f023 0301 	bic.w	r3, r3, #1
 8004a1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3314      	adds	r3, #20
 8004a26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a2a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a32:	e841 2300 	strex	r3, r2, [r1]
 8004a36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1e3      	bne.n	8004a06 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	330c      	adds	r3, #12
 8004a52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	e853 3f00 	ldrex	r3, [r3]
 8004a5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 0310 	bic.w	r3, r3, #16
 8004a62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	330c      	adds	r3, #12
 8004a6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004a70:	61fa      	str	r2, [r7, #28]
 8004a72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a74:	69b9      	ldr	r1, [r7, #24]
 8004a76:	69fa      	ldr	r2, [r7, #28]
 8004a78:	e841 2300 	strex	r3, r2, [r1]
 8004a7c:	617b      	str	r3, [r7, #20]
   return(result);
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1e3      	bne.n	8004a4c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a8e:	4619      	mov	r1, r3
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 f83b 	bl	8004b0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a96:	e023      	b.n	8004ae0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d009      	beq.n	8004ab8 <HAL_UART_IRQHandler+0x4f4>
 8004aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 fac4 	bl	800503e <UART_Transmit_IT>
    return;
 8004ab6:	e014      	b.n	8004ae2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00e      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x51e>
 8004ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d008      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 fb03 	bl	80050dc <UART_EndTransmit_IT>
    return;
 8004ad6:	e004      	b.n	8004ae2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004ad8:	bf00      	nop
 8004ada:	e002      	b.n	8004ae2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004adc:	bf00      	nop
 8004ade:	e000      	b.n	8004ae2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ae0:	bf00      	nop
  }
}
 8004ae2:	37e8      	adds	r7, #232	@ 0xe8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr

08004afa <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bc80      	pop	{r7}
 8004b0a:	4770      	bx	lr

08004b0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	460b      	mov	r3, r1
 8004b16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bc80      	pop	{r7}
 8004b20:	4770      	bx	lr

08004b22 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b09c      	sub	sp, #112	@ 0x70
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0320 	and.w	r3, r3, #32
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d172      	bne.n	8004c24 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004b3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b40:	2200      	movs	r2, #0
 8004b42:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	330c      	adds	r3, #12
 8004b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b4e:	e853 3f00 	ldrex	r3, [r3]
 8004b52:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b56:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b5a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	330c      	adds	r3, #12
 8004b62:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004b64:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004b66:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b6c:	e841 2300 	strex	r3, r2, [r1]
 8004b70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1e5      	bne.n	8004b44 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3314      	adds	r3, #20
 8004b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b82:	e853 3f00 	ldrex	r3, [r3]
 8004b86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b8a:	f023 0301 	bic.w	r3, r3, #1
 8004b8e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	3314      	adds	r3, #20
 8004b96:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004b98:	647a      	str	r2, [r7, #68]	@ 0x44
 8004b9a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ba0:	e841 2300 	strex	r3, r2, [r1]
 8004ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1e5      	bne.n	8004b78 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	3314      	adds	r3, #20
 8004bb2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb6:	e853 3f00 	ldrex	r3, [r3]
 8004bba:	623b      	str	r3, [r7, #32]
   return(result);
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bc2:	663b      	str	r3, [r7, #96]	@ 0x60
 8004bc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3314      	adds	r3, #20
 8004bca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004bcc:	633a      	str	r2, [r7, #48]	@ 0x30
 8004bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bd4:	e841 2300 	strex	r3, r2, [r1]
 8004bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1e5      	bne.n	8004bac <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004be0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004be8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d119      	bne.n	8004c24 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	330c      	adds	r3, #12
 8004bf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	e853 3f00 	ldrex	r3, [r3]
 8004bfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 0310 	bic.w	r3, r3, #16
 8004c06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	330c      	adds	r3, #12
 8004c0e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004c10:	61fa      	str	r2, [r7, #28]
 8004c12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	69b9      	ldr	r1, [r7, #24]
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e5      	bne.n	8004bf0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c26:	2200      	movs	r2, #0
 8004c28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d106      	bne.n	8004c40 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c34:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c36:	4619      	mov	r1, r3
 8004c38:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004c3a:	f7ff ff67 	bl	8004b0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c3e:	e002      	b.n	8004c46 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004c40:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004c42:	f7fb ff3a 	bl	8000aba <HAL_UART_RxCpltCallback>
}
 8004c46:	bf00      	nop
 8004c48:	3770      	adds	r7, #112	@ 0x70
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b084      	sub	sp, #16
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d108      	bne.n	8004c7c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c6e:	085b      	lsrs	r3, r3, #1
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	4619      	mov	r1, r3
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f7ff ff49 	bl	8004b0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c7a:	e002      	b.n	8004c82 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f7ff ff3c 	bl	8004afa <HAL_UART_RxHalfCpltCallback>
}
 8004c82:	bf00      	nop
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b084      	sub	sp, #16
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	bf14      	ite	ne
 8004caa:	2301      	movne	r3, #1
 8004cac:	2300      	moveq	r3, #0
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b21      	cmp	r3, #33	@ 0x21
 8004cbc:	d108      	bne.n	8004cd0 <UART_DMAError+0x46>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004cca:	68b8      	ldr	r0, [r7, #8]
 8004ccc:	f000 f91a 	bl	8004f04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	bf14      	ite	ne
 8004cde:	2301      	movne	r3, #1
 8004ce0:	2300      	moveq	r3, #0
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b22      	cmp	r3, #34	@ 0x22
 8004cf0:	d108      	bne.n	8004d04 <UART_DMAError+0x7a>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d005      	beq.n	8004d04 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004cfe:	68b8      	ldr	r0, [r7, #8]
 8004d00:	f000 f927 	bl	8004f52 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d08:	f043 0210 	orr.w	r2, r3, #16
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d10:	68b8      	ldr	r0, [r7, #8]
 8004d12:	f7fb fec9 	bl	8000aa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d16:	bf00      	nop
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b086      	sub	sp, #24
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	60f8      	str	r0, [r7, #12]
 8004d26:	60b9      	str	r1, [r7, #8]
 8004d28:	603b      	str	r3, [r7, #0]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d2e:	e03b      	b.n	8004da8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d30:	6a3b      	ldr	r3, [r7, #32]
 8004d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d36:	d037      	beq.n	8004da8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d38:	f7fc f80c 	bl	8000d54 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	6a3a      	ldr	r2, [r7, #32]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d302      	bcc.n	8004d4e <UART_WaitOnFlagUntilTimeout+0x30>
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e03a      	b.n	8004dc8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d023      	beq.n	8004da8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2b80      	cmp	r3, #128	@ 0x80
 8004d64:	d020      	beq.n	8004da8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	2b40      	cmp	r3, #64	@ 0x40
 8004d6a:	d01d      	beq.n	8004da8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	2b08      	cmp	r3, #8
 8004d78:	d116      	bne.n	8004da8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	617b      	str	r3, [r7, #20]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	617b      	str	r3, [r7, #20]
 8004d8e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 f8de 	bl	8004f52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2208      	movs	r2, #8
 8004d9a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e00f      	b.n	8004dc8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	4013      	ands	r3, r2
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	bf0c      	ite	eq
 8004db8:	2301      	moveq	r3, #1
 8004dba:	2300      	movne	r3, #0
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	79fb      	ldrb	r3, [r7, #7]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d0b4      	beq.n	8004d30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b098      	sub	sp, #96	@ 0x60
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	88fa      	ldrh	r2, [r7, #6]
 8004de8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2222      	movs	r2, #34	@ 0x22
 8004df4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dfc:	4a3e      	ldr	r2, [pc, #248]	@ (8004ef8 <UART_Start_Receive_DMA+0x128>)
 8004dfe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e04:	4a3d      	ldr	r2, [pc, #244]	@ (8004efc <UART_Start_Receive_DMA+0x12c>)
 8004e06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e0c:	4a3c      	ldr	r2, [pc, #240]	@ (8004f00 <UART_Start_Receive_DMA+0x130>)
 8004e0e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e14:	2200      	movs	r2, #0
 8004e16:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004e18:	f107 0308 	add.w	r3, r7, #8
 8004e1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	3304      	adds	r3, #4
 8004e28:	4619      	mov	r1, r3
 8004e2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	88fb      	ldrh	r3, [r7, #6]
 8004e30:	f7fc f9b4 	bl	800119c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004e34:	2300      	movs	r3, #0
 8004e36:	613b      	str	r3, [r7, #16]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	613b      	str	r3, [r7, #16]
 8004e48:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d019      	beq.n	8004e86 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	330c      	adds	r3, #12
 8004e58:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e5c:	e853 3f00 	ldrex	r3, [r3]
 8004e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	330c      	adds	r3, #12
 8004e70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e72:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004e74:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e76:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004e78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e7a:	e841 2300 	strex	r3, r2, [r1]
 8004e7e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004e80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1e5      	bne.n	8004e52 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3314      	adds	r3, #20
 8004e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e90:	e853 3f00 	ldrex	r3, [r3]
 8004e94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e98:	f043 0301 	orr.w	r3, r3, #1
 8004e9c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3314      	adds	r3, #20
 8004ea4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004ea6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004ea8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eaa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004eac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004eae:	e841 2300 	strex	r3, r2, [r1]
 8004eb2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1e5      	bne.n	8004e86 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	3314      	adds	r3, #20
 8004ec0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	e853 3f00 	ldrex	r3, [r3]
 8004ec8:	617b      	str	r3, [r7, #20]
   return(result);
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ed0:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3314      	adds	r3, #20
 8004ed8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004eda:	627a      	str	r2, [r7, #36]	@ 0x24
 8004edc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ede:	6a39      	ldr	r1, [r7, #32]
 8004ee0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ee2:	e841 2300 	strex	r3, r2, [r1]
 8004ee6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1e5      	bne.n	8004eba <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3760      	adds	r7, #96	@ 0x60
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	08004b23 	.word	0x08004b23
 8004efc:	08004c4f 	.word	0x08004c4f
 8004f00:	08004c8b 	.word	0x08004c8b

08004f04 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b089      	sub	sp, #36	@ 0x24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	330c      	adds	r3, #12
 8004f12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	e853 3f00 	ldrex	r3, [r3]
 8004f1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004f22:	61fb      	str	r3, [r7, #28]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	330c      	adds	r3, #12
 8004f2a:	69fa      	ldr	r2, [r7, #28]
 8004f2c:	61ba      	str	r2, [r7, #24]
 8004f2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f30:	6979      	ldr	r1, [r7, #20]
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	e841 2300 	strex	r3, r2, [r1]
 8004f38:	613b      	str	r3, [r7, #16]
   return(result);
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1e5      	bne.n	8004f0c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2220      	movs	r2, #32
 8004f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004f48:	bf00      	nop
 8004f4a:	3724      	adds	r7, #36	@ 0x24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr

08004f52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b095      	sub	sp, #84	@ 0x54
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	330c      	adds	r3, #12
 8004f60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f64:	e853 3f00 	ldrex	r3, [r3]
 8004f68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	330c      	adds	r3, #12
 8004f78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f7a:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f82:	e841 2300 	strex	r3, r2, [r1]
 8004f86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1e5      	bne.n	8004f5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3314      	adds	r3, #20
 8004f94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	e853 3f00 	ldrex	r3, [r3]
 8004f9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	f023 0301 	bic.w	r3, r3, #1
 8004fa4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3314      	adds	r3, #20
 8004fac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fb6:	e841 2300 	strex	r3, r2, [r1]
 8004fba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1e5      	bne.n	8004f8e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d119      	bne.n	8004ffe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	330c      	adds	r3, #12
 8004fd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	e853 3f00 	ldrex	r3, [r3]
 8004fd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	f023 0310 	bic.w	r3, r3, #16
 8004fe0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	330c      	adds	r3, #12
 8004fe8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fea:	61ba      	str	r2, [r7, #24]
 8004fec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fee:	6979      	ldr	r1, [r7, #20]
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	e841 2300 	strex	r3, r2, [r1]
 8004ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1e5      	bne.n	8004fca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2220      	movs	r2, #32
 8005002:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800500c:	bf00      	nop
 800500e:	3754      	adds	r7, #84	@ 0x54
 8005010:	46bd      	mov	sp, r7
 8005012:	bc80      	pop	{r7}
 8005014:	4770      	bx	lr

08005016 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b084      	sub	sp, #16
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005022:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f7fb fd39 	bl	8000aa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005036:	bf00      	nop
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800503e:	b480      	push	{r7}
 8005040:	b085      	sub	sp, #20
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b21      	cmp	r3, #33	@ 0x21
 8005050:	d13e      	bne.n	80050d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800505a:	d114      	bne.n	8005086 <UART_Transmit_IT+0x48>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d110      	bne.n	8005086 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	461a      	mov	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005078:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	1c9a      	adds	r2, r3, #2
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	621a      	str	r2, [r3, #32]
 8005084:	e008      	b.n	8005098 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	1c59      	adds	r1, r3, #1
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6211      	str	r1, [r2, #32]
 8005090:	781a      	ldrb	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800509c:	b29b      	uxth	r3, r3
 800509e:	3b01      	subs	r3, #1
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	4619      	mov	r1, r3
 80050a6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10f      	bne.n	80050cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80050ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050cc:	2300      	movs	r3, #0
 80050ce:	e000      	b.n	80050d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050d0:	2302      	movs	r3, #2
  }
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bc80      	pop	{r7}
 80050da:	4770      	bx	lr

080050dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68da      	ldr	r2, [r3, #12]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7ff fcf3 	bl	8004ae8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08c      	sub	sp, #48	@ 0x30
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b22      	cmp	r3, #34	@ 0x22
 800511e:	f040 80ae 	bne.w	800527e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800512a:	d117      	bne.n	800515c <UART_Receive_IT+0x50>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d113      	bne.n	800515c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005134:	2300      	movs	r3, #0
 8005136:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800513c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	b29b      	uxth	r3, r3
 8005146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800514a:	b29a      	uxth	r2, r3
 800514c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005154:	1c9a      	adds	r2, r3, #2
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	629a      	str	r2, [r3, #40]	@ 0x28
 800515a:	e026      	b.n	80051aa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005160:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005162:	2300      	movs	r3, #0
 8005164:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800516e:	d007      	beq.n	8005180 <UART_Receive_IT+0x74>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10a      	bne.n	800518e <UART_Receive_IT+0x82>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d106      	bne.n	800518e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	b2da      	uxtb	r2, r3
 8005188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800518a:	701a      	strb	r2, [r3, #0]
 800518c:	e008      	b.n	80051a0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	b2db      	uxtb	r3, r3
 8005196:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800519a:	b2da      	uxtb	r2, r3
 800519c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800519e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	3b01      	subs	r3, #1
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	4619      	mov	r1, r3
 80051b8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d15d      	bne.n	800527a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68da      	ldr	r2, [r3, #12]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0220 	bic.w	r2, r2, #32
 80051cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68da      	ldr	r2, [r3, #12]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	695a      	ldr	r2, [r3, #20]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0201 	bic.w	r2, r2, #1
 80051ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2220      	movs	r2, #32
 80051f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005200:	2b01      	cmp	r3, #1
 8005202:	d135      	bne.n	8005270 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	330c      	adds	r3, #12
 8005210:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	e853 3f00 	ldrex	r3, [r3]
 8005218:	613b      	str	r3, [r7, #16]
   return(result);
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f023 0310 	bic.w	r3, r3, #16
 8005220:	627b      	str	r3, [r7, #36]	@ 0x24
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	330c      	adds	r3, #12
 8005228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800522a:	623a      	str	r2, [r7, #32]
 800522c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522e:	69f9      	ldr	r1, [r7, #28]
 8005230:	6a3a      	ldr	r2, [r7, #32]
 8005232:	e841 2300 	strex	r3, r2, [r1]
 8005236:	61bb      	str	r3, [r7, #24]
   return(result);
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1e5      	bne.n	800520a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0310 	and.w	r3, r3, #16
 8005248:	2b10      	cmp	r3, #16
 800524a:	d10a      	bne.n	8005262 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800524c:	2300      	movs	r3, #0
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005266:	4619      	mov	r1, r3
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7ff fc4f 	bl	8004b0c <HAL_UARTEx_RxEventCallback>
 800526e:	e002      	b.n	8005276 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7fb fc22 	bl	8000aba <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	e002      	b.n	8005280 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800527a:	2300      	movs	r3, #0
 800527c:	e000      	b.n	8005280 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800527e:	2302      	movs	r3, #2
  }
}
 8005280:	4618      	mov	r0, r3
 8005282:	3730      	adds	r7, #48	@ 0x30
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68da      	ldr	r2, [r3, #12]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80052c2:	f023 030c 	bic.w	r3, r3, #12
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	6812      	ldr	r2, [r2, #0]
 80052ca:	68b9      	ldr	r1, [r7, #8]
 80052cc:	430b      	orrs	r3, r1
 80052ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699a      	ldr	r2, [r3, #24]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a2c      	ldr	r2, [pc, #176]	@ (800539c <UART_SetConfig+0x114>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d103      	bne.n	80052f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80052f0:	f7fe fd58 	bl	8003da4 <HAL_RCC_GetPCLK2Freq>
 80052f4:	60f8      	str	r0, [r7, #12]
 80052f6:	e002      	b.n	80052fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80052f8:	f7fe fd40 	bl	8003d7c <HAL_RCC_GetPCLK1Freq>
 80052fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	4613      	mov	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	009a      	lsls	r2, r3, #2
 8005308:	441a      	add	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	fbb2 f3f3 	udiv	r3, r2, r3
 8005314:	4a22      	ldr	r2, [pc, #136]	@ (80053a0 <UART_SetConfig+0x118>)
 8005316:	fba2 2303 	umull	r2, r3, r2, r3
 800531a:	095b      	lsrs	r3, r3, #5
 800531c:	0119      	lsls	r1, r3, #4
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	4613      	mov	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	009a      	lsls	r2, r3, #2
 8005328:	441a      	add	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	fbb2 f2f3 	udiv	r2, r2, r3
 8005334:	4b1a      	ldr	r3, [pc, #104]	@ (80053a0 <UART_SetConfig+0x118>)
 8005336:	fba3 0302 	umull	r0, r3, r3, r2
 800533a:	095b      	lsrs	r3, r3, #5
 800533c:	2064      	movs	r0, #100	@ 0x64
 800533e:	fb00 f303 	mul.w	r3, r0, r3
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	3332      	adds	r3, #50	@ 0x32
 8005348:	4a15      	ldr	r2, [pc, #84]	@ (80053a0 <UART_SetConfig+0x118>)
 800534a:	fba2 2303 	umull	r2, r3, r2, r3
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005354:	4419      	add	r1, r3
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4613      	mov	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	009a      	lsls	r2, r3, #2
 8005360:	441a      	add	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	fbb2 f2f3 	udiv	r2, r2, r3
 800536c:	4b0c      	ldr	r3, [pc, #48]	@ (80053a0 <UART_SetConfig+0x118>)
 800536e:	fba3 0302 	umull	r0, r3, r3, r2
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	2064      	movs	r0, #100	@ 0x64
 8005376:	fb00 f303 	mul.w	r3, r0, r3
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	3332      	adds	r3, #50	@ 0x32
 8005380:	4a07      	ldr	r2, [pc, #28]	@ (80053a0 <UART_SetConfig+0x118>)
 8005382:	fba2 2303 	umull	r2, r3, r2, r3
 8005386:	095b      	lsrs	r3, r3, #5
 8005388:	f003 020f 	and.w	r2, r3, #15
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	440a      	add	r2, r1
 8005392:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005394:	bf00      	nop
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40013800 	.word	0x40013800
 80053a0:	51eb851f 	.word	0x51eb851f

080053a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	4638      	mov	r0, r7
 80053ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bc80      	pop	{r7}
 80053bc:	4770      	bx	lr

080053be <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80053be:	b480      	push	{r7}
 80053c0:	b085      	sub	sp, #20
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053ce:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80053d2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bc80      	pop	{r7}
 80053e8:	4770      	bx	lr

080053ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b085      	sub	sp, #20
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053f2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80053f6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80053fe:	b29a      	uxth	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	b29b      	uxth	r3, r3
 8005404:	43db      	mvns	r3, r3
 8005406:	b29b      	uxth	r3, r3
 8005408:	4013      	ands	r3, r2
 800540a:	b29a      	uxth	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	bc80      	pop	{r7}
 800541c:	4770      	bx	lr

0800541e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	460b      	mov	r3, r1
 8005428:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	bc80      	pop	{r7}
 8005434:	4770      	bx	lr

08005436 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005436:	b480      	push	{r7}
 8005438:	b085      	sub	sp, #20
 800543a:	af00      	add	r7, sp, #0
 800543c:	60f8      	str	r0, [r7, #12]
 800543e:	4638      	mov	r0, r7
 8005440:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2201      	movs	r2, #1
 8005448:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	bc80      	pop	{r7}
 800546e:	4770      	bx	lr

08005470 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005470:	b480      	push	{r7}
 8005472:	b09d      	sub	sp, #116	@ 0x74
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	b29b      	uxth	r3, r3
 800548e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005496:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	78db      	ldrb	r3, [r3, #3]
 800549e:	2b03      	cmp	r3, #3
 80054a0:	d81f      	bhi.n	80054e2 <USB_ActivateEndpoint+0x72>
 80054a2:	a201      	add	r2, pc, #4	@ (adr r2, 80054a8 <USB_ActivateEndpoint+0x38>)
 80054a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a8:	080054b9 	.word	0x080054b9
 80054ac:	080054d5 	.word	0x080054d5
 80054b0:	080054eb 	.word	0x080054eb
 80054b4:	080054c7 	.word	0x080054c7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80054b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80054bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80054c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80054c4:	e012      	b.n	80054ec <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80054c6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80054ca:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80054ce:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80054d2:	e00b      	b.n	80054ec <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80054d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80054d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80054e0:	e004      	b.n	80054ec <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80054e8:	e000      	b.n	80054ec <USB_ActivateEndpoint+0x7c>
      break;
 80054ea:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	441a      	add	r2, r3
 80054f6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80054fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005502:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005506:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800550a:	b29b      	uxth	r3, r3
 800550c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4413      	add	r3, r2
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	b29b      	uxth	r3, r3
 800551c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005520:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005524:	b29b      	uxth	r3, r3
 8005526:	683a      	ldr	r2, [r7, #0]
 8005528:	7812      	ldrb	r2, [r2, #0]
 800552a:	4313      	orrs	r3, r2
 800552c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	441a      	add	r2, r3
 800553a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800553e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005542:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005546:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800554a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800554e:	b29b      	uxth	r3, r3
 8005550:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	7b1b      	ldrb	r3, [r3, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	f040 8178 	bne.w	800584c <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	785b      	ldrb	r3, [r3, #1]
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 8084 	beq.w	800566e <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	61bb      	str	r3, [r7, #24]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005570:	b29b      	uxth	r3, r3
 8005572:	461a      	mov	r2, r3
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	4413      	add	r3, r2
 8005578:	61bb      	str	r3, [r7, #24]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	011a      	lsls	r2, r3, #4
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	88db      	ldrh	r3, [r3, #6]
 800558e:	085b      	lsrs	r3, r3, #1
 8005590:	b29b      	uxth	r3, r3
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	b29a      	uxth	r2, r3
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	827b      	strh	r3, [r7, #18]
 80055a8:	8a7b      	ldrh	r3, [r7, #18]
 80055aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d01b      	beq.n	80055ea <USB_ActivateEndpoint+0x17a>
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055c8:	823b      	strh	r3, [r7, #16]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	441a      	add	r2, r3
 80055d4:	8a3b      	ldrh	r3, [r7, #16]
 80055d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	78db      	ldrb	r3, [r3, #3]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d020      	beq.n	8005634 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005604:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005608:	81bb      	strh	r3, [r7, #12]
 800560a:	89bb      	ldrh	r3, [r7, #12]
 800560c:	f083 0320 	eor.w	r3, r3, #32
 8005610:	81bb      	strh	r3, [r7, #12]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	441a      	add	r2, r3
 800561c:	89bb      	ldrh	r3, [r7, #12]
 800561e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005622:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005626:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800562a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800562e:	b29b      	uxth	r3, r3
 8005630:	8013      	strh	r3, [r2, #0]
 8005632:	e2d5      	b.n	8005be0 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	b29b      	uxth	r3, r3
 8005642:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005646:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800564a:	81fb      	strh	r3, [r7, #14]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	441a      	add	r2, r3
 8005656:	89fb      	ldrh	r3, [r7, #14]
 8005658:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800565c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005660:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005664:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005668:	b29b      	uxth	r3, r3
 800566a:	8013      	strh	r3, [r2, #0]
 800566c:	e2b8      	b.n	8005be0 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	633b      	str	r3, [r7, #48]	@ 0x30
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005678:	b29b      	uxth	r3, r3
 800567a:	461a      	mov	r2, r3
 800567c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567e:	4413      	add	r3, r2
 8005680:	633b      	str	r3, [r7, #48]	@ 0x30
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	011a      	lsls	r2, r3, #4
 8005688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568a:	4413      	add	r3, r2
 800568c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005690:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	88db      	ldrh	r3, [r3, #6]
 8005696:	085b      	lsrs	r3, r3, #1
 8005698:	b29b      	uxth	r3, r3
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	b29a      	uxth	r2, r3
 800569e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056a0:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	461a      	mov	r2, r3
 80056b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b2:	4413      	add	r3, r2
 80056b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	011a      	lsls	r2, r3, #4
 80056bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056be:	4413      	add	r3, r2
 80056c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80056c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80056c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d4:	801a      	strh	r2, [r3, #0]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	2b3e      	cmp	r3, #62	@ 0x3e
 80056dc:	d91d      	bls.n	800571a <USB_ActivateEndpoint+0x2aa>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	095b      	lsrs	r3, r3, #5
 80056e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	f003 031f 	and.w	r3, r3, #31
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d102      	bne.n	80056f8 <USB_ActivateEndpoint+0x288>
 80056f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056f4:	3b01      	subs	r3, #1
 80056f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005700:	b29b      	uxth	r3, r3
 8005702:	029b      	lsls	r3, r3, #10
 8005704:	b29b      	uxth	r3, r3
 8005706:	4313      	orrs	r3, r2
 8005708:	b29b      	uxth	r3, r3
 800570a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800570e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005712:	b29a      	uxth	r2, r3
 8005714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005716:	801a      	strh	r2, [r3, #0]
 8005718:	e026      	b.n	8005768 <USB_ActivateEndpoint+0x2f8>
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10a      	bne.n	8005738 <USB_ActivateEndpoint+0x2c8>
 8005722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005724:	881b      	ldrh	r3, [r3, #0]
 8005726:	b29b      	uxth	r3, r3
 8005728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800572c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005730:	b29a      	uxth	r2, r3
 8005732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005734:	801a      	strh	r2, [r3, #0]
 8005736:	e017      	b.n	8005768 <USB_ActivateEndpoint+0x2f8>
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	085b      	lsrs	r3, r3, #1
 800573e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <USB_ActivateEndpoint+0x2e2>
 800574c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800574e:	3301      	adds	r3, #1
 8005750:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	b29a      	uxth	r2, r3
 8005758:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800575a:	b29b      	uxth	r3, r3
 800575c:	029b      	lsls	r3, r3, #10
 800575e:	b29b      	uxth	r3, r3
 8005760:	4313      	orrs	r3, r2
 8005762:	b29a      	uxth	r2, r3
 8005764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005766:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005776:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005778:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d01b      	beq.n	80057b8 <USB_ActivateEndpoint+0x348>
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	b29b      	uxth	r3, r3
 800578e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005796:	843b      	strh	r3, [r7, #32]
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	441a      	add	r2, r3
 80057a2:	8c3b      	ldrh	r3, [r7, #32]
 80057a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80057b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d124      	bne.n	800580a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4413      	add	r3, r2
 80057ca:	881b      	ldrh	r3, [r3, #0]
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057d6:	83bb      	strh	r3, [r7, #28]
 80057d8:	8bbb      	ldrh	r3, [r7, #28]
 80057da:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80057de:	83bb      	strh	r3, [r7, #28]
 80057e0:	8bbb      	ldrh	r3, [r7, #28]
 80057e2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80057e6:	83bb      	strh	r3, [r7, #28]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	441a      	add	r2, r3
 80057f2:	8bbb      	ldrh	r3, [r7, #28]
 80057f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005804:	b29b      	uxth	r3, r3
 8005806:	8013      	strh	r3, [r2, #0]
 8005808:	e1ea      	b.n	8005be0 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	b29b      	uxth	r3, r3
 8005818:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800581c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005820:	83fb      	strh	r3, [r7, #30]
 8005822:	8bfb      	ldrh	r3, [r7, #30]
 8005824:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005828:	83fb      	strh	r3, [r7, #30]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	441a      	add	r2, r3
 8005834:	8bfb      	ldrh	r3, [r7, #30]
 8005836:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800583a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800583e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005846:	b29b      	uxth	r3, r3
 8005848:	8013      	strh	r3, [r2, #0]
 800584a:	e1c9      	b.n	8005be0 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	78db      	ldrb	r3, [r3, #3]
 8005850:	2b02      	cmp	r3, #2
 8005852:	d11e      	bne.n	8005892 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	4413      	add	r3, r2
 800585e:	881b      	ldrh	r3, [r3, #0]
 8005860:	b29b      	uxth	r3, r3
 8005862:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800586a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	441a      	add	r2, r3
 8005878:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800587c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005880:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005884:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800588c:	b29b      	uxth	r3, r3
 800588e:	8013      	strh	r3, [r2, #0]
 8005890:	e01d      	b.n	80058ce <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	b29b      	uxth	r3, r3
 80058a0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80058a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058a8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	441a      	add	r2, r3
 80058b6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80058ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058d8:	b29b      	uxth	r3, r3
 80058da:	461a      	mov	r2, r3
 80058dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058de:	4413      	add	r3, r2
 80058e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	011a      	lsls	r2, r3, #4
 80058e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80058f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	891b      	ldrh	r3, [r3, #8]
 80058f6:	085b      	lsrs	r3, r3, #1
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005900:	801a      	strh	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	657b      	str	r3, [r7, #84]	@ 0x54
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800590c:	b29b      	uxth	r3, r3
 800590e:	461a      	mov	r2, r3
 8005910:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005912:	4413      	add	r3, r2
 8005914:	657b      	str	r3, [r7, #84]	@ 0x54
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	011a      	lsls	r2, r3, #4
 800591c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800591e:	4413      	add	r3, r2
 8005920:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005924:	653b      	str	r3, [r7, #80]	@ 0x50
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	895b      	ldrh	r3, [r3, #10]
 800592a:	085b      	lsrs	r3, r3, #1
 800592c:	b29b      	uxth	r3, r3
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	b29a      	uxth	r2, r3
 8005932:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005934:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	785b      	ldrb	r3, [r3, #1]
 800593a:	2b00      	cmp	r3, #0
 800593c:	f040 8093 	bne.w	8005a66 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	881b      	ldrh	r3, [r3, #0]
 800594c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005950:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005954:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01b      	beq.n	8005994 <USB_ActivateEndpoint+0x524>
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	881b      	ldrh	r3, [r3, #0]
 8005968:	b29b      	uxth	r3, r3
 800596a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800596e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005972:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	441a      	add	r2, r3
 800597e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005980:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005984:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005988:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800598c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005990:	b29b      	uxth	r3, r3
 8005992:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80059a2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80059a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01b      	beq.n	80059e4 <USB_ActivateEndpoint+0x574>
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059c2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	441a      	add	r2, r3
 80059ce:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80059d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059dc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	881b      	ldrh	r3, [r3, #0]
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059fa:	873b      	strh	r3, [r7, #56]	@ 0x38
 80059fc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80059fe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005a02:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005a04:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005a06:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005a0a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	441a      	add	r2, r3
 8005a16:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005a18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a42:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	441a      	add	r2, r3
 8005a4e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005a50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	8013      	strh	r3, [r2, #0]
 8005a64:	e0bc      	b.n	8005be0 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005a76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d01d      	beq.n	8005abe <USB_ActivateEndpoint+0x64e>
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	881b      	ldrh	r3, [r3, #0]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a98:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	441a      	add	r2, r3
 8005aa6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005aaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005aae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ab2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4413      	add	r3, r2
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005ace:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d01d      	beq.n	8005b16 <USB_ActivateEndpoint+0x6a6>
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	881b      	ldrh	r3, [r3, #0]
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005af0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	441a      	add	r2, r3
 8005afe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005b02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b0e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	78db      	ldrb	r3, [r3, #3]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d024      	beq.n	8005b68 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b34:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005b38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005b3c:	f083 0320 	eor.w	r3, r3, #32
 8005b40:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	441a      	add	r2, r3
 8005b4e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005b52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	8013      	strh	r3, [r2, #0]
 8005b66:	e01d      	b.n	8005ba4 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	881b      	ldrh	r3, [r3, #0]
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b7e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	441a      	add	r2, r3
 8005b8c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005b90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	441a      	add	r2, r3
 8005bc8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005bcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005be0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3774      	adds	r7, #116	@ 0x74
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bc80      	pop	{r7}
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop

08005bf0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b08d      	sub	sp, #52	@ 0x34
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	7b1b      	ldrb	r3, [r3, #12]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f040 808e 	bne.w	8005d20 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	785b      	ldrb	r3, [r3, #1]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d044      	beq.n	8005c96 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	81bb      	strh	r3, [r7, #12]
 8005c1a:	89bb      	ldrh	r3, [r7, #12]
 8005c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d01b      	beq.n	8005c5c <USB_DeactivateEndpoint+0x6c>
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c3a:	817b      	strh	r3, [r7, #10]
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	441a      	add	r2, r3
 8005c46:	897b      	ldrh	r3, [r7, #10]
 8005c48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c54:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4413      	add	r3, r2
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c72:	813b      	strh	r3, [r7, #8]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	441a      	add	r2, r3
 8005c7e:	893b      	ldrh	r3, [r7, #8]
 8005c80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	8013      	strh	r3, [r2, #0]
 8005c94:	e192      	b.n	8005fbc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	827b      	strh	r3, [r7, #18]
 8005ca4:	8a7b      	ldrh	r3, [r7, #18]
 8005ca6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d01b      	beq.n	8005ce6 <USB_DeactivateEndpoint+0xf6>
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	881b      	ldrh	r3, [r3, #0]
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cc4:	823b      	strh	r3, [r7, #16]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	441a      	add	r2, r3
 8005cd0:	8a3b      	ldrh	r3, [r7, #16]
 8005cd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cda:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cfc:	81fb      	strh	r3, [r7, #14]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	441a      	add	r2, r3
 8005d08:	89fb      	ldrh	r3, [r7, #14]
 8005d0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	8013      	strh	r3, [r2, #0]
 8005d1e:	e14d      	b.n	8005fbc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	785b      	ldrb	r3, [r3, #1]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f040 80a5 	bne.w	8005e74 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	843b      	strh	r3, [r7, #32]
 8005d38:	8c3b      	ldrh	r3, [r7, #32]
 8005d3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d01b      	beq.n	8005d7a <USB_DeactivateEndpoint+0x18a>
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4413      	add	r3, r2
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d58:	83fb      	strh	r3, [r7, #30]
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	441a      	add	r2, r3
 8005d64:	8bfb      	ldrh	r3, [r7, #30]
 8005d66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	83bb      	strh	r3, [r7, #28]
 8005d88:	8bbb      	ldrh	r3, [r7, #28]
 8005d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d01b      	beq.n	8005dca <USB_DeactivateEndpoint+0x1da>
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005da4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005da8:	837b      	strh	r3, [r7, #26]
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	441a      	add	r2, r3
 8005db4:	8b7b      	ldrh	r3, [r7, #26]
 8005db6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dc2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4413      	add	r3, r2
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ddc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005de0:	833b      	strh	r3, [r7, #24]
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	441a      	add	r2, r3
 8005dec:	8b3b      	ldrh	r3, [r7, #24]
 8005dee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005df2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005df6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dfa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4413      	add	r3, r2
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e18:	82fb      	strh	r3, [r7, #22]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	441a      	add	r2, r3
 8005e24:	8afb      	ldrh	r3, [r7, #22]
 8005e26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e50:	82bb      	strh	r3, [r7, #20]
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	441a      	add	r2, r3
 8005e5c:	8abb      	ldrh	r3, [r7, #20]
 8005e5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	8013      	strh	r3, [r2, #0]
 8005e72:	e0a3      	b.n	8005fbc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005e82:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005e84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d01b      	beq.n	8005ec4 <USB_DeactivateEndpoint+0x2d4>
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ea2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	441a      	add	r2, r3
 8005eae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005eb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005eb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ebc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	4413      	add	r3, r2
 8005ece:	881b      	ldrh	r3, [r3, #0]
 8005ed0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005ed2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d01b      	beq.n	8005f14 <USB_DeactivateEndpoint+0x324>
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ef2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	441a      	add	r2, r3
 8005efe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005f00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f0c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f2a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	441a      	add	r2, r3
 8005f36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005f38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f62:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	441a      	add	r2, r3
 8005f6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f9a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	441a      	add	r2, r3
 8005fa6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005fa8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3734      	adds	r7, #52	@ 0x34
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bc80      	pop	{r7}
 8005fc6:	4770      	bx	lr

08005fc8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b0c2      	sub	sp, #264	@ 0x108
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fd6:	6018      	str	r0, [r3, #0]
 8005fd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fe0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005fe2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	785b      	ldrb	r3, [r3, #1]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	f040 86b7 	bne.w	8006d62 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	699a      	ldr	r2, [r3, #24]
 8006000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	429a      	cmp	r2, r3
 800600e:	d908      	bls.n	8006022 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006020:	e007      	b.n	8006032 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006026:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006032:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006036:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	7b1b      	ldrb	r3, [r3, #12]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d13a      	bne.n	80060b8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006046:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6959      	ldr	r1, [r3, #20]
 800604e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006052:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	88da      	ldrh	r2, [r3, #6]
 800605a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800605e:	b29b      	uxth	r3, r3
 8006060:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006064:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006068:	6800      	ldr	r0, [r0, #0]
 800606a:	f001 fc9c 	bl	80079a6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800606e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006072:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	613b      	str	r3, [r7, #16]
 800607a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800607e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006088:	b29b      	uxth	r3, r3
 800608a:	461a      	mov	r2, r3
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	4413      	add	r3, r2
 8006090:	613b      	str	r3, [r7, #16]
 8006092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	011a      	lsls	r2, r3, #4
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	4413      	add	r3, r2
 80060a4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80060a8:	60fb      	str	r3, [r7, #12]
 80060aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	801a      	strh	r2, [r3, #0]
 80060b4:	f000 be1f 	b.w	8006cf6 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80060b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	78db      	ldrb	r3, [r3, #3]
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	f040 8462 	bne.w	800698e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80060ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6a1a      	ldr	r2, [r3, #32]
 80060d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	f240 83df 	bls.w	80068a6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80060e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	b29b      	uxth	r3, r3
 8006106:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800610a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800610e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006116:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	441a      	add	r2, r3
 800612c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006130:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006134:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006138:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800613c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006140:	b29b      	uxth	r3, r3
 8006142:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006148:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6a1a      	ldr	r2, [r3, #32]
 8006150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006154:	1ad2      	subs	r2, r2, r3
 8006156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800615a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006166:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	b29b      	uxth	r3, r3
 8006180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 81c7 	beq.w	8006518 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800618a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800618e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	633b      	str	r3, [r7, #48]	@ 0x30
 8006196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800619a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	785b      	ldrb	r3, [r3, #1]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d177      	bne.n	8006296 <USB_EPStartXfer+0x2ce>
 80061a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	461a      	mov	r2, r3
 80061c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c6:	4413      	add	r3, r2
 80061c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	011a      	lsls	r2, r3, #4
 80061d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061da:	4413      	add	r3, r2
 80061dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80061e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80061e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f0:	801a      	strh	r2, [r3, #0]
 80061f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80061f8:	d921      	bls.n	800623e <USB_EPStartXfer+0x276>
 80061fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061fe:	095b      	lsrs	r3, r3, #5
 8006200:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006208:	f003 031f 	and.w	r3, r3, #31
 800620c:	2b00      	cmp	r3, #0
 800620e:	d104      	bne.n	800621a <USB_EPStartXfer+0x252>
 8006210:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006214:	3b01      	subs	r3, #1
 8006216:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800621a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	b29a      	uxth	r2, r3
 8006220:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006224:	b29b      	uxth	r3, r3
 8006226:	029b      	lsls	r3, r3, #10
 8006228:	b29b      	uxth	r3, r3
 800622a:	4313      	orrs	r3, r2
 800622c:	b29b      	uxth	r3, r3
 800622e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006236:	b29a      	uxth	r2, r3
 8006238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623a:	801a      	strh	r2, [r3, #0]
 800623c:	e050      	b.n	80062e0 <USB_EPStartXfer+0x318>
 800623e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10a      	bne.n	800625c <USB_EPStartXfer+0x294>
 8006246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	b29b      	uxth	r3, r3
 800624c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006250:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006254:	b29a      	uxth	r2, r3
 8006256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006258:	801a      	strh	r2, [r3, #0]
 800625a:	e041      	b.n	80062e0 <USB_EPStartXfer+0x318>
 800625c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006260:	085b      	lsrs	r3, r3, #1
 8006262:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b00      	cmp	r3, #0
 8006270:	d004      	beq.n	800627c <USB_EPStartXfer+0x2b4>
 8006272:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006276:	3301      	adds	r3, #1
 8006278:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800627c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627e:	881b      	ldrh	r3, [r3, #0]
 8006280:	b29a      	uxth	r2, r3
 8006282:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006286:	b29b      	uxth	r3, r3
 8006288:	029b      	lsls	r3, r3, #10
 800628a:	b29b      	uxth	r3, r3
 800628c:	4313      	orrs	r3, r2
 800628e:	b29a      	uxth	r2, r3
 8006290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006292:	801a      	strh	r2, [r3, #0]
 8006294:	e024      	b.n	80062e0 <USB_EPStartXfer+0x318>
 8006296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	785b      	ldrb	r3, [r3, #1]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d11c      	bne.n	80062e0 <USB_EPStartXfer+0x318>
 80062a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	461a      	mov	r2, r3
 80062b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ba:	4413      	add	r3, r2
 80062bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80062be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	011a      	lsls	r2, r3, #4
 80062cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ce:	4413      	add	r3, r2
 80062d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80062d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062da:	b29a      	uxth	r2, r3
 80062dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80062e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	895b      	ldrh	r3, [r3, #10]
 80062ec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6959      	ldr	r1, [r3, #20]
 80062fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006300:	b29b      	uxth	r3, r3
 8006302:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006306:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800630a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800630e:	6800      	ldr	r0, [r0, #0]
 8006310:	f001 fb49 	bl	80079a6 <USB_WritePMA>
            ep->xfer_buff += len;
 8006314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	695a      	ldr	r2, [r3, #20]
 8006320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006324:	441a      	add	r2, r3
 8006326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800632a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006332:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006336:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6a1a      	ldr	r2, [r3, #32]
 800633e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006342:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	429a      	cmp	r2, r3
 800634c:	d90f      	bls.n	800636e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800634e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006352:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6a1a      	ldr	r2, [r3, #32]
 800635a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800635e:	1ad2      	subs	r2, r2, r3
 8006360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	621a      	str	r2, [r3, #32]
 800636c:	e00e      	b.n	800638c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800636e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006372:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800637e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006382:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2200      	movs	r2, #0
 800638a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800638c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	785b      	ldrb	r3, [r3, #1]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d177      	bne.n	800648c <USB_EPStartXfer+0x4c4>
 800639c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	61bb      	str	r3, [r7, #24]
 80063a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	461a      	mov	r2, r3
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	4413      	add	r3, r2
 80063be:	61bb      	str	r3, [r7, #24]
 80063c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	011a      	lsls	r2, r3, #4
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	4413      	add	r3, r2
 80063d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063d6:	617b      	str	r3, [r7, #20]
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	b29b      	uxth	r3, r3
 80063de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	801a      	strh	r2, [r3, #0]
 80063e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80063ee:	d921      	bls.n	8006434 <USB_EPStartXfer+0x46c>
 80063f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f4:	095b      	lsrs	r3, r3, #5
 80063f6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80063fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063fe:	f003 031f 	and.w	r3, r3, #31
 8006402:	2b00      	cmp	r3, #0
 8006404:	d104      	bne.n	8006410 <USB_EPStartXfer+0x448>
 8006406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800640a:	3b01      	subs	r3, #1
 800640c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	b29a      	uxth	r2, r3
 8006416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800641a:	b29b      	uxth	r3, r3
 800641c:	029b      	lsls	r3, r3, #10
 800641e:	b29b      	uxth	r3, r3
 8006420:	4313      	orrs	r3, r2
 8006422:	b29b      	uxth	r3, r3
 8006424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800642c:	b29a      	uxth	r2, r3
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	801a      	strh	r2, [r3, #0]
 8006432:	e056      	b.n	80064e2 <USB_EPStartXfer+0x51a>
 8006434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10a      	bne.n	8006452 <USB_EPStartXfer+0x48a>
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	b29b      	uxth	r3, r3
 8006442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800644a:	b29a      	uxth	r2, r3
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	801a      	strh	r2, [r3, #0]
 8006450:	e047      	b.n	80064e2 <USB_EPStartXfer+0x51a>
 8006452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006456:	085b      	lsrs	r3, r3, #1
 8006458:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800645c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006460:	f003 0301 	and.w	r3, r3, #1
 8006464:	2b00      	cmp	r3, #0
 8006466:	d004      	beq.n	8006472 <USB_EPStartXfer+0x4aa>
 8006468:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800646c:	3301      	adds	r3, #1
 800646e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	b29a      	uxth	r2, r3
 8006478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800647c:	b29b      	uxth	r3, r3
 800647e:	029b      	lsls	r3, r3, #10
 8006480:	b29b      	uxth	r3, r3
 8006482:	4313      	orrs	r3, r2
 8006484:	b29a      	uxth	r2, r3
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	801a      	strh	r2, [r3, #0]
 800648a:	e02a      	b.n	80064e2 <USB_EPStartXfer+0x51a>
 800648c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006490:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	785b      	ldrb	r3, [r3, #1]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d122      	bne.n	80064e2 <USB_EPStartXfer+0x51a>
 800649c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	623b      	str	r3, [r7, #32]
 80064a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	461a      	mov	r2, r3
 80064ba:	6a3b      	ldr	r3, [r7, #32]
 80064bc:	4413      	add	r3, r2
 80064be:	623b      	str	r3, [r7, #32]
 80064c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	011a      	lsls	r2, r3, #4
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	4413      	add	r3, r2
 80064d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064d6:	61fb      	str	r3, [r7, #28]
 80064d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064dc:	b29a      	uxth	r2, r3
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80064e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	891b      	ldrh	r3, [r3, #8]
 80064ee:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6959      	ldr	r1, [r3, #20]
 80064fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006502:	b29b      	uxth	r3, r3
 8006504:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006508:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800650c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006510:	6800      	ldr	r0, [r0, #0]
 8006512:	f001 fa48 	bl	80079a6 <USB_WritePMA>
 8006516:	e3ee      	b.n	8006cf6 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800651c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	785b      	ldrb	r3, [r3, #1]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d177      	bne.n	8006618 <USB_EPStartXfer+0x650>
 8006528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800652c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006538:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006542:	b29b      	uxth	r3, r3
 8006544:	461a      	mov	r2, r3
 8006546:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006548:	4413      	add	r3, r2
 800654a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800654c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	011a      	lsls	r2, r3, #4
 800655a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800655c:	4413      	add	r3, r2
 800655e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006562:	647b      	str	r3, [r7, #68]	@ 0x44
 8006564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006566:	881b      	ldrh	r3, [r3, #0]
 8006568:	b29b      	uxth	r3, r3
 800656a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800656e:	b29a      	uxth	r2, r3
 8006570:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006572:	801a      	strh	r2, [r3, #0]
 8006574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006578:	2b3e      	cmp	r3, #62	@ 0x3e
 800657a:	d921      	bls.n	80065c0 <USB_EPStartXfer+0x5f8>
 800657c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006580:	095b      	lsrs	r3, r3, #5
 8006582:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800658a:	f003 031f 	and.w	r3, r3, #31
 800658e:	2b00      	cmp	r3, #0
 8006590:	d104      	bne.n	800659c <USB_EPStartXfer+0x5d4>
 8006592:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006596:	3b01      	subs	r3, #1
 8006598:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800659c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800659e:	881b      	ldrh	r3, [r3, #0]
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	029b      	lsls	r3, r3, #10
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	4313      	orrs	r3, r2
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065bc:	801a      	strh	r2, [r3, #0]
 80065be:	e056      	b.n	800666e <USB_EPStartXfer+0x6a6>
 80065c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10a      	bne.n	80065de <USB_EPStartXfer+0x616>
 80065c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065da:	801a      	strh	r2, [r3, #0]
 80065dc:	e047      	b.n	800666e <USB_EPStartXfer+0x6a6>
 80065de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e2:	085b      	lsrs	r3, r3, #1
 80065e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80065e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d004      	beq.n	80065fe <USB_EPStartXfer+0x636>
 80065f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80065f8:	3301      	adds	r3, #1
 80065fa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80065fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	b29a      	uxth	r2, r3
 8006604:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006608:	b29b      	uxth	r3, r3
 800660a:	029b      	lsls	r3, r3, #10
 800660c:	b29b      	uxth	r3, r3
 800660e:	4313      	orrs	r3, r2
 8006610:	b29a      	uxth	r2, r3
 8006612:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006614:	801a      	strh	r2, [r3, #0]
 8006616:	e02a      	b.n	800666e <USB_EPStartXfer+0x6a6>
 8006618:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800661c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	785b      	ldrb	r3, [r3, #1]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d122      	bne.n	800666e <USB_EPStartXfer+0x6a6>
 8006628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800662c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	653b      	str	r3, [r7, #80]	@ 0x50
 8006634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006638:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006642:	b29b      	uxth	r3, r3
 8006644:	461a      	mov	r2, r3
 8006646:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006648:	4413      	add	r3, r2
 800664a:	653b      	str	r3, [r7, #80]	@ 0x50
 800664c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006650:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	011a      	lsls	r2, r3, #4
 800665a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800665c:	4413      	add	r3, r2
 800665e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006662:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006668:	b29a      	uxth	r2, r3
 800666a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800666c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800666e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006672:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	891b      	ldrh	r3, [r3, #8]
 800667a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800667e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006682:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6959      	ldr	r1, [r3, #20]
 800668a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800668e:	b29b      	uxth	r3, r3
 8006690:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006694:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006698:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800669c:	6800      	ldr	r0, [r0, #0]
 800669e:	f001 f982 	bl	80079a6 <USB_WritePMA>
            ep->xfer_buff += len;
 80066a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	695a      	ldr	r2, [r3, #20]
 80066ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b2:	441a      	add	r2, r3
 80066b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80066c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6a1a      	ldr	r2, [r3, #32]
 80066cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d90f      	bls.n	80066fc <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80066dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6a1a      	ldr	r2, [r3, #32]
 80066e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ec:	1ad2      	subs	r2, r2, r3
 80066ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	621a      	str	r2, [r3, #32]
 80066fa:	e00e      	b.n	800671a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80066fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6a1b      	ldr	r3, [r3, #32]
 8006708:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800670c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006710:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2200      	movs	r2, #0
 8006718:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800671a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800671e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	643b      	str	r3, [r7, #64]	@ 0x40
 8006726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800672a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	785b      	ldrb	r3, [r3, #1]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d177      	bne.n	8006826 <USB_EPStartXfer+0x85e>
 8006736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800673a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006746:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006750:	b29b      	uxth	r3, r3
 8006752:	461a      	mov	r2, r3
 8006754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006756:	4413      	add	r3, r2
 8006758:	63bb      	str	r3, [r7, #56]	@ 0x38
 800675a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800675e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	011a      	lsls	r2, r3, #4
 8006768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800676a:	4413      	add	r3, r2
 800676c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006770:	637b      	str	r3, [r7, #52]	@ 0x34
 8006772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	b29b      	uxth	r3, r3
 8006778:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800677c:	b29a      	uxth	r2, r3
 800677e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006780:	801a      	strh	r2, [r3, #0]
 8006782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006786:	2b3e      	cmp	r3, #62	@ 0x3e
 8006788:	d921      	bls.n	80067ce <USB_EPStartXfer+0x806>
 800678a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800678e:	095b      	lsrs	r3, r3, #5
 8006790:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006798:	f003 031f 	and.w	r3, r3, #31
 800679c:	2b00      	cmp	r3, #0
 800679e:	d104      	bne.n	80067aa <USB_EPStartXfer+0x7e2>
 80067a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067a4:	3b01      	subs	r3, #1
 80067a6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80067aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	029b      	lsls	r3, r3, #10
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	4313      	orrs	r3, r2
 80067bc:	b29b      	uxth	r3, r3
 80067be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ca:	801a      	strh	r2, [r3, #0]
 80067cc:	e050      	b.n	8006870 <USB_EPStartXfer+0x8a8>
 80067ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10a      	bne.n	80067ec <USB_EPStartXfer+0x824>
 80067d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067d8:	881b      	ldrh	r3, [r3, #0]
 80067da:	b29b      	uxth	r3, r3
 80067dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067e8:	801a      	strh	r2, [r3, #0]
 80067ea:	e041      	b.n	8006870 <USB_EPStartXfer+0x8a8>
 80067ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f0:	085b      	lsrs	r3, r3, #1
 80067f2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80067f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d004      	beq.n	800680c <USB_EPStartXfer+0x844>
 8006802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006806:	3301      	adds	r3, #1
 8006808:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800680c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800680e:	881b      	ldrh	r3, [r3, #0]
 8006810:	b29a      	uxth	r2, r3
 8006812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006816:	b29b      	uxth	r3, r3
 8006818:	029b      	lsls	r3, r3, #10
 800681a:	b29b      	uxth	r3, r3
 800681c:	4313      	orrs	r3, r2
 800681e:	b29a      	uxth	r2, r3
 8006820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006822:	801a      	strh	r2, [r3, #0]
 8006824:	e024      	b.n	8006870 <USB_EPStartXfer+0x8a8>
 8006826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800682a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	785b      	ldrb	r3, [r3, #1]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d11c      	bne.n	8006870 <USB_EPStartXfer+0x8a8>
 8006836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800683a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006844:	b29b      	uxth	r3, r3
 8006846:	461a      	mov	r2, r3
 8006848:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800684a:	4413      	add	r3, r2
 800684c:	643b      	str	r3, [r7, #64]	@ 0x40
 800684e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006852:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	011a      	lsls	r2, r3, #4
 800685c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800685e:	4413      	add	r3, r2
 8006860:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006864:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686a:	b29a      	uxth	r2, r3
 800686c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800686e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	895b      	ldrh	r3, [r3, #10]
 800687c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6959      	ldr	r1, [r3, #20]
 800688c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006890:	b29b      	uxth	r3, r3
 8006892:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006896:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800689a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800689e:	6800      	ldr	r0, [r0, #0]
 80068a0:	f001 f881 	bl	80079a6 <USB_WritePMA>
 80068a4:	e227      	b.n	8006cf6 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80068a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80068b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	881b      	ldrh	r3, [r3, #0]
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80068d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068dc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80068e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	441a      	add	r2, r3
 80068fa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80068fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006902:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800690a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800690e:	b29b      	uxth	r3, r3
 8006910:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006912:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006916:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800691e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006922:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800692c:	b29b      	uxth	r3, r3
 800692e:	461a      	mov	r2, r3
 8006930:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006932:	4413      	add	r3, r2
 8006934:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800693a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	011a      	lsls	r2, r3, #4
 8006944:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006946:	4413      	add	r3, r2
 8006948:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800694c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800694e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006952:	b29a      	uxth	r2, r3
 8006954:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006956:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800695c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	891b      	ldrh	r3, [r3, #8]
 8006964:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800696c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6959      	ldr	r1, [r3, #20]
 8006974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006978:	b29b      	uxth	r3, r3
 800697a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800697e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006982:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006986:	6800      	ldr	r0, [r0, #0]
 8006988:	f001 f80d 	bl	80079a6 <USB_WritePMA>
 800698c:	e1b3      	b.n	8006cf6 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800698e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6a1a      	ldr	r2, [r3, #32]
 800699a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800699e:	1ad2      	subs	r2, r2, r3
 80069a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80069ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	881b      	ldrh	r3, [r3, #0]
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f000 80c6 	beq.w	8006b60 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80069d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	673b      	str	r3, [r7, #112]	@ 0x70
 80069e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	785b      	ldrb	r3, [r3, #1]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d177      	bne.n	8006ae0 <USB_EPStartXfer+0xb18>
 80069f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a10:	4413      	add	r3, r2
 8006a12:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	011a      	lsls	r2, r3, #4
 8006a22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a24:	4413      	add	r3, r2
 8006a26:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a2e:	881b      	ldrh	r3, [r3, #0]
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a3a:	801a      	strh	r2, [r3, #0]
 8006a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a40:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a42:	d921      	bls.n	8006a88 <USB_EPStartXfer+0xac0>
 8006a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a48:	095b      	lsrs	r3, r3, #5
 8006a4a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a52:	f003 031f 	and.w	r3, r3, #31
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d104      	bne.n	8006a64 <USB_EPStartXfer+0xa9c>
 8006a5a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006a64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a66:	881b      	ldrh	r3, [r3, #0]
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	029b      	lsls	r3, r3, #10
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	4313      	orrs	r3, r2
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a84:	801a      	strh	r2, [r3, #0]
 8006a86:	e050      	b.n	8006b2a <USB_EPStartXfer+0xb62>
 8006a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d10a      	bne.n	8006aa6 <USB_EPStartXfer+0xade>
 8006a90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a92:	881b      	ldrh	r3, [r3, #0]
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006aa2:	801a      	strh	r2, [r3, #0]
 8006aa4:	e041      	b.n	8006b2a <USB_EPStartXfer+0xb62>
 8006aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aaa:	085b      	lsrs	r3, r3, #1
 8006aac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d004      	beq.n	8006ac6 <USB_EPStartXfer+0xafe>
 8006abc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006ac6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	029b      	lsls	r3, r3, #10
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006adc:	801a      	strh	r2, [r3, #0]
 8006ade:	e024      	b.n	8006b2a <USB_EPStartXfer+0xb62>
 8006ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	785b      	ldrb	r3, [r3, #1]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d11c      	bne.n	8006b2a <USB_EPStartXfer+0xb62>
 8006af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	461a      	mov	r2, r3
 8006b02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b04:	4413      	add	r3, r2
 8006b06:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	011a      	lsls	r2, r3, #4
 8006b16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b18:	4413      	add	r3, r2
 8006b1a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b28:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006b2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	895b      	ldrh	r3, [r3, #10]
 8006b36:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6959      	ldr	r1, [r3, #20]
 8006b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006b50:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006b54:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006b58:	6800      	ldr	r0, [r0, #0]
 8006b5a:	f000 ff24 	bl	80079a6 <USB_WritePMA>
 8006b5e:	e0ca      	b.n	8006cf6 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	785b      	ldrb	r3, [r3, #1]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d177      	bne.n	8006c60 <USB_EPStartXfer+0xc98>
 8006b70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006b7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006b90:	4413      	add	r3, r2
 8006b92:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	011a      	lsls	r2, r3, #4
 8006ba2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006baa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006bac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bba:	801a      	strh	r2, [r3, #0]
 8006bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006bc2:	d921      	bls.n	8006c08 <USB_EPStartXfer+0xc40>
 8006bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc8:	095b      	lsrs	r3, r3, #5
 8006bca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd2:	f003 031f 	and.w	r3, r3, #31
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d104      	bne.n	8006be4 <USB_EPStartXfer+0xc1c>
 8006bda:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006bde:	3b01      	subs	r3, #1
 8006be0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006be4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006be6:	881b      	ldrh	r3, [r3, #0]
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	029b      	lsls	r3, r3, #10
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c04:	801a      	strh	r2, [r3, #0]
 8006c06:	e05c      	b.n	8006cc2 <USB_EPStartXfer+0xcfa>
 8006c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10a      	bne.n	8006c26 <USB_EPStartXfer+0xc5e>
 8006c10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c12:	881b      	ldrh	r3, [r3, #0]
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c22:	801a      	strh	r2, [r3, #0]
 8006c24:	e04d      	b.n	8006cc2 <USB_EPStartXfer+0xcfa>
 8006c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2a:	085b      	lsrs	r3, r3, #1
 8006c2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d004      	beq.n	8006c46 <USB_EPStartXfer+0xc7e>
 8006c3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006c40:	3301      	adds	r3, #1
 8006c42:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006c46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	029b      	lsls	r3, r3, #10
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	4313      	orrs	r3, r2
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c5c:	801a      	strh	r2, [r3, #0]
 8006c5e:	e030      	b.n	8006cc2 <USB_EPStartXfer+0xcfa>
 8006c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	785b      	ldrb	r3, [r3, #1]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d128      	bne.n	8006cc2 <USB_EPStartXfer+0xcfa>
 8006c70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	461a      	mov	r2, r3
 8006c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c94:	4413      	add	r3, r2
 8006c96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	011a      	lsls	r2, r3, #4
 8006ca8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006cac:	4413      	add	r3, r2
 8006cae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006cb2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006cc0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006cc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	891b      	ldrh	r3, [r3, #8]
 8006cce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6959      	ldr	r1, [r3, #20]
 8006cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006ce8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006cec:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006cf0:	6800      	ldr	r0, [r0, #0]
 8006cf2:	f000 fe58 	bl	80079a6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006cf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	881b      	ldrh	r3, [r3, #0]
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d1c:	817b      	strh	r3, [r7, #10]
 8006d1e:	897b      	ldrh	r3, [r7, #10]
 8006d20:	f083 0310 	eor.w	r3, r3, #16
 8006d24:	817b      	strh	r3, [r7, #10]
 8006d26:	897b      	ldrh	r3, [r7, #10]
 8006d28:	f083 0320 	eor.w	r3, r3, #32
 8006d2c:	817b      	strh	r3, [r7, #10]
 8006d2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	441a      	add	r2, r3
 8006d48:	897b      	ldrh	r3, [r7, #10]
 8006d4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	8013      	strh	r3, [r2, #0]
 8006d5e:	f000 bcde 	b.w	800771e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006d62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	7b1b      	ldrb	r3, [r3, #12]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f040 80bb 	bne.w	8006eea <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	699a      	ldr	r2, [r3, #24]
 8006d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d917      	bls.n	8006dc0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	699a      	ldr	r2, [r3, #24]
 8006dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db0:	1ad2      	subs	r2, r2, r3
 8006db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	619a      	str	r2, [r3, #24]
 8006dbe:	e00e      	b.n	8006dde <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006dc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006dd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006dec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006e02:	4413      	add	r3, r2
 8006e04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	011a      	lsls	r2, r3, #4
 8006e16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006e24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e36:	801a      	strh	r2, [r3, #0]
 8006e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e3e:	d924      	bls.n	8006e8a <USB_EPStartXfer+0xec2>
 8006e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e44:	095b      	lsrs	r3, r3, #5
 8006e46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e4e:	f003 031f 	and.w	r3, r3, #31
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d104      	bne.n	8006e60 <USB_EPStartXfer+0xe98>
 8006e56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	029b      	lsls	r3, r3, #10
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	4313      	orrs	r3, r2
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e84:	801a      	strh	r2, [r3, #0]
 8006e86:	f000 bc10 	b.w	80076aa <USB_EPStartXfer+0x16e2>
 8006e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10c      	bne.n	8006eac <USB_EPStartXfer+0xee4>
 8006e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e96:	881b      	ldrh	r3, [r3, #0]
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ea8:	801a      	strh	r2, [r3, #0]
 8006eaa:	e3fe      	b.n	80076aa <USB_EPStartXfer+0x16e2>
 8006eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb0:	085b      	lsrs	r3, r3, #1
 8006eb2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d004      	beq.n	8006ecc <USB_EPStartXfer+0xf04>
 8006ec2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ecc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	029b      	lsls	r3, r3, #10
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ee6:	801a      	strh	r2, [r3, #0]
 8006ee8:	e3df      	b.n	80076aa <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	78db      	ldrb	r3, [r3, #3]
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	f040 8218 	bne.w	800732c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	785b      	ldrb	r3, [r3, #1]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f040 809d 	bne.w	8007048 <USB_EPStartXfer+0x1080>
 8006f0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f32:	4413      	add	r3, r2
 8006f34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	011a      	lsls	r2, r3, #4
 8006f46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006f54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f66:	801a      	strh	r2, [r3, #0]
 8006f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f76:	d92b      	bls.n	8006fd0 <USB_EPStartXfer+0x1008>
 8006f78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	095b      	lsrs	r3, r3, #5
 8006f86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	f003 031f 	and.w	r3, r3, #31
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d104      	bne.n	8006fa8 <USB_EPStartXfer+0xfe0>
 8006f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006fa8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006fac:	881b      	ldrh	r3, [r3, #0]
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	029b      	lsls	r3, r3, #10
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006fcc:	801a      	strh	r2, [r3, #0]
 8006fce:	e070      	b.n	80070b2 <USB_EPStartXfer+0x10ea>
 8006fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10c      	bne.n	8006ffa <USB_EPStartXfer+0x1032>
 8006fe0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006ff6:	801a      	strh	r2, [r3, #0]
 8006ff8:	e05b      	b.n	80070b2 <USB_EPStartXfer+0x10ea>
 8006ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	085b      	lsrs	r3, r3, #1
 8007008:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800700c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	2b00      	cmp	r3, #0
 800701e:	d004      	beq.n	800702a <USB_EPStartXfer+0x1062>
 8007020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007024:	3301      	adds	r3, #1
 8007026:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800702a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800702e:	881b      	ldrh	r3, [r3, #0]
 8007030:	b29a      	uxth	r2, r3
 8007032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007036:	b29b      	uxth	r3, r3
 8007038:	029b      	lsls	r3, r3, #10
 800703a:	b29b      	uxth	r3, r3
 800703c:	4313      	orrs	r3, r2
 800703e:	b29a      	uxth	r2, r3
 8007040:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007044:	801a      	strh	r2, [r3, #0]
 8007046:	e034      	b.n	80070b2 <USB_EPStartXfer+0x10ea>
 8007048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800704c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	785b      	ldrb	r3, [r3, #1]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d12c      	bne.n	80070b2 <USB_EPStartXfer+0x10ea>
 8007058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800705c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800706a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007074:	b29b      	uxth	r3, r3
 8007076:	461a      	mov	r2, r3
 8007078:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800707c:	4413      	add	r3, r2
 800707e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007086:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	011a      	lsls	r2, r3, #4
 8007090:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007094:	4413      	add	r3, r2
 8007096:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800709a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800709e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80070b0:	801a      	strh	r2, [r3, #0]
 80070b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80070c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	785b      	ldrb	r3, [r3, #1]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f040 809d 	bne.w	800720c <USB_EPStartXfer+0x1244>
 80070d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80070e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	461a      	mov	r2, r3
 80070f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80070f6:	4413      	add	r3, r2
 80070f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80070fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	011a      	lsls	r2, r3, #4
 800710a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800710e:	4413      	add	r3, r2
 8007110:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007114:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007118:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800711c:	881b      	ldrh	r3, [r3, #0]
 800711e:	b29b      	uxth	r3, r3
 8007120:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007124:	b29a      	uxth	r2, r3
 8007126:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800712a:	801a      	strh	r2, [r3, #0]
 800712c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	2b3e      	cmp	r3, #62	@ 0x3e
 800713a:	d92b      	bls.n	8007194 <USB_EPStartXfer+0x11cc>
 800713c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007140:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	095b      	lsrs	r3, r3, #5
 800714a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800714e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007152:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	f003 031f 	and.w	r3, r3, #31
 800715e:	2b00      	cmp	r3, #0
 8007160:	d104      	bne.n	800716c <USB_EPStartXfer+0x11a4>
 8007162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007166:	3b01      	subs	r3, #1
 8007168:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800716c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007170:	881b      	ldrh	r3, [r3, #0]
 8007172:	b29a      	uxth	r2, r3
 8007174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007178:	b29b      	uxth	r3, r3
 800717a:	029b      	lsls	r3, r3, #10
 800717c:	b29b      	uxth	r3, r3
 800717e:	4313      	orrs	r3, r2
 8007180:	b29b      	uxth	r3, r3
 8007182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800718a:	b29a      	uxth	r2, r3
 800718c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007190:	801a      	strh	r2, [r3, #0]
 8007192:	e069      	b.n	8007268 <USB_EPStartXfer+0x12a0>
 8007194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10c      	bne.n	80071be <USB_EPStartXfer+0x11f6>
 80071a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071a8:	881b      	ldrh	r3, [r3, #0]
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071ba:	801a      	strh	r2, [r3, #0]
 80071bc:	e054      	b.n	8007268 <USB_EPStartXfer+0x12a0>
 80071be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	085b      	lsrs	r3, r3, #1
 80071cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80071d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	f003 0301 	and.w	r3, r3, #1
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d004      	beq.n	80071ee <USB_EPStartXfer+0x1226>
 80071e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071e8:	3301      	adds	r3, #1
 80071ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80071ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071f2:	881b      	ldrh	r3, [r3, #0]
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	029b      	lsls	r3, r3, #10
 80071fe:	b29b      	uxth	r3, r3
 8007200:	4313      	orrs	r3, r2
 8007202:	b29a      	uxth	r2, r3
 8007204:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007208:	801a      	strh	r2, [r3, #0]
 800720a:	e02d      	b.n	8007268 <USB_EPStartXfer+0x12a0>
 800720c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007210:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	785b      	ldrb	r3, [r3, #1]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d125      	bne.n	8007268 <USB_EPStartXfer+0x12a0>
 800721c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007220:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800722a:	b29b      	uxth	r3, r3
 800722c:	461a      	mov	r2, r3
 800722e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007232:	4413      	add	r3, r2
 8007234:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800723c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	011a      	lsls	r2, r3, #4
 8007246:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800724a:	4413      	add	r3, r2
 800724c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007250:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007258:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	b29a      	uxth	r2, r3
 8007262:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007266:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800726c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	69db      	ldr	r3, [r3, #28]
 8007274:	2b00      	cmp	r3, #0
 8007276:	f000 8218 	beq.w	80076aa <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800727a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800727e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	4413      	add	r3, r2
 8007294:	881b      	ldrh	r3, [r3, #0]
 8007296:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800729a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800729e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d005      	beq.n	80072b2 <USB_EPStartXfer+0x12ea>
 80072a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80072aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10d      	bne.n	80072ce <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80072b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80072b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f040 81f5 	bne.w	80076aa <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80072c0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80072c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f040 81ee 	bne.w	80076aa <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80072ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4413      	add	r3, r2
 80072e8:	881b      	ldrh	r3, [r3, #0]
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072f4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80072f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007306:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	441a      	add	r2, r3
 8007312:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007316:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800731a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800731e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007322:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007326:	b29b      	uxth	r3, r3
 8007328:	8013      	strh	r3, [r2, #0]
 800732a:	e1be      	b.n	80076aa <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800732c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007330:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	78db      	ldrb	r3, [r3, #3]
 8007338:	2b01      	cmp	r3, #1
 800733a:	f040 81b4 	bne.w	80076a6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800733e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007342:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	699a      	ldr	r2, [r3, #24]
 800734a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	429a      	cmp	r2, r3
 8007358:	d917      	bls.n	800738a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800735a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800735e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800736a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800736e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	699a      	ldr	r2, [r3, #24]
 8007376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800737a:	1ad2      	subs	r2, r2, r3
 800737c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007380:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	619a      	str	r2, [r3, #24]
 8007388:	e00e      	b.n	80073a8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800738a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800738e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800739a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800739e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2200      	movs	r2, #0
 80073a6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80073a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	785b      	ldrb	r3, [r3, #1]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f040 8085 	bne.w	80074c4 <USB_EPStartXfer+0x14fc>
 80073ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	461a      	mov	r2, r3
 80073da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80073de:	4413      	add	r3, r2
 80073e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	011a      	lsls	r2, r3, #4
 80073f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80073f6:	4413      	add	r3, r2
 80073f8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80073fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007400:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007404:	881b      	ldrh	r3, [r3, #0]
 8007406:	b29b      	uxth	r3, r3
 8007408:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800740c:	b29a      	uxth	r2, r3
 800740e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007412:	801a      	strh	r2, [r3, #0]
 8007414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007418:	2b3e      	cmp	r3, #62	@ 0x3e
 800741a:	d923      	bls.n	8007464 <USB_EPStartXfer+0x149c>
 800741c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007420:	095b      	lsrs	r3, r3, #5
 8007422:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800742a:	f003 031f 	and.w	r3, r3, #31
 800742e:	2b00      	cmp	r3, #0
 8007430:	d104      	bne.n	800743c <USB_EPStartXfer+0x1474>
 8007432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007436:	3b01      	subs	r3, #1
 8007438:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800743c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	b29a      	uxth	r2, r3
 8007444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007448:	b29b      	uxth	r3, r3
 800744a:	029b      	lsls	r3, r3, #10
 800744c:	b29b      	uxth	r3, r3
 800744e:	4313      	orrs	r3, r2
 8007450:	b29b      	uxth	r3, r3
 8007452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800745a:	b29a      	uxth	r2, r3
 800745c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007460:	801a      	strh	r2, [r3, #0]
 8007462:	e060      	b.n	8007526 <USB_EPStartXfer+0x155e>
 8007464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10c      	bne.n	8007486 <USB_EPStartXfer+0x14be>
 800746c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007470:	881b      	ldrh	r3, [r3, #0]
 8007472:	b29b      	uxth	r3, r3
 8007474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800747c:	b29a      	uxth	r2, r3
 800747e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007482:	801a      	strh	r2, [r3, #0]
 8007484:	e04f      	b.n	8007526 <USB_EPStartXfer+0x155e>
 8007486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800748a:	085b      	lsrs	r3, r3, #1
 800748c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	2b00      	cmp	r3, #0
 800749a:	d004      	beq.n	80074a6 <USB_EPStartXfer+0x14de>
 800749c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074a0:	3301      	adds	r3, #1
 80074a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80074a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80074aa:	881b      	ldrh	r3, [r3, #0]
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	029b      	lsls	r3, r3, #10
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	4313      	orrs	r3, r2
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80074c0:	801a      	strh	r2, [r3, #0]
 80074c2:	e030      	b.n	8007526 <USB_EPStartXfer+0x155e>
 80074c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	785b      	ldrb	r3, [r3, #1]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d128      	bne.n	8007526 <USB_EPStartXfer+0x155e>
 80074d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80074e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	461a      	mov	r2, r3
 80074f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074f8:	4413      	add	r3, r2
 80074fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80074fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007502:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	011a      	lsls	r2, r3, #4
 800750c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007510:	4413      	add	r3, r2
 8007512:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007516:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800751a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800751e:	b29a      	uxth	r2, r3
 8007520:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007524:	801a      	strh	r2, [r3, #0]
 8007526:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800752a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007538:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	785b      	ldrb	r3, [r3, #1]
 8007540:	2b00      	cmp	r3, #0
 8007542:	f040 8085 	bne.w	8007650 <USB_EPStartXfer+0x1688>
 8007546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800754a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007558:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007562:	b29b      	uxth	r3, r3
 8007564:	461a      	mov	r2, r3
 8007566:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800756a:	4413      	add	r3, r2
 800756c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	011a      	lsls	r2, r3, #4
 800757e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007582:	4413      	add	r3, r2
 8007584:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007588:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800758c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007590:	881b      	ldrh	r3, [r3, #0]
 8007592:	b29b      	uxth	r3, r3
 8007594:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007598:	b29a      	uxth	r2, r3
 800759a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800759e:	801a      	strh	r2, [r3, #0]
 80075a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80075a6:	d923      	bls.n	80075f0 <USB_EPStartXfer+0x1628>
 80075a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ac:	095b      	lsrs	r3, r3, #5
 80075ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80075b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075b6:	f003 031f 	and.w	r3, r3, #31
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d104      	bne.n	80075c8 <USB_EPStartXfer+0x1600>
 80075be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80075c2:	3b01      	subs	r3, #1
 80075c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80075c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80075cc:	881b      	ldrh	r3, [r3, #0]
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	029b      	lsls	r3, r3, #10
 80075d8:	b29b      	uxth	r3, r3
 80075da:	4313      	orrs	r3, r2
 80075dc:	b29b      	uxth	r3, r3
 80075de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80075ec:	801a      	strh	r2, [r3, #0]
 80075ee:	e05c      	b.n	80076aa <USB_EPStartXfer+0x16e2>
 80075f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10c      	bne.n	8007612 <USB_EPStartXfer+0x164a>
 80075f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80075fc:	881b      	ldrh	r3, [r3, #0]
 80075fe:	b29b      	uxth	r3, r3
 8007600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007608:	b29a      	uxth	r2, r3
 800760a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800760e:	801a      	strh	r2, [r3, #0]
 8007610:	e04b      	b.n	80076aa <USB_EPStartXfer+0x16e2>
 8007612:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007616:	085b      	lsrs	r3, r3, #1
 8007618:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800761c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007620:	f003 0301 	and.w	r3, r3, #1
 8007624:	2b00      	cmp	r3, #0
 8007626:	d004      	beq.n	8007632 <USB_EPStartXfer+0x166a>
 8007628:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800762c:	3301      	adds	r3, #1
 800762e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007632:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007636:	881b      	ldrh	r3, [r3, #0]
 8007638:	b29a      	uxth	r2, r3
 800763a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800763e:	b29b      	uxth	r3, r3
 8007640:	029b      	lsls	r3, r3, #10
 8007642:	b29b      	uxth	r3, r3
 8007644:	4313      	orrs	r3, r2
 8007646:	b29a      	uxth	r2, r3
 8007648:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800764c:	801a      	strh	r2, [r3, #0]
 800764e:	e02c      	b.n	80076aa <USB_EPStartXfer+0x16e2>
 8007650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007654:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	785b      	ldrb	r3, [r3, #1]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d124      	bne.n	80076aa <USB_EPStartXfer+0x16e2>
 8007660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007664:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800766e:	b29b      	uxth	r3, r3
 8007670:	461a      	mov	r2, r3
 8007672:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007676:	4413      	add	r3, r2
 8007678:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800767c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	011a      	lsls	r2, r3, #4
 800768a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800768e:	4413      	add	r3, r2
 8007690:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007694:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800769c:	b29a      	uxth	r2, r3
 800769e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80076a2:	801a      	strh	r2, [r3, #0]
 80076a4:	e001      	b.n	80076aa <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e03a      	b.n	8007720 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80076aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4413      	add	r3, r2
 80076c4:	881b      	ldrh	r3, [r3, #0]
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80076cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076d0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80076d4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80076d8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80076dc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80076e0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80076e4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80076e8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80076ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	441a      	add	r2, r3
 8007706:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800770a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800770e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007712:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800771a:	b29b      	uxth	r3, r3
 800771c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800772a:	b480      	push	{r7}
 800772c:	b085      	sub	sp, #20
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
 8007732:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	785b      	ldrb	r3, [r3, #1]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d020      	beq.n	800777e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4413      	add	r3, r2
 8007746:	881b      	ldrh	r3, [r3, #0]
 8007748:	b29b      	uxth	r3, r3
 800774a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800774e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007752:	81bb      	strh	r3, [r7, #12]
 8007754:	89bb      	ldrh	r3, [r7, #12]
 8007756:	f083 0310 	eor.w	r3, r3, #16
 800775a:	81bb      	strh	r3, [r7, #12]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	441a      	add	r2, r3
 8007766:	89bb      	ldrh	r3, [r7, #12]
 8007768:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800776c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007770:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007778:	b29b      	uxth	r3, r3
 800777a:	8013      	strh	r3, [r2, #0]
 800777c:	e01f      	b.n	80077be <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4413      	add	r3, r2
 8007788:	881b      	ldrh	r3, [r3, #0]
 800778a:	b29b      	uxth	r3, r3
 800778c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007794:	81fb      	strh	r3, [r7, #14]
 8007796:	89fb      	ldrh	r3, [r7, #14]
 8007798:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800779c:	81fb      	strh	r3, [r7, #14]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	441a      	add	r2, r3
 80077a8:	89fb      	ldrh	r3, [r7, #14]
 80077aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3714      	adds	r7, #20
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bc80      	pop	{r7}
 80077c8:	4770      	bx	lr

080077ca <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b087      	sub	sp, #28
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
 80077d2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	7b1b      	ldrb	r3, [r3, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f040 809d 	bne.w	8007918 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	785b      	ldrb	r3, [r3, #1]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d04c      	beq.n	8007880 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	823b      	strh	r3, [r7, #16]
 80077f4:	8a3b      	ldrh	r3, [r7, #16]
 80077f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d01b      	beq.n	8007836 <USB_EPClearStall+0x6c>
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4413      	add	r3, r2
 8007808:	881b      	ldrh	r3, [r3, #0]
 800780a:	b29b      	uxth	r3, r3
 800780c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007810:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007814:	81fb      	strh	r3, [r7, #14]
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	441a      	add	r2, r3
 8007820:	89fb      	ldrh	r3, [r7, #14]
 8007822:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007826:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800782a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800782e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007832:	b29b      	uxth	r3, r3
 8007834:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	78db      	ldrb	r3, [r3, #3]
 800783a:	2b01      	cmp	r3, #1
 800783c:	d06c      	beq.n	8007918 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	4413      	add	r3, r2
 8007848:	881b      	ldrh	r3, [r3, #0]
 800784a:	b29b      	uxth	r3, r3
 800784c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007850:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007854:	81bb      	strh	r3, [r7, #12]
 8007856:	89bb      	ldrh	r3, [r7, #12]
 8007858:	f083 0320 	eor.w	r3, r3, #32
 800785c:	81bb      	strh	r3, [r7, #12]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	441a      	add	r2, r3
 8007868:	89bb      	ldrh	r3, [r7, #12]
 800786a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800786e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007872:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800787a:	b29b      	uxth	r3, r3
 800787c:	8013      	strh	r3, [r2, #0]
 800787e:	e04b      	b.n	8007918 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4413      	add	r3, r2
 800788a:	881b      	ldrh	r3, [r3, #0]
 800788c:	82fb      	strh	r3, [r7, #22]
 800788e:	8afb      	ldrh	r3, [r7, #22]
 8007890:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007894:	2b00      	cmp	r3, #0
 8007896:	d01b      	beq.n	80078d0 <USB_EPClearStall+0x106>
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	4413      	add	r3, r2
 80078a2:	881b      	ldrh	r3, [r3, #0]
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078ae:	82bb      	strh	r3, [r7, #20]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	441a      	add	r2, r3
 80078ba:	8abb      	ldrh	r3, [r7, #20]
 80078bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80078c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	4413      	add	r3, r2
 80078da:	881b      	ldrh	r3, [r3, #0]
 80078dc:	b29b      	uxth	r3, r3
 80078de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078e6:	827b      	strh	r3, [r7, #18]
 80078e8:	8a7b      	ldrh	r3, [r7, #18]
 80078ea:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80078ee:	827b      	strh	r3, [r7, #18]
 80078f0:	8a7b      	ldrh	r3, [r7, #18]
 80078f2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80078f6:	827b      	strh	r3, [r7, #18]
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	441a      	add	r2, r3
 8007902:	8a7b      	ldrh	r3, [r7, #18]
 8007904:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007908:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800790c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007914:	b29b      	uxth	r3, r3
 8007916:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	371c      	adds	r7, #28
 800791e:	46bd      	mov	sp, r7
 8007920:	bc80      	pop	{r7}
 8007922:	4770      	bx	lr

08007924 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	460b      	mov	r3, r1
 800792e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007930:	78fb      	ldrb	r3, [r7, #3]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d103      	bne.n	800793e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2280      	movs	r2, #128	@ 0x80
 800793a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	bc80      	pop	{r7}
 8007948:	4770      	bx	lr

0800794a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800794a:	b480      	push	{r7}
 800794c:	b083      	sub	sp, #12
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	bc80      	pop	{r7}
 800795c:	4770      	bx	lr

0800795e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800795e:	b480      	push	{r7}
 8007960:	b083      	sub	sp, #12
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	bc80      	pop	{r7}
 8007970:	4770      	bx	lr

08007972 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007972:	b480      	push	{r7}
 8007974:	b085      	sub	sp, #20
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007980:	b29b      	uxth	r3, r3
 8007982:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007984:	68fb      	ldr	r3, [r7, #12]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3714      	adds	r7, #20
 800798a:	46bd      	mov	sp, r7
 800798c:	bc80      	pop	{r7}
 800798e:	4770      	bx	lr

08007990 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bc80      	pop	{r7}
 80079a4:	4770      	bx	lr

080079a6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80079a6:	b480      	push	{r7}
 80079a8:	b08b      	sub	sp, #44	@ 0x2c
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	60f8      	str	r0, [r7, #12]
 80079ae:	60b9      	str	r1, [r7, #8]
 80079b0:	4611      	mov	r1, r2
 80079b2:	461a      	mov	r2, r3
 80079b4:	460b      	mov	r3, r1
 80079b6:	80fb      	strh	r3, [r7, #6]
 80079b8:	4613      	mov	r3, r2
 80079ba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80079bc:	88bb      	ldrh	r3, [r7, #4]
 80079be:	3301      	adds	r3, #1
 80079c0:	085b      	lsrs	r3, r3, #1
 80079c2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80079cc:	88fb      	ldrh	r3, [r7, #6]
 80079ce:	005a      	lsls	r2, r3, #1
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079d8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80079de:	e01e      	b.n	8007a1e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	3301      	adds	r3, #1
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	021b      	lsls	r3, r3, #8
 80079ee:	b21a      	sxth	r2, r3
 80079f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	b21b      	sxth	r3, r3
 80079f8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80079fa:	6a3b      	ldr	r3, [r7, #32]
 80079fc:	8a7a      	ldrh	r2, [r7, #18]
 80079fe:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007a00:	6a3b      	ldr	r3, [r7, #32]
 8007a02:	3302      	adds	r3, #2
 8007a04:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007a06:	6a3b      	ldr	r3, [r7, #32]
 8007a08:	3302      	adds	r3, #2
 8007a0a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	3301      	adds	r3, #1
 8007a16:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1dd      	bne.n	80079e0 <USB_WritePMA+0x3a>
  }
}
 8007a24:	bf00      	nop
 8007a26:	bf00      	nop
 8007a28:	372c      	adds	r7, #44	@ 0x2c
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bc80      	pop	{r7}
 8007a2e:	4770      	bx	lr

08007a30 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b08b      	sub	sp, #44	@ 0x2c
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	4611      	mov	r1, r2
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	460b      	mov	r3, r1
 8007a40:	80fb      	strh	r3, [r7, #6]
 8007a42:	4613      	mov	r3, r2
 8007a44:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007a46:	88bb      	ldrh	r3, [r7, #4]
 8007a48:	085b      	lsrs	r3, r3, #1
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007a56:	88fb      	ldrh	r3, [r7, #6]
 8007a58:	005a      	lsls	r2, r3, #1
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a62:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a68:	e01b      	b.n	8007aa2 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007a6a:	6a3b      	ldr	r3, [r7, #32]
 8007a6c:	881b      	ldrh	r3, [r3, #0]
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007a72:	6a3b      	ldr	r3, [r7, #32]
 8007a74:	3302      	adds	r3, #2
 8007a76:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	3301      	adds	r3, #1
 8007a84:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	0a1b      	lsrs	r3, r3, #8
 8007a8a:	b2da      	uxtb	r2, r3
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	3301      	adds	r3, #1
 8007a94:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007a96:	6a3b      	ldr	r3, [r7, #32]
 8007a98:	3302      	adds	r3, #2
 8007a9a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1e0      	bne.n	8007a6a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007aa8:	88bb      	ldrh	r3, [r7, #4]
 8007aaa:	f003 0301 	and.w	r3, r3, #1
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d007      	beq.n	8007ac4 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007ab4:	6a3b      	ldr	r3, [r7, #32]
 8007ab6:	881b      	ldrh	r3, [r3, #0]
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	b2da      	uxtb	r2, r3
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	701a      	strb	r2, [r3, #0]
  }
}
 8007ac4:	bf00      	nop
 8007ac6:	372c      	adds	r7, #44	@ 0x2c
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bc80      	pop	{r7}
 8007acc:	4770      	bx	lr

08007ace <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b084      	sub	sp, #16
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007ada:	2300      	movs	r3, #0
 8007adc:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	7c1b      	ldrb	r3, [r3, #16]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d115      	bne.n	8007b12 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007ae6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007aea:	2202      	movs	r2, #2
 8007aec:	2181      	movs	r1, #129	@ 0x81
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f001 ffc5 	bl	8009a7e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007afa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007afe:	2202      	movs	r2, #2
 8007b00:	2101      	movs	r1, #1
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f001 ffbb 	bl	8009a7e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007b10:	e012      	b.n	8007b38 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007b12:	2340      	movs	r3, #64	@ 0x40
 8007b14:	2202      	movs	r2, #2
 8007b16:	2181      	movs	r1, #129	@ 0x81
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f001 ffb0 	bl	8009a7e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2201      	movs	r2, #1
 8007b22:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007b24:	2340      	movs	r3, #64	@ 0x40
 8007b26:	2202      	movs	r2, #2
 8007b28:	2101      	movs	r1, #1
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f001 ffa7 	bl	8009a7e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007b38:	2308      	movs	r3, #8
 8007b3a:	2203      	movs	r2, #3
 8007b3c:	2182      	movs	r1, #130	@ 0x82
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f001 ff9d 	bl	8009a7e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007b4a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007b4e:	f002 f8bd 	bl	8009ccc <USBD_static_malloc>
 8007b52:	4602      	mov	r2, r0
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d102      	bne.n	8007b6a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007b64:	2301      	movs	r3, #1
 8007b66:	73fb      	strb	r3, [r7, #15]
 8007b68:	e026      	b.n	8007bb8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b70:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	7c1b      	ldrb	r3, [r3, #16]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d109      	bne.n	8007ba8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007b9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b9e:	2101      	movs	r1, #1
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f002 f85c 	bl	8009c5e <USBD_LL_PrepareReceive>
 8007ba6:	e007      	b.n	8007bb8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007bae:	2340      	movs	r3, #64	@ 0x40
 8007bb0:	2101      	movs	r1, #1
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f002 f853 	bl	8009c5e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b084      	sub	sp, #16
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
 8007bca:	460b      	mov	r3, r1
 8007bcc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007bd2:	2181      	movs	r1, #129	@ 0x81
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f001 ff78 	bl	8009aca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007be0:	2101      	movs	r1, #1
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f001 ff71 	bl	8009aca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007bf0:	2182      	movs	r1, #130	@ 0x82
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f001 ff69 	bl	8009aca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00e      	beq.n	8007c26 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f002 f863 	bl	8009ce4 <USBD_static_free>
    pdev->pClassData = NULL;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c40:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007c42:	2300      	movs	r3, #0
 8007c44:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007c46:	2300      	movs	r3, #0
 8007c48:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d039      	beq.n	8007cce <USBD_CDC_Setup+0x9e>
 8007c5a:	2b20      	cmp	r3, #32
 8007c5c:	d17f      	bne.n	8007d5e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	88db      	ldrh	r3, [r3, #6]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d029      	beq.n	8007cba <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	b25b      	sxtb	r3, r3
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	da11      	bge.n	8007c94 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	683a      	ldr	r2, [r7, #0]
 8007c7a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007c7c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c7e:	683a      	ldr	r2, [r7, #0]
 8007c80:	88d2      	ldrh	r2, [r2, #6]
 8007c82:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007c84:	6939      	ldr	r1, [r7, #16]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	88db      	ldrh	r3, [r3, #6]
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f001 fa05 	bl	800909c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007c92:	e06b      	b.n	8007d6c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	785a      	ldrb	r2, [r3, #1]
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	88db      	ldrh	r3, [r3, #6]
 8007ca2:	b2da      	uxtb	r2, r3
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007caa:	6939      	ldr	r1, [r7, #16]
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	88db      	ldrh	r3, [r3, #6]
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f001 fa20 	bl	80090f8 <USBD_CtlPrepareRx>
      break;
 8007cb8:	e058      	b.n	8007d6c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	683a      	ldr	r2, [r7, #0]
 8007cc4:	7850      	ldrb	r0, [r2, #1]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	6839      	ldr	r1, [r7, #0]
 8007cca:	4798      	blx	r3
      break;
 8007ccc:	e04e      	b.n	8007d6c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	785b      	ldrb	r3, [r3, #1]
 8007cd2:	2b0b      	cmp	r3, #11
 8007cd4:	d02e      	beq.n	8007d34 <USBD_CDC_Setup+0x104>
 8007cd6:	2b0b      	cmp	r3, #11
 8007cd8:	dc38      	bgt.n	8007d4c <USBD_CDC_Setup+0x11c>
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d002      	beq.n	8007ce4 <USBD_CDC_Setup+0xb4>
 8007cde:	2b0a      	cmp	r3, #10
 8007ce0:	d014      	beq.n	8007d0c <USBD_CDC_Setup+0xdc>
 8007ce2:	e033      	b.n	8007d4c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cea:	2b03      	cmp	r3, #3
 8007cec:	d107      	bne.n	8007cfe <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007cee:	f107 030c 	add.w	r3, r7, #12
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f001 f9d0 	bl	800909c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007cfc:	e02e      	b.n	8007d5c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f001 f961 	bl	8008fc8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d06:	2302      	movs	r3, #2
 8007d08:	75fb      	strb	r3, [r7, #23]
          break;
 8007d0a:	e027      	b.n	8007d5c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d12:	2b03      	cmp	r3, #3
 8007d14:	d107      	bne.n	8007d26 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007d16:	f107 030f 	add.w	r3, r7, #15
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f001 f9bc 	bl	800909c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d24:	e01a      	b.n	8007d5c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007d26:	6839      	ldr	r1, [r7, #0]
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f001 f94d 	bl	8008fc8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d2e:	2302      	movs	r3, #2
 8007d30:	75fb      	strb	r3, [r7, #23]
          break;
 8007d32:	e013      	b.n	8007d5c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d3a:	2b03      	cmp	r3, #3
 8007d3c:	d00d      	beq.n	8007d5a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007d3e:	6839      	ldr	r1, [r7, #0]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f001 f941 	bl	8008fc8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d46:	2302      	movs	r3, #2
 8007d48:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007d4a:	e006      	b.n	8007d5a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f001 f93a 	bl	8008fc8 <USBD_CtlError>
          ret = USBD_FAIL;
 8007d54:	2302      	movs	r3, #2
 8007d56:	75fb      	strb	r3, [r7, #23]
          break;
 8007d58:	e000      	b.n	8007d5c <USBD_CDC_Setup+0x12c>
          break;
 8007d5a:	bf00      	nop
      }
      break;
 8007d5c:	e006      	b.n	8007d6c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007d5e:	6839      	ldr	r1, [r7, #0]
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f001 f931 	bl	8008fc8 <USBD_CtlError>
      ret = USBD_FAIL;
 8007d66:	2302      	movs	r3, #2
 8007d68:	75fb      	strb	r3, [r7, #23]
      break;
 8007d6a:	bf00      	nop
  }

  return ret;
 8007d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3718      	adds	r7, #24
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b084      	sub	sp, #16
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
 8007d7e:	460b      	mov	r3, r1
 8007d80:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d88:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007d90:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d03a      	beq.n	8007e12 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007d9c:	78fa      	ldrb	r2, [r7, #3]
 8007d9e:	6879      	ldr	r1, [r7, #4]
 8007da0:	4613      	mov	r3, r2
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	4413      	add	r3, r2
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	440b      	add	r3, r1
 8007daa:	331c      	adds	r3, #28
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d029      	beq.n	8007e06 <USBD_CDC_DataIn+0x90>
 8007db2:	78fa      	ldrb	r2, [r7, #3]
 8007db4:	6879      	ldr	r1, [r7, #4]
 8007db6:	4613      	mov	r3, r2
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	4413      	add	r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	440b      	add	r3, r1
 8007dc0:	331c      	adds	r3, #28
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	78f9      	ldrb	r1, [r7, #3]
 8007dc6:	68b8      	ldr	r0, [r7, #8]
 8007dc8:	460b      	mov	r3, r1
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	440b      	add	r3, r1
 8007dce:	00db      	lsls	r3, r3, #3
 8007dd0:	4403      	add	r3, r0
 8007dd2:	3320      	adds	r3, #32
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	fbb2 f1f3 	udiv	r1, r2, r3
 8007dda:	fb01 f303 	mul.w	r3, r1, r3
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d110      	bne.n	8007e06 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007de4:	78fa      	ldrb	r2, [r7, #3]
 8007de6:	6879      	ldr	r1, [r7, #4]
 8007de8:	4613      	mov	r3, r2
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	4413      	add	r3, r2
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	440b      	add	r3, r1
 8007df2:	331c      	adds	r3, #28
 8007df4:	2200      	movs	r2, #0
 8007df6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007df8:	78f9      	ldrb	r1, [r7, #3]
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f001 ff0a 	bl	8009c18 <USBD_LL_Transmit>
 8007e04:	e003      	b.n	8007e0e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	e000      	b.n	8007e14 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007e12:	2302      	movs	r3, #2
  }
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	460b      	mov	r3, r1
 8007e26:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e2e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007e30:	78fb      	ldrb	r3, [r7, #3]
 8007e32:	4619      	mov	r1, r3
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f001 ff35 	bl	8009ca4 <USBD_LL_GetRxDataSize>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00d      	beq.n	8007e68 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007e60:	4611      	mov	r1, r2
 8007e62:	4798      	blx	r3

    return USBD_OK;
 8007e64:	2300      	movs	r3, #0
 8007e66:	e000      	b.n	8007e6a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007e68:	2302      	movs	r3, #2
  }
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b084      	sub	sp, #16
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e80:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d014      	beq.n	8007eb6 <USBD_CDC_EP0_RxReady+0x44>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007e92:	2bff      	cmp	r3, #255	@ 0xff
 8007e94:	d00f      	beq.n	8007eb6 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007ea4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007eac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	22ff      	movs	r2, #255	@ 0xff
 8007eb2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2243      	movs	r2, #67	@ 0x43
 8007ecc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007ece:	4b03      	ldr	r3, [pc, #12]	@ (8007edc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bc80      	pop	{r7}
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	2000009c 	.word	0x2000009c

08007ee0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2243      	movs	r2, #67	@ 0x43
 8007eec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007eee:	4b03      	ldr	r3, [pc, #12]	@ (8007efc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bc80      	pop	{r7}
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	20000058 	.word	0x20000058

08007f00 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2243      	movs	r2, #67	@ 0x43
 8007f0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007f0e:	4b03      	ldr	r3, [pc, #12]	@ (8007f1c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bc80      	pop	{r7}
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	200000e0 	.word	0x200000e0

08007f20 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	220a      	movs	r2, #10
 8007f2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007f2e:	4b03      	ldr	r3, [pc, #12]	@ (8007f3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bc80      	pop	{r7}
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	20000014 	.word	0x20000014

08007f40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d005      	beq.n	8007f60 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bc80      	pop	{r7}
 8007f6a:	4770      	bx	lr

08007f6c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b087      	sub	sp, #28
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	4613      	mov	r3, r2
 8007f78:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f80:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	68ba      	ldr	r2, [r7, #8]
 8007f86:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007f8a:	88fa      	ldrh	r2, [r7, #6]
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	371c      	adds	r7, #28
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bc80      	pop	{r7}
 8007f9c:	4770      	bx	lr

08007f9e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b085      	sub	sp, #20
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
 8007fa6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fae:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3714      	adds	r7, #20
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bc80      	pop	{r7}
 8007fc2:	4770      	bx	lr

08007fc4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fd2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d01c      	beq.n	8008018 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d115      	bne.n	8008014 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008006:	b29b      	uxth	r3, r3
 8008008:	2181      	movs	r1, #129	@ 0x81
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f001 fe04 	bl	8009c18 <USBD_LL_Transmit>

      return USBD_OK;
 8008010:	2300      	movs	r3, #0
 8008012:	e002      	b.n	800801a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008014:	2301      	movs	r3, #1
 8008016:	e000      	b.n	800801a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008018:	2302      	movs	r3, #2
  }
}
 800801a:	4618      	mov	r0, r3
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b084      	sub	sp, #16
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008030:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008038:	2b00      	cmp	r3, #0
 800803a:	d017      	beq.n	800806c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	7c1b      	ldrb	r3, [r3, #16]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d109      	bne.n	8008058 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800804a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800804e:	2101      	movs	r1, #1
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f001 fe04 	bl	8009c5e <USBD_LL_PrepareReceive>
 8008056:	e007      	b.n	8008068 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800805e:	2340      	movs	r3, #64	@ 0x40
 8008060:	2101      	movs	r1, #1
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f001 fdfb 	bl	8009c5e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008068:	2300      	movs	r3, #0
 800806a:	e000      	b.n	800806e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800806c:	2302      	movs	r3, #2
  }
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b084      	sub	sp, #16
 800807a:	af00      	add	r7, sp, #0
 800807c:	60f8      	str	r0, [r7, #12]
 800807e:	60b9      	str	r1, [r7, #8]
 8008080:	4613      	mov	r3, r2
 8008082:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d101      	bne.n	800808e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800808a:	2302      	movs	r3, #2
 800808c:	e01a      	b.n	80080c4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008094:	2b00      	cmp	r3, #0
 8008096:	d003      	beq.n	80080a0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2200      	movs	r2, #0
 800809c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d003      	beq.n	80080ae <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	68ba      	ldr	r2, [r7, #8]
 80080aa:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	79fa      	ldrb	r2, [r7, #7]
 80080ba:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f001 fc69 	bl	8009994 <USBD_LL_Init>

  return USBD_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80080d6:	2300      	movs	r3, #0
 80080d8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d006      	beq.n	80080ee <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	683a      	ldr	r2, [r7, #0]
 80080e4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80080e8:	2300      	movs	r3, #0
 80080ea:	73fb      	strb	r3, [r7, #15]
 80080ec:	e001      	b.n	80080f2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80080ee:	2302      	movs	r3, #2
 80080f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80080f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3714      	adds	r7, #20
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bc80      	pop	{r7}
 80080fc:	4770      	bx	lr

080080fe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b082      	sub	sp, #8
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f001 fc9e 	bl	8009a48 <USBD_LL_Start>

  return USBD_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3708      	adds	r7, #8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008116:	b480      	push	{r7}
 8008118:	b083      	sub	sp, #12
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	bc80      	pop	{r7}
 8008128:	4770      	bx	lr

0800812a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b084      	sub	sp, #16
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
 8008132:	460b      	mov	r3, r1
 8008134:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008136:	2302      	movs	r3, #2
 8008138:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00c      	beq.n	800815e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	78fa      	ldrb	r2, [r7, #3]
 800814e:	4611      	mov	r1, r2
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	4798      	blx	r3
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d101      	bne.n	800815e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800815a:	2300      	movs	r3, #0
 800815c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800815e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	460b      	mov	r3, r1
 8008172:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	78fa      	ldrb	r2, [r7, #3]
 800817e:	4611      	mov	r1, r2
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	4798      	blx	r3

  return USBD_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b082      	sub	sp, #8
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
 8008196:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800819e:	6839      	ldr	r1, [r7, #0]
 80081a0:	4618      	mov	r0, r3
 80081a2:	f000 fed8 	bl	8008f56 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2201      	movs	r2, #1
 80081aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80081b4:	461a      	mov	r2, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80081c2:	f003 031f 	and.w	r3, r3, #31
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d016      	beq.n	80081f8 <USBD_LL_SetupStage+0x6a>
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d81c      	bhi.n	8008208 <USBD_LL_SetupStage+0x7a>
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d002      	beq.n	80081d8 <USBD_LL_SetupStage+0x4a>
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d008      	beq.n	80081e8 <USBD_LL_SetupStage+0x5a>
 80081d6:	e017      	b.n	8008208 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80081de:	4619      	mov	r1, r3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 f9cb 	bl	800857c <USBD_StdDevReq>
      break;
 80081e6:	e01a      	b.n	800821e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80081ee:	4619      	mov	r1, r3
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fa2d 	bl	8008650 <USBD_StdItfReq>
      break;
 80081f6:	e012      	b.n	800821e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80081fe:	4619      	mov	r1, r3
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fa6d 	bl	80086e0 <USBD_StdEPReq>
      break;
 8008206:	e00a      	b.n	800821e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800820e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008212:	b2db      	uxtb	r3, r3
 8008214:	4619      	mov	r1, r3
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f001 fc76 	bl	8009b08 <USBD_LL_StallEP>
      break;
 800821c:	bf00      	nop
  }

  return USBD_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	460b      	mov	r3, r1
 8008232:	607a      	str	r2, [r7, #4]
 8008234:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008236:	7afb      	ldrb	r3, [r7, #11]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d14b      	bne.n	80082d4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008242:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800824a:	2b03      	cmp	r3, #3
 800824c:	d134      	bne.n	80082b8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	68da      	ldr	r2, [r3, #12]
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	429a      	cmp	r2, r3
 8008258:	d919      	bls.n	800828e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	68da      	ldr	r2, [r3, #12]
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	1ad2      	subs	r2, r2, r3
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	68da      	ldr	r2, [r3, #12]
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008270:	429a      	cmp	r2, r3
 8008272:	d203      	bcs.n	800827c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008278:	b29b      	uxth	r3, r3
 800827a:	e002      	b.n	8008282 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008280:	b29b      	uxth	r3, r3
 8008282:	461a      	mov	r2, r3
 8008284:	6879      	ldr	r1, [r7, #4]
 8008286:	68f8      	ldr	r0, [r7, #12]
 8008288:	f000 ff54 	bl	8009134 <USBD_CtlContinueRx>
 800828c:	e038      	b.n	8008300 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00a      	beq.n	80082b0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80082a0:	2b03      	cmp	r3, #3
 80082a2:	d105      	bne.n	80082b0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f000 ff51 	bl	8009158 <USBD_CtlSendStatus>
 80082b6:	e023      	b.n	8008300 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80082be:	2b05      	cmp	r3, #5
 80082c0:	d11e      	bne.n	8008300 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80082ca:	2100      	movs	r1, #0
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f001 fc1b 	bl	8009b08 <USBD_LL_StallEP>
 80082d2:	e015      	b.n	8008300 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082da:	699b      	ldr	r3, [r3, #24]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00d      	beq.n	80082fc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80082e6:	2b03      	cmp	r3, #3
 80082e8:	d108      	bne.n	80082fc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082f0:	699b      	ldr	r3, [r3, #24]
 80082f2:	7afa      	ldrb	r2, [r7, #11]
 80082f4:	4611      	mov	r1, r2
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	4798      	blx	r3
 80082fa:	e001      	b.n	8008300 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80082fc:	2302      	movs	r3, #2
 80082fe:	e000      	b.n	8008302 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3718      	adds	r7, #24
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b086      	sub	sp, #24
 800830e:	af00      	add	r7, sp, #0
 8008310:	60f8      	str	r0, [r7, #12]
 8008312:	460b      	mov	r3, r1
 8008314:	607a      	str	r2, [r7, #4]
 8008316:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008318:	7afb      	ldrb	r3, [r7, #11]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d17f      	bne.n	800841e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	3314      	adds	r3, #20
 8008322:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800832a:	2b02      	cmp	r3, #2
 800832c:	d15c      	bne.n	80083e8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	68da      	ldr	r2, [r3, #12]
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	429a      	cmp	r2, r3
 8008338:	d915      	bls.n	8008366 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	68da      	ldr	r2, [r3, #12]
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	1ad2      	subs	r2, r2, r3
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	b29b      	uxth	r3, r3
 800834e:	461a      	mov	r2, r3
 8008350:	6879      	ldr	r1, [r7, #4]
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f000 febe 	bl	80090d4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008358:	2300      	movs	r3, #0
 800835a:	2200      	movs	r2, #0
 800835c:	2100      	movs	r1, #0
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f001 fc7d 	bl	8009c5e <USBD_LL_PrepareReceive>
 8008364:	e04e      	b.n	8008404 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	697a      	ldr	r2, [r7, #20]
 800836c:	6912      	ldr	r2, [r2, #16]
 800836e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008372:	fb01 f202 	mul.w	r2, r1, r2
 8008376:	1a9b      	subs	r3, r3, r2
 8008378:	2b00      	cmp	r3, #0
 800837a:	d11c      	bne.n	80083b6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	689a      	ldr	r2, [r3, #8]
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008384:	429a      	cmp	r2, r3
 8008386:	d316      	bcc.n	80083b6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	689a      	ldr	r2, [r3, #8]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008392:	429a      	cmp	r2, r3
 8008394:	d20f      	bcs.n	80083b6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008396:	2200      	movs	r2, #0
 8008398:	2100      	movs	r1, #0
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f000 fe9a 	bl	80090d4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083a8:	2300      	movs	r3, #0
 80083aa:	2200      	movs	r2, #0
 80083ac:	2100      	movs	r1, #0
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	f001 fc55 	bl	8009c5e <USBD_LL_PrepareReceive>
 80083b4:	e026      	b.n	8008404 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00a      	beq.n	80083d8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80083c8:	2b03      	cmp	r3, #3
 80083ca:	d105      	bne.n	80083d8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	68f8      	ldr	r0, [r7, #12]
 80083d6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80083d8:	2180      	movs	r1, #128	@ 0x80
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f001 fb94 	bl	8009b08 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	f000 fecc 	bl	800917e <USBD_CtlReceiveStatus>
 80083e6:	e00d      	b.n	8008404 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80083ee:	2b04      	cmp	r3, #4
 80083f0:	d004      	beq.n	80083fc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d103      	bne.n	8008404 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80083fc:	2180      	movs	r1, #128	@ 0x80
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f001 fb82 	bl	8009b08 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800840a:	2b01      	cmp	r3, #1
 800840c:	d11d      	bne.n	800844a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f7ff fe81 	bl	8008116 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2200      	movs	r2, #0
 8008418:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800841c:	e015      	b.n	800844a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00d      	beq.n	8008446 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008430:	2b03      	cmp	r3, #3
 8008432:	d108      	bne.n	8008446 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800843a:	695b      	ldr	r3, [r3, #20]
 800843c:	7afa      	ldrb	r2, [r7, #11]
 800843e:	4611      	mov	r1, r2
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	4798      	blx	r3
 8008444:	e001      	b.n	800844a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008446:	2302      	movs	r3, #2
 8008448:	e000      	b.n	800844c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	3718      	adds	r7, #24
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800845c:	2340      	movs	r3, #64	@ 0x40
 800845e:	2200      	movs	r2, #0
 8008460:	2100      	movs	r1, #0
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f001 fb0b 	bl	8009a7e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2240      	movs	r2, #64	@ 0x40
 8008474:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008478:	2340      	movs	r3, #64	@ 0x40
 800847a:	2200      	movs	r2, #0
 800847c:	2180      	movs	r1, #128	@ 0x80
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f001 fafd 	bl	8009a7e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2240      	movs	r2, #64	@ 0x40
 800848e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d009      	beq.n	80084cc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	6852      	ldr	r2, [r2, #4]
 80084c4:	b2d2      	uxtb	r2, r2
 80084c6:	4611      	mov	r1, r2
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	4798      	blx	r3
  }

  return USBD_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80084d6:	b480      	push	{r7}
 80084d8:	b083      	sub	sp, #12
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	460b      	mov	r3, r1
 80084e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	78fa      	ldrb	r2, [r7, #3]
 80084e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	370c      	adds	r7, #12
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bc80      	pop	{r7}
 80084f2:	4770      	bx	lr

080084f4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2204      	movs	r2, #4
 800850c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	370c      	adds	r7, #12
 8008516:	46bd      	mov	sp, r7
 8008518:	bc80      	pop	{r7}
 800851a:	4770      	bx	lr

0800851c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800852a:	2b04      	cmp	r3, #4
 800852c:	d105      	bne.n	800853a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	bc80      	pop	{r7}
 8008544:	4770      	bx	lr

08008546 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b082      	sub	sp, #8
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008554:	2b03      	cmp	r3, #3
 8008556:	d10b      	bne.n	8008570 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800855e:	69db      	ldr	r3, [r3, #28]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d005      	beq.n	8008570 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800856a:	69db      	ldr	r3, [r3, #28]
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
	...

0800857c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008586:	2300      	movs	r3, #0
 8008588:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008592:	2b40      	cmp	r3, #64	@ 0x40
 8008594:	d005      	beq.n	80085a2 <USBD_StdDevReq+0x26>
 8008596:	2b40      	cmp	r3, #64	@ 0x40
 8008598:	d84f      	bhi.n	800863a <USBD_StdDevReq+0xbe>
 800859a:	2b00      	cmp	r3, #0
 800859c:	d009      	beq.n	80085b2 <USBD_StdDevReq+0x36>
 800859e:	2b20      	cmp	r3, #32
 80085a0:	d14b      	bne.n	800863a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	6839      	ldr	r1, [r7, #0]
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	4798      	blx	r3
      break;
 80085b0:	e048      	b.n	8008644 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	785b      	ldrb	r3, [r3, #1]
 80085b6:	2b09      	cmp	r3, #9
 80085b8:	d839      	bhi.n	800862e <USBD_StdDevReq+0xb2>
 80085ba:	a201      	add	r2, pc, #4	@ (adr r2, 80085c0 <USBD_StdDevReq+0x44>)
 80085bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c0:	08008611 	.word	0x08008611
 80085c4:	08008625 	.word	0x08008625
 80085c8:	0800862f 	.word	0x0800862f
 80085cc:	0800861b 	.word	0x0800861b
 80085d0:	0800862f 	.word	0x0800862f
 80085d4:	080085f3 	.word	0x080085f3
 80085d8:	080085e9 	.word	0x080085e9
 80085dc:	0800862f 	.word	0x0800862f
 80085e0:	08008607 	.word	0x08008607
 80085e4:	080085fd 	.word	0x080085fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f9dc 	bl	80089a8 <USBD_GetDescriptor>
          break;
 80085f0:	e022      	b.n	8008638 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80085f2:	6839      	ldr	r1, [r7, #0]
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fb3f 	bl	8008c78 <USBD_SetAddress>
          break;
 80085fa:	e01d      	b.n	8008638 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fb7e 	bl	8008d00 <USBD_SetConfig>
          break;
 8008604:	e018      	b.n	8008638 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 fc07 	bl	8008e1c <USBD_GetConfig>
          break;
 800860e:	e013      	b.n	8008638 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fc37 	bl	8008e86 <USBD_GetStatus>
          break;
 8008618:	e00e      	b.n	8008638 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800861a:	6839      	ldr	r1, [r7, #0]
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 fc65 	bl	8008eec <USBD_SetFeature>
          break;
 8008622:	e009      	b.n	8008638 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008624:	6839      	ldr	r1, [r7, #0]
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 fc74 	bl	8008f14 <USBD_ClrFeature>
          break;
 800862c:	e004      	b.n	8008638 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 fcc9 	bl	8008fc8 <USBD_CtlError>
          break;
 8008636:	bf00      	nop
      }
      break;
 8008638:	e004      	b.n	8008644 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800863a:	6839      	ldr	r1, [r7, #0]
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fcc3 	bl	8008fc8 <USBD_CtlError>
      break;
 8008642:	bf00      	nop
  }

  return ret;
 8008644:	7bfb      	ldrb	r3, [r7, #15]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop

08008650 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800865a:	2300      	movs	r3, #0
 800865c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008666:	2b40      	cmp	r3, #64	@ 0x40
 8008668:	d005      	beq.n	8008676 <USBD_StdItfReq+0x26>
 800866a:	2b40      	cmp	r3, #64	@ 0x40
 800866c:	d82e      	bhi.n	80086cc <USBD_StdItfReq+0x7c>
 800866e:	2b00      	cmp	r3, #0
 8008670:	d001      	beq.n	8008676 <USBD_StdItfReq+0x26>
 8008672:	2b20      	cmp	r3, #32
 8008674:	d12a      	bne.n	80086cc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800867c:	3b01      	subs	r3, #1
 800867e:	2b02      	cmp	r3, #2
 8008680:	d81d      	bhi.n	80086be <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	889b      	ldrh	r3, [r3, #4]
 8008686:	b2db      	uxtb	r3, r3
 8008688:	2b01      	cmp	r3, #1
 800868a:	d813      	bhi.n	80086b4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	4798      	blx	r3
 800869a:	4603      	mov	r3, r0
 800869c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	88db      	ldrh	r3, [r3, #6]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d110      	bne.n	80086c8 <USBD_StdItfReq+0x78>
 80086a6:	7bfb      	ldrb	r3, [r7, #15]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d10d      	bne.n	80086c8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fd53 	bl	8009158 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80086b2:	e009      	b.n	80086c8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80086b4:	6839      	ldr	r1, [r7, #0]
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fc86 	bl	8008fc8 <USBD_CtlError>
          break;
 80086bc:	e004      	b.n	80086c8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80086be:	6839      	ldr	r1, [r7, #0]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fc81 	bl	8008fc8 <USBD_CtlError>
          break;
 80086c6:	e000      	b.n	80086ca <USBD_StdItfReq+0x7a>
          break;
 80086c8:	bf00      	nop
      }
      break;
 80086ca:	e004      	b.n	80086d6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 fc7a 	bl	8008fc8 <USBD_CtlError>
      break;
 80086d4:	bf00      	nop
  }

  return USBD_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3710      	adds	r7, #16
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80086ea:	2300      	movs	r3, #0
 80086ec:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	889b      	ldrh	r3, [r3, #4]
 80086f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80086fc:	2b40      	cmp	r3, #64	@ 0x40
 80086fe:	d007      	beq.n	8008710 <USBD_StdEPReq+0x30>
 8008700:	2b40      	cmp	r3, #64	@ 0x40
 8008702:	f200 8146 	bhi.w	8008992 <USBD_StdEPReq+0x2b2>
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00a      	beq.n	8008720 <USBD_StdEPReq+0x40>
 800870a:	2b20      	cmp	r3, #32
 800870c:	f040 8141 	bne.w	8008992 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	4798      	blx	r3
      break;
 800871e:	e13d      	b.n	800899c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008728:	2b20      	cmp	r3, #32
 800872a:	d10a      	bne.n	8008742 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	6839      	ldr	r1, [r7, #0]
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	4798      	blx	r3
 800873a:	4603      	mov	r3, r0
 800873c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800873e:	7bfb      	ldrb	r3, [r7, #15]
 8008740:	e12d      	b.n	800899e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	785b      	ldrb	r3, [r3, #1]
 8008746:	2b03      	cmp	r3, #3
 8008748:	d007      	beq.n	800875a <USBD_StdEPReq+0x7a>
 800874a:	2b03      	cmp	r3, #3
 800874c:	f300 811b 	bgt.w	8008986 <USBD_StdEPReq+0x2a6>
 8008750:	2b00      	cmp	r3, #0
 8008752:	d072      	beq.n	800883a <USBD_StdEPReq+0x15a>
 8008754:	2b01      	cmp	r3, #1
 8008756:	d03a      	beq.n	80087ce <USBD_StdEPReq+0xee>
 8008758:	e115      	b.n	8008986 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008760:	2b02      	cmp	r3, #2
 8008762:	d002      	beq.n	800876a <USBD_StdEPReq+0x8a>
 8008764:	2b03      	cmp	r3, #3
 8008766:	d015      	beq.n	8008794 <USBD_StdEPReq+0xb4>
 8008768:	e02b      	b.n	80087c2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800876a:	7bbb      	ldrb	r3, [r7, #14]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00c      	beq.n	800878a <USBD_StdEPReq+0xaa>
 8008770:	7bbb      	ldrb	r3, [r7, #14]
 8008772:	2b80      	cmp	r3, #128	@ 0x80
 8008774:	d009      	beq.n	800878a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008776:	7bbb      	ldrb	r3, [r7, #14]
 8008778:	4619      	mov	r1, r3
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f001 f9c4 	bl	8009b08 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008780:	2180      	movs	r1, #128	@ 0x80
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f001 f9c0 	bl	8009b08 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008788:	e020      	b.n	80087cc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fc1b 	bl	8008fc8 <USBD_CtlError>
              break;
 8008792:	e01b      	b.n	80087cc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	885b      	ldrh	r3, [r3, #2]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d10e      	bne.n	80087ba <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800879c:	7bbb      	ldrb	r3, [r7, #14]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00b      	beq.n	80087ba <USBD_StdEPReq+0xda>
 80087a2:	7bbb      	ldrb	r3, [r7, #14]
 80087a4:	2b80      	cmp	r3, #128	@ 0x80
 80087a6:	d008      	beq.n	80087ba <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	88db      	ldrh	r3, [r3, #6]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d104      	bne.n	80087ba <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80087b0:	7bbb      	ldrb	r3, [r7, #14]
 80087b2:	4619      	mov	r1, r3
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f001 f9a7 	bl	8009b08 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 fccc 	bl	8009158 <USBD_CtlSendStatus>

              break;
 80087c0:	e004      	b.n	80087cc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80087c2:	6839      	ldr	r1, [r7, #0]
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 fbff 	bl	8008fc8 <USBD_CtlError>
              break;
 80087ca:	bf00      	nop
          }
          break;
 80087cc:	e0e0      	b.n	8008990 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d002      	beq.n	80087de <USBD_StdEPReq+0xfe>
 80087d8:	2b03      	cmp	r3, #3
 80087da:	d015      	beq.n	8008808 <USBD_StdEPReq+0x128>
 80087dc:	e026      	b.n	800882c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087de:	7bbb      	ldrb	r3, [r7, #14]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00c      	beq.n	80087fe <USBD_StdEPReq+0x11e>
 80087e4:	7bbb      	ldrb	r3, [r7, #14]
 80087e6:	2b80      	cmp	r3, #128	@ 0x80
 80087e8:	d009      	beq.n	80087fe <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80087ea:	7bbb      	ldrb	r3, [r7, #14]
 80087ec:	4619      	mov	r1, r3
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f001 f98a 	bl	8009b08 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80087f4:	2180      	movs	r1, #128	@ 0x80
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f001 f986 	bl	8009b08 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80087fc:	e01c      	b.n	8008838 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80087fe:	6839      	ldr	r1, [r7, #0]
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fbe1 	bl	8008fc8 <USBD_CtlError>
              break;
 8008806:	e017      	b.n	8008838 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	885b      	ldrh	r3, [r3, #2]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d112      	bne.n	8008836 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008810:	7bbb      	ldrb	r3, [r7, #14]
 8008812:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008816:	2b00      	cmp	r3, #0
 8008818:	d004      	beq.n	8008824 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800881a:	7bbb      	ldrb	r3, [r7, #14]
 800881c:	4619      	mov	r1, r3
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f001 f991 	bl	8009b46 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fc97 	bl	8009158 <USBD_CtlSendStatus>
              }
              break;
 800882a:	e004      	b.n	8008836 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800882c:	6839      	ldr	r1, [r7, #0]
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 fbca 	bl	8008fc8 <USBD_CtlError>
              break;
 8008834:	e000      	b.n	8008838 <USBD_StdEPReq+0x158>
              break;
 8008836:	bf00      	nop
          }
          break;
 8008838:	e0aa      	b.n	8008990 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008840:	2b02      	cmp	r3, #2
 8008842:	d002      	beq.n	800884a <USBD_StdEPReq+0x16a>
 8008844:	2b03      	cmp	r3, #3
 8008846:	d032      	beq.n	80088ae <USBD_StdEPReq+0x1ce>
 8008848:	e097      	b.n	800897a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800884a:	7bbb      	ldrb	r3, [r7, #14]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d007      	beq.n	8008860 <USBD_StdEPReq+0x180>
 8008850:	7bbb      	ldrb	r3, [r7, #14]
 8008852:	2b80      	cmp	r3, #128	@ 0x80
 8008854:	d004      	beq.n	8008860 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fbb5 	bl	8008fc8 <USBD_CtlError>
                break;
 800885e:	e091      	b.n	8008984 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008860:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008864:	2b00      	cmp	r3, #0
 8008866:	da0b      	bge.n	8008880 <USBD_StdEPReq+0x1a0>
 8008868:	7bbb      	ldrb	r3, [r7, #14]
 800886a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800886e:	4613      	mov	r3, r2
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4413      	add	r3, r2
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	3310      	adds	r3, #16
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	4413      	add	r3, r2
 800887c:	3304      	adds	r3, #4
 800887e:	e00b      	b.n	8008898 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008880:	7bbb      	ldrb	r3, [r7, #14]
 8008882:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008886:	4613      	mov	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4413      	add	r3, r2
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	4413      	add	r3, r2
 8008896:	3304      	adds	r3, #4
 8008898:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	2200      	movs	r2, #0
 800889e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	2202      	movs	r2, #2
 80088a4:	4619      	mov	r1, r3
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 fbf8 	bl	800909c <USBD_CtlSendData>
              break;
 80088ac:	e06a      	b.n	8008984 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80088ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	da11      	bge.n	80088da <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80088b6:	7bbb      	ldrb	r3, [r7, #14]
 80088b8:	f003 020f 	and.w	r2, r3, #15
 80088bc:	6879      	ldr	r1, [r7, #4]
 80088be:	4613      	mov	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4413      	add	r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	440b      	add	r3, r1
 80088c8:	3318      	adds	r3, #24
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d117      	bne.n	8008900 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80088d0:	6839      	ldr	r1, [r7, #0]
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 fb78 	bl	8008fc8 <USBD_CtlError>
                  break;
 80088d8:	e054      	b.n	8008984 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80088da:	7bbb      	ldrb	r3, [r7, #14]
 80088dc:	f003 020f 	and.w	r2, r3, #15
 80088e0:	6879      	ldr	r1, [r7, #4]
 80088e2:	4613      	mov	r3, r2
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	4413      	add	r3, r2
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	440b      	add	r3, r1
 80088ec:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d104      	bne.n	8008900 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80088f6:	6839      	ldr	r1, [r7, #0]
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 fb65 	bl	8008fc8 <USBD_CtlError>
                  break;
 80088fe:	e041      	b.n	8008984 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008900:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008904:	2b00      	cmp	r3, #0
 8008906:	da0b      	bge.n	8008920 <USBD_StdEPReq+0x240>
 8008908:	7bbb      	ldrb	r3, [r7, #14]
 800890a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800890e:	4613      	mov	r3, r2
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	4413      	add	r3, r2
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	3310      	adds	r3, #16
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	4413      	add	r3, r2
 800891c:	3304      	adds	r3, #4
 800891e:	e00b      	b.n	8008938 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008920:	7bbb      	ldrb	r3, [r7, #14]
 8008922:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008926:	4613      	mov	r3, r2
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	4413      	add	r3, r2
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	4413      	add	r3, r2
 8008936:	3304      	adds	r3, #4
 8008938:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800893a:	7bbb      	ldrb	r3, [r7, #14]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d002      	beq.n	8008946 <USBD_StdEPReq+0x266>
 8008940:	7bbb      	ldrb	r3, [r7, #14]
 8008942:	2b80      	cmp	r3, #128	@ 0x80
 8008944:	d103      	bne.n	800894e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	2200      	movs	r2, #0
 800894a:	601a      	str	r2, [r3, #0]
 800894c:	e00e      	b.n	800896c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800894e:	7bbb      	ldrb	r3, [r7, #14]
 8008950:	4619      	mov	r1, r3
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f001 f916 	bl	8009b84 <USBD_LL_IsStallEP>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d003      	beq.n	8008966 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	2201      	movs	r2, #1
 8008962:	601a      	str	r2, [r3, #0]
 8008964:	e002      	b.n	800896c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	2200      	movs	r2, #0
 800896a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	2202      	movs	r2, #2
 8008970:	4619      	mov	r1, r3
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fb92 	bl	800909c <USBD_CtlSendData>
              break;
 8008978:	e004      	b.n	8008984 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800897a:	6839      	ldr	r1, [r7, #0]
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 fb23 	bl	8008fc8 <USBD_CtlError>
              break;
 8008982:	bf00      	nop
          }
          break;
 8008984:	e004      	b.n	8008990 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008986:	6839      	ldr	r1, [r7, #0]
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 fb1d 	bl	8008fc8 <USBD_CtlError>
          break;
 800898e:	bf00      	nop
      }
      break;
 8008990:	e004      	b.n	800899c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008992:	6839      	ldr	r1, [r7, #0]
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 fb17 	bl	8008fc8 <USBD_CtlError>
      break;
 800899a:	bf00      	nop
  }

  return ret;
 800899c:	7bfb      	ldrb	r3, [r7, #15]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
	...

080089a8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80089b2:	2300      	movs	r3, #0
 80089b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80089b6:	2300      	movs	r3, #0
 80089b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80089ba:	2300      	movs	r3, #0
 80089bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	885b      	ldrh	r3, [r3, #2]
 80089c2:	0a1b      	lsrs	r3, r3, #8
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	3b01      	subs	r3, #1
 80089c8:	2b06      	cmp	r3, #6
 80089ca:	f200 8128 	bhi.w	8008c1e <USBD_GetDescriptor+0x276>
 80089ce:	a201      	add	r2, pc, #4	@ (adr r2, 80089d4 <USBD_GetDescriptor+0x2c>)
 80089d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d4:	080089f1 	.word	0x080089f1
 80089d8:	08008a09 	.word	0x08008a09
 80089dc:	08008a49 	.word	0x08008a49
 80089e0:	08008c1f 	.word	0x08008c1f
 80089e4:	08008c1f 	.word	0x08008c1f
 80089e8:	08008bbf 	.word	0x08008bbf
 80089ec:	08008beb 	.word	0x08008beb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	7c12      	ldrb	r2, [r2, #16]
 80089fc:	f107 0108 	add.w	r1, r7, #8
 8008a00:	4610      	mov	r0, r2
 8008a02:	4798      	blx	r3
 8008a04:	60f8      	str	r0, [r7, #12]
      break;
 8008a06:	e112      	b.n	8008c2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	7c1b      	ldrb	r3, [r3, #16]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d10d      	bne.n	8008a2c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a18:	f107 0208 	add.w	r2, r7, #8
 8008a1c:	4610      	mov	r0, r2
 8008a1e:	4798      	blx	r3
 8008a20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	3301      	adds	r3, #1
 8008a26:	2202      	movs	r2, #2
 8008a28:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008a2a:	e100      	b.n	8008c2e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a34:	f107 0208 	add.w	r2, r7, #8
 8008a38:	4610      	mov	r0, r2
 8008a3a:	4798      	blx	r3
 8008a3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	3301      	adds	r3, #1
 8008a42:	2202      	movs	r2, #2
 8008a44:	701a      	strb	r2, [r3, #0]
      break;
 8008a46:	e0f2      	b.n	8008c2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	885b      	ldrh	r3, [r3, #2]
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	2b05      	cmp	r3, #5
 8008a50:	f200 80ac 	bhi.w	8008bac <USBD_GetDescriptor+0x204>
 8008a54:	a201      	add	r2, pc, #4	@ (adr r2, 8008a5c <USBD_GetDescriptor+0xb4>)
 8008a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5a:	bf00      	nop
 8008a5c:	08008a75 	.word	0x08008a75
 8008a60:	08008aa9 	.word	0x08008aa9
 8008a64:	08008add 	.word	0x08008add
 8008a68:	08008b11 	.word	0x08008b11
 8008a6c:	08008b45 	.word	0x08008b45
 8008a70:	08008b79 	.word	0x08008b79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00b      	beq.n	8008a98 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	7c12      	ldrb	r2, [r2, #16]
 8008a8c:	f107 0108 	add.w	r1, r7, #8
 8008a90:	4610      	mov	r0, r2
 8008a92:	4798      	blx	r3
 8008a94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a96:	e091      	b.n	8008bbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a98:	6839      	ldr	r1, [r7, #0]
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fa94 	bl	8008fc8 <USBD_CtlError>
            err++;
 8008aa0:	7afb      	ldrb	r3, [r7, #11]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	72fb      	strb	r3, [r7, #11]
          break;
 8008aa6:	e089      	b.n	8008bbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00b      	beq.n	8008acc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	7c12      	ldrb	r2, [r2, #16]
 8008ac0:	f107 0108 	add.w	r1, r7, #8
 8008ac4:	4610      	mov	r0, r2
 8008ac6:	4798      	blx	r3
 8008ac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008aca:	e077      	b.n	8008bbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008acc:	6839      	ldr	r1, [r7, #0]
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 fa7a 	bl	8008fc8 <USBD_CtlError>
            err++;
 8008ad4:	7afb      	ldrb	r3, [r7, #11]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	72fb      	strb	r3, [r7, #11]
          break;
 8008ada:	e06f      	b.n	8008bbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00b      	beq.n	8008b00 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	7c12      	ldrb	r2, [r2, #16]
 8008af4:	f107 0108 	add.w	r1, r7, #8
 8008af8:	4610      	mov	r0, r2
 8008afa:	4798      	blx	r3
 8008afc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008afe:	e05d      	b.n	8008bbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b00:	6839      	ldr	r1, [r7, #0]
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fa60 	bl	8008fc8 <USBD_CtlError>
            err++;
 8008b08:	7afb      	ldrb	r3, [r7, #11]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	72fb      	strb	r3, [r7, #11]
          break;
 8008b0e:	e055      	b.n	8008bbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00b      	beq.n	8008b34 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	7c12      	ldrb	r2, [r2, #16]
 8008b28:	f107 0108 	add.w	r1, r7, #8
 8008b2c:	4610      	mov	r0, r2
 8008b2e:	4798      	blx	r3
 8008b30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b32:	e043      	b.n	8008bbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b34:	6839      	ldr	r1, [r7, #0]
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 fa46 	bl	8008fc8 <USBD_CtlError>
            err++;
 8008b3c:	7afb      	ldrb	r3, [r7, #11]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	72fb      	strb	r3, [r7, #11]
          break;
 8008b42:	e03b      	b.n	8008bbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b4a:	695b      	ldr	r3, [r3, #20]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00b      	beq.n	8008b68 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b56:	695b      	ldr	r3, [r3, #20]
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	7c12      	ldrb	r2, [r2, #16]
 8008b5c:	f107 0108 	add.w	r1, r7, #8
 8008b60:	4610      	mov	r0, r2
 8008b62:	4798      	blx	r3
 8008b64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b66:	e029      	b.n	8008bbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b68:	6839      	ldr	r1, [r7, #0]
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 fa2c 	bl	8008fc8 <USBD_CtlError>
            err++;
 8008b70:	7afb      	ldrb	r3, [r7, #11]
 8008b72:	3301      	adds	r3, #1
 8008b74:	72fb      	strb	r3, [r7, #11]
          break;
 8008b76:	e021      	b.n	8008bbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b7e:	699b      	ldr	r3, [r3, #24]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00b      	beq.n	8008b9c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b8a:	699b      	ldr	r3, [r3, #24]
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	7c12      	ldrb	r2, [r2, #16]
 8008b90:	f107 0108 	add.w	r1, r7, #8
 8008b94:	4610      	mov	r0, r2
 8008b96:	4798      	blx	r3
 8008b98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b9a:	e00f      	b.n	8008bbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b9c:	6839      	ldr	r1, [r7, #0]
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 fa12 	bl	8008fc8 <USBD_CtlError>
            err++;
 8008ba4:	7afb      	ldrb	r3, [r7, #11]
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	72fb      	strb	r3, [r7, #11]
          break;
 8008baa:	e007      	b.n	8008bbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008bac:	6839      	ldr	r1, [r7, #0]
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fa0a 	bl	8008fc8 <USBD_CtlError>
          err++;
 8008bb4:	7afb      	ldrb	r3, [r7, #11]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008bba:	e038      	b.n	8008c2e <USBD_GetDescriptor+0x286>
 8008bbc:	e037      	b.n	8008c2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	7c1b      	ldrb	r3, [r3, #16]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d109      	bne.n	8008bda <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bce:	f107 0208 	add.w	r2, r7, #8
 8008bd2:	4610      	mov	r0, r2
 8008bd4:	4798      	blx	r3
 8008bd6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008bd8:	e029      	b.n	8008c2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008bda:	6839      	ldr	r1, [r7, #0]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 f9f3 	bl	8008fc8 <USBD_CtlError>
        err++;
 8008be2:	7afb      	ldrb	r3, [r7, #11]
 8008be4:	3301      	adds	r3, #1
 8008be6:	72fb      	strb	r3, [r7, #11]
      break;
 8008be8:	e021      	b.n	8008c2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	7c1b      	ldrb	r3, [r3, #16]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d10d      	bne.n	8008c0e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bfa:	f107 0208 	add.w	r2, r7, #8
 8008bfe:	4610      	mov	r0, r2
 8008c00:	4798      	blx	r3
 8008c02:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	3301      	adds	r3, #1
 8008c08:	2207      	movs	r2, #7
 8008c0a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c0c:	e00f      	b.n	8008c2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008c0e:	6839      	ldr	r1, [r7, #0]
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 f9d9 	bl	8008fc8 <USBD_CtlError>
        err++;
 8008c16:	7afb      	ldrb	r3, [r7, #11]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	72fb      	strb	r3, [r7, #11]
      break;
 8008c1c:	e007      	b.n	8008c2e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008c1e:	6839      	ldr	r1, [r7, #0]
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 f9d1 	bl	8008fc8 <USBD_CtlError>
      err++;
 8008c26:	7afb      	ldrb	r3, [r7, #11]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	72fb      	strb	r3, [r7, #11]
      break;
 8008c2c:	bf00      	nop
  }

  if (err != 0U)
 8008c2e:	7afb      	ldrb	r3, [r7, #11]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d11c      	bne.n	8008c6e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008c34:	893b      	ldrh	r3, [r7, #8]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d011      	beq.n	8008c5e <USBD_GetDescriptor+0x2b6>
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	88db      	ldrh	r3, [r3, #6]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00d      	beq.n	8008c5e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	88da      	ldrh	r2, [r3, #6]
 8008c46:	893b      	ldrh	r3, [r7, #8]
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	bf28      	it	cs
 8008c4c:	4613      	movcs	r3, r2
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008c52:	893b      	ldrh	r3, [r7, #8]
 8008c54:	461a      	mov	r2, r3
 8008c56:	68f9      	ldr	r1, [r7, #12]
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fa1f 	bl	800909c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	88db      	ldrh	r3, [r3, #6]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d104      	bne.n	8008c70 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fa76 	bl	8009158 <USBD_CtlSendStatus>
 8008c6c:	e000      	b.n	8008c70 <USBD_GetDescriptor+0x2c8>
    return;
 8008c6e:	bf00      	nop
    }
  }
}
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop

08008c78 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	889b      	ldrh	r3, [r3, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d130      	bne.n	8008cec <USBD_SetAddress+0x74>
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	88db      	ldrh	r3, [r3, #6]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d12c      	bne.n	8008cec <USBD_SetAddress+0x74>
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	885b      	ldrh	r3, [r3, #2]
 8008c96:	2b7f      	cmp	r3, #127	@ 0x7f
 8008c98:	d828      	bhi.n	8008cec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	885b      	ldrh	r3, [r3, #2]
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ca4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cac:	2b03      	cmp	r3, #3
 8008cae:	d104      	bne.n	8008cba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008cb0:	6839      	ldr	r1, [r7, #0]
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f988 	bl	8008fc8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cb8:	e01d      	b.n	8008cf6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	7bfa      	ldrb	r2, [r7, #15]
 8008cbe:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008cc2:	7bfb      	ldrb	r3, [r7, #15]
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 ff87 	bl	8009bda <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 fa43 	bl	8009158 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008cd2:	7bfb      	ldrb	r3, [r7, #15]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d004      	beq.n	8008ce2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2202      	movs	r2, #2
 8008cdc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ce0:	e009      	b.n	8008cf6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cea:	e004      	b.n	8008cf6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008cec:	6839      	ldr	r1, [r7, #0]
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 f96a 	bl	8008fc8 <USBD_CtlError>
  }
}
 8008cf4:	bf00      	nop
 8008cf6:	bf00      	nop
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
	...

08008d00 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	885b      	ldrh	r3, [r3, #2]
 8008d0e:	b2da      	uxtb	r2, r3
 8008d10:	4b41      	ldr	r3, [pc, #260]	@ (8008e18 <USBD_SetConfig+0x118>)
 8008d12:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008d14:	4b40      	ldr	r3, [pc, #256]	@ (8008e18 <USBD_SetConfig+0x118>)
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d904      	bls.n	8008d26 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008d1c:	6839      	ldr	r1, [r7, #0]
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f952 	bl	8008fc8 <USBD_CtlError>
 8008d24:	e075      	b.n	8008e12 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d002      	beq.n	8008d36 <USBD_SetConfig+0x36>
 8008d30:	2b03      	cmp	r3, #3
 8008d32:	d023      	beq.n	8008d7c <USBD_SetConfig+0x7c>
 8008d34:	e062      	b.n	8008dfc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008d36:	4b38      	ldr	r3, [pc, #224]	@ (8008e18 <USBD_SetConfig+0x118>)
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d01a      	beq.n	8008d74 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008d3e:	4b36      	ldr	r3, [pc, #216]	@ (8008e18 <USBD_SetConfig+0x118>)
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	461a      	mov	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2203      	movs	r2, #3
 8008d4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008d50:	4b31      	ldr	r3, [pc, #196]	@ (8008e18 <USBD_SetConfig+0x118>)
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	4619      	mov	r1, r3
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f7ff f9e7 	bl	800812a <USBD_SetClassConfig>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d104      	bne.n	8008d6c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008d62:	6839      	ldr	r1, [r7, #0]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 f92f 	bl	8008fc8 <USBD_CtlError>
            return;
 8008d6a:	e052      	b.n	8008e12 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 f9f3 	bl	8009158 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008d72:	e04e      	b.n	8008e12 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 f9ef 	bl	8009158 <USBD_CtlSendStatus>
        break;
 8008d7a:	e04a      	b.n	8008e12 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008d7c:	4b26      	ldr	r3, [pc, #152]	@ (8008e18 <USBD_SetConfig+0x118>)
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d112      	bne.n	8008daa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2202      	movs	r2, #2
 8008d88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008d8c:	4b22      	ldr	r3, [pc, #136]	@ (8008e18 <USBD_SetConfig+0x118>)
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	461a      	mov	r2, r3
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008d96:	4b20      	ldr	r3, [pc, #128]	@ (8008e18 <USBD_SetConfig+0x118>)
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f7ff f9e3 	bl	8008168 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 f9d8 	bl	8009158 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008da8:	e033      	b.n	8008e12 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008daa:	4b1b      	ldr	r3, [pc, #108]	@ (8008e18 <USBD_SetConfig+0x118>)
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	461a      	mov	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d01d      	beq.n	8008df4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f7ff f9d1 	bl	8008168 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008dc6:	4b14      	ldr	r3, [pc, #80]	@ (8008e18 <USBD_SetConfig+0x118>)
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008dd0:	4b11      	ldr	r3, [pc, #68]	@ (8008e18 <USBD_SetConfig+0x118>)
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f7ff f9a7 	bl	800812a <USBD_SetClassConfig>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b02      	cmp	r3, #2
 8008de0:	d104      	bne.n	8008dec <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008de2:	6839      	ldr	r1, [r7, #0]
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f8ef 	bl	8008fc8 <USBD_CtlError>
            return;
 8008dea:	e012      	b.n	8008e12 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 f9b3 	bl	8009158 <USBD_CtlSendStatus>
        break;
 8008df2:	e00e      	b.n	8008e12 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f9af 	bl	8009158 <USBD_CtlSendStatus>
        break;
 8008dfa:	e00a      	b.n	8008e12 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008dfc:	6839      	ldr	r1, [r7, #0]
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 f8e2 	bl	8008fc8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008e04:	4b04      	ldr	r3, [pc, #16]	@ (8008e18 <USBD_SetConfig+0x118>)
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	4619      	mov	r1, r3
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f7ff f9ac 	bl	8008168 <USBD_ClrClassConfig>
        break;
 8008e10:	bf00      	nop
    }
  }
}
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	20000378 	.word	0x20000378

08008e1c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	88db      	ldrh	r3, [r3, #6]
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d004      	beq.n	8008e38 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008e2e:	6839      	ldr	r1, [r7, #0]
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 f8c9 	bl	8008fc8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008e36:	e022      	b.n	8008e7e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	dc02      	bgt.n	8008e48 <USBD_GetConfig+0x2c>
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	dc03      	bgt.n	8008e4e <USBD_GetConfig+0x32>
 8008e46:	e015      	b.n	8008e74 <USBD_GetConfig+0x58>
 8008e48:	2b03      	cmp	r3, #3
 8008e4a:	d00b      	beq.n	8008e64 <USBD_GetConfig+0x48>
 8008e4c:	e012      	b.n	8008e74 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	3308      	adds	r3, #8
 8008e58:	2201      	movs	r2, #1
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 f91d 	bl	800909c <USBD_CtlSendData>
        break;
 8008e62:	e00c      	b.n	8008e7e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	3304      	adds	r3, #4
 8008e68:	2201      	movs	r2, #1
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 f915 	bl	800909c <USBD_CtlSendData>
        break;
 8008e72:	e004      	b.n	8008e7e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008e74:	6839      	ldr	r1, [r7, #0]
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f8a6 	bl	8008fc8 <USBD_CtlError>
        break;
 8008e7c:	bf00      	nop
}
 8008e7e:	bf00      	nop
 8008e80:	3708      	adds	r7, #8
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b082      	sub	sp, #8
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
 8008e8e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e96:	3b01      	subs	r3, #1
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d81e      	bhi.n	8008eda <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	88db      	ldrh	r3, [r3, #6]
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	d004      	beq.n	8008eae <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008ea4:	6839      	ldr	r1, [r7, #0]
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f88e 	bl	8008fc8 <USBD_CtlError>
        break;
 8008eac:	e01a      	b.n	8008ee4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d005      	beq.n	8008eca <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	f043 0202 	orr.w	r2, r3, #2
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	330c      	adds	r3, #12
 8008ece:	2202      	movs	r2, #2
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 f8e2 	bl	800909c <USBD_CtlSendData>
      break;
 8008ed8:	e004      	b.n	8008ee4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008eda:	6839      	ldr	r1, [r7, #0]
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 f873 	bl	8008fc8 <USBD_CtlError>
      break;
 8008ee2:	bf00      	nop
  }
}
 8008ee4:	bf00      	nop
 8008ee6:	3708      	adds	r7, #8
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	885b      	ldrh	r3, [r3, #2]
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d106      	bne.n	8008f0c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2201      	movs	r2, #1
 8008f02:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 f926 	bl	8009158 <USBD_CtlSendStatus>
  }
}
 8008f0c:	bf00      	nop
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f24:	3b01      	subs	r3, #1
 8008f26:	2b02      	cmp	r3, #2
 8008f28:	d80b      	bhi.n	8008f42 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	885b      	ldrh	r3, [r3, #2]
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d10c      	bne.n	8008f4c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 f90c 	bl	8009158 <USBD_CtlSendStatus>
      }
      break;
 8008f40:	e004      	b.n	8008f4c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008f42:	6839      	ldr	r1, [r7, #0]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 f83f 	bl	8008fc8 <USBD_CtlError>
      break;
 8008f4a:	e000      	b.n	8008f4e <USBD_ClrFeature+0x3a>
      break;
 8008f4c:	bf00      	nop
  }
}
 8008f4e:	bf00      	nop
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008f56:	b480      	push	{r7}
 8008f58:	b083      	sub	sp, #12
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	781a      	ldrb	r2, [r3, #0]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	785a      	ldrb	r2, [r3, #1]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	3302      	adds	r3, #2
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	461a      	mov	r2, r3
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	3303      	adds	r3, #3
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	021b      	lsls	r3, r3, #8
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	4413      	add	r3, r2
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	3304      	adds	r3, #4
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	461a      	mov	r2, r3
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	3305      	adds	r3, #5
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	021b      	lsls	r3, r3, #8
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	4413      	add	r3, r2
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	3306      	adds	r3, #6
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	461a      	mov	r2, r3
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	3307      	adds	r3, #7
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	021b      	lsls	r3, r3, #8
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	4413      	add	r3, r2
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	80da      	strh	r2, [r3, #6]

}
 8008fbe:	bf00      	nop
 8008fc0:	370c      	adds	r7, #12
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bc80      	pop	{r7}
 8008fc6:	4770      	bx	lr

08008fc8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008fd2:	2180      	movs	r1, #128	@ 0x80
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 fd97 	bl	8009b08 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008fda:	2100      	movs	r1, #0
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 fd93 	bl	8009b08 <USBD_LL_StallEP>
}
 8008fe2:	bf00      	nop
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b086      	sub	sp, #24
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	60f8      	str	r0, [r7, #12]
 8008ff2:	60b9      	str	r1, [r7, #8]
 8008ff4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d032      	beq.n	8009066 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f000 f834 	bl	800906e <USBD_GetLen>
 8009006:	4603      	mov	r3, r0
 8009008:	3301      	adds	r3, #1
 800900a:	b29b      	uxth	r3, r3
 800900c:	005b      	lsls	r3, r3, #1
 800900e:	b29a      	uxth	r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009014:	7dfb      	ldrb	r3, [r7, #23]
 8009016:	1c5a      	adds	r2, r3, #1
 8009018:	75fa      	strb	r2, [r7, #23]
 800901a:	461a      	mov	r2, r3
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	4413      	add	r3, r2
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	7812      	ldrb	r2, [r2, #0]
 8009024:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009026:	7dfb      	ldrb	r3, [r7, #23]
 8009028:	1c5a      	adds	r2, r3, #1
 800902a:	75fa      	strb	r2, [r7, #23]
 800902c:	461a      	mov	r2, r3
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	4413      	add	r3, r2
 8009032:	2203      	movs	r2, #3
 8009034:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009036:	e012      	b.n	800905e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	1c5a      	adds	r2, r3, #1
 800903c:	60fa      	str	r2, [r7, #12]
 800903e:	7dfa      	ldrb	r2, [r7, #23]
 8009040:	1c51      	adds	r1, r2, #1
 8009042:	75f9      	strb	r1, [r7, #23]
 8009044:	4611      	mov	r1, r2
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	440a      	add	r2, r1
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800904e:	7dfb      	ldrb	r3, [r7, #23]
 8009050:	1c5a      	adds	r2, r3, #1
 8009052:	75fa      	strb	r2, [r7, #23]
 8009054:	461a      	mov	r2, r3
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	4413      	add	r3, r2
 800905a:	2200      	movs	r2, #0
 800905c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1e8      	bne.n	8009038 <USBD_GetString+0x4e>
    }
  }
}
 8009066:	bf00      	nop
 8009068:	3718      	adds	r7, #24
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800906e:	b480      	push	{r7}
 8009070:	b085      	sub	sp, #20
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009076:	2300      	movs	r3, #0
 8009078:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800907a:	e005      	b.n	8009088 <USBD_GetLen+0x1a>
  {
    len++;
 800907c:	7bfb      	ldrb	r3, [r7, #15]
 800907e:	3301      	adds	r3, #1
 8009080:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	3301      	adds	r3, #1
 8009086:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d1f5      	bne.n	800907c <USBD_GetLen+0xe>
  }

  return len;
 8009090:	7bfb      	ldrb	r3, [r7, #15]
}
 8009092:	4618      	mov	r0, r3
 8009094:	3714      	adds	r7, #20
 8009096:	46bd      	mov	sp, r7
 8009098:	bc80      	pop	{r7}
 800909a:	4770      	bx	lr

0800909c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	4613      	mov	r3, r2
 80090a8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2202      	movs	r2, #2
 80090ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80090b2:	88fa      	ldrh	r2, [r7, #6]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80090b8:	88fa      	ldrh	r2, [r7, #6]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090be:	88fb      	ldrh	r3, [r7, #6]
 80090c0:	68ba      	ldr	r2, [r7, #8]
 80090c2:	2100      	movs	r1, #0
 80090c4:	68f8      	ldr	r0, [r7, #12]
 80090c6:	f000 fda7 	bl	8009c18 <USBD_LL_Transmit>

  return USBD_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3710      	adds	r7, #16
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	4613      	mov	r3, r2
 80090e0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090e2:	88fb      	ldrh	r3, [r7, #6]
 80090e4:	68ba      	ldr	r2, [r7, #8]
 80090e6:	2100      	movs	r1, #0
 80090e8:	68f8      	ldr	r0, [r7, #12]
 80090ea:	f000 fd95 	bl	8009c18 <USBD_LL_Transmit>

  return USBD_OK;
 80090ee:	2300      	movs	r3, #0
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	4613      	mov	r3, r2
 8009104:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2203      	movs	r2, #3
 800910a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800910e:	88fa      	ldrh	r2, [r7, #6]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009116:	88fa      	ldrh	r2, [r7, #6]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800911e:	88fb      	ldrh	r3, [r7, #6]
 8009120:	68ba      	ldr	r2, [r7, #8]
 8009122:	2100      	movs	r1, #0
 8009124:	68f8      	ldr	r0, [r7, #12]
 8009126:	f000 fd9a 	bl	8009c5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	4613      	mov	r3, r2
 8009140:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009142:	88fb      	ldrh	r3, [r7, #6]
 8009144:	68ba      	ldr	r2, [r7, #8]
 8009146:	2100      	movs	r1, #0
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	f000 fd88 	bl	8009c5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3710      	adds	r7, #16
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2204      	movs	r2, #4
 8009164:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009168:	2300      	movs	r3, #0
 800916a:	2200      	movs	r2, #0
 800916c:	2100      	movs	r1, #0
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fd52 	bl	8009c18 <USBD_LL_Transmit>

  return USBD_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3708      	adds	r7, #8
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b082      	sub	sp, #8
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2205      	movs	r2, #5
 800918a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800918e:	2300      	movs	r3, #0
 8009190:	2200      	movs	r2, #0
 8009192:	2100      	movs	r1, #0
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 fd62 	bl	8009c5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	3708      	adds	r7, #8
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80091a8:	2200      	movs	r2, #0
 80091aa:	4912      	ldr	r1, [pc, #72]	@ (80091f4 <MX_USB_DEVICE_Init+0x50>)
 80091ac:	4812      	ldr	r0, [pc, #72]	@ (80091f8 <MX_USB_DEVICE_Init+0x54>)
 80091ae:	f7fe ff62 	bl	8008076 <USBD_Init>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d001      	beq.n	80091bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80091b8:	f7f7 f905 	bl	80003c6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80091bc:	490f      	ldr	r1, [pc, #60]	@ (80091fc <MX_USB_DEVICE_Init+0x58>)
 80091be:	480e      	ldr	r0, [pc, #56]	@ (80091f8 <MX_USB_DEVICE_Init+0x54>)
 80091c0:	f7fe ff84 	bl	80080cc <USBD_RegisterClass>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d001      	beq.n	80091ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80091ca:	f7f7 f8fc 	bl	80003c6 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80091ce:	490c      	ldr	r1, [pc, #48]	@ (8009200 <MX_USB_DEVICE_Init+0x5c>)
 80091d0:	4809      	ldr	r0, [pc, #36]	@ (80091f8 <MX_USB_DEVICE_Init+0x54>)
 80091d2:	f7fe feb5 	bl	8007f40 <USBD_CDC_RegisterInterface>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d001      	beq.n	80091e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80091dc:	f7f7 f8f3 	bl	80003c6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80091e0:	4805      	ldr	r0, [pc, #20]	@ (80091f8 <MX_USB_DEVICE_Init+0x54>)
 80091e2:	f7fe ff8c 	bl	80080fe <USBD_Start>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d001      	beq.n	80091f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80091ec:	f7f7 f8eb 	bl	80003c6 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80091f0:	bf00      	nop
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	20000140 	.word	0x20000140
 80091f8:	2000037c 	.word	0x2000037c
 80091fc:	20000020 	.word	0x20000020
 8009200:	20000130 	.word	0x20000130

08009204 <cdcAvailable>:
uint32_t rx_len = 512;
uint8_t rx_buf[512];
bool rx_full = false;

uint32_t cdcAvailable(void)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
    uint32_t ret;

    ret = (rx_in - rx_out) % rx_len;
 800920a:	4b09      	ldr	r3, [pc, #36]	@ (8009230 <cdcAvailable+0x2c>)
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	4b09      	ldr	r3, [pc, #36]	@ (8009234 <cdcAvailable+0x30>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	4a08      	ldr	r2, [pc, #32]	@ (8009238 <cdcAvailable+0x34>)
 8009216:	6812      	ldr	r2, [r2, #0]
 8009218:	fbb3 f1f2 	udiv	r1, r3, r2
 800921c:	fb01 f202 	mul.w	r2, r1, r2
 8009220:	1a9b      	subs	r3, r3, r2
 8009222:	607b      	str	r3, [r7, #4]

    return ret;
 8009224:	687b      	ldr	r3, [r7, #4]
}
 8009226:	4618      	mov	r0, r3
 8009228:	370c      	adds	r7, #12
 800922a:	46bd      	mov	sp, r7
 800922c:	bc80      	pop	{r7}
 800922e:	4770      	bx	lr
 8009230:	20000640 	.word	0x20000640
 8009234:	20000644 	.word	0x20000644
 8009238:	2000012c 	.word	0x2000012c

0800923c <cdcRead>:

uint8_t cdcRead(void)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
    uint8_t ret;

    ret = rx_buf[rx_out];
 8009242:	4b0e      	ldr	r3, [pc, #56]	@ (800927c <cdcRead+0x40>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a0e      	ldr	r2, [pc, #56]	@ (8009280 <cdcRead+0x44>)
 8009248:	5cd3      	ldrb	r3, [r2, r3]
 800924a:	71fb      	strb	r3, [r7, #7]

    if (rx_out != rx_in)
 800924c:	4b0b      	ldr	r3, [pc, #44]	@ (800927c <cdcRead+0x40>)
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	4b0c      	ldr	r3, [pc, #48]	@ (8009284 <cdcRead+0x48>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	429a      	cmp	r2, r3
 8009256:	d00b      	beq.n	8009270 <cdcRead+0x34>
    {
        rx_out = (rx_out + 1) % rx_len;
 8009258:	4b08      	ldr	r3, [pc, #32]	@ (800927c <cdcRead+0x40>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	3301      	adds	r3, #1
 800925e:	4a0a      	ldr	r2, [pc, #40]	@ (8009288 <cdcRead+0x4c>)
 8009260:	6812      	ldr	r2, [r2, #0]
 8009262:	fbb3 f1f2 	udiv	r1, r3, r2
 8009266:	fb01 f202 	mul.w	r2, r1, r2
 800926a:	1a9b      	subs	r3, r3, r2
 800926c:	4a03      	ldr	r2, [pc, #12]	@ (800927c <cdcRead+0x40>)
 800926e:	6013      	str	r3, [r2, #0]
    }

    return ret;
 8009270:	79fb      	ldrb	r3, [r7, #7]
}
 8009272:	4618      	mov	r0, r3
 8009274:	370c      	adds	r7, #12
 8009276:	46bd      	mov	sp, r7
 8009278:	bc80      	pop	{r7}
 800927a:	4770      	bx	lr
 800927c:	20000644 	.word	0x20000644
 8009280:	20000648 	.word	0x20000648
 8009284:	20000640 	.word	0x20000640
 8009288:	2000012c 	.word	0x2000012c

0800928c <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	4603      	mov	r3, r0
 8009294:	71fb      	strb	r3, [r7, #7]
    uint32_t next_rx_in;

    rx_buf[rx_in] = rx_data;
 8009296:	4b0e      	ldr	r3, [pc, #56]	@ (80092d0 <cdcDataIn+0x44>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	490e      	ldr	r1, [pc, #56]	@ (80092d4 <cdcDataIn+0x48>)
 800929c:	79fa      	ldrb	r2, [r7, #7]
 800929e:	54ca      	strb	r2, [r1, r3]

    next_rx_in = (rx_in + 1) % rx_len;
 80092a0:	4b0b      	ldr	r3, [pc, #44]	@ (80092d0 <cdcDataIn+0x44>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	3301      	adds	r3, #1
 80092a6:	4a0c      	ldr	r2, [pc, #48]	@ (80092d8 <cdcDataIn+0x4c>)
 80092a8:	6812      	ldr	r2, [r2, #0]
 80092aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80092ae:	fb01 f202 	mul.w	r2, r1, r2
 80092b2:	1a9b      	subs	r3, r3, r2
 80092b4:	60fb      	str	r3, [r7, #12]
    if (next_rx_in != rx_out)
 80092b6:	4b09      	ldr	r3, [pc, #36]	@ (80092dc <cdcDataIn+0x50>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d002      	beq.n	80092c6 <cdcDataIn+0x3a>
    {
        rx_in = next_rx_in;
 80092c0:	4a03      	ldr	r2, [pc, #12]	@ (80092d0 <cdcDataIn+0x44>)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6013      	str	r3, [r2, #0]
    }
}
 80092c6:	bf00      	nop
 80092c8:	3714      	adds	r7, #20
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bc80      	pop	{r7}
 80092ce:	4770      	bx	lr
 80092d0:	20000640 	.word	0x20000640
 80092d4:	20000648 	.word	0x20000648
 80092d8:	2000012c 	.word	0x2000012c
 80092dc:	20000644 	.word	0x20000644

080092e0 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
    uint32_t pre_time;
    uint8_t ret;

    pre_time = millis();
 80092ea:	f7f7 f806 	bl	80002fa <millis>
 80092ee:	60f8      	str	r0, [r7, #12]
    while (1)
    {
        ret = CDC_Transmit_FS(p_data, length);
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	4619      	mov	r1, r3
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 f956 	bl	80095a8 <CDC_Transmit_FS>
 80092fc:	4603      	mov	r3, r0
 80092fe:	72fb      	strb	r3, [r7, #11]

        if (ret == USBD_OK)
 8009300:	7afb      	ldrb	r3, [r7, #11]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d101      	bne.n	800930a <cdcWrite+0x2a>
        {
            return length;
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	e00e      	b.n	8009328 <cdcWrite+0x48>
        }
        else if (ret == USBD_FAIL)
 800930a:	7afb      	ldrb	r3, [r7, #11]
 800930c:	2b02      	cmp	r3, #2
 800930e:	d101      	bne.n	8009314 <cdcWrite+0x34>
        {
            return 0;
 8009310:	2300      	movs	r3, #0
 8009312:	e009      	b.n	8009328 <cdcWrite+0x48>
        }

        if (millis() - pre_time >= 100)
 8009314:	f7f6 fff1 	bl	80002fa <millis>
 8009318:	4602      	mov	r2, r0
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	1ad3      	subs	r3, r2, r3
 800931e:	2b63      	cmp	r3, #99	@ 0x63
 8009320:	d800      	bhi.n	8009324 <cdcWrite+0x44>
        ret = CDC_Transmit_FS(p_data, length);
 8009322:	e7e5      	b.n	80092f0 <cdcWrite+0x10>
        {
            break;
 8009324:	bf00      	nop
        }
    }
    return 0;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <cdcGetBaud>:

uint32_t cdcGetBaud(void)
{
 8009330:	b480      	push	{r7}
 8009332:	af00      	add	r7, sp, #0
    return LineCoding.bitrate;
 8009334:	4b02      	ldr	r3, [pc, #8]	@ (8009340 <cdcGetBaud+0x10>)
 8009336:	681b      	ldr	r3, [r3, #0]
}
 8009338:	4618      	mov	r0, r3
 800933a:	46bd      	mov	sp, r7
 800933c:	bc80      	pop	{r7}
 800933e:	4770      	bx	lr
 8009340:	20000124 	.word	0x20000124

08009344 <USBD_CDC_SOF>:

uint8_t USBD_CDC_SOF(struct _USBD_HandleTypeDef *pdev)
{
 8009344:	b590      	push	{r4, r7, lr}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
    if (rx_full == true)
 800934c:	4b0e      	ldr	r3, [pc, #56]	@ (8009388 <USBD_CDC_SOF+0x44>)
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d014      	beq.n	800937e <USBD_CDC_SOF+0x3a>
    {
        uint32_t buf_len;

        // 수신 버퍼에서 비어있는 데이터 양
        buf_len = (rx_len - cdcAvailable()) - 1;
 8009354:	4b0d      	ldr	r3, [pc, #52]	@ (800938c <USBD_CDC_SOF+0x48>)
 8009356:	681c      	ldr	r4, [r3, #0]
 8009358:	f7ff ff54 	bl	8009204 <cdcAvailable>
 800935c:	4603      	mov	r3, r0
 800935e:	1ae3      	subs	r3, r4, r3
 8009360:	3b01      	subs	r3, #1
 8009362:	60fb      	str	r3, [r7, #12]

        if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2b3f      	cmp	r3, #63	@ 0x3f
 8009368:	d906      	bls.n	8009378 <USBD_CDC_SOF+0x34>
        {
            // 다음 데이터도 전송
            USBD_CDC_ReceivePacket(pdev);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f7fe fe59 	bl	8008022 <USBD_CDC_ReceivePacket>
            rx_full = false;
 8009370:	4b05      	ldr	r3, [pc, #20]	@ (8009388 <USBD_CDC_SOF+0x44>)
 8009372:	2200      	movs	r2, #0
 8009374:	701a      	strb	r2, [r3, #0]
 8009376:	e002      	b.n	800937e <USBD_CDC_SOF+0x3a>
        }
        else
        {
            // 버퍼 용량 부족, 대기
            rx_full = true;
 8009378:	4b03      	ldr	r3, [pc, #12]	@ (8009388 <USBD_CDC_SOF+0x44>)
 800937a:	2201      	movs	r2, #1
 800937c:	701a      	strb	r2, [r3, #0]
        }
    }
    return 0;
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	3714      	adds	r7, #20
 8009384:	46bd      	mov	sp, r7
 8009386:	bd90      	pop	{r4, r7, pc}
 8009388:	20000848 	.word	0x20000848
 800938c:	2000012c 	.word	0x2000012c

08009390 <CDC_Init_FS>:
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009394:	2200      	movs	r2, #0
 8009396:	4905      	ldr	r1, [pc, #20]	@ (80093ac <CDC_Init_FS+0x1c>)
 8009398:	4805      	ldr	r0, [pc, #20]	@ (80093b0 <CDC_Init_FS+0x20>)
 800939a:	f7fe fde7 	bl	8007f6c <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800939e:	4905      	ldr	r1, [pc, #20]	@ (80093b4 <CDC_Init_FS+0x24>)
 80093a0:	4803      	ldr	r0, [pc, #12]	@ (80093b0 <CDC_Init_FS+0x20>)
 80093a2:	f7fe fdfc 	bl	8007f9e <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 80093a6:	2300      	movs	r3, #0
    /* USER CODE END 3 */
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	20000a4c 	.word	0x20000a4c
 80093b0:	2000037c 	.word	0x2000037c
 80093b4:	2000084c 	.word	0x2000084c

080093b8 <CDC_DeInit_FS>:
/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void)
{
 80093b8:	b480      	push	{r7}
 80093ba:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 4 */
    return (USBD_OK);
 80093bc:	2300      	movs	r3, #0
    /* USER CODE END 4 */
}
 80093be:	4618      	mov	r0, r3
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bc80      	pop	{r7}
 80093c4:	4770      	bx	lr
	...

080093c8 <CDC_Control_FS>:
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b083      	sub	sp, #12
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	4603      	mov	r3, r0
 80093d0:	6039      	str	r1, [r7, #0]
 80093d2:	71fb      	strb	r3, [r7, #7]
 80093d4:	4613      	mov	r3, r2
 80093d6:	80bb      	strh	r3, [r7, #4]
    /* USER CODE BEGIN 5 */
    switch (cmd)
 80093d8:	79fb      	ldrb	r3, [r7, #7]
 80093da:	2b23      	cmp	r3, #35	@ 0x23
 80093dc:	f200 80a3 	bhi.w	8009526 <CDC_Control_FS+0x15e>
 80093e0:	a201      	add	r2, pc, #4	@ (adr r2, 80093e8 <CDC_Control_FS+0x20>)
 80093e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e6:	bf00      	nop
 80093e8:	08009527 	.word	0x08009527
 80093ec:	08009527 	.word	0x08009527
 80093f0:	08009527 	.word	0x08009527
 80093f4:	08009527 	.word	0x08009527
 80093f8:	08009527 	.word	0x08009527
 80093fc:	08009527 	.word	0x08009527
 8009400:	08009527 	.word	0x08009527
 8009404:	08009527 	.word	0x08009527
 8009408:	08009527 	.word	0x08009527
 800940c:	08009527 	.word	0x08009527
 8009410:	08009527 	.word	0x08009527
 8009414:	08009527 	.word	0x08009527
 8009418:	08009527 	.word	0x08009527
 800941c:	08009527 	.word	0x08009527
 8009420:	08009527 	.word	0x08009527
 8009424:	08009527 	.word	0x08009527
 8009428:	08009527 	.word	0x08009527
 800942c:	08009527 	.word	0x08009527
 8009430:	08009527 	.word	0x08009527
 8009434:	08009527 	.word	0x08009527
 8009438:	08009527 	.word	0x08009527
 800943c:	08009527 	.word	0x08009527
 8009440:	08009527 	.word	0x08009527
 8009444:	08009527 	.word	0x08009527
 8009448:	08009527 	.word	0x08009527
 800944c:	08009527 	.word	0x08009527
 8009450:	08009527 	.word	0x08009527
 8009454:	08009527 	.word	0x08009527
 8009458:	08009527 	.word	0x08009527
 800945c:	08009527 	.word	0x08009527
 8009460:	08009527 	.word	0x08009527
 8009464:	08009527 	.word	0x08009527
 8009468:	08009479 	.word	0x08009479
 800946c:	080094d3 	.word	0x080094d3
 8009470:	08009527 	.word	0x08009527
 8009474:	08009527 	.word	0x08009527
        /*                                        3 - Mark */
        /*                                        4 - Space */
        /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16). */
        /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        LineCoding.bitrate = (uint32_t)(pbuf[0]);
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	461a      	mov	r2, r3
 800947e:	4b2d      	ldr	r3, [pc, #180]	@ (8009534 <CDC_Control_FS+0x16c>)
 8009480:	601a      	str	r2, [r3, #0]
        LineCoding.bitrate |= (uint32_t)(pbuf[1] << 8);
 8009482:	4b2c      	ldr	r3, [pc, #176]	@ (8009534 <CDC_Control_FS+0x16c>)
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	3301      	adds	r3, #1
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	021b      	lsls	r3, r3, #8
 800948e:	4313      	orrs	r3, r2
 8009490:	4a28      	ldr	r2, [pc, #160]	@ (8009534 <CDC_Control_FS+0x16c>)
 8009492:	6013      	str	r3, [r2, #0]
        LineCoding.bitrate |= (uint32_t)(pbuf[2] << 16);
 8009494:	4b27      	ldr	r3, [pc, #156]	@ (8009534 <CDC_Control_FS+0x16c>)
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	3302      	adds	r3, #2
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	041b      	lsls	r3, r3, #16
 80094a0:	4313      	orrs	r3, r2
 80094a2:	4a24      	ldr	r2, [pc, #144]	@ (8009534 <CDC_Control_FS+0x16c>)
 80094a4:	6013      	str	r3, [r2, #0]
        LineCoding.bitrate |= (uint32_t)(pbuf[3] << 24);
 80094a6:	4b23      	ldr	r3, [pc, #140]	@ (8009534 <CDC_Control_FS+0x16c>)
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	3303      	adds	r3, #3
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	061b      	lsls	r3, r3, #24
 80094b2:	4313      	orrs	r3, r2
 80094b4:	4a1f      	ldr	r2, [pc, #124]	@ (8009534 <CDC_Control_FS+0x16c>)
 80094b6:	6013      	str	r3, [r2, #0]
        LineCoding.format     = pbuf[4];
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	791a      	ldrb	r2, [r3, #4]
 80094bc:	4b1d      	ldr	r3, [pc, #116]	@ (8009534 <CDC_Control_FS+0x16c>)
 80094be:	711a      	strb	r2, [r3, #4]
        LineCoding.paritytype = pbuf[5];
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	795a      	ldrb	r2, [r3, #5]
 80094c4:	4b1b      	ldr	r3, [pc, #108]	@ (8009534 <CDC_Control_FS+0x16c>)
 80094c6:	715a      	strb	r2, [r3, #5]
        LineCoding.datatype   = pbuf[6];
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	799a      	ldrb	r2, [r3, #6]
 80094cc:	4b19      	ldr	r3, [pc, #100]	@ (8009534 <CDC_Control_FS+0x16c>)
 80094ce:	719a      	strb	r2, [r3, #6]
        break;
 80094d0:	e02a      	b.n	8009528 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
        pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80094d2:	4b18      	ldr	r3, [pc, #96]	@ (8009534 <CDC_Control_FS+0x16c>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	b2da      	uxtb	r2, r3
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	701a      	strb	r2, [r3, #0]
        pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 80094dc:	4b15      	ldr	r3, [pc, #84]	@ (8009534 <CDC_Control_FS+0x16c>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	0a1a      	lsrs	r2, r3, #8
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	3301      	adds	r3, #1
 80094e6:	b2d2      	uxtb	r2, r2
 80094e8:	701a      	strb	r2, [r3, #0]
        pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 80094ea:	4b12      	ldr	r3, [pc, #72]	@ (8009534 <CDC_Control_FS+0x16c>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	0c1a      	lsrs	r2, r3, #16
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	3302      	adds	r3, #2
 80094f4:	b2d2      	uxtb	r2, r2
 80094f6:	701a      	strb	r2, [r3, #0]
        pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 80094f8:	4b0e      	ldr	r3, [pc, #56]	@ (8009534 <CDC_Control_FS+0x16c>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	0e1a      	lsrs	r2, r3, #24
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	3303      	adds	r3, #3
 8009502:	b2d2      	uxtb	r2, r2
 8009504:	701a      	strb	r2, [r3, #0]
        pbuf[4] = LineCoding.format;
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	3304      	adds	r3, #4
 800950a:	4a0a      	ldr	r2, [pc, #40]	@ (8009534 <CDC_Control_FS+0x16c>)
 800950c:	7912      	ldrb	r2, [r2, #4]
 800950e:	701a      	strb	r2, [r3, #0]
        pbuf[5] = LineCoding.paritytype;
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	3305      	adds	r3, #5
 8009514:	4a07      	ldr	r2, [pc, #28]	@ (8009534 <CDC_Control_FS+0x16c>)
 8009516:	7952      	ldrb	r2, [r2, #5]
 8009518:	701a      	strb	r2, [r3, #0]
        pbuf[6] = LineCoding.datatype;
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	3306      	adds	r3, #6
 800951e:	4a05      	ldr	r2, [pc, #20]	@ (8009534 <CDC_Control_FS+0x16c>)
 8009520:	7992      	ldrb	r2, [r2, #6]
 8009522:	701a      	strb	r2, [r3, #0]
        break;
 8009524:	e000      	b.n	8009528 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 8009526:	bf00      	nop
    }

    return (USBD_OK);
 8009528:	2300      	movs	r3, #0
    /* USER CODE END 5 */
}
 800952a:	4618      	mov	r0, r3
 800952c:	370c      	adds	r7, #12
 800952e:	46bd      	mov	sp, r7
 8009530:	bc80      	pop	{r7}
 8009532:	4770      	bx	lr
 8009534:	20000124 	.word	0x20000124

08009538 <CDC_Receive_FS>:
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len)
{
 8009538:	b590      	push	{r4, r7, lr}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
    /* USER CODE BEGIN 6 */

    for (int i = 0; i < *Len; i++)
 8009542:	2300      	movs	r3, #0
 8009544:	60fb      	str	r3, [r7, #12]
 8009546:	e009      	b.n	800955c <CDC_Receive_FS+0x24>
    {
        cdcDataIn(Buf[i]);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	4413      	add	r3, r2
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	4618      	mov	r0, r3
 8009552:	f7ff fe9b 	bl	800928c <cdcDataIn>
    for (int i = 0; i < *Len; i++)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	3301      	adds	r3, #1
 800955a:	60fb      	str	r3, [r7, #12]
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	429a      	cmp	r2, r3
 8009564:	d8f0      	bhi.n	8009548 <CDC_Receive_FS+0x10>
    }

    uint32_t buf_len;

    // 수신 버퍼에서 비어있는 데이터 양
    buf_len = (rx_len - cdcAvailable()) - 1;
 8009566:	4b0d      	ldr	r3, [pc, #52]	@ (800959c <CDC_Receive_FS+0x64>)
 8009568:	681c      	ldr	r4, [r3, #0]
 800956a:	f7ff fe4b 	bl	8009204 <cdcAvailable>
 800956e:	4603      	mov	r3, r0
 8009570:	1ae3      	subs	r3, r4, r3
 8009572:	3b01      	subs	r3, #1
 8009574:	60bb      	str	r3, [r7, #8]

    if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	2b3f      	cmp	r3, #63	@ 0x3f
 800957a:	d907      	bls.n	800958c <CDC_Receive_FS+0x54>
    {
        // 다음 데이터도 전송
        USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800957c:	6879      	ldr	r1, [r7, #4]
 800957e:	4808      	ldr	r0, [pc, #32]	@ (80095a0 <CDC_Receive_FS+0x68>)
 8009580:	f7fe fd0d 	bl	8007f9e <USBD_CDC_SetRxBuffer>
        USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009584:	4806      	ldr	r0, [pc, #24]	@ (80095a0 <CDC_Receive_FS+0x68>)
 8009586:	f7fe fd4c 	bl	8008022 <USBD_CDC_ReceivePacket>
 800958a:	e002      	b.n	8009592 <CDC_Receive_FS+0x5a>
    }
    else
    {
        // 버퍼 용량 부족, 대기
        rx_full = true;
 800958c:	4b05      	ldr	r3, [pc, #20]	@ (80095a4 <CDC_Receive_FS+0x6c>)
 800958e:	2201      	movs	r2, #1
 8009590:	701a      	strb	r2, [r3, #0]
    }

    return (USBD_OK);
 8009592:	2300      	movs	r3, #0
    /* USER CODE END 6 */
}
 8009594:	4618      	mov	r0, r3
 8009596:	3714      	adds	r7, #20
 8009598:	46bd      	mov	sp, r7
 800959a:	bd90      	pop	{r4, r7, pc}
 800959c:	2000012c 	.word	0x2000012c
 80095a0:	2000037c 	.word	0x2000037c
 80095a4:	20000848 	.word	0x20000848

080095a8 <CDC_Transmit_FS>:
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	460b      	mov	r3, r1
 80095b2:	807b      	strh	r3, [r7, #2]
    uint8_t result = USBD_OK;
 80095b4:	2300      	movs	r3, #0
 80095b6:	73fb      	strb	r3, [r7, #15]
    /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef *hcdc =
 80095b8:	4b0d      	ldr	r3, [pc, #52]	@ (80095f0 <CDC_Transmit_FS+0x48>)
 80095ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095be:	60bb      	str	r3, [r7, #8]
        (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
    if (hcdc->TxState != 0)
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d001      	beq.n	80095ce <CDC_Transmit_FS+0x26>
    {
        return USBD_BUSY;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e00b      	b.n	80095e6 <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80095ce:	887b      	ldrh	r3, [r7, #2]
 80095d0:	461a      	mov	r2, r3
 80095d2:	6879      	ldr	r1, [r7, #4]
 80095d4:	4806      	ldr	r0, [pc, #24]	@ (80095f0 <CDC_Transmit_FS+0x48>)
 80095d6:	f7fe fcc9 	bl	8007f6c <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80095da:	4805      	ldr	r0, [pc, #20]	@ (80095f0 <CDC_Transmit_FS+0x48>)
 80095dc:	f7fe fcf2 	bl	8007fc4 <USBD_CDC_TransmitPacket>
 80095e0:	4603      	mov	r3, r0
 80095e2:	73fb      	strb	r3, [r7, #15]
    /* USER CODE END 7 */
    return result;
 80095e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	2000037c 	.word	0x2000037c

080095f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	4603      	mov	r3, r0
 80095fc:	6039      	str	r1, [r7, #0]
 80095fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	2212      	movs	r2, #18
 8009604:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009606:	4b03      	ldr	r3, [pc, #12]	@ (8009614 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009608:	4618      	mov	r0, r3
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	bc80      	pop	{r7}
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	2000015c 	.word	0x2000015c

08009618 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	4603      	mov	r3, r0
 8009620:	6039      	str	r1, [r7, #0]
 8009622:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	2204      	movs	r2, #4
 8009628:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800962a:	4b03      	ldr	r3, [pc, #12]	@ (8009638 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800962c:	4618      	mov	r0, r3
 800962e:	370c      	adds	r7, #12
 8009630:	46bd      	mov	sp, r7
 8009632:	bc80      	pop	{r7}
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop
 8009638:	20000170 	.word	0x20000170

0800963c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	4603      	mov	r3, r0
 8009644:	6039      	str	r1, [r7, #0]
 8009646:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009648:	79fb      	ldrb	r3, [r7, #7]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d105      	bne.n	800965a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800964e:	683a      	ldr	r2, [r7, #0]
 8009650:	4907      	ldr	r1, [pc, #28]	@ (8009670 <USBD_FS_ProductStrDescriptor+0x34>)
 8009652:	4808      	ldr	r0, [pc, #32]	@ (8009674 <USBD_FS_ProductStrDescriptor+0x38>)
 8009654:	f7ff fcc9 	bl	8008fea <USBD_GetString>
 8009658:	e004      	b.n	8009664 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800965a:	683a      	ldr	r2, [r7, #0]
 800965c:	4904      	ldr	r1, [pc, #16]	@ (8009670 <USBD_FS_ProductStrDescriptor+0x34>)
 800965e:	4805      	ldr	r0, [pc, #20]	@ (8009674 <USBD_FS_ProductStrDescriptor+0x38>)
 8009660:	f7ff fcc3 	bl	8008fea <USBD_GetString>
  }
  return USBD_StrDesc;
 8009664:	4b02      	ldr	r3, [pc, #8]	@ (8009670 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009666:	4618      	mov	r0, r3
 8009668:	3708      	adds	r7, #8
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	20000c4c 	.word	0x20000c4c
 8009674:	08009dec 	.word	0x08009dec

08009678 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	4603      	mov	r3, r0
 8009680:	6039      	str	r1, [r7, #0]
 8009682:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009684:	683a      	ldr	r2, [r7, #0]
 8009686:	4904      	ldr	r1, [pc, #16]	@ (8009698 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009688:	4804      	ldr	r0, [pc, #16]	@ (800969c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800968a:	f7ff fcae 	bl	8008fea <USBD_GetString>
  return USBD_StrDesc;
 800968e:	4b02      	ldr	r3, [pc, #8]	@ (8009698 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009690:	4618      	mov	r0, r3
 8009692:	3708      	adds	r7, #8
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	20000c4c 	.word	0x20000c4c
 800969c:	08009e04 	.word	0x08009e04

080096a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	4603      	mov	r3, r0
 80096a8:	6039      	str	r1, [r7, #0]
 80096aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	221a      	movs	r2, #26
 80096b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80096b2:	f000 f843 	bl	800973c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80096b6:	4b02      	ldr	r3, [pc, #8]	@ (80096c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	20000174 	.word	0x20000174

080096c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	4603      	mov	r3, r0
 80096cc:	6039      	str	r1, [r7, #0]
 80096ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80096d0:	79fb      	ldrb	r3, [r7, #7]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d105      	bne.n	80096e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80096d6:	683a      	ldr	r2, [r7, #0]
 80096d8:	4907      	ldr	r1, [pc, #28]	@ (80096f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80096da:	4808      	ldr	r0, [pc, #32]	@ (80096fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80096dc:	f7ff fc85 	bl	8008fea <USBD_GetString>
 80096e0:	e004      	b.n	80096ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80096e2:	683a      	ldr	r2, [r7, #0]
 80096e4:	4904      	ldr	r1, [pc, #16]	@ (80096f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80096e6:	4805      	ldr	r0, [pc, #20]	@ (80096fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80096e8:	f7ff fc7f 	bl	8008fea <USBD_GetString>
  }
  return USBD_StrDesc;
 80096ec:	4b02      	ldr	r3, [pc, #8]	@ (80096f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	20000c4c 	.word	0x20000c4c
 80096fc:	08009e18 	.word	0x08009e18

08009700 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	4603      	mov	r3, r0
 8009708:	6039      	str	r1, [r7, #0]
 800970a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800970c:	79fb      	ldrb	r3, [r7, #7]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d105      	bne.n	800971e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009712:	683a      	ldr	r2, [r7, #0]
 8009714:	4907      	ldr	r1, [pc, #28]	@ (8009734 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009716:	4808      	ldr	r0, [pc, #32]	@ (8009738 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009718:	f7ff fc67 	bl	8008fea <USBD_GetString>
 800971c:	e004      	b.n	8009728 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800971e:	683a      	ldr	r2, [r7, #0]
 8009720:	4904      	ldr	r1, [pc, #16]	@ (8009734 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009722:	4805      	ldr	r0, [pc, #20]	@ (8009738 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009724:	f7ff fc61 	bl	8008fea <USBD_GetString>
  }
  return USBD_StrDesc;
 8009728:	4b02      	ldr	r3, [pc, #8]	@ (8009734 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800972a:	4618      	mov	r0, r3
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	20000c4c 	.word	0x20000c4c
 8009738:	08009e24 	.word	0x08009e24

0800973c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009742:	4b0f      	ldr	r3, [pc, #60]	@ (8009780 <Get_SerialNum+0x44>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009748:	4b0e      	ldr	r3, [pc, #56]	@ (8009784 <Get_SerialNum+0x48>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800974e:	4b0e      	ldr	r3, [pc, #56]	@ (8009788 <Get_SerialNum+0x4c>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	4413      	add	r3, r2
 800975a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d009      	beq.n	8009776 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009762:	2208      	movs	r2, #8
 8009764:	4909      	ldr	r1, [pc, #36]	@ (800978c <Get_SerialNum+0x50>)
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	f000 f814 	bl	8009794 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800976c:	2204      	movs	r2, #4
 800976e:	4908      	ldr	r1, [pc, #32]	@ (8009790 <Get_SerialNum+0x54>)
 8009770:	68b8      	ldr	r0, [r7, #8]
 8009772:	f000 f80f 	bl	8009794 <IntToUnicode>
  }
}
 8009776:	bf00      	nop
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	1ffff7e8 	.word	0x1ffff7e8
 8009784:	1ffff7ec 	.word	0x1ffff7ec
 8009788:	1ffff7f0 	.word	0x1ffff7f0
 800978c:	20000176 	.word	0x20000176
 8009790:	20000186 	.word	0x20000186

08009794 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009794:	b480      	push	{r7}
 8009796:	b087      	sub	sp, #28
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	4613      	mov	r3, r2
 80097a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80097a2:	2300      	movs	r3, #0
 80097a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80097a6:	2300      	movs	r3, #0
 80097a8:	75fb      	strb	r3, [r7, #23]
 80097aa:	e027      	b.n	80097fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	0f1b      	lsrs	r3, r3, #28
 80097b0:	2b09      	cmp	r3, #9
 80097b2:	d80b      	bhi.n	80097cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	0f1b      	lsrs	r3, r3, #28
 80097b8:	b2da      	uxtb	r2, r3
 80097ba:	7dfb      	ldrb	r3, [r7, #23]
 80097bc:	005b      	lsls	r3, r3, #1
 80097be:	4619      	mov	r1, r3
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	440b      	add	r3, r1
 80097c4:	3230      	adds	r2, #48	@ 0x30
 80097c6:	b2d2      	uxtb	r2, r2
 80097c8:	701a      	strb	r2, [r3, #0]
 80097ca:	e00a      	b.n	80097e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	0f1b      	lsrs	r3, r3, #28
 80097d0:	b2da      	uxtb	r2, r3
 80097d2:	7dfb      	ldrb	r3, [r7, #23]
 80097d4:	005b      	lsls	r3, r3, #1
 80097d6:	4619      	mov	r1, r3
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	440b      	add	r3, r1
 80097dc:	3237      	adds	r2, #55	@ 0x37
 80097de:	b2d2      	uxtb	r2, r2
 80097e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	011b      	lsls	r3, r3, #4
 80097e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80097e8:	7dfb      	ldrb	r3, [r7, #23]
 80097ea:	005b      	lsls	r3, r3, #1
 80097ec:	3301      	adds	r3, #1
 80097ee:	68ba      	ldr	r2, [r7, #8]
 80097f0:	4413      	add	r3, r2
 80097f2:	2200      	movs	r2, #0
 80097f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80097f6:	7dfb      	ldrb	r3, [r7, #23]
 80097f8:	3301      	adds	r3, #1
 80097fa:	75fb      	strb	r3, [r7, #23]
 80097fc:	7dfa      	ldrb	r2, [r7, #23]
 80097fe:	79fb      	ldrb	r3, [r7, #7]
 8009800:	429a      	cmp	r2, r3
 8009802:	d3d3      	bcc.n	80097ac <IntToUnicode+0x18>
  }
}
 8009804:	bf00      	nop
 8009806:	bf00      	nop
 8009808:	371c      	adds	r7, #28
 800980a:	46bd      	mov	sp, r7
 800980c:	bc80      	pop	{r7}
 800980e:	4770      	bx	lr

08009810 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a0d      	ldr	r2, [pc, #52]	@ (8009854 <HAL_PCD_MspInit+0x44>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d113      	bne.n	800984a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009822:	4b0d      	ldr	r3, [pc, #52]	@ (8009858 <HAL_PCD_MspInit+0x48>)
 8009824:	69db      	ldr	r3, [r3, #28]
 8009826:	4a0c      	ldr	r2, [pc, #48]	@ (8009858 <HAL_PCD_MspInit+0x48>)
 8009828:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800982c:	61d3      	str	r3, [r2, #28]
 800982e:	4b0a      	ldr	r3, [pc, #40]	@ (8009858 <HAL_PCD_MspInit+0x48>)
 8009830:	69db      	ldr	r3, [r3, #28]
 8009832:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009836:	60fb      	str	r3, [r7, #12]
 8009838:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800983a:	2200      	movs	r2, #0
 800983c:	2100      	movs	r1, #0
 800983e:	2014      	movs	r0, #20
 8009840:	f7f7 fbb1 	bl	8000fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009844:	2014      	movs	r0, #20
 8009846:	f7f7 fbca 	bl	8000fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800984a:	bf00      	nop
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	40005c00 	.word	0x40005c00
 8009858:	40021000 	.word	0x40021000

0800985c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009870:	4619      	mov	r1, r3
 8009872:	4610      	mov	r0, r2
 8009874:	f7fe fc8b 	bl	800818e <USBD_LL_SetupStage>
}
 8009878:	bf00      	nop
 800987a:	3708      	adds	r7, #8
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	460b      	mov	r3, r1
 800988a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009892:	78fa      	ldrb	r2, [r7, #3]
 8009894:	6879      	ldr	r1, [r7, #4]
 8009896:	4613      	mov	r3, r2
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	4413      	add	r3, r2
 800989c:	00db      	lsls	r3, r3, #3
 800989e:	440b      	add	r3, r1
 80098a0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	78fb      	ldrb	r3, [r7, #3]
 80098a8:	4619      	mov	r1, r3
 80098aa:	f7fe fcbd 	bl	8008228 <USBD_LL_DataOutStage>
}
 80098ae:	bf00      	nop
 80098b0:	3708      	adds	r7, #8
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b082      	sub	sp, #8
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
 80098be:	460b      	mov	r3, r1
 80098c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80098c8:	78fa      	ldrb	r2, [r7, #3]
 80098ca:	6879      	ldr	r1, [r7, #4]
 80098cc:	4613      	mov	r3, r2
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	4413      	add	r3, r2
 80098d2:	00db      	lsls	r3, r3, #3
 80098d4:	440b      	add	r3, r1
 80098d6:	3324      	adds	r3, #36	@ 0x24
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	78fb      	ldrb	r3, [r7, #3]
 80098dc:	4619      	mov	r1, r3
 80098de:	f7fe fd14 	bl	800830a <USBD_LL_DataInStage>
}
 80098e2:	bf00      	nop
 80098e4:	3708      	adds	r7, #8
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098ea:	b580      	push	{r7, lr}
 80098ec:	b082      	sub	sp, #8
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7fe fe24 	bl	8008546 <USBD_LL_SOF>
}
 80098fe:	bf00      	nop
 8009900:	3708      	adds	r7, #8
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b084      	sub	sp, #16
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800990e:	2301      	movs	r3, #1
 8009910:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	799b      	ldrb	r3, [r3, #6]
 8009916:	2b02      	cmp	r3, #2
 8009918:	d001      	beq.n	800991e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800991a:	f7f6 fd54 	bl	80003c6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009924:	7bfa      	ldrb	r2, [r7, #15]
 8009926:	4611      	mov	r1, r2
 8009928:	4618      	mov	r0, r3
 800992a:	f7fe fdd4 	bl	80084d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009934:	4618      	mov	r0, r3
 8009936:	f7fe fd8d 	bl	8008454 <USBD_LL_Reset>
}
 800993a:	bf00      	nop
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
	...

08009944 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009952:	4618      	mov	r0, r3
 8009954:	f7fe fdce 	bl	80084f4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	7a9b      	ldrb	r3, [r3, #10]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d005      	beq.n	800996c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009960:	4b04      	ldr	r3, [pc, #16]	@ (8009974 <HAL_PCD_SuspendCallback+0x30>)
 8009962:	691b      	ldr	r3, [r3, #16]
 8009964:	4a03      	ldr	r2, [pc, #12]	@ (8009974 <HAL_PCD_SuspendCallback+0x30>)
 8009966:	f043 0306 	orr.w	r3, r3, #6
 800996a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800996c:	bf00      	nop
 800996e:	3708      	adds	r7, #8
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	e000ed00 	.word	0xe000ed00

08009978 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009986:	4618      	mov	r0, r3
 8009988:	f7fe fdc8 	bl	800851c <USBD_LL_Resume>
}
 800998c:	bf00      	nop
 800998e:	3708      	adds	r7, #8
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800999c:	4a28      	ldr	r2, [pc, #160]	@ (8009a40 <USBD_LL_Init+0xac>)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	4a26      	ldr	r2, [pc, #152]	@ (8009a40 <USBD_LL_Init+0xac>)
 80099a8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80099ac:	4b24      	ldr	r3, [pc, #144]	@ (8009a40 <USBD_LL_Init+0xac>)
 80099ae:	4a25      	ldr	r2, [pc, #148]	@ (8009a44 <USBD_LL_Init+0xb0>)
 80099b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80099b2:	4b23      	ldr	r3, [pc, #140]	@ (8009a40 <USBD_LL_Init+0xac>)
 80099b4:	2208      	movs	r2, #8
 80099b6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80099b8:	4b21      	ldr	r3, [pc, #132]	@ (8009a40 <USBD_LL_Init+0xac>)
 80099ba:	2202      	movs	r2, #2
 80099bc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80099be:	4b20      	ldr	r3, [pc, #128]	@ (8009a40 <USBD_LL_Init+0xac>)
 80099c0:	2200      	movs	r2, #0
 80099c2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80099c4:	4b1e      	ldr	r3, [pc, #120]	@ (8009a40 <USBD_LL_Init+0xac>)
 80099c6:	2200      	movs	r2, #0
 80099c8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80099ca:	4b1d      	ldr	r3, [pc, #116]	@ (8009a40 <USBD_LL_Init+0xac>)
 80099cc:	2200      	movs	r2, #0
 80099ce:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80099d0:	481b      	ldr	r0, [pc, #108]	@ (8009a40 <USBD_LL_Init+0xac>)
 80099d2:	f7f8 f89c 	bl	8001b0e <HAL_PCD_Init>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d001      	beq.n	80099e0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80099dc:	f7f6 fcf3 	bl	80003c6 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80099e6:	2318      	movs	r3, #24
 80099e8:	2200      	movs	r2, #0
 80099ea:	2100      	movs	r1, #0
 80099ec:	f7f9 fdad 	bl	800354a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80099f6:	2358      	movs	r3, #88	@ 0x58
 80099f8:	2200      	movs	r2, #0
 80099fa:	2180      	movs	r1, #128	@ 0x80
 80099fc:	f7f9 fda5 	bl	800354a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009a06:	23c0      	movs	r3, #192	@ 0xc0
 8009a08:	2200      	movs	r2, #0
 8009a0a:	2181      	movs	r1, #129	@ 0x81
 8009a0c:	f7f9 fd9d 	bl	800354a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009a16:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	2101      	movs	r1, #1
 8009a1e:	f7f9 fd94 	bl	800354a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009a28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	2182      	movs	r1, #130	@ 0x82
 8009a30:	f7f9 fd8b 	bl	800354a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	20000e4c 	.word	0x20000e4c
 8009a44:	40005c00 	.word	0x40005c00

08009a48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a50:	2300      	movs	r3, #0
 8009a52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a54:	2300      	movs	r3, #0
 8009a56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7f8 f94b 	bl	8001cfa <HAL_PCD_Start>
 8009a64:	4603      	mov	r3, r0
 8009a66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a68:	7bfb      	ldrb	r3, [r7, #15]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f000 f94e 	bl	8009d0c <USBD_Get_USB_Status>
 8009a70:	4603      	mov	r3, r0
 8009a72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a74:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b084      	sub	sp, #16
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
 8009a86:	4608      	mov	r0, r1
 8009a88:	4611      	mov	r1, r2
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	70fb      	strb	r3, [r7, #3]
 8009a90:	460b      	mov	r3, r1
 8009a92:	70bb      	strb	r3, [r7, #2]
 8009a94:	4613      	mov	r3, r2
 8009a96:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009aa6:	78bb      	ldrb	r3, [r7, #2]
 8009aa8:	883a      	ldrh	r2, [r7, #0]
 8009aaa:	78f9      	ldrb	r1, [r7, #3]
 8009aac:	f7f8 fa9f 	bl	8001fee <HAL_PCD_EP_Open>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ab4:	7bfb      	ldrb	r3, [r7, #15]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f000 f928 	bl	8009d0c <USBD_Get_USB_Status>
 8009abc:	4603      	mov	r3, r0
 8009abe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ac0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b084      	sub	sp, #16
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ada:	2300      	movs	r3, #0
 8009adc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ae4:	78fa      	ldrb	r2, [r7, #3]
 8009ae6:	4611      	mov	r1, r2
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f7f8 fadd 	bl	80020a8 <HAL_PCD_EP_Close>
 8009aee:	4603      	mov	r3, r0
 8009af0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009af2:	7bfb      	ldrb	r3, [r7, #15]
 8009af4:	4618      	mov	r0, r3
 8009af6:	f000 f909 	bl	8009d0c <USBD_Get_USB_Status>
 8009afa:	4603      	mov	r3, r0
 8009afc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009afe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	460b      	mov	r3, r1
 8009b12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b14:	2300      	movs	r3, #0
 8009b16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009b22:	78fa      	ldrb	r2, [r7, #3]
 8009b24:	4611      	mov	r1, r2
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7f8 fb85 	bl	8002236 <HAL_PCD_EP_SetStall>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b30:	7bfb      	ldrb	r3, [r7, #15]
 8009b32:	4618      	mov	r0, r3
 8009b34:	f000 f8ea 	bl	8009d0c <USBD_Get_USB_Status>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b084      	sub	sp, #16
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
 8009b4e:	460b      	mov	r3, r1
 8009b50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b52:	2300      	movs	r3, #0
 8009b54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b56:	2300      	movs	r3, #0
 8009b58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009b60:	78fa      	ldrb	r2, [r7, #3]
 8009b62:	4611      	mov	r1, r2
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7f8 fbc6 	bl	80022f6 <HAL_PCD_EP_ClrStall>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b6e:	7bfb      	ldrb	r3, [r7, #15]
 8009b70:	4618      	mov	r0, r3
 8009b72:	f000 f8cb 	bl	8009d0c <USBD_Get_USB_Status>
 8009b76:	4603      	mov	r3, r0
 8009b78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3710      	adds	r7, #16
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b085      	sub	sp, #20
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009b96:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009b98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	da0b      	bge.n	8009bb8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009ba0:	78fb      	ldrb	r3, [r7, #3]
 8009ba2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ba6:	68f9      	ldr	r1, [r7, #12]
 8009ba8:	4613      	mov	r3, r2
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	4413      	add	r3, r2
 8009bae:	00db      	lsls	r3, r3, #3
 8009bb0:	440b      	add	r3, r1
 8009bb2:	3312      	adds	r3, #18
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	e00b      	b.n	8009bd0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009bb8:	78fb      	ldrb	r3, [r7, #3]
 8009bba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009bbe:	68f9      	ldr	r1, [r7, #12]
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	4413      	add	r3, r2
 8009bc6:	00db      	lsls	r3, r3, #3
 8009bc8:	440b      	add	r3, r1
 8009bca:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009bce:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3714      	adds	r7, #20
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bc80      	pop	{r7}
 8009bd8:	4770      	bx	lr

08009bda <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b084      	sub	sp, #16
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
 8009be2:	460b      	mov	r3, r1
 8009be4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009be6:	2300      	movs	r3, #0
 8009be8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bea:	2300      	movs	r3, #0
 8009bec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009bf4:	78fa      	ldrb	r2, [r7, #3]
 8009bf6:	4611      	mov	r1, r2
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7f8 f9d4 	bl	8001fa6 <HAL_PCD_SetAddress>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c02:	7bfb      	ldrb	r3, [r7, #15]
 8009c04:	4618      	mov	r0, r3
 8009c06:	f000 f881 	bl	8009d0c <USBD_Get_USB_Status>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3710      	adds	r7, #16
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b086      	sub	sp, #24
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	60f8      	str	r0, [r7, #12]
 8009c20:	607a      	str	r2, [r7, #4]
 8009c22:	461a      	mov	r2, r3
 8009c24:	460b      	mov	r3, r1
 8009c26:	72fb      	strb	r3, [r7, #11]
 8009c28:	4613      	mov	r3, r2
 8009c2a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c30:	2300      	movs	r3, #0
 8009c32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009c3a:	893b      	ldrh	r3, [r7, #8]
 8009c3c:	7af9      	ldrb	r1, [r7, #11]
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	f7f8 fac2 	bl	80021c8 <HAL_PCD_EP_Transmit>
 8009c44:	4603      	mov	r3, r0
 8009c46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c48:	7dfb      	ldrb	r3, [r7, #23]
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f000 f85e 	bl	8009d0c <USBD_Get_USB_Status>
 8009c50:	4603      	mov	r3, r0
 8009c52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c54:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3718      	adds	r7, #24
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b086      	sub	sp, #24
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	60f8      	str	r0, [r7, #12]
 8009c66:	607a      	str	r2, [r7, #4]
 8009c68:	461a      	mov	r2, r3
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	72fb      	strb	r3, [r7, #11]
 8009c6e:	4613      	mov	r3, r2
 8009c70:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c72:	2300      	movs	r3, #0
 8009c74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c76:	2300      	movs	r3, #0
 8009c78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009c80:	893b      	ldrh	r3, [r7, #8]
 8009c82:	7af9      	ldrb	r1, [r7, #11]
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	f7f8 fa57 	bl	8002138 <HAL_PCD_EP_Receive>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c8e:	7dfb      	ldrb	r3, [r7, #23]
 8009c90:	4618      	mov	r0, r3
 8009c92:	f000 f83b 	bl	8009d0c <USBD_Get_USB_Status>
 8009c96:	4603      	mov	r3, r0
 8009c98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c9a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3718      	adds	r7, #24
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	460b      	mov	r3, r1
 8009cae:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009cb6:	78fa      	ldrb	r2, [r7, #3]
 8009cb8:	4611      	mov	r1, r2
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7f8 fa6d 	bl	800219a <HAL_PCD_EP_GetRxCount>
 8009cc0:	4603      	mov	r3, r0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3708      	adds	r7, #8
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
	...

08009ccc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009cd4:	4b02      	ldr	r3, [pc, #8]	@ (8009ce0 <USBD_static_malloc+0x14>)
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	370c      	adds	r7, #12
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bc80      	pop	{r7}
 8009cde:	4770      	bx	lr
 8009ce0:	20001124 	.word	0x20001124

08009ce4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]

}
 8009cec:	bf00      	nop
 8009cee:	370c      	adds	r7, #12
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bc80      	pop	{r7}
 8009cf4:	4770      	bx	lr

08009cf6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cf6:	b480      	push	{r7}
 8009cf8:	b083      	sub	sp, #12
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
 8009cfe:	460b      	mov	r3, r1
 8009d00:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009d02:	bf00      	nop
 8009d04:	370c      	adds	r7, #12
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bc80      	pop	{r7}
 8009d0a:	4770      	bx	lr

08009d0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b085      	sub	sp, #20
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	4603      	mov	r3, r0
 8009d14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d16:	2300      	movs	r3, #0
 8009d18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d1a:	79fb      	ldrb	r3, [r7, #7]
 8009d1c:	2b03      	cmp	r3, #3
 8009d1e:	d817      	bhi.n	8009d50 <USBD_Get_USB_Status+0x44>
 8009d20:	a201      	add	r2, pc, #4	@ (adr r2, 8009d28 <USBD_Get_USB_Status+0x1c>)
 8009d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d26:	bf00      	nop
 8009d28:	08009d39 	.word	0x08009d39
 8009d2c:	08009d3f 	.word	0x08009d3f
 8009d30:	08009d45 	.word	0x08009d45
 8009d34:	08009d4b 	.word	0x08009d4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	73fb      	strb	r3, [r7, #15]
    break;
 8009d3c:	e00b      	b.n	8009d56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009d3e:	2302      	movs	r3, #2
 8009d40:	73fb      	strb	r3, [r7, #15]
    break;
 8009d42:	e008      	b.n	8009d56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009d44:	2301      	movs	r3, #1
 8009d46:	73fb      	strb	r3, [r7, #15]
    break;
 8009d48:	e005      	b.n	8009d56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009d4a:	2302      	movs	r3, #2
 8009d4c:	73fb      	strb	r3, [r7, #15]
    break;
 8009d4e:	e002      	b.n	8009d56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009d50:	2302      	movs	r3, #2
 8009d52:	73fb      	strb	r3, [r7, #15]
    break;
 8009d54:	bf00      	nop
  }
  return usb_status;
 8009d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3714      	adds	r7, #20
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bc80      	pop	{r7}
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop

08009d64 <main>:
 */

#include "main.h"

int main(void)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	af00      	add	r7, sp, #0

    hwInit();
 8009d68:	f7f6 ff8c 	bl	8000c84 <hwInit>
    apInit();
 8009d6c:	f7f6 f9ee 	bl	800014c <apInit>

    apMain();
 8009d70:	f7f6 f9fa 	bl	8000168 <apMain>

    return 0;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <memset>:
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	4402      	add	r2, r0
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d100      	bne.n	8009d84 <memset+0xa>
 8009d82:	4770      	bx	lr
 8009d84:	f803 1b01 	strb.w	r1, [r3], #1
 8009d88:	e7f9      	b.n	8009d7e <memset+0x4>
	...

08009d8c <__libc_init_array>:
 8009d8c:	b570      	push	{r4, r5, r6, lr}
 8009d8e:	2600      	movs	r6, #0
 8009d90:	4d0c      	ldr	r5, [pc, #48]	@ (8009dc4 <__libc_init_array+0x38>)
 8009d92:	4c0d      	ldr	r4, [pc, #52]	@ (8009dc8 <__libc_init_array+0x3c>)
 8009d94:	1b64      	subs	r4, r4, r5
 8009d96:	10a4      	asrs	r4, r4, #2
 8009d98:	42a6      	cmp	r6, r4
 8009d9a:	d109      	bne.n	8009db0 <__libc_init_array+0x24>
 8009d9c:	f000 f81a 	bl	8009dd4 <_init>
 8009da0:	2600      	movs	r6, #0
 8009da2:	4d0a      	ldr	r5, [pc, #40]	@ (8009dcc <__libc_init_array+0x40>)
 8009da4:	4c0a      	ldr	r4, [pc, #40]	@ (8009dd0 <__libc_init_array+0x44>)
 8009da6:	1b64      	subs	r4, r4, r5
 8009da8:	10a4      	asrs	r4, r4, #2
 8009daa:	42a6      	cmp	r6, r4
 8009dac:	d105      	bne.n	8009dba <__libc_init_array+0x2e>
 8009dae:	bd70      	pop	{r4, r5, r6, pc}
 8009db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009db4:	4798      	blx	r3
 8009db6:	3601      	adds	r6, #1
 8009db8:	e7ee      	b.n	8009d98 <__libc_init_array+0xc>
 8009dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dbe:	4798      	blx	r3
 8009dc0:	3601      	adds	r6, #1
 8009dc2:	e7f2      	b.n	8009daa <__libc_init_array+0x1e>
 8009dc4:	08009e74 	.word	0x08009e74
 8009dc8:	08009e74 	.word	0x08009e74
 8009dcc:	08009e74 	.word	0x08009e74
 8009dd0:	08009e78 	.word	0x08009e78

08009dd4 <_init>:
 8009dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dd6:	bf00      	nop
 8009dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dda:	bc08      	pop	{r3}
 8009ddc:	469e      	mov	lr, r3
 8009dde:	4770      	bx	lr

08009de0 <_fini>:
 8009de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009de2:	bf00      	nop
 8009de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009de6:	bc08      	pop	{r3}
 8009de8:	469e      	mov	lr, r3
 8009dea:	4770      	bx	lr
