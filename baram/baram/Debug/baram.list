
baram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b04  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08009c10  08009c10  0000ac10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cec  08009cec  0000b1e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009cec  08009cec  0000b1e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009cec  08009cec  0000b1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cec  08009cec  0000acec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009cf0  08009cf0  0000acf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08009cf4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012bc  200001e0  08009ed4  0000b1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000149c  08009ed4  0000b49c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013128  00000000  00000000  0000b209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004135  00000000  00000000  0001e331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  00022468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd0  00000000  00000000  000235c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c07b  00000000  00000000  00024290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d17e  00000000  00000000  0004030b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089fda  00000000  00000000  0005d489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7463  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047ac  00000000  00000000  000e74a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000ebc54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08009bf8 	.word	0x08009bf8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08009bf8 	.word	0x08009bf8

0800014c <apInit>:
 */

#include "ap.h"

void apInit(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    uartOpen(_DEF_UART1, 57600);
 8000150:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8000154:	2000      	movs	r0, #0
 8000156:	f000 fb8f 	bl	8000878 <uartOpen>
    uartOpen(_DEF_UART2, 57600);
 800015a:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 800015e:	2001      	movs	r0, #1
 8000160:	f000 fb8a 	bl	8000878 <uartOpen>
}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}

08000168 <apMain>:

void apMain(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b082      	sub	sp, #8
 800016c:	af00      	add	r7, sp, #0
    //    if (resetGetCount() >= 2)
    //    {
    //        led_blink_time = 100;
    //    }

    pre_time = millis();
 800016e:	f000 f874 	bl	800025a <millis>
 8000172:	6078      	str	r0, [r7, #4]
    //    pre_baud = uartGetBaud(_DEF_UART1);
    while (1)
    {
        if (millis() - pre_time >= 500)
 8000174:	f000 f871 	bl	800025a <millis>
 8000178:	4602      	mov	r2, r0
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	1ad3      	subs	r3, r2, r3
 800017e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000182:	d305      	bcc.n	8000190 <apMain+0x28>
        {
            pre_time = millis();
 8000184:	f000 f869 	bl	800025a <millis>
 8000188:	6078      	str	r0, [r7, #4]
            ledToggle(_DEF_LED1);
 800018a:	2000      	movs	r0, #0
 800018c:	f000 faae 	bl	80006ec <ledToggle>
        }

        if (uartAvailable(_DEF_UART1) > 0)
 8000190:	2000      	movs	r0, #0
 8000192:	f000 fbcf 	bl	8000934 <uartAvailable>
 8000196:	4603      	mov	r3, r0
 8000198:	2b00      	cmp	r3, #0
 800019a:	d00a      	beq.n	80001b2 <apMain+0x4a>
        {
            uint8_t rx_data;

            rx_data = uartRead(_DEF_UART1);
 800019c:	2000      	movs	r0, #0
 800019e:	f000 fbe7 	bl	8000970 <uartRead>
 80001a2:	4603      	mov	r3, r0
 80001a4:	70fb      	strb	r3, [r7, #3]
            uartPrintf(_DEF_UART1, "USB Rx %c %X\n", rx_data, rx_data);
 80001a6:	78fa      	ldrb	r2, [r7, #3]
 80001a8:	78fb      	ldrb	r3, [r7, #3]
 80001aa:	490b      	ldr	r1, [pc, #44]	@ (80001d8 <apMain+0x70>)
 80001ac:	2000      	movs	r0, #0
 80001ae:	f000 fc2d 	bl	8000a0c <uartPrintf>
        }

        if (uartAvailable(_DEF_UART2) > 0)
 80001b2:	2001      	movs	r0, #1
 80001b4:	f000 fbbe 	bl	8000934 <uartAvailable>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d0da      	beq.n	8000174 <apMain+0xc>
        {
            uint8_t rx_data;

            rx_data = uartRead(_DEF_UART2);
 80001be:	2001      	movs	r0, #1
 80001c0:	f000 fbd6 	bl	8000970 <uartRead>
 80001c4:	4603      	mov	r3, r0
 80001c6:	70bb      	strb	r3, [r7, #2]
            uartPrintf(_DEF_UART2, "Uart1 Rx %c %X\n", rx_data, rx_data);
 80001c8:	78ba      	ldrb	r2, [r7, #2]
 80001ca:	78bb      	ldrb	r3, [r7, #2]
 80001cc:	4903      	ldr	r1, [pc, #12]	@ (80001dc <apMain+0x74>)
 80001ce:	2001      	movs	r0, #1
 80001d0:	f000 fc1c 	bl	8000a0c <uartPrintf>
        if (millis() - pre_time >= 500)
 80001d4:	e7ce      	b.n	8000174 <apMain+0xc>
 80001d6:	bf00      	nop
 80001d8:	08009c10 	.word	0x08009c10
 80001dc:	08009c20 	.word	0x08009c20

080001e0 <bspInit>:
#include "bsp.h"

void SystemClock_Config(void);

void bspInit(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b084      	sub	sp, #16
 80001e4:	af00      	add	r7, sp, #0
    HAL_Init();
 80001e6:	f000 fd0f 	bl	8000c08 <HAL_Init>
    SystemClock_Config();
 80001ea:	f000 f83d 	bl	8000268 <SystemClock_Config>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ee:	4b14      	ldr	r3, [pc, #80]	@ (8000240 <bspInit+0x60>)
 80001f0:	699b      	ldr	r3, [r3, #24]
 80001f2:	4a13      	ldr	r2, [pc, #76]	@ (8000240 <bspInit+0x60>)
 80001f4:	f043 0310 	orr.w	r3, r3, #16
 80001f8:	6193      	str	r3, [r2, #24]
 80001fa:	4b11      	ldr	r3, [pc, #68]	@ (8000240 <bspInit+0x60>)
 80001fc:	699b      	ldr	r3, [r3, #24]
 80001fe:	f003 0310 	and.w	r3, r3, #16
 8000202:	60fb      	str	r3, [r7, #12]
 8000204:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000206:	4b0e      	ldr	r3, [pc, #56]	@ (8000240 <bspInit+0x60>)
 8000208:	699b      	ldr	r3, [r3, #24]
 800020a:	4a0d      	ldr	r2, [pc, #52]	@ (8000240 <bspInit+0x60>)
 800020c:	f043 0320 	orr.w	r3, r3, #32
 8000210:	6193      	str	r3, [r2, #24]
 8000212:	4b0b      	ldr	r3, [pc, #44]	@ (8000240 <bspInit+0x60>)
 8000214:	699b      	ldr	r3, [r3, #24]
 8000216:	f003 0320 	and.w	r3, r3, #32
 800021a:	60bb      	str	r3, [r7, #8]
 800021c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800021e:	4b08      	ldr	r3, [pc, #32]	@ (8000240 <bspInit+0x60>)
 8000220:	699b      	ldr	r3, [r3, #24]
 8000222:	4a07      	ldr	r2, [pc, #28]	@ (8000240 <bspInit+0x60>)
 8000224:	f043 0304 	orr.w	r3, r3, #4
 8000228:	6193      	str	r3, [r2, #24]
 800022a:	4b05      	ldr	r3, [pc, #20]	@ (8000240 <bspInit+0x60>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	f003 0304 	and.w	r3, r3, #4
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	687b      	ldr	r3, [r7, #4]

}
 8000236:	bf00      	nop
 8000238:	3710      	adds	r7, #16
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	40021000 	.word	0x40021000

08000244 <delay>:

void delay(uint32_t ms)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 800024c:	6878      	ldr	r0, [r7, #4]
 800024e:	f000 fd3d 	bl	8000ccc <HAL_Delay>
}
 8000252:	bf00      	nop
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}

0800025a <millis>:

uint32_t millis(void)
{
 800025a:	b580      	push	{r7, lr}
 800025c:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 800025e:	f000 fd2b 	bl	8000cb8 <HAL_GetTick>
 8000262:	4603      	mov	r3, r0
}
 8000264:	4618      	mov	r0, r3
 8000266:	bd80      	pop	{r7, pc}

08000268 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b094      	sub	sp, #80	@ 0x50
 800026c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000272:	2228      	movs	r2, #40	@ 0x28
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f009 f82e 	bl	80092d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027c:	f107 0314 	add.w	r3, r7, #20
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	605a      	str	r2, [r3, #4]
 8000286:	609a      	str	r2, [r3, #8]
 8000288:	60da      	str	r2, [r3, #12]
 800028a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000298:	2305      	movs	r3, #5
 800029a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800029c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002a6:	2301      	movs	r3, #1
 80002a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002aa:	2301      	movs	r3, #1
 80002ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ae:	2302      	movs	r3, #2
 80002b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002b8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002c2:	4618      	mov	r0, r3
 80002c4:	f002 fe08 	bl	8002ed8 <HAL_RCC_OscConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002ce:	f000 f82a 	bl	8000326 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d2:	230f      	movs	r3, #15
 80002d4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d6:	2302      	movs	r3, #2
 80002d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e8:	f107 0314 	add.w	r3, r7, #20
 80002ec:	2102      	movs	r1, #2
 80002ee:	4618      	mov	r0, r3
 80002f0:	f003 f874 	bl	80033dc <HAL_RCC_ClockConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002fa:	f000 f814 	bl	8000326 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 80002fe:	2311      	movs	r3, #17
 8000300:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000302:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000306:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000308:	2300      	movs	r3, #0
 800030a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	4618      	mov	r0, r3
 8000310:	f003 f9f2 	bl	80036f8 <HAL_RCCEx_PeriphCLKConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800031a:	f000 f804 	bl	8000326 <Error_Handler>
  }
}
 800031e:	bf00      	nop
 8000320:	3750      	adds	r7, #80	@ 0x50
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}

08000326 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000326:	b480      	push	{r7}
 8000328:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800032a:	b672      	cpsid	i
}
 800032c:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state
     */
    __disable_irq();
    while (1)
 800032e:	bf00      	nop
 8000330:	e7fd      	b.n	800032e <Error_Handler+0x8>
	...

08000334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_AFIO_CLK_ENABLE();
 800033a:	4b15      	ldr	r3, [pc, #84]	@ (8000390 <HAL_MspInit+0x5c>)
 800033c:	699b      	ldr	r3, [r3, #24]
 800033e:	4a14      	ldr	r2, [pc, #80]	@ (8000390 <HAL_MspInit+0x5c>)
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	6193      	str	r3, [r2, #24]
 8000346:	4b12      	ldr	r3, [pc, #72]	@ (8000390 <HAL_MspInit+0x5c>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	60bb      	str	r3, [r7, #8]
 8000350:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_PWR_CLK_ENABLE();
 8000352:	4b0f      	ldr	r3, [pc, #60]	@ (8000390 <HAL_MspInit+0x5c>)
 8000354:	69db      	ldr	r3, [r3, #28]
 8000356:	4a0e      	ldr	r2, [pc, #56]	@ (8000390 <HAL_MspInit+0x5c>)
 8000358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800035c:	61d3      	str	r3, [r2, #28]
 800035e:	4b0c      	ldr	r3, [pc, #48]	@ (8000390 <HAL_MspInit+0x5c>)
 8000360:	69db      	ldr	r3, [r3, #28]
 8000362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000366:	607b      	str	r3, [r7, #4]
 8000368:	687b      	ldr	r3, [r7, #4]

    /* System interrupt init*/

    /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
     */
    __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800036a:	4b0a      	ldr	r3, [pc, #40]	@ (8000394 <HAL_MspInit+0x60>)
 800036c:	685b      	ldr	r3, [r3, #4]
 800036e:	60fb      	str	r3, [r7, #12]
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000376:	60fb      	str	r3, [r7, #12]
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	4a04      	ldr	r2, [pc, #16]	@ (8000394 <HAL_MspInit+0x60>)
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	6053      	str	r3, [r2, #4]

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 8000386:	bf00      	nop
 8000388:	3714      	adds	r7, #20
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr
 8000390:	40021000 	.word	0x40021000
 8000394:	40010000 	.word	0x40010000

08000398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800039c:	bf00      	nop
 800039e:	e7fd      	b.n	800039c <NMI_Handler+0x4>

080003a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003a4:	bf00      	nop
 80003a6:	e7fd      	b.n	80003a4 <HardFault_Handler+0x4>

080003a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003ac:	bf00      	nop
 80003ae:	e7fd      	b.n	80003ac <MemManage_Handler+0x4>

080003b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003b4:	bf00      	nop
 80003b6:	e7fd      	b.n	80003b4 <BusFault_Handler+0x4>

080003b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003bc:	bf00      	nop
 80003be:	e7fd      	b.n	80003bc <UsageFault_Handler+0x4>

080003c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003c4:	bf00      	nop
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr

080003cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr

080003d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003dc:	bf00      	nop
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr

080003e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003e8:	f000 fc54 	bl	8000c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003ec:	bf00      	nop
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80003f4:	4802      	ldr	r0, [pc, #8]	@ (8000400 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80003f6:	f001 f91e 	bl	8001636 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000e5c 	.word	0x20000e5c

08000404 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <USART1_IRQHandler+0x10>)
 800040a:	f003 fd21 	bl	8003e50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	20000340 	.word	0x20000340

08000418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit =
        (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000420:	4a14      	ldr	r2, [pc, #80]	@ (8000474 <_sbrk+0x5c>)
 8000422:	4b15      	ldr	r3, [pc, #84]	@ (8000478 <_sbrk+0x60>)
    const uint32_t stack_limit =
 8000424:	1ad3      	subs	r3, r2, r3
 8000426:	617b      	str	r3, [r7, #20]
    const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	613b      	str	r3, [r7, #16]
    uint8_t *prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end)
 800042c:	4b13      	ldr	r3, [pc, #76]	@ (800047c <_sbrk+0x64>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d102      	bne.n	800043a <_sbrk+0x22>
    {
        __sbrk_heap_end = &_end;
 8000434:	4b11      	ldr	r3, [pc, #68]	@ (800047c <_sbrk+0x64>)
 8000436:	4a12      	ldr	r2, [pc, #72]	@ (8000480 <_sbrk+0x68>)
 8000438:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap)
 800043a:	4b10      	ldr	r3, [pc, #64]	@ (800047c <_sbrk+0x64>)
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4413      	add	r3, r2
 8000442:	693a      	ldr	r2, [r7, #16]
 8000444:	429a      	cmp	r2, r3
 8000446:	d207      	bcs.n	8000458 <_sbrk+0x40>
    {
        errno = ENOMEM;
 8000448:	f008 ff4e 	bl	80092e8 <__errno>
 800044c:	4603      	mov	r3, r0
 800044e:	220c      	movs	r2, #12
 8000450:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 8000452:	f04f 33ff 	mov.w	r3, #4294967295
 8000456:	e009      	b.n	800046c <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8000458:	4b08      	ldr	r3, [pc, #32]	@ (800047c <_sbrk+0x64>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 800045e:	4b07      	ldr	r3, [pc, #28]	@ (800047c <_sbrk+0x64>)
 8000460:	681a      	ldr	r2, [r3, #0]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4413      	add	r3, r2
 8000466:	4a05      	ldr	r2, [pc, #20]	@ (800047c <_sbrk+0x64>)
 8000468:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 800046a:	68fb      	ldr	r3, [r7, #12]
}
 800046c:	4618      	mov	r0, r3
 800046e:	3718      	adds	r7, #24
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20005000 	.word	0x20005000
 8000478:	00000400 	.word	0x00000400
 800047c:	200001fc 	.word	0x200001fc
 8000480:	200014a0 	.word	0x200014a0

08000484 <SystemInit>:
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
     * -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR = VECT_TAB_BASE_ADDRESS |
                VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr

08000490 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000490:	f7ff fff8 	bl	8000484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000494:	480b      	ldr	r0, [pc, #44]	@ (80004c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000496:	490c      	ldr	r1, [pc, #48]	@ (80004c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000498:	4a0c      	ldr	r2, [pc, #48]	@ (80004cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800049a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800049c:	e002      	b.n	80004a4 <LoopCopyDataInit>

0800049e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800049e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004a2:	3304      	adds	r3, #4

080004a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004a8:	d3f9      	bcc.n	800049e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004aa:	4a09      	ldr	r2, [pc, #36]	@ (80004d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004ac:	4c09      	ldr	r4, [pc, #36]	@ (80004d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004b0:	e001      	b.n	80004b6 <LoopFillZerobss>

080004b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b4:	3204      	adds	r2, #4

080004b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004b8:	d3fb      	bcc.n	80004b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004ba:	f008 ff1b 	bl	80092f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004be:	f008 fec7 	bl	8009250 <main>
  bx lr
 80004c2:	4770      	bx	lr
  ldr r0, =_sdata
 80004c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80004cc:	08009cf4 	.word	0x08009cf4
  ldr r2, =_sbss
 80004d0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80004d4:	2000149c 	.word	0x2000149c

080004d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004d8:	e7fe      	b.n	80004d8 <ADC1_2_IRQHandler>

080004da <qbufferCreate>:
void qbufferInit(void)
{
}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 80004da:	b480      	push	{r7}
 80004dc:	b087      	sub	sp, #28
 80004de:	af00      	add	r7, sp, #0
 80004e0:	60f8      	str	r0, [r7, #12]
 80004e2:	60b9      	str	r1, [r7, #8]
 80004e4:	607a      	str	r2, [r7, #4]
    bool ret = true;
 80004e6:	2301      	movs	r3, #1
 80004e8:	75fb      	strb	r3, [r7, #23]

    p_node->in    = 0;
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
    p_node->out   = 0;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	2200      	movs	r2, #0
 80004f4:	605a      	str	r2, [r3, #4]
    p_node->len   = length;
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	609a      	str	r2, [r3, #8]
    p_node->p_buf = p_buf;
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	68ba      	ldr	r2, [r7, #8]
 8000500:	60da      	str	r2, [r3, #12]

    return ret;
 8000502:	7dfb      	ldrb	r3, [r7, #23]
}
 8000504:	4618      	mov	r0, r3
 8000506:	371c      	adds	r7, #28
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr

0800050e <qbufferWrite>:

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800050e:	b480      	push	{r7}
 8000510:	b089      	sub	sp, #36	@ 0x24
 8000512:	af00      	add	r7, sp, #0
 8000514:	60f8      	str	r0, [r7, #12]
 8000516:	60b9      	str	r1, [r7, #8]
 8000518:	607a      	str	r2, [r7, #4]
    bool ret = true;
 800051a:	2301      	movs	r3, #1
 800051c:	77fb      	strb	r3, [r7, #31]
    uint32_t next_in;

    for (int i = 0; i < length; i++)
 800051e:	2300      	movs	r3, #0
 8000520:	61bb      	str	r3, [r7, #24]
 8000522:	e027      	b.n	8000574 <qbufferWrite+0x66>
    {
        next_in = (p_node->in + 1) % p_node->len;
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	3301      	adds	r3, #1
 800052a:	68fa      	ldr	r2, [r7, #12]
 800052c:	6892      	ldr	r2, [r2, #8]
 800052e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000532:	fb01 f202 	mul.w	r2, r1, r2
 8000536:	1a9b      	subs	r3, r3, r2
 8000538:	617b      	str	r3, [r7, #20]

        if (next_in != p_node->out)
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	697a      	ldr	r2, [r7, #20]
 8000540:	429a      	cmp	r2, r3
 8000542:	d011      	beq.n	8000568 <qbufferWrite+0x5a>
        {
            if (p_node->p_buf != NULL)
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d009      	beq.n	8000560 <qbufferWrite+0x52>
            {
                p_node->p_buf[p_node->in] = p_data[i];
 800054c:	69bb      	ldr	r3, [r7, #24]
 800054e:	68ba      	ldr	r2, [r7, #8]
 8000550:	441a      	add	r2, r3
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	68d9      	ldr	r1, [r3, #12]
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	440b      	add	r3, r1
 800055c:	7812      	ldrb	r2, [r2, #0]
 800055e:	701a      	strb	r2, [r3, #0]
            }
            p_node->in = next_in;
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	697a      	ldr	r2, [r7, #20]
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	e002      	b.n	800056e <qbufferWrite+0x60>
        }
        else
        {
            ret = false;
 8000568:	2300      	movs	r3, #0
 800056a:	77fb      	strb	r3, [r7, #31]
            break;
 800056c:	e006      	b.n	800057c <qbufferWrite+0x6e>
    for (int i = 0; i < length; i++)
 800056e:	69bb      	ldr	r3, [r7, #24]
 8000570:	3301      	adds	r3, #1
 8000572:	61bb      	str	r3, [r7, #24]
 8000574:	69bb      	ldr	r3, [r7, #24]
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	429a      	cmp	r2, r3
 800057a:	d8d3      	bhi.n	8000524 <qbufferWrite+0x16>
        }
    }

    return ret;
 800057c:	7ffb      	ldrb	r3, [r7, #31]
}
 800057e:	4618      	mov	r0, r3
 8000580:	3724      	adds	r7, #36	@ 0x24
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000588:	b480      	push	{r7}
 800058a:	b087      	sub	sp, #28
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
    bool ret = true;
 8000594:	2301      	movs	r3, #1
 8000596:	75fb      	strb	r3, [r7, #23]

    for (int i = 0; i < length; i++)
 8000598:	2300      	movs	r3, #0
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	e026      	b.n	80005ec <qbufferRead+0x64>
    {
        if (p_node->p_buf != NULL)
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	68db      	ldr	r3, [r3, #12]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d009      	beq.n	80005ba <qbufferRead+0x32>
        {
            p_data[i] = p_node->p_buf[p_node->out];
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	68da      	ldr	r2, [r3, #12]
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	441a      	add	r2, r3
 80005b0:	693b      	ldr	r3, [r7, #16]
 80005b2:	68b9      	ldr	r1, [r7, #8]
 80005b4:	440b      	add	r3, r1
 80005b6:	7812      	ldrb	r2, [r2, #0]
 80005b8:	701a      	strb	r2, [r3, #0]
        }

        if (p_node->out != p_node->in)
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	685a      	ldr	r2, [r3, #4]
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	d00c      	beq.n	80005e0 <qbufferRead+0x58>
        {
            p_node->out = (p_node->out + 1) % p_node->len;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	3301      	adds	r3, #1
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	6892      	ldr	r2, [r2, #8]
 80005d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80005d4:	fb01 f202 	mul.w	r2, r1, r2
 80005d8:	1a9a      	subs	r2, r3, r2
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	e002      	b.n	80005e6 <qbufferRead+0x5e>
        }
        else
        {
            ret = false;
 80005e0:	2300      	movs	r3, #0
 80005e2:	75fb      	strb	r3, [r7, #23]
            break;
 80005e4:	e006      	b.n	80005f4 <qbufferRead+0x6c>
    for (int i = 0; i < length; i++)
 80005e6:	693b      	ldr	r3, [r7, #16]
 80005e8:	3301      	adds	r3, #1
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d8d4      	bhi.n	800059e <qbufferRead+0x16>
        }
    }

    return ret;
 80005f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	371c      	adds	r7, #28
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
    uint32_t ret;

    ret = (p_node->in - p_node->out) % p_node->len;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	6892      	ldr	r2, [r2, #8]
 8000616:	fbb3 f1f2 	udiv	r1, r3, r2
 800061a:	fb01 f202 	mul.w	r2, r1, r2
 800061e:	1a9b      	subs	r3, r3, r2
 8000620:	60fb      	str	r3, [r7, #12]

    return ret;
 8000622:	68fb      	ldr	r3, [r7, #12]
}
 8000624:	4618      	mov	r0, r3
 8000626:	3714      	adds	r7, #20
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr
	...

08000630 <ledInit>:
led_tbl_t led_tbl[LED_MAX_CH] = {
    {GPIOC, GPIO_PIN_13, GPIO_PIN_RESET, GPIO_PIN_SET},
};

bool ledInit(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
    bool ret                         = true;
 8000636:	2301      	movs	r3, #1
 8000638:	74fb      	strb	r3, [r7, #19]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	463b      	mov	r3, r7
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]

    /* GPIO Ports Clock Enable */
//    __HAL_RCC_GPIOC_CLK_ENABLE();

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800064c:	4815      	ldr	r0, [pc, #84]	@ (80006a4 <ledInit+0x74>)
 800064e:	f000 fea5 	bl	800139c <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PC13 */
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2302      	movs	r3, #2
 800065c:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < LED_MAX_CH; i++)
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
 8000662:	e016      	b.n	8000692 <ledInit+0x62>
    {
        GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000664:	4a10      	ldr	r2, [pc, #64]	@ (80006a8 <ledInit+0x78>)
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	00db      	lsls	r3, r3, #3
 800066a:	4413      	add	r3, r2
 800066c:	889b      	ldrh	r3, [r3, #4]
 800066e:	603b      	str	r3, [r7, #0]
        HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000670:	4a0d      	ldr	r2, [pc, #52]	@ (80006a8 <ledInit+0x78>)
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000678:	463a      	mov	r2, r7
 800067a:	4611      	mov	r1, r2
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fd09 	bl	8001094 <HAL_GPIO_Init>

        ledOff(i);
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	4618      	mov	r0, r3
 8000688:	f000 f810 	bl	80006ac <ledOff>
    for (int i = 0; i < LED_MAX_CH; i++)
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	3301      	adds	r3, #1
 8000690:	617b      	str	r3, [r7, #20]
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	2b00      	cmp	r3, #0
 8000696:	dde5      	ble.n	8000664 <ledInit+0x34>
    }

    return ret;
 8000698:	7cfb      	ldrb	r3, [r7, #19]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3718      	adds	r7, #24
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40011000 	.word	0x40011000
 80006a8:	20000004 	.word	0x20000004

080006ac <ledOff>:
    if (ch >= LED_MAX_CH)
        return;
    HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}
void ledOff(uint8_t ch)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
    if (ch >= LED_MAX_CH)
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d111      	bne.n	80006e0 <ledOff+0x34>
        return;
    HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	4a0a      	ldr	r2, [pc, #40]	@ (80006e8 <ledOff+0x3c>)
 80006c0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	4a08      	ldr	r2, [pc, #32]	@ (80006e8 <ledOff+0x3c>)
 80006c8:	00db      	lsls	r3, r3, #3
 80006ca:	4413      	add	r3, r2
 80006cc:	8899      	ldrh	r1, [r3, #4]
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	4a05      	ldr	r2, [pc, #20]	@ (80006e8 <ledOff+0x3c>)
 80006d2:	00db      	lsls	r3, r3, #3
 80006d4:	4413      	add	r3, r2
 80006d6:	79db      	ldrb	r3, [r3, #7]
 80006d8:	461a      	mov	r2, r3
 80006da:	f000 fe5f 	bl	800139c <HAL_GPIO_WritePin>
 80006de:	e000      	b.n	80006e2 <ledOff+0x36>
        return;
 80006e0:	bf00      	nop
}
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000004 	.word	0x20000004

080006ec <ledToggle>:
void ledToggle(uint8_t ch)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
    if (ch >= LED_MAX_CH)
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d10d      	bne.n	8000718 <ledToggle+0x2c>
        return;
    HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	4a08      	ldr	r2, [pc, #32]	@ (8000720 <ledToggle+0x34>)
 8000700:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	4906      	ldr	r1, [pc, #24]	@ (8000720 <ledToggle+0x34>)
 8000708:	00db      	lsls	r3, r3, #3
 800070a:	440b      	add	r3, r1
 800070c:	889b      	ldrh	r3, [r3, #4]
 800070e:	4619      	mov	r1, r3
 8000710:	4610      	mov	r0, r2
 8000712:	f000 fe5b 	bl	80013cc <HAL_GPIO_TogglePin>
 8000716:	e000      	b.n	800071a <ledToggle+0x2e>
        return;
 8000718:	bf00      	nop
}
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000004 	.word	0x20000004

08000724 <resetInit>:
#include "rtc.h"

static uint32_t reset_count = 0;

bool resetInit(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
    bool ret = true;
 800072a:	2301      	movs	r3, #1
 800072c:	71fb      	strb	r3, [r7, #7]

    // push reset btn
    if (RCC->CSR & (1 << 26))
 800072e:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <resetInit+0x50>)
 8000730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000732:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000736:	2b00      	cmp	r3, #0
 8000738:	d012      	beq.n	8000760 <resetInit+0x3c>
    {
        rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1);
 800073a:	2001      	movs	r0, #1
 800073c:	f000 f84e 	bl	80007dc <rtcBackupRegRead>
 8000740:	4603      	mov	r3, r0
 8000742:	3301      	adds	r3, #1
 8000744:	4619      	mov	r1, r3
 8000746:	2001      	movs	r0, #1
 8000748:	f000 f838 	bl	80007bc <rtcBackupRegWrite>
        delay(500);
 800074c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000750:	f7ff fd78 	bl	8000244 <delay>
        reset_count = rtcBackupRegRead(1);
 8000754:	2001      	movs	r0, #1
 8000756:	f000 f841 	bl	80007dc <rtcBackupRegRead>
 800075a:	4603      	mov	r3, r0
 800075c:	4a06      	ldr	r2, [pc, #24]	@ (8000778 <resetInit+0x54>)
 800075e:	6013      	str	r3, [r2, #0]
    }

    rtcBackupRegWrite(1, 0);
 8000760:	2100      	movs	r1, #0
 8000762:	2001      	movs	r0, #1
 8000764:	f000 f82a 	bl	80007bc <rtcBackupRegWrite>

    return ret;
 8000768:	79fb      	ldrb	r3, [r7, #7]
}
 800076a:	4618      	mov	r0, r3
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40021000 	.word	0x40021000
 8000778:	20000200 	.word	0x20000200

0800077c <rtcInit>:
#include "rtc.h"

static RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
    bool ret = true;
 8000782:	2301      	movs	r3, #1
 8000784:	71fb      	strb	r3, [r7, #7]
//    __HAL_RCC_GPIOC_CLK_ENABLE();

    hrtc.Instance          = RTC;
 8000786:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <rtcInit+0x38>)
 8000788:	4a0b      	ldr	r2, [pc, #44]	@ (80007b8 <rtcInit+0x3c>)
 800078a:	601a      	str	r2, [r3, #0]
    hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800078c:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <rtcInit+0x38>)
 800078e:	f04f 32ff 	mov.w	r2, #4294967295
 8000792:	605a      	str	r2, [r3, #4]
    hrtc.Init.OutPut       = RTC_OUTPUTSOURCE_NONE;
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <rtcInit+0x38>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800079a:	4806      	ldr	r0, [pc, #24]	@ (80007b4 <rtcInit+0x38>)
 800079c:	f003 f918 	bl	80039d0 <HAL_RTC_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <rtcInit+0x2e>
    {
        Error_Handler();
 80007a6:	f7ff fdbe 	bl	8000326 <Error_Handler>
    }

    return ret;
 80007aa:	79fb      	ldrb	r3, [r7, #7]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000204 	.word	0x20000204
 80007b8:	40002800 	.word	0x40002800

080007bc <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]

    HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 80007c6:	683a      	ldr	r2, [r7, #0]
 80007c8:	6879      	ldr	r1, [r7, #4]
 80007ca:	4803      	ldr	r0, [pc, #12]	@ (80007d8 <rtcBackupRegWrite+0x1c>)
 80007cc:	f003 fa0a 	bl	8003be4 <HAL_RTCEx_BKUPWrite>
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000204 	.word	0x20000204

080007dc <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
    return HAL_RTCEx_BKUPRead(&hrtc, index);
 80007e4:	6879      	ldr	r1, [r7, #4]
 80007e6:	4804      	ldr	r0, [pc, #16]	@ (80007f8 <rtcBackupRegRead+0x1c>)
 80007e8:	f003 fa16 	bl	8003c18 <HAL_RTCEx_BKUPRead>
 80007ec:	4603      	mov	r3, r0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000204 	.word	0x20000204

080007fc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]

    if (rtcHandle->Instance == RTC)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a0b      	ldr	r2, [pc, #44]	@ (8000838 <HAL_RTC_MspInit+0x3c>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d110      	bne.n	8000830 <HAL_RTC_MspInit+0x34>
    {
        /* USER CODE BEGIN RTC_MspInit 0 */

        /* USER CODE END RTC_MspInit 0 */
        HAL_PWR_EnableBkUpAccess();
 800080e:	f002 fb57 	bl	8002ec0 <HAL_PWR_EnableBkUpAccess>
        /* Enable BKP CLK enable for backup registers */
        __HAL_RCC_BKP_CLK_ENABLE();
 8000812:	4b0a      	ldr	r3, [pc, #40]	@ (800083c <HAL_RTC_MspInit+0x40>)
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	4a09      	ldr	r2, [pc, #36]	@ (800083c <HAL_RTC_MspInit+0x40>)
 8000818:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800081c:	61d3      	str	r3, [r2, #28]
 800081e:	4b07      	ldr	r3, [pc, #28]	@ (800083c <HAL_RTC_MspInit+0x40>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
        /* RTC clock enable */
        __HAL_RCC_RTC_ENABLE();
 800082a:	4b05      	ldr	r3, [pc, #20]	@ (8000840 <HAL_RTC_MspInit+0x44>)
 800082c:	2201      	movs	r2, #1
 800082e:	601a      	str	r2, [r3, #0]
        /* USER CODE BEGIN RTC_MspInit 1 */

        /* USER CODE END RTC_MspInit 1 */
    }
}
 8000830:	bf00      	nop
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40002800 	.word	0x40002800
 800083c:	40021000 	.word	0x40021000
 8000840:	4242043c 	.word	0x4242043c

08000844 <uartInit>:
static uint8_t rx_data[UART_MAX_CH];

UART_HandleTypeDef huart1;

bool uartInit(void)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
    for (int i = 0; i < UART_MAX_CH; i++)
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	e007      	b.n	8000860 <uartInit+0x1c>
    {
        is_open[i] = false;
 8000850:	4a08      	ldr	r2, [pc, #32]	@ (8000874 <uartInit+0x30>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4413      	add	r3, r2
 8000856:	2200      	movs	r2, #0
 8000858:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < UART_MAX_CH; i++)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3301      	adds	r3, #1
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2b01      	cmp	r3, #1
 8000864:	ddf4      	ble.n	8000850 <uartInit+0xc>
    }

    return true;
 8000866:	2301      	movs	r3, #1
}
 8000868:	4618      	mov	r0, r3
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	20000218 	.word	0x20000218

08000878 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	6039      	str	r1, [r7, #0]
 8000882:	71fb      	strb	r3, [r7, #7]
    bool ret = false;
 8000884:	2300      	movs	r3, #0
 8000886:	73fb      	strb	r3, [r7, #15]
    switch (ch)
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d002      	beq.n	8000894 <uartOpen+0x1c>
 800088e:	2b01      	cmp	r3, #1
 8000890:	d007      	beq.n	80008a2 <uartOpen+0x2a>
 8000892:	e03e      	b.n	8000912 <uartOpen+0x9a>
    {
    case _DEF_UART1:
        is_open[ch] = true;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	4a21      	ldr	r2, [pc, #132]	@ (800091c <uartOpen+0xa4>)
 8000898:	2101      	movs	r1, #1
 800089a:	54d1      	strb	r1, [r2, r3]
        ret         = true;
 800089c:	2301      	movs	r3, #1
 800089e:	73fb      	strb	r3, [r7, #15]
        break;
 80008a0:	e037      	b.n	8000912 <uartOpen+0x9a>

    case _DEF_UART2:
        huart1.Instance          = USART1;
 80008a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000920 <uartOpen+0xa8>)
 80008a4:	4a1f      	ldr	r2, [pc, #124]	@ (8000924 <uartOpen+0xac>)
 80008a6:	601a      	str	r2, [r3, #0]
        huart1.Init.BaudRate     = baud;
 80008a8:	4a1d      	ldr	r2, [pc, #116]	@ (8000920 <uartOpen+0xa8>)
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	6053      	str	r3, [r2, #4]
        huart1.Init.WordLength   = UART_WORDLENGTH_8B;
 80008ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000920 <uartOpen+0xa8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
        huart1.Init.StopBits     = UART_STOPBITS_1;
 80008b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000920 <uartOpen+0xa8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
        huart1.Init.Parity       = UART_PARITY_NONE;
 80008ba:	4b19      	ldr	r3, [pc, #100]	@ (8000920 <uartOpen+0xa8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
        huart1.Init.Mode         = UART_MODE_TX_RX;
 80008c0:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <uartOpen+0xa8>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
        huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80008c6:	4b16      	ldr	r3, [pc, #88]	@ (8000920 <uartOpen+0xa8>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
        huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <uartOpen+0xa8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]

        qbufferCreate(&qbuffer[_DEF_UART2], &rx_buf[0], 256);
 80008d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008d6:	4914      	ldr	r1, [pc, #80]	@ (8000928 <uartOpen+0xb0>)
 80008d8:	4814      	ldr	r0, [pc, #80]	@ (800092c <uartOpen+0xb4>)
 80008da:	f7ff fdfe 	bl	80004da <qbufferCreate>

        if (HAL_UART_Init(&huart1) != HAL_OK)
 80008de:	4810      	ldr	r0, [pc, #64]	@ (8000920 <uartOpen+0xa8>)
 80008e0:	f003 f9b6 	bl	8003c50 <HAL_UART_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d002      	beq.n	80008f0 <uartOpen+0x78>
        {
            ret = false;
 80008ea:	2300      	movs	r3, #0
 80008ec:	73fb      	strb	r3, [r7, #15]
                                    1) != HAL_OK)
            {
                ret = false;
            }
        }
        break;
 80008ee:	e00f      	b.n	8000910 <uartOpen+0x98>
            ret         = true;
 80008f0:	2301      	movs	r3, #1
 80008f2:	73fb      	strb	r3, [r7, #15]
            is_open[ch] = true;
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4a09      	ldr	r2, [pc, #36]	@ (800091c <uartOpen+0xa4>)
 80008f8:	2101      	movs	r1, #1
 80008fa:	54d1      	strb	r1, [r2, r3]
            if (HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2],
 80008fc:	2201      	movs	r2, #1
 80008fe:	490c      	ldr	r1, [pc, #48]	@ (8000930 <uartOpen+0xb8>)
 8000900:	4807      	ldr	r0, [pc, #28]	@ (8000920 <uartOpen+0xa8>)
 8000902:	f003 fa80 	bl	8003e06 <HAL_UART_Receive_IT>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <uartOpen+0x98>
                ret = false;
 800090c:	2300      	movs	r3, #0
 800090e:	73fb      	strb	r3, [r7, #15]
        break;
 8000910:	bf00      	nop
    }
    return ret;
 8000912:	7bfb      	ldrb	r3, [r7, #15]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000218 	.word	0x20000218
 8000920:	20000340 	.word	0x20000340
 8000924:	40013800 	.word	0x40013800
 8000928:	2000023c 	.word	0x2000023c
 800092c:	2000022c 	.word	0x2000022c
 8000930:	2000033d 	.word	0x2000033d

08000934 <uartAvailable>:
uint32_t uartAvailable(uint8_t ch)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
    uint32_t ret = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]

    switch (ch)
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d002      	beq.n	800094e <uartAvailable+0x1a>
 8000948:	2b01      	cmp	r3, #1
 800094a:	d004      	beq.n	8000956 <uartAvailable+0x22>
 800094c:	e008      	b.n	8000960 <uartAvailable+0x2c>
    {
    case _DEF_UART1:
        ret = cdcAvailable();
 800094e:	f007 ff11 	bl	8008774 <cdcAvailable>
 8000952:	60f8      	str	r0, [r7, #12]
        break;
 8000954:	e004      	b.n	8000960 <uartAvailable+0x2c>

    case _DEF_UART2:
        ret = qbufferAvailable(&qbuffer[_DEF_UART2]);
 8000956:	4805      	ldr	r0, [pc, #20]	@ (800096c <uartAvailable+0x38>)
 8000958:	f7ff fe52 	bl	8000600 <qbufferAvailable>
 800095c:	60f8      	str	r0, [r7, #12]
        break;
 800095e:	bf00      	nop
    }

    return ret;
 8000960:	68fb      	ldr	r3, [r7, #12]
}
 8000962:	4618      	mov	r0, r3
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	2000022c 	.word	0x2000022c

08000970 <uartRead>:
uint8_t uartRead(uint8_t ch)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
    uint8_t ret = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	73fb      	strb	r3, [r7, #15]

    switch (ch)
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d002      	beq.n	800098a <uartRead+0x1a>
 8000984:	2b01      	cmp	r3, #1
 8000986:	d005      	beq.n	8000994 <uartRead+0x24>
 8000988:	e00c      	b.n	80009a4 <uartRead+0x34>
    {
    case _DEF_UART1:
        ret = cdcRead();
 800098a:	f007 ff0f 	bl	80087ac <cdcRead>
 800098e:	4603      	mov	r3, r0
 8000990:	73fb      	strb	r3, [r7, #15]
        break;
 8000992:	e007      	b.n	80009a4 <uartRead+0x34>

    case _DEF_UART2:
        qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8000994:	f107 030f 	add.w	r3, r7, #15
 8000998:	2201      	movs	r2, #1
 800099a:	4619      	mov	r1, r3
 800099c:	4804      	ldr	r0, [pc, #16]	@ (80009b0 <uartRead+0x40>)
 800099e:	f7ff fdf3 	bl	8000588 <qbufferRead>
        break;
 80009a2:	bf00      	nop
    }

    return ret;
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2000022c 	.word	0x2000022c

080009b4 <uartWrite>:
uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
 80009c0:	73fb      	strb	r3, [r7, #15]
    uint8_t ret = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	75fb      	strb	r3, [r7, #23]
    HAL_StatusTypeDef status;

    switch (ch)
 80009c6:	7bfb      	ldrb	r3, [r7, #15]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d002      	beq.n	80009d2 <uartWrite+0x1e>
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d007      	beq.n	80009e0 <uartWrite+0x2c>
 80009d0:	e015      	b.n	80009fe <uartWrite+0x4a>
    {
    case _DEF_UART1:
        ret = cdcWrite(p_data, length);
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	68b8      	ldr	r0, [r7, #8]
 80009d6:	f007 ff3b 	bl	8008850 <cdcWrite>
 80009da:	4603      	mov	r3, r0
 80009dc:	75fb      	strb	r3, [r7, #23]
        break;
 80009de:	e00e      	b.n	80009fe <uartWrite+0x4a>

    case _DEF_UART2:
        status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	b29a      	uxth	r2, r3
 80009e4:	2364      	movs	r3, #100	@ 0x64
 80009e6:	68b9      	ldr	r1, [r7, #8]
 80009e8:	4807      	ldr	r0, [pc, #28]	@ (8000a08 <uartWrite+0x54>)
 80009ea:	f003 f981 	bl	8003cf0 <HAL_UART_Transmit>
 80009ee:	4603      	mov	r3, r0
 80009f0:	75bb      	strb	r3, [r7, #22]
        if (status == HAL_OK)
 80009f2:	7dbb      	ldrb	r3, [r7, #22]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d101      	bne.n	80009fc <uartWrite+0x48>
        {
            ret = length;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80009fc:	bf00      	nop
    }

    return ret;
 80009fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3718      	adds	r7, #24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000340 	.word	0x20000340

08000a0c <uartPrintf>:
uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8000a0c:	b40e      	push	{r1, r2, r3}
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b0c7      	sub	sp, #284	@ 0x11c
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	4602      	mov	r2, r0
 8000a16:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a1a:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8000a1e:	701a      	strb	r2, [r3, #0]
    char buf[256];
    va_list args;
    int len;
    uint32_t ret;

    va_start(args, fmt);
 8000a20:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8000a24:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a28:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a2c:	601a      	str	r2, [r3, #0]
    len = vsnprintf(buf, 256, fmt, args);
 8000a2e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a32:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a36:	f107 0010 	add.w	r0, r7, #16
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000a40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a44:	f008 fc3a 	bl	80092bc <vsniprintf>
 8000a48:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    ret = uartWrite(ch, (uint8_t *)buf, len);
 8000a4c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8000a50:	f107 0110 	add.w	r1, r7, #16
 8000a54:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a58:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff ffa8 	bl	80009b4 <uartWrite>
 8000a64:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    va_end(args);

    return ret;
 8000a68:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8000a72:	46bd      	mov	sp, r7
 8000a74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a78:	b003      	add	sp, #12
 8000a7a:	4770      	bx	lr

08000a7c <HAL_UART_ErrorCallback>:
    }
    return ret;
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
    {
    }
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
	...

08000a90 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a08      	ldr	r2, [pc, #32]	@ (8000ac0 <HAL_UART_RxCpltCallback+0x30>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d109      	bne.n	8000ab6 <HAL_UART_RxCpltCallback+0x26>
    {
        qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4907      	ldr	r1, [pc, #28]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x34>)
 8000aa6:	4808      	ldr	r0, [pc, #32]	@ (8000ac8 <HAL_UART_RxCpltCallback+0x38>)
 8000aa8:	f7ff fd31 	bl	800050e <qbufferWrite>

        HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
 8000aac:	2201      	movs	r2, #1
 8000aae:	4905      	ldr	r1, [pc, #20]	@ (8000ac4 <HAL_UART_RxCpltCallback+0x34>)
 8000ab0:	4806      	ldr	r0, [pc, #24]	@ (8000acc <HAL_UART_RxCpltCallback+0x3c>)
 8000ab2:	f003 f9a8 	bl	8003e06 <HAL_UART_Receive_IT>
    }
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40013800 	.word	0x40013800
 8000ac4:	2000033d 	.word	0x2000033d
 8000ac8:	2000022c 	.word	0x2000022c
 8000acc:	20000340 	.word	0x20000340

08000ad0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0310 	add.w	r3, r7, #16
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
    if (uartHandle->Instance == USART1)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a20      	ldr	r2, [pc, #128]	@ (8000b6c <HAL_UART_MspInit+0x9c>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d139      	bne.n	8000b64 <HAL_UART_MspInit+0x94>
    {
        /* USER CODE BEGIN USART1_MspInit 0 */

        /* USER CODE END USART1_MspInit 0 */
        /* USART1 clock enable */
        __HAL_RCC_USART1_CLK_ENABLE();
 8000af0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b70 <HAL_UART_MspInit+0xa0>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	4a1e      	ldr	r2, [pc, #120]	@ (8000b70 <HAL_UART_MspInit+0xa0>)
 8000af6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000afa:	6193      	str	r3, [r2, #24]
 8000afc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b70 <HAL_UART_MspInit+0xa0>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b08:	4b19      	ldr	r3, [pc, #100]	@ (8000b70 <HAL_UART_MspInit+0xa0>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	4a18      	ldr	r2, [pc, #96]	@ (8000b70 <HAL_UART_MspInit+0xa0>)
 8000b0e:	f043 0304 	orr.w	r3, r3, #4
 8000b12:	6193      	str	r3, [r2, #24]
 8000b14:	4b16      	ldr	r3, [pc, #88]	@ (8000b70 <HAL_UART_MspInit+0xa0>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	f003 0304 	and.w	r3, r3, #4
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
        /**USART1 GPIO Configuration
        PA9     ------> USART1_TX
        PA10     ------> USART1_RX
        */
        GPIO_InitStruct.Pin   = GPIO_PIN_9;
 8000b20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b24:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	4619      	mov	r1, r3
 8000b34:	480f      	ldr	r0, [pc, #60]	@ (8000b74 <HAL_UART_MspInit+0xa4>)
 8000b36:	f000 faad 	bl	8001094 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin  = GPIO_PIN_10;
 8000b3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b3e:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4809      	ldr	r0, [pc, #36]	@ (8000b74 <HAL_UART_MspInit+0xa4>)
 8000b50:	f000 faa0 	bl	8001094 <HAL_GPIO_Init>

        /* USART1 interrupt Init */
        HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	2025      	movs	r0, #37	@ 0x25
 8000b5a:	f000 f9b2 	bl	8000ec2 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b5e:	2025      	movs	r0, #37	@ 0x25
 8000b60:	f000 f9cb 	bl	8000efa <HAL_NVIC_EnableIRQ>
        /* USER CODE BEGIN USART1_MspInit 1 */

        /* USER CODE END USART1_MspInit 1 */
    }
}
 8000b64:	bf00      	nop
 8000b66:	3720      	adds	r7, #32
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40013800 	.word	0x40013800
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40010800 	.word	0x40010800

08000b78 <usbInit>:

#include "usb.h"
#include "usb_device.h"


bool usbInit(void){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
  bool ret = true;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	75fb      	strb	r3, [r7, #23]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]

      GPIO_InitStruct.Pin   = GPIO_PIN_12;
 8000b8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b92:	607b      	str	r3, [r7, #4]
      GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_OD;
 8000b94:	2311      	movs	r3, #17
 8000b96:	60bb      	str	r3, [r7, #8]
      GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	613b      	str	r3, [r7, #16]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	480f      	ldr	r0, [pc, #60]	@ (8000be4 <usbInit+0x6c>)
 8000ba6:	f000 fa75 	bl	8001094 <HAL_GPIO_Init>

      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bb0:	480c      	ldr	r0, [pc, #48]	@ (8000be4 <usbInit+0x6c>)
 8000bb2:	f000 fbf3 	bl	800139c <HAL_GPIO_WritePin>
      delay(100);
 8000bb6:	2064      	movs	r0, #100	@ 0x64
 8000bb8:	f7ff fb44 	bl	8000244 <delay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bc2:	4808      	ldr	r0, [pc, #32]	@ (8000be4 <usbInit+0x6c>)
 8000bc4:	f000 fbea 	bl	800139c <HAL_GPIO_WritePin>

      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4804      	ldr	r0, [pc, #16]	@ (8000be4 <usbInit+0x6c>)
 8000bd2:	f000 fa5f 	bl	8001094 <HAL_GPIO_Init>

      MX_USB_DEVICE_Init();
 8000bd6:	f007 fd9d 	bl	8008714 <MX_USB_DEVICE_Init>

  return ret;
 8000bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40010800 	.word	0x40010800

08000be8 <hwInit>:
 */

#include "hw.h"

void hwInit(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
    bspInit();
 8000bec:	f7ff faf8 	bl	80001e0 <bspInit>
    rtcInit();
 8000bf0:	f7ff fdc4 	bl	800077c <rtcInit>

    resetInit();
 8000bf4:	f7ff fd96 	bl	8000724 <resetInit>
    ledInit();
 8000bf8:	f7ff fd1a 	bl	8000630 <ledInit>
    usbInit();
 8000bfc:	f7ff ffbc 	bl	8000b78 <usbInit>
    uartInit();
 8000c00:	f7ff fe20 	bl	8000844 <uartInit>
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c0c:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <HAL_Init+0x28>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a07      	ldr	r2, [pc, #28]	@ (8000c30 <HAL_Init+0x28>)
 8000c12:	f043 0310 	orr.w	r3, r3, #16
 8000c16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f000 f947 	bl	8000eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1e:	200f      	movs	r0, #15
 8000c20:	f000 f808 	bl	8000c34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c24:	f7ff fb86 	bl	8000334 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40022000 	.word	0x40022000

08000c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c3c:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <HAL_InitTick+0x54>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <HAL_InitTick+0x58>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	4619      	mov	r1, r3
 8000c46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 f95f 	bl	8000f16 <HAL_SYSTICK_Config>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e00e      	b.n	8000c80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b0f      	cmp	r3, #15
 8000c66:	d80a      	bhi.n	8000c7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c70:	f000 f927 	bl	8000ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c74:	4a06      	ldr	r2, [pc, #24]	@ (8000c90 <HAL_InitTick+0x5c>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e000      	b.n	8000c80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	20000010 	.word	0x20000010
 8000c90:	2000000c 	.word	0x2000000c

08000c94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c98:	4b05      	ldr	r3, [pc, #20]	@ (8000cb0 <HAL_IncTick+0x1c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b05      	ldr	r3, [pc, #20]	@ (8000cb4 <HAL_IncTick+0x20>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a03      	ldr	r2, [pc, #12]	@ (8000cb4 <HAL_IncTick+0x20>)
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	20000010 	.word	0x20000010
 8000cb4:	20000388 	.word	0x20000388

08000cb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;
 8000cbc:	4b02      	ldr	r3, [pc, #8]	@ (8000cc8 <HAL_GetTick+0x10>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	20000388 	.word	0x20000388

08000ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd4:	f7ff fff0 	bl	8000cb8 <HAL_GetTick>
 8000cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce4:	d005      	beq.n	8000cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d10 <HAL_Delay+0x44>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4413      	add	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cf2:	bf00      	nop
 8000cf4:	f7ff ffe0 	bl	8000cb8 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d8f7      	bhi.n	8000cf4 <HAL_Delay+0x28>
  {
  }
}
 8000d04:	bf00      	nop
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000010 	.word	0x20000010

08000d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d24:	4b0c      	ldr	r3, [pc, #48]	@ (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d46:	4a04      	ldr	r2, [pc, #16]	@ (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	60d3      	str	r3, [r2, #12]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d60:	4b04      	ldr	r3, [pc, #16]	@ (8000d74 <__NVIC_GetPriorityGrouping+0x18>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	f003 0307 	and.w	r3, r3, #7
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	db0b      	blt.n	8000da2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f003 021f 	and.w	r2, r3, #31
 8000d90:	4906      	ldr	r1, [pc, #24]	@ (8000dac <__NVIC_EnableIRQ+0x34>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	095b      	lsrs	r3, r3, #5
 8000d98:	2001      	movs	r0, #1
 8000d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	@ (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	@ (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	@ 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	4313      	orrs	r3, r2
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	@ 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e78:	d301      	bcc.n	8000e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00f      	b.n	8000e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <SysTick_Config+0x40>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e86:	210f      	movs	r1, #15
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f7ff ff90 	bl	8000db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e90:	4b05      	ldr	r3, [pc, #20]	@ (8000ea8 <SysTick_Config+0x40>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e96:	4b04      	ldr	r3, [pc, #16]	@ (8000ea8 <SysTick_Config+0x40>)
 8000e98:	2207      	movs	r2, #7
 8000e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	e000e010 	.word	0xe000e010

08000eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff2d 	bl	8000d14 <__NVIC_SetPriorityGrouping>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b086      	sub	sp, #24
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed4:	f7ff ff42 	bl	8000d5c <__NVIC_GetPriorityGrouping>
 8000ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	68b9      	ldr	r1, [r7, #8]
 8000ede:	6978      	ldr	r0, [r7, #20]
 8000ee0:	f7ff ff90 	bl	8000e04 <NVIC_EncodePriority>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eea:	4611      	mov	r1, r2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff5f 	bl	8000db0 <__NVIC_SetPriority>
}
 8000ef2:	bf00      	nop
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff35 	bl	8000d78 <__NVIC_EnableIRQ>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ffa2 	bl	8000e68 <SysTick_Config>
 8000f24:	4603      	mov	r3, r0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b085      	sub	sp, #20
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d008      	beq.n	8000f58 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2204      	movs	r2, #4
 8000f4a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e020      	b.n	8000f9a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f022 020e 	bic.w	r2, r2, #14
 8000f66:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 0201 	bic.w	r2, r2, #1
 8000f76:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f80:	2101      	movs	r1, #1
 8000f82:	fa01 f202 	lsl.w	r2, r1, r2
 8000f86:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fac:	2300      	movs	r3, #0
 8000fae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d005      	beq.n	8000fc8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	73fb      	strb	r3, [r7, #15]
 8000fc6:	e051      	b.n	800106c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f022 020e 	bic.w	r2, r2, #14
 8000fd6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f022 0201 	bic.w	r2, r2, #1
 8000fe6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a22      	ldr	r2, [pc, #136]	@ (8001078 <HAL_DMA_Abort_IT+0xd4>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d029      	beq.n	8001046 <HAL_DMA_Abort_IT+0xa2>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a21      	ldr	r2, [pc, #132]	@ (800107c <HAL_DMA_Abort_IT+0xd8>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d022      	beq.n	8001042 <HAL_DMA_Abort_IT+0x9e>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a1f      	ldr	r2, [pc, #124]	@ (8001080 <HAL_DMA_Abort_IT+0xdc>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d01a      	beq.n	800103c <HAL_DMA_Abort_IT+0x98>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a1e      	ldr	r2, [pc, #120]	@ (8001084 <HAL_DMA_Abort_IT+0xe0>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d012      	beq.n	8001036 <HAL_DMA_Abort_IT+0x92>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a1c      	ldr	r2, [pc, #112]	@ (8001088 <HAL_DMA_Abort_IT+0xe4>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d00a      	beq.n	8001030 <HAL_DMA_Abort_IT+0x8c>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a1b      	ldr	r2, [pc, #108]	@ (800108c <HAL_DMA_Abort_IT+0xe8>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d102      	bne.n	800102a <HAL_DMA_Abort_IT+0x86>
 8001024:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001028:	e00e      	b.n	8001048 <HAL_DMA_Abort_IT+0xa4>
 800102a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800102e:	e00b      	b.n	8001048 <HAL_DMA_Abort_IT+0xa4>
 8001030:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001034:	e008      	b.n	8001048 <HAL_DMA_Abort_IT+0xa4>
 8001036:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800103a:	e005      	b.n	8001048 <HAL_DMA_Abort_IT+0xa4>
 800103c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001040:	e002      	b.n	8001048 <HAL_DMA_Abort_IT+0xa4>
 8001042:	2310      	movs	r3, #16
 8001044:	e000      	b.n	8001048 <HAL_DMA_Abort_IT+0xa4>
 8001046:	2301      	movs	r3, #1
 8001048:	4a11      	ldr	r2, [pc, #68]	@ (8001090 <HAL_DMA_Abort_IT+0xec>)
 800104a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	4798      	blx	r3
    } 
  }
  return status;
 800106c:	7bfb      	ldrb	r3, [r7, #15]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40020008 	.word	0x40020008
 800107c:	4002001c 	.word	0x4002001c
 8001080:	40020030 	.word	0x40020030
 8001084:	40020044 	.word	0x40020044
 8001088:	40020058 	.word	0x40020058
 800108c:	4002006c 	.word	0x4002006c
 8001090:	40020000 	.word	0x40020000

08001094 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001094:	b480      	push	{r7}
 8001096:	b08b      	sub	sp, #44	@ 0x2c
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a6:	e169      	b.n	800137c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010a8:	2201      	movs	r2, #1
 80010aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	69fa      	ldr	r2, [r7, #28]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	f040 8158 	bne.w	8001376 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	4a9a      	ldr	r2, [pc, #616]	@ (8001334 <HAL_GPIO_Init+0x2a0>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d05e      	beq.n	800118e <HAL_GPIO_Init+0xfa>
 80010d0:	4a98      	ldr	r2, [pc, #608]	@ (8001334 <HAL_GPIO_Init+0x2a0>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d875      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 80010d6:	4a98      	ldr	r2, [pc, #608]	@ (8001338 <HAL_GPIO_Init+0x2a4>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d058      	beq.n	800118e <HAL_GPIO_Init+0xfa>
 80010dc:	4a96      	ldr	r2, [pc, #600]	@ (8001338 <HAL_GPIO_Init+0x2a4>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d86f      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 80010e2:	4a96      	ldr	r2, [pc, #600]	@ (800133c <HAL_GPIO_Init+0x2a8>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d052      	beq.n	800118e <HAL_GPIO_Init+0xfa>
 80010e8:	4a94      	ldr	r2, [pc, #592]	@ (800133c <HAL_GPIO_Init+0x2a8>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d869      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 80010ee:	4a94      	ldr	r2, [pc, #592]	@ (8001340 <HAL_GPIO_Init+0x2ac>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d04c      	beq.n	800118e <HAL_GPIO_Init+0xfa>
 80010f4:	4a92      	ldr	r2, [pc, #584]	@ (8001340 <HAL_GPIO_Init+0x2ac>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d863      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 80010fa:	4a92      	ldr	r2, [pc, #584]	@ (8001344 <HAL_GPIO_Init+0x2b0>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d046      	beq.n	800118e <HAL_GPIO_Init+0xfa>
 8001100:	4a90      	ldr	r2, [pc, #576]	@ (8001344 <HAL_GPIO_Init+0x2b0>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d85d      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 8001106:	2b12      	cmp	r3, #18
 8001108:	d82a      	bhi.n	8001160 <HAL_GPIO_Init+0xcc>
 800110a:	2b12      	cmp	r3, #18
 800110c:	d859      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 800110e:	a201      	add	r2, pc, #4	@ (adr r2, 8001114 <HAL_GPIO_Init+0x80>)
 8001110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001114:	0800118f 	.word	0x0800118f
 8001118:	08001169 	.word	0x08001169
 800111c:	0800117b 	.word	0x0800117b
 8001120:	080011bd 	.word	0x080011bd
 8001124:	080011c3 	.word	0x080011c3
 8001128:	080011c3 	.word	0x080011c3
 800112c:	080011c3 	.word	0x080011c3
 8001130:	080011c3 	.word	0x080011c3
 8001134:	080011c3 	.word	0x080011c3
 8001138:	080011c3 	.word	0x080011c3
 800113c:	080011c3 	.word	0x080011c3
 8001140:	080011c3 	.word	0x080011c3
 8001144:	080011c3 	.word	0x080011c3
 8001148:	080011c3 	.word	0x080011c3
 800114c:	080011c3 	.word	0x080011c3
 8001150:	080011c3 	.word	0x080011c3
 8001154:	080011c3 	.word	0x080011c3
 8001158:	08001171 	.word	0x08001171
 800115c:	08001185 	.word	0x08001185
 8001160:	4a79      	ldr	r2, [pc, #484]	@ (8001348 <HAL_GPIO_Init+0x2b4>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d013      	beq.n	800118e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001166:	e02c      	b.n	80011c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	623b      	str	r3, [r7, #32]
          break;
 800116e:	e029      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	3304      	adds	r3, #4
 8001176:	623b      	str	r3, [r7, #32]
          break;
 8001178:	e024      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	3308      	adds	r3, #8
 8001180:	623b      	str	r3, [r7, #32]
          break;
 8001182:	e01f      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	330c      	adds	r3, #12
 800118a:	623b      	str	r3, [r7, #32]
          break;
 800118c:	e01a      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d102      	bne.n	800119c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001196:	2304      	movs	r3, #4
 8001198:	623b      	str	r3, [r7, #32]
          break;
 800119a:	e013      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d105      	bne.n	80011b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011a4:	2308      	movs	r3, #8
 80011a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69fa      	ldr	r2, [r7, #28]
 80011ac:	611a      	str	r2, [r3, #16]
          break;
 80011ae:	e009      	b.n	80011c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011b0:	2308      	movs	r3, #8
 80011b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69fa      	ldr	r2, [r7, #28]
 80011b8:	615a      	str	r2, [r3, #20]
          break;
 80011ba:	e003      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011bc:	2300      	movs	r3, #0
 80011be:	623b      	str	r3, [r7, #32]
          break;
 80011c0:	e000      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          break;
 80011c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	2bff      	cmp	r3, #255	@ 0xff
 80011c8:	d801      	bhi.n	80011ce <HAL_GPIO_Init+0x13a>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	e001      	b.n	80011d2 <HAL_GPIO_Init+0x13e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3304      	adds	r3, #4
 80011d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	2bff      	cmp	r3, #255	@ 0xff
 80011d8:	d802      	bhi.n	80011e0 <HAL_GPIO_Init+0x14c>
 80011da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	e002      	b.n	80011e6 <HAL_GPIO_Init+0x152>
 80011e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e2:	3b08      	subs	r3, #8
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	210f      	movs	r1, #15
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	fa01 f303 	lsl.w	r3, r1, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	401a      	ands	r2, r3
 80011f8:	6a39      	ldr	r1, [r7, #32]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001200:	431a      	orrs	r2, r3
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	f000 80b1 	beq.w	8001376 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001214:	4b4d      	ldr	r3, [pc, #308]	@ (800134c <HAL_GPIO_Init+0x2b8>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4a4c      	ldr	r2, [pc, #304]	@ (800134c <HAL_GPIO_Init+0x2b8>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	6193      	str	r3, [r2, #24]
 8001220:	4b4a      	ldr	r3, [pc, #296]	@ (800134c <HAL_GPIO_Init+0x2b8>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800122c:	4a48      	ldr	r2, [pc, #288]	@ (8001350 <HAL_GPIO_Init+0x2bc>)
 800122e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001230:	089b      	lsrs	r3, r3, #2
 8001232:	3302      	adds	r3, #2
 8001234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001238:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800123a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	220f      	movs	r2, #15
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	4013      	ands	r3, r2
 800124e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a40      	ldr	r2, [pc, #256]	@ (8001354 <HAL_GPIO_Init+0x2c0>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d013      	beq.n	8001280 <HAL_GPIO_Init+0x1ec>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a3f      	ldr	r2, [pc, #252]	@ (8001358 <HAL_GPIO_Init+0x2c4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d00d      	beq.n	800127c <HAL_GPIO_Init+0x1e8>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a3e      	ldr	r2, [pc, #248]	@ (800135c <HAL_GPIO_Init+0x2c8>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d007      	beq.n	8001278 <HAL_GPIO_Init+0x1e4>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a3d      	ldr	r2, [pc, #244]	@ (8001360 <HAL_GPIO_Init+0x2cc>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d101      	bne.n	8001274 <HAL_GPIO_Init+0x1e0>
 8001270:	2303      	movs	r3, #3
 8001272:	e006      	b.n	8001282 <HAL_GPIO_Init+0x1ee>
 8001274:	2304      	movs	r3, #4
 8001276:	e004      	b.n	8001282 <HAL_GPIO_Init+0x1ee>
 8001278:	2302      	movs	r3, #2
 800127a:	e002      	b.n	8001282 <HAL_GPIO_Init+0x1ee>
 800127c:	2301      	movs	r3, #1
 800127e:	e000      	b.n	8001282 <HAL_GPIO_Init+0x1ee>
 8001280:	2300      	movs	r3, #0
 8001282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001284:	f002 0203 	and.w	r2, r2, #3
 8001288:	0092      	lsls	r2, r2, #2
 800128a:	4093      	lsls	r3, r2
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	4313      	orrs	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001292:	492f      	ldr	r1, [pc, #188]	@ (8001350 <HAL_GPIO_Init+0x2bc>)
 8001294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	3302      	adds	r3, #2
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d006      	beq.n	80012ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001364 <HAL_GPIO_Init+0x2d0>)
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	492c      	ldr	r1, [pc, #176]	@ (8001364 <HAL_GPIO_Init+0x2d0>)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	608b      	str	r3, [r1, #8]
 80012b8:	e006      	b.n	80012c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001364 <HAL_GPIO_Init+0x2d0>)
 80012bc:	689a      	ldr	r2, [r3, #8]
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	4928      	ldr	r1, [pc, #160]	@ (8001364 <HAL_GPIO_Init+0x2d0>)
 80012c4:	4013      	ands	r3, r2
 80012c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d006      	beq.n	80012e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012d4:	4b23      	ldr	r3, [pc, #140]	@ (8001364 <HAL_GPIO_Init+0x2d0>)
 80012d6:	68da      	ldr	r2, [r3, #12]
 80012d8:	4922      	ldr	r1, [pc, #136]	@ (8001364 <HAL_GPIO_Init+0x2d0>)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	60cb      	str	r3, [r1, #12]
 80012e0:	e006      	b.n	80012f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012e2:	4b20      	ldr	r3, [pc, #128]	@ (8001364 <HAL_GPIO_Init+0x2d0>)
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	491e      	ldr	r1, [pc, #120]	@ (8001364 <HAL_GPIO_Init+0x2d0>)
 80012ec:	4013      	ands	r3, r2
 80012ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d006      	beq.n	800130a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012fc:	4b19      	ldr	r3, [pc, #100]	@ (8001364 <HAL_GPIO_Init+0x2d0>)
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	4918      	ldr	r1, [pc, #96]	@ (8001364 <HAL_GPIO_Init+0x2d0>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	604b      	str	r3, [r1, #4]
 8001308:	e006      	b.n	8001318 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800130a:	4b16      	ldr	r3, [pc, #88]	@ (8001364 <HAL_GPIO_Init+0x2d0>)
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	43db      	mvns	r3, r3
 8001312:	4914      	ldr	r1, [pc, #80]	@ (8001364 <HAL_GPIO_Init+0x2d0>)
 8001314:	4013      	ands	r3, r2
 8001316:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d021      	beq.n	8001368 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001324:	4b0f      	ldr	r3, [pc, #60]	@ (8001364 <HAL_GPIO_Init+0x2d0>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	490e      	ldr	r1, [pc, #56]	@ (8001364 <HAL_GPIO_Init+0x2d0>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	600b      	str	r3, [r1, #0]
 8001330:	e021      	b.n	8001376 <HAL_GPIO_Init+0x2e2>
 8001332:	bf00      	nop
 8001334:	10320000 	.word	0x10320000
 8001338:	10310000 	.word	0x10310000
 800133c:	10220000 	.word	0x10220000
 8001340:	10210000 	.word	0x10210000
 8001344:	10120000 	.word	0x10120000
 8001348:	10110000 	.word	0x10110000
 800134c:	40021000 	.word	0x40021000
 8001350:	40010000 	.word	0x40010000
 8001354:	40010800 	.word	0x40010800
 8001358:	40010c00 	.word	0x40010c00
 800135c:	40011000 	.word	0x40011000
 8001360:	40011400 	.word	0x40011400
 8001364:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001368:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <HAL_GPIO_Init+0x304>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	43db      	mvns	r3, r3
 8001370:	4909      	ldr	r1, [pc, #36]	@ (8001398 <HAL_GPIO_Init+0x304>)
 8001372:	4013      	ands	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001378:	3301      	adds	r3, #1
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001382:	fa22 f303 	lsr.w	r3, r2, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	f47f ae8e 	bne.w	80010a8 <HAL_GPIO_Init+0x14>
  }
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	372c      	adds	r7, #44	@ 0x2c
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	40010400 	.word	0x40010400

0800139c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	807b      	strh	r3, [r7, #2]
 80013a8:	4613      	mov	r3, r2
 80013aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013ac:	787b      	ldrb	r3, [r7, #1]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013b2:	887a      	ldrh	r2, [r7, #2]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013b8:	e003      	b.n	80013c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013ba:	887b      	ldrh	r3, [r7, #2]
 80013bc:	041a      	lsls	r2, r3, #16
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	611a      	str	r2, [r3, #16]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013de:	887a      	ldrh	r2, [r7, #2]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4013      	ands	r3, r2
 80013e4:	041a      	lsls	r2, r3, #16
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	43d9      	mvns	r1, r3
 80013ea:	887b      	ldrh	r3, [r7, #2]
 80013ec:	400b      	ands	r3, r1
 80013ee:	431a      	orrs	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	611a      	str	r2, [r3, #16]
}
 80013f4:	bf00      	nop
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr

080013fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b084      	sub	sp, #16
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0e8      	b.n	80015e2 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	d106      	bne.n	800142a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f007 fc69 	bl	8008cfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2203      	movs	r2, #3
 800142e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f003 fa8c 	bl	800495a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6818      	ldr	r0, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3304      	adds	r3, #4
 800144a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800144c:	f003 fa62 	bl	8004914 <USB_CoreInit>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d005      	beq.n	8001462 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2202      	movs	r2, #2
 800145a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e0bf      	b.n	80015e2 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f003 fa90 	bl	800498e <USB_SetCurrentMode>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d005      	beq.n	8001480 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2202      	movs	r2, #2
 8001478:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e0b0      	b.n	80015e2 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001480:	2300      	movs	r3, #0
 8001482:	73fb      	strb	r3, [r7, #15]
 8001484:	e03e      	b.n	8001504 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001486:	7bfa      	ldrb	r2, [r7, #15]
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	440b      	add	r3, r1
 8001494:	3311      	adds	r3, #17
 8001496:	2201      	movs	r2, #1
 8001498:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800149a:	7bfa      	ldrb	r2, [r7, #15]
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	440b      	add	r3, r1
 80014a8:	3310      	adds	r3, #16
 80014aa:	7bfa      	ldrb	r2, [r7, #15]
 80014ac:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	440b      	add	r3, r1
 80014bc:	3313      	adds	r3, #19
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014c2:	7bfa      	ldrb	r2, [r7, #15]
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	440b      	add	r3, r1
 80014d0:	3320      	adds	r3, #32
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014d6:	7bfa      	ldrb	r2, [r7, #15]
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	440b      	add	r3, r1
 80014e4:	3324      	adds	r3, #36	@ 0x24
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	440b      	add	r3, r1
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	3301      	adds	r3, #1
 8001502:	73fb      	strb	r3, [r7, #15]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	791b      	ldrb	r3, [r3, #4]
 8001508:	7bfa      	ldrb	r2, [r7, #15]
 800150a:	429a      	cmp	r2, r3
 800150c:	d3bb      	bcc.n	8001486 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800150e:	2300      	movs	r3, #0
 8001510:	73fb      	strb	r3, [r7, #15]
 8001512:	e044      	b.n	800159e <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001514:	7bfa      	ldrb	r2, [r7, #15]
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	440b      	add	r3, r1
 8001522:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800152a:	7bfa      	ldrb	r2, [r7, #15]
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	440b      	add	r3, r1
 8001538:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800153c:	7bfa      	ldrb	r2, [r7, #15]
 800153e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001540:	7bfa      	ldrb	r2, [r7, #15]
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	440b      	add	r3, r1
 800154e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001556:	7bfa      	ldrb	r2, [r7, #15]
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	440b      	add	r3, r1
 8001564:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800156c:	7bfa      	ldrb	r2, [r7, #15]
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	440b      	add	r3, r1
 800157a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001582:	7bfa      	ldrb	r2, [r7, #15]
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	440b      	add	r3, r1
 8001590:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	3301      	adds	r3, #1
 800159c:	73fb      	strb	r3, [r7, #15]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	791b      	ldrb	r3, [r3, #4]
 80015a2:	7bfa      	ldrb	r2, [r7, #15]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d3b5      	bcc.n	8001514 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6818      	ldr	r0, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3304      	adds	r3, #4
 80015b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015b2:	f003 f9f8 	bl	80049a6 <USB_DevInit>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2202      	movs	r2, #2
 80015c0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e00c      	b.n	80015e2 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f005 fc77 	bl	8006ece <USB_DevDisconnect>

  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d101      	bne.n	8001600 <HAL_PCD_Start+0x16>
 80015fc:	2302      	movs	r3, #2
 80015fe:	e016      	b.n	800162e <HAL_PCD_Start+0x44>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f003 f98e 	bl	800492e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001612:	2101      	movs	r1, #1
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f007 fde4 	bl	80091e2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f005 fc4b 	bl	8006eba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b088      	sub	sp, #32
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f005 fc4d 	bl	8006ee2 <USB_ReadInterrupts>
 8001648:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 fb1a 	bl	8001c8e <PCD_EP_ISR_Handler>

    return;
 800165a:	e119      	b.n	8001890 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001662:	2b00      	cmp	r3, #0
 8001664:	d013      	beq.n	800168e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800166e:	b29a      	uxth	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001678:	b292      	uxth	r2, r2
 800167a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f007 fbb7 	bl	8008df2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001684:	2100      	movs	r1, #0
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 f905 	bl	8001896 <HAL_PCD_SetAddress>

    return;
 800168c:	e100      	b.n	8001890 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00c      	beq.n	80016b2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80016aa:	b292      	uxth	r2, r2
 80016ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80016b0:	e0ee      	b.n	8001890 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00c      	beq.n	80016d6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80016ce:	b292      	uxth	r2, r2
 80016d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80016d4:	e0dc      	b.n	8001890 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d027      	beq.n	8001730 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0204 	bic.w	r2, r2, #4
 80016f2:	b292      	uxth	r2, r2
 80016f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001700:	b29a      	uxth	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0208 	bic.w	r2, r2, #8
 800170a:	b292      	uxth	r2, r2
 800170c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f007 fba7 	bl	8008e64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800171e:	b29a      	uxth	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001728:	b292      	uxth	r2, r2
 800172a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800172e:	e0af      	b.n	8001890 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 8083 	beq.w	8001842 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800173c:	2300      	movs	r3, #0
 800173e:	77fb      	strb	r3, [r7, #31]
 8001740:	e010      	b.n	8001764 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	7ffb      	ldrb	r3, [r7, #31]
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	441a      	add	r2, r3
 800174e:	7ffb      	ldrb	r3, [r7, #31]
 8001750:	8812      	ldrh	r2, [r2, #0]
 8001752:	b292      	uxth	r2, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	3320      	adds	r3, #32
 8001758:	443b      	add	r3, r7
 800175a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800175e:	7ffb      	ldrb	r3, [r7, #31]
 8001760:	3301      	adds	r3, #1
 8001762:	77fb      	strb	r3, [r7, #31]
 8001764:	7ffb      	ldrb	r3, [r7, #31]
 8001766:	2b07      	cmp	r3, #7
 8001768:	d9eb      	bls.n	8001742 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001772:	b29a      	uxth	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f042 0201 	orr.w	r2, r2, #1
 800177c:	b292      	uxth	r2, r2
 800177e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800178a:	b29a      	uxth	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0201 	bic.w	r2, r2, #1
 8001794:	b292      	uxth	r2, r2
 8001796:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800179a:	bf00      	nop
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f6      	beq.n	800179c <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017c0:	b292      	uxth	r2, r2
 80017c2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	77fb      	strb	r3, [r7, #31]
 80017ca:	e00f      	b.n	80017ec <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80017cc:	7ffb      	ldrb	r3, [r7, #31]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6812      	ldr	r2, [r2, #0]
 80017d2:	4611      	mov	r1, r2
 80017d4:	7ffa      	ldrb	r2, [r7, #31]
 80017d6:	0092      	lsls	r2, r2, #2
 80017d8:	440a      	add	r2, r1
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	3320      	adds	r3, #32
 80017de:	443b      	add	r3, r7
 80017e0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80017e4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80017e6:	7ffb      	ldrb	r3, [r7, #31]
 80017e8:	3301      	adds	r3, #1
 80017ea:	77fb      	strb	r3, [r7, #31]
 80017ec:	7ffb      	ldrb	r3, [r7, #31]
 80017ee:	2b07      	cmp	r3, #7
 80017f0:	d9ec      	bls.n	80017cc <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f042 0208 	orr.w	r2, r2, #8
 8001804:	b292      	uxth	r2, r2
 8001806:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001812:	b29a      	uxth	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800181c:	b292      	uxth	r2, r2
 800181e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800182a:	b29a      	uxth	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f042 0204 	orr.w	r2, r2, #4
 8001834:	b292      	uxth	r2, r2
 8001836:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f007 faf8 	bl	8008e30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001840:	e026      	b.n	8001890 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001848:	2b00      	cmp	r3, #0
 800184a:	d00f      	beq.n	800186c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001854:	b29a      	uxth	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800185e:	b292      	uxth	r2, r2
 8001860:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f007 fab6 	bl	8008dd6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800186a:	e011      	b.n	8001890 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00c      	beq.n	8001890 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800187e:	b29a      	uxth	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001888:	b292      	uxth	r2, r2
 800188a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800188e:	bf00      	nop
  }
}
 8001890:	3720      	adds	r7, #32
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	460b      	mov	r3, r1
 80018a0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d101      	bne.n	80018b0 <HAL_PCD_SetAddress+0x1a>
 80018ac:	2302      	movs	r3, #2
 80018ae:	e012      	b.n	80018d6 <HAL_PCD_SetAddress+0x40>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	78fa      	ldrb	r2, [r7, #3]
 80018bc:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	78fa      	ldrb	r2, [r7, #3]
 80018c4:	4611      	mov	r1, r2
 80018c6:	4618      	mov	r0, r3
 80018c8:	f005 fae4 	bl	8006e94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b084      	sub	sp, #16
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
 80018e6:	4608      	mov	r0, r1
 80018e8:	4611      	mov	r1, r2
 80018ea:	461a      	mov	r2, r3
 80018ec:	4603      	mov	r3, r0
 80018ee:	70fb      	strb	r3, [r7, #3]
 80018f0:	460b      	mov	r3, r1
 80018f2:	803b      	strh	r3, [r7, #0]
 80018f4:	4613      	mov	r3, r2
 80018f6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001900:	2b00      	cmp	r3, #0
 8001902:	da0e      	bge.n	8001922 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001904:	78fb      	ldrb	r3, [r7, #3]
 8001906:	f003 0207 	and.w	r2, r3, #7
 800190a:	4613      	mov	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	3310      	adds	r3, #16
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	4413      	add	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2201      	movs	r2, #1
 800191e:	705a      	strb	r2, [r3, #1]
 8001920:	e00e      	b.n	8001940 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001922:	78fb      	ldrb	r3, [r7, #3]
 8001924:	f003 0207 	and.w	r2, r3, #7
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	4413      	add	r3, r2
 8001938:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2200      	movs	r2, #0
 800193e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001940:	78fb      	ldrb	r3, [r7, #3]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	b2da      	uxtb	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800194c:	883a      	ldrh	r2, [r7, #0]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	78ba      	ldrb	r2, [r7, #2]
 8001956:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001958:	78bb      	ldrb	r3, [r7, #2]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d102      	bne.n	8001964 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800196a:	2b01      	cmp	r3, #1
 800196c:	d101      	bne.n	8001972 <HAL_PCD_EP_Open+0x94>
 800196e:	2302      	movs	r3, #2
 8001970:	e00e      	b.n	8001990 <HAL_PCD_EP_Open+0xb2>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68f9      	ldr	r1, [r7, #12]
 8001980:	4618      	mov	r0, r3
 8001982:	f003 f82d 	bl	80049e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800198e:	7afb      	ldrb	r3, [r7, #11]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	da0e      	bge.n	80019ca <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019ac:	78fb      	ldrb	r3, [r7, #3]
 80019ae:	f003 0207 	and.w	r2, r3, #7
 80019b2:	4613      	mov	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	3310      	adds	r3, #16
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	4413      	add	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2201      	movs	r2, #1
 80019c6:	705a      	strb	r2, [r3, #1]
 80019c8:	e00e      	b.n	80019e8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	f003 0207 	and.w	r2, r3, #7
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	4413      	add	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2200      	movs	r2, #0
 80019e6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d101      	bne.n	8001a02 <HAL_PCD_EP_Close+0x6a>
 80019fe:	2302      	movs	r3, #2
 8001a00:	e00e      	b.n	8001a20 <HAL_PCD_EP_Close+0x88>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68f9      	ldr	r1, [r7, #12]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f003 fba5 	bl	8005160 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	603b      	str	r3, [r7, #0]
 8001a34:	460b      	mov	r3, r1
 8001a36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a38:	7afb      	ldrb	r3, [r7, #11]
 8001a3a:	f003 0207 	and.w	r2, r3, #7
 8001a3e:	4613      	mov	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	2200      	movs	r2, #0
 8001a66:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a68:	7afb      	ldrb	r3, [r7, #11]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6979      	ldr	r1, [r7, #20]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f003 fd5c 	bl	8005538 <USB_EPStartXfer>

  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	460b      	mov	r3, r1
 8001a94:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a96:	78fb      	ldrb	r3, [r7, #3]
 8001a98:	f003 0207 	and.w	r2, r3, #7
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	440b      	add	r3, r1
 8001aa8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001aac:	681b      	ldr	r3, [r3, #0]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ac8:	7afb      	ldrb	r3, [r7, #11]
 8001aca:	f003 0207 	and.w	r2, r3, #7
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	3310      	adds	r3, #16
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	2201      	movs	r2, #1
 8001b02:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b04:	7afb      	ldrb	r3, [r7, #11]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6979      	ldr	r1, [r7, #20]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f003 fd0e 	bl	8005538 <USB_EPStartXfer>

  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b084      	sub	sp, #16
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	460b      	mov	r3, r1
 8001b30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b32:	78fb      	ldrb	r3, [r7, #3]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	7912      	ldrb	r2, [r2, #4]
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d901      	bls.n	8001b44 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e04c      	b.n	8001bde <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	da0e      	bge.n	8001b6a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	f003 0207 	and.w	r2, r3, #7
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	3310      	adds	r3, #16
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	4413      	add	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2201      	movs	r2, #1
 8001b66:	705a      	strb	r2, [r3, #1]
 8001b68:	e00c      	b.n	8001b84 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b6a:	78fa      	ldrb	r2, [r7, #3]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2201      	movs	r2, #1
 8001b88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b8a:	78fb      	ldrb	r3, [r7, #3]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <HAL_PCD_EP_SetStall+0x7e>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e01c      	b.n	8001bde <HAL_PCD_EP_SetStall+0xb8>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68f9      	ldr	r1, [r7, #12]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f005 f871 	bl	8006c9a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bb8:	78fb      	ldrb	r3, [r7, #3]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d108      	bne.n	8001bd4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4610      	mov	r0, r2
 8001bd0:	f005 f996 	bl	8006f00 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b084      	sub	sp, #16
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001bf2:	78fb      	ldrb	r3, [r7, #3]
 8001bf4:	f003 030f 	and.w	r3, r3, #15
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	7912      	ldrb	r2, [r2, #4]
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d901      	bls.n	8001c04 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e040      	b.n	8001c86 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	da0e      	bge.n	8001c2a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c0c:	78fb      	ldrb	r3, [r7, #3]
 8001c0e:	f003 0207 	and.w	r2, r3, #7
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	3310      	adds	r3, #16
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	4413      	add	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2201      	movs	r2, #1
 8001c26:	705a      	strb	r2, [r3, #1]
 8001c28:	e00e      	b.n	8001c48 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	f003 0207 	and.w	r2, r3, #7
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	4413      	add	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d101      	bne.n	8001c68 <HAL_PCD_EP_ClrStall+0x82>
 8001c64:	2302      	movs	r3, #2
 8001c66:	e00e      	b.n	8001c86 <HAL_PCD_EP_ClrStall+0xa0>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68f9      	ldr	r1, [r7, #12]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f005 f85f 	bl	8006d3a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b096      	sub	sp, #88	@ 0x58
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c96:	e3bb      	b.n	8002410 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ca0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001ca4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001cb2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f040 8175 	bne.w	8001fa6 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001cbc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001cc0:	f003 0310 	and.w	r3, r3, #16
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d14e      	bne.n	8001d66 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001cd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cd8:	81fb      	strh	r3, [r7, #14]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	89fb      	ldrh	r3, [r7, #14]
 8001ce0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ce4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3310      	adds	r3, #16
 8001cf0:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	4413      	add	r3, r2
 8001d06:	3302      	adds	r3, #2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6812      	ldr	r2, [r2, #0]
 8001d0e:	4413      	add	r3, r2
 8001d10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d1c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001d1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d20:	695a      	ldr	r2, [r3, #20]
 8001d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	441a      	add	r2, r3
 8001d28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d2a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f007 f837 	bl	8008da2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	7b5b      	ldrb	r3, [r3, #13]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 8368 	beq.w	8002410 <PCD_EP_ISR_Handler+0x782>
 8001d40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f040 8363 	bne.w	8002410 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	7b5b      	ldrb	r3, [r3, #13]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	735a      	strb	r2, [r3, #13]
 8001d64:	e354      	b.n	8002410 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d6c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001d78:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001d7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d034      	beq.n	8001dee <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	461a      	mov	r2, r3
 8001d90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	4413      	add	r3, r2
 8001d98:	3306      	adds	r3, #6
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	4413      	add	r3, r2
 8001da2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001dac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dae:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dbc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	f005 f8ec 	bl	8006fa0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	823b      	strh	r3, [r7, #16]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	8a3a      	ldrh	r2, [r7, #16]
 8001dde:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001de2:	b292      	uxth	r2, r2
 8001de4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f006 ffae 	bl	8008d48 <HAL_PCD_SetupStageCallback>
 8001dec:	e310      	b.n	8002410 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001dee:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f280 830c 	bge.w	8002410 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001e04:	4013      	ands	r3, r2
 8001e06:	83fb      	strh	r3, [r7, #30]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	8bfa      	ldrh	r2, [r7, #30]
 8001e0e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e12:	b292      	uxth	r2, r2
 8001e14:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	461a      	mov	r2, r3
 8001e22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4413      	add	r3, r2
 8001e2a:	3306      	adds	r3, #6
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6812      	ldr	r2, [r2, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e40:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001e42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d019      	beq.n	8001e7e <PCD_EP_ISR_Handler+0x1f0>
 8001e4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d015      	beq.n	8001e7e <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6818      	ldr	r0, [r3, #0]
 8001e56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e58:	6959      	ldr	r1, [r3, #20]
 8001e5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e5c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e60:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	f005 f89c 	bl	8006fa0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001e68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e6a:	695a      	ldr	r2, [r3, #20]
 8001e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	441a      	add	r2, r3
 8001e72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e74:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001e76:	2100      	movs	r1, #0
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f006 ff77 	bl	8008d6c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001e88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f040 82bd 	bne.w	8002410 <PCD_EP_ISR_Handler+0x782>
 8001e96:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e9a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001e9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001ea2:	f000 82b5 	beq.w	8002410 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	61bb      	str	r3, [r7, #24]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	4413      	add	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	801a      	strh	r2, [r3, #0]
 8001ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	2b3e      	cmp	r3, #62	@ 0x3e
 8001edc:	d91d      	bls.n	8001f1a <PCD_EP_ISR_Handler+0x28c>
 8001ede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	095b      	lsrs	r3, r3, #5
 8001ee4:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ee6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f003 031f 	and.w	r3, r3, #31
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d102      	bne.n	8001ef8 <PCD_EP_ISR_Handler+0x26a>
 8001ef2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	029b      	lsls	r3, r3, #10
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	4313      	orrs	r3, r2
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	801a      	strh	r2, [r3, #0]
 8001f18:	e026      	b.n	8001f68 <PCD_EP_ISR_Handler+0x2da>
 8001f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10a      	bne.n	8001f38 <PCD_EP_ISR_Handler+0x2aa>
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	801a      	strh	r2, [r3, #0]
 8001f36:	e017      	b.n	8001f68 <PCD_EP_ISR_Handler+0x2da>
 8001f38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	085b      	lsrs	r3, r3, #1
 8001f3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <PCD_EP_ISR_Handler+0x2c4>
 8001f4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f4e:	3301      	adds	r3, #1
 8001f50:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	029b      	lsls	r3, r3, #10
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	4313      	orrs	r3, r2
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f78:	827b      	strh	r3, [r7, #18]
 8001f7a:	8a7b      	ldrh	r3, [r7, #18]
 8001f7c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8001f80:	827b      	strh	r3, [r7, #18]
 8001f82:	8a7b      	ldrh	r3, [r7, #18]
 8001f84:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8001f88:	827b      	strh	r3, [r7, #18]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	8a7b      	ldrh	r3, [r7, #18]
 8001f90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001f94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8001f98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	8013      	strh	r3, [r2, #0]
 8001fa4:	e234      	b.n	8002410 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001fba:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f280 80fc 	bge.w	80021bc <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001fda:	4013      	ands	r3, r2
 8001fdc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001ff2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ff6:	b292      	uxth	r2, r2
 8001ff8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001ffa:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002012:	7b1b      	ldrb	r3, [r3, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d125      	bne.n	8002064 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002020:	b29b      	uxth	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4413      	add	r3, r2
 800202c:	3306      	adds	r3, #6
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	4413      	add	r3, r2
 8002036:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002040:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002044:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 8092 	beq.w	8002172 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6818      	ldr	r0, [r3, #0]
 8002052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002054:	6959      	ldr	r1, [r3, #20]
 8002056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002058:	88da      	ldrh	r2, [r3, #6]
 800205a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800205e:	f004 ff9f 	bl	8006fa0 <USB_ReadPMA>
 8002062:	e086      	b.n	8002172 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002066:	78db      	ldrb	r3, [r3, #3]
 8002068:	2b02      	cmp	r3, #2
 800206a:	d10a      	bne.n	8002082 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800206c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002070:	461a      	mov	r2, r3
 8002072:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f9d9 	bl	800242c <HAL_PCD_EP_DB_Receive>
 800207a:	4603      	mov	r3, r0
 800207c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002080:	e077      	b.n	8002172 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	461a      	mov	r2, r3
 8002088:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	b29b      	uxth	r3, r3
 8002094:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002098:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800209c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	441a      	add	r2, r3
 80020ae:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80020b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80020b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80020ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d024      	beq.n	800212a <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	461a      	mov	r2, r3
 80020ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	4413      	add	r3, r2
 80020f4:	3302      	adds	r3, #2
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	4413      	add	r3, r2
 80020fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002108:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800210c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002110:	2b00      	cmp	r3, #0
 8002112:	d02e      	beq.n	8002172 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6818      	ldr	r0, [r3, #0]
 8002118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800211a:	6959      	ldr	r1, [r3, #20]
 800211c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800211e:	891a      	ldrh	r2, [r3, #8]
 8002120:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002124:	f004 ff3c 	bl	8006fa0 <USB_ReadPMA>
 8002128:	e023      	b.n	8002172 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002132:	b29b      	uxth	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4413      	add	r3, r2
 800213e:	3306      	adds	r3, #6
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6812      	ldr	r2, [r2, #0]
 8002146:	4413      	add	r3, r2
 8002148:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002152:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002156:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800215a:	2b00      	cmp	r3, #0
 800215c:	d009      	beq.n	8002172 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002164:	6959      	ldr	r1, [r3, #20]
 8002166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002168:	895a      	ldrh	r2, [r3, #10]
 800216a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800216e:	f004 ff17 	bl	8006fa0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002174:	69da      	ldr	r2, [r3, #28]
 8002176:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800217a:	441a      	add	r2, r3
 800217c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800217e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002182:	695a      	ldr	r2, [r3, #20]
 8002184:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002188:	441a      	add	r2, r3
 800218a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800218c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800218e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d005      	beq.n	80021a2 <PCD_EP_ISR_Handler+0x514>
 8002196:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800219a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d206      	bcs.n	80021b0 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80021a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	4619      	mov	r1, r3
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f006 fddf 	bl	8008d6c <HAL_PCD_DataOutStageCallback>
 80021ae:	e005      	b.n	80021bc <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80021b6:	4618      	mov	r0, r3
 80021b8:	f003 f9be 	bl	8005538 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80021bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80021c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 8123 	beq.w	8002410 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80021ca:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	3310      	adds	r3, #16
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	4413      	add	r3, r2
 80021dc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	461a      	mov	r2, r3
 80021e4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80021f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021f8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	441a      	add	r2, r3
 800220a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800220e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002212:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002216:	b29b      	uxth	r3, r3
 8002218:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800221a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800221c:	78db      	ldrb	r3, [r3, #3]
 800221e:	2b01      	cmp	r3, #1
 8002220:	f040 80a2 	bne.w	8002368 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002226:	2200      	movs	r2, #0
 8002228:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800222a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800222c:	7b1b      	ldrb	r3, [r3, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 8093 	beq.w	800235a <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002234:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800223c:	2b00      	cmp	r3, #0
 800223e:	d046      	beq.n	80022ce <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002240:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002242:	785b      	ldrb	r3, [r3, #1]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d126      	bne.n	8002296 <PCD_EP_ISR_Handler+0x608>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	627b      	str	r3, [r7, #36]	@ 0x24
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002256:	b29b      	uxth	r3, r3
 8002258:	461a      	mov	r2, r3
 800225a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225c:	4413      	add	r3, r2
 800225e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002260:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	011a      	lsls	r2, r3, #4
 8002266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002268:	4413      	add	r3, r2
 800226a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800226e:	623b      	str	r3, [r7, #32]
 8002270:	6a3b      	ldr	r3, [r7, #32]
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	b29b      	uxth	r3, r3
 8002276:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800227a:	b29a      	uxth	r2, r3
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	801a      	strh	r2, [r3, #0]
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	b29b      	uxth	r3, r3
 8002286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800228a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800228e:	b29a      	uxth	r2, r3
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	801a      	strh	r2, [r3, #0]
 8002294:	e061      	b.n	800235a <PCD_EP_ISR_Handler+0x6cc>
 8002296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002298:	785b      	ldrb	r3, [r3, #1]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d15d      	bne.n	800235a <PCD_EP_ISR_Handler+0x6cc>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022b2:	4413      	add	r3, r2
 80022b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	011a      	lsls	r2, r3, #4
 80022bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022be:	4413      	add	r3, r2
 80022c0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80022c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c8:	2200      	movs	r2, #0
 80022ca:	801a      	strh	r2, [r3, #0]
 80022cc:	e045      	b.n	800235a <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022d6:	785b      	ldrb	r3, [r3, #1]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d126      	bne.n	800232a <PCD_EP_ISR_Handler+0x69c>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	461a      	mov	r2, r3
 80022ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022f0:	4413      	add	r3, r2
 80022f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80022f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	011a      	lsls	r2, r3, #4
 80022fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022fc:	4413      	add	r3, r2
 80022fe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002302:	633b      	str	r3, [r7, #48]	@ 0x30
 8002304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	b29b      	uxth	r3, r3
 800230a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800230e:	b29a      	uxth	r2, r3
 8002310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002312:	801a      	strh	r2, [r3, #0]
 8002314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	b29b      	uxth	r3, r3
 800231a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800231e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002322:	b29a      	uxth	r2, r3
 8002324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002326:	801a      	strh	r2, [r3, #0]
 8002328:	e017      	b.n	800235a <PCD_EP_ISR_Handler+0x6cc>
 800232a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800232c:	785b      	ldrb	r3, [r3, #1]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d113      	bne.n	800235a <PCD_EP_ISR_Handler+0x6cc>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800233a:	b29b      	uxth	r3, r3
 800233c:	461a      	mov	r2, r3
 800233e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002340:	4413      	add	r3, r2
 8002342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	011a      	lsls	r2, r3, #4
 800234a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800234c:	4413      	add	r3, r2
 800234e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002352:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002356:	2200      	movs	r2, #0
 8002358:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800235a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	4619      	mov	r1, r3
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f006 fd1e 	bl	8008da2 <HAL_PCD_DataInStageCallback>
 8002366:	e053      	b.n	8002410 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002368:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800236c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002370:	2b00      	cmp	r3, #0
 8002372:	d146      	bne.n	8002402 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800237c:	b29b      	uxth	r3, r3
 800237e:	461a      	mov	r2, r3
 8002380:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4413      	add	r3, r2
 8002388:	3302      	adds	r3, #2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	4413      	add	r3, r2
 8002392:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800239c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80023a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023a2:	699a      	ldr	r2, [r3, #24]
 80023a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d907      	bls.n	80023bc <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80023ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023ae:	699a      	ldr	r2, [r3, #24]
 80023b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80023b4:	1ad2      	subs	r2, r2, r3
 80023b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023b8:	619a      	str	r2, [r3, #24]
 80023ba:	e002      	b.n	80023c2 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80023bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023be:	2200      	movs	r2, #0
 80023c0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80023c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d106      	bne.n	80023d8 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	4619      	mov	r1, r3
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f006 fce6 	bl	8008da2 <HAL_PCD_DataInStageCallback>
 80023d6:	e01b      	b.n	8002410 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80023d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80023e0:	441a      	add	r2, r3
 80023e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023e4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80023e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023e8:	69da      	ldr	r2, [r3, #28]
 80023ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80023ee:	441a      	add	r2, r3
 80023f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023f2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80023fa:	4618      	mov	r0, r3
 80023fc:	f003 f89c 	bl	8005538 <USB_EPStartXfer>
 8002400:	e006      	b.n	8002410 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002402:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002406:	461a      	mov	r2, r3
 8002408:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f91b 	bl	8002646 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002418:	b29b      	uxth	r3, r3
 800241a:	b21b      	sxth	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	f6ff ac3b 	blt.w	8001c98 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3758      	adds	r7, #88	@ 0x58
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b088      	sub	sp, #32
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	4613      	mov	r3, r2
 8002438:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800243a:	88fb      	ldrh	r3, [r7, #6]
 800243c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d07e      	beq.n	8002542 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800244c:	b29b      	uxth	r3, r3
 800244e:	461a      	mov	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	4413      	add	r3, r2
 8002458:	3302      	adds	r3, #2
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	4413      	add	r3, r2
 8002462:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800246c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	699a      	ldr	r2, [r3, #24]
 8002472:	8b7b      	ldrh	r3, [r7, #26]
 8002474:	429a      	cmp	r2, r3
 8002476:	d306      	bcc.n	8002486 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	699a      	ldr	r2, [r3, #24]
 800247c:	8b7b      	ldrh	r3, [r7, #26]
 800247e:	1ad2      	subs	r2, r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	619a      	str	r2, [r3, #24]
 8002484:	e002      	b.n	800248c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2200      	movs	r2, #0
 800248a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d123      	bne.n	80024dc <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80024aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024ae:	833b      	strh	r3, [r7, #24]
 80024b0:	8b3b      	ldrh	r3, [r7, #24]
 80024b2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80024b6:	833b      	strh	r3, [r7, #24]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	441a      	add	r2, r3
 80024c6:	8b3b      	ldrh	r3, [r7, #24]
 80024c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80024cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80024d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024d8:	b29b      	uxth	r3, r3
 80024da:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024dc:	88fb      	ldrh	r3, [r7, #6]
 80024de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d01f      	beq.n	8002526 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002500:	82fb      	strh	r3, [r7, #22]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	441a      	add	r2, r3
 8002510:	8afb      	ldrh	r3, [r7, #22]
 8002512:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002516:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800251a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800251e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002522:	b29b      	uxth	r3, r3
 8002524:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002526:	8b7b      	ldrh	r3, [r7, #26]
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 8087 	beq.w	800263c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6818      	ldr	r0, [r3, #0]
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	6959      	ldr	r1, [r3, #20]
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	891a      	ldrh	r2, [r3, #8]
 800253a:	8b7b      	ldrh	r3, [r7, #26]
 800253c:	f004 fd30 	bl	8006fa0 <USB_ReadPMA>
 8002540:	e07c      	b.n	800263c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800254a:	b29b      	uxth	r3, r3
 800254c:	461a      	mov	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4413      	add	r3, r2
 8002556:	3306      	adds	r3, #6
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	4413      	add	r3, r2
 8002560:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800256a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	699a      	ldr	r2, [r3, #24]
 8002570:	8b7b      	ldrh	r3, [r7, #26]
 8002572:	429a      	cmp	r2, r3
 8002574:	d306      	bcc.n	8002584 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	699a      	ldr	r2, [r3, #24]
 800257a:	8b7b      	ldrh	r3, [r7, #26]
 800257c:	1ad2      	subs	r2, r2, r3
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	619a      	str	r2, [r3, #24]
 8002582:	e002      	b.n	800258a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2200      	movs	r2, #0
 8002588:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d123      	bne.n	80025da <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025ac:	83fb      	strh	r3, [r7, #30]
 80025ae:	8bfb      	ldrh	r3, [r7, #30]
 80025b0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80025b4:	83fb      	strh	r3, [r7, #30]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	441a      	add	r2, r3
 80025c4:	8bfb      	ldrh	r3, [r7, #30]
 80025c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80025da:	88fb      	ldrh	r3, [r7, #6]
 80025dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d11f      	bne.n	8002624 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025fe:	83bb      	strh	r3, [r7, #28]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	461a      	mov	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	441a      	add	r2, r3
 800260e:	8bbb      	ldrh	r3, [r7, #28]
 8002610:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002614:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002618:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800261c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002620:	b29b      	uxth	r3, r3
 8002622:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002624:	8b7b      	ldrh	r3, [r7, #26]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d008      	beq.n	800263c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	6959      	ldr	r1, [r3, #20]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	895a      	ldrh	r2, [r3, #10]
 8002636:	8b7b      	ldrh	r3, [r7, #26]
 8002638:	f004 fcb2 	bl	8006fa0 <USB_ReadPMA>
    }
  }

  return count;
 800263c:	8b7b      	ldrh	r3, [r7, #26]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3720      	adds	r7, #32
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b0a4      	sub	sp, #144	@ 0x90
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	4613      	mov	r3, r2
 8002652:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002654:	88fb      	ldrh	r3, [r7, #6]
 8002656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 81dd 	beq.w	8002a1a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002668:	b29b      	uxth	r3, r3
 800266a:	461a      	mov	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4413      	add	r3, r2
 8002674:	3302      	adds	r3, #2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	4413      	add	r3, r2
 800267e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002688:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	699a      	ldr	r2, [r3, #24]
 8002690:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002694:	429a      	cmp	r2, r3
 8002696:	d907      	bls.n	80026a8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	699a      	ldr	r2, [r3, #24]
 800269c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80026a0:	1ad2      	subs	r2, r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	619a      	str	r2, [r3, #24]
 80026a6:	e002      	b.n	80026ae <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2200      	movs	r2, #0
 80026ac:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f040 80b9 	bne.w	800282a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	785b      	ldrb	r3, [r3, #1]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d126      	bne.n	800270e <HAL_PCD_EP_DB_Transmit+0xc8>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	461a      	mov	r2, r3
 80026d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026d4:	4413      	add	r3, r2
 80026d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	011a      	lsls	r2, r3, #4
 80026de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026e0:	4413      	add	r3, r2
 80026e2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80026e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026f6:	801a      	strh	r2, [r3, #0]
 80026f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002706:	b29a      	uxth	r2, r3
 8002708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800270a:	801a      	strh	r2, [r3, #0]
 800270c:	e01a      	b.n	8002744 <HAL_PCD_EP_DB_Transmit+0xfe>
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	785b      	ldrb	r3, [r3, #1]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d116      	bne.n	8002744 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	637b      	str	r3, [r7, #52]	@ 0x34
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002724:	b29b      	uxth	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800272a:	4413      	add	r3, r2
 800272c:	637b      	str	r3, [r7, #52]	@ 0x34
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	011a      	lsls	r2, r3, #4
 8002734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002736:	4413      	add	r3, r2
 8002738:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800273c:	633b      	str	r3, [r7, #48]	@ 0x30
 800273e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002740:	2200      	movs	r2, #0
 8002742:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	627b      	str	r3, [r7, #36]	@ 0x24
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	785b      	ldrb	r3, [r3, #1]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d126      	bne.n	80027a0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	61fb      	str	r3, [r7, #28]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002760:	b29b      	uxth	r3, r3
 8002762:	461a      	mov	r2, r3
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	4413      	add	r3, r2
 8002768:	61fb      	str	r3, [r7, #28]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	011a      	lsls	r2, r3, #4
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	4413      	add	r3, r2
 8002774:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002778:	61bb      	str	r3, [r7, #24]
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	b29b      	uxth	r3, r3
 8002780:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002784:	b29a      	uxth	r2, r3
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	801a      	strh	r2, [r3, #0]
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	b29b      	uxth	r3, r3
 8002790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002798:	b29a      	uxth	r2, r3
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	801a      	strh	r2, [r3, #0]
 800279e:	e017      	b.n	80027d0 <HAL_PCD_EP_DB_Transmit+0x18a>
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	785b      	ldrb	r3, [r3, #1]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d113      	bne.n	80027d0 <HAL_PCD_EP_DB_Transmit+0x18a>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	461a      	mov	r2, r3
 80027b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b6:	4413      	add	r3, r2
 80027b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	011a      	lsls	r2, r3, #4
 80027c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c2:	4413      	add	r3, r2
 80027c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80027c8:	623b      	str	r3, [r7, #32]
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	2200      	movs	r2, #0
 80027ce:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	4619      	mov	r1, r3
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f006 fae3 	bl	8008da2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027dc:	88fb      	ldrh	r3, [r7, #6]
 80027de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 82fc 	beq.w	8002de0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002802:	82fb      	strh	r3, [r7, #22]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	441a      	add	r2, r3
 8002812:	8afb      	ldrh	r3, [r7, #22]
 8002814:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002818:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800281c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002820:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002824:	b29b      	uxth	r3, r3
 8002826:	8013      	strh	r3, [r2, #0]
 8002828:	e2da      	b.n	8002de0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800282a:	88fb      	ldrh	r3, [r7, #6]
 800282c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d021      	beq.n	8002878 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	461a      	mov	r2, r3
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	b29b      	uxth	r3, r3
 8002846:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800284a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800284e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	441a      	add	r2, r3
 8002860:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002864:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002868:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800286c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002874:	b29b      	uxth	r3, r3
 8002876:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800287e:	2b01      	cmp	r3, #1
 8002880:	f040 82ae 	bne.w	8002de0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	695a      	ldr	r2, [r3, #20]
 8002888:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800288c:	441a      	add	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	69da      	ldr	r2, [r3, #28]
 8002896:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800289a:	441a      	add	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	6a1a      	ldr	r2, [r3, #32]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d30b      	bcc.n	80028c4 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	6a1a      	ldr	r2, [r3, #32]
 80028b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028bc:	1ad2      	subs	r2, r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	621a      	str	r2, [r3, #32]
 80028c2:	e017      	b.n	80028f4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d108      	bne.n	80028de <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80028cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80028d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80028dc:	e00a      	b.n	80028f4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2200      	movs	r2, #0
 80028f2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	785b      	ldrb	r3, [r3, #1]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d165      	bne.n	80029c8 <HAL_PCD_EP_DB_Transmit+0x382>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800290a:	b29b      	uxth	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002910:	4413      	add	r3, r2
 8002912:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	011a      	lsls	r2, r3, #4
 800291a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800291c:	4413      	add	r3, r2
 800291e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002922:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	b29b      	uxth	r3, r3
 800292a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800292e:	b29a      	uxth	r2, r3
 8002930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002932:	801a      	strh	r2, [r3, #0]
 8002934:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002938:	2b3e      	cmp	r3, #62	@ 0x3e
 800293a:	d91d      	bls.n	8002978 <HAL_PCD_EP_DB_Transmit+0x332>
 800293c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002940:	095b      	lsrs	r3, r3, #5
 8002942:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002944:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	2b00      	cmp	r3, #0
 800294e:	d102      	bne.n	8002956 <HAL_PCD_EP_DB_Transmit+0x310>
 8002950:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002952:	3b01      	subs	r3, #1
 8002954:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	b29a      	uxth	r2, r3
 800295c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800295e:	b29b      	uxth	r3, r3
 8002960:	029b      	lsls	r3, r3, #10
 8002962:	b29b      	uxth	r3, r3
 8002964:	4313      	orrs	r3, r2
 8002966:	b29b      	uxth	r3, r3
 8002968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800296c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002970:	b29a      	uxth	r2, r3
 8002972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002974:	801a      	strh	r2, [r3, #0]
 8002976:	e044      	b.n	8002a02 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002978:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10a      	bne.n	8002996 <HAL_PCD_EP_DB_Transmit+0x350>
 8002980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	b29b      	uxth	r3, r3
 8002986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800298a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800298e:	b29a      	uxth	r2, r3
 8002990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002992:	801a      	strh	r2, [r3, #0]
 8002994:	e035      	b.n	8002a02 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002996:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800299a:	085b      	lsrs	r3, r3, #1
 800299c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800299e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <HAL_PCD_EP_DB_Transmit+0x36a>
 80029aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029ac:	3301      	adds	r3, #1
 80029ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	029b      	lsls	r3, r3, #10
 80029bc:	b29b      	uxth	r3, r3
 80029be:	4313      	orrs	r3, r2
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029c4:	801a      	strh	r2, [r3, #0]
 80029c6:	e01c      	b.n	8002a02 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	785b      	ldrb	r3, [r3, #1]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d118      	bne.n	8002a02 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029de:	b29b      	uxth	r3, r3
 80029e0:	461a      	mov	r2, r3
 80029e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029e4:	4413      	add	r3, r2
 80029e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	011a      	lsls	r2, r3, #4
 80029ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029f0:	4413      	add	r3, r2
 80029f2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80029f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80029f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a00:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6818      	ldr	r0, [r3, #0]
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	6959      	ldr	r1, [r3, #20]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	891a      	ldrh	r2, [r3, #8]
 8002a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	f004 fa7f 	bl	8006f16 <USB_WritePMA>
 8002a18:	e1e2      	b.n	8002de0 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	461a      	mov	r2, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3306      	adds	r3, #6
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a42:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	699a      	ldr	r2, [r3, #24]
 8002a4a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d307      	bcc.n	8002a62 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	699a      	ldr	r2, [r3, #24]
 8002a56:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002a5a:	1ad2      	subs	r2, r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	619a      	str	r2, [r3, #24]
 8002a60:	e002      	b.n	8002a68 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2200      	movs	r2, #0
 8002a66:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f040 80c0 	bne.w	8002bf2 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	785b      	ldrb	r3, [r3, #1]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d126      	bne.n	8002ac8 <HAL_PCD_EP_DB_Transmit+0x482>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a8e:	4413      	add	r3, r2
 8002a90:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	011a      	lsls	r2, r3, #4
 8002a98:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002aa0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002aa2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ab0:	801a      	strh	r2, [r3, #0]
 8002ab2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002abc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ac4:	801a      	strh	r2, [r3, #0]
 8002ac6:	e01a      	b.n	8002afe <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	785b      	ldrb	r3, [r3, #1]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d116      	bne.n	8002afe <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ae4:	4413      	add	r3, r2
 8002ae6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	011a      	lsls	r2, r3, #4
 8002aee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002af0:	4413      	add	r3, r2
 8002af2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002af6:	663b      	str	r3, [r7, #96]	@ 0x60
 8002af8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002afa:	2200      	movs	r2, #0
 8002afc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	677b      	str	r3, [r7, #116]	@ 0x74
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	785b      	ldrb	r3, [r3, #1]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d12b      	bne.n	8002b64 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b20:	4413      	add	r3, r2
 8002b22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	011a      	lsls	r2, r3, #4
 8002b2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002b32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b36:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b48:	801a      	strh	r2, [r3, #0]
 8002b4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b60:	801a      	strh	r2, [r3, #0]
 8002b62:	e017      	b.n	8002b94 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	785b      	ldrb	r3, [r3, #1]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d113      	bne.n	8002b94 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	461a      	mov	r2, r3
 8002b78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b7a:	4413      	add	r3, r2
 8002b7c:	677b      	str	r3, [r7, #116]	@ 0x74
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	011a      	lsls	r2, r3, #4
 8002b84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b86:	4413      	add	r3, r2
 8002b88:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002b8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b90:	2200      	movs	r2, #0
 8002b92:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f006 f901 	bl	8008da2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ba0:	88fb      	ldrh	r3, [r7, #6]
 8002ba2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f040 811a 	bne.w	8002de0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bc6:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	441a      	add	r2, r3
 8002bd8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002bdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002be0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002be4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002be8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	8013      	strh	r3, [r2, #0]
 8002bf0:	e0f6      	b.n	8002de0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d121      	bne.n	8002c40 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c16:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	441a      	add	r2, r3
 8002c28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002c2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	f040 80ca 	bne.w	8002de0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	695a      	ldr	r2, [r3, #20]
 8002c50:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002c54:	441a      	add	r2, r3
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	69da      	ldr	r2, [r3, #28]
 8002c5e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002c62:	441a      	add	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	6a1a      	ldr	r2, [r3, #32]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d30b      	bcc.n	8002c8c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	6a1a      	ldr	r2, [r3, #32]
 8002c80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c84:	1ad2      	subs	r2, r2, r3
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	621a      	str	r2, [r3, #32]
 8002c8a:	e017      	b.n	8002cbc <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d108      	bne.n	8002ca6 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002c94:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002c98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002ca4:	e00a      	b.n	8002cbc <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	657b      	str	r3, [r7, #84]	@ 0x54
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	785b      	ldrb	r3, [r3, #1]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d165      	bne.n	8002d96 <HAL_PCD_EP_DB_Transmit+0x750>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cde:	4413      	add	r3, r2
 8002ce0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	011a      	lsls	r2, r3, #4
 8002ce8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cea:	4413      	add	r3, r2
 8002cec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002cf0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002cf2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d00:	801a      	strh	r2, [r3, #0]
 8002d02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d06:	2b3e      	cmp	r3, #62	@ 0x3e
 8002d08:	d91d      	bls.n	8002d46 <HAL_PCD_EP_DB_Transmit+0x700>
 8002d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d16:	f003 031f 	and.w	r3, r3, #31
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d102      	bne.n	8002d24 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002d1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d20:	3b01      	subs	r3, #1
 8002d22:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	029b      	lsls	r3, r3, #10
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	4313      	orrs	r3, r2
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d42:	801a      	strh	r2, [r3, #0]
 8002d44:	e041      	b.n	8002dca <HAL_PCD_EP_DB_Transmit+0x784>
 8002d46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10a      	bne.n	8002d64 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002d4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d60:	801a      	strh	r2, [r3, #0]
 8002d62:	e032      	b.n	8002dca <HAL_PCD_EP_DB_Transmit+0x784>
 8002d64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d68:	085b      	lsrs	r3, r3, #1
 8002d6a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <HAL_PCD_EP_DB_Transmit+0x738>
 8002d78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	029b      	lsls	r3, r3, #10
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d92:	801a      	strh	r2, [r3, #0]
 8002d94:	e019      	b.n	8002dca <HAL_PCD_EP_DB_Transmit+0x784>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	785b      	ldrb	r3, [r3, #1]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d115      	bne.n	8002dca <HAL_PCD_EP_DB_Transmit+0x784>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	461a      	mov	r2, r3
 8002daa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dac:	4413      	add	r3, r2
 8002dae:	657b      	str	r3, [r7, #84]	@ 0x54
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	011a      	lsls	r2, r3, #4
 8002db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002db8:	4413      	add	r3, r2
 8002dba:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002dbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8002dc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dc8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	6959      	ldr	r1, [r3, #20]
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	895a      	ldrh	r2, [r3, #10]
 8002dd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	f004 f89b 	bl	8006f16 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	461a      	mov	r2, r3
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	881b      	ldrh	r3, [r3, #0]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002df6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002dfa:	82bb      	strh	r3, [r7, #20]
 8002dfc:	8abb      	ldrh	r3, [r7, #20]
 8002dfe:	f083 0310 	eor.w	r3, r3, #16
 8002e02:	82bb      	strh	r3, [r7, #20]
 8002e04:	8abb      	ldrh	r3, [r7, #20]
 8002e06:	f083 0320 	eor.w	r3, r3, #32
 8002e0a:	82bb      	strh	r3, [r7, #20]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	461a      	mov	r2, r3
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	441a      	add	r2, r3
 8002e1a:	8abb      	ldrh	r3, [r7, #20]
 8002e1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3790      	adds	r7, #144	@ 0x90
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b087      	sub	sp, #28
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	60f8      	str	r0, [r7, #12]
 8002e42:	607b      	str	r3, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	817b      	strh	r3, [r7, #10]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e4c:	897b      	ldrh	r3, [r7, #10]
 8002e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00b      	beq.n	8002e70 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e58:	897b      	ldrh	r3, [r7, #10]
 8002e5a:	f003 0207 	and.w	r2, r3, #7
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	3310      	adds	r3, #16
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	e009      	b.n	8002e84 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e70:	897a      	ldrh	r2, [r7, #10]
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4413      	add	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002e84:	893b      	ldrh	r3, [r7, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d107      	bne.n	8002e9a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	80da      	strh	r2, [r3, #6]
 8002e98:	e00b      	b.n	8002eb2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	0c1b      	lsrs	r3, r3, #16
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	371c      	adds	r7, #28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr
	...

08002ec0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002ec4:	4b03      	ldr	r3, [pc, #12]	@ (8002ed4 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]
}
 8002eca:	bf00      	nop
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	420e0020 	.word	0x420e0020

08002ed8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e272      	b.n	80033d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 8087 	beq.w	8003006 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ef8:	4b92      	ldr	r3, [pc, #584]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f003 030c 	and.w	r3, r3, #12
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d00c      	beq.n	8002f1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f04:	4b8f      	ldr	r3, [pc, #572]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 030c 	and.w	r3, r3, #12
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d112      	bne.n	8002f36 <HAL_RCC_OscConfig+0x5e>
 8002f10:	4b8c      	ldr	r3, [pc, #560]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f1c:	d10b      	bne.n	8002f36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f1e:	4b89      	ldr	r3, [pc, #548]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d06c      	beq.n	8003004 <HAL_RCC_OscConfig+0x12c>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d168      	bne.n	8003004 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e24c      	b.n	80033d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f3e:	d106      	bne.n	8002f4e <HAL_RCC_OscConfig+0x76>
 8002f40:	4b80      	ldr	r3, [pc, #512]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a7f      	ldr	r2, [pc, #508]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 8002f46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	e02e      	b.n	8002fac <HAL_RCC_OscConfig+0xd4>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10c      	bne.n	8002f70 <HAL_RCC_OscConfig+0x98>
 8002f56:	4b7b      	ldr	r3, [pc, #492]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a7a      	ldr	r2, [pc, #488]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	4b78      	ldr	r3, [pc, #480]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a77      	ldr	r2, [pc, #476]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 8002f68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	e01d      	b.n	8002fac <HAL_RCC_OscConfig+0xd4>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCC_OscConfig+0xbc>
 8002f7a:	4b72      	ldr	r3, [pc, #456]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a71      	ldr	r2, [pc, #452]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 8002f80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	4b6f      	ldr	r3, [pc, #444]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a6e      	ldr	r2, [pc, #440]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	e00b      	b.n	8002fac <HAL_RCC_OscConfig+0xd4>
 8002f94:	4b6b      	ldr	r3, [pc, #428]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a6a      	ldr	r2, [pc, #424]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 8002f9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	4b68      	ldr	r3, [pc, #416]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a67      	ldr	r2, [pc, #412]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 8002fa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002faa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d013      	beq.n	8002fdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb4:	f7fd fe80 	bl	8000cb8 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fbc:	f7fd fe7c 	bl	8000cb8 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b64      	cmp	r3, #100	@ 0x64
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e200      	b.n	80033d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fce:	4b5d      	ldr	r3, [pc, #372]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0xe4>
 8002fda:	e014      	b.n	8003006 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fdc:	f7fd fe6c 	bl	8000cb8 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe4:	f7fd fe68 	bl	8000cb8 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	@ 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e1ec      	b.n	80033d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff6:	4b53      	ldr	r3, [pc, #332]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x10c>
 8003002:	e000      	b.n	8003006 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d063      	beq.n	80030da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003012:	4b4c      	ldr	r3, [pc, #304]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00b      	beq.n	8003036 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800301e:	4b49      	ldr	r3, [pc, #292]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	2b08      	cmp	r3, #8
 8003028:	d11c      	bne.n	8003064 <HAL_RCC_OscConfig+0x18c>
 800302a:	4b46      	ldr	r3, [pc, #280]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d116      	bne.n	8003064 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003036:	4b43      	ldr	r3, [pc, #268]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d005      	beq.n	800304e <HAL_RCC_OscConfig+0x176>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d001      	beq.n	800304e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e1c0      	b.n	80033d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800304e:	4b3d      	ldr	r3, [pc, #244]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	4939      	ldr	r1, [pc, #228]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 800305e:	4313      	orrs	r3, r2
 8003060:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003062:	e03a      	b.n	80030da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d020      	beq.n	80030ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800306c:	4b36      	ldr	r3, [pc, #216]	@ (8003148 <HAL_RCC_OscConfig+0x270>)
 800306e:	2201      	movs	r2, #1
 8003070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003072:	f7fd fe21 	bl	8000cb8 <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800307a:	f7fd fe1d 	bl	8000cb8 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e1a1      	b.n	80033d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308c:	4b2d      	ldr	r3, [pc, #180]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0f0      	beq.n	800307a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003098:	4b2a      	ldr	r3, [pc, #168]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4927      	ldr	r1, [pc, #156]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	600b      	str	r3, [r1, #0]
 80030ac:	e015      	b.n	80030da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ae:	4b26      	ldr	r3, [pc, #152]	@ (8003148 <HAL_RCC_OscConfig+0x270>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b4:	f7fd fe00 	bl	8000cb8 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030bc:	f7fd fdfc 	bl	8000cb8 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e180      	b.n	80033d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d03a      	beq.n	800315c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d019      	beq.n	8003122 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ee:	4b17      	ldr	r3, [pc, #92]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 80030f0:	2201      	movs	r2, #1
 80030f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f4:	f7fd fde0 	bl	8000cb8 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030fc:	f7fd fddc 	bl	8000cb8 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e160      	b.n	80033d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800310e:	4b0d      	ldr	r3, [pc, #52]	@ (8003144 <HAL_RCC_OscConfig+0x26c>)
 8003110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0f0      	beq.n	80030fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800311a:	2001      	movs	r0, #1
 800311c:	f000 face 	bl	80036bc <RCC_Delay>
 8003120:	e01c      	b.n	800315c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003122:	4b0a      	ldr	r3, [pc, #40]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003128:	f7fd fdc6 	bl	8000cb8 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800312e:	e00f      	b.n	8003150 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003130:	f7fd fdc2 	bl	8000cb8 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d908      	bls.n	8003150 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e146      	b.n	80033d0 <HAL_RCC_OscConfig+0x4f8>
 8003142:	bf00      	nop
 8003144:	40021000 	.word	0x40021000
 8003148:	42420000 	.word	0x42420000
 800314c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003150:	4b92      	ldr	r3, [pc, #584]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 8003152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1e9      	bne.n	8003130 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 80a6 	beq.w	80032b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800316a:	2300      	movs	r3, #0
 800316c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800316e:	4b8b      	ldr	r3, [pc, #556]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10d      	bne.n	8003196 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800317a:	4b88      	ldr	r3, [pc, #544]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	4a87      	ldr	r2, [pc, #540]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 8003180:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003184:	61d3      	str	r3, [r2, #28]
 8003186:	4b85      	ldr	r3, [pc, #532]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800318e:	60bb      	str	r3, [r7, #8]
 8003190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003192:	2301      	movs	r3, #1
 8003194:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003196:	4b82      	ldr	r3, [pc, #520]	@ (80033a0 <HAL_RCC_OscConfig+0x4c8>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d118      	bne.n	80031d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031a2:	4b7f      	ldr	r3, [pc, #508]	@ (80033a0 <HAL_RCC_OscConfig+0x4c8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a7e      	ldr	r2, [pc, #504]	@ (80033a0 <HAL_RCC_OscConfig+0x4c8>)
 80031a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ae:	f7fd fd83 	bl	8000cb8 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b6:	f7fd fd7f 	bl	8000cb8 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b64      	cmp	r3, #100	@ 0x64
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e103      	b.n	80033d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c8:	4b75      	ldr	r3, [pc, #468]	@ (80033a0 <HAL_RCC_OscConfig+0x4c8>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0f0      	beq.n	80031b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d106      	bne.n	80031ea <HAL_RCC_OscConfig+0x312>
 80031dc:	4b6f      	ldr	r3, [pc, #444]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	4a6e      	ldr	r2, [pc, #440]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	6213      	str	r3, [r2, #32]
 80031e8:	e02d      	b.n	8003246 <HAL_RCC_OscConfig+0x36e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10c      	bne.n	800320c <HAL_RCC_OscConfig+0x334>
 80031f2:	4b6a      	ldr	r3, [pc, #424]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	4a69      	ldr	r2, [pc, #420]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 80031f8:	f023 0301 	bic.w	r3, r3, #1
 80031fc:	6213      	str	r3, [r2, #32]
 80031fe:	4b67      	ldr	r3, [pc, #412]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	4a66      	ldr	r2, [pc, #408]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 8003204:	f023 0304 	bic.w	r3, r3, #4
 8003208:	6213      	str	r3, [r2, #32]
 800320a:	e01c      	b.n	8003246 <HAL_RCC_OscConfig+0x36e>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b05      	cmp	r3, #5
 8003212:	d10c      	bne.n	800322e <HAL_RCC_OscConfig+0x356>
 8003214:	4b61      	ldr	r3, [pc, #388]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	4a60      	ldr	r2, [pc, #384]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 800321a:	f043 0304 	orr.w	r3, r3, #4
 800321e:	6213      	str	r3, [r2, #32]
 8003220:	4b5e      	ldr	r3, [pc, #376]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	4a5d      	ldr	r2, [pc, #372]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	6213      	str	r3, [r2, #32]
 800322c:	e00b      	b.n	8003246 <HAL_RCC_OscConfig+0x36e>
 800322e:	4b5b      	ldr	r3, [pc, #364]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	4a5a      	ldr	r2, [pc, #360]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 8003234:	f023 0301 	bic.w	r3, r3, #1
 8003238:	6213      	str	r3, [r2, #32]
 800323a:	4b58      	ldr	r3, [pc, #352]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	4a57      	ldr	r2, [pc, #348]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 8003240:	f023 0304 	bic.w	r3, r3, #4
 8003244:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d015      	beq.n	800327a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324e:	f7fd fd33 	bl	8000cb8 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003254:	e00a      	b.n	800326c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003256:	f7fd fd2f 	bl	8000cb8 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003264:	4293      	cmp	r3, r2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e0b1      	b.n	80033d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326c:	4b4b      	ldr	r3, [pc, #300]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0ee      	beq.n	8003256 <HAL_RCC_OscConfig+0x37e>
 8003278:	e014      	b.n	80032a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800327a:	f7fd fd1d 	bl	8000cb8 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003280:	e00a      	b.n	8003298 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003282:	f7fd fd19 	bl	8000cb8 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003290:	4293      	cmp	r3, r2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e09b      	b.n	80033d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003298:	4b40      	ldr	r3, [pc, #256]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1ee      	bne.n	8003282 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032a4:	7dfb      	ldrb	r3, [r7, #23]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d105      	bne.n	80032b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032aa:	4b3c      	ldr	r3, [pc, #240]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	4a3b      	ldr	r2, [pc, #236]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 80032b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 8087 	beq.w	80033ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032c0:	4b36      	ldr	r3, [pc, #216]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 030c 	and.w	r3, r3, #12
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d061      	beq.n	8003390 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d146      	bne.n	8003362 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d4:	4b33      	ldr	r3, [pc, #204]	@ (80033a4 <HAL_RCC_OscConfig+0x4cc>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032da:	f7fd fced 	bl	8000cb8 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e2:	f7fd fce9 	bl	8000cb8 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e06d      	b.n	80033d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032f4:	4b29      	ldr	r3, [pc, #164]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1f0      	bne.n	80032e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003308:	d108      	bne.n	800331c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800330a:	4b24      	ldr	r3, [pc, #144]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	4921      	ldr	r1, [pc, #132]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 8003318:	4313      	orrs	r3, r2
 800331a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800331c:	4b1f      	ldr	r3, [pc, #124]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a19      	ldr	r1, [r3, #32]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332c:	430b      	orrs	r3, r1
 800332e:	491b      	ldr	r1, [pc, #108]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 8003330:	4313      	orrs	r3, r2
 8003332:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003334:	4b1b      	ldr	r3, [pc, #108]	@ (80033a4 <HAL_RCC_OscConfig+0x4cc>)
 8003336:	2201      	movs	r2, #1
 8003338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333a:	f7fd fcbd 	bl	8000cb8 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003342:	f7fd fcb9 	bl	8000cb8 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e03d      	b.n	80033d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003354:	4b11      	ldr	r3, [pc, #68]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f0      	beq.n	8003342 <HAL_RCC_OscConfig+0x46a>
 8003360:	e035      	b.n	80033ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003362:	4b10      	ldr	r3, [pc, #64]	@ (80033a4 <HAL_RCC_OscConfig+0x4cc>)
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003368:	f7fd fca6 	bl	8000cb8 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003370:	f7fd fca2 	bl	8000cb8 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e026      	b.n	80033d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003382:	4b06      	ldr	r3, [pc, #24]	@ (800339c <HAL_RCC_OscConfig+0x4c4>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x498>
 800338e:	e01e      	b.n	80033ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d107      	bne.n	80033a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e019      	b.n	80033d0 <HAL_RCC_OscConfig+0x4f8>
 800339c:	40021000 	.word	0x40021000
 80033a0:	40007000 	.word	0x40007000
 80033a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033a8:	4b0b      	ldr	r3, [pc, #44]	@ (80033d8 <HAL_RCC_OscConfig+0x500>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d106      	bne.n	80033ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d001      	beq.n	80033ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3718      	adds	r7, #24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40021000 	.word	0x40021000

080033dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e0d0      	b.n	8003592 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033f0:	4b6a      	ldr	r3, [pc, #424]	@ (800359c <HAL_RCC_ClockConfig+0x1c0>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d910      	bls.n	8003420 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fe:	4b67      	ldr	r3, [pc, #412]	@ (800359c <HAL_RCC_ClockConfig+0x1c0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f023 0207 	bic.w	r2, r3, #7
 8003406:	4965      	ldr	r1, [pc, #404]	@ (800359c <HAL_RCC_ClockConfig+0x1c0>)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	4313      	orrs	r3, r2
 800340c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800340e:	4b63      	ldr	r3, [pc, #396]	@ (800359c <HAL_RCC_ClockConfig+0x1c0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	429a      	cmp	r2, r3
 800341a:	d001      	beq.n	8003420 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e0b8      	b.n	8003592 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d020      	beq.n	800346e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003438:	4b59      	ldr	r3, [pc, #356]	@ (80035a0 <HAL_RCC_ClockConfig+0x1c4>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	4a58      	ldr	r2, [pc, #352]	@ (80035a0 <HAL_RCC_ClockConfig+0x1c4>)
 800343e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003442:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003450:	4b53      	ldr	r3, [pc, #332]	@ (80035a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	4a52      	ldr	r2, [pc, #328]	@ (80035a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003456:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800345a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800345c:	4b50      	ldr	r3, [pc, #320]	@ (80035a0 <HAL_RCC_ClockConfig+0x1c4>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	494d      	ldr	r1, [pc, #308]	@ (80035a0 <HAL_RCC_ClockConfig+0x1c4>)
 800346a:	4313      	orrs	r3, r2
 800346c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d040      	beq.n	80034fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d107      	bne.n	8003492 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003482:	4b47      	ldr	r3, [pc, #284]	@ (80035a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d115      	bne.n	80034ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e07f      	b.n	8003592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2b02      	cmp	r3, #2
 8003498:	d107      	bne.n	80034aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800349a:	4b41      	ldr	r3, [pc, #260]	@ (80035a0 <HAL_RCC_ClockConfig+0x1c4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d109      	bne.n	80034ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e073      	b.n	8003592 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034aa:	4b3d      	ldr	r3, [pc, #244]	@ (80035a0 <HAL_RCC_ClockConfig+0x1c4>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e06b      	b.n	8003592 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ba:	4b39      	ldr	r3, [pc, #228]	@ (80035a0 <HAL_RCC_ClockConfig+0x1c4>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f023 0203 	bic.w	r2, r3, #3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	4936      	ldr	r1, [pc, #216]	@ (80035a0 <HAL_RCC_ClockConfig+0x1c4>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034cc:	f7fd fbf4 	bl	8000cb8 <HAL_GetTick>
 80034d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d2:	e00a      	b.n	80034ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d4:	f7fd fbf0 	bl	8000cb8 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e053      	b.n	8003592 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ea:	4b2d      	ldr	r3, [pc, #180]	@ (80035a0 <HAL_RCC_ClockConfig+0x1c4>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 020c 	and.w	r2, r3, #12
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d1eb      	bne.n	80034d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034fc:	4b27      	ldr	r3, [pc, #156]	@ (800359c <HAL_RCC_ClockConfig+0x1c0>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d210      	bcs.n	800352c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350a:	4b24      	ldr	r3, [pc, #144]	@ (800359c <HAL_RCC_ClockConfig+0x1c0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f023 0207 	bic.w	r2, r3, #7
 8003512:	4922      	ldr	r1, [pc, #136]	@ (800359c <HAL_RCC_ClockConfig+0x1c0>)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	4313      	orrs	r3, r2
 8003518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800351a:	4b20      	ldr	r3, [pc, #128]	@ (800359c <HAL_RCC_ClockConfig+0x1c0>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d001      	beq.n	800352c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e032      	b.n	8003592 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	d008      	beq.n	800354a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003538:	4b19      	ldr	r3, [pc, #100]	@ (80035a0 <HAL_RCC_ClockConfig+0x1c4>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	4916      	ldr	r1, [pc, #88]	@ (80035a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003546:	4313      	orrs	r3, r2
 8003548:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b00      	cmp	r3, #0
 8003554:	d009      	beq.n	800356a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003556:	4b12      	ldr	r3, [pc, #72]	@ (80035a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	490e      	ldr	r1, [pc, #56]	@ (80035a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003566:	4313      	orrs	r3, r2
 8003568:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800356a:	f000 f821 	bl	80035b0 <HAL_RCC_GetSysClockFreq>
 800356e:	4602      	mov	r2, r0
 8003570:	4b0b      	ldr	r3, [pc, #44]	@ (80035a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	091b      	lsrs	r3, r3, #4
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	490a      	ldr	r1, [pc, #40]	@ (80035a4 <HAL_RCC_ClockConfig+0x1c8>)
 800357c:	5ccb      	ldrb	r3, [r1, r3]
 800357e:	fa22 f303 	lsr.w	r3, r2, r3
 8003582:	4a09      	ldr	r2, [pc, #36]	@ (80035a8 <HAL_RCC_ClockConfig+0x1cc>)
 8003584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003586:	4b09      	ldr	r3, [pc, #36]	@ (80035ac <HAL_RCC_ClockConfig+0x1d0>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f7fd fb52 	bl	8000c34 <HAL_InitTick>

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40022000 	.word	0x40022000
 80035a0:	40021000 	.word	0x40021000
 80035a4:	08009c78 	.word	0x08009c78
 80035a8:	20000000 	.word	0x20000000
 80035ac:	2000000c 	.word	0x2000000c

080035b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	2300      	movs	r3, #0
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	2300      	movs	r3, #0
 80035c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003644 <HAL_RCC_GetSysClockFreq+0x94>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f003 030c 	and.w	r3, r3, #12
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d002      	beq.n	80035e0 <HAL_RCC_GetSysClockFreq+0x30>
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d003      	beq.n	80035e6 <HAL_RCC_GetSysClockFreq+0x36>
 80035de:	e027      	b.n	8003630 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035e0:	4b19      	ldr	r3, [pc, #100]	@ (8003648 <HAL_RCC_GetSysClockFreq+0x98>)
 80035e2:	613b      	str	r3, [r7, #16]
      break;
 80035e4:	e027      	b.n	8003636 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	0c9b      	lsrs	r3, r3, #18
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	4a17      	ldr	r2, [pc, #92]	@ (800364c <HAL_RCC_GetSysClockFreq+0x9c>)
 80035f0:	5cd3      	ldrb	r3, [r2, r3]
 80035f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d010      	beq.n	8003620 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035fe:	4b11      	ldr	r3, [pc, #68]	@ (8003644 <HAL_RCC_GetSysClockFreq+0x94>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	0c5b      	lsrs	r3, r3, #17
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	4a11      	ldr	r2, [pc, #68]	@ (8003650 <HAL_RCC_GetSysClockFreq+0xa0>)
 800360a:	5cd3      	ldrb	r3, [r2, r3]
 800360c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a0d      	ldr	r2, [pc, #52]	@ (8003648 <HAL_RCC_GetSysClockFreq+0x98>)
 8003612:	fb03 f202 	mul.w	r2, r3, r2
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	fbb2 f3f3 	udiv	r3, r2, r3
 800361c:	617b      	str	r3, [r7, #20]
 800361e:	e004      	b.n	800362a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a0c      	ldr	r2, [pc, #48]	@ (8003654 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003624:	fb02 f303 	mul.w	r3, r2, r3
 8003628:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	613b      	str	r3, [r7, #16]
      break;
 800362e:	e002      	b.n	8003636 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003630:	4b05      	ldr	r3, [pc, #20]	@ (8003648 <HAL_RCC_GetSysClockFreq+0x98>)
 8003632:	613b      	str	r3, [r7, #16]
      break;
 8003634:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003636:	693b      	ldr	r3, [r7, #16]
}
 8003638:	4618      	mov	r0, r3
 800363a:	371c      	adds	r7, #28
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40021000 	.word	0x40021000
 8003648:	007a1200 	.word	0x007a1200
 800364c:	08009c90 	.word	0x08009c90
 8003650:	08009ca0 	.word	0x08009ca0
 8003654:	003d0900 	.word	0x003d0900

08003658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800365c:	4b02      	ldr	r3, [pc, #8]	@ (8003668 <HAL_RCC_GetHCLKFreq+0x10>)
 800365e:	681b      	ldr	r3, [r3, #0]
}
 8003660:	4618      	mov	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr
 8003668:	20000000 	.word	0x20000000

0800366c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003670:	f7ff fff2 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 8003674:	4602      	mov	r2, r0
 8003676:	4b05      	ldr	r3, [pc, #20]	@ (800368c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	0a1b      	lsrs	r3, r3, #8
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	4903      	ldr	r1, [pc, #12]	@ (8003690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003682:	5ccb      	ldrb	r3, [r1, r3]
 8003684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003688:	4618      	mov	r0, r3
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40021000 	.word	0x40021000
 8003690:	08009c88 	.word	0x08009c88

08003694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003698:	f7ff ffde 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 800369c:	4602      	mov	r2, r0
 800369e:	4b05      	ldr	r3, [pc, #20]	@ (80036b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	0adb      	lsrs	r3, r3, #11
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	4903      	ldr	r1, [pc, #12]	@ (80036b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036aa:	5ccb      	ldrb	r3, [r1, r3]
 80036ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40021000 	.word	0x40021000
 80036b8:	08009c88 	.word	0x08009c88

080036bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036c4:	4b0a      	ldr	r3, [pc, #40]	@ (80036f0 <RCC_Delay+0x34>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a0a      	ldr	r2, [pc, #40]	@ (80036f4 <RCC_Delay+0x38>)
 80036ca:	fba2 2303 	umull	r2, r3, r2, r3
 80036ce:	0a5b      	lsrs	r3, r3, #9
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	fb02 f303 	mul.w	r3, r2, r3
 80036d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036d8:	bf00      	nop
  }
  while (Delay --);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	1e5a      	subs	r2, r3, #1
 80036de:	60fa      	str	r2, [r7, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1f9      	bne.n	80036d8 <RCC_Delay+0x1c>
}
 80036e4:	bf00      	nop
 80036e6:	bf00      	nop
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr
 80036f0:	20000000 	.word	0x20000000
 80036f4:	10624dd3 	.word	0x10624dd3

080036f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	613b      	str	r3, [r7, #16]
 8003704:	2300      	movs	r3, #0
 8003706:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b00      	cmp	r3, #0
 8003712:	d07d      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003714:	2300      	movs	r3, #0
 8003716:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003718:	4b4f      	ldr	r3, [pc, #316]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10d      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003724:	4b4c      	ldr	r3, [pc, #304]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	4a4b      	ldr	r2, [pc, #300]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800372e:	61d3      	str	r3, [r2, #28]
 8003730:	4b49      	ldr	r3, [pc, #292]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800373c:	2301      	movs	r3, #1
 800373e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003740:	4b46      	ldr	r3, [pc, #280]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003748:	2b00      	cmp	r3, #0
 800374a:	d118      	bne.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800374c:	4b43      	ldr	r3, [pc, #268]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a42      	ldr	r2, [pc, #264]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003752:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003756:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003758:	f7fd faae 	bl	8000cb8 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375e:	e008      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003760:	f7fd faaa 	bl	8000cb8 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b64      	cmp	r3, #100	@ 0x64
 800376c:	d901      	bls.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e06d      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003772:	4b3a      	ldr	r3, [pc, #232]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0f0      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800377e:	4b36      	ldr	r3, [pc, #216]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003786:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d02e      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	429a      	cmp	r2, r3
 800379a:	d027      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800379c:	4b2e      	ldr	r3, [pc, #184]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037a6:	4b2e      	ldr	r3, [pc, #184]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037a8:	2201      	movs	r2, #1
 80037aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037ac:	4b2c      	ldr	r3, [pc, #176]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037b2:	4a29      	ldr	r2, [pc, #164]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d014      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c2:	f7fd fa79 	bl	8000cb8 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c8:	e00a      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ca:	f7fd fa75 	bl	8000cb8 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037d8:	4293      	cmp	r3, r2
 80037da:	d901      	bls.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e036      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0ee      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	4917      	ldr	r1, [pc, #92]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037fe:	7dfb      	ldrb	r3, [r7, #23]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d105      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003804:	4b14      	ldr	r3, [pc, #80]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	4a13      	ldr	r2, [pc, #76]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800380e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800381c:	4b0e      	ldr	r3, [pc, #56]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	490b      	ldr	r1, [pc, #44]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800382a:	4313      	orrs	r3, r2
 800382c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b00      	cmp	r3, #0
 8003838:	d008      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800383a:	4b07      	ldr	r3, [pc, #28]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	4904      	ldr	r1, [pc, #16]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003848:	4313      	orrs	r3, r2
 800384a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40021000 	.word	0x40021000
 800385c:	40007000 	.word	0x40007000
 8003860:	42420440 	.word	0x42420440

08003864 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	2300      	movs	r3, #0
 8003872:	61fb      	str	r3, [r7, #28]
 8003874:	2300      	movs	r3, #0
 8003876:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	2300      	movs	r3, #0
 800387e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b10      	cmp	r3, #16
 8003884:	d00a      	beq.n	800389c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b10      	cmp	r3, #16
 800388a:	f200 808a 	bhi.w	80039a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d045      	beq.n	8003920 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b02      	cmp	r3, #2
 8003898:	d075      	beq.n	8003986 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800389a:	e082      	b.n	80039a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800389c:	4b46      	ldr	r3, [pc, #280]	@ (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80038a2:	4b45      	ldr	r3, [pc, #276]	@ (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d07b      	beq.n	80039a6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	0c9b      	lsrs	r3, r3, #18
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	4a41      	ldr	r2, [pc, #260]	@ (80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80038b8:	5cd3      	ldrb	r3, [r2, r3]
 80038ba:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d015      	beq.n	80038f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038c6:	4b3c      	ldr	r3, [pc, #240]	@ (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	0c5b      	lsrs	r3, r3, #17
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	4a3b      	ldr	r2, [pc, #236]	@ (80039c0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80038d2:	5cd3      	ldrb	r3, [r2, r3]
 80038d4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00d      	beq.n	80038fc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80038e0:	4a38      	ldr	r2, [pc, #224]	@ (80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	fb02 f303 	mul.w	r3, r2, r3
 80038ee:	61fb      	str	r3, [r7, #28]
 80038f0:	e004      	b.n	80038fc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4a34      	ldr	r2, [pc, #208]	@ (80039c8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80038f6:	fb02 f303 	mul.w	r3, r2, r3
 80038fa:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80038fc:	4b2e      	ldr	r3, [pc, #184]	@ (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003904:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003908:	d102      	bne.n	8003910 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	61bb      	str	r3, [r7, #24]
      break;
 800390e:	e04a      	b.n	80039a6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	4a2d      	ldr	r2, [pc, #180]	@ (80039cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003916:	fba2 2303 	umull	r2, r3, r2, r3
 800391a:	085b      	lsrs	r3, r3, #1
 800391c:	61bb      	str	r3, [r7, #24]
      break;
 800391e:	e042      	b.n	80039a6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003920:	4b25      	ldr	r3, [pc, #148]	@ (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800392c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003930:	d108      	bne.n	8003944 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800393c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	e01f      	b.n	8003984 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800394a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800394e:	d109      	bne.n	8003964 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003950:	4b19      	ldr	r3, [pc, #100]	@ (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800395c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003960:	61bb      	str	r3, [r7, #24]
 8003962:	e00f      	b.n	8003984 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800396a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800396e:	d11c      	bne.n	80039aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003970:	4b11      	ldr	r3, [pc, #68]	@ (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d016      	beq.n	80039aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800397c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003980:	61bb      	str	r3, [r7, #24]
      break;
 8003982:	e012      	b.n	80039aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003984:	e011      	b.n	80039aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003986:	f7ff fe85 	bl	8003694 <HAL_RCC_GetPCLK2Freq>
 800398a:	4602      	mov	r2, r0
 800398c:	4b0a      	ldr	r3, [pc, #40]	@ (80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	0b9b      	lsrs	r3, r3, #14
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	3301      	adds	r3, #1
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	fbb2 f3f3 	udiv	r3, r2, r3
 800399e:	61bb      	str	r3, [r7, #24]
      break;
 80039a0:	e004      	b.n	80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80039a2:	bf00      	nop
 80039a4:	e002      	b.n	80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80039a6:	bf00      	nop
 80039a8:	e000      	b.n	80039ac <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80039aa:	bf00      	nop
    }
  }
  return (frequency);
 80039ac:	69bb      	ldr	r3, [r7, #24]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3720      	adds	r7, #32
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40021000 	.word	0x40021000
 80039bc:	08009ca4 	.word	0x08009ca4
 80039c0:	08009cb4 	.word	0x08009cb4
 80039c4:	007a1200 	.word	0x007a1200
 80039c8:	003d0900 	.word	0x003d0900
 80039cc:	aaaaaaab 	.word	0xaaaaaaab

080039d0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e07a      	b.n	8003adc <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	7c5b      	ldrb	r3, [r3, #17]
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d105      	bne.n	80039fc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7fc ff00 	bl	80007fc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f870 	bl	8003ae8 <HAL_RTC_WaitForSynchro>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d004      	beq.n	8003a18 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2204      	movs	r2, #4
 8003a12:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e061      	b.n	8003adc <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f892 	bl	8003b42 <RTC_EnterInitMode>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d004      	beq.n	8003a2e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2204      	movs	r2, #4
 8003a28:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e056      	b.n	8003adc <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0207 	bic.w	r2, r2, #7
 8003a3c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003a46:	4b27      	ldr	r3, [pc, #156]	@ (8003ae4 <HAL_RTC_Init+0x114>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4a:	4a26      	ldr	r2, [pc, #152]	@ (8003ae4 <HAL_RTC_Init+0x114>)
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
 8003a50:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003a52:	4b24      	ldr	r3, [pc, #144]	@ (8003ae4 <HAL_RTC_Init+0x114>)
 8003a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a56:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	4921      	ldr	r1, [pc, #132]	@ (8003ae4 <HAL_RTC_Init+0x114>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6c:	d003      	beq.n	8003a76 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	e00e      	b.n	8003a94 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003a76:	2001      	movs	r0, #1
 8003a78:	f7ff fef4 	bl	8003864 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a7c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d104      	bne.n	8003a8e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2204      	movs	r2, #4
 8003a88:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e026      	b.n	8003adc <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	3b01      	subs	r3, #1
 8003a92:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	0c1a      	lsrs	r2, r3, #16
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f002 020f 	and.w	r2, r2, #15
 8003aa0:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	b292      	uxth	r2, r2
 8003aaa:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f870 	bl	8003b92 <RTC_ExitInitMode>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d004      	beq.n	8003ac2 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2204      	movs	r2, #4
 8003abc:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e00c      	b.n	8003adc <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003ada:	2300      	movs	r3, #0
  }
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40006c00 	.word	0x40006c00

08003ae8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e01d      	b.n	8003b3a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0208 	bic.w	r2, r2, #8
 8003b0c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003b0e:	f7fd f8d3 	bl	8000cb8 <HAL_GetTick>
 8003b12:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003b14:	e009      	b.n	8003b2a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003b16:	f7fd f8cf 	bl	8000cb8 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b24:	d901      	bls.n	8003b2a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e007      	b.n	8003b3a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0ee      	beq.n	8003b16 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b084      	sub	sp, #16
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003b4e:	f7fd f8b3 	bl	8000cb8 <HAL_GetTick>
 8003b52:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b54:	e009      	b.n	8003b6a <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003b56:	f7fd f8af 	bl	8000cb8 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b64:	d901      	bls.n	8003b6a <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e00f      	b.n	8003b8a <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 0320 	and.w	r3, r3, #32
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0ee      	beq.n	8003b56 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0210 	orr.w	r2, r2, #16
 8003b86:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b084      	sub	sp, #16
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0210 	bic.w	r2, r2, #16
 8003bac:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003bae:	f7fd f883 	bl	8000cb8 <HAL_GetTick>
 8003bb2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003bb4:	e009      	b.n	8003bca <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003bb6:	f7fd f87f 	bl	8000cb8 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003bc4:	d901      	bls.n	8003bca <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e007      	b.n	8003bda <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0ee      	beq.n	8003bb6 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
	...

08003be4 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8003bf4:	4b07      	ldr	r3, [pc, #28]	@ (8003c14 <HAL_RTCEx_BKUPWrite+0x30>)
 8003bf6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	4413      	add	r3, r2
 8003c00:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	b292      	uxth	r2, r2
 8003c08:	601a      	str	r2, [r3, #0]
}
 8003c0a:	bf00      	nop
 8003c0c:	371c      	adds	r7, #28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr
 8003c14:	40006c00 	.word	0x40006c00

08003c18 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8003c2a:	4b08      	ldr	r3, [pc, #32]	@ (8003c4c <HAL_RTCEx_BKUPRead+0x34>)
 8003c2c:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4413      	add	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8003c40:	68bb      	ldr	r3, [r7, #8]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr
 8003c4c:	40006c00 	.word	0x40006c00

08003c50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e042      	b.n	8003ce8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7fc ff2a 	bl	8000ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2224      	movs	r2, #36	@ 0x24
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 fdaf 	bl	80047f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ca8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695a      	ldr	r2, [r3, #20]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08a      	sub	sp, #40	@ 0x28
 8003cf4:	af02      	add	r7, sp, #8
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	603b      	str	r3, [r7, #0]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	d175      	bne.n	8003dfc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <HAL_UART_Transmit+0x2c>
 8003d16:	88fb      	ldrh	r3, [r7, #6]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e06e      	b.n	8003dfe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2221      	movs	r2, #33	@ 0x21
 8003d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d2e:	f7fc ffc3 	bl	8000cb8 <HAL_GetTick>
 8003d32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	88fa      	ldrh	r2, [r7, #6]
 8003d38:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	88fa      	ldrh	r2, [r7, #6]
 8003d3e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d48:	d108      	bne.n	8003d5c <HAL_UART_Transmit+0x6c>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d104      	bne.n	8003d5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	61bb      	str	r3, [r7, #24]
 8003d5a:	e003      	b.n	8003d64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d64:	e02e      	b.n	8003dc4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	2180      	movs	r1, #128	@ 0x80
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 fb13 	bl	800439c <UART_WaitOnFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d005      	beq.n	8003d88 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e03a      	b.n	8003dfe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10b      	bne.n	8003da6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	3302      	adds	r3, #2
 8003da2:	61bb      	str	r3, [r7, #24]
 8003da4:	e007      	b.n	8003db6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	781a      	ldrb	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	3301      	adds	r3, #1
 8003db4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1cb      	bne.n	8003d66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	2140      	movs	r1, #64	@ 0x40
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 fadf 	bl	800439c <UART_WaitOnFlagUntilTimeout>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d005      	beq.n	8003df0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e006      	b.n	8003dfe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e000      	b.n	8003dfe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003dfc:	2302      	movs	r3, #2
  }
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3720      	adds	r7, #32
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b084      	sub	sp, #16
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	60f8      	str	r0, [r7, #12]
 8003e0e:	60b9      	str	r1, [r7, #8]
 8003e10:	4613      	mov	r3, r2
 8003e12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	d112      	bne.n	8003e46 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_UART_Receive_IT+0x26>
 8003e26:	88fb      	ldrh	r3, [r7, #6]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e00b      	b.n	8003e48 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e36:	88fb      	ldrh	r3, [r7, #6]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 fb06 	bl	800444e <UART_Start_Receive_IT>
 8003e42:	4603      	mov	r3, r0
 8003e44:	e000      	b.n	8003e48 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003e46:	2302      	movs	r3, #2
  }
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b0ba      	sub	sp, #232	@ 0xe8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003e8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10f      	bne.n	8003eb6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d009      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x66>
 8003ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ea6:	f003 0320 	and.w	r3, r3, #32
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fbe3 	bl	800467a <UART_Receive_IT>
      return;
 8003eb4:	e25b      	b.n	800436e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003eb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 80de 	beq.w	800407c <HAL_UART_IRQHandler+0x22c>
 8003ec0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d106      	bne.n	8003eda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ed0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 80d1 	beq.w	800407c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00b      	beq.n	8003efe <HAL_UART_IRQHandler+0xae>
 8003ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d005      	beq.n	8003efe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef6:	f043 0201 	orr.w	r2, r3, #1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f02:	f003 0304 	and.w	r3, r3, #4
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00b      	beq.n	8003f22 <HAL_UART_IRQHandler+0xd2>
 8003f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1a:	f043 0202 	orr.w	r2, r3, #2
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00b      	beq.n	8003f46 <HAL_UART_IRQHandler+0xf6>
 8003f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3e:	f043 0204 	orr.w	r2, r3, #4
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d011      	beq.n	8003f76 <HAL_UART_IRQHandler+0x126>
 8003f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f56:	f003 0320 	and.w	r3, r3, #32
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d105      	bne.n	8003f6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6e:	f043 0208 	orr.w	r2, r3, #8
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 81f2 	beq.w	8004364 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f84:	f003 0320 	and.w	r3, r3, #32
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <HAL_UART_IRQHandler+0x14e>
 8003f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f90:	f003 0320 	and.w	r3, r3, #32
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 fb6e 	bl	800467a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	bf14      	ite	ne
 8003fac:	2301      	movne	r3, #1
 8003fae:	2300      	moveq	r3, #0
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d103      	bne.n	8003fca <HAL_UART_IRQHandler+0x17a>
 8003fc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d04f      	beq.n	800406a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fa78 	bl	80044c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d041      	beq.n	8004062 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3314      	adds	r3, #20
 8003fe4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003ff4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ff8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3314      	adds	r3, #20
 8004006:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800400a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800400e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004016:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800401a:	e841 2300 	strex	r3, r2, [r1]
 800401e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004022:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1d9      	bne.n	8003fde <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800402e:	2b00      	cmp	r3, #0
 8004030:	d013      	beq.n	800405a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004036:	4a7e      	ldr	r2, [pc, #504]	@ (8004230 <HAL_UART_IRQHandler+0x3e0>)
 8004038:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800403e:	4618      	mov	r0, r3
 8004040:	f7fc ffb0 	bl	8000fa4 <HAL_DMA_Abort_IT>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d016      	beq.n	8004078 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800404e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004054:	4610      	mov	r0, r2
 8004056:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004058:	e00e      	b.n	8004078 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7fc fd0e 	bl	8000a7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004060:	e00a      	b.n	8004078 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fc fd0a 	bl	8000a7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004068:	e006      	b.n	8004078 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fc fd06 	bl	8000a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004076:	e175      	b.n	8004364 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004078:	bf00      	nop
    return;
 800407a:	e173      	b.n	8004364 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004080:	2b01      	cmp	r3, #1
 8004082:	f040 814f 	bne.w	8004324 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800408a:	f003 0310 	and.w	r3, r3, #16
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 8148 	beq.w	8004324 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004098:	f003 0310 	and.w	r3, r3, #16
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 8141 	beq.w	8004324 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040a2:	2300      	movs	r3, #0
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	60bb      	str	r3, [r7, #8]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	60bb      	str	r3, [r7, #8]
 80040b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 80b6 	beq.w	8004234 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 8145 	beq.w	8004368 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80040e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040e6:	429a      	cmp	r2, r3
 80040e8:	f080 813e 	bcs.w	8004368 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	2b20      	cmp	r3, #32
 80040fc:	f000 8088 	beq.w	8004210 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	330c      	adds	r3, #12
 8004106:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800410e:	e853 3f00 	ldrex	r3, [r3]
 8004112:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004116:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800411a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800411e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	330c      	adds	r3, #12
 8004128:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800412c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004130:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004138:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800413c:	e841 2300 	strex	r3, r2, [r1]
 8004140:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004144:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1d9      	bne.n	8004100 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3314      	adds	r3, #20
 8004152:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004154:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004156:	e853 3f00 	ldrex	r3, [r3]
 800415a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800415c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800415e:	f023 0301 	bic.w	r3, r3, #1
 8004162:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	3314      	adds	r3, #20
 800416c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004170:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004174:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004176:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004178:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800417c:	e841 2300 	strex	r3, r2, [r1]
 8004180:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004182:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1e1      	bne.n	800414c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3314      	adds	r3, #20
 800418e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004190:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004192:	e853 3f00 	ldrex	r3, [r3]
 8004196:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004198:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800419a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800419e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3314      	adds	r3, #20
 80041a8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80041ac:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041ae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041b2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041b4:	e841 2300 	strex	r3, r2, [r1]
 80041b8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80041ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1e3      	bne.n	8004188 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	330c      	adds	r3, #12
 80041d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041d8:	e853 3f00 	ldrex	r3, [r3]
 80041dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80041de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041e0:	f023 0310 	bic.w	r3, r3, #16
 80041e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	330c      	adds	r3, #12
 80041ee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80041f2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80041f4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041fa:	e841 2300 	strex	r3, r2, [r1]
 80041fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004200:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1e3      	bne.n	80041ce <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800420a:	4618      	mov	r0, r3
 800420c:	f7fc fe8f 	bl	8000f2e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800421e:	b29b      	uxth	r3, r3
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	b29b      	uxth	r3, r3
 8004224:	4619      	mov	r1, r3
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f8ad 	bl	8004386 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800422c:	e09c      	b.n	8004368 <HAL_UART_IRQHandler+0x518>
 800422e:	bf00      	nop
 8004230:	08004585 	.word	0x08004585
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800423c:	b29b      	uxth	r3, r3
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 808e 	beq.w	800436c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004250:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 8089 	beq.w	800436c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	330c      	adds	r3, #12
 8004260:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004264:	e853 3f00 	ldrex	r3, [r3]
 8004268:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800426a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800426c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004270:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	330c      	adds	r3, #12
 800427a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800427e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004280:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004282:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004284:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004286:	e841 2300 	strex	r3, r2, [r1]
 800428a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800428c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1e3      	bne.n	800425a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3314      	adds	r3, #20
 8004298:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429c:	e853 3f00 	ldrex	r3, [r3]
 80042a0:	623b      	str	r3, [r7, #32]
   return(result);
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	f023 0301 	bic.w	r3, r3, #1
 80042a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3314      	adds	r3, #20
 80042b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80042b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80042b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042be:	e841 2300 	strex	r3, r2, [r1]
 80042c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1e3      	bne.n	8004292 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	330c      	adds	r3, #12
 80042de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	e853 3f00 	ldrex	r3, [r3]
 80042e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0310 	bic.w	r3, r3, #16
 80042ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	330c      	adds	r3, #12
 80042f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80042fc:	61fa      	str	r2, [r7, #28]
 80042fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004300:	69b9      	ldr	r1, [r7, #24]
 8004302:	69fa      	ldr	r2, [r7, #28]
 8004304:	e841 2300 	strex	r3, r2, [r1]
 8004308:	617b      	str	r3, [r7, #20]
   return(result);
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1e3      	bne.n	80042d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004316:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800431a:	4619      	mov	r1, r3
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f832 	bl	8004386 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004322:	e023      	b.n	800436c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004328:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800432c:	2b00      	cmp	r3, #0
 800432e:	d009      	beq.n	8004344 <HAL_UART_IRQHandler+0x4f4>
 8004330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 f935 	bl	80045ac <UART_Transmit_IT>
    return;
 8004342:	e014      	b.n	800436e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00e      	beq.n	800436e <HAL_UART_IRQHandler+0x51e>
 8004350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004358:	2b00      	cmp	r3, #0
 800435a:	d008      	beq.n	800436e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f974 	bl	800464a <UART_EndTransmit_IT>
    return;
 8004362:	e004      	b.n	800436e <HAL_UART_IRQHandler+0x51e>
    return;
 8004364:	bf00      	nop
 8004366:	e002      	b.n	800436e <HAL_UART_IRQHandler+0x51e>
      return;
 8004368:	bf00      	nop
 800436a:	e000      	b.n	800436e <HAL_UART_IRQHandler+0x51e>
      return;
 800436c:	bf00      	nop
  }
}
 800436e:	37e8      	adds	r7, #232	@ 0xe8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	bc80      	pop	{r7}
 8004384:	4770      	bx	lr

08004386 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
 800438e:	460b      	mov	r3, r1
 8004390:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr

0800439c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	4613      	mov	r3, r2
 80043aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ac:	e03b      	b.n	8004426 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b4:	d037      	beq.n	8004426 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b6:	f7fc fc7f 	bl	8000cb8 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	6a3a      	ldr	r2, [r7, #32]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d302      	bcc.n	80043cc <UART_WaitOnFlagUntilTimeout+0x30>
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e03a      	b.n	8004446 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	f003 0304 	and.w	r3, r3, #4
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d023      	beq.n	8004426 <UART_WaitOnFlagUntilTimeout+0x8a>
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b80      	cmp	r3, #128	@ 0x80
 80043e2:	d020      	beq.n	8004426 <UART_WaitOnFlagUntilTimeout+0x8a>
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2b40      	cmp	r3, #64	@ 0x40
 80043e8:	d01d      	beq.n	8004426 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0308 	and.w	r3, r3, #8
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d116      	bne.n	8004426 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	617b      	str	r3, [r7, #20]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 f856 	bl	80044c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2208      	movs	r2, #8
 8004418:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e00f      	b.n	8004446 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4013      	ands	r3, r2
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	429a      	cmp	r2, r3
 8004434:	bf0c      	ite	eq
 8004436:	2301      	moveq	r3, #1
 8004438:	2300      	movne	r3, #0
 800443a:	b2db      	uxtb	r3, r3
 800443c:	461a      	mov	r2, r3
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	429a      	cmp	r2, r3
 8004442:	d0b4      	beq.n	80043ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800444e:	b480      	push	{r7}
 8004450:	b085      	sub	sp, #20
 8004452:	af00      	add	r7, sp, #0
 8004454:	60f8      	str	r0, [r7, #12]
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	4613      	mov	r3, r2
 800445a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	88fa      	ldrh	r2, [r7, #6]
 8004466:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	88fa      	ldrh	r2, [r7, #6]
 800446c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2222      	movs	r2, #34	@ 0x22
 8004478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d007      	beq.n	8004494 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004492:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	695a      	ldr	r2, [r3, #20]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0201 	orr.w	r2, r2, #1
 80044a2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68da      	ldr	r2, [r3, #12]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0220 	orr.w	r2, r2, #32
 80044b2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bc80      	pop	{r7}
 80044be:	4770      	bx	lr

080044c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b095      	sub	sp, #84	@ 0x54
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	330c      	adds	r3, #12
 80044ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044d2:	e853 3f00 	ldrex	r3, [r3]
 80044d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	330c      	adds	r3, #12
 80044e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044e8:	643a      	str	r2, [r7, #64]	@ 0x40
 80044ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044f0:	e841 2300 	strex	r3, r2, [r1]
 80044f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1e5      	bne.n	80044c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3314      	adds	r3, #20
 8004502:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	e853 3f00 	ldrex	r3, [r3]
 800450a:	61fb      	str	r3, [r7, #28]
   return(result);
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	f023 0301 	bic.w	r3, r3, #1
 8004512:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3314      	adds	r3, #20
 800451a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800451c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800451e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004520:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004522:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004524:	e841 2300 	strex	r3, r2, [r1]
 8004528:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800452a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1e5      	bne.n	80044fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004534:	2b01      	cmp	r3, #1
 8004536:	d119      	bne.n	800456c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	330c      	adds	r3, #12
 800453e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	e853 3f00 	ldrex	r3, [r3]
 8004546:	60bb      	str	r3, [r7, #8]
   return(result);
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f023 0310 	bic.w	r3, r3, #16
 800454e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	330c      	adds	r3, #12
 8004556:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004558:	61ba      	str	r2, [r7, #24]
 800455a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455c:	6979      	ldr	r1, [r7, #20]
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	e841 2300 	strex	r3, r2, [r1]
 8004564:	613b      	str	r3, [r7, #16]
   return(result);
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1e5      	bne.n	8004538 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2220      	movs	r2, #32
 8004570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800457a:	bf00      	nop
 800457c:	3754      	adds	r7, #84	@ 0x54
 800457e:	46bd      	mov	sp, r7
 8004580:	bc80      	pop	{r7}
 8004582:	4770      	bx	lr

08004584 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004590:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f7fc fa6c 	bl	8000a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045a4:	bf00      	nop
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b21      	cmp	r3, #33	@ 0x21
 80045be:	d13e      	bne.n	800463e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045c8:	d114      	bne.n	80045f4 <UART_Transmit_IT+0x48>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d110      	bne.n	80045f4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	461a      	mov	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045e6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	1c9a      	adds	r2, r3, #2
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	621a      	str	r2, [r3, #32]
 80045f2:	e008      	b.n	8004606 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	1c59      	adds	r1, r3, #1
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6211      	str	r1, [r2, #32]
 80045fe:	781a      	ldrb	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800460a:	b29b      	uxth	r3, r3
 800460c:	3b01      	subs	r3, #1
 800460e:	b29b      	uxth	r3, r3
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	4619      	mov	r1, r3
 8004614:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10f      	bne.n	800463a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004628:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004638:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	e000      	b.n	8004640 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800463e:	2302      	movs	r3, #2
  }
}
 8004640:	4618      	mov	r0, r3
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr

0800464a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b082      	sub	sp, #8
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004660:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7ff fe82 	bl	8004374 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b08c      	sub	sp, #48	@ 0x30
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b22      	cmp	r3, #34	@ 0x22
 800468c:	f040 80ae 	bne.w	80047ec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004698:	d117      	bne.n	80046ca <UART_Receive_IT+0x50>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d113      	bne.n	80046ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c2:	1c9a      	adds	r2, r3, #2
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80046c8:	e026      	b.n	8004718 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80046d0:	2300      	movs	r3, #0
 80046d2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046dc:	d007      	beq.n	80046ee <UART_Receive_IT+0x74>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10a      	bne.n	80046fc <UART_Receive_IT+0x82>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d106      	bne.n	80046fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f8:	701a      	strb	r2, [r3, #0]
 80046fa:	e008      	b.n	800470e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004708:	b2da      	uxtb	r2, r3
 800470a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800470c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800471c:	b29b      	uxth	r3, r3
 800471e:	3b01      	subs	r3, #1
 8004720:	b29b      	uxth	r3, r3
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	4619      	mov	r1, r3
 8004726:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004728:	2b00      	cmp	r3, #0
 800472a:	d15d      	bne.n	80047e8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0220 	bic.w	r2, r2, #32
 800473a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800474a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695a      	ldr	r2, [r3, #20]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0201 	bic.w	r2, r2, #1
 800475a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2220      	movs	r2, #32
 8004760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476e:	2b01      	cmp	r3, #1
 8004770:	d135      	bne.n	80047de <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	330c      	adds	r3, #12
 800477e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	e853 3f00 	ldrex	r3, [r3]
 8004786:	613b      	str	r3, [r7, #16]
   return(result);
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	f023 0310 	bic.w	r3, r3, #16
 800478e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	330c      	adds	r3, #12
 8004796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004798:	623a      	str	r2, [r7, #32]
 800479a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479c:	69f9      	ldr	r1, [r7, #28]
 800479e:	6a3a      	ldr	r2, [r7, #32]
 80047a0:	e841 2300 	strex	r3, r2, [r1]
 80047a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1e5      	bne.n	8004778 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0310 	and.w	r3, r3, #16
 80047b6:	2b10      	cmp	r3, #16
 80047b8:	d10a      	bne.n	80047d0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047ba:	2300      	movs	r3, #0
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	60fb      	str	r3, [r7, #12]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80047d4:	4619      	mov	r1, r3
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7ff fdd5 	bl	8004386 <HAL_UARTEx_RxEventCallback>
 80047dc:	e002      	b.n	80047e4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7fc f956 	bl	8000a90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	e002      	b.n	80047ee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80047e8:	2300      	movs	r3, #0
 80047ea:	e000      	b.n	80047ee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80047ec:	2302      	movs	r3, #2
  }
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3730      	adds	r7, #48	@ 0x30
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
	...

080047f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689a      	ldr	r2, [r3, #8]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	4313      	orrs	r3, r2
 8004826:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004832:	f023 030c 	bic.w	r3, r3, #12
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6812      	ldr	r2, [r2, #0]
 800483a:	68b9      	ldr	r1, [r7, #8]
 800483c:	430b      	orrs	r3, r1
 800483e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699a      	ldr	r2, [r3, #24]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a2c      	ldr	r2, [pc, #176]	@ (800490c <UART_SetConfig+0x114>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d103      	bne.n	8004868 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004860:	f7fe ff18 	bl	8003694 <HAL_RCC_GetPCLK2Freq>
 8004864:	60f8      	str	r0, [r7, #12]
 8004866:	e002      	b.n	800486e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004868:	f7fe ff00 	bl	800366c <HAL_RCC_GetPCLK1Freq>
 800486c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4613      	mov	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	009a      	lsls	r2, r3, #2
 8004878:	441a      	add	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	fbb2 f3f3 	udiv	r3, r2, r3
 8004884:	4a22      	ldr	r2, [pc, #136]	@ (8004910 <UART_SetConfig+0x118>)
 8004886:	fba2 2303 	umull	r2, r3, r2, r3
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	0119      	lsls	r1, r3, #4
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	4613      	mov	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	009a      	lsls	r2, r3, #2
 8004898:	441a      	add	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80048a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004910 <UART_SetConfig+0x118>)
 80048a6:	fba3 0302 	umull	r0, r3, r3, r2
 80048aa:	095b      	lsrs	r3, r3, #5
 80048ac:	2064      	movs	r0, #100	@ 0x64
 80048ae:	fb00 f303 	mul.w	r3, r0, r3
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	3332      	adds	r3, #50	@ 0x32
 80048b8:	4a15      	ldr	r2, [pc, #84]	@ (8004910 <UART_SetConfig+0x118>)
 80048ba:	fba2 2303 	umull	r2, r3, r2, r3
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048c4:	4419      	add	r1, r3
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4613      	mov	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	009a      	lsls	r2, r3, #2
 80048d0:	441a      	add	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80048dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004910 <UART_SetConfig+0x118>)
 80048de:	fba3 0302 	umull	r0, r3, r3, r2
 80048e2:	095b      	lsrs	r3, r3, #5
 80048e4:	2064      	movs	r0, #100	@ 0x64
 80048e6:	fb00 f303 	mul.w	r3, r0, r3
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	3332      	adds	r3, #50	@ 0x32
 80048f0:	4a07      	ldr	r2, [pc, #28]	@ (8004910 <UART_SetConfig+0x118>)
 80048f2:	fba2 2303 	umull	r2, r3, r2, r3
 80048f6:	095b      	lsrs	r3, r3, #5
 80048f8:	f003 020f 	and.w	r2, r3, #15
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	440a      	add	r2, r1
 8004902:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004904:	bf00      	nop
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40013800 	.word	0x40013800
 8004910:	51eb851f 	.word	0x51eb851f

08004914 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	4638      	mov	r0, r7
 800491e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	bc80      	pop	{r7}
 800492c:	4770      	bx	lr

0800492e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800492e:	b480      	push	{r7}
 8004930:	b085      	sub	sp, #20
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800493e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004942:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	b29a      	uxth	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	bc80      	pop	{r7}
 8004958:	4770      	bx	lr

0800495a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800495a:	b480      	push	{r7}
 800495c:	b085      	sub	sp, #20
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004962:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004966:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800496e:	b29a      	uxth	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	b29b      	uxth	r3, r3
 8004974:	43db      	mvns	r3, r3
 8004976:	b29b      	uxth	r3, r3
 8004978:	4013      	ands	r3, r2
 800497a:	b29a      	uxth	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	bc80      	pop	{r7}
 800498c:	4770      	bx	lr

0800498e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	460b      	mov	r3, r1
 8004998:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bc80      	pop	{r7}
 80049a4:	4770      	bx	lr

080049a6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b085      	sub	sp, #20
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	60f8      	str	r0, [r7, #12]
 80049ae:	4638      	mov	r0, r7
 80049b0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	bc80      	pop	{r7}
 80049de:	4770      	bx	lr

080049e0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b09d      	sub	sp, #116	@ 0x74
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	881b      	ldrh	r3, [r3, #0]
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a06:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	78db      	ldrb	r3, [r3, #3]
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d81f      	bhi.n	8004a52 <USB_ActivateEndpoint+0x72>
 8004a12:	a201      	add	r2, pc, #4	@ (adr r2, 8004a18 <USB_ActivateEndpoint+0x38>)
 8004a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a18:	08004a29 	.word	0x08004a29
 8004a1c:	08004a45 	.word	0x08004a45
 8004a20:	08004a5b 	.word	0x08004a5b
 8004a24:	08004a37 	.word	0x08004a37
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004a28:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004a2c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a30:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004a34:	e012      	b.n	8004a5c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004a36:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004a3a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004a3e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004a42:	e00b      	b.n	8004a5c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004a44:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004a48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a4c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004a50:	e004      	b.n	8004a5c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004a58:	e000      	b.n	8004a5c <USB_ActivateEndpoint+0x7c>
      break;
 8004a5a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	441a      	add	r2, r3
 8004a66:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004a6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	7812      	ldrb	r2, [r2, #0]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	441a      	add	r2, r3
 8004aaa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004aae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ab2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ab6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004aba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	7b1b      	ldrb	r3, [r3, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f040 8178 	bne.w	8004dbc <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	785b      	ldrb	r3, [r3, #1]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 8084 	beq.w	8004bde <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	61bb      	str	r3, [r7, #24]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	61bb      	str	r3, [r7, #24]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	011a      	lsls	r2, r3, #4
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004af8:	617b      	str	r3, [r7, #20]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	88db      	ldrh	r3, [r3, #6]
 8004afe:	085b      	lsrs	r3, r3, #1
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	827b      	strh	r3, [r7, #18]
 8004b18:	8a7b      	ldrh	r3, [r7, #18]
 8004b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d01b      	beq.n	8004b5a <USB_ActivateEndpoint+0x17a>
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b38:	823b      	strh	r3, [r7, #16]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	441a      	add	r2, r3
 8004b44:	8a3b      	ldrh	r3, [r7, #16]
 8004b46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b52:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	78db      	ldrb	r3, [r3, #3]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d020      	beq.n	8004ba4 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b78:	81bb      	strh	r3, [r7, #12]
 8004b7a:	89bb      	ldrh	r3, [r7, #12]
 8004b7c:	f083 0320 	eor.w	r3, r3, #32
 8004b80:	81bb      	strh	r3, [r7, #12]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	441a      	add	r2, r3
 8004b8c:	89bb      	ldrh	r3, [r7, #12]
 8004b8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	8013      	strh	r3, [r2, #0]
 8004ba2:	e2d5      	b.n	8005150 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bba:	81fb      	strh	r3, [r7, #14]
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	441a      	add	r2, r3
 8004bc6:	89fb      	ldrh	r3, [r7, #14]
 8004bc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	8013      	strh	r3, [r2, #0]
 8004bdc:	e2b8      	b.n	8005150 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	461a      	mov	r2, r3
 8004bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bee:	4413      	add	r3, r2
 8004bf0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	011a      	lsls	r2, r3, #4
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	88db      	ldrh	r3, [r3, #6]
 8004c06:	085b      	lsrs	r3, r3, #1
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c10:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	461a      	mov	r2, r3
 8004c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c22:	4413      	add	r3, r2
 8004c24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	011a      	lsls	r2, r3, #4
 8004c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2e:	4413      	add	r3, r2
 8004c30:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c38:	881b      	ldrh	r3, [r3, #0]
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c44:	801a      	strh	r2, [r3, #0]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c4c:	d91d      	bls.n	8004c8a <USB_ActivateEndpoint+0x2aa>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	095b      	lsrs	r3, r3, #5
 8004c54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f003 031f 	and.w	r3, r3, #31
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d102      	bne.n	8004c68 <USB_ActivateEndpoint+0x288>
 8004c62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c64:	3b01      	subs	r3, #1
 8004c66:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	029b      	lsls	r3, r3, #10
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	4313      	orrs	r3, r2
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c86:	801a      	strh	r2, [r3, #0]
 8004c88:	e026      	b.n	8004cd8 <USB_ActivateEndpoint+0x2f8>
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10a      	bne.n	8004ca8 <USB_ActivateEndpoint+0x2c8>
 8004c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca4:	801a      	strh	r2, [r3, #0]
 8004ca6:	e017      	b.n	8004cd8 <USB_ActivateEndpoint+0x2f8>
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	085b      	lsrs	r3, r3, #1
 8004cae:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <USB_ActivateEndpoint+0x2e2>
 8004cbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	029b      	lsls	r3, r3, #10
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004ce6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004ce8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d01b      	beq.n	8004d28 <USB_ActivateEndpoint+0x348>
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	881b      	ldrh	r3, [r3, #0]
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d06:	843b      	strh	r3, [r7, #32]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	441a      	add	r2, r3
 8004d12:	8c3b      	ldrh	r3, [r7, #32]
 8004d14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d124      	bne.n	8004d7a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d46:	83bb      	strh	r3, [r7, #28]
 8004d48:	8bbb      	ldrh	r3, [r7, #28]
 8004d4a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004d4e:	83bb      	strh	r3, [r7, #28]
 8004d50:	8bbb      	ldrh	r3, [r7, #28]
 8004d52:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004d56:	83bb      	strh	r3, [r7, #28]
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	441a      	add	r2, r3
 8004d62:	8bbb      	ldrh	r3, [r7, #28]
 8004d64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	8013      	strh	r3, [r2, #0]
 8004d78:	e1ea      	b.n	8005150 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d90:	83fb      	strh	r3, [r7, #30]
 8004d92:	8bfb      	ldrh	r3, [r7, #30]
 8004d94:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004d98:	83fb      	strh	r3, [r7, #30]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	441a      	add	r2, r3
 8004da4:	8bfb      	ldrh	r3, [r7, #30]
 8004da6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004daa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004db2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	8013      	strh	r3, [r2, #0]
 8004dba:	e1c9      	b.n	8005150 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	78db      	ldrb	r3, [r3, #3]
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d11e      	bne.n	8004e02 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dda:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	441a      	add	r2, r3
 8004de8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004dec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004df0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004df4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004df8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	8013      	strh	r3, [r2, #0]
 8004e00:	e01d      	b.n	8004e3e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004e14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e18:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	441a      	add	r2, r3
 8004e26:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004e2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e4e:	4413      	add	r3, r2
 8004e50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	011a      	lsls	r2, r3, #4
 8004e58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004e60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	891b      	ldrh	r3, [r3, #8]
 8004e66:	085b      	lsrs	r3, r3, #1
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e70:	801a      	strh	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	461a      	mov	r2, r3
 8004e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e82:	4413      	add	r3, r2
 8004e84:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	011a      	lsls	r2, r3, #4
 8004e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004e94:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	895b      	ldrh	r3, [r3, #10]
 8004e9a:	085b      	lsrs	r3, r3, #1
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ea4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	785b      	ldrb	r3, [r3, #1]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f040 8093 	bne.w	8004fd6 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	881b      	ldrh	r3, [r3, #0]
 8004ebc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004ec0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004ec4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d01b      	beq.n	8004f04 <USB_ActivateEndpoint+0x524>
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ee2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	441a      	add	r2, r3
 8004eee:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004ef0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ef4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ef8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004efc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004f12:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d01b      	beq.n	8004f54 <USB_ActivateEndpoint+0x574>
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f32:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	441a      	add	r2, r3
 8004f3e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004f40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f4c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f6a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004f6c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004f6e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004f72:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004f74:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004f76:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004f7a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	441a      	add	r2, r3
 8004f86:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004f88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fb2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	441a      	add	r2, r3
 8004fbe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004fc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	8013      	strh	r3, [r2, #0]
 8004fd4:	e0bc      	b.n	8005150 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004fe6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004fea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d01d      	beq.n	800502e <USB_ActivateEndpoint+0x64e>
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005004:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005008:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	441a      	add	r2, r3
 8005016:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800501a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800501e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005022:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800502a:	b29b      	uxth	r3, r3
 800502c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800503e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005046:	2b00      	cmp	r3, #0
 8005048:	d01d      	beq.n	8005086 <USB_ActivateEndpoint+0x6a6>
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	b29b      	uxth	r3, r3
 8005058:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800505c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005060:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	441a      	add	r2, r3
 800506e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005072:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005076:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800507a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800507e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005082:	b29b      	uxth	r3, r3
 8005084:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	78db      	ldrb	r3, [r3, #3]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d024      	beq.n	80050d8 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	b29b      	uxth	r3, r3
 800509c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050a4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80050a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80050ac:	f083 0320 	eor.w	r3, r3, #32
 80050b0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	441a      	add	r2, r3
 80050be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80050c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	8013      	strh	r3, [r2, #0]
 80050d6:	e01d      	b.n	8005114 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	881b      	ldrh	r3, [r3, #0]
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050ee:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	441a      	add	r2, r3
 80050fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005100:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005104:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005108:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800510c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005110:	b29b      	uxth	r3, r3
 8005112:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	881b      	ldrh	r3, [r3, #0]
 8005120:	b29b      	uxth	r3, r3
 8005122:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800512a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	441a      	add	r2, r3
 8005138:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800513c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005140:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005144:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800514c:	b29b      	uxth	r3, r3
 800514e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005150:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005154:	4618      	mov	r0, r3
 8005156:	3774      	adds	r7, #116	@ 0x74
 8005158:	46bd      	mov	sp, r7
 800515a:	bc80      	pop	{r7}
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop

08005160 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005160:	b480      	push	{r7}
 8005162:	b08d      	sub	sp, #52	@ 0x34
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	7b1b      	ldrb	r3, [r3, #12]
 800516e:	2b00      	cmp	r3, #0
 8005170:	f040 808e 	bne.w	8005290 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	785b      	ldrb	r3, [r3, #1]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d044      	beq.n	8005206 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	81bb      	strh	r3, [r7, #12]
 800518a:	89bb      	ldrh	r3, [r7, #12]
 800518c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005190:	2b00      	cmp	r3, #0
 8005192:	d01b      	beq.n	80051cc <USB_DeactivateEndpoint+0x6c>
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051aa:	817b      	strh	r3, [r7, #10]
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	441a      	add	r2, r3
 80051b6:	897b      	ldrh	r3, [r7, #10]
 80051b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	881b      	ldrh	r3, [r3, #0]
 80051d8:	b29b      	uxth	r3, r3
 80051da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051e2:	813b      	strh	r3, [r7, #8]
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	441a      	add	r2, r3
 80051ee:	893b      	ldrh	r3, [r7, #8]
 80051f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005200:	b29b      	uxth	r3, r3
 8005202:	8013      	strh	r3, [r2, #0]
 8005204:	e192      	b.n	800552c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4413      	add	r3, r2
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	827b      	strh	r3, [r7, #18]
 8005214:	8a7b      	ldrh	r3, [r7, #18]
 8005216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d01b      	beq.n	8005256 <USB_DeactivateEndpoint+0xf6>
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	881b      	ldrh	r3, [r3, #0]
 800522a:	b29b      	uxth	r3, r3
 800522c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005230:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005234:	823b      	strh	r3, [r7, #16]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	441a      	add	r2, r3
 8005240:	8a3b      	ldrh	r3, [r7, #16]
 8005242:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005246:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800524a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800524e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005252:	b29b      	uxth	r3, r3
 8005254:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	881b      	ldrh	r3, [r3, #0]
 8005262:	b29b      	uxth	r3, r3
 8005264:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005268:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800526c:	81fb      	strh	r3, [r7, #14]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	441a      	add	r2, r3
 8005278:	89fb      	ldrh	r3, [r7, #14]
 800527a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800527e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005282:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800528a:	b29b      	uxth	r3, r3
 800528c:	8013      	strh	r3, [r2, #0]
 800528e:	e14d      	b.n	800552c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	785b      	ldrb	r3, [r3, #1]
 8005294:	2b00      	cmp	r3, #0
 8005296:	f040 80a5 	bne.w	80053e4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4413      	add	r3, r2
 80052a4:	881b      	ldrh	r3, [r3, #0]
 80052a6:	843b      	strh	r3, [r7, #32]
 80052a8:	8c3b      	ldrh	r3, [r7, #32]
 80052aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d01b      	beq.n	80052ea <USB_DeactivateEndpoint+0x18a>
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	b29b      	uxth	r3, r3
 80052c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052c8:	83fb      	strh	r3, [r7, #30]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	441a      	add	r2, r3
 80052d4:	8bfb      	ldrh	r3, [r7, #30]
 80052d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	83bb      	strh	r3, [r7, #28]
 80052f8:	8bbb      	ldrh	r3, [r7, #28]
 80052fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d01b      	beq.n	800533a <USB_DeactivateEndpoint+0x1da>
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	b29b      	uxth	r3, r3
 8005310:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005314:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005318:	837b      	strh	r3, [r7, #26]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	441a      	add	r2, r3
 8005324:	8b7b      	ldrh	r3, [r7, #26]
 8005326:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800532a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800532e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005332:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005336:	b29b      	uxth	r3, r3
 8005338:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4413      	add	r3, r2
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	b29b      	uxth	r3, r3
 8005348:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800534c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005350:	833b      	strh	r3, [r7, #24]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	441a      	add	r2, r3
 800535c:	8b3b      	ldrh	r3, [r7, #24]
 800535e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005362:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005366:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800536a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800536e:	b29b      	uxth	r3, r3
 8005370:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	b29b      	uxth	r3, r3
 8005380:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005384:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005388:	82fb      	strh	r3, [r7, #22]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	441a      	add	r2, r3
 8005394:	8afb      	ldrh	r3, [r7, #22]
 8005396:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800539a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800539e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053c0:	82bb      	strh	r3, [r7, #20]
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	441a      	add	r2, r3
 80053cc:	8abb      	ldrh	r3, [r7, #20]
 80053ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053de:	b29b      	uxth	r3, r3
 80053e0:	8013      	strh	r3, [r2, #0]
 80053e2:	e0a3      	b.n	800552c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	4413      	add	r3, r2
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80053f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80053f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d01b      	beq.n	8005434 <USB_DeactivateEndpoint+0x2d4>
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	b29b      	uxth	r3, r3
 800540a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800540e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005412:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	441a      	add	r2, r3
 800541e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005420:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005424:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005428:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800542c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005430:	b29b      	uxth	r3, r3
 8005432:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005442:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005448:	2b00      	cmp	r3, #0
 800544a:	d01b      	beq.n	8005484 <USB_DeactivateEndpoint+0x324>
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	b29b      	uxth	r3, r3
 800545a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800545e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005462:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	441a      	add	r2, r3
 800546e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005470:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005474:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005478:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800547c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005480:	b29b      	uxth	r3, r3
 8005482:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	b29b      	uxth	r3, r3
 8005492:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800549a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	441a      	add	r2, r3
 80054a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80054a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054d2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	441a      	add	r2, r3
 80054de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80054e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	b29b      	uxth	r3, r3
 8005502:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800550a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	441a      	add	r2, r3
 8005516:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005518:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800551c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005520:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005528:	b29b      	uxth	r3, r3
 800552a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3734      	adds	r7, #52	@ 0x34
 8005532:	46bd      	mov	sp, r7
 8005534:	bc80      	pop	{r7}
 8005536:	4770      	bx	lr

08005538 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b0c2      	sub	sp, #264	@ 0x108
 800553c:	af00      	add	r7, sp, #0
 800553e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005542:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005546:	6018      	str	r0, [r3, #0]
 8005548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800554c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005550:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005556:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	785b      	ldrb	r3, [r3, #1]
 800555e:	2b01      	cmp	r3, #1
 8005560:	f040 86b7 	bne.w	80062d2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005568:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	699a      	ldr	r2, [r3, #24]
 8005570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	429a      	cmp	r2, r3
 800557e:	d908      	bls.n	8005592 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005590:	e007      	b.n	80055a2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005596:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80055a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	7b1b      	ldrb	r3, [r3, #12]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d13a      	bne.n	8005628 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80055b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6959      	ldr	r1, [r3, #20]
 80055be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	88da      	ldrh	r2, [r3, #6]
 80055ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80055d4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80055d8:	6800      	ldr	r0, [r0, #0]
 80055da:	f001 fc9c 	bl	8006f16 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80055de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	613b      	str	r3, [r7, #16]
 80055ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	461a      	mov	r2, r3
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	4413      	add	r3, r2
 8005600:	613b      	str	r3, [r7, #16]
 8005602:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005606:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	011a      	lsls	r2, r3, #4
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	4413      	add	r3, r2
 8005614:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005618:	60fb      	str	r3, [r7, #12]
 800561a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800561e:	b29a      	uxth	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	801a      	strh	r2, [r3, #0]
 8005624:	f000 be1f 	b.w	8006266 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800562c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	78db      	ldrb	r3, [r3, #3]
 8005634:	2b02      	cmp	r3, #2
 8005636:	f040 8462 	bne.w	8005efe <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800563a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800563e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6a1a      	ldr	r2, [r3, #32]
 8005646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800564a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	429a      	cmp	r2, r3
 8005654:	f240 83df 	bls.w	8005e16 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800565c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005666:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	b29b      	uxth	r3, r3
 8005676:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800567a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800567e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005686:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	441a      	add	r2, r3
 800569c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80056a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056a8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80056ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80056b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6a1a      	ldr	r2, [r3, #32]
 80056c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c4:	1ad2      	subs	r2, r2, r3
 80056c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80056d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4413      	add	r3, r2
 80056ec:	881b      	ldrh	r3, [r3, #0]
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 81c7 	beq.w	8005a88 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	633b      	str	r3, [r7, #48]	@ 0x30
 8005706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800570a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	785b      	ldrb	r3, [r3, #1]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d177      	bne.n	8005806 <USB_EPStartXfer+0x2ce>
 8005716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800571a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005726:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005730:	b29b      	uxth	r3, r3
 8005732:	461a      	mov	r2, r3
 8005734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005736:	4413      	add	r3, r2
 8005738:	62bb      	str	r3, [r7, #40]	@ 0x28
 800573a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800573e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	011a      	lsls	r2, r3, #4
 8005748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800574a:	4413      	add	r3, r2
 800574c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005750:	627b      	str	r3, [r7, #36]	@ 0x24
 8005752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	b29b      	uxth	r3, r3
 8005758:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800575c:	b29a      	uxth	r2, r3
 800575e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005760:	801a      	strh	r2, [r3, #0]
 8005762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005766:	2b3e      	cmp	r3, #62	@ 0x3e
 8005768:	d921      	bls.n	80057ae <USB_EPStartXfer+0x276>
 800576a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800576e:	095b      	lsrs	r3, r3, #5
 8005770:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005778:	f003 031f 	and.w	r3, r3, #31
 800577c:	2b00      	cmp	r3, #0
 800577e:	d104      	bne.n	800578a <USB_EPStartXfer+0x252>
 8005780:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005784:	3b01      	subs	r3, #1
 8005786:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800578a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	b29a      	uxth	r2, r3
 8005790:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005794:	b29b      	uxth	r3, r3
 8005796:	029b      	lsls	r3, r3, #10
 8005798:	b29b      	uxth	r3, r3
 800579a:	4313      	orrs	r3, r2
 800579c:	b29b      	uxth	r3, r3
 800579e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057aa:	801a      	strh	r2, [r3, #0]
 80057ac:	e050      	b.n	8005850 <USB_EPStartXfer+0x318>
 80057ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10a      	bne.n	80057cc <USB_EPStartXfer+0x294>
 80057b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c8:	801a      	strh	r2, [r3, #0]
 80057ca:	e041      	b.n	8005850 <USB_EPStartXfer+0x318>
 80057cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057d0:	085b      	lsrs	r3, r3, #1
 80057d2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80057d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d004      	beq.n	80057ec <USB_EPStartXfer+0x2b4>
 80057e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80057e6:	3301      	adds	r3, #1
 80057e8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80057ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	029b      	lsls	r3, r3, #10
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	4313      	orrs	r3, r2
 80057fe:	b29a      	uxth	r2, r3
 8005800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005802:	801a      	strh	r2, [r3, #0]
 8005804:	e024      	b.n	8005850 <USB_EPStartXfer+0x318>
 8005806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800580a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	785b      	ldrb	r3, [r3, #1]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d11c      	bne.n	8005850 <USB_EPStartXfer+0x318>
 8005816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800581a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005824:	b29b      	uxth	r3, r3
 8005826:	461a      	mov	r2, r3
 8005828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582a:	4413      	add	r3, r2
 800582c:	633b      	str	r3, [r7, #48]	@ 0x30
 800582e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005832:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	011a      	lsls	r2, r3, #4
 800583c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583e:	4413      	add	r3, r2
 8005840:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005844:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800584a:	b29a      	uxth	r2, r3
 800584c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800584e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005854:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	895b      	ldrh	r3, [r3, #10]
 800585c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005864:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6959      	ldr	r1, [r3, #20]
 800586c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005870:	b29b      	uxth	r3, r3
 8005872:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005876:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800587a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800587e:	6800      	ldr	r0, [r0, #0]
 8005880:	f001 fb49 	bl	8006f16 <USB_WritePMA>
            ep->xfer_buff += len;
 8005884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005888:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	695a      	ldr	r2, [r3, #20]
 8005890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005894:	441a      	add	r2, r3
 8005896:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800589a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80058a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6a1a      	ldr	r2, [r3, #32]
 80058ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d90f      	bls.n	80058de <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80058be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6a1a      	ldr	r2, [r3, #32]
 80058ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ce:	1ad2      	subs	r2, r2, r3
 80058d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	621a      	str	r2, [r3, #32]
 80058dc:	e00e      	b.n	80058fc <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80058de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80058ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2200      	movs	r2, #0
 80058fa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80058fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	785b      	ldrb	r3, [r3, #1]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d177      	bne.n	80059fc <USB_EPStartXfer+0x4c4>
 800590c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005910:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	61bb      	str	r3, [r7, #24]
 8005918:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800591c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005926:	b29b      	uxth	r3, r3
 8005928:	461a      	mov	r2, r3
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	4413      	add	r3, r2
 800592e:	61bb      	str	r3, [r7, #24]
 8005930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005934:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	011a      	lsls	r2, r3, #4
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	4413      	add	r3, r2
 8005942:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005946:	617b      	str	r3, [r7, #20]
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	881b      	ldrh	r3, [r3, #0]
 800594c:	b29b      	uxth	r3, r3
 800594e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005952:	b29a      	uxth	r2, r3
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	801a      	strh	r2, [r3, #0]
 8005958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800595c:	2b3e      	cmp	r3, #62	@ 0x3e
 800595e:	d921      	bls.n	80059a4 <USB_EPStartXfer+0x46c>
 8005960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005964:	095b      	lsrs	r3, r3, #5
 8005966:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800596a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800596e:	f003 031f 	and.w	r3, r3, #31
 8005972:	2b00      	cmp	r3, #0
 8005974:	d104      	bne.n	8005980 <USB_EPStartXfer+0x448>
 8005976:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800597a:	3b01      	subs	r3, #1
 800597c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	881b      	ldrh	r3, [r3, #0]
 8005984:	b29a      	uxth	r2, r3
 8005986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800598a:	b29b      	uxth	r3, r3
 800598c:	029b      	lsls	r3, r3, #10
 800598e:	b29b      	uxth	r3, r3
 8005990:	4313      	orrs	r3, r2
 8005992:	b29b      	uxth	r3, r3
 8005994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800599c:	b29a      	uxth	r2, r3
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	801a      	strh	r2, [r3, #0]
 80059a2:	e056      	b.n	8005a52 <USB_EPStartXfer+0x51a>
 80059a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10a      	bne.n	80059c2 <USB_EPStartXfer+0x48a>
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	801a      	strh	r2, [r3, #0]
 80059c0:	e047      	b.n	8005a52 <USB_EPStartXfer+0x51a>
 80059c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059c6:	085b      	lsrs	r3, r3, #1
 80059c8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80059cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d004      	beq.n	80059e2 <USB_EPStartXfer+0x4aa>
 80059d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059dc:	3301      	adds	r3, #1
 80059de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	029b      	lsls	r3, r3, #10
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	4313      	orrs	r3, r2
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	801a      	strh	r2, [r3, #0]
 80059fa:	e02a      	b.n	8005a52 <USB_EPStartXfer+0x51a>
 80059fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	785b      	ldrb	r3, [r3, #1]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d122      	bne.n	8005a52 <USB_EPStartXfer+0x51a>
 8005a0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	623b      	str	r3, [r7, #32]
 8005a18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	461a      	mov	r2, r3
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	623b      	str	r3, [r7, #32]
 8005a30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	011a      	lsls	r2, r3, #4
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	4413      	add	r3, r2
 8005a42:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a46:	61fb      	str	r3, [r7, #28]
 8005a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	891b      	ldrh	r3, [r3, #8]
 8005a5e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6959      	ldr	r1, [r3, #20]
 8005a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005a78:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005a7c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005a80:	6800      	ldr	r0, [r0, #0]
 8005a82:	f001 fa48 	bl	8006f16 <USB_WritePMA>
 8005a86:	e3ee      	b.n	8006266 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	785b      	ldrb	r3, [r3, #1]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d177      	bne.n	8005b88 <USB_EPStartXfer+0x650>
 8005a98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ab8:	4413      	add	r3, r2
 8005aba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ac0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	011a      	lsls	r2, r3, #4
 8005aca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005acc:	4413      	add	r3, r2
 8005ace:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ad2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ad4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ae2:	801a      	strh	r2, [r3, #0]
 8005ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ae8:	2b3e      	cmp	r3, #62	@ 0x3e
 8005aea:	d921      	bls.n	8005b30 <USB_EPStartXfer+0x5f8>
 8005aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005af0:	095b      	lsrs	r3, r3, #5
 8005af2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005afa:	f003 031f 	and.w	r3, r3, #31
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d104      	bne.n	8005b0c <USB_EPStartXfer+0x5d4>
 8005b02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b06:	3b01      	subs	r3, #1
 8005b08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005b0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b0e:	881b      	ldrh	r3, [r3, #0]
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	029b      	lsls	r3, r3, #10
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b2c:	801a      	strh	r2, [r3, #0]
 8005b2e:	e056      	b.n	8005bde <USB_EPStartXfer+0x6a6>
 8005b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10a      	bne.n	8005b4e <USB_EPStartXfer+0x616>
 8005b38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b4a:	801a      	strh	r2, [r3, #0]
 8005b4c:	e047      	b.n	8005bde <USB_EPStartXfer+0x6a6>
 8005b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b52:	085b      	lsrs	r3, r3, #1
 8005b54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d004      	beq.n	8005b6e <USB_EPStartXfer+0x636>
 8005b64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b68:	3301      	adds	r3, #1
 8005b6a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005b6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	029b      	lsls	r3, r3, #10
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b84:	801a      	strh	r2, [r3, #0]
 8005b86:	e02a      	b.n	8005bde <USB_EPStartXfer+0x6a6>
 8005b88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	785b      	ldrb	r3, [r3, #1]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d122      	bne.n	8005bde <USB_EPStartXfer+0x6a6>
 8005b98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bb8:	4413      	add	r3, r2
 8005bba:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	011a      	lsls	r2, r3, #4
 8005bca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bcc:	4413      	add	r3, r2
 8005bce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bdc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	891b      	ldrh	r3, [r3, #8]
 8005bea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6959      	ldr	r1, [r3, #20]
 8005bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005c04:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005c08:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005c0c:	6800      	ldr	r0, [r0, #0]
 8005c0e:	f001 f982 	bl	8006f16 <USB_WritePMA>
            ep->xfer_buff += len;
 8005c12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695a      	ldr	r2, [r3, #20]
 8005c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c22:	441a      	add	r2, r3
 8005c24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005c30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6a1a      	ldr	r2, [r3, #32]
 8005c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d90f      	bls.n	8005c6c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005c4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6a1a      	ldr	r2, [r3, #32]
 8005c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c5c:	1ad2      	subs	r2, r2, r3
 8005c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	621a      	str	r2, [r3, #32]
 8005c6a:	e00e      	b.n	8005c8a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2200      	movs	r2, #0
 8005c88:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	785b      	ldrb	r3, [r3, #1]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d177      	bne.n	8005d96 <USB_EPStartXfer+0x85e>
 8005ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005caa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc6:	4413      	add	r3, r2
 8005cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	011a      	lsls	r2, r3, #4
 8005cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cda:	4413      	add	r3, r2
 8005cdc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005ce0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cf0:	801a      	strh	r2, [r3, #0]
 8005cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf6:	2b3e      	cmp	r3, #62	@ 0x3e
 8005cf8:	d921      	bls.n	8005d3e <USB_EPStartXfer+0x806>
 8005cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cfe:	095b      	lsrs	r3, r3, #5
 8005d00:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d08:	f003 031f 	and.w	r3, r3, #31
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d104      	bne.n	8005d1a <USB_EPStartXfer+0x7e2>
 8005d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d14:	3b01      	subs	r3, #1
 8005d16:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	029b      	lsls	r3, r3, #10
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d3a:	801a      	strh	r2, [r3, #0]
 8005d3c:	e050      	b.n	8005de0 <USB_EPStartXfer+0x8a8>
 8005d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10a      	bne.n	8005d5c <USB_EPStartXfer+0x824>
 8005d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d48:	881b      	ldrh	r3, [r3, #0]
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d58:	801a      	strh	r2, [r3, #0]
 8005d5a:	e041      	b.n	8005de0 <USB_EPStartXfer+0x8a8>
 8005d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d60:	085b      	lsrs	r3, r3, #1
 8005d62:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d004      	beq.n	8005d7c <USB_EPStartXfer+0x844>
 8005d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d76:	3301      	adds	r3, #1
 8005d78:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	029b      	lsls	r3, r3, #10
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d92:	801a      	strh	r2, [r3, #0]
 8005d94:	e024      	b.n	8005de0 <USB_EPStartXfer+0x8a8>
 8005d96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	785b      	ldrb	r3, [r3, #1]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d11c      	bne.n	8005de0 <USB_EPStartXfer+0x8a8>
 8005da6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005daa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	461a      	mov	r2, r3
 8005db8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dba:	4413      	add	r3, r2
 8005dbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005dbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	011a      	lsls	r2, r3, #4
 8005dcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dce:	4413      	add	r3, r2
 8005dd0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dde:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005de0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005de4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	895b      	ldrh	r3, [r3, #10]
 8005dec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005df0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6959      	ldr	r1, [r3, #20]
 8005dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005e06:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005e0a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005e0e:	6800      	ldr	r0, [r0, #0]
 8005e10:	f001 f881 	bl	8006f16 <USB_WritePMA>
 8005e14:	e227      	b.n	8006266 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005e16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005e26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005e48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e4c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	441a      	add	r2, r3
 8005e6a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005e6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005e82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ea2:	4413      	add	r3, r2
 8005ea4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	011a      	lsls	r2, r3, #4
 8005eb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ebc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ec6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005ec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ecc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	891b      	ldrh	r3, [r3, #8]
 8005ed4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005edc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6959      	ldr	r1, [r3, #20]
 8005ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005eee:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005ef2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005ef6:	6800      	ldr	r0, [r0, #0]
 8005ef8:	f001 f80d 	bl	8006f16 <USB_WritePMA>
 8005efc:	e1b3      	b.n	8006266 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005efe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6a1a      	ldr	r2, [r3, #32]
 8005f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f0e:	1ad2      	subs	r2, r2, r3
 8005f10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005f1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f000 80c6 	beq.w	80060d0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	785b      	ldrb	r3, [r3, #1]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d177      	bne.n	8006050 <USB_EPStartXfer+0xb18>
 8005f60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f80:	4413      	add	r3, r2
 8005f82:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	011a      	lsls	r2, r3, #4
 8005f92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f94:	4413      	add	r3, r2
 8005f96:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005f9a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005faa:	801a      	strh	r2, [r3, #0]
 8005fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb0:	2b3e      	cmp	r3, #62	@ 0x3e
 8005fb2:	d921      	bls.n	8005ff8 <USB_EPStartXfer+0xac0>
 8005fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb8:	095b      	lsrs	r3, r3, #5
 8005fba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc2:	f003 031f 	and.w	r3, r3, #31
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d104      	bne.n	8005fd4 <USB_EPStartXfer+0xa9c>
 8005fca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005fd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fd6:	881b      	ldrh	r3, [r3, #0]
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	029b      	lsls	r3, r3, #10
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ff4:	801a      	strh	r2, [r3, #0]
 8005ff6:	e050      	b.n	800609a <USB_EPStartXfer+0xb62>
 8005ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10a      	bne.n	8006016 <USB_EPStartXfer+0xade>
 8006000:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006002:	881b      	ldrh	r3, [r3, #0]
 8006004:	b29b      	uxth	r3, r3
 8006006:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800600a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800600e:	b29a      	uxth	r2, r3
 8006010:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006012:	801a      	strh	r2, [r3, #0]
 8006014:	e041      	b.n	800609a <USB_EPStartXfer+0xb62>
 8006016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800601a:	085b      	lsrs	r3, r3, #1
 800601c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b00      	cmp	r3, #0
 800602a:	d004      	beq.n	8006036 <USB_EPStartXfer+0xafe>
 800602c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006030:	3301      	adds	r3, #1
 8006032:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006036:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	b29a      	uxth	r2, r3
 800603c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006040:	b29b      	uxth	r3, r3
 8006042:	029b      	lsls	r3, r3, #10
 8006044:	b29b      	uxth	r3, r3
 8006046:	4313      	orrs	r3, r2
 8006048:	b29a      	uxth	r2, r3
 800604a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800604c:	801a      	strh	r2, [r3, #0]
 800604e:	e024      	b.n	800609a <USB_EPStartXfer+0xb62>
 8006050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006054:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	785b      	ldrb	r3, [r3, #1]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d11c      	bne.n	800609a <USB_EPStartXfer+0xb62>
 8006060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006064:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800606e:	b29b      	uxth	r3, r3
 8006070:	461a      	mov	r2, r3
 8006072:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006074:	4413      	add	r3, r2
 8006076:	673b      	str	r3, [r7, #112]	@ 0x70
 8006078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800607c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	011a      	lsls	r2, r3, #4
 8006086:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006088:	4413      	add	r3, r2
 800608a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800608e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006094:	b29a      	uxth	r2, r3
 8006096:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006098:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800609a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800609e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	895b      	ldrh	r3, [r3, #10]
 80060a6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6959      	ldr	r1, [r3, #20]
 80060b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80060c0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80060c4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80060c8:	6800      	ldr	r0, [r0, #0]
 80060ca:	f000 ff24 	bl	8006f16 <USB_WritePMA>
 80060ce:	e0ca      	b.n	8006266 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	785b      	ldrb	r3, [r3, #1]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d177      	bne.n	80061d0 <USB_EPStartXfer+0xc98>
 80060e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80060ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	461a      	mov	r2, r3
 80060fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006100:	4413      	add	r3, r2
 8006102:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	011a      	lsls	r2, r3, #4
 8006112:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006114:	4413      	add	r3, r2
 8006116:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800611a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800611c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800611e:	881b      	ldrh	r3, [r3, #0]
 8006120:	b29b      	uxth	r3, r3
 8006122:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006126:	b29a      	uxth	r2, r3
 8006128:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800612a:	801a      	strh	r2, [r3, #0]
 800612c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006130:	2b3e      	cmp	r3, #62	@ 0x3e
 8006132:	d921      	bls.n	8006178 <USB_EPStartXfer+0xc40>
 8006134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006138:	095b      	lsrs	r3, r3, #5
 800613a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800613e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006142:	f003 031f 	and.w	r3, r3, #31
 8006146:	2b00      	cmp	r3, #0
 8006148:	d104      	bne.n	8006154 <USB_EPStartXfer+0xc1c>
 800614a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800614e:	3b01      	subs	r3, #1
 8006150:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006154:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	b29a      	uxth	r2, r3
 800615a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800615e:	b29b      	uxth	r3, r3
 8006160:	029b      	lsls	r3, r3, #10
 8006162:	b29b      	uxth	r3, r3
 8006164:	4313      	orrs	r3, r2
 8006166:	b29b      	uxth	r3, r3
 8006168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800616c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006170:	b29a      	uxth	r2, r3
 8006172:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006174:	801a      	strh	r2, [r3, #0]
 8006176:	e05c      	b.n	8006232 <USB_EPStartXfer+0xcfa>
 8006178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10a      	bne.n	8006196 <USB_EPStartXfer+0xc5e>
 8006180:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	b29b      	uxth	r3, r3
 8006186:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800618a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800618e:	b29a      	uxth	r2, r3
 8006190:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006192:	801a      	strh	r2, [r3, #0]
 8006194:	e04d      	b.n	8006232 <USB_EPStartXfer+0xcfa>
 8006196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800619a:	085b      	lsrs	r3, r3, #1
 800619c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80061a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d004      	beq.n	80061b6 <USB_EPStartXfer+0xc7e>
 80061ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80061b0:	3301      	adds	r3, #1
 80061b2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80061b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061b8:	881b      	ldrh	r3, [r3, #0]
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	029b      	lsls	r3, r3, #10
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	4313      	orrs	r3, r2
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061cc:	801a      	strh	r2, [r3, #0]
 80061ce:	e030      	b.n	8006232 <USB_EPStartXfer+0xcfa>
 80061d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	785b      	ldrb	r3, [r3, #1]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d128      	bne.n	8006232 <USB_EPStartXfer+0xcfa>
 80061e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80061ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	461a      	mov	r2, r3
 8006200:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006204:	4413      	add	r3, r2
 8006206:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800620a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800620e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	011a      	lsls	r2, r3, #4
 8006218:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800621c:	4413      	add	r3, r2
 800621e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006222:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800622a:	b29a      	uxth	r2, r3
 800622c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006230:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006236:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	891b      	ldrh	r3, [r3, #8]
 800623e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006246:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6959      	ldr	r1, [r3, #20]
 800624e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006252:	b29b      	uxth	r3, r3
 8006254:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006258:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800625c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006260:	6800      	ldr	r0, [r0, #0]
 8006262:	f000 fe58 	bl	8006f16 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006274:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	b29b      	uxth	r3, r3
 8006284:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006288:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800628c:	817b      	strh	r3, [r7, #10]
 800628e:	897b      	ldrh	r3, [r7, #10]
 8006290:	f083 0310 	eor.w	r3, r3, #16
 8006294:	817b      	strh	r3, [r7, #10]
 8006296:	897b      	ldrh	r3, [r7, #10]
 8006298:	f083 0320 	eor.w	r3, r3, #32
 800629c:	817b      	strh	r3, [r7, #10]
 800629e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	441a      	add	r2, r3
 80062b8:	897b      	ldrh	r3, [r7, #10]
 80062ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	8013      	strh	r3, [r2, #0]
 80062ce:	f000 bcde 	b.w	8006c8e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80062d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	7b1b      	ldrb	r3, [r3, #12]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f040 80bb 	bne.w	800645a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80062e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	699a      	ldr	r2, [r3, #24]
 80062f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d917      	bls.n	8006330 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006314:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	699a      	ldr	r2, [r3, #24]
 800631c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006320:	1ad2      	subs	r2, r2, r3
 8006322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006326:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	619a      	str	r2, [r3, #24]
 800632e:	e00e      	b.n	800634e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006344:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2200      	movs	r2, #0
 800634c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800634e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006352:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800635c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006360:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800636a:	b29b      	uxth	r3, r3
 800636c:	461a      	mov	r2, r3
 800636e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006372:	4413      	add	r3, r2
 8006374:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800637c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	011a      	lsls	r2, r3, #4
 8006386:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800638a:	4413      	add	r3, r2
 800638c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006390:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006394:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	b29b      	uxth	r3, r3
 800639c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063a6:	801a      	strh	r2, [r3, #0]
 80063a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80063ae:	d924      	bls.n	80063fa <USB_EPStartXfer+0xec2>
 80063b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063b4:	095b      	lsrs	r3, r3, #5
 80063b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80063ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063be:	f003 031f 	and.w	r3, r3, #31
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d104      	bne.n	80063d0 <USB_EPStartXfer+0xe98>
 80063c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80063ca:	3b01      	subs	r3, #1
 80063cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80063d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063d4:	881b      	ldrh	r3, [r3, #0]
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80063dc:	b29b      	uxth	r3, r3
 80063de:	029b      	lsls	r3, r3, #10
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	4313      	orrs	r3, r2
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063f4:	801a      	strh	r2, [r3, #0]
 80063f6:	f000 bc10 	b.w	8006c1a <USB_EPStartXfer+0x16e2>
 80063fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10c      	bne.n	800641c <USB_EPStartXfer+0xee4>
 8006402:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006406:	881b      	ldrh	r3, [r3, #0]
 8006408:	b29b      	uxth	r3, r3
 800640a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800640e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006412:	b29a      	uxth	r2, r3
 8006414:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006418:	801a      	strh	r2, [r3, #0]
 800641a:	e3fe      	b.n	8006c1a <USB_EPStartXfer+0x16e2>
 800641c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006420:	085b      	lsrs	r3, r3, #1
 8006422:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	2b00      	cmp	r3, #0
 8006430:	d004      	beq.n	800643c <USB_EPStartXfer+0xf04>
 8006432:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006436:	3301      	adds	r3, #1
 8006438:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800643c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006440:	881b      	ldrh	r3, [r3, #0]
 8006442:	b29a      	uxth	r2, r3
 8006444:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006448:	b29b      	uxth	r3, r3
 800644a:	029b      	lsls	r3, r3, #10
 800644c:	b29b      	uxth	r3, r3
 800644e:	4313      	orrs	r3, r2
 8006450:	b29a      	uxth	r2, r3
 8006452:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006456:	801a      	strh	r2, [r3, #0]
 8006458:	e3df      	b.n	8006c1a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800645a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800645e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	78db      	ldrb	r3, [r3, #3]
 8006466:	2b02      	cmp	r3, #2
 8006468:	f040 8218 	bne.w	800689c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800646c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	785b      	ldrb	r3, [r3, #1]
 8006478:	2b00      	cmp	r3, #0
 800647a:	f040 809d 	bne.w	80065b8 <USB_EPStartXfer+0x1080>
 800647e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006482:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800648c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006490:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800649a:	b29b      	uxth	r3, r3
 800649c:	461a      	mov	r2, r3
 800649e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064a2:	4413      	add	r3, r2
 80064a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80064a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	011a      	lsls	r2, r3, #4
 80064b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064ba:	4413      	add	r3, r2
 80064bc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80064c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80064c8:	881b      	ldrh	r3, [r3, #0]
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80064d6:	801a      	strh	r2, [r3, #0]
 80064d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80064e6:	d92b      	bls.n	8006540 <USB_EPStartXfer+0x1008>
 80064e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	095b      	lsrs	r3, r3, #5
 80064f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80064fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	f003 031f 	and.w	r3, r3, #31
 800650a:	2b00      	cmp	r3, #0
 800650c:	d104      	bne.n	8006518 <USB_EPStartXfer+0xfe0>
 800650e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006512:	3b01      	subs	r3, #1
 8006514:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006518:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800651c:	881b      	ldrh	r3, [r3, #0]
 800651e:	b29a      	uxth	r2, r3
 8006520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006524:	b29b      	uxth	r3, r3
 8006526:	029b      	lsls	r3, r3, #10
 8006528:	b29b      	uxth	r3, r3
 800652a:	4313      	orrs	r3, r2
 800652c:	b29b      	uxth	r3, r3
 800652e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006536:	b29a      	uxth	r2, r3
 8006538:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800653c:	801a      	strh	r2, [r3, #0]
 800653e:	e070      	b.n	8006622 <USB_EPStartXfer+0x10ea>
 8006540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006544:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10c      	bne.n	800656a <USB_EPStartXfer+0x1032>
 8006550:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006554:	881b      	ldrh	r3, [r3, #0]
 8006556:	b29b      	uxth	r3, r3
 8006558:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800655c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006560:	b29a      	uxth	r2, r3
 8006562:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006566:	801a      	strh	r2, [r3, #0]
 8006568:	e05b      	b.n	8006622 <USB_EPStartXfer+0x10ea>
 800656a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800656e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	085b      	lsrs	r3, r3, #1
 8006578:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800657c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006580:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	2b00      	cmp	r3, #0
 800658e:	d004      	beq.n	800659a <USB_EPStartXfer+0x1062>
 8006590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006594:	3301      	adds	r3, #1
 8006596:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800659a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800659e:	881b      	ldrh	r3, [r3, #0]
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	029b      	lsls	r3, r3, #10
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	4313      	orrs	r3, r2
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80065b4:	801a      	strh	r2, [r3, #0]
 80065b6:	e034      	b.n	8006622 <USB_EPStartXfer+0x10ea>
 80065b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	785b      	ldrb	r3, [r3, #1]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d12c      	bne.n	8006622 <USB_EPStartXfer+0x10ea>
 80065c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	461a      	mov	r2, r3
 80065e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80065ec:	4413      	add	r3, r2
 80065ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	011a      	lsls	r2, r3, #4
 8006600:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006604:	4413      	add	r3, r2
 8006606:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800660a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800660e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006612:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	b29a      	uxth	r2, r3
 800661c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006620:	801a      	strh	r2, [r3, #0]
 8006622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006626:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006634:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	785b      	ldrb	r3, [r3, #1]
 800663c:	2b00      	cmp	r3, #0
 800663e:	f040 809d 	bne.w	800677c <USB_EPStartXfer+0x1244>
 8006642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006646:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006654:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800665e:	b29b      	uxth	r3, r3
 8006660:	461a      	mov	r2, r3
 8006662:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006666:	4413      	add	r3, r2
 8006668:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800666c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006670:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	011a      	lsls	r2, r3, #4
 800667a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800667e:	4413      	add	r3, r2
 8006680:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006684:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006688:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800668c:	881b      	ldrh	r3, [r3, #0]
 800668e:	b29b      	uxth	r3, r3
 8006690:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006694:	b29a      	uxth	r2, r3
 8006696:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800669a:	801a      	strh	r2, [r3, #0]
 800669c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80066aa:	d92b      	bls.n	8006704 <USB_EPStartXfer+0x11cc>
 80066ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	095b      	lsrs	r3, r3, #5
 80066ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80066be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f003 031f 	and.w	r3, r3, #31
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d104      	bne.n	80066dc <USB_EPStartXfer+0x11a4>
 80066d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066d6:	3b01      	subs	r3, #1
 80066d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80066dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80066e0:	881b      	ldrh	r3, [r3, #0]
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	029b      	lsls	r3, r3, #10
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	4313      	orrs	r3, r2
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006700:	801a      	strh	r2, [r3, #0]
 8006702:	e069      	b.n	80067d8 <USB_EPStartXfer+0x12a0>
 8006704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006708:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10c      	bne.n	800672e <USB_EPStartXfer+0x11f6>
 8006714:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006718:	881b      	ldrh	r3, [r3, #0]
 800671a:	b29b      	uxth	r3, r3
 800671c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006720:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006724:	b29a      	uxth	r2, r3
 8006726:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800672a:	801a      	strh	r2, [r3, #0]
 800672c:	e054      	b.n	80067d8 <USB_EPStartXfer+0x12a0>
 800672e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006732:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	085b      	lsrs	r3, r3, #1
 800673c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006744:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b00      	cmp	r3, #0
 8006752:	d004      	beq.n	800675e <USB_EPStartXfer+0x1226>
 8006754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006758:	3301      	adds	r3, #1
 800675a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800675e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006762:	881b      	ldrh	r3, [r3, #0]
 8006764:	b29a      	uxth	r2, r3
 8006766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800676a:	b29b      	uxth	r3, r3
 800676c:	029b      	lsls	r3, r3, #10
 800676e:	b29b      	uxth	r3, r3
 8006770:	4313      	orrs	r3, r2
 8006772:	b29a      	uxth	r2, r3
 8006774:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006778:	801a      	strh	r2, [r3, #0]
 800677a:	e02d      	b.n	80067d8 <USB_EPStartXfer+0x12a0>
 800677c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006780:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	785b      	ldrb	r3, [r3, #1]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d125      	bne.n	80067d8 <USB_EPStartXfer+0x12a0>
 800678c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006790:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800679a:	b29b      	uxth	r3, r3
 800679c:	461a      	mov	r2, r3
 800679e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80067a2:	4413      	add	r3, r2
 80067a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80067a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	011a      	lsls	r2, r3, #4
 80067b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80067ba:	4413      	add	r3, r2
 80067bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80067c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80067c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80067d6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80067d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69db      	ldr	r3, [r3, #28]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 8218 	beq.w	8006c1a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80067ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4413      	add	r3, r2
 8006804:	881b      	ldrh	r3, [r3, #0]
 8006806:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800680a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800680e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d005      	beq.n	8006822 <USB_EPStartXfer+0x12ea>
 8006816:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800681a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10d      	bne.n	800683e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006822:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800682a:	2b00      	cmp	r3, #0
 800682c:	f040 81f5 	bne.w	8006c1a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006830:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006838:	2b00      	cmp	r3, #0
 800683a:	f040 81ee 	bne.w	8006c1a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800683e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006842:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800684c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4413      	add	r3, r2
 8006858:	881b      	ldrh	r3, [r3, #0]
 800685a:	b29b      	uxth	r3, r3
 800685c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006860:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006864:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800686c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	441a      	add	r2, r3
 8006882:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006886:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800688a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800688e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006892:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006896:	b29b      	uxth	r3, r3
 8006898:	8013      	strh	r3, [r2, #0]
 800689a:	e1be      	b.n	8006c1a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800689c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	78db      	ldrb	r3, [r3, #3]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	f040 81b4 	bne.w	8006c16 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80068ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	699a      	ldr	r2, [r3, #24]
 80068ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d917      	bls.n	80068fa <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80068ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80068da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	699a      	ldr	r2, [r3, #24]
 80068e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ea:	1ad2      	subs	r2, r2, r3
 80068ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	619a      	str	r2, [r3, #24]
 80068f8:	e00e      	b.n	8006918 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80068fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800690a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800690e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2200      	movs	r2, #0
 8006916:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006918:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800691c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	785b      	ldrb	r3, [r3, #1]
 8006924:	2b00      	cmp	r3, #0
 8006926:	f040 8085 	bne.w	8006a34 <USB_EPStartXfer+0x14fc>
 800692a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800692e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800693c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006946:	b29b      	uxth	r3, r3
 8006948:	461a      	mov	r2, r3
 800694a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800694e:	4413      	add	r3, r2
 8006950:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	011a      	lsls	r2, r3, #4
 8006962:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006966:	4413      	add	r3, r2
 8006968:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800696c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006970:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	b29b      	uxth	r3, r3
 8006978:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800697c:	b29a      	uxth	r2, r3
 800697e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006982:	801a      	strh	r2, [r3, #0]
 8006984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006988:	2b3e      	cmp	r3, #62	@ 0x3e
 800698a:	d923      	bls.n	80069d4 <USB_EPStartXfer+0x149c>
 800698c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006990:	095b      	lsrs	r3, r3, #5
 8006992:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800699a:	f003 031f 	and.w	r3, r3, #31
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d104      	bne.n	80069ac <USB_EPStartXfer+0x1474>
 80069a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069a6:	3b01      	subs	r3, #1
 80069a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80069ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	029b      	lsls	r3, r3, #10
 80069bc:	b29b      	uxth	r3, r3
 80069be:	4313      	orrs	r3, r2
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80069d0:	801a      	strh	r2, [r3, #0]
 80069d2:	e060      	b.n	8006a96 <USB_EPStartXfer+0x155e>
 80069d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10c      	bne.n	80069f6 <USB_EPStartXfer+0x14be>
 80069dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80069e0:	881b      	ldrh	r3, [r3, #0]
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80069f2:	801a      	strh	r2, [r3, #0]
 80069f4:	e04f      	b.n	8006a96 <USB_EPStartXfer+0x155e>
 80069f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069fa:	085b      	lsrs	r3, r3, #1
 80069fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d004      	beq.n	8006a16 <USB_EPStartXfer+0x14de>
 8006a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a10:	3301      	adds	r3, #1
 8006a12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006a16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	029b      	lsls	r3, r3, #10
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006a30:	801a      	strh	r2, [r3, #0]
 8006a32:	e030      	b.n	8006a96 <USB_EPStartXfer+0x155e>
 8006a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	785b      	ldrb	r3, [r3, #1]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d128      	bne.n	8006a96 <USB_EPStartXfer+0x155e>
 8006a44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	461a      	mov	r2, r3
 8006a64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a68:	4413      	add	r3, r2
 8006a6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	011a      	lsls	r2, r3, #4
 8006a7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a80:	4413      	add	r3, r2
 8006a82:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a86:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006a94:	801a      	strh	r2, [r3, #0]
 8006a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	785b      	ldrb	r3, [r3, #1]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f040 8085 	bne.w	8006bc0 <USB_EPStartXfer+0x1688>
 8006ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006ada:	4413      	add	r3, r2
 8006adc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	011a      	lsls	r2, r3, #4
 8006aee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006af2:	4413      	add	r3, r2
 8006af4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006af8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006afc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b0e:	801a      	strh	r2, [r3, #0]
 8006b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b14:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b16:	d923      	bls.n	8006b60 <USB_EPStartXfer+0x1628>
 8006b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b1c:	095b      	lsrs	r3, r3, #5
 8006b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b26:	f003 031f 	and.w	r3, r3, #31
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d104      	bne.n	8006b38 <USB_EPStartXfer+0x1600>
 8006b2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b32:	3b01      	subs	r3, #1
 8006b34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006b38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	029b      	lsls	r3, r3, #10
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b5c:	801a      	strh	r2, [r3, #0]
 8006b5e:	e05c      	b.n	8006c1a <USB_EPStartXfer+0x16e2>
 8006b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d10c      	bne.n	8006b82 <USB_EPStartXfer+0x164a>
 8006b68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b6c:	881b      	ldrh	r3, [r3, #0]
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b7e:	801a      	strh	r2, [r3, #0]
 8006b80:	e04b      	b.n	8006c1a <USB_EPStartXfer+0x16e2>
 8006b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b86:	085b      	lsrs	r3, r3, #1
 8006b88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d004      	beq.n	8006ba2 <USB_EPStartXfer+0x166a>
 8006b98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ba2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ba6:	881b      	ldrh	r3, [r3, #0]
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	029b      	lsls	r3, r3, #10
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006bbc:	801a      	strh	r2, [r3, #0]
 8006bbe:	e02c      	b.n	8006c1a <USB_EPStartXfer+0x16e2>
 8006bc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	785b      	ldrb	r3, [r3, #1]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d124      	bne.n	8006c1a <USB_EPStartXfer+0x16e2>
 8006bd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	461a      	mov	r2, r3
 8006be2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006be6:	4413      	add	r3, r2
 8006be8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006bec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	011a      	lsls	r2, r3, #4
 8006bfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006bfe:	4413      	add	r3, r2
 8006c00:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006c04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006c12:	801a      	strh	r2, [r3, #0]
 8006c14:	e001      	b.n	8006c1a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e03a      	b.n	8006c90 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	881b      	ldrh	r3, [r3, #0]
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c40:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006c44:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006c48:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006c4c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006c50:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006c54:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006c58:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	441a      	add	r2, r3
 8006c76:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006c7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b085      	sub	sp, #20
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	785b      	ldrb	r3, [r3, #1]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d020      	beq.n	8006cee <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	881b      	ldrh	r3, [r3, #0]
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cc2:	81bb      	strh	r3, [r7, #12]
 8006cc4:	89bb      	ldrh	r3, [r7, #12]
 8006cc6:	f083 0310 	eor.w	r3, r3, #16
 8006cca:	81bb      	strh	r3, [r7, #12]
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	441a      	add	r2, r3
 8006cd6:	89bb      	ldrh	r3, [r7, #12]
 8006cd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ce0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ce4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	8013      	strh	r3, [r2, #0]
 8006cec:	e01f      	b.n	8006d2e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	881b      	ldrh	r3, [r3, #0]
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d04:	81fb      	strh	r3, [r7, #14]
 8006d06:	89fb      	ldrh	r3, [r7, #14]
 8006d08:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006d0c:	81fb      	strh	r3, [r7, #14]
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	441a      	add	r2, r3
 8006d18:	89fb      	ldrh	r3, [r7, #14]
 8006d1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bc80      	pop	{r7}
 8006d38:	4770      	bx	lr

08006d3a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b087      	sub	sp, #28
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	7b1b      	ldrb	r3, [r3, #12]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f040 809d 	bne.w	8006e88 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	785b      	ldrb	r3, [r3, #1]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d04c      	beq.n	8006df0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	823b      	strh	r3, [r7, #16]
 8006d64:	8a3b      	ldrh	r3, [r7, #16]
 8006d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d01b      	beq.n	8006da6 <USB_EPClearStall+0x6c>
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d84:	81fb      	strh	r3, [r7, #14]
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	441a      	add	r2, r3
 8006d90:	89fb      	ldrh	r3, [r7, #14]
 8006d92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d9e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	78db      	ldrb	r3, [r3, #3]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d06c      	beq.n	8006e88 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4413      	add	r3, r2
 8006db8:	881b      	ldrh	r3, [r3, #0]
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dc4:	81bb      	strh	r3, [r7, #12]
 8006dc6:	89bb      	ldrh	r3, [r7, #12]
 8006dc8:	f083 0320 	eor.w	r3, r3, #32
 8006dcc:	81bb      	strh	r3, [r7, #12]
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	441a      	add	r2, r3
 8006dd8:	89bb      	ldrh	r3, [r7, #12]
 8006dda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006de2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006de6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	8013      	strh	r3, [r2, #0]
 8006dee:	e04b      	b.n	8006e88 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4413      	add	r3, r2
 8006dfa:	881b      	ldrh	r3, [r3, #0]
 8006dfc:	82fb      	strh	r3, [r7, #22]
 8006dfe:	8afb      	ldrh	r3, [r7, #22]
 8006e00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d01b      	beq.n	8006e40 <USB_EPClearStall+0x106>
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4413      	add	r3, r2
 8006e12:	881b      	ldrh	r3, [r3, #0]
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e1e:	82bb      	strh	r3, [r7, #20]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	441a      	add	r2, r3
 8006e2a:	8abb      	ldrh	r3, [r7, #20]
 8006e2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	881b      	ldrh	r3, [r3, #0]
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e56:	827b      	strh	r3, [r7, #18]
 8006e58:	8a7b      	ldrh	r3, [r7, #18]
 8006e5a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006e5e:	827b      	strh	r3, [r7, #18]
 8006e60:	8a7b      	ldrh	r3, [r7, #18]
 8006e62:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006e66:	827b      	strh	r3, [r7, #18]
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	441a      	add	r2, r3
 8006e72:	8a7b      	ldrh	r3, [r7, #18]
 8006e74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	371c      	adds	r7, #28
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bc80      	pop	{r7}
 8006e92:	4770      	bx	lr

08006e94 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006ea0:	78fb      	ldrb	r3, [r7, #3]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d103      	bne.n	8006eae <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2280      	movs	r2, #128	@ 0x80
 8006eaa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bc80      	pop	{r7}
 8006eb8:	4770      	bx	lr

08006eba <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b083      	sub	sp, #12
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bc80      	pop	{r7}
 8006ecc:	4770      	bx	lr

08006ece <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006ece:	b480      	push	{r7}
 8006ed0:	b083      	sub	sp, #12
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bc80      	pop	{r7}
 8006ee0:	4770      	bx	lr

08006ee2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b085      	sub	sp, #20
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bc80      	pop	{r7}
 8006efe:	4770      	bx	lr

08006f00 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bc80      	pop	{r7}
 8006f14:	4770      	bx	lr

08006f16 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b08b      	sub	sp, #44	@ 0x2c
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	60f8      	str	r0, [r7, #12]
 8006f1e:	60b9      	str	r1, [r7, #8]
 8006f20:	4611      	mov	r1, r2
 8006f22:	461a      	mov	r2, r3
 8006f24:	460b      	mov	r3, r1
 8006f26:	80fb      	strh	r3, [r7, #6]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006f2c:	88bb      	ldrh	r3, [r7, #4]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	085b      	lsrs	r3, r3, #1
 8006f32:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f3c:	88fb      	ldrh	r3, [r7, #6]
 8006f3e:	005a      	lsls	r2, r3, #1
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f48:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f4e:	e01e      	b.n	8006f8e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	021b      	lsls	r3, r3, #8
 8006f5e:	b21a      	sxth	r2, r3
 8006f60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	b21b      	sxth	r3, r3
 8006f68:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006f6a:	6a3b      	ldr	r3, [r7, #32]
 8006f6c:	8a7a      	ldrh	r2, [r7, #18]
 8006f6e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	3302      	adds	r3, #2
 8006f74:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	3302      	adds	r3, #2
 8006f7a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	3301      	adds	r3, #1
 8006f86:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1dd      	bne.n	8006f50 <USB_WritePMA+0x3a>
  }
}
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop
 8006f98:	372c      	adds	r7, #44	@ 0x2c
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bc80      	pop	{r7}
 8006f9e:	4770      	bx	lr

08006fa0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b08b      	sub	sp, #44	@ 0x2c
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	4611      	mov	r1, r2
 8006fac:	461a      	mov	r2, r3
 8006fae:	460b      	mov	r3, r1
 8006fb0:	80fb      	strh	r3, [r7, #6]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006fb6:	88bb      	ldrh	r3, [r7, #4]
 8006fb8:	085b      	lsrs	r3, r3, #1
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006fc6:	88fb      	ldrh	r3, [r7, #6]
 8006fc8:	005a      	lsls	r2, r3, #1
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	4413      	add	r3, r2
 8006fce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006fd2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fd8:	e01b      	b.n	8007012 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006fe2:	6a3b      	ldr	r3, [r7, #32]
 8006fe4:	3302      	adds	r3, #2
 8006fe6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	b2da      	uxtb	r2, r3
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	0a1b      	lsrs	r3, r3, #8
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	3301      	adds	r3, #1
 8007004:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	3302      	adds	r3, #2
 800700a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800700c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700e:	3b01      	subs	r3, #1
 8007010:	627b      	str	r3, [r7, #36]	@ 0x24
 8007012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1e0      	bne.n	8006fda <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007018:	88bb      	ldrh	r3, [r7, #4]
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	b29b      	uxth	r3, r3
 8007020:	2b00      	cmp	r3, #0
 8007022:	d007      	beq.n	8007034 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007024:	6a3b      	ldr	r3, [r7, #32]
 8007026:	881b      	ldrh	r3, [r3, #0]
 8007028:	b29b      	uxth	r3, r3
 800702a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	b2da      	uxtb	r2, r3
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	701a      	strb	r2, [r3, #0]
  }
}
 8007034:	bf00      	nop
 8007036:	372c      	adds	r7, #44	@ 0x2c
 8007038:	46bd      	mov	sp, r7
 800703a:	bc80      	pop	{r7}
 800703c:	4770      	bx	lr

0800703e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b084      	sub	sp, #16
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	460b      	mov	r3, r1
 8007048:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	7c1b      	ldrb	r3, [r3, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d115      	bne.n	8007082 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007056:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800705a:	2202      	movs	r2, #2
 800705c:	2181      	movs	r1, #129	@ 0x81
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f001 ff83 	bl	8008f6a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800706a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800706e:	2202      	movs	r2, #2
 8007070:	2101      	movs	r1, #1
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f001 ff79 	bl	8008f6a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007080:	e012      	b.n	80070a8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007082:	2340      	movs	r3, #64	@ 0x40
 8007084:	2202      	movs	r2, #2
 8007086:	2181      	movs	r1, #129	@ 0x81
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f001 ff6e 	bl	8008f6a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007094:	2340      	movs	r3, #64	@ 0x40
 8007096:	2202      	movs	r2, #2
 8007098:	2101      	movs	r1, #1
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f001 ff65 	bl	8008f6a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80070a8:	2308      	movs	r3, #8
 80070aa:	2203      	movs	r2, #3
 80070ac:	2182      	movs	r1, #130	@ 0x82
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f001 ff5b 	bl	8008f6a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80070ba:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80070be:	f002 f87b 	bl	80091b8 <USBD_static_malloc>
 80070c2:	4602      	mov	r2, r0
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d102      	bne.n	80070da <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80070d4:	2301      	movs	r3, #1
 80070d6:	73fb      	strb	r3, [r7, #15]
 80070d8:	e026      	b.n	8007128 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070e0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	7c1b      	ldrb	r3, [r3, #16]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d109      	bne.n	8007118 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800710a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800710e:	2101      	movs	r1, #1
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f002 f81a 	bl	800914a <USBD_LL_PrepareReceive>
 8007116:	e007      	b.n	8007128 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800711e:	2340      	movs	r3, #64	@ 0x40
 8007120:	2101      	movs	r1, #1
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f002 f811 	bl	800914a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007128:	7bfb      	ldrb	r3, [r7, #15]
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b084      	sub	sp, #16
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
 800713a:	460b      	mov	r3, r1
 800713c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800713e:	2300      	movs	r3, #0
 8007140:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007142:	2181      	movs	r1, #129	@ 0x81
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f001 ff36 	bl	8008fb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007150:	2101      	movs	r1, #1
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f001 ff2f 	bl	8008fb6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007160:	2182      	movs	r1, #130	@ 0x82
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f001 ff27 	bl	8008fb6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00e      	beq.n	8007196 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007188:	4618      	mov	r0, r3
 800718a:	f002 f821 	bl	80091d0 <USBD_static_free>
    pdev->pClassData = NULL;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007196:	7bfb      	ldrb	r3, [r7, #15]
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071b0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80071b6:	2300      	movs	r3, #0
 80071b8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80071ba:	2300      	movs	r3, #0
 80071bc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d039      	beq.n	800723e <USBD_CDC_Setup+0x9e>
 80071ca:	2b20      	cmp	r3, #32
 80071cc:	d17f      	bne.n	80072ce <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	88db      	ldrh	r3, [r3, #6]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d029      	beq.n	800722a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	b25b      	sxtb	r3, r3
 80071dc:	2b00      	cmp	r3, #0
 80071de:	da11      	bge.n	8007204 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	683a      	ldr	r2, [r7, #0]
 80071ea:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80071ec:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80071ee:	683a      	ldr	r2, [r7, #0]
 80071f0:	88d2      	ldrh	r2, [r2, #6]
 80071f2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80071f4:	6939      	ldr	r1, [r7, #16]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	88db      	ldrh	r3, [r3, #6]
 80071fa:	461a      	mov	r2, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f001 fa05 	bl	800860c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007202:	e06b      	b.n	80072dc <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	785a      	ldrb	r2, [r3, #1]
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	88db      	ldrh	r3, [r3, #6]
 8007212:	b2da      	uxtb	r2, r3
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800721a:	6939      	ldr	r1, [r7, #16]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	88db      	ldrh	r3, [r3, #6]
 8007220:	461a      	mov	r2, r3
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f001 fa20 	bl	8008668 <USBD_CtlPrepareRx>
      break;
 8007228:	e058      	b.n	80072dc <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	7850      	ldrb	r0, [r2, #1]
 8007236:	2200      	movs	r2, #0
 8007238:	6839      	ldr	r1, [r7, #0]
 800723a:	4798      	blx	r3
      break;
 800723c:	e04e      	b.n	80072dc <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	785b      	ldrb	r3, [r3, #1]
 8007242:	2b0b      	cmp	r3, #11
 8007244:	d02e      	beq.n	80072a4 <USBD_CDC_Setup+0x104>
 8007246:	2b0b      	cmp	r3, #11
 8007248:	dc38      	bgt.n	80072bc <USBD_CDC_Setup+0x11c>
 800724a:	2b00      	cmp	r3, #0
 800724c:	d002      	beq.n	8007254 <USBD_CDC_Setup+0xb4>
 800724e:	2b0a      	cmp	r3, #10
 8007250:	d014      	beq.n	800727c <USBD_CDC_Setup+0xdc>
 8007252:	e033      	b.n	80072bc <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800725a:	2b03      	cmp	r3, #3
 800725c:	d107      	bne.n	800726e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800725e:	f107 030c 	add.w	r3, r7, #12
 8007262:	2202      	movs	r2, #2
 8007264:	4619      	mov	r1, r3
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f001 f9d0 	bl	800860c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800726c:	e02e      	b.n	80072cc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f001 f961 	bl	8008538 <USBD_CtlError>
            ret = USBD_FAIL;
 8007276:	2302      	movs	r3, #2
 8007278:	75fb      	strb	r3, [r7, #23]
          break;
 800727a:	e027      	b.n	80072cc <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007282:	2b03      	cmp	r3, #3
 8007284:	d107      	bne.n	8007296 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007286:	f107 030f 	add.w	r3, r7, #15
 800728a:	2201      	movs	r2, #1
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f001 f9bc 	bl	800860c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007294:	e01a      	b.n	80072cc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007296:	6839      	ldr	r1, [r7, #0]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f001 f94d 	bl	8008538 <USBD_CtlError>
            ret = USBD_FAIL;
 800729e:	2302      	movs	r3, #2
 80072a0:	75fb      	strb	r3, [r7, #23]
          break;
 80072a2:	e013      	b.n	80072cc <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d00d      	beq.n	80072ca <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80072ae:	6839      	ldr	r1, [r7, #0]
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f001 f941 	bl	8008538 <USBD_CtlError>
            ret = USBD_FAIL;
 80072b6:	2302      	movs	r3, #2
 80072b8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80072ba:	e006      	b.n	80072ca <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f001 f93a 	bl	8008538 <USBD_CtlError>
          ret = USBD_FAIL;
 80072c4:	2302      	movs	r3, #2
 80072c6:	75fb      	strb	r3, [r7, #23]
          break;
 80072c8:	e000      	b.n	80072cc <USBD_CDC_Setup+0x12c>
          break;
 80072ca:	bf00      	nop
      }
      break;
 80072cc:	e006      	b.n	80072dc <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80072ce:	6839      	ldr	r1, [r7, #0]
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f001 f931 	bl	8008538 <USBD_CtlError>
      ret = USBD_FAIL;
 80072d6:	2302      	movs	r3, #2
 80072d8:	75fb      	strb	r3, [r7, #23]
      break;
 80072da:	bf00      	nop
  }

  return ret;
 80072dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3718      	adds	r7, #24
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b084      	sub	sp, #16
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	460b      	mov	r3, r1
 80072f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072f8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007300:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007308:	2b00      	cmp	r3, #0
 800730a:	d03a      	beq.n	8007382 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800730c:	78fa      	ldrb	r2, [r7, #3]
 800730e:	6879      	ldr	r1, [r7, #4]
 8007310:	4613      	mov	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	440b      	add	r3, r1
 800731a:	331c      	adds	r3, #28
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d029      	beq.n	8007376 <USBD_CDC_DataIn+0x90>
 8007322:	78fa      	ldrb	r2, [r7, #3]
 8007324:	6879      	ldr	r1, [r7, #4]
 8007326:	4613      	mov	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	440b      	add	r3, r1
 8007330:	331c      	adds	r3, #28
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	78f9      	ldrb	r1, [r7, #3]
 8007336:	68b8      	ldr	r0, [r7, #8]
 8007338:	460b      	mov	r3, r1
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	440b      	add	r3, r1
 800733e:	00db      	lsls	r3, r3, #3
 8007340:	4403      	add	r3, r0
 8007342:	3320      	adds	r3, #32
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	fbb2 f1f3 	udiv	r1, r2, r3
 800734a:	fb01 f303 	mul.w	r3, r1, r3
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	2b00      	cmp	r3, #0
 8007352:	d110      	bne.n	8007376 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007354:	78fa      	ldrb	r2, [r7, #3]
 8007356:	6879      	ldr	r1, [r7, #4]
 8007358:	4613      	mov	r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	4413      	add	r3, r2
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	440b      	add	r3, r1
 8007362:	331c      	adds	r3, #28
 8007364:	2200      	movs	r2, #0
 8007366:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007368:	78f9      	ldrb	r1, [r7, #3]
 800736a:	2300      	movs	r3, #0
 800736c:	2200      	movs	r2, #0
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f001 fec8 	bl	8009104 <USBD_LL_Transmit>
 8007374:	e003      	b.n	800737e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	e000      	b.n	8007384 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007382:	2302      	movs	r3, #2
  }
}
 8007384:	4618      	mov	r0, r3
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	460b      	mov	r3, r1
 8007396:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800739e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80073a0:	78fb      	ldrb	r3, [r7, #3]
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f001 fef3 	bl	8009190 <USBD_LL_GetRxDataSize>
 80073aa:	4602      	mov	r2, r0
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00d      	beq.n	80073d8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80073d0:	4611      	mov	r1, r2
 80073d2:	4798      	blx	r3

    return USBD_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	e000      	b.n	80073da <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80073d8:	2302      	movs	r3, #2
  }
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b084      	sub	sp, #16
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073f0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d014      	beq.n	8007426 <USBD_CDC_EP0_RxReady+0x44>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007402:	2bff      	cmp	r3, #255	@ 0xff
 8007404:	d00f      	beq.n	8007426 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007414:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800741c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	22ff      	movs	r2, #255	@ 0xff
 8007422:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2243      	movs	r2, #67	@ 0x43
 800743c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800743e:	4b03      	ldr	r3, [pc, #12]	@ (800744c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007440:	4618      	mov	r0, r3
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	bc80      	pop	{r7}
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	2000009c 	.word	0x2000009c

08007450 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2243      	movs	r2, #67	@ 0x43
 800745c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800745e:	4b03      	ldr	r3, [pc, #12]	@ (800746c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007460:	4618      	mov	r0, r3
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	bc80      	pop	{r7}
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	20000058 	.word	0x20000058

08007470 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2243      	movs	r2, #67	@ 0x43
 800747c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800747e:	4b03      	ldr	r3, [pc, #12]	@ (800748c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007480:	4618      	mov	r0, r3
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	bc80      	pop	{r7}
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	200000e0 	.word	0x200000e0

08007490 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	220a      	movs	r2, #10
 800749c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800749e:	4b03      	ldr	r3, [pc, #12]	@ (80074ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bc80      	pop	{r7}
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	20000014 	.word	0x20000014

080074b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80074ba:	2302      	movs	r3, #2
 80074bc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d005      	beq.n	80074d0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	683a      	ldr	r2, [r7, #0]
 80074c8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80074cc:	2300      	movs	r3, #0
 80074ce:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bc80      	pop	{r7}
 80074da:	4770      	bx	lr

080074dc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80074dc:	b480      	push	{r7}
 80074de:	b087      	sub	sp, #28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	4613      	mov	r3, r2
 80074e8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074f0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80074fa:	88fa      	ldrh	r2, [r7, #6]
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	371c      	adds	r7, #28
 8007508:	46bd      	mov	sp, r7
 800750a:	bc80      	pop	{r7}
 800750c:	4770      	bx	lr

0800750e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800750e:	b480      	push	{r7}
 8007510:	b085      	sub	sp, #20
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
 8007516:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800751e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	bc80      	pop	{r7}
 8007532:	4770      	bx	lr

08007534 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007542:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800754a:	2b00      	cmp	r3, #0
 800754c:	d01c      	beq.n	8007588 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007554:	2b00      	cmp	r3, #0
 8007556:	d115      	bne.n	8007584 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2201      	movs	r2, #1
 800755c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007576:	b29b      	uxth	r3, r3
 8007578:	2181      	movs	r1, #129	@ 0x81
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f001 fdc2 	bl	8009104 <USBD_LL_Transmit>

      return USBD_OK;
 8007580:	2300      	movs	r3, #0
 8007582:	e002      	b.n	800758a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007584:	2301      	movs	r3, #1
 8007586:	e000      	b.n	800758a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007588:	2302      	movs	r3, #2
  }
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b084      	sub	sp, #16
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075a0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d017      	beq.n	80075dc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	7c1b      	ldrb	r3, [r3, #16]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d109      	bne.n	80075c8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80075ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80075be:	2101      	movs	r1, #1
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f001 fdc2 	bl	800914a <USBD_LL_PrepareReceive>
 80075c6:	e007      	b.n	80075d8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80075ce:	2340      	movs	r3, #64	@ 0x40
 80075d0:	2101      	movs	r1, #1
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f001 fdb9 	bl	800914a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80075d8:	2300      	movs	r3, #0
 80075da:	e000      	b.n	80075de <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80075dc:	2302      	movs	r3, #2
  }
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b084      	sub	sp, #16
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	60f8      	str	r0, [r7, #12]
 80075ee:	60b9      	str	r1, [r7, #8]
 80075f0:	4613      	mov	r3, r2
 80075f2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d101      	bne.n	80075fe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80075fa:	2302      	movs	r3, #2
 80075fc:	e01a      	b.n	8007634 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007604:	2b00      	cmp	r3, #0
 8007606:	d003      	beq.n	8007610 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d003      	beq.n	800761e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	79fa      	ldrb	r2, [r7, #7]
 800762a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f001 fc27 	bl	8008e80 <USBD_LL_Init>

  return USBD_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007646:	2300      	movs	r3, #0
 8007648:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d006      	beq.n	800765e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8007658:	2300      	movs	r3, #0
 800765a:	73fb      	strb	r3, [r7, #15]
 800765c:	e001      	b.n	8007662 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800765e:	2302      	movs	r3, #2
 8007660:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007662:	7bfb      	ldrb	r3, [r7, #15]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	bc80      	pop	{r7}
 800766c:	4770      	bx	lr

0800766e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b082      	sub	sp, #8
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f001 fc5c 	bl	8008f34 <USBD_LL_Start>

  return USBD_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007686:	b480      	push	{r7}
 8007688:	b083      	sub	sp, #12
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	bc80      	pop	{r7}
 8007698:	4770      	bx	lr

0800769a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	460b      	mov	r3, r1
 80076a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80076a6:	2302      	movs	r3, #2
 80076a8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00c      	beq.n	80076ce <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	78fa      	ldrb	r2, [r7, #3]
 80076be:	4611      	mov	r1, r2
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	4798      	blx	r3
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d101      	bne.n	80076ce <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80076ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	460b      	mov	r3, r1
 80076e2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	78fa      	ldrb	r2, [r7, #3]
 80076ee:	4611      	mov	r1, r2
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	4798      	blx	r3

  return USBD_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3708      	adds	r7, #8
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b082      	sub	sp, #8
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800770e:	6839      	ldr	r1, [r7, #0]
 8007710:	4618      	mov	r0, r3
 8007712:	f000 fed8 	bl	80084c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2201      	movs	r2, #1
 800771a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007724:	461a      	mov	r2, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007732:	f003 031f 	and.w	r3, r3, #31
 8007736:	2b02      	cmp	r3, #2
 8007738:	d016      	beq.n	8007768 <USBD_LL_SetupStage+0x6a>
 800773a:	2b02      	cmp	r3, #2
 800773c:	d81c      	bhi.n	8007778 <USBD_LL_SetupStage+0x7a>
 800773e:	2b00      	cmp	r3, #0
 8007740:	d002      	beq.n	8007748 <USBD_LL_SetupStage+0x4a>
 8007742:	2b01      	cmp	r3, #1
 8007744:	d008      	beq.n	8007758 <USBD_LL_SetupStage+0x5a>
 8007746:	e017      	b.n	8007778 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800774e:	4619      	mov	r1, r3
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f9cb 	bl	8007aec <USBD_StdDevReq>
      break;
 8007756:	e01a      	b.n	800778e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800775e:	4619      	mov	r1, r3
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fa2d 	bl	8007bc0 <USBD_StdItfReq>
      break;
 8007766:	e012      	b.n	800778e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fa6d 	bl	8007c50 <USBD_StdEPReq>
      break;
 8007776:	e00a      	b.n	800778e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800777e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007782:	b2db      	uxtb	r3, r3
 8007784:	4619      	mov	r1, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f001 fc34 	bl	8008ff4 <USBD_LL_StallEP>
      break;
 800778c:	bf00      	nop
  }

  return USBD_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	460b      	mov	r3, r1
 80077a2:	607a      	str	r2, [r7, #4]
 80077a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80077a6:	7afb      	ldrb	r3, [r7, #11]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d14b      	bne.n	8007844 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80077b2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80077ba:	2b03      	cmp	r3, #3
 80077bc:	d134      	bne.n	8007828 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d919      	bls.n	80077fe <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	68da      	ldr	r2, [r3, #12]
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	1ad2      	subs	r2, r2, r3
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	68da      	ldr	r2, [r3, #12]
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d203      	bcs.n	80077ec <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	e002      	b.n	80077f2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	461a      	mov	r2, r3
 80077f4:	6879      	ldr	r1, [r7, #4]
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f000 ff54 	bl	80086a4 <USBD_CtlContinueRx>
 80077fc:	e038      	b.n	8007870 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00a      	beq.n	8007820 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007810:	2b03      	cmp	r3, #3
 8007812:	d105      	bne.n	8007820 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f000 ff51 	bl	80086c8 <USBD_CtlSendStatus>
 8007826:	e023      	b.n	8007870 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800782e:	2b05      	cmp	r3, #5
 8007830:	d11e      	bne.n	8007870 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800783a:	2100      	movs	r1, #0
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f001 fbd9 	bl	8008ff4 <USBD_LL_StallEP>
 8007842:	e015      	b.n	8007870 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00d      	beq.n	800786c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007856:	2b03      	cmp	r3, #3
 8007858:	d108      	bne.n	800786c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	7afa      	ldrb	r2, [r7, #11]
 8007864:	4611      	mov	r1, r2
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	4798      	blx	r3
 800786a:	e001      	b.n	8007870 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800786c:	2302      	movs	r3, #2
 800786e:	e000      	b.n	8007872 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3718      	adds	r7, #24
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b086      	sub	sp, #24
 800787e:	af00      	add	r7, sp, #0
 8007880:	60f8      	str	r0, [r7, #12]
 8007882:	460b      	mov	r3, r1
 8007884:	607a      	str	r2, [r7, #4]
 8007886:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007888:	7afb      	ldrb	r3, [r7, #11]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d17f      	bne.n	800798e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	3314      	adds	r3, #20
 8007892:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800789a:	2b02      	cmp	r3, #2
 800789c:	d15c      	bne.n	8007958 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	68da      	ldr	r2, [r3, #12]
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d915      	bls.n	80078d6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	68da      	ldr	r2, [r3, #12]
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	1ad2      	subs	r2, r2, r3
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	b29b      	uxth	r3, r3
 80078be:	461a      	mov	r2, r3
 80078c0:	6879      	ldr	r1, [r7, #4]
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f000 febe 	bl	8008644 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078c8:	2300      	movs	r3, #0
 80078ca:	2200      	movs	r2, #0
 80078cc:	2100      	movs	r1, #0
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	f001 fc3b 	bl	800914a <USBD_LL_PrepareReceive>
 80078d4:	e04e      	b.n	8007974 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	6912      	ldr	r2, [r2, #16]
 80078de:	fbb3 f1f2 	udiv	r1, r3, r2
 80078e2:	fb01 f202 	mul.w	r2, r1, r2
 80078e6:	1a9b      	subs	r3, r3, r2
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d11c      	bne.n	8007926 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	689a      	ldr	r2, [r3, #8]
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d316      	bcc.n	8007926 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	689a      	ldr	r2, [r3, #8]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007902:	429a      	cmp	r2, r3
 8007904:	d20f      	bcs.n	8007926 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007906:	2200      	movs	r2, #0
 8007908:	2100      	movs	r1, #0
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f000 fe9a 	bl	8008644 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007918:	2300      	movs	r3, #0
 800791a:	2200      	movs	r2, #0
 800791c:	2100      	movs	r1, #0
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f001 fc13 	bl	800914a <USBD_LL_PrepareReceive>
 8007924:	e026      	b.n	8007974 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00a      	beq.n	8007948 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007938:	2b03      	cmp	r3, #3
 800793a:	d105      	bne.n	8007948 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007948:	2180      	movs	r1, #128	@ 0x80
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f001 fb52 	bl	8008ff4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f000 fecc 	bl	80086ee <USBD_CtlReceiveStatus>
 8007956:	e00d      	b.n	8007974 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800795e:	2b04      	cmp	r3, #4
 8007960:	d004      	beq.n	800796c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007968:	2b00      	cmp	r3, #0
 800796a:	d103      	bne.n	8007974 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800796c:	2180      	movs	r1, #128	@ 0x80
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f001 fb40 	bl	8008ff4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800797a:	2b01      	cmp	r3, #1
 800797c:	d11d      	bne.n	80079ba <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800797e:	68f8      	ldr	r0, [r7, #12]
 8007980:	f7ff fe81 	bl	8007686 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800798c:	e015      	b.n	80079ba <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00d      	beq.n	80079b6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80079a0:	2b03      	cmp	r3, #3
 80079a2:	d108      	bne.n	80079b6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	7afa      	ldrb	r2, [r7, #11]
 80079ae:	4611      	mov	r1, r2
 80079b0:	68f8      	ldr	r0, [r7, #12]
 80079b2:	4798      	blx	r3
 80079b4:	e001      	b.n	80079ba <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80079b6:	2302      	movs	r3, #2
 80079b8:	e000      	b.n	80079bc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3718      	adds	r7, #24
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079cc:	2340      	movs	r3, #64	@ 0x40
 80079ce:	2200      	movs	r2, #0
 80079d0:	2100      	movs	r1, #0
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f001 fac9 	bl	8008f6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2240      	movs	r2, #64	@ 0x40
 80079e4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079e8:	2340      	movs	r3, #64	@ 0x40
 80079ea:	2200      	movs	r2, #0
 80079ec:	2180      	movs	r1, #128	@ 0x80
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f001 fabb 	bl	8008f6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2240      	movs	r2, #64	@ 0x40
 80079fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d009      	beq.n	8007a3c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	6852      	ldr	r2, [r2, #4]
 8007a34:	b2d2      	uxtb	r2, r2
 8007a36:	4611      	mov	r1, r2
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	4798      	blx	r3
  }

  return USBD_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b083      	sub	sp, #12
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
 8007a4e:	460b      	mov	r3, r1
 8007a50:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	78fa      	ldrb	r2, [r7, #3]
 8007a56:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	370c      	adds	r7, #12
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bc80      	pop	{r7}
 8007a62:	4770      	bx	lr

08007a64 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2204      	movs	r2, #4
 8007a7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	370c      	adds	r7, #12
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bc80      	pop	{r7}
 8007a8a:	4770      	bx	lr

08007a8c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a9a:	2b04      	cmp	r3, #4
 8007a9c:	d105      	bne.n	8007aaa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bc80      	pop	{r7}
 8007ab4:	4770      	bx	lr

08007ab6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b082      	sub	sp, #8
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ac4:	2b03      	cmp	r3, #3
 8007ac6:	d10b      	bne.n	8007ae0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ace:	69db      	ldr	r3, [r3, #28]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d005      	beq.n	8007ae0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ada:	69db      	ldr	r3, [r3, #28]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
	...

08007aec <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b02:	2b40      	cmp	r3, #64	@ 0x40
 8007b04:	d005      	beq.n	8007b12 <USBD_StdDevReq+0x26>
 8007b06:	2b40      	cmp	r3, #64	@ 0x40
 8007b08:	d84f      	bhi.n	8007baa <USBD_StdDevReq+0xbe>
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d009      	beq.n	8007b22 <USBD_StdDevReq+0x36>
 8007b0e:	2b20      	cmp	r3, #32
 8007b10:	d14b      	bne.n	8007baa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	4798      	blx	r3
      break;
 8007b20:	e048      	b.n	8007bb4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	785b      	ldrb	r3, [r3, #1]
 8007b26:	2b09      	cmp	r3, #9
 8007b28:	d839      	bhi.n	8007b9e <USBD_StdDevReq+0xb2>
 8007b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b30 <USBD_StdDevReq+0x44>)
 8007b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b30:	08007b81 	.word	0x08007b81
 8007b34:	08007b95 	.word	0x08007b95
 8007b38:	08007b9f 	.word	0x08007b9f
 8007b3c:	08007b8b 	.word	0x08007b8b
 8007b40:	08007b9f 	.word	0x08007b9f
 8007b44:	08007b63 	.word	0x08007b63
 8007b48:	08007b59 	.word	0x08007b59
 8007b4c:	08007b9f 	.word	0x08007b9f
 8007b50:	08007b77 	.word	0x08007b77
 8007b54:	08007b6d 	.word	0x08007b6d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b58:	6839      	ldr	r1, [r7, #0]
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f9dc 	bl	8007f18 <USBD_GetDescriptor>
          break;
 8007b60:	e022      	b.n	8007ba8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fb3f 	bl	80081e8 <USBD_SetAddress>
          break;
 8007b6a:	e01d      	b.n	8007ba8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007b6c:	6839      	ldr	r1, [r7, #0]
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fb7e 	bl	8008270 <USBD_SetConfig>
          break;
 8007b74:	e018      	b.n	8007ba8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fc07 	bl	800838c <USBD_GetConfig>
          break;
 8007b7e:	e013      	b.n	8007ba8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007b80:	6839      	ldr	r1, [r7, #0]
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fc37 	bl	80083f6 <USBD_GetStatus>
          break;
 8007b88:	e00e      	b.n	8007ba8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fc65 	bl	800845c <USBD_SetFeature>
          break;
 8007b92:	e009      	b.n	8007ba8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b94:	6839      	ldr	r1, [r7, #0]
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fc74 	bl	8008484 <USBD_ClrFeature>
          break;
 8007b9c:	e004      	b.n	8007ba8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007b9e:	6839      	ldr	r1, [r7, #0]
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 fcc9 	bl	8008538 <USBD_CtlError>
          break;
 8007ba6:	bf00      	nop
      }
      break;
 8007ba8:	e004      	b.n	8007bb4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007baa:	6839      	ldr	r1, [r7, #0]
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fcc3 	bl	8008538 <USBD_CtlError>
      break;
 8007bb2:	bf00      	nop
  }

  return ret;
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop

08007bc0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007bd6:	2b40      	cmp	r3, #64	@ 0x40
 8007bd8:	d005      	beq.n	8007be6 <USBD_StdItfReq+0x26>
 8007bda:	2b40      	cmp	r3, #64	@ 0x40
 8007bdc:	d82e      	bhi.n	8007c3c <USBD_StdItfReq+0x7c>
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d001      	beq.n	8007be6 <USBD_StdItfReq+0x26>
 8007be2:	2b20      	cmp	r3, #32
 8007be4:	d12a      	bne.n	8007c3c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bec:	3b01      	subs	r3, #1
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d81d      	bhi.n	8007c2e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	889b      	ldrh	r3, [r3, #4]
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d813      	bhi.n	8007c24 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	4798      	blx	r3
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	88db      	ldrh	r3, [r3, #6]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d110      	bne.n	8007c38 <USBD_StdItfReq+0x78>
 8007c16:	7bfb      	ldrb	r3, [r7, #15]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10d      	bne.n	8007c38 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 fd53 	bl	80086c8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007c22:	e009      	b.n	8007c38 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007c24:	6839      	ldr	r1, [r7, #0]
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fc86 	bl	8008538 <USBD_CtlError>
          break;
 8007c2c:	e004      	b.n	8007c38 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fc81 	bl	8008538 <USBD_CtlError>
          break;
 8007c36:	e000      	b.n	8007c3a <USBD_StdItfReq+0x7a>
          break;
 8007c38:	bf00      	nop
      }
      break;
 8007c3a:	e004      	b.n	8007c46 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fc7a 	bl	8008538 <USBD_CtlError>
      break;
 8007c44:	bf00      	nop
  }

  return USBD_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	889b      	ldrh	r3, [r3, #4]
 8007c62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c6c:	2b40      	cmp	r3, #64	@ 0x40
 8007c6e:	d007      	beq.n	8007c80 <USBD_StdEPReq+0x30>
 8007c70:	2b40      	cmp	r3, #64	@ 0x40
 8007c72:	f200 8146 	bhi.w	8007f02 <USBD_StdEPReq+0x2b2>
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00a      	beq.n	8007c90 <USBD_StdEPReq+0x40>
 8007c7a:	2b20      	cmp	r3, #32
 8007c7c:	f040 8141 	bne.w	8007f02 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	4798      	blx	r3
      break;
 8007c8e:	e13d      	b.n	8007f0c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c98:	2b20      	cmp	r3, #32
 8007c9a:	d10a      	bne.n	8007cb2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	4798      	blx	r3
 8007caa:	4603      	mov	r3, r0
 8007cac:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
 8007cb0:	e12d      	b.n	8007f0e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	785b      	ldrb	r3, [r3, #1]
 8007cb6:	2b03      	cmp	r3, #3
 8007cb8:	d007      	beq.n	8007cca <USBD_StdEPReq+0x7a>
 8007cba:	2b03      	cmp	r3, #3
 8007cbc:	f300 811b 	bgt.w	8007ef6 <USBD_StdEPReq+0x2a6>
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d072      	beq.n	8007daa <USBD_StdEPReq+0x15a>
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d03a      	beq.n	8007d3e <USBD_StdEPReq+0xee>
 8007cc8:	e115      	b.n	8007ef6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	d002      	beq.n	8007cda <USBD_StdEPReq+0x8a>
 8007cd4:	2b03      	cmp	r3, #3
 8007cd6:	d015      	beq.n	8007d04 <USBD_StdEPReq+0xb4>
 8007cd8:	e02b      	b.n	8007d32 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cda:	7bbb      	ldrb	r3, [r7, #14]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00c      	beq.n	8007cfa <USBD_StdEPReq+0xaa>
 8007ce0:	7bbb      	ldrb	r3, [r7, #14]
 8007ce2:	2b80      	cmp	r3, #128	@ 0x80
 8007ce4:	d009      	beq.n	8007cfa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007ce6:	7bbb      	ldrb	r3, [r7, #14]
 8007ce8:	4619      	mov	r1, r3
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f001 f982 	bl	8008ff4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007cf0:	2180      	movs	r1, #128	@ 0x80
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f001 f97e 	bl	8008ff4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007cf8:	e020      	b.n	8007d3c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fc1b 	bl	8008538 <USBD_CtlError>
              break;
 8007d02:	e01b      	b.n	8007d3c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	885b      	ldrh	r3, [r3, #2]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10e      	bne.n	8007d2a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007d0c:	7bbb      	ldrb	r3, [r7, #14]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00b      	beq.n	8007d2a <USBD_StdEPReq+0xda>
 8007d12:	7bbb      	ldrb	r3, [r7, #14]
 8007d14:	2b80      	cmp	r3, #128	@ 0x80
 8007d16:	d008      	beq.n	8007d2a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	88db      	ldrh	r3, [r3, #6]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d104      	bne.n	8007d2a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007d20:	7bbb      	ldrb	r3, [r7, #14]
 8007d22:	4619      	mov	r1, r3
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f001 f965 	bl	8008ff4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fccc 	bl	80086c8 <USBD_CtlSendStatus>

              break;
 8007d30:	e004      	b.n	8007d3c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007d32:	6839      	ldr	r1, [r7, #0]
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 fbff 	bl	8008538 <USBD_CtlError>
              break;
 8007d3a:	bf00      	nop
          }
          break;
 8007d3c:	e0e0      	b.n	8007f00 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d002      	beq.n	8007d4e <USBD_StdEPReq+0xfe>
 8007d48:	2b03      	cmp	r3, #3
 8007d4a:	d015      	beq.n	8007d78 <USBD_StdEPReq+0x128>
 8007d4c:	e026      	b.n	8007d9c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d4e:	7bbb      	ldrb	r3, [r7, #14]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00c      	beq.n	8007d6e <USBD_StdEPReq+0x11e>
 8007d54:	7bbb      	ldrb	r3, [r7, #14]
 8007d56:	2b80      	cmp	r3, #128	@ 0x80
 8007d58:	d009      	beq.n	8007d6e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007d5a:	7bbb      	ldrb	r3, [r7, #14]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f001 f948 	bl	8008ff4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007d64:	2180      	movs	r1, #128	@ 0x80
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f001 f944 	bl	8008ff4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d6c:	e01c      	b.n	8007da8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007d6e:	6839      	ldr	r1, [r7, #0]
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 fbe1 	bl	8008538 <USBD_CtlError>
              break;
 8007d76:	e017      	b.n	8007da8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	885b      	ldrh	r3, [r3, #2]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d112      	bne.n	8007da6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007d80:	7bbb      	ldrb	r3, [r7, #14]
 8007d82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d004      	beq.n	8007d94 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007d8a:	7bbb      	ldrb	r3, [r7, #14]
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f001 f94f 	bl	8009032 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 fc97 	bl	80086c8 <USBD_CtlSendStatus>
              }
              break;
 8007d9a:	e004      	b.n	8007da6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007d9c:	6839      	ldr	r1, [r7, #0]
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fbca 	bl	8008538 <USBD_CtlError>
              break;
 8007da4:	e000      	b.n	8007da8 <USBD_StdEPReq+0x158>
              break;
 8007da6:	bf00      	nop
          }
          break;
 8007da8:	e0aa      	b.n	8007f00 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d002      	beq.n	8007dba <USBD_StdEPReq+0x16a>
 8007db4:	2b03      	cmp	r3, #3
 8007db6:	d032      	beq.n	8007e1e <USBD_StdEPReq+0x1ce>
 8007db8:	e097      	b.n	8007eea <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007dba:	7bbb      	ldrb	r3, [r7, #14]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d007      	beq.n	8007dd0 <USBD_StdEPReq+0x180>
 8007dc0:	7bbb      	ldrb	r3, [r7, #14]
 8007dc2:	2b80      	cmp	r3, #128	@ 0x80
 8007dc4:	d004      	beq.n	8007dd0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007dc6:	6839      	ldr	r1, [r7, #0]
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 fbb5 	bl	8008538 <USBD_CtlError>
                break;
 8007dce:	e091      	b.n	8007ef4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	da0b      	bge.n	8007df0 <USBD_StdEPReq+0x1a0>
 8007dd8:	7bbb      	ldrb	r3, [r7, #14]
 8007dda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007dde:	4613      	mov	r3, r2
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	4413      	add	r3, r2
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	3310      	adds	r3, #16
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	4413      	add	r3, r2
 8007dec:	3304      	adds	r3, #4
 8007dee:	e00b      	b.n	8007e08 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007df0:	7bbb      	ldrb	r3, [r7, #14]
 8007df2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007df6:	4613      	mov	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4413      	add	r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	4413      	add	r3, r2
 8007e06:	3304      	adds	r3, #4
 8007e08:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	2202      	movs	r2, #2
 8007e14:	4619      	mov	r1, r3
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 fbf8 	bl	800860c <USBD_CtlSendData>
              break;
 8007e1c:	e06a      	b.n	8007ef4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007e1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	da11      	bge.n	8007e4a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007e26:	7bbb      	ldrb	r3, [r7, #14]
 8007e28:	f003 020f 	and.w	r2, r3, #15
 8007e2c:	6879      	ldr	r1, [r7, #4]
 8007e2e:	4613      	mov	r3, r2
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	4413      	add	r3, r2
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	440b      	add	r3, r1
 8007e38:	3318      	adds	r3, #24
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d117      	bne.n	8007e70 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007e40:	6839      	ldr	r1, [r7, #0]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fb78 	bl	8008538 <USBD_CtlError>
                  break;
 8007e48:	e054      	b.n	8007ef4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007e4a:	7bbb      	ldrb	r3, [r7, #14]
 8007e4c:	f003 020f 	and.w	r2, r3, #15
 8007e50:	6879      	ldr	r1, [r7, #4]
 8007e52:	4613      	mov	r3, r2
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	4413      	add	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	440b      	add	r3, r1
 8007e5c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d104      	bne.n	8007e70 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007e66:	6839      	ldr	r1, [r7, #0]
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fb65 	bl	8008538 <USBD_CtlError>
                  break;
 8007e6e:	e041      	b.n	8007ef4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	da0b      	bge.n	8007e90 <USBD_StdEPReq+0x240>
 8007e78:	7bbb      	ldrb	r3, [r7, #14]
 8007e7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e7e:	4613      	mov	r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	4413      	add	r3, r2
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	3310      	adds	r3, #16
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	3304      	adds	r3, #4
 8007e8e:	e00b      	b.n	8007ea8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e90:	7bbb      	ldrb	r3, [r7, #14]
 8007e92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e96:	4613      	mov	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	4413      	add	r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	3304      	adds	r3, #4
 8007ea8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007eaa:	7bbb      	ldrb	r3, [r7, #14]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <USBD_StdEPReq+0x266>
 8007eb0:	7bbb      	ldrb	r3, [r7, #14]
 8007eb2:	2b80      	cmp	r3, #128	@ 0x80
 8007eb4:	d103      	bne.n	8007ebe <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	601a      	str	r2, [r3, #0]
 8007ebc:	e00e      	b.n	8007edc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007ebe:	7bbb      	ldrb	r3, [r7, #14]
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f001 f8d4 	bl	8009070 <USBD_LL_IsStallEP>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d003      	beq.n	8007ed6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	e002      	b.n	8007edc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	2202      	movs	r2, #2
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fb92 	bl	800860c <USBD_CtlSendData>
              break;
 8007ee8:	e004      	b.n	8007ef4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fb23 	bl	8008538 <USBD_CtlError>
              break;
 8007ef2:	bf00      	nop
          }
          break;
 8007ef4:	e004      	b.n	8007f00 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007ef6:	6839      	ldr	r1, [r7, #0]
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fb1d 	bl	8008538 <USBD_CtlError>
          break;
 8007efe:	bf00      	nop
      }
      break;
 8007f00:	e004      	b.n	8007f0c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fb17 	bl	8008538 <USBD_CtlError>
      break;
 8007f0a:	bf00      	nop
  }

  return ret;
 8007f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
	...

08007f18 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007f26:	2300      	movs	r3, #0
 8007f28:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	885b      	ldrh	r3, [r3, #2]
 8007f32:	0a1b      	lsrs	r3, r3, #8
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	3b01      	subs	r3, #1
 8007f38:	2b06      	cmp	r3, #6
 8007f3a:	f200 8128 	bhi.w	800818e <USBD_GetDescriptor+0x276>
 8007f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f44 <USBD_GetDescriptor+0x2c>)
 8007f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f44:	08007f61 	.word	0x08007f61
 8007f48:	08007f79 	.word	0x08007f79
 8007f4c:	08007fb9 	.word	0x08007fb9
 8007f50:	0800818f 	.word	0x0800818f
 8007f54:	0800818f 	.word	0x0800818f
 8007f58:	0800812f 	.word	0x0800812f
 8007f5c:	0800815b 	.word	0x0800815b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	7c12      	ldrb	r2, [r2, #16]
 8007f6c:	f107 0108 	add.w	r1, r7, #8
 8007f70:	4610      	mov	r0, r2
 8007f72:	4798      	blx	r3
 8007f74:	60f8      	str	r0, [r7, #12]
      break;
 8007f76:	e112      	b.n	800819e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	7c1b      	ldrb	r3, [r3, #16]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10d      	bne.n	8007f9c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f88:	f107 0208 	add.w	r2, r7, #8
 8007f8c:	4610      	mov	r0, r2
 8007f8e:	4798      	blx	r3
 8007f90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	3301      	adds	r3, #1
 8007f96:	2202      	movs	r2, #2
 8007f98:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007f9a:	e100      	b.n	800819e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa4:	f107 0208 	add.w	r2, r7, #8
 8007fa8:	4610      	mov	r0, r2
 8007faa:	4798      	blx	r3
 8007fac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	701a      	strb	r2, [r3, #0]
      break;
 8007fb6:	e0f2      	b.n	800819e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	885b      	ldrh	r3, [r3, #2]
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	2b05      	cmp	r3, #5
 8007fc0:	f200 80ac 	bhi.w	800811c <USBD_GetDescriptor+0x204>
 8007fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8007fcc <USBD_GetDescriptor+0xb4>)
 8007fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fca:	bf00      	nop
 8007fcc:	08007fe5 	.word	0x08007fe5
 8007fd0:	08008019 	.word	0x08008019
 8007fd4:	0800804d 	.word	0x0800804d
 8007fd8:	08008081 	.word	0x08008081
 8007fdc:	080080b5 	.word	0x080080b5
 8007fe0:	080080e9 	.word	0x080080e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00b      	beq.n	8008008 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	7c12      	ldrb	r2, [r2, #16]
 8007ffc:	f107 0108 	add.w	r1, r7, #8
 8008000:	4610      	mov	r0, r2
 8008002:	4798      	blx	r3
 8008004:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008006:	e091      	b.n	800812c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fa94 	bl	8008538 <USBD_CtlError>
            err++;
 8008010:	7afb      	ldrb	r3, [r7, #11]
 8008012:	3301      	adds	r3, #1
 8008014:	72fb      	strb	r3, [r7, #11]
          break;
 8008016:	e089      	b.n	800812c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00b      	beq.n	800803c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	7c12      	ldrb	r2, [r2, #16]
 8008030:	f107 0108 	add.w	r1, r7, #8
 8008034:	4610      	mov	r0, r2
 8008036:	4798      	blx	r3
 8008038:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800803a:	e077      	b.n	800812c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800803c:	6839      	ldr	r1, [r7, #0]
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fa7a 	bl	8008538 <USBD_CtlError>
            err++;
 8008044:	7afb      	ldrb	r3, [r7, #11]
 8008046:	3301      	adds	r3, #1
 8008048:	72fb      	strb	r3, [r7, #11]
          break;
 800804a:	e06f      	b.n	800812c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00b      	beq.n	8008070 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	7c12      	ldrb	r2, [r2, #16]
 8008064:	f107 0108 	add.w	r1, r7, #8
 8008068:	4610      	mov	r0, r2
 800806a:	4798      	blx	r3
 800806c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800806e:	e05d      	b.n	800812c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008070:	6839      	ldr	r1, [r7, #0]
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 fa60 	bl	8008538 <USBD_CtlError>
            err++;
 8008078:	7afb      	ldrb	r3, [r7, #11]
 800807a:	3301      	adds	r3, #1
 800807c:	72fb      	strb	r3, [r7, #11]
          break;
 800807e:	e055      	b.n	800812c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00b      	beq.n	80080a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	7c12      	ldrb	r2, [r2, #16]
 8008098:	f107 0108 	add.w	r1, r7, #8
 800809c:	4610      	mov	r0, r2
 800809e:	4798      	blx	r3
 80080a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080a2:	e043      	b.n	800812c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080a4:	6839      	ldr	r1, [r7, #0]
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 fa46 	bl	8008538 <USBD_CtlError>
            err++;
 80080ac:	7afb      	ldrb	r3, [r7, #11]
 80080ae:	3301      	adds	r3, #1
 80080b0:	72fb      	strb	r3, [r7, #11]
          break;
 80080b2:	e03b      	b.n	800812c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80080ba:	695b      	ldr	r3, [r3, #20]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00b      	beq.n	80080d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80080c6:	695b      	ldr	r3, [r3, #20]
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	7c12      	ldrb	r2, [r2, #16]
 80080cc:	f107 0108 	add.w	r1, r7, #8
 80080d0:	4610      	mov	r0, r2
 80080d2:	4798      	blx	r3
 80080d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080d6:	e029      	b.n	800812c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080d8:	6839      	ldr	r1, [r7, #0]
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fa2c 	bl	8008538 <USBD_CtlError>
            err++;
 80080e0:	7afb      	ldrb	r3, [r7, #11]
 80080e2:	3301      	adds	r3, #1
 80080e4:	72fb      	strb	r3, [r7, #11]
          break;
 80080e6:	e021      	b.n	800812c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00b      	beq.n	800810c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	7c12      	ldrb	r2, [r2, #16]
 8008100:	f107 0108 	add.w	r1, r7, #8
 8008104:	4610      	mov	r0, r2
 8008106:	4798      	blx	r3
 8008108:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800810a:	e00f      	b.n	800812c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fa12 	bl	8008538 <USBD_CtlError>
            err++;
 8008114:	7afb      	ldrb	r3, [r7, #11]
 8008116:	3301      	adds	r3, #1
 8008118:	72fb      	strb	r3, [r7, #11]
          break;
 800811a:	e007      	b.n	800812c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800811c:	6839      	ldr	r1, [r7, #0]
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fa0a 	bl	8008538 <USBD_CtlError>
          err++;
 8008124:	7afb      	ldrb	r3, [r7, #11]
 8008126:	3301      	adds	r3, #1
 8008128:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800812a:	e038      	b.n	800819e <USBD_GetDescriptor+0x286>
 800812c:	e037      	b.n	800819e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	7c1b      	ldrb	r3, [r3, #16]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d109      	bne.n	800814a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800813c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800813e:	f107 0208 	add.w	r2, r7, #8
 8008142:	4610      	mov	r0, r2
 8008144:	4798      	blx	r3
 8008146:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008148:	e029      	b.n	800819e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800814a:	6839      	ldr	r1, [r7, #0]
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f9f3 	bl	8008538 <USBD_CtlError>
        err++;
 8008152:	7afb      	ldrb	r3, [r7, #11]
 8008154:	3301      	adds	r3, #1
 8008156:	72fb      	strb	r3, [r7, #11]
      break;
 8008158:	e021      	b.n	800819e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	7c1b      	ldrb	r3, [r3, #16]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d10d      	bne.n	800817e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800816a:	f107 0208 	add.w	r2, r7, #8
 800816e:	4610      	mov	r0, r2
 8008170:	4798      	blx	r3
 8008172:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	3301      	adds	r3, #1
 8008178:	2207      	movs	r2, #7
 800817a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800817c:	e00f      	b.n	800819e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800817e:	6839      	ldr	r1, [r7, #0]
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f9d9 	bl	8008538 <USBD_CtlError>
        err++;
 8008186:	7afb      	ldrb	r3, [r7, #11]
 8008188:	3301      	adds	r3, #1
 800818a:	72fb      	strb	r3, [r7, #11]
      break;
 800818c:	e007      	b.n	800819e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f9d1 	bl	8008538 <USBD_CtlError>
      err++;
 8008196:	7afb      	ldrb	r3, [r7, #11]
 8008198:	3301      	adds	r3, #1
 800819a:	72fb      	strb	r3, [r7, #11]
      break;
 800819c:	bf00      	nop
  }

  if (err != 0U)
 800819e:	7afb      	ldrb	r3, [r7, #11]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d11c      	bne.n	80081de <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80081a4:	893b      	ldrh	r3, [r7, #8]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d011      	beq.n	80081ce <USBD_GetDescriptor+0x2b6>
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	88db      	ldrh	r3, [r3, #6]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d00d      	beq.n	80081ce <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	88da      	ldrh	r2, [r3, #6]
 80081b6:	893b      	ldrh	r3, [r7, #8]
 80081b8:	4293      	cmp	r3, r2
 80081ba:	bf28      	it	cs
 80081bc:	4613      	movcs	r3, r2
 80081be:	b29b      	uxth	r3, r3
 80081c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80081c2:	893b      	ldrh	r3, [r7, #8]
 80081c4:	461a      	mov	r2, r3
 80081c6:	68f9      	ldr	r1, [r7, #12]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fa1f 	bl	800860c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	88db      	ldrh	r3, [r3, #6]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d104      	bne.n	80081e0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fa76 	bl	80086c8 <USBD_CtlSendStatus>
 80081dc:	e000      	b.n	80081e0 <USBD_GetDescriptor+0x2c8>
    return;
 80081de:	bf00      	nop
    }
  }
}
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop

080081e8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	889b      	ldrh	r3, [r3, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d130      	bne.n	800825c <USBD_SetAddress+0x74>
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	88db      	ldrh	r3, [r3, #6]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d12c      	bne.n	800825c <USBD_SetAddress+0x74>
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	885b      	ldrh	r3, [r3, #2]
 8008206:	2b7f      	cmp	r3, #127	@ 0x7f
 8008208:	d828      	bhi.n	800825c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	885b      	ldrh	r3, [r3, #2]
 800820e:	b2db      	uxtb	r3, r3
 8008210:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008214:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800821c:	2b03      	cmp	r3, #3
 800821e:	d104      	bne.n	800822a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008220:	6839      	ldr	r1, [r7, #0]
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f988 	bl	8008538 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008228:	e01d      	b.n	8008266 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	7bfa      	ldrb	r2, [r7, #15]
 800822e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008232:	7bfb      	ldrb	r3, [r7, #15]
 8008234:	4619      	mov	r1, r3
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 ff45 	bl	80090c6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fa43 	bl	80086c8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008242:	7bfb      	ldrb	r3, [r7, #15]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d004      	beq.n	8008252 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2202      	movs	r2, #2
 800824c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008250:	e009      	b.n	8008266 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800825a:	e004      	b.n	8008266 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800825c:	6839      	ldr	r1, [r7, #0]
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f96a 	bl	8008538 <USBD_CtlError>
  }
}
 8008264:	bf00      	nop
 8008266:	bf00      	nop
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
	...

08008270 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	885b      	ldrh	r3, [r3, #2]
 800827e:	b2da      	uxtb	r2, r3
 8008280:	4b41      	ldr	r3, [pc, #260]	@ (8008388 <USBD_SetConfig+0x118>)
 8008282:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008284:	4b40      	ldr	r3, [pc, #256]	@ (8008388 <USBD_SetConfig+0x118>)
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	2b01      	cmp	r3, #1
 800828a:	d904      	bls.n	8008296 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800828c:	6839      	ldr	r1, [r7, #0]
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f952 	bl	8008538 <USBD_CtlError>
 8008294:	e075      	b.n	8008382 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800829c:	2b02      	cmp	r3, #2
 800829e:	d002      	beq.n	80082a6 <USBD_SetConfig+0x36>
 80082a0:	2b03      	cmp	r3, #3
 80082a2:	d023      	beq.n	80082ec <USBD_SetConfig+0x7c>
 80082a4:	e062      	b.n	800836c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80082a6:	4b38      	ldr	r3, [pc, #224]	@ (8008388 <USBD_SetConfig+0x118>)
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d01a      	beq.n	80082e4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80082ae:	4b36      	ldr	r3, [pc, #216]	@ (8008388 <USBD_SetConfig+0x118>)
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	461a      	mov	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2203      	movs	r2, #3
 80082bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80082c0:	4b31      	ldr	r3, [pc, #196]	@ (8008388 <USBD_SetConfig+0x118>)
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	4619      	mov	r1, r3
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f7ff f9e7 	bl	800769a <USBD_SetClassConfig>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d104      	bne.n	80082dc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80082d2:	6839      	ldr	r1, [r7, #0]
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 f92f 	bl	8008538 <USBD_CtlError>
            return;
 80082da:	e052      	b.n	8008382 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 f9f3 	bl	80086c8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80082e2:	e04e      	b.n	8008382 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 f9ef 	bl	80086c8 <USBD_CtlSendStatus>
        break;
 80082ea:	e04a      	b.n	8008382 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80082ec:	4b26      	ldr	r3, [pc, #152]	@ (8008388 <USBD_SetConfig+0x118>)
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d112      	bne.n	800831a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2202      	movs	r2, #2
 80082f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80082fc:	4b22      	ldr	r3, [pc, #136]	@ (8008388 <USBD_SetConfig+0x118>)
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	461a      	mov	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008306:	4b20      	ldr	r3, [pc, #128]	@ (8008388 <USBD_SetConfig+0x118>)
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	4619      	mov	r1, r3
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f7ff f9e3 	bl	80076d8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f9d8 	bl	80086c8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008318:	e033      	b.n	8008382 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800831a:	4b1b      	ldr	r3, [pc, #108]	@ (8008388 <USBD_SetConfig+0x118>)
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	461a      	mov	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	429a      	cmp	r2, r3
 8008326:	d01d      	beq.n	8008364 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	b2db      	uxtb	r3, r3
 800832e:	4619      	mov	r1, r3
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f7ff f9d1 	bl	80076d8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008336:	4b14      	ldr	r3, [pc, #80]	@ (8008388 <USBD_SetConfig+0x118>)
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	461a      	mov	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008340:	4b11      	ldr	r3, [pc, #68]	@ (8008388 <USBD_SetConfig+0x118>)
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	4619      	mov	r1, r3
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7ff f9a7 	bl	800769a <USBD_SetClassConfig>
 800834c:	4603      	mov	r3, r0
 800834e:	2b02      	cmp	r3, #2
 8008350:	d104      	bne.n	800835c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008352:	6839      	ldr	r1, [r7, #0]
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f8ef 	bl	8008538 <USBD_CtlError>
            return;
 800835a:	e012      	b.n	8008382 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 f9b3 	bl	80086c8 <USBD_CtlSendStatus>
        break;
 8008362:	e00e      	b.n	8008382 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f9af 	bl	80086c8 <USBD_CtlSendStatus>
        break;
 800836a:	e00a      	b.n	8008382 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800836c:	6839      	ldr	r1, [r7, #0]
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f8e2 	bl	8008538 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008374:	4b04      	ldr	r3, [pc, #16]	@ (8008388 <USBD_SetConfig+0x118>)
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	4619      	mov	r1, r3
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f7ff f9ac 	bl	80076d8 <USBD_ClrClassConfig>
        break;
 8008380:	bf00      	nop
    }
  }
}
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	2000038c 	.word	0x2000038c

0800838c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	88db      	ldrh	r3, [r3, #6]
 800839a:	2b01      	cmp	r3, #1
 800839c:	d004      	beq.n	80083a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800839e:	6839      	ldr	r1, [r7, #0]
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 f8c9 	bl	8008538 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80083a6:	e022      	b.n	80083ee <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	dc02      	bgt.n	80083b8 <USBD_GetConfig+0x2c>
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	dc03      	bgt.n	80083be <USBD_GetConfig+0x32>
 80083b6:	e015      	b.n	80083e4 <USBD_GetConfig+0x58>
 80083b8:	2b03      	cmp	r3, #3
 80083ba:	d00b      	beq.n	80083d4 <USBD_GetConfig+0x48>
 80083bc:	e012      	b.n	80083e4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	3308      	adds	r3, #8
 80083c8:	2201      	movs	r2, #1
 80083ca:	4619      	mov	r1, r3
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f91d 	bl	800860c <USBD_CtlSendData>
        break;
 80083d2:	e00c      	b.n	80083ee <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	3304      	adds	r3, #4
 80083d8:	2201      	movs	r2, #1
 80083da:	4619      	mov	r1, r3
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f915 	bl	800860c <USBD_CtlSendData>
        break;
 80083e2:	e004      	b.n	80083ee <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80083e4:	6839      	ldr	r1, [r7, #0]
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f8a6 	bl	8008538 <USBD_CtlError>
        break;
 80083ec:	bf00      	nop
}
 80083ee:	bf00      	nop
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b082      	sub	sp, #8
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008406:	3b01      	subs	r3, #1
 8008408:	2b02      	cmp	r3, #2
 800840a:	d81e      	bhi.n	800844a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	88db      	ldrh	r3, [r3, #6]
 8008410:	2b02      	cmp	r3, #2
 8008412:	d004      	beq.n	800841e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008414:	6839      	ldr	r1, [r7, #0]
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f88e 	bl	8008538 <USBD_CtlError>
        break;
 800841c:	e01a      	b.n	8008454 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2201      	movs	r2, #1
 8008422:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800842a:	2b00      	cmp	r3, #0
 800842c:	d005      	beq.n	800843a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	f043 0202 	orr.w	r2, r3, #2
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	330c      	adds	r3, #12
 800843e:	2202      	movs	r2, #2
 8008440:	4619      	mov	r1, r3
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f8e2 	bl	800860c <USBD_CtlSendData>
      break;
 8008448:	e004      	b.n	8008454 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800844a:	6839      	ldr	r1, [r7, #0]
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 f873 	bl	8008538 <USBD_CtlError>
      break;
 8008452:	bf00      	nop
  }
}
 8008454:	bf00      	nop
 8008456:	3708      	adds	r7, #8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	885b      	ldrh	r3, [r3, #2]
 800846a:	2b01      	cmp	r3, #1
 800846c:	d106      	bne.n	800847c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f926 	bl	80086c8 <USBD_CtlSendStatus>
  }
}
 800847c:	bf00      	nop
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008494:	3b01      	subs	r3, #1
 8008496:	2b02      	cmp	r3, #2
 8008498:	d80b      	bhi.n	80084b2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	885b      	ldrh	r3, [r3, #2]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d10c      	bne.n	80084bc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f90c 	bl	80086c8 <USBD_CtlSendStatus>
      }
      break;
 80084b0:	e004      	b.n	80084bc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80084b2:	6839      	ldr	r1, [r7, #0]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 f83f 	bl	8008538 <USBD_CtlError>
      break;
 80084ba:	e000      	b.n	80084be <USBD_ClrFeature+0x3a>
      break;
 80084bc:	bf00      	nop
  }
}
 80084be:	bf00      	nop
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80084c6:	b480      	push	{r7}
 80084c8:	b083      	sub	sp, #12
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	781a      	ldrb	r2, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	785a      	ldrb	r2, [r3, #1]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	3302      	adds	r3, #2
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	461a      	mov	r2, r3
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	3303      	adds	r3, #3
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	021b      	lsls	r3, r3, #8
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	4413      	add	r3, r2
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	3304      	adds	r3, #4
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	461a      	mov	r2, r3
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	3305      	adds	r3, #5
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	021b      	lsls	r3, r3, #8
 800850a:	b29b      	uxth	r3, r3
 800850c:	4413      	add	r3, r2
 800850e:	b29a      	uxth	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	3306      	adds	r3, #6
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	461a      	mov	r2, r3
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	3307      	adds	r3, #7
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	021b      	lsls	r3, r3, #8
 8008524:	b29b      	uxth	r3, r3
 8008526:	4413      	add	r3, r2
 8008528:	b29a      	uxth	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	80da      	strh	r2, [r3, #6]

}
 800852e:	bf00      	nop
 8008530:	370c      	adds	r7, #12
 8008532:	46bd      	mov	sp, r7
 8008534:	bc80      	pop	{r7}
 8008536:	4770      	bx	lr

08008538 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008542:	2180      	movs	r1, #128	@ 0x80
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 fd55 	bl	8008ff4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800854a:	2100      	movs	r1, #0
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fd51 	bl	8008ff4 <USBD_LL_StallEP>
}
 8008552:	bf00      	nop
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b086      	sub	sp, #24
 800855e:	af00      	add	r7, sp, #0
 8008560:	60f8      	str	r0, [r7, #12]
 8008562:	60b9      	str	r1, [r7, #8]
 8008564:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008566:	2300      	movs	r3, #0
 8008568:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d032      	beq.n	80085d6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f000 f834 	bl	80085de <USBD_GetLen>
 8008576:	4603      	mov	r3, r0
 8008578:	3301      	adds	r3, #1
 800857a:	b29b      	uxth	r3, r3
 800857c:	005b      	lsls	r3, r3, #1
 800857e:	b29a      	uxth	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008584:	7dfb      	ldrb	r3, [r7, #23]
 8008586:	1c5a      	adds	r2, r3, #1
 8008588:	75fa      	strb	r2, [r7, #23]
 800858a:	461a      	mov	r2, r3
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	4413      	add	r3, r2
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	7812      	ldrb	r2, [r2, #0]
 8008594:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008596:	7dfb      	ldrb	r3, [r7, #23]
 8008598:	1c5a      	adds	r2, r3, #1
 800859a:	75fa      	strb	r2, [r7, #23]
 800859c:	461a      	mov	r2, r3
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	4413      	add	r3, r2
 80085a2:	2203      	movs	r2, #3
 80085a4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80085a6:	e012      	b.n	80085ce <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	1c5a      	adds	r2, r3, #1
 80085ac:	60fa      	str	r2, [r7, #12]
 80085ae:	7dfa      	ldrb	r2, [r7, #23]
 80085b0:	1c51      	adds	r1, r2, #1
 80085b2:	75f9      	strb	r1, [r7, #23]
 80085b4:	4611      	mov	r1, r2
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	440a      	add	r2, r1
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80085be:	7dfb      	ldrb	r3, [r7, #23]
 80085c0:	1c5a      	adds	r2, r3, #1
 80085c2:	75fa      	strb	r2, [r7, #23]
 80085c4:	461a      	mov	r2, r3
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	4413      	add	r3, r2
 80085ca:	2200      	movs	r2, #0
 80085cc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1e8      	bne.n	80085a8 <USBD_GetString+0x4e>
    }
  }
}
 80085d6:	bf00      	nop
 80085d8:	3718      	adds	r7, #24
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80085de:	b480      	push	{r7}
 80085e0:	b085      	sub	sp, #20
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80085e6:	2300      	movs	r3, #0
 80085e8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80085ea:	e005      	b.n	80085f8 <USBD_GetLen+0x1a>
  {
    len++;
 80085ec:	7bfb      	ldrb	r3, [r7, #15]
 80085ee:	3301      	adds	r3, #1
 80085f0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	3301      	adds	r3, #1
 80085f6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1f5      	bne.n	80085ec <USBD_GetLen+0xe>
  }

  return len;
 8008600:	7bfb      	ldrb	r3, [r7, #15]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	bc80      	pop	{r7}
 800860a:	4770      	bx	lr

0800860c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	4613      	mov	r3, r2
 8008618:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2202      	movs	r2, #2
 800861e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008622:	88fa      	ldrh	r2, [r7, #6]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008628:	88fa      	ldrh	r2, [r7, #6]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800862e:	88fb      	ldrh	r3, [r7, #6]
 8008630:	68ba      	ldr	r2, [r7, #8]
 8008632:	2100      	movs	r1, #0
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f000 fd65 	bl	8009104 <USBD_LL_Transmit>

  return USBD_OK;
 800863a:	2300      	movs	r3, #0
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	4613      	mov	r3, r2
 8008650:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008652:	88fb      	ldrh	r3, [r7, #6]
 8008654:	68ba      	ldr	r2, [r7, #8]
 8008656:	2100      	movs	r1, #0
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	f000 fd53 	bl	8009104 <USBD_LL_Transmit>

  return USBD_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	3710      	adds	r7, #16
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	4613      	mov	r3, r2
 8008674:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2203      	movs	r2, #3
 800867a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800867e:	88fa      	ldrh	r2, [r7, #6]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008686:	88fa      	ldrh	r2, [r7, #6]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800868e:	88fb      	ldrh	r3, [r7, #6]
 8008690:	68ba      	ldr	r2, [r7, #8]
 8008692:	2100      	movs	r1, #0
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f000 fd58 	bl	800914a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	4613      	mov	r3, r2
 80086b0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80086b2:	88fb      	ldrh	r3, [r7, #6]
 80086b4:	68ba      	ldr	r2, [r7, #8]
 80086b6:	2100      	movs	r1, #0
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f000 fd46 	bl	800914a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086be:	2300      	movs	r3, #0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2204      	movs	r2, #4
 80086d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80086d8:	2300      	movs	r3, #0
 80086da:	2200      	movs	r2, #0
 80086dc:	2100      	movs	r1, #0
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fd10 	bl	8009104 <USBD_LL_Transmit>

  return USBD_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3708      	adds	r7, #8
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b082      	sub	sp, #8
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2205      	movs	r2, #5
 80086fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086fe:	2300      	movs	r3, #0
 8008700:	2200      	movs	r2, #0
 8008702:	2100      	movs	r1, #0
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 fd20 	bl	800914a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008718:	2200      	movs	r2, #0
 800871a:	4912      	ldr	r1, [pc, #72]	@ (8008764 <MX_USB_DEVICE_Init+0x50>)
 800871c:	4812      	ldr	r0, [pc, #72]	@ (8008768 <MX_USB_DEVICE_Init+0x54>)
 800871e:	f7fe ff62 	bl	80075e6 <USBD_Init>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d001      	beq.n	800872c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008728:	f7f7 fdfd 	bl	8000326 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800872c:	490f      	ldr	r1, [pc, #60]	@ (800876c <MX_USB_DEVICE_Init+0x58>)
 800872e:	480e      	ldr	r0, [pc, #56]	@ (8008768 <MX_USB_DEVICE_Init+0x54>)
 8008730:	f7fe ff84 	bl	800763c <USBD_RegisterClass>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d001      	beq.n	800873e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800873a:	f7f7 fdf4 	bl	8000326 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800873e:	490c      	ldr	r1, [pc, #48]	@ (8008770 <MX_USB_DEVICE_Init+0x5c>)
 8008740:	4809      	ldr	r0, [pc, #36]	@ (8008768 <MX_USB_DEVICE_Init+0x54>)
 8008742:	f7fe feb5 	bl	80074b0 <USBD_CDC_RegisterInterface>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800874c:	f7f7 fdeb 	bl	8000326 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008750:	4805      	ldr	r0, [pc, #20]	@ (8008768 <MX_USB_DEVICE_Init+0x54>)
 8008752:	f7fe ff8c 	bl	800766e <USBD_Start>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d001      	beq.n	8008760 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800875c:	f7f7 fde3 	bl	8000326 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008760:	bf00      	nop
 8008762:	bd80      	pop	{r7, pc}
 8008764:	20000140 	.word	0x20000140
 8008768:	20000390 	.word	0x20000390
 800876c:	20000020 	.word	0x20000020
 8008770:	20000130 	.word	0x20000130

08008774 <cdcAvailable>:
uint32_t rx_out = 0;
uint32_t rx_len = 512;
uint8_t rx_buf[512];

uint32_t cdcAvailable(void)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
    uint32_t ret;

    ret = (rx_in - rx_out) % rx_len;
 800877a:	4b09      	ldr	r3, [pc, #36]	@ (80087a0 <cdcAvailable+0x2c>)
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	4b09      	ldr	r3, [pc, #36]	@ (80087a4 <cdcAvailable+0x30>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	1ad3      	subs	r3, r2, r3
 8008784:	4a08      	ldr	r2, [pc, #32]	@ (80087a8 <cdcAvailable+0x34>)
 8008786:	6812      	ldr	r2, [r2, #0]
 8008788:	fbb3 f1f2 	udiv	r1, r3, r2
 800878c:	fb01 f202 	mul.w	r2, r1, r2
 8008790:	1a9b      	subs	r3, r3, r2
 8008792:	607b      	str	r3, [r7, #4]

    return ret;
 8008794:	687b      	ldr	r3, [r7, #4]
}
 8008796:	4618      	mov	r0, r3
 8008798:	370c      	adds	r7, #12
 800879a:	46bd      	mov	sp, r7
 800879c:	bc80      	pop	{r7}
 800879e:	4770      	bx	lr
 80087a0:	20000654 	.word	0x20000654
 80087a4:	20000658 	.word	0x20000658
 80087a8:	2000012c 	.word	0x2000012c

080087ac <cdcRead>:

uint8_t cdcRead(void)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
    uint8_t ret;

    ret = rx_buf[rx_out];
 80087b2:	4b0e      	ldr	r3, [pc, #56]	@ (80087ec <cdcRead+0x40>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a0e      	ldr	r2, [pc, #56]	@ (80087f0 <cdcRead+0x44>)
 80087b8:	5cd3      	ldrb	r3, [r2, r3]
 80087ba:	71fb      	strb	r3, [r7, #7]

    if (rx_out != rx_in)
 80087bc:	4b0b      	ldr	r3, [pc, #44]	@ (80087ec <cdcRead+0x40>)
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	4b0c      	ldr	r3, [pc, #48]	@ (80087f4 <cdcRead+0x48>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d00b      	beq.n	80087e0 <cdcRead+0x34>
    {
        rx_out = (rx_out + 1) % rx_len;
 80087c8:	4b08      	ldr	r3, [pc, #32]	@ (80087ec <cdcRead+0x40>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3301      	adds	r3, #1
 80087ce:	4a0a      	ldr	r2, [pc, #40]	@ (80087f8 <cdcRead+0x4c>)
 80087d0:	6812      	ldr	r2, [r2, #0]
 80087d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80087d6:	fb01 f202 	mul.w	r2, r1, r2
 80087da:	1a9b      	subs	r3, r3, r2
 80087dc:	4a03      	ldr	r2, [pc, #12]	@ (80087ec <cdcRead+0x40>)
 80087de:	6013      	str	r3, [r2, #0]
    }

    return ret;
 80087e0:	79fb      	ldrb	r3, [r7, #7]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bc80      	pop	{r7}
 80087ea:	4770      	bx	lr
 80087ec:	20000658 	.word	0x20000658
 80087f0:	2000065c 	.word	0x2000065c
 80087f4:	20000654 	.word	0x20000654
 80087f8:	2000012c 	.word	0x2000012c

080087fc <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	4603      	mov	r3, r0
 8008804:	71fb      	strb	r3, [r7, #7]
    uint32_t next_rx_in;

    rx_buf[rx_in] = rx_data;
 8008806:	4b0e      	ldr	r3, [pc, #56]	@ (8008840 <cdcDataIn+0x44>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	490e      	ldr	r1, [pc, #56]	@ (8008844 <cdcDataIn+0x48>)
 800880c:	79fa      	ldrb	r2, [r7, #7]
 800880e:	54ca      	strb	r2, [r1, r3]

    next_rx_in = (rx_in + 1) % rx_len;
 8008810:	4b0b      	ldr	r3, [pc, #44]	@ (8008840 <cdcDataIn+0x44>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	3301      	adds	r3, #1
 8008816:	4a0c      	ldr	r2, [pc, #48]	@ (8008848 <cdcDataIn+0x4c>)
 8008818:	6812      	ldr	r2, [r2, #0]
 800881a:	fbb3 f1f2 	udiv	r1, r3, r2
 800881e:	fb01 f202 	mul.w	r2, r1, r2
 8008822:	1a9b      	subs	r3, r3, r2
 8008824:	60fb      	str	r3, [r7, #12]
    if (next_rx_in != rx_out)
 8008826:	4b09      	ldr	r3, [pc, #36]	@ (800884c <cdcDataIn+0x50>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	429a      	cmp	r2, r3
 800882e:	d002      	beq.n	8008836 <cdcDataIn+0x3a>
    {
        rx_in = next_rx_in;
 8008830:	4a03      	ldr	r2, [pc, #12]	@ (8008840 <cdcDataIn+0x44>)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6013      	str	r3, [r2, #0]
    }
}
 8008836:	bf00      	nop
 8008838:	3714      	adds	r7, #20
 800883a:	46bd      	mov	sp, r7
 800883c:	bc80      	pop	{r7}
 800883e:	4770      	bx	lr
 8008840:	20000654 	.word	0x20000654
 8008844:	2000065c 	.word	0x2000065c
 8008848:	2000012c 	.word	0x2000012c
 800884c:	20000658 	.word	0x20000658

08008850 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
    uint32_t pre_time;
    uint8_t ret;

    pre_time = millis();
 800885a:	f7f7 fcfe 	bl	800025a <millis>
 800885e:	60f8      	str	r0, [r7, #12]
    while (1)
    {
        ret = CDC_Transmit_FS(p_data, length);
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	b29b      	uxth	r3, r3
 8008864:	4619      	mov	r1, r3
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f914 	bl	8008a94 <CDC_Transmit_FS>
 800886c:	4603      	mov	r3, r0
 800886e:	72fb      	strb	r3, [r7, #11]

        if (ret == USBD_OK)
 8008870:	7afb      	ldrb	r3, [r7, #11]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d101      	bne.n	800887a <cdcWrite+0x2a>
        {
            return length;
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	e00e      	b.n	8008898 <cdcWrite+0x48>
        }
        else if (ret == USBD_FAIL)
 800887a:	7afb      	ldrb	r3, [r7, #11]
 800887c:	2b02      	cmp	r3, #2
 800887e:	d101      	bne.n	8008884 <cdcWrite+0x34>
        {
            return 0;
 8008880:	2300      	movs	r3, #0
 8008882:	e009      	b.n	8008898 <cdcWrite+0x48>
        }

        if (millis() - pre_time >= 100)
 8008884:	f7f7 fce9 	bl	800025a <millis>
 8008888:	4602      	mov	r2, r0
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	2b63      	cmp	r3, #99	@ 0x63
 8008890:	d800      	bhi.n	8008894 <cdcWrite+0x44>
        ret = CDC_Transmit_FS(p_data, length);
 8008892:	e7e5      	b.n	8008860 <cdcWrite+0x10>
        {
            break;
 8008894:	bf00      	nop
        }
    }
    return 0;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80088a4:	2200      	movs	r2, #0
 80088a6:	4905      	ldr	r1, [pc, #20]	@ (80088bc <CDC_Init_FS+0x1c>)
 80088a8:	4805      	ldr	r0, [pc, #20]	@ (80088c0 <CDC_Init_FS+0x20>)
 80088aa:	f7fe fe17 	bl	80074dc <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80088ae:	4905      	ldr	r1, [pc, #20]	@ (80088c4 <CDC_Init_FS+0x24>)
 80088b0:	4803      	ldr	r0, [pc, #12]	@ (80088c0 <CDC_Init_FS+0x20>)
 80088b2:	f7fe fe2c 	bl	800750e <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 80088b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	20000a5c 	.word	0x20000a5c
 80088c0:	20000390 	.word	0x20000390
 80088c4:	2000085c 	.word	0x2000085c

080088c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80088c8:	b480      	push	{r7}
 80088ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
    return (USBD_OK);
 80088cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bc80      	pop	{r7}
 80088d4:	4770      	bx	lr
	...

080088d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	4603      	mov	r3, r0
 80088e0:	6039      	str	r1, [r7, #0]
 80088e2:	71fb      	strb	r3, [r7, #7]
 80088e4:	4613      	mov	r3, r2
 80088e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
    switch (cmd)
 80088e8:	79fb      	ldrb	r3, [r7, #7]
 80088ea:	2b23      	cmp	r3, #35	@ 0x23
 80088ec:	f200 80a3 	bhi.w	8008a36 <CDC_Control_FS+0x15e>
 80088f0:	a201      	add	r2, pc, #4	@ (adr r2, 80088f8 <CDC_Control_FS+0x20>)
 80088f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f6:	bf00      	nop
 80088f8:	08008a37 	.word	0x08008a37
 80088fc:	08008a37 	.word	0x08008a37
 8008900:	08008a37 	.word	0x08008a37
 8008904:	08008a37 	.word	0x08008a37
 8008908:	08008a37 	.word	0x08008a37
 800890c:	08008a37 	.word	0x08008a37
 8008910:	08008a37 	.word	0x08008a37
 8008914:	08008a37 	.word	0x08008a37
 8008918:	08008a37 	.word	0x08008a37
 800891c:	08008a37 	.word	0x08008a37
 8008920:	08008a37 	.word	0x08008a37
 8008924:	08008a37 	.word	0x08008a37
 8008928:	08008a37 	.word	0x08008a37
 800892c:	08008a37 	.word	0x08008a37
 8008930:	08008a37 	.word	0x08008a37
 8008934:	08008a37 	.word	0x08008a37
 8008938:	08008a37 	.word	0x08008a37
 800893c:	08008a37 	.word	0x08008a37
 8008940:	08008a37 	.word	0x08008a37
 8008944:	08008a37 	.word	0x08008a37
 8008948:	08008a37 	.word	0x08008a37
 800894c:	08008a37 	.word	0x08008a37
 8008950:	08008a37 	.word	0x08008a37
 8008954:	08008a37 	.word	0x08008a37
 8008958:	08008a37 	.word	0x08008a37
 800895c:	08008a37 	.word	0x08008a37
 8008960:	08008a37 	.word	0x08008a37
 8008964:	08008a37 	.word	0x08008a37
 8008968:	08008a37 	.word	0x08008a37
 800896c:	08008a37 	.word	0x08008a37
 8008970:	08008a37 	.word	0x08008a37
 8008974:	08008a37 	.word	0x08008a37
 8008978:	08008989 	.word	0x08008989
 800897c:	080089e3 	.word	0x080089e3
 8008980:	08008a37 	.word	0x08008a37
 8008984:	08008a37 	.word	0x08008a37
        /*                                        3 - Mark */
        /*                                        4 - Space */
        /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16). */
        /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        LineCoding.bitrate = (uint32_t)(pbuf[0]);
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	461a      	mov	r2, r3
 800898e:	4b2d      	ldr	r3, [pc, #180]	@ (8008a44 <CDC_Control_FS+0x16c>)
 8008990:	601a      	str	r2, [r3, #0]
        LineCoding.bitrate |= (uint32_t)(pbuf[1] << 8);
 8008992:	4b2c      	ldr	r3, [pc, #176]	@ (8008a44 <CDC_Control_FS+0x16c>)
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	3301      	adds	r3, #1
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	021b      	lsls	r3, r3, #8
 800899e:	4313      	orrs	r3, r2
 80089a0:	4a28      	ldr	r2, [pc, #160]	@ (8008a44 <CDC_Control_FS+0x16c>)
 80089a2:	6013      	str	r3, [r2, #0]
        LineCoding.bitrate |= (uint32_t)(pbuf[2] << 16);
 80089a4:	4b27      	ldr	r3, [pc, #156]	@ (8008a44 <CDC_Control_FS+0x16c>)
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	3302      	adds	r3, #2
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	041b      	lsls	r3, r3, #16
 80089b0:	4313      	orrs	r3, r2
 80089b2:	4a24      	ldr	r2, [pc, #144]	@ (8008a44 <CDC_Control_FS+0x16c>)
 80089b4:	6013      	str	r3, [r2, #0]
        LineCoding.bitrate |= (uint32_t)(pbuf[3] << 24);
 80089b6:	4b23      	ldr	r3, [pc, #140]	@ (8008a44 <CDC_Control_FS+0x16c>)
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	3303      	adds	r3, #3
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	061b      	lsls	r3, r3, #24
 80089c2:	4313      	orrs	r3, r2
 80089c4:	4a1f      	ldr	r2, [pc, #124]	@ (8008a44 <CDC_Control_FS+0x16c>)
 80089c6:	6013      	str	r3, [r2, #0]
        LineCoding.format     = pbuf[4];
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	791a      	ldrb	r2, [r3, #4]
 80089cc:	4b1d      	ldr	r3, [pc, #116]	@ (8008a44 <CDC_Control_FS+0x16c>)
 80089ce:	711a      	strb	r2, [r3, #4]
        LineCoding.paritytype = pbuf[5];
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	795a      	ldrb	r2, [r3, #5]
 80089d4:	4b1b      	ldr	r3, [pc, #108]	@ (8008a44 <CDC_Control_FS+0x16c>)
 80089d6:	715a      	strb	r2, [r3, #5]
        LineCoding.datatype   = pbuf[6];
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	799a      	ldrb	r2, [r3, #6]
 80089dc:	4b19      	ldr	r3, [pc, #100]	@ (8008a44 <CDC_Control_FS+0x16c>)
 80089de:	719a      	strb	r2, [r3, #6]
        break;
 80089e0:	e02a      	b.n	8008a38 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
        pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80089e2:	4b18      	ldr	r3, [pc, #96]	@ (8008a44 <CDC_Control_FS+0x16c>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	701a      	strb	r2, [r3, #0]
        pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 80089ec:	4b15      	ldr	r3, [pc, #84]	@ (8008a44 <CDC_Control_FS+0x16c>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	0a1a      	lsrs	r2, r3, #8
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	3301      	adds	r3, #1
 80089f6:	b2d2      	uxtb	r2, r2
 80089f8:	701a      	strb	r2, [r3, #0]
        pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 80089fa:	4b12      	ldr	r3, [pc, #72]	@ (8008a44 <CDC_Control_FS+0x16c>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	0c1a      	lsrs	r2, r3, #16
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	3302      	adds	r3, #2
 8008a04:	b2d2      	uxtb	r2, r2
 8008a06:	701a      	strb	r2, [r3, #0]
        pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8008a08:	4b0e      	ldr	r3, [pc, #56]	@ (8008a44 <CDC_Control_FS+0x16c>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	0e1a      	lsrs	r2, r3, #24
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	3303      	adds	r3, #3
 8008a12:	b2d2      	uxtb	r2, r2
 8008a14:	701a      	strb	r2, [r3, #0]
        pbuf[4] = LineCoding.format;
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	3304      	adds	r3, #4
 8008a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8008a44 <CDC_Control_FS+0x16c>)
 8008a1c:	7912      	ldrb	r2, [r2, #4]
 8008a1e:	701a      	strb	r2, [r3, #0]
        pbuf[5] = LineCoding.paritytype;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	3305      	adds	r3, #5
 8008a24:	4a07      	ldr	r2, [pc, #28]	@ (8008a44 <CDC_Control_FS+0x16c>)
 8008a26:	7952      	ldrb	r2, [r2, #5]
 8008a28:	701a      	strb	r2, [r3, #0]
        pbuf[6] = LineCoding.datatype;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	3306      	adds	r3, #6
 8008a2e:	4a05      	ldr	r2, [pc, #20]	@ (8008a44 <CDC_Control_FS+0x16c>)
 8008a30:	7992      	ldrb	r2, [r2, #6]
 8008a32:	701a      	strb	r2, [r3, #0]
        break;
 8008a34:	e000      	b.n	8008a38 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 8008a36:	bf00      	nop
    }

    return (USBD_OK);
 8008a38:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	370c      	adds	r7, #12
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bc80      	pop	{r7}
 8008a42:	4770      	bx	lr
 8008a44:	20000124 	.word	0x20000124

08008a48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008a52:	6879      	ldr	r1, [r7, #4]
 8008a54:	480e      	ldr	r0, [pc, #56]	@ (8008a90 <CDC_Receive_FS+0x48>)
 8008a56:	f7fe fd5a 	bl	800750e <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008a5a:	480d      	ldr	r0, [pc, #52]	@ (8008a90 <CDC_Receive_FS+0x48>)
 8008a5c:	f7fe fd99 	bl	8007592 <USBD_CDC_ReceivePacket>

    for (int i = 0; i < *Len; i++)
 8008a60:	2300      	movs	r3, #0
 8008a62:	60fb      	str	r3, [r7, #12]
 8008a64:	e009      	b.n	8008a7a <CDC_Receive_FS+0x32>
    {
        cdcDataIn(Buf[i]);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7ff fec4 	bl	80087fc <cdcDataIn>
    for (int i = 0; i < *Len; i++)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	3301      	adds	r3, #1
 8008a78:	60fb      	str	r3, [r7, #12]
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d8f0      	bhi.n	8008a66 <CDC_Receive_FS+0x1e>
    }

    return (USBD_OK);
 8008a84:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	20000390 	.word	0x20000390

08008a94 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef *hcdc =
 8008aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8008adc <CDC_Transmit_FS+0x48>)
 8008aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008aaa:	60bb      	str	r3, [r7, #8]
        (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
    if (hcdc->TxState != 0)
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d001      	beq.n	8008aba <CDC_Transmit_FS+0x26>
    {
        return USBD_BUSY;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e00b      	b.n	8008ad2 <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008aba:	887b      	ldrh	r3, [r7, #2]
 8008abc:	461a      	mov	r2, r3
 8008abe:	6879      	ldr	r1, [r7, #4]
 8008ac0:	4806      	ldr	r0, [pc, #24]	@ (8008adc <CDC_Transmit_FS+0x48>)
 8008ac2:	f7fe fd0b 	bl	80074dc <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008ac6:	4805      	ldr	r0, [pc, #20]	@ (8008adc <CDC_Transmit_FS+0x48>)
 8008ac8:	f7fe fd34 	bl	8007534 <USBD_CDC_TransmitPacket>
 8008acc:	4603      	mov	r3, r0
 8008ace:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	20000390 	.word	0x20000390

08008ae0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	6039      	str	r1, [r7, #0]
 8008aea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	2212      	movs	r2, #18
 8008af0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008af2:	4b03      	ldr	r3, [pc, #12]	@ (8008b00 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bc80      	pop	{r7}
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	2000015c 	.word	0x2000015c

08008b04 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	6039      	str	r1, [r7, #0]
 8008b0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	2204      	movs	r2, #4
 8008b14:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008b16:	4b03      	ldr	r3, [pc, #12]	@ (8008b24 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bc80      	pop	{r7}
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	20000170 	.word	0x20000170

08008b28 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	4603      	mov	r3, r0
 8008b30:	6039      	str	r1, [r7, #0]
 8008b32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b34:	79fb      	ldrb	r3, [r7, #7]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d105      	bne.n	8008b46 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b3a:	683a      	ldr	r2, [r7, #0]
 8008b3c:	4907      	ldr	r1, [pc, #28]	@ (8008b5c <USBD_FS_ProductStrDescriptor+0x34>)
 8008b3e:	4808      	ldr	r0, [pc, #32]	@ (8008b60 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b40:	f7ff fd0b 	bl	800855a <USBD_GetString>
 8008b44:	e004      	b.n	8008b50 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b46:	683a      	ldr	r2, [r7, #0]
 8008b48:	4904      	ldr	r1, [pc, #16]	@ (8008b5c <USBD_FS_ProductStrDescriptor+0x34>)
 8008b4a:	4805      	ldr	r0, [pc, #20]	@ (8008b60 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b4c:	f7ff fd05 	bl	800855a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b50:	4b02      	ldr	r3, [pc, #8]	@ (8008b5c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	20000c5c 	.word	0x20000c5c
 8008b60:	08009c30 	.word	0x08009c30

08008b64 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	6039      	str	r1, [r7, #0]
 8008b6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008b70:	683a      	ldr	r2, [r7, #0]
 8008b72:	4904      	ldr	r1, [pc, #16]	@ (8008b84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008b74:	4804      	ldr	r0, [pc, #16]	@ (8008b88 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008b76:	f7ff fcf0 	bl	800855a <USBD_GetString>
  return USBD_StrDesc;
 8008b7a:	4b02      	ldr	r3, [pc, #8]	@ (8008b84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3708      	adds	r7, #8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	20000c5c 	.word	0x20000c5c
 8008b88:	08009c48 	.word	0x08009c48

08008b8c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	4603      	mov	r3, r0
 8008b94:	6039      	str	r1, [r7, #0]
 8008b96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	221a      	movs	r2, #26
 8008b9c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b9e:	f000 f843 	bl	8008c28 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008ba2:	4b02      	ldr	r3, [pc, #8]	@ (8008bac <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3708      	adds	r7, #8
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	20000174 	.word	0x20000174

08008bb0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	6039      	str	r1, [r7, #0]
 8008bba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008bbc:	79fb      	ldrb	r3, [r7, #7]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d105      	bne.n	8008bce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008bc2:	683a      	ldr	r2, [r7, #0]
 8008bc4:	4907      	ldr	r1, [pc, #28]	@ (8008be4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008bc6:	4808      	ldr	r0, [pc, #32]	@ (8008be8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008bc8:	f7ff fcc7 	bl	800855a <USBD_GetString>
 8008bcc:	e004      	b.n	8008bd8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008bce:	683a      	ldr	r2, [r7, #0]
 8008bd0:	4904      	ldr	r1, [pc, #16]	@ (8008be4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008bd2:	4805      	ldr	r0, [pc, #20]	@ (8008be8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008bd4:	f7ff fcc1 	bl	800855a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bd8:	4b02      	ldr	r3, [pc, #8]	@ (8008be4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	20000c5c 	.word	0x20000c5c
 8008be8:	08009c5c 	.word	0x08009c5c

08008bec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	6039      	str	r1, [r7, #0]
 8008bf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008bf8:	79fb      	ldrb	r3, [r7, #7]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d105      	bne.n	8008c0a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008bfe:	683a      	ldr	r2, [r7, #0]
 8008c00:	4907      	ldr	r1, [pc, #28]	@ (8008c20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c02:	4808      	ldr	r0, [pc, #32]	@ (8008c24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c04:	f7ff fca9 	bl	800855a <USBD_GetString>
 8008c08:	e004      	b.n	8008c14 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c0a:	683a      	ldr	r2, [r7, #0]
 8008c0c:	4904      	ldr	r1, [pc, #16]	@ (8008c20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c0e:	4805      	ldr	r0, [pc, #20]	@ (8008c24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c10:	f7ff fca3 	bl	800855a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c14:	4b02      	ldr	r3, [pc, #8]	@ (8008c20 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3708      	adds	r7, #8
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	20000c5c 	.word	0x20000c5c
 8008c24:	08009c68 	.word	0x08009c68

08008c28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8008c6c <Get_SerialNum+0x44>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c34:	4b0e      	ldr	r3, [pc, #56]	@ (8008c70 <Get_SerialNum+0x48>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8008c74 <Get_SerialNum+0x4c>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4413      	add	r3, r2
 8008c46:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d009      	beq.n	8008c62 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c4e:	2208      	movs	r2, #8
 8008c50:	4909      	ldr	r1, [pc, #36]	@ (8008c78 <Get_SerialNum+0x50>)
 8008c52:	68f8      	ldr	r0, [r7, #12]
 8008c54:	f000 f814 	bl	8008c80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c58:	2204      	movs	r2, #4
 8008c5a:	4908      	ldr	r1, [pc, #32]	@ (8008c7c <Get_SerialNum+0x54>)
 8008c5c:	68b8      	ldr	r0, [r7, #8]
 8008c5e:	f000 f80f 	bl	8008c80 <IntToUnicode>
  }
}
 8008c62:	bf00      	nop
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	1ffff7e8 	.word	0x1ffff7e8
 8008c70:	1ffff7ec 	.word	0x1ffff7ec
 8008c74:	1ffff7f0 	.word	0x1ffff7f0
 8008c78:	20000176 	.word	0x20000176
 8008c7c:	20000186 	.word	0x20000186

08008c80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b087      	sub	sp, #28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c92:	2300      	movs	r3, #0
 8008c94:	75fb      	strb	r3, [r7, #23]
 8008c96:	e027      	b.n	8008ce8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	0f1b      	lsrs	r3, r3, #28
 8008c9c:	2b09      	cmp	r3, #9
 8008c9e:	d80b      	bhi.n	8008cb8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	0f1b      	lsrs	r3, r3, #28
 8008ca4:	b2da      	uxtb	r2, r3
 8008ca6:	7dfb      	ldrb	r3, [r7, #23]
 8008ca8:	005b      	lsls	r3, r3, #1
 8008caa:	4619      	mov	r1, r3
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	440b      	add	r3, r1
 8008cb0:	3230      	adds	r2, #48	@ 0x30
 8008cb2:	b2d2      	uxtb	r2, r2
 8008cb4:	701a      	strb	r2, [r3, #0]
 8008cb6:	e00a      	b.n	8008cce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	0f1b      	lsrs	r3, r3, #28
 8008cbc:	b2da      	uxtb	r2, r3
 8008cbe:	7dfb      	ldrb	r3, [r7, #23]
 8008cc0:	005b      	lsls	r3, r3, #1
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	440b      	add	r3, r1
 8008cc8:	3237      	adds	r2, #55	@ 0x37
 8008cca:	b2d2      	uxtb	r2, r2
 8008ccc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	011b      	lsls	r3, r3, #4
 8008cd2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008cd4:	7dfb      	ldrb	r3, [r7, #23]
 8008cd6:	005b      	lsls	r3, r3, #1
 8008cd8:	3301      	adds	r3, #1
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	4413      	add	r3, r2
 8008cde:	2200      	movs	r2, #0
 8008ce0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008ce2:	7dfb      	ldrb	r3, [r7, #23]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	75fb      	strb	r3, [r7, #23]
 8008ce8:	7dfa      	ldrb	r2, [r7, #23]
 8008cea:	79fb      	ldrb	r3, [r7, #7]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d3d3      	bcc.n	8008c98 <IntToUnicode+0x18>
  }
}
 8008cf0:	bf00      	nop
 8008cf2:	bf00      	nop
 8008cf4:	371c      	adds	r7, #28
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bc80      	pop	{r7}
 8008cfa:	4770      	bx	lr

08008cfc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a0d      	ldr	r2, [pc, #52]	@ (8008d40 <HAL_PCD_MspInit+0x44>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d113      	bne.n	8008d36 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8008d44 <HAL_PCD_MspInit+0x48>)
 8008d10:	69db      	ldr	r3, [r3, #28]
 8008d12:	4a0c      	ldr	r2, [pc, #48]	@ (8008d44 <HAL_PCD_MspInit+0x48>)
 8008d14:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008d18:	61d3      	str	r3, [r2, #28]
 8008d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8008d44 <HAL_PCD_MspInit+0x48>)
 8008d1c:	69db      	ldr	r3, [r3, #28]
 8008d1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d22:	60fb      	str	r3, [r7, #12]
 8008d24:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008d26:	2200      	movs	r2, #0
 8008d28:	2100      	movs	r1, #0
 8008d2a:	2014      	movs	r0, #20
 8008d2c:	f7f8 f8c9 	bl	8000ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008d30:	2014      	movs	r0, #20
 8008d32:	f7f8 f8e2 	bl	8000efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008d36:	bf00      	nop
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	40005c00 	.word	0x40005c00
 8008d44:	40021000 	.word	0x40021000

08008d48 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	4610      	mov	r0, r2
 8008d60:	f7fe fccd 	bl	80076fe <USBD_LL_SetupStage>
}
 8008d64:	bf00      	nop
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	460b      	mov	r3, r1
 8008d76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008d7e:	78fa      	ldrb	r2, [r7, #3]
 8008d80:	6879      	ldr	r1, [r7, #4]
 8008d82:	4613      	mov	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4413      	add	r3, r2
 8008d88:	00db      	lsls	r3, r3, #3
 8008d8a:	440b      	add	r3, r1
 8008d8c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	78fb      	ldrb	r3, [r7, #3]
 8008d94:	4619      	mov	r1, r3
 8008d96:	f7fe fcff 	bl	8007798 <USBD_LL_DataOutStage>
}
 8008d9a:	bf00      	nop
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b082      	sub	sp, #8
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
 8008daa:	460b      	mov	r3, r1
 8008dac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008db4:	78fa      	ldrb	r2, [r7, #3]
 8008db6:	6879      	ldr	r1, [r7, #4]
 8008db8:	4613      	mov	r3, r2
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	4413      	add	r3, r2
 8008dbe:	00db      	lsls	r3, r3, #3
 8008dc0:	440b      	add	r3, r1
 8008dc2:	3324      	adds	r3, #36	@ 0x24
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	78fb      	ldrb	r3, [r7, #3]
 8008dc8:	4619      	mov	r1, r3
 8008dca:	f7fe fd56 	bl	800787a <USBD_LL_DataInStage>
}
 8008dce:	bf00      	nop
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b082      	sub	sp, #8
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7fe fe66 	bl	8007ab6 <USBD_LL_SOF>
}
 8008dea:	bf00      	nop
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b084      	sub	sp, #16
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	799b      	ldrb	r3, [r3, #6]
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d001      	beq.n	8008e0a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e06:	f7f7 fa8e 	bl	8000326 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e10:	7bfa      	ldrb	r2, [r7, #15]
 8008e12:	4611      	mov	r1, r2
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7fe fe16 	bl	8007a46 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7fe fdcf 	bl	80079c4 <USBD_LL_Reset>
}
 8008e26:	bf00      	nop
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
	...

08008e30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7fe fe10 	bl	8007a64 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	7a9b      	ldrb	r3, [r3, #10]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d005      	beq.n	8008e58 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e4c:	4b04      	ldr	r3, [pc, #16]	@ (8008e60 <HAL_PCD_SuspendCallback+0x30>)
 8008e4e:	691b      	ldr	r3, [r3, #16]
 8008e50:	4a03      	ldr	r2, [pc, #12]	@ (8008e60 <HAL_PCD_SuspendCallback+0x30>)
 8008e52:	f043 0306 	orr.w	r3, r3, #6
 8008e56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008e58:	bf00      	nop
 8008e5a:	3708      	adds	r7, #8
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	e000ed00 	.word	0xe000ed00

08008e64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7fe fe0a 	bl	8007a8c <USBD_LL_Resume>
}
 8008e78:	bf00      	nop
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008e88:	4a28      	ldr	r2, [pc, #160]	@ (8008f2c <USBD_LL_Init+0xac>)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a26      	ldr	r2, [pc, #152]	@ (8008f2c <USBD_LL_Init+0xac>)
 8008e94:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008e98:	4b24      	ldr	r3, [pc, #144]	@ (8008f2c <USBD_LL_Init+0xac>)
 8008e9a:	4a25      	ldr	r2, [pc, #148]	@ (8008f30 <USBD_LL_Init+0xb0>)
 8008e9c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008e9e:	4b23      	ldr	r3, [pc, #140]	@ (8008f2c <USBD_LL_Init+0xac>)
 8008ea0:	2208      	movs	r2, #8
 8008ea2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008ea4:	4b21      	ldr	r3, [pc, #132]	@ (8008f2c <USBD_LL_Init+0xac>)
 8008ea6:	2202      	movs	r2, #2
 8008ea8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008eaa:	4b20      	ldr	r3, [pc, #128]	@ (8008f2c <USBD_LL_Init+0xac>)
 8008eac:	2200      	movs	r2, #0
 8008eae:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008eb0:	4b1e      	ldr	r3, [pc, #120]	@ (8008f2c <USBD_LL_Init+0xac>)
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8008f2c <USBD_LL_Init+0xac>)
 8008eb8:	2200      	movs	r2, #0
 8008eba:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008ebc:	481b      	ldr	r0, [pc, #108]	@ (8008f2c <USBD_LL_Init+0xac>)
 8008ebe:	f7f8 fa9e 	bl	80013fe <HAL_PCD_Init>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d001      	beq.n	8008ecc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008ec8:	f7f7 fa2d 	bl	8000326 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008ed2:	2318      	movs	r3, #24
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	f7f9 ffaf 	bl	8002e3a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008ee2:	2358      	movs	r3, #88	@ 0x58
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	2180      	movs	r1, #128	@ 0x80
 8008ee8:	f7f9 ffa7 	bl	8002e3a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008ef2:	23c0      	movs	r3, #192	@ 0xc0
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	2181      	movs	r1, #129	@ 0x81
 8008ef8:	f7f9 ff9f 	bl	8002e3a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008f02:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008f06:	2200      	movs	r2, #0
 8008f08:	2101      	movs	r1, #1
 8008f0a:	f7f9 ff96 	bl	8002e3a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008f14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008f18:	2200      	movs	r2, #0
 8008f1a:	2182      	movs	r1, #130	@ 0x82
 8008f1c:	f7f9 ff8d 	bl	8002e3a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	20000e5c 	.word	0x20000e5c
 8008f30:	40005c00 	.word	0x40005c00

08008f34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7f8 fb4d 	bl	80015ea <HAL_PCD_Start>
 8008f50:	4603      	mov	r3, r0
 8008f52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f54:	7bfb      	ldrb	r3, [r7, #15]
 8008f56:	4618      	mov	r0, r3
 8008f58:	f000 f94e 	bl	80091f8 <USBD_Get_USB_Status>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f60:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3710      	adds	r7, #16
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b084      	sub	sp, #16
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
 8008f72:	4608      	mov	r0, r1
 8008f74:	4611      	mov	r1, r2
 8008f76:	461a      	mov	r2, r3
 8008f78:	4603      	mov	r3, r0
 8008f7a:	70fb      	strb	r3, [r7, #3]
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	70bb      	strb	r3, [r7, #2]
 8008f80:	4613      	mov	r3, r2
 8008f82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f84:	2300      	movs	r3, #0
 8008f86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008f92:	78bb      	ldrb	r3, [r7, #2]
 8008f94:	883a      	ldrh	r2, [r7, #0]
 8008f96:	78f9      	ldrb	r1, [r7, #3]
 8008f98:	f7f8 fca1 	bl	80018de <HAL_PCD_EP_Open>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f000 f928 	bl	80091f8 <USBD_Get_USB_Status>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fac:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b084      	sub	sp, #16
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008fd0:	78fa      	ldrb	r2, [r7, #3]
 8008fd2:	4611      	mov	r1, r2
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7f8 fcdf 	bl	8001998 <HAL_PCD_EP_Close>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fde:	7bfb      	ldrb	r3, [r7, #15]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f000 f909 	bl	80091f8 <USBD_Get_USB_Status>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fea:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009000:	2300      	movs	r3, #0
 8009002:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009004:	2300      	movs	r3, #0
 8009006:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800900e:	78fa      	ldrb	r2, [r7, #3]
 8009010:	4611      	mov	r1, r2
 8009012:	4618      	mov	r0, r3
 8009014:	f7f8 fd87 	bl	8001b26 <HAL_PCD_EP_SetStall>
 8009018:	4603      	mov	r3, r0
 800901a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800901c:	7bfb      	ldrb	r3, [r7, #15]
 800901e:	4618      	mov	r0, r3
 8009020:	f000 f8ea 	bl	80091f8 <USBD_Get_USB_Status>
 8009024:	4603      	mov	r3, r0
 8009026:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009028:	7bbb      	ldrb	r3, [r7, #14]
}
 800902a:	4618      	mov	r0, r3
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b084      	sub	sp, #16
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
 800903a:	460b      	mov	r3, r1
 800903c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800903e:	2300      	movs	r3, #0
 8009040:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009042:	2300      	movs	r3, #0
 8009044:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800904c:	78fa      	ldrb	r2, [r7, #3]
 800904e:	4611      	mov	r1, r2
 8009050:	4618      	mov	r0, r3
 8009052:	f7f8 fdc8 	bl	8001be6 <HAL_PCD_EP_ClrStall>
 8009056:	4603      	mov	r3, r0
 8009058:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800905a:	7bfb      	ldrb	r3, [r7, #15]
 800905c:	4618      	mov	r0, r3
 800905e:	f000 f8cb 	bl	80091f8 <USBD_Get_USB_Status>
 8009062:	4603      	mov	r3, r0
 8009064:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009066:	7bbb      	ldrb	r3, [r7, #14]
}
 8009068:	4618      	mov	r0, r3
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009070:	b480      	push	{r7}
 8009072:	b085      	sub	sp, #20
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	460b      	mov	r3, r1
 800907a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009082:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009088:	2b00      	cmp	r3, #0
 800908a:	da0b      	bge.n	80090a4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800908c:	78fb      	ldrb	r3, [r7, #3]
 800908e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009092:	68f9      	ldr	r1, [r7, #12]
 8009094:	4613      	mov	r3, r2
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	4413      	add	r3, r2
 800909a:	00db      	lsls	r3, r3, #3
 800909c:	440b      	add	r3, r1
 800909e:	3312      	adds	r3, #18
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	e00b      	b.n	80090bc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80090a4:	78fb      	ldrb	r3, [r7, #3]
 80090a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090aa:	68f9      	ldr	r1, [r7, #12]
 80090ac:	4613      	mov	r3, r2
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	4413      	add	r3, r2
 80090b2:	00db      	lsls	r3, r3, #3
 80090b4:	440b      	add	r3, r1
 80090b6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80090ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3714      	adds	r7, #20
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bc80      	pop	{r7}
 80090c4:	4770      	bx	lr

080090c6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b084      	sub	sp, #16
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
 80090ce:	460b      	mov	r3, r1
 80090d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090d2:	2300      	movs	r3, #0
 80090d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090d6:	2300      	movs	r3, #0
 80090d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80090e0:	78fa      	ldrb	r2, [r7, #3]
 80090e2:	4611      	mov	r1, r2
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7f8 fbd6 	bl	8001896 <HAL_PCD_SetAddress>
 80090ea:	4603      	mov	r3, r0
 80090ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090ee:	7bfb      	ldrb	r3, [r7, #15]
 80090f0:	4618      	mov	r0, r3
 80090f2:	f000 f881 	bl	80091f8 <USBD_Get_USB_Status>
 80090f6:	4603      	mov	r3, r0
 80090f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b086      	sub	sp, #24
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	607a      	str	r2, [r7, #4]
 800910e:	461a      	mov	r2, r3
 8009110:	460b      	mov	r3, r1
 8009112:	72fb      	strb	r3, [r7, #11]
 8009114:	4613      	mov	r3, r2
 8009116:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009118:	2300      	movs	r3, #0
 800911a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800911c:	2300      	movs	r3, #0
 800911e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009126:	893b      	ldrh	r3, [r7, #8]
 8009128:	7af9      	ldrb	r1, [r7, #11]
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	f7f8 fcc4 	bl	8001ab8 <HAL_PCD_EP_Transmit>
 8009130:	4603      	mov	r3, r0
 8009132:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009134:	7dfb      	ldrb	r3, [r7, #23]
 8009136:	4618      	mov	r0, r3
 8009138:	f000 f85e 	bl	80091f8 <USBD_Get_USB_Status>
 800913c:	4603      	mov	r3, r0
 800913e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009140:	7dbb      	ldrb	r3, [r7, #22]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3718      	adds	r7, #24
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b086      	sub	sp, #24
 800914e:	af00      	add	r7, sp, #0
 8009150:	60f8      	str	r0, [r7, #12]
 8009152:	607a      	str	r2, [r7, #4]
 8009154:	461a      	mov	r2, r3
 8009156:	460b      	mov	r3, r1
 8009158:	72fb      	strb	r3, [r7, #11]
 800915a:	4613      	mov	r3, r2
 800915c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800915e:	2300      	movs	r3, #0
 8009160:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009162:	2300      	movs	r3, #0
 8009164:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800916c:	893b      	ldrh	r3, [r7, #8]
 800916e:	7af9      	ldrb	r1, [r7, #11]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	f7f8 fc59 	bl	8001a28 <HAL_PCD_EP_Receive>
 8009176:	4603      	mov	r3, r0
 8009178:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800917a:	7dfb      	ldrb	r3, [r7, #23]
 800917c:	4618      	mov	r0, r3
 800917e:	f000 f83b 	bl	80091f8 <USBD_Get_USB_Status>
 8009182:	4603      	mov	r3, r0
 8009184:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009186:	7dbb      	ldrb	r3, [r7, #22]
}
 8009188:	4618      	mov	r0, r3
 800918a:	3718      	adds	r7, #24
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	460b      	mov	r3, r1
 800919a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80091a2:	78fa      	ldrb	r2, [r7, #3]
 80091a4:	4611      	mov	r1, r2
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7f8 fc6f 	bl	8001a8a <HAL_PCD_EP_GetRxCount>
 80091ac:	4603      	mov	r3, r0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
	...

080091b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80091c0:	4b02      	ldr	r3, [pc, #8]	@ (80091cc <USBD_static_malloc+0x14>)
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	370c      	adds	r7, #12
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bc80      	pop	{r7}
 80091ca:	4770      	bx	lr
 80091cc:	20001134 	.word	0x20001134

080091d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]

}
 80091d8:	bf00      	nop
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	bc80      	pop	{r7}
 80091e0:	4770      	bx	lr

080091e2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091e2:	b480      	push	{r7}
 80091e4:	b083      	sub	sp, #12
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
 80091ea:	460b      	mov	r3, r1
 80091ec:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80091ee:	bf00      	nop
 80091f0:	370c      	adds	r7, #12
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bc80      	pop	{r7}
 80091f6:	4770      	bx	lr

080091f8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	4603      	mov	r3, r0
 8009200:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009202:	2300      	movs	r3, #0
 8009204:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009206:	79fb      	ldrb	r3, [r7, #7]
 8009208:	2b03      	cmp	r3, #3
 800920a:	d817      	bhi.n	800923c <USBD_Get_USB_Status+0x44>
 800920c:	a201      	add	r2, pc, #4	@ (adr r2, 8009214 <USBD_Get_USB_Status+0x1c>)
 800920e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009212:	bf00      	nop
 8009214:	08009225 	.word	0x08009225
 8009218:	0800922b 	.word	0x0800922b
 800921c:	08009231 	.word	0x08009231
 8009220:	08009237 	.word	0x08009237
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009224:	2300      	movs	r3, #0
 8009226:	73fb      	strb	r3, [r7, #15]
    break;
 8009228:	e00b      	b.n	8009242 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800922a:	2302      	movs	r3, #2
 800922c:	73fb      	strb	r3, [r7, #15]
    break;
 800922e:	e008      	b.n	8009242 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009230:	2301      	movs	r3, #1
 8009232:	73fb      	strb	r3, [r7, #15]
    break;
 8009234:	e005      	b.n	8009242 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009236:	2302      	movs	r3, #2
 8009238:	73fb      	strb	r3, [r7, #15]
    break;
 800923a:	e002      	b.n	8009242 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800923c:	2302      	movs	r3, #2
 800923e:	73fb      	strb	r3, [r7, #15]
    break;
 8009240:	bf00      	nop
  }
  return usb_status;
 8009242:	7bfb      	ldrb	r3, [r7, #15]
}
 8009244:	4618      	mov	r0, r3
 8009246:	3714      	adds	r7, #20
 8009248:	46bd      	mov	sp, r7
 800924a:	bc80      	pop	{r7}
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop

08009250 <main>:
 */

#include "main.h"

int main(void)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	af00      	add	r7, sp, #0

    hwInit();
 8009254:	f7f7 fcc8 	bl	8000be8 <hwInit>
    apInit();
 8009258:	f7f6 ff78 	bl	800014c <apInit>

    apMain();
 800925c:	f7f6 ff84 	bl	8000168 <apMain>

    return 0;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	bd80      	pop	{r7, pc}

08009266 <_vsniprintf_r>:
 8009266:	b530      	push	{r4, r5, lr}
 8009268:	4614      	mov	r4, r2
 800926a:	2c00      	cmp	r4, #0
 800926c:	4605      	mov	r5, r0
 800926e:	461a      	mov	r2, r3
 8009270:	b09b      	sub	sp, #108	@ 0x6c
 8009272:	da05      	bge.n	8009280 <_vsniprintf_r+0x1a>
 8009274:	238b      	movs	r3, #139	@ 0x8b
 8009276:	6003      	str	r3, [r0, #0]
 8009278:	f04f 30ff 	mov.w	r0, #4294967295
 800927c:	b01b      	add	sp, #108	@ 0x6c
 800927e:	bd30      	pop	{r4, r5, pc}
 8009280:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009284:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009288:	bf0c      	ite	eq
 800928a:	4623      	moveq	r3, r4
 800928c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009290:	9302      	str	r3, [sp, #8]
 8009292:	9305      	str	r3, [sp, #20]
 8009294:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009298:	9100      	str	r1, [sp, #0]
 800929a:	9104      	str	r1, [sp, #16]
 800929c:	f8ad 300e 	strh.w	r3, [sp, #14]
 80092a0:	4669      	mov	r1, sp
 80092a2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80092a4:	f000 f99e 	bl	80095e4 <_svfiprintf_r>
 80092a8:	1c43      	adds	r3, r0, #1
 80092aa:	bfbc      	itt	lt
 80092ac:	238b      	movlt	r3, #139	@ 0x8b
 80092ae:	602b      	strlt	r3, [r5, #0]
 80092b0:	2c00      	cmp	r4, #0
 80092b2:	d0e3      	beq.n	800927c <_vsniprintf_r+0x16>
 80092b4:	2200      	movs	r2, #0
 80092b6:	9b00      	ldr	r3, [sp, #0]
 80092b8:	701a      	strb	r2, [r3, #0]
 80092ba:	e7df      	b.n	800927c <_vsniprintf_r+0x16>

080092bc <vsniprintf>:
 80092bc:	b507      	push	{r0, r1, r2, lr}
 80092be:	9300      	str	r3, [sp, #0]
 80092c0:	4613      	mov	r3, r2
 80092c2:	460a      	mov	r2, r1
 80092c4:	4601      	mov	r1, r0
 80092c6:	4803      	ldr	r0, [pc, #12]	@ (80092d4 <vsniprintf+0x18>)
 80092c8:	6800      	ldr	r0, [r0, #0]
 80092ca:	f7ff ffcc 	bl	8009266 <_vsniprintf_r>
 80092ce:	b003      	add	sp, #12
 80092d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80092d4:	20000190 	.word	0x20000190

080092d8 <memset>:
 80092d8:	4603      	mov	r3, r0
 80092da:	4402      	add	r2, r0
 80092dc:	4293      	cmp	r3, r2
 80092de:	d100      	bne.n	80092e2 <memset+0xa>
 80092e0:	4770      	bx	lr
 80092e2:	f803 1b01 	strb.w	r1, [r3], #1
 80092e6:	e7f9      	b.n	80092dc <memset+0x4>

080092e8 <__errno>:
 80092e8:	4b01      	ldr	r3, [pc, #4]	@ (80092f0 <__errno+0x8>)
 80092ea:	6818      	ldr	r0, [r3, #0]
 80092ec:	4770      	bx	lr
 80092ee:	bf00      	nop
 80092f0:	20000190 	.word	0x20000190

080092f4 <__libc_init_array>:
 80092f4:	b570      	push	{r4, r5, r6, lr}
 80092f6:	2600      	movs	r6, #0
 80092f8:	4d0c      	ldr	r5, [pc, #48]	@ (800932c <__libc_init_array+0x38>)
 80092fa:	4c0d      	ldr	r4, [pc, #52]	@ (8009330 <__libc_init_array+0x3c>)
 80092fc:	1b64      	subs	r4, r4, r5
 80092fe:	10a4      	asrs	r4, r4, #2
 8009300:	42a6      	cmp	r6, r4
 8009302:	d109      	bne.n	8009318 <__libc_init_array+0x24>
 8009304:	f000 fc78 	bl	8009bf8 <_init>
 8009308:	2600      	movs	r6, #0
 800930a:	4d0a      	ldr	r5, [pc, #40]	@ (8009334 <__libc_init_array+0x40>)
 800930c:	4c0a      	ldr	r4, [pc, #40]	@ (8009338 <__libc_init_array+0x44>)
 800930e:	1b64      	subs	r4, r4, r5
 8009310:	10a4      	asrs	r4, r4, #2
 8009312:	42a6      	cmp	r6, r4
 8009314:	d105      	bne.n	8009322 <__libc_init_array+0x2e>
 8009316:	bd70      	pop	{r4, r5, r6, pc}
 8009318:	f855 3b04 	ldr.w	r3, [r5], #4
 800931c:	4798      	blx	r3
 800931e:	3601      	adds	r6, #1
 8009320:	e7ee      	b.n	8009300 <__libc_init_array+0xc>
 8009322:	f855 3b04 	ldr.w	r3, [r5], #4
 8009326:	4798      	blx	r3
 8009328:	3601      	adds	r6, #1
 800932a:	e7f2      	b.n	8009312 <__libc_init_array+0x1e>
 800932c:	08009cec 	.word	0x08009cec
 8009330:	08009cec 	.word	0x08009cec
 8009334:	08009cec 	.word	0x08009cec
 8009338:	08009cf0 	.word	0x08009cf0

0800933c <__retarget_lock_acquire_recursive>:
 800933c:	4770      	bx	lr

0800933e <__retarget_lock_release_recursive>:
 800933e:	4770      	bx	lr

08009340 <_free_r>:
 8009340:	b538      	push	{r3, r4, r5, lr}
 8009342:	4605      	mov	r5, r0
 8009344:	2900      	cmp	r1, #0
 8009346:	d040      	beq.n	80093ca <_free_r+0x8a>
 8009348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800934c:	1f0c      	subs	r4, r1, #4
 800934e:	2b00      	cmp	r3, #0
 8009350:	bfb8      	it	lt
 8009352:	18e4      	addlt	r4, r4, r3
 8009354:	f000 f8de 	bl	8009514 <__malloc_lock>
 8009358:	4a1c      	ldr	r2, [pc, #112]	@ (80093cc <_free_r+0x8c>)
 800935a:	6813      	ldr	r3, [r2, #0]
 800935c:	b933      	cbnz	r3, 800936c <_free_r+0x2c>
 800935e:	6063      	str	r3, [r4, #4]
 8009360:	6014      	str	r4, [r2, #0]
 8009362:	4628      	mov	r0, r5
 8009364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009368:	f000 b8da 	b.w	8009520 <__malloc_unlock>
 800936c:	42a3      	cmp	r3, r4
 800936e:	d908      	bls.n	8009382 <_free_r+0x42>
 8009370:	6820      	ldr	r0, [r4, #0]
 8009372:	1821      	adds	r1, r4, r0
 8009374:	428b      	cmp	r3, r1
 8009376:	bf01      	itttt	eq
 8009378:	6819      	ldreq	r1, [r3, #0]
 800937a:	685b      	ldreq	r3, [r3, #4]
 800937c:	1809      	addeq	r1, r1, r0
 800937e:	6021      	streq	r1, [r4, #0]
 8009380:	e7ed      	b.n	800935e <_free_r+0x1e>
 8009382:	461a      	mov	r2, r3
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	b10b      	cbz	r3, 800938c <_free_r+0x4c>
 8009388:	42a3      	cmp	r3, r4
 800938a:	d9fa      	bls.n	8009382 <_free_r+0x42>
 800938c:	6811      	ldr	r1, [r2, #0]
 800938e:	1850      	adds	r0, r2, r1
 8009390:	42a0      	cmp	r0, r4
 8009392:	d10b      	bne.n	80093ac <_free_r+0x6c>
 8009394:	6820      	ldr	r0, [r4, #0]
 8009396:	4401      	add	r1, r0
 8009398:	1850      	adds	r0, r2, r1
 800939a:	4283      	cmp	r3, r0
 800939c:	6011      	str	r1, [r2, #0]
 800939e:	d1e0      	bne.n	8009362 <_free_r+0x22>
 80093a0:	6818      	ldr	r0, [r3, #0]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	4408      	add	r0, r1
 80093a6:	6010      	str	r0, [r2, #0]
 80093a8:	6053      	str	r3, [r2, #4]
 80093aa:	e7da      	b.n	8009362 <_free_r+0x22>
 80093ac:	d902      	bls.n	80093b4 <_free_r+0x74>
 80093ae:	230c      	movs	r3, #12
 80093b0:	602b      	str	r3, [r5, #0]
 80093b2:	e7d6      	b.n	8009362 <_free_r+0x22>
 80093b4:	6820      	ldr	r0, [r4, #0]
 80093b6:	1821      	adds	r1, r4, r0
 80093b8:	428b      	cmp	r3, r1
 80093ba:	bf01      	itttt	eq
 80093bc:	6819      	ldreq	r1, [r3, #0]
 80093be:	685b      	ldreq	r3, [r3, #4]
 80093c0:	1809      	addeq	r1, r1, r0
 80093c2:	6021      	streq	r1, [r4, #0]
 80093c4:	6063      	str	r3, [r4, #4]
 80093c6:	6054      	str	r4, [r2, #4]
 80093c8:	e7cb      	b.n	8009362 <_free_r+0x22>
 80093ca:	bd38      	pop	{r3, r4, r5, pc}
 80093cc:	20001498 	.word	0x20001498

080093d0 <sbrk_aligned>:
 80093d0:	b570      	push	{r4, r5, r6, lr}
 80093d2:	4e0f      	ldr	r6, [pc, #60]	@ (8009410 <sbrk_aligned+0x40>)
 80093d4:	460c      	mov	r4, r1
 80093d6:	6831      	ldr	r1, [r6, #0]
 80093d8:	4605      	mov	r5, r0
 80093da:	b911      	cbnz	r1, 80093e2 <sbrk_aligned+0x12>
 80093dc:	f000 fbaa 	bl	8009b34 <_sbrk_r>
 80093e0:	6030      	str	r0, [r6, #0]
 80093e2:	4621      	mov	r1, r4
 80093e4:	4628      	mov	r0, r5
 80093e6:	f000 fba5 	bl	8009b34 <_sbrk_r>
 80093ea:	1c43      	adds	r3, r0, #1
 80093ec:	d103      	bne.n	80093f6 <sbrk_aligned+0x26>
 80093ee:	f04f 34ff 	mov.w	r4, #4294967295
 80093f2:	4620      	mov	r0, r4
 80093f4:	bd70      	pop	{r4, r5, r6, pc}
 80093f6:	1cc4      	adds	r4, r0, #3
 80093f8:	f024 0403 	bic.w	r4, r4, #3
 80093fc:	42a0      	cmp	r0, r4
 80093fe:	d0f8      	beq.n	80093f2 <sbrk_aligned+0x22>
 8009400:	1a21      	subs	r1, r4, r0
 8009402:	4628      	mov	r0, r5
 8009404:	f000 fb96 	bl	8009b34 <_sbrk_r>
 8009408:	3001      	adds	r0, #1
 800940a:	d1f2      	bne.n	80093f2 <sbrk_aligned+0x22>
 800940c:	e7ef      	b.n	80093ee <sbrk_aligned+0x1e>
 800940e:	bf00      	nop
 8009410:	20001494 	.word	0x20001494

08009414 <_malloc_r>:
 8009414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009418:	1ccd      	adds	r5, r1, #3
 800941a:	f025 0503 	bic.w	r5, r5, #3
 800941e:	3508      	adds	r5, #8
 8009420:	2d0c      	cmp	r5, #12
 8009422:	bf38      	it	cc
 8009424:	250c      	movcc	r5, #12
 8009426:	2d00      	cmp	r5, #0
 8009428:	4606      	mov	r6, r0
 800942a:	db01      	blt.n	8009430 <_malloc_r+0x1c>
 800942c:	42a9      	cmp	r1, r5
 800942e:	d904      	bls.n	800943a <_malloc_r+0x26>
 8009430:	230c      	movs	r3, #12
 8009432:	6033      	str	r3, [r6, #0]
 8009434:	2000      	movs	r0, #0
 8009436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800943a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009510 <_malloc_r+0xfc>
 800943e:	f000 f869 	bl	8009514 <__malloc_lock>
 8009442:	f8d8 3000 	ldr.w	r3, [r8]
 8009446:	461c      	mov	r4, r3
 8009448:	bb44      	cbnz	r4, 800949c <_malloc_r+0x88>
 800944a:	4629      	mov	r1, r5
 800944c:	4630      	mov	r0, r6
 800944e:	f7ff ffbf 	bl	80093d0 <sbrk_aligned>
 8009452:	1c43      	adds	r3, r0, #1
 8009454:	4604      	mov	r4, r0
 8009456:	d158      	bne.n	800950a <_malloc_r+0xf6>
 8009458:	f8d8 4000 	ldr.w	r4, [r8]
 800945c:	4627      	mov	r7, r4
 800945e:	2f00      	cmp	r7, #0
 8009460:	d143      	bne.n	80094ea <_malloc_r+0xd6>
 8009462:	2c00      	cmp	r4, #0
 8009464:	d04b      	beq.n	80094fe <_malloc_r+0xea>
 8009466:	6823      	ldr	r3, [r4, #0]
 8009468:	4639      	mov	r1, r7
 800946a:	4630      	mov	r0, r6
 800946c:	eb04 0903 	add.w	r9, r4, r3
 8009470:	f000 fb60 	bl	8009b34 <_sbrk_r>
 8009474:	4581      	cmp	r9, r0
 8009476:	d142      	bne.n	80094fe <_malloc_r+0xea>
 8009478:	6821      	ldr	r1, [r4, #0]
 800947a:	4630      	mov	r0, r6
 800947c:	1a6d      	subs	r5, r5, r1
 800947e:	4629      	mov	r1, r5
 8009480:	f7ff ffa6 	bl	80093d0 <sbrk_aligned>
 8009484:	3001      	adds	r0, #1
 8009486:	d03a      	beq.n	80094fe <_malloc_r+0xea>
 8009488:	6823      	ldr	r3, [r4, #0]
 800948a:	442b      	add	r3, r5
 800948c:	6023      	str	r3, [r4, #0]
 800948e:	f8d8 3000 	ldr.w	r3, [r8]
 8009492:	685a      	ldr	r2, [r3, #4]
 8009494:	bb62      	cbnz	r2, 80094f0 <_malloc_r+0xdc>
 8009496:	f8c8 7000 	str.w	r7, [r8]
 800949a:	e00f      	b.n	80094bc <_malloc_r+0xa8>
 800949c:	6822      	ldr	r2, [r4, #0]
 800949e:	1b52      	subs	r2, r2, r5
 80094a0:	d420      	bmi.n	80094e4 <_malloc_r+0xd0>
 80094a2:	2a0b      	cmp	r2, #11
 80094a4:	d917      	bls.n	80094d6 <_malloc_r+0xc2>
 80094a6:	1961      	adds	r1, r4, r5
 80094a8:	42a3      	cmp	r3, r4
 80094aa:	6025      	str	r5, [r4, #0]
 80094ac:	bf18      	it	ne
 80094ae:	6059      	strne	r1, [r3, #4]
 80094b0:	6863      	ldr	r3, [r4, #4]
 80094b2:	bf08      	it	eq
 80094b4:	f8c8 1000 	streq.w	r1, [r8]
 80094b8:	5162      	str	r2, [r4, r5]
 80094ba:	604b      	str	r3, [r1, #4]
 80094bc:	4630      	mov	r0, r6
 80094be:	f000 f82f 	bl	8009520 <__malloc_unlock>
 80094c2:	f104 000b 	add.w	r0, r4, #11
 80094c6:	1d23      	adds	r3, r4, #4
 80094c8:	f020 0007 	bic.w	r0, r0, #7
 80094cc:	1ac2      	subs	r2, r0, r3
 80094ce:	bf1c      	itt	ne
 80094d0:	1a1b      	subne	r3, r3, r0
 80094d2:	50a3      	strne	r3, [r4, r2]
 80094d4:	e7af      	b.n	8009436 <_malloc_r+0x22>
 80094d6:	6862      	ldr	r2, [r4, #4]
 80094d8:	42a3      	cmp	r3, r4
 80094da:	bf0c      	ite	eq
 80094dc:	f8c8 2000 	streq.w	r2, [r8]
 80094e0:	605a      	strne	r2, [r3, #4]
 80094e2:	e7eb      	b.n	80094bc <_malloc_r+0xa8>
 80094e4:	4623      	mov	r3, r4
 80094e6:	6864      	ldr	r4, [r4, #4]
 80094e8:	e7ae      	b.n	8009448 <_malloc_r+0x34>
 80094ea:	463c      	mov	r4, r7
 80094ec:	687f      	ldr	r7, [r7, #4]
 80094ee:	e7b6      	b.n	800945e <_malloc_r+0x4a>
 80094f0:	461a      	mov	r2, r3
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	42a3      	cmp	r3, r4
 80094f6:	d1fb      	bne.n	80094f0 <_malloc_r+0xdc>
 80094f8:	2300      	movs	r3, #0
 80094fa:	6053      	str	r3, [r2, #4]
 80094fc:	e7de      	b.n	80094bc <_malloc_r+0xa8>
 80094fe:	230c      	movs	r3, #12
 8009500:	4630      	mov	r0, r6
 8009502:	6033      	str	r3, [r6, #0]
 8009504:	f000 f80c 	bl	8009520 <__malloc_unlock>
 8009508:	e794      	b.n	8009434 <_malloc_r+0x20>
 800950a:	6005      	str	r5, [r0, #0]
 800950c:	e7d6      	b.n	80094bc <_malloc_r+0xa8>
 800950e:	bf00      	nop
 8009510:	20001498 	.word	0x20001498

08009514 <__malloc_lock>:
 8009514:	4801      	ldr	r0, [pc, #4]	@ (800951c <__malloc_lock+0x8>)
 8009516:	f7ff bf11 	b.w	800933c <__retarget_lock_acquire_recursive>
 800951a:	bf00      	nop
 800951c:	20001490 	.word	0x20001490

08009520 <__malloc_unlock>:
 8009520:	4801      	ldr	r0, [pc, #4]	@ (8009528 <__malloc_unlock+0x8>)
 8009522:	f7ff bf0c 	b.w	800933e <__retarget_lock_release_recursive>
 8009526:	bf00      	nop
 8009528:	20001490 	.word	0x20001490

0800952c <__ssputs_r>:
 800952c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009530:	461f      	mov	r7, r3
 8009532:	688e      	ldr	r6, [r1, #8]
 8009534:	4682      	mov	sl, r0
 8009536:	42be      	cmp	r6, r7
 8009538:	460c      	mov	r4, r1
 800953a:	4690      	mov	r8, r2
 800953c:	680b      	ldr	r3, [r1, #0]
 800953e:	d82d      	bhi.n	800959c <__ssputs_r+0x70>
 8009540:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009544:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009548:	d026      	beq.n	8009598 <__ssputs_r+0x6c>
 800954a:	6965      	ldr	r5, [r4, #20]
 800954c:	6909      	ldr	r1, [r1, #16]
 800954e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009552:	eba3 0901 	sub.w	r9, r3, r1
 8009556:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800955a:	1c7b      	adds	r3, r7, #1
 800955c:	444b      	add	r3, r9
 800955e:	106d      	asrs	r5, r5, #1
 8009560:	429d      	cmp	r5, r3
 8009562:	bf38      	it	cc
 8009564:	461d      	movcc	r5, r3
 8009566:	0553      	lsls	r3, r2, #21
 8009568:	d527      	bpl.n	80095ba <__ssputs_r+0x8e>
 800956a:	4629      	mov	r1, r5
 800956c:	f7ff ff52 	bl	8009414 <_malloc_r>
 8009570:	4606      	mov	r6, r0
 8009572:	b360      	cbz	r0, 80095ce <__ssputs_r+0xa2>
 8009574:	464a      	mov	r2, r9
 8009576:	6921      	ldr	r1, [r4, #16]
 8009578:	f000 fafa 	bl	8009b70 <memcpy>
 800957c:	89a3      	ldrh	r3, [r4, #12]
 800957e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009582:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009586:	81a3      	strh	r3, [r4, #12]
 8009588:	6126      	str	r6, [r4, #16]
 800958a:	444e      	add	r6, r9
 800958c:	6026      	str	r6, [r4, #0]
 800958e:	463e      	mov	r6, r7
 8009590:	6165      	str	r5, [r4, #20]
 8009592:	eba5 0509 	sub.w	r5, r5, r9
 8009596:	60a5      	str	r5, [r4, #8]
 8009598:	42be      	cmp	r6, r7
 800959a:	d900      	bls.n	800959e <__ssputs_r+0x72>
 800959c:	463e      	mov	r6, r7
 800959e:	4632      	mov	r2, r6
 80095a0:	4641      	mov	r1, r8
 80095a2:	6820      	ldr	r0, [r4, #0]
 80095a4:	f000 faac 	bl	8009b00 <memmove>
 80095a8:	2000      	movs	r0, #0
 80095aa:	68a3      	ldr	r3, [r4, #8]
 80095ac:	1b9b      	subs	r3, r3, r6
 80095ae:	60a3      	str	r3, [r4, #8]
 80095b0:	6823      	ldr	r3, [r4, #0]
 80095b2:	4433      	add	r3, r6
 80095b4:	6023      	str	r3, [r4, #0]
 80095b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ba:	462a      	mov	r2, r5
 80095bc:	f000 fae6 	bl	8009b8c <_realloc_r>
 80095c0:	4606      	mov	r6, r0
 80095c2:	2800      	cmp	r0, #0
 80095c4:	d1e0      	bne.n	8009588 <__ssputs_r+0x5c>
 80095c6:	4650      	mov	r0, sl
 80095c8:	6921      	ldr	r1, [r4, #16]
 80095ca:	f7ff feb9 	bl	8009340 <_free_r>
 80095ce:	230c      	movs	r3, #12
 80095d0:	f8ca 3000 	str.w	r3, [sl]
 80095d4:	89a3      	ldrh	r3, [r4, #12]
 80095d6:	f04f 30ff 	mov.w	r0, #4294967295
 80095da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095de:	81a3      	strh	r3, [r4, #12]
 80095e0:	e7e9      	b.n	80095b6 <__ssputs_r+0x8a>
	...

080095e4 <_svfiprintf_r>:
 80095e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e8:	4698      	mov	r8, r3
 80095ea:	898b      	ldrh	r3, [r1, #12]
 80095ec:	4607      	mov	r7, r0
 80095ee:	061b      	lsls	r3, r3, #24
 80095f0:	460d      	mov	r5, r1
 80095f2:	4614      	mov	r4, r2
 80095f4:	b09d      	sub	sp, #116	@ 0x74
 80095f6:	d510      	bpl.n	800961a <_svfiprintf_r+0x36>
 80095f8:	690b      	ldr	r3, [r1, #16]
 80095fa:	b973      	cbnz	r3, 800961a <_svfiprintf_r+0x36>
 80095fc:	2140      	movs	r1, #64	@ 0x40
 80095fe:	f7ff ff09 	bl	8009414 <_malloc_r>
 8009602:	6028      	str	r0, [r5, #0]
 8009604:	6128      	str	r0, [r5, #16]
 8009606:	b930      	cbnz	r0, 8009616 <_svfiprintf_r+0x32>
 8009608:	230c      	movs	r3, #12
 800960a:	603b      	str	r3, [r7, #0]
 800960c:	f04f 30ff 	mov.w	r0, #4294967295
 8009610:	b01d      	add	sp, #116	@ 0x74
 8009612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009616:	2340      	movs	r3, #64	@ 0x40
 8009618:	616b      	str	r3, [r5, #20]
 800961a:	2300      	movs	r3, #0
 800961c:	9309      	str	r3, [sp, #36]	@ 0x24
 800961e:	2320      	movs	r3, #32
 8009620:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009624:	2330      	movs	r3, #48	@ 0x30
 8009626:	f04f 0901 	mov.w	r9, #1
 800962a:	f8cd 800c 	str.w	r8, [sp, #12]
 800962e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80097c8 <_svfiprintf_r+0x1e4>
 8009632:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009636:	4623      	mov	r3, r4
 8009638:	469a      	mov	sl, r3
 800963a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800963e:	b10a      	cbz	r2, 8009644 <_svfiprintf_r+0x60>
 8009640:	2a25      	cmp	r2, #37	@ 0x25
 8009642:	d1f9      	bne.n	8009638 <_svfiprintf_r+0x54>
 8009644:	ebba 0b04 	subs.w	fp, sl, r4
 8009648:	d00b      	beq.n	8009662 <_svfiprintf_r+0x7e>
 800964a:	465b      	mov	r3, fp
 800964c:	4622      	mov	r2, r4
 800964e:	4629      	mov	r1, r5
 8009650:	4638      	mov	r0, r7
 8009652:	f7ff ff6b 	bl	800952c <__ssputs_r>
 8009656:	3001      	adds	r0, #1
 8009658:	f000 80a7 	beq.w	80097aa <_svfiprintf_r+0x1c6>
 800965c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800965e:	445a      	add	r2, fp
 8009660:	9209      	str	r2, [sp, #36]	@ 0x24
 8009662:	f89a 3000 	ldrb.w	r3, [sl]
 8009666:	2b00      	cmp	r3, #0
 8009668:	f000 809f 	beq.w	80097aa <_svfiprintf_r+0x1c6>
 800966c:	2300      	movs	r3, #0
 800966e:	f04f 32ff 	mov.w	r2, #4294967295
 8009672:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009676:	f10a 0a01 	add.w	sl, sl, #1
 800967a:	9304      	str	r3, [sp, #16]
 800967c:	9307      	str	r3, [sp, #28]
 800967e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009682:	931a      	str	r3, [sp, #104]	@ 0x68
 8009684:	4654      	mov	r4, sl
 8009686:	2205      	movs	r2, #5
 8009688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800968c:	484e      	ldr	r0, [pc, #312]	@ (80097c8 <_svfiprintf_r+0x1e4>)
 800968e:	f000 fa61 	bl	8009b54 <memchr>
 8009692:	9a04      	ldr	r2, [sp, #16]
 8009694:	b9d8      	cbnz	r0, 80096ce <_svfiprintf_r+0xea>
 8009696:	06d0      	lsls	r0, r2, #27
 8009698:	bf44      	itt	mi
 800969a:	2320      	movmi	r3, #32
 800969c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096a0:	0711      	lsls	r1, r2, #28
 80096a2:	bf44      	itt	mi
 80096a4:	232b      	movmi	r3, #43	@ 0x2b
 80096a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096aa:	f89a 3000 	ldrb.w	r3, [sl]
 80096ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80096b0:	d015      	beq.n	80096de <_svfiprintf_r+0xfa>
 80096b2:	4654      	mov	r4, sl
 80096b4:	2000      	movs	r0, #0
 80096b6:	f04f 0c0a 	mov.w	ip, #10
 80096ba:	9a07      	ldr	r2, [sp, #28]
 80096bc:	4621      	mov	r1, r4
 80096be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096c2:	3b30      	subs	r3, #48	@ 0x30
 80096c4:	2b09      	cmp	r3, #9
 80096c6:	d94b      	bls.n	8009760 <_svfiprintf_r+0x17c>
 80096c8:	b1b0      	cbz	r0, 80096f8 <_svfiprintf_r+0x114>
 80096ca:	9207      	str	r2, [sp, #28]
 80096cc:	e014      	b.n	80096f8 <_svfiprintf_r+0x114>
 80096ce:	eba0 0308 	sub.w	r3, r0, r8
 80096d2:	fa09 f303 	lsl.w	r3, r9, r3
 80096d6:	4313      	orrs	r3, r2
 80096d8:	46a2      	mov	sl, r4
 80096da:	9304      	str	r3, [sp, #16]
 80096dc:	e7d2      	b.n	8009684 <_svfiprintf_r+0xa0>
 80096de:	9b03      	ldr	r3, [sp, #12]
 80096e0:	1d19      	adds	r1, r3, #4
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	9103      	str	r1, [sp, #12]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	bfbb      	ittet	lt
 80096ea:	425b      	neglt	r3, r3
 80096ec:	f042 0202 	orrlt.w	r2, r2, #2
 80096f0:	9307      	strge	r3, [sp, #28]
 80096f2:	9307      	strlt	r3, [sp, #28]
 80096f4:	bfb8      	it	lt
 80096f6:	9204      	strlt	r2, [sp, #16]
 80096f8:	7823      	ldrb	r3, [r4, #0]
 80096fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80096fc:	d10a      	bne.n	8009714 <_svfiprintf_r+0x130>
 80096fe:	7863      	ldrb	r3, [r4, #1]
 8009700:	2b2a      	cmp	r3, #42	@ 0x2a
 8009702:	d132      	bne.n	800976a <_svfiprintf_r+0x186>
 8009704:	9b03      	ldr	r3, [sp, #12]
 8009706:	3402      	adds	r4, #2
 8009708:	1d1a      	adds	r2, r3, #4
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	9203      	str	r2, [sp, #12]
 800970e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009712:	9305      	str	r3, [sp, #20]
 8009714:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80097cc <_svfiprintf_r+0x1e8>
 8009718:	2203      	movs	r2, #3
 800971a:	4650      	mov	r0, sl
 800971c:	7821      	ldrb	r1, [r4, #0]
 800971e:	f000 fa19 	bl	8009b54 <memchr>
 8009722:	b138      	cbz	r0, 8009734 <_svfiprintf_r+0x150>
 8009724:	2240      	movs	r2, #64	@ 0x40
 8009726:	9b04      	ldr	r3, [sp, #16]
 8009728:	eba0 000a 	sub.w	r0, r0, sl
 800972c:	4082      	lsls	r2, r0
 800972e:	4313      	orrs	r3, r2
 8009730:	3401      	adds	r4, #1
 8009732:	9304      	str	r3, [sp, #16]
 8009734:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009738:	2206      	movs	r2, #6
 800973a:	4825      	ldr	r0, [pc, #148]	@ (80097d0 <_svfiprintf_r+0x1ec>)
 800973c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009740:	f000 fa08 	bl	8009b54 <memchr>
 8009744:	2800      	cmp	r0, #0
 8009746:	d036      	beq.n	80097b6 <_svfiprintf_r+0x1d2>
 8009748:	4b22      	ldr	r3, [pc, #136]	@ (80097d4 <_svfiprintf_r+0x1f0>)
 800974a:	bb1b      	cbnz	r3, 8009794 <_svfiprintf_r+0x1b0>
 800974c:	9b03      	ldr	r3, [sp, #12]
 800974e:	3307      	adds	r3, #7
 8009750:	f023 0307 	bic.w	r3, r3, #7
 8009754:	3308      	adds	r3, #8
 8009756:	9303      	str	r3, [sp, #12]
 8009758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800975a:	4433      	add	r3, r6
 800975c:	9309      	str	r3, [sp, #36]	@ 0x24
 800975e:	e76a      	b.n	8009636 <_svfiprintf_r+0x52>
 8009760:	460c      	mov	r4, r1
 8009762:	2001      	movs	r0, #1
 8009764:	fb0c 3202 	mla	r2, ip, r2, r3
 8009768:	e7a8      	b.n	80096bc <_svfiprintf_r+0xd8>
 800976a:	2300      	movs	r3, #0
 800976c:	f04f 0c0a 	mov.w	ip, #10
 8009770:	4619      	mov	r1, r3
 8009772:	3401      	adds	r4, #1
 8009774:	9305      	str	r3, [sp, #20]
 8009776:	4620      	mov	r0, r4
 8009778:	f810 2b01 	ldrb.w	r2, [r0], #1
 800977c:	3a30      	subs	r2, #48	@ 0x30
 800977e:	2a09      	cmp	r2, #9
 8009780:	d903      	bls.n	800978a <_svfiprintf_r+0x1a6>
 8009782:	2b00      	cmp	r3, #0
 8009784:	d0c6      	beq.n	8009714 <_svfiprintf_r+0x130>
 8009786:	9105      	str	r1, [sp, #20]
 8009788:	e7c4      	b.n	8009714 <_svfiprintf_r+0x130>
 800978a:	4604      	mov	r4, r0
 800978c:	2301      	movs	r3, #1
 800978e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009792:	e7f0      	b.n	8009776 <_svfiprintf_r+0x192>
 8009794:	ab03      	add	r3, sp, #12
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	462a      	mov	r2, r5
 800979a:	4638      	mov	r0, r7
 800979c:	4b0e      	ldr	r3, [pc, #56]	@ (80097d8 <_svfiprintf_r+0x1f4>)
 800979e:	a904      	add	r1, sp, #16
 80097a0:	f3af 8000 	nop.w
 80097a4:	1c42      	adds	r2, r0, #1
 80097a6:	4606      	mov	r6, r0
 80097a8:	d1d6      	bne.n	8009758 <_svfiprintf_r+0x174>
 80097aa:	89ab      	ldrh	r3, [r5, #12]
 80097ac:	065b      	lsls	r3, r3, #25
 80097ae:	f53f af2d 	bmi.w	800960c <_svfiprintf_r+0x28>
 80097b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097b4:	e72c      	b.n	8009610 <_svfiprintf_r+0x2c>
 80097b6:	ab03      	add	r3, sp, #12
 80097b8:	9300      	str	r3, [sp, #0]
 80097ba:	462a      	mov	r2, r5
 80097bc:	4638      	mov	r0, r7
 80097be:	4b06      	ldr	r3, [pc, #24]	@ (80097d8 <_svfiprintf_r+0x1f4>)
 80097c0:	a904      	add	r1, sp, #16
 80097c2:	f000 f87d 	bl	80098c0 <_printf_i>
 80097c6:	e7ed      	b.n	80097a4 <_svfiprintf_r+0x1c0>
 80097c8:	08009cb6 	.word	0x08009cb6
 80097cc:	08009cbc 	.word	0x08009cbc
 80097d0:	08009cc0 	.word	0x08009cc0
 80097d4:	00000000 	.word	0x00000000
 80097d8:	0800952d 	.word	0x0800952d

080097dc <_printf_common>:
 80097dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097e0:	4616      	mov	r6, r2
 80097e2:	4698      	mov	r8, r3
 80097e4:	688a      	ldr	r2, [r1, #8]
 80097e6:	690b      	ldr	r3, [r1, #16]
 80097e8:	4607      	mov	r7, r0
 80097ea:	4293      	cmp	r3, r2
 80097ec:	bfb8      	it	lt
 80097ee:	4613      	movlt	r3, r2
 80097f0:	6033      	str	r3, [r6, #0]
 80097f2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80097f6:	460c      	mov	r4, r1
 80097f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80097fc:	b10a      	cbz	r2, 8009802 <_printf_common+0x26>
 80097fe:	3301      	adds	r3, #1
 8009800:	6033      	str	r3, [r6, #0]
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	0699      	lsls	r1, r3, #26
 8009806:	bf42      	ittt	mi
 8009808:	6833      	ldrmi	r3, [r6, #0]
 800980a:	3302      	addmi	r3, #2
 800980c:	6033      	strmi	r3, [r6, #0]
 800980e:	6825      	ldr	r5, [r4, #0]
 8009810:	f015 0506 	ands.w	r5, r5, #6
 8009814:	d106      	bne.n	8009824 <_printf_common+0x48>
 8009816:	f104 0a19 	add.w	sl, r4, #25
 800981a:	68e3      	ldr	r3, [r4, #12]
 800981c:	6832      	ldr	r2, [r6, #0]
 800981e:	1a9b      	subs	r3, r3, r2
 8009820:	42ab      	cmp	r3, r5
 8009822:	dc2b      	bgt.n	800987c <_printf_common+0xa0>
 8009824:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009828:	6822      	ldr	r2, [r4, #0]
 800982a:	3b00      	subs	r3, #0
 800982c:	bf18      	it	ne
 800982e:	2301      	movne	r3, #1
 8009830:	0692      	lsls	r2, r2, #26
 8009832:	d430      	bmi.n	8009896 <_printf_common+0xba>
 8009834:	4641      	mov	r1, r8
 8009836:	4638      	mov	r0, r7
 8009838:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800983c:	47c8      	blx	r9
 800983e:	3001      	adds	r0, #1
 8009840:	d023      	beq.n	800988a <_printf_common+0xae>
 8009842:	6823      	ldr	r3, [r4, #0]
 8009844:	6922      	ldr	r2, [r4, #16]
 8009846:	f003 0306 	and.w	r3, r3, #6
 800984a:	2b04      	cmp	r3, #4
 800984c:	bf14      	ite	ne
 800984e:	2500      	movne	r5, #0
 8009850:	6833      	ldreq	r3, [r6, #0]
 8009852:	f04f 0600 	mov.w	r6, #0
 8009856:	bf08      	it	eq
 8009858:	68e5      	ldreq	r5, [r4, #12]
 800985a:	f104 041a 	add.w	r4, r4, #26
 800985e:	bf08      	it	eq
 8009860:	1aed      	subeq	r5, r5, r3
 8009862:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009866:	bf08      	it	eq
 8009868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800986c:	4293      	cmp	r3, r2
 800986e:	bfc4      	itt	gt
 8009870:	1a9b      	subgt	r3, r3, r2
 8009872:	18ed      	addgt	r5, r5, r3
 8009874:	42b5      	cmp	r5, r6
 8009876:	d11a      	bne.n	80098ae <_printf_common+0xd2>
 8009878:	2000      	movs	r0, #0
 800987a:	e008      	b.n	800988e <_printf_common+0xb2>
 800987c:	2301      	movs	r3, #1
 800987e:	4652      	mov	r2, sl
 8009880:	4641      	mov	r1, r8
 8009882:	4638      	mov	r0, r7
 8009884:	47c8      	blx	r9
 8009886:	3001      	adds	r0, #1
 8009888:	d103      	bne.n	8009892 <_printf_common+0xb6>
 800988a:	f04f 30ff 	mov.w	r0, #4294967295
 800988e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009892:	3501      	adds	r5, #1
 8009894:	e7c1      	b.n	800981a <_printf_common+0x3e>
 8009896:	2030      	movs	r0, #48	@ 0x30
 8009898:	18e1      	adds	r1, r4, r3
 800989a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800989e:	1c5a      	adds	r2, r3, #1
 80098a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80098a4:	4422      	add	r2, r4
 80098a6:	3302      	adds	r3, #2
 80098a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80098ac:	e7c2      	b.n	8009834 <_printf_common+0x58>
 80098ae:	2301      	movs	r3, #1
 80098b0:	4622      	mov	r2, r4
 80098b2:	4641      	mov	r1, r8
 80098b4:	4638      	mov	r0, r7
 80098b6:	47c8      	blx	r9
 80098b8:	3001      	adds	r0, #1
 80098ba:	d0e6      	beq.n	800988a <_printf_common+0xae>
 80098bc:	3601      	adds	r6, #1
 80098be:	e7d9      	b.n	8009874 <_printf_common+0x98>

080098c0 <_printf_i>:
 80098c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098c4:	7e0f      	ldrb	r7, [r1, #24]
 80098c6:	4691      	mov	r9, r2
 80098c8:	2f78      	cmp	r7, #120	@ 0x78
 80098ca:	4680      	mov	r8, r0
 80098cc:	460c      	mov	r4, r1
 80098ce:	469a      	mov	sl, r3
 80098d0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80098d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80098d6:	d807      	bhi.n	80098e8 <_printf_i+0x28>
 80098d8:	2f62      	cmp	r7, #98	@ 0x62
 80098da:	d80a      	bhi.n	80098f2 <_printf_i+0x32>
 80098dc:	2f00      	cmp	r7, #0
 80098de:	f000 80d3 	beq.w	8009a88 <_printf_i+0x1c8>
 80098e2:	2f58      	cmp	r7, #88	@ 0x58
 80098e4:	f000 80ba 	beq.w	8009a5c <_printf_i+0x19c>
 80098e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80098ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80098f0:	e03a      	b.n	8009968 <_printf_i+0xa8>
 80098f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80098f6:	2b15      	cmp	r3, #21
 80098f8:	d8f6      	bhi.n	80098e8 <_printf_i+0x28>
 80098fa:	a101      	add	r1, pc, #4	@ (adr r1, 8009900 <_printf_i+0x40>)
 80098fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009900:	08009959 	.word	0x08009959
 8009904:	0800996d 	.word	0x0800996d
 8009908:	080098e9 	.word	0x080098e9
 800990c:	080098e9 	.word	0x080098e9
 8009910:	080098e9 	.word	0x080098e9
 8009914:	080098e9 	.word	0x080098e9
 8009918:	0800996d 	.word	0x0800996d
 800991c:	080098e9 	.word	0x080098e9
 8009920:	080098e9 	.word	0x080098e9
 8009924:	080098e9 	.word	0x080098e9
 8009928:	080098e9 	.word	0x080098e9
 800992c:	08009a6f 	.word	0x08009a6f
 8009930:	08009997 	.word	0x08009997
 8009934:	08009a29 	.word	0x08009a29
 8009938:	080098e9 	.word	0x080098e9
 800993c:	080098e9 	.word	0x080098e9
 8009940:	08009a91 	.word	0x08009a91
 8009944:	080098e9 	.word	0x080098e9
 8009948:	08009997 	.word	0x08009997
 800994c:	080098e9 	.word	0x080098e9
 8009950:	080098e9 	.word	0x080098e9
 8009954:	08009a31 	.word	0x08009a31
 8009958:	6833      	ldr	r3, [r6, #0]
 800995a:	1d1a      	adds	r2, r3, #4
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	6032      	str	r2, [r6, #0]
 8009960:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009964:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009968:	2301      	movs	r3, #1
 800996a:	e09e      	b.n	8009aaa <_printf_i+0x1ea>
 800996c:	6833      	ldr	r3, [r6, #0]
 800996e:	6820      	ldr	r0, [r4, #0]
 8009970:	1d19      	adds	r1, r3, #4
 8009972:	6031      	str	r1, [r6, #0]
 8009974:	0606      	lsls	r6, r0, #24
 8009976:	d501      	bpl.n	800997c <_printf_i+0xbc>
 8009978:	681d      	ldr	r5, [r3, #0]
 800997a:	e003      	b.n	8009984 <_printf_i+0xc4>
 800997c:	0645      	lsls	r5, r0, #25
 800997e:	d5fb      	bpl.n	8009978 <_printf_i+0xb8>
 8009980:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009984:	2d00      	cmp	r5, #0
 8009986:	da03      	bge.n	8009990 <_printf_i+0xd0>
 8009988:	232d      	movs	r3, #45	@ 0x2d
 800998a:	426d      	negs	r5, r5
 800998c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009990:	230a      	movs	r3, #10
 8009992:	4859      	ldr	r0, [pc, #356]	@ (8009af8 <_printf_i+0x238>)
 8009994:	e011      	b.n	80099ba <_printf_i+0xfa>
 8009996:	6821      	ldr	r1, [r4, #0]
 8009998:	6833      	ldr	r3, [r6, #0]
 800999a:	0608      	lsls	r0, r1, #24
 800999c:	f853 5b04 	ldr.w	r5, [r3], #4
 80099a0:	d402      	bmi.n	80099a8 <_printf_i+0xe8>
 80099a2:	0649      	lsls	r1, r1, #25
 80099a4:	bf48      	it	mi
 80099a6:	b2ad      	uxthmi	r5, r5
 80099a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80099aa:	6033      	str	r3, [r6, #0]
 80099ac:	bf14      	ite	ne
 80099ae:	230a      	movne	r3, #10
 80099b0:	2308      	moveq	r3, #8
 80099b2:	4851      	ldr	r0, [pc, #324]	@ (8009af8 <_printf_i+0x238>)
 80099b4:	2100      	movs	r1, #0
 80099b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80099ba:	6866      	ldr	r6, [r4, #4]
 80099bc:	2e00      	cmp	r6, #0
 80099be:	bfa8      	it	ge
 80099c0:	6821      	ldrge	r1, [r4, #0]
 80099c2:	60a6      	str	r6, [r4, #8]
 80099c4:	bfa4      	itt	ge
 80099c6:	f021 0104 	bicge.w	r1, r1, #4
 80099ca:	6021      	strge	r1, [r4, #0]
 80099cc:	b90d      	cbnz	r5, 80099d2 <_printf_i+0x112>
 80099ce:	2e00      	cmp	r6, #0
 80099d0:	d04b      	beq.n	8009a6a <_printf_i+0x1aa>
 80099d2:	4616      	mov	r6, r2
 80099d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80099d8:	fb03 5711 	mls	r7, r3, r1, r5
 80099dc:	5dc7      	ldrb	r7, [r0, r7]
 80099de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80099e2:	462f      	mov	r7, r5
 80099e4:	42bb      	cmp	r3, r7
 80099e6:	460d      	mov	r5, r1
 80099e8:	d9f4      	bls.n	80099d4 <_printf_i+0x114>
 80099ea:	2b08      	cmp	r3, #8
 80099ec:	d10b      	bne.n	8009a06 <_printf_i+0x146>
 80099ee:	6823      	ldr	r3, [r4, #0]
 80099f0:	07df      	lsls	r7, r3, #31
 80099f2:	d508      	bpl.n	8009a06 <_printf_i+0x146>
 80099f4:	6923      	ldr	r3, [r4, #16]
 80099f6:	6861      	ldr	r1, [r4, #4]
 80099f8:	4299      	cmp	r1, r3
 80099fa:	bfde      	ittt	le
 80099fc:	2330      	movle	r3, #48	@ 0x30
 80099fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009a06:	1b92      	subs	r2, r2, r6
 8009a08:	6122      	str	r2, [r4, #16]
 8009a0a:	464b      	mov	r3, r9
 8009a0c:	4621      	mov	r1, r4
 8009a0e:	4640      	mov	r0, r8
 8009a10:	f8cd a000 	str.w	sl, [sp]
 8009a14:	aa03      	add	r2, sp, #12
 8009a16:	f7ff fee1 	bl	80097dc <_printf_common>
 8009a1a:	3001      	adds	r0, #1
 8009a1c:	d14a      	bne.n	8009ab4 <_printf_i+0x1f4>
 8009a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a22:	b004      	add	sp, #16
 8009a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a28:	6823      	ldr	r3, [r4, #0]
 8009a2a:	f043 0320 	orr.w	r3, r3, #32
 8009a2e:	6023      	str	r3, [r4, #0]
 8009a30:	2778      	movs	r7, #120	@ 0x78
 8009a32:	4832      	ldr	r0, [pc, #200]	@ (8009afc <_printf_i+0x23c>)
 8009a34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009a38:	6823      	ldr	r3, [r4, #0]
 8009a3a:	6831      	ldr	r1, [r6, #0]
 8009a3c:	061f      	lsls	r7, r3, #24
 8009a3e:	f851 5b04 	ldr.w	r5, [r1], #4
 8009a42:	d402      	bmi.n	8009a4a <_printf_i+0x18a>
 8009a44:	065f      	lsls	r7, r3, #25
 8009a46:	bf48      	it	mi
 8009a48:	b2ad      	uxthmi	r5, r5
 8009a4a:	6031      	str	r1, [r6, #0]
 8009a4c:	07d9      	lsls	r1, r3, #31
 8009a4e:	bf44      	itt	mi
 8009a50:	f043 0320 	orrmi.w	r3, r3, #32
 8009a54:	6023      	strmi	r3, [r4, #0]
 8009a56:	b11d      	cbz	r5, 8009a60 <_printf_i+0x1a0>
 8009a58:	2310      	movs	r3, #16
 8009a5a:	e7ab      	b.n	80099b4 <_printf_i+0xf4>
 8009a5c:	4826      	ldr	r0, [pc, #152]	@ (8009af8 <_printf_i+0x238>)
 8009a5e:	e7e9      	b.n	8009a34 <_printf_i+0x174>
 8009a60:	6823      	ldr	r3, [r4, #0]
 8009a62:	f023 0320 	bic.w	r3, r3, #32
 8009a66:	6023      	str	r3, [r4, #0]
 8009a68:	e7f6      	b.n	8009a58 <_printf_i+0x198>
 8009a6a:	4616      	mov	r6, r2
 8009a6c:	e7bd      	b.n	80099ea <_printf_i+0x12a>
 8009a6e:	6833      	ldr	r3, [r6, #0]
 8009a70:	6825      	ldr	r5, [r4, #0]
 8009a72:	1d18      	adds	r0, r3, #4
 8009a74:	6961      	ldr	r1, [r4, #20]
 8009a76:	6030      	str	r0, [r6, #0]
 8009a78:	062e      	lsls	r6, r5, #24
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	d501      	bpl.n	8009a82 <_printf_i+0x1c2>
 8009a7e:	6019      	str	r1, [r3, #0]
 8009a80:	e002      	b.n	8009a88 <_printf_i+0x1c8>
 8009a82:	0668      	lsls	r0, r5, #25
 8009a84:	d5fb      	bpl.n	8009a7e <_printf_i+0x1be>
 8009a86:	8019      	strh	r1, [r3, #0]
 8009a88:	2300      	movs	r3, #0
 8009a8a:	4616      	mov	r6, r2
 8009a8c:	6123      	str	r3, [r4, #16]
 8009a8e:	e7bc      	b.n	8009a0a <_printf_i+0x14a>
 8009a90:	6833      	ldr	r3, [r6, #0]
 8009a92:	2100      	movs	r1, #0
 8009a94:	1d1a      	adds	r2, r3, #4
 8009a96:	6032      	str	r2, [r6, #0]
 8009a98:	681e      	ldr	r6, [r3, #0]
 8009a9a:	6862      	ldr	r2, [r4, #4]
 8009a9c:	4630      	mov	r0, r6
 8009a9e:	f000 f859 	bl	8009b54 <memchr>
 8009aa2:	b108      	cbz	r0, 8009aa8 <_printf_i+0x1e8>
 8009aa4:	1b80      	subs	r0, r0, r6
 8009aa6:	6060      	str	r0, [r4, #4]
 8009aa8:	6863      	ldr	r3, [r4, #4]
 8009aaa:	6123      	str	r3, [r4, #16]
 8009aac:	2300      	movs	r3, #0
 8009aae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ab2:	e7aa      	b.n	8009a0a <_printf_i+0x14a>
 8009ab4:	4632      	mov	r2, r6
 8009ab6:	4649      	mov	r1, r9
 8009ab8:	4640      	mov	r0, r8
 8009aba:	6923      	ldr	r3, [r4, #16]
 8009abc:	47d0      	blx	sl
 8009abe:	3001      	adds	r0, #1
 8009ac0:	d0ad      	beq.n	8009a1e <_printf_i+0x15e>
 8009ac2:	6823      	ldr	r3, [r4, #0]
 8009ac4:	079b      	lsls	r3, r3, #30
 8009ac6:	d413      	bmi.n	8009af0 <_printf_i+0x230>
 8009ac8:	68e0      	ldr	r0, [r4, #12]
 8009aca:	9b03      	ldr	r3, [sp, #12]
 8009acc:	4298      	cmp	r0, r3
 8009ace:	bfb8      	it	lt
 8009ad0:	4618      	movlt	r0, r3
 8009ad2:	e7a6      	b.n	8009a22 <_printf_i+0x162>
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	4632      	mov	r2, r6
 8009ad8:	4649      	mov	r1, r9
 8009ada:	4640      	mov	r0, r8
 8009adc:	47d0      	blx	sl
 8009ade:	3001      	adds	r0, #1
 8009ae0:	d09d      	beq.n	8009a1e <_printf_i+0x15e>
 8009ae2:	3501      	adds	r5, #1
 8009ae4:	68e3      	ldr	r3, [r4, #12]
 8009ae6:	9903      	ldr	r1, [sp, #12]
 8009ae8:	1a5b      	subs	r3, r3, r1
 8009aea:	42ab      	cmp	r3, r5
 8009aec:	dcf2      	bgt.n	8009ad4 <_printf_i+0x214>
 8009aee:	e7eb      	b.n	8009ac8 <_printf_i+0x208>
 8009af0:	2500      	movs	r5, #0
 8009af2:	f104 0619 	add.w	r6, r4, #25
 8009af6:	e7f5      	b.n	8009ae4 <_printf_i+0x224>
 8009af8:	08009cc7 	.word	0x08009cc7
 8009afc:	08009cd8 	.word	0x08009cd8

08009b00 <memmove>:
 8009b00:	4288      	cmp	r0, r1
 8009b02:	b510      	push	{r4, lr}
 8009b04:	eb01 0402 	add.w	r4, r1, r2
 8009b08:	d902      	bls.n	8009b10 <memmove+0x10>
 8009b0a:	4284      	cmp	r4, r0
 8009b0c:	4623      	mov	r3, r4
 8009b0e:	d807      	bhi.n	8009b20 <memmove+0x20>
 8009b10:	1e43      	subs	r3, r0, #1
 8009b12:	42a1      	cmp	r1, r4
 8009b14:	d008      	beq.n	8009b28 <memmove+0x28>
 8009b16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b1e:	e7f8      	b.n	8009b12 <memmove+0x12>
 8009b20:	4601      	mov	r1, r0
 8009b22:	4402      	add	r2, r0
 8009b24:	428a      	cmp	r2, r1
 8009b26:	d100      	bne.n	8009b2a <memmove+0x2a>
 8009b28:	bd10      	pop	{r4, pc}
 8009b2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b32:	e7f7      	b.n	8009b24 <memmove+0x24>

08009b34 <_sbrk_r>:
 8009b34:	b538      	push	{r3, r4, r5, lr}
 8009b36:	2300      	movs	r3, #0
 8009b38:	4d05      	ldr	r5, [pc, #20]	@ (8009b50 <_sbrk_r+0x1c>)
 8009b3a:	4604      	mov	r4, r0
 8009b3c:	4608      	mov	r0, r1
 8009b3e:	602b      	str	r3, [r5, #0]
 8009b40:	f7f6 fc6a 	bl	8000418 <_sbrk>
 8009b44:	1c43      	adds	r3, r0, #1
 8009b46:	d102      	bne.n	8009b4e <_sbrk_r+0x1a>
 8009b48:	682b      	ldr	r3, [r5, #0]
 8009b4a:	b103      	cbz	r3, 8009b4e <_sbrk_r+0x1a>
 8009b4c:	6023      	str	r3, [r4, #0]
 8009b4e:	bd38      	pop	{r3, r4, r5, pc}
 8009b50:	2000148c 	.word	0x2000148c

08009b54 <memchr>:
 8009b54:	4603      	mov	r3, r0
 8009b56:	b510      	push	{r4, lr}
 8009b58:	b2c9      	uxtb	r1, r1
 8009b5a:	4402      	add	r2, r0
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	4618      	mov	r0, r3
 8009b60:	d101      	bne.n	8009b66 <memchr+0x12>
 8009b62:	2000      	movs	r0, #0
 8009b64:	e003      	b.n	8009b6e <memchr+0x1a>
 8009b66:	7804      	ldrb	r4, [r0, #0]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	428c      	cmp	r4, r1
 8009b6c:	d1f6      	bne.n	8009b5c <memchr+0x8>
 8009b6e:	bd10      	pop	{r4, pc}

08009b70 <memcpy>:
 8009b70:	440a      	add	r2, r1
 8009b72:	4291      	cmp	r1, r2
 8009b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b78:	d100      	bne.n	8009b7c <memcpy+0xc>
 8009b7a:	4770      	bx	lr
 8009b7c:	b510      	push	{r4, lr}
 8009b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b82:	4291      	cmp	r1, r2
 8009b84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b88:	d1f9      	bne.n	8009b7e <memcpy+0xe>
 8009b8a:	bd10      	pop	{r4, pc}

08009b8c <_realloc_r>:
 8009b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b90:	4680      	mov	r8, r0
 8009b92:	4615      	mov	r5, r2
 8009b94:	460c      	mov	r4, r1
 8009b96:	b921      	cbnz	r1, 8009ba2 <_realloc_r+0x16>
 8009b98:	4611      	mov	r1, r2
 8009b9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b9e:	f7ff bc39 	b.w	8009414 <_malloc_r>
 8009ba2:	b92a      	cbnz	r2, 8009bb0 <_realloc_r+0x24>
 8009ba4:	f7ff fbcc 	bl	8009340 <_free_r>
 8009ba8:	2400      	movs	r4, #0
 8009baa:	4620      	mov	r0, r4
 8009bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bb0:	f000 f81a 	bl	8009be8 <_malloc_usable_size_r>
 8009bb4:	4285      	cmp	r5, r0
 8009bb6:	4606      	mov	r6, r0
 8009bb8:	d802      	bhi.n	8009bc0 <_realloc_r+0x34>
 8009bba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009bbe:	d8f4      	bhi.n	8009baa <_realloc_r+0x1e>
 8009bc0:	4629      	mov	r1, r5
 8009bc2:	4640      	mov	r0, r8
 8009bc4:	f7ff fc26 	bl	8009414 <_malloc_r>
 8009bc8:	4607      	mov	r7, r0
 8009bca:	2800      	cmp	r0, #0
 8009bcc:	d0ec      	beq.n	8009ba8 <_realloc_r+0x1c>
 8009bce:	42b5      	cmp	r5, r6
 8009bd0:	462a      	mov	r2, r5
 8009bd2:	4621      	mov	r1, r4
 8009bd4:	bf28      	it	cs
 8009bd6:	4632      	movcs	r2, r6
 8009bd8:	f7ff ffca 	bl	8009b70 <memcpy>
 8009bdc:	4621      	mov	r1, r4
 8009bde:	4640      	mov	r0, r8
 8009be0:	f7ff fbae 	bl	8009340 <_free_r>
 8009be4:	463c      	mov	r4, r7
 8009be6:	e7e0      	b.n	8009baa <_realloc_r+0x1e>

08009be8 <_malloc_usable_size_r>:
 8009be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bec:	1f18      	subs	r0, r3, #4
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	bfbc      	itt	lt
 8009bf2:	580b      	ldrlt	r3, [r1, r0]
 8009bf4:	18c0      	addlt	r0, r0, r3
 8009bf6:	4770      	bx	lr

08009bf8 <_init>:
 8009bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bfa:	bf00      	nop
 8009bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bfe:	bc08      	pop	{r3}
 8009c00:	469e      	mov	lr, r3
 8009c02:	4770      	bx	lr

08009c04 <_fini>:
 8009c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c06:	bf00      	nop
 8009c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c0a:	bc08      	pop	{r3}
 8009c0c:	469e      	mov	lr, r3
 8009c0e:	4770      	bx	lr
