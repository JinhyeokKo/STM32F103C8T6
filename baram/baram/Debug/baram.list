
baram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08005000  08005000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004288  0800510c  0800510c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08009394  08009394  00005394  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009414  08009414  00006190  2**0
                  CONTENTS
  4 .ARM          00000008  08009414  08009414  00005414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800941c  0800941c  00006190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800941c  0800941c  0000541c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009420  08009420  00005420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000190  20000000  08009424  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013b0  20000190  080095b4  00006190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001540  080095b4  00006540  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b4b  00000000  00000000  000061b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000506f  00000000  00000000  0001dd04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00008a93  00000000  00000000  00022d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001090  00000000  00000000  0002b808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011d9  00000000  00000000  0002c898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c3a0  00000000  00000000  0002da71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021b91  00000000  00000000  00049e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089dbb  00000000  00000000  0006b9a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f575d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002650  00000000  00000000  000f57a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000042  00000000  00000000  000f7df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800510c <__do_global_dtors_aux>:
 800510c:	b510      	push	{r4, lr}
 800510e:	4c05      	ldr	r4, [pc, #20]	@ (8005124 <__do_global_dtors_aux+0x18>)
 8005110:	7823      	ldrb	r3, [r4, #0]
 8005112:	b933      	cbnz	r3, 8005122 <__do_global_dtors_aux+0x16>
 8005114:	4b04      	ldr	r3, [pc, #16]	@ (8005128 <__do_global_dtors_aux+0x1c>)
 8005116:	b113      	cbz	r3, 800511e <__do_global_dtors_aux+0x12>
 8005118:	4804      	ldr	r0, [pc, #16]	@ (800512c <__do_global_dtors_aux+0x20>)
 800511a:	f3af 8000 	nop.w
 800511e:	2301      	movs	r3, #1
 8005120:	7023      	strb	r3, [r4, #0]
 8005122:	bd10      	pop	{r4, pc}
 8005124:	20000190 	.word	0x20000190
 8005128:	00000000 	.word	0x00000000
 800512c:	0800937c 	.word	0x0800937c

08005130 <frame_dummy>:
 8005130:	b508      	push	{r3, lr}
 8005132:	4b03      	ldr	r3, [pc, #12]	@ (8005140 <frame_dummy+0x10>)
 8005134:	b11b      	cbz	r3, 800513e <frame_dummy+0xe>
 8005136:	4903      	ldr	r1, [pc, #12]	@ (8005144 <frame_dummy+0x14>)
 8005138:	4803      	ldr	r0, [pc, #12]	@ (8005148 <frame_dummy+0x18>)
 800513a:	f3af 8000 	nop.w
 800513e:	bd08      	pop	{r3, pc}
 8005140:	00000000 	.word	0x00000000
 8005144:	20000194 	.word	0x20000194
 8005148:	0800937c 	.word	0x0800937c

0800514c <strlen>:
 800514c:	4603      	mov	r3, r0
 800514e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005152:	2a00      	cmp	r2, #0
 8005154:	d1fb      	bne.n	800514e <strlen+0x2>
 8005156:	1a18      	subs	r0, r3, r0
 8005158:	3801      	subs	r0, #1
 800515a:	4770      	bx	lr

0800515c <apInit>:
 */

#include "ap.h"

void apInit(void)
{
 800515c:	b508      	push	{r3, lr}
    uartOpen(_DEF_UART1, 57600); // USB
 800515e:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8005162:	2000      	movs	r0, #0
 8005164:	f000 f9ba 	bl	80054dc <uartOpen>
    uartOpen(_DEF_UART2, 57600); // UART
}
 8005168:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    uartOpen(_DEF_UART2, 57600); // UART
 800516c:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8005170:	2001      	movs	r0, #1
 8005172:	f000 b9b3 	b.w	80054dc <uartOpen>

08005176 <apMain>:

void apMain(void)
{
 8005176:	b510      	push	{r4, lr}
    uint32_t pre_time;

    pre_time = millis();
 8005178:	f000 f810 	bl	800519c <millis>
 800517c:	4604      	mov	r4, r0
    while (1)
    {
        if (millis() - pre_time >= 500)
 800517e:	f000 f80d 	bl	800519c <millis>
 8005182:	1b00      	subs	r0, r0, r4
 8005184:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 8005188:	d3f9      	bcc.n	800517e <apMain+0x8>
        {
            pre_time = millis();
 800518a:	f000 f807 	bl	800519c <millis>
 800518e:	4604      	mov	r4, r0
            ledToggle(_DEF_LED1);
 8005190:	2000      	movs	r0, #0
 8005192:	f000 f937 	bl	8005404 <ledToggle>
 8005196:	e7f2      	b.n	800517e <apMain+0x8>

08005198 <delay>:
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
}

void delay(uint32_t ms)
{
    HAL_Delay(ms);
 8005198:	f000 baf6 	b.w	8005788 <HAL_Delay>

0800519c <millis>:
}

uint32_t millis(void)
{
    return HAL_GetTick();
 800519c:	f000 baee 	b.w	800577c <HAL_GetTick>

080051a0 <SystemClock_Config>:
    uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
    return 1;
}

void SystemClock_Config(void)
{
 80051a0:	b510      	push	{r4, lr}
 80051a2:	b094      	sub	sp, #80	@ 0x50
    RCC_OscInitTypeDef RCC_OscInitStruct   = {0};
 80051a4:	2214      	movs	r2, #20
 80051a6:	2100      	movs	r1, #0
 80051a8:	a80c      	add	r0, sp, #48	@ 0x30
 80051aa:	f004 f8ba 	bl	8009322 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct   = {0};
 80051ae:	2214      	movs	r2, #20
 80051b0:	2100      	movs	r1, #0
 80051b2:	eb0d 0002 	add.w	r0, sp, r2
 80051b6:	f004 f8b4 	bl	8009322 <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80051ba:	2210      	movs	r2, #16
 80051bc:	2100      	movs	r1, #0
 80051be:	a801      	add	r0, sp, #4
 80051c0:	f004 f8af 	bl	8009322 <memset>
        RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
    RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
    RCC_OscInitStruct.LSEState       = RCC_LSE_ON;
    RCC_OscInitStruct.HSIState       = RCC_HSI_ON;
    RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 80051c4:	2402      	movs	r4, #2
    RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 80051c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80051ca:	2105      	movs	r1, #5
    RCC_OscInitStruct.LSEState       = RCC_LSE_ON;
 80051cc:	2201      	movs	r2, #1
    RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 80051ce:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
    RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 80051d2:	e9cd 4311 	strd	r4, r3, [sp, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLMUL     = RCC_PLL_MUL9;
 80051d6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80051da:	a80a      	add	r0, sp, #40	@ 0x28
    RCC_OscInitStruct.HSIState       = RCC_HSI_ON;
 80051dc:	e9cd 220d 	strd	r2, r2, [sp, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLMUL     = RCC_PLL_MUL9;
 80051e0:	9313      	str	r3, [sp, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80051e2:	f001 fce9 	bl	8006bb8 <HAL_RCC_OscConfig>
 80051e6:	b108      	cbz	r0, 80051ec <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80051e8:	b672      	cpsid	i
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state
     */
    __disable_irq();
    while (1)
 80051ea:	e7fe      	b.n	80051ea <SystemClock_Config+0x4a>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80051ec:	230f      	movs	r3, #15
    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 80051ee:	e9cd 3405 	strd	r3, r4, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80051f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 80051f6:	9007      	str	r0, [sp, #28]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80051f8:	e9cd 3008 	strd	r3, r0, [sp, #32]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80051fc:	4621      	mov	r1, r4
 80051fe:	a805      	add	r0, sp, #20
 8005200:	f001 fe9c 	bl	8006f3c <HAL_RCC_ClockConfig>
 8005204:	b108      	cbz	r0, 800520a <SystemClock_Config+0x6a>
 8005206:	b672      	cpsid	i
    while (1)
 8005208:	e7fe      	b.n	8005208 <SystemClock_Config+0x68>
    PeriphClkInit.RTCClockSelection    = RCC_RTCCLKSOURCE_LSE;
 800520a:	2211      	movs	r2, #17
 800520c:	f44f 7380 	mov.w	r3, #256	@ 0x100
    PeriphClkInit.UsbClockSelection    = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8005210:	9004      	str	r0, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005212:	a801      	add	r0, sp, #4
    PeriphClkInit.RTCClockSelection    = RCC_RTCCLKSOURCE_LSE;
 8005214:	e9cd 2301 	strd	r2, r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005218:	f001 ff4c 	bl	80070b4 <HAL_RCCEx_PeriphCLKConfig>
 800521c:	b108      	cbz	r0, 8005222 <SystemClock_Config+0x82>
 800521e:	b672      	cpsid	i
    while (1)
 8005220:	e7fe      	b.n	8005220 <SystemClock_Config+0x80>
}
 8005222:	b014      	add	sp, #80	@ 0x50
 8005224:	bd10      	pop	{r4, pc}
	...

08005228 <bspInit>:
{
 8005228:	b570      	push	{r4, r5, r6, lr}
 800522a:	b088      	sub	sp, #32
    HAL_Init();
 800522c:	f000 fa88 	bl	8005740 <HAL_Init>
    SystemClock_Config();
 8005230:	f7ff ffb6 	bl	80051a0 <SystemClock_Config>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005234:	4b18      	ldr	r3, [pc, #96]	@ (8005298 <bspInit+0x70>)
        GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_OD;
 8005236:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800523a:	699a      	ldr	r2, [r3, #24]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800523c:	2600      	movs	r6, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800523e:	f042 0210 	orr.w	r2, r2, #16
 8005242:	619a      	str	r2, [r3, #24]
 8005244:	699a      	ldr	r2, [r3, #24]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005246:	4c15      	ldr	r4, [pc, #84]	@ (800529c <bspInit+0x74>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005248:	f002 0210 	and.w	r2, r2, #16
 800524c:	9201      	str	r2, [sp, #4]
 800524e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005250:	699a      	ldr	r2, [r3, #24]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005252:	4620      	mov	r0, r4
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005254:	f042 0220 	orr.w	r2, r2, #32
 8005258:	619a      	str	r2, [r3, #24]
 800525a:	699a      	ldr	r2, [r3, #24]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800525c:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800525e:	f002 0220 	and.w	r2, r2, #32
 8005262:	9202      	str	r2, [sp, #8]
 8005264:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005266:	699a      	ldr	r2, [r3, #24]
 8005268:	f042 0204 	orr.w	r2, r2, #4
 800526c:	619a      	str	r2, [r3, #24]
 800526e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005270:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005272:	f003 0304 	and.w	r3, r3, #4
 8005276:	9303      	str	r3, [sp, #12]
 8005278:	9b03      	ldr	r3, [sp, #12]
        GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_OD;
 800527a:	2311      	movs	r3, #17
 800527c:	e9cd 5304 	strd	r5, r3, [sp, #16]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005280:	2302      	movs	r3, #2
 8005282:	9307      	str	r3, [sp, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005284:	f000 fc9a 	bl	8005bbc <HAL_GPIO_Init>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8005288:	4632      	mov	r2, r6
 800528a:	4629      	mov	r1, r5
 800528c:	4620      	mov	r0, r4
 800528e:	f000 fddb 	bl	8005e48 <HAL_GPIO_WritePin>
}
 8005292:	b008      	add	sp, #32
 8005294:	bd70      	pop	{r4, r5, r6, pc}
 8005296:	bf00      	nop
 8005298:	40021000 	.word	0x40021000
 800529c:	40010800 	.word	0x40010800

080052a0 <Error_Handler>:
 80052a0:	b672      	cpsid	i
    while (1)
 80052a2:	e7fe      	b.n	80052a2 <Error_Handler+0x2>

080052a4 <HAL_MspInit>:

    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_AFIO_CLK_ENABLE();
 80052a4:	4b0e      	ldr	r3, [pc, #56]	@ (80052e0 <HAL_MspInit+0x3c>)
{
 80052a6:	b082      	sub	sp, #8
    __HAL_RCC_AFIO_CLK_ENABLE();
 80052a8:	699a      	ldr	r2, [r3, #24]
 80052aa:	f042 0201 	orr.w	r2, r2, #1
 80052ae:	619a      	str	r2, [r3, #24]
 80052b0:	699a      	ldr	r2, [r3, #24]
 80052b2:	f002 0201 	and.w	r2, r2, #1
 80052b6:	9200      	str	r2, [sp, #0]
 80052b8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_PWR_CLK_ENABLE();
 80052ba:	69da      	ldr	r2, [r3, #28]
 80052bc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80052c0:	61da      	str	r2, [r3, #28]
 80052c2:	69db      	ldr	r3, [r3, #28]

    /* System interrupt init*/

    /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
     */
    __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80052c4:	4a07      	ldr	r2, [pc, #28]	@ (80052e4 <HAL_MspInit+0x40>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80052c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ca:	9301      	str	r3, [sp, #4]
 80052cc:	9b01      	ldr	r3, [sp, #4]
    __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80052ce:	6853      	ldr	r3, [r2, #4]
 80052d0:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80052d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80052d8:	6053      	str	r3, [r2, #4]

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 80052da:	b002      	add	sp, #8
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40021000 	.word	0x40021000
 80052e4:	40010000 	.word	0x40010000

080052e8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80052e8:	e7fe      	b.n	80052e8 <NMI_Handler>

080052ea <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052ea:	e7fe      	b.n	80052ea <HardFault_Handler>

080052ec <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052ec:	e7fe      	b.n	80052ec <MemManage_Handler>

080052ee <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80052ee:	e7fe      	b.n	80052ee <BusFault_Handler>

080052f0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80052f0:	e7fe      	b.n	80052f0 <UsageFault_Handler>

080052f2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80052f2:	4770      	bx	lr

080052f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80052f4:	4770      	bx	lr

080052f6 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80052f6:	4770      	bx	lr

080052f8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80052f8:	f000 ba34 	b.w	8005764 <HAL_IncTick>

080052fc <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80052fc:	4801      	ldr	r0, [pc, #4]	@ (8005304 <DMA1_Channel5_IRQHandler+0x8>)
 80052fe:	f000 bbc9 	b.w	8005a94 <HAL_DMA_IRQHandler>
 8005302:	bf00      	nop
 8005304:	200003c4 	.word	0x200003c4

08005308 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005308:	4801      	ldr	r0, [pc, #4]	@ (8005310 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 800530a:	f000 be3b 	b.w	8005f84 <HAL_PCD_IRQHandler>
 800530e:	bf00      	nop
 8005310:	20001268 	.word	0x20001268

08005314 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005314:	4801      	ldr	r0, [pc, #4]	@ (800531c <USART1_IRQHandler+0x8>)
 8005316:	f002 b9e5 	b.w	80076e4 <HAL_UART_IRQHandler>
 800531a:	bf00      	nop
 800531c:	20000408 	.word	0x20000408

08005320 <SystemInit>:
#endif

    /* Configure the Vector Table location
     * -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR = VECT_TAB_BASE_ADDRESS |
 8005320:	4b01      	ldr	r3, [pc, #4]	@ (8005328 <SystemInit+0x8>)
 8005322:	4a02      	ldr	r2, [pc, #8]	@ (800532c <SystemInit+0xc>)
 8005324:	609a      	str	r2, [r3, #8]
                VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005326:	4770      	bx	lr
 8005328:	e000ed00 	.word	0xe000ed00
 800532c:	08005000 	.word	0x08005000

08005330 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005330:	f7ff fff6 	bl	8005320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005334:	480b      	ldr	r0, [pc, #44]	@ (8005364 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005336:	490c      	ldr	r1, [pc, #48]	@ (8005368 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005338:	4a0c      	ldr	r2, [pc, #48]	@ (800536c <LoopFillZerobss+0x16>)
  movs r3, #0
 800533a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800533c:	e002      	b.n	8005344 <LoopCopyDataInit>

0800533e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800533e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005342:	3304      	adds	r3, #4

08005344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005348:	d3f9      	bcc.n	800533e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800534a:	4a09      	ldr	r2, [pc, #36]	@ (8005370 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800534c:	4c09      	ldr	r4, [pc, #36]	@ (8005374 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800534e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005350:	e001      	b.n	8005356 <LoopFillZerobss>

08005352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005354:	3204      	adds	r2, #4

08005356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005358:	d3fb      	bcc.n	8005352 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800535a:	f003 ffeb 	bl	8009334 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800535e:	f003 ffd7 	bl	8009310 <main>
  bx lr
 8005362:	4770      	bx	lr
  ldr r0, =_sdata
 8005364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005368:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 800536c:	08009424 	.word	0x08009424
  ldr r2, =_sbss
 8005370:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8005374:	20001540 	.word	0x20001540

08005378 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005378:	e7fe      	b.n	8005378 <ADC1_2_IRQHandler>

0800537a <qbufferCreate>:

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
    bool ret = true;

    p_node->in    = 0;
 800537a:	2300      	movs	r3, #0
    p_node->out   = 0;
    p_node->len   = length;
    p_node->p_buf = p_buf;
 800537c:	e9c0 2102 	strd	r2, r1, [r0, #8]
    p_node->out   = 0;
 8005380:	e9c0 3300 	strd	r3, r3, [r0]

    return ret;
}
 8005384:	2001      	movs	r0, #1
 8005386:	4770      	bx	lr

08005388 <flashInit>:
static flash_tbl_t flash_tbl[FLASH_SECTOR_MAX];

static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);

bool flashInit(void)
{
 8005388:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
    for (int i = 0; i < FLASH_SECTOR_MAX; i++)
    {
        flash_tbl[i].addr   = 0x8000000 + i * 1024;
        flash_tbl[i].length = 1024;
 800538c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8005390:	4a05      	ldr	r2, [pc, #20]	@ (80053a8 <flashInit+0x20>)
    for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 8005392:	4906      	ldr	r1, [pc, #24]	@ (80053ac <flashInit+0x24>)
        flash_tbl[i].addr   = 0x8000000 + i * 1024;
 8005394:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 8005396:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800539a:	428b      	cmp	r3, r1
        flash_tbl[i].length = 1024;
 800539c:	8090      	strh	r0, [r2, #4]
    for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 800539e:	f102 0208 	add.w	r2, r2, #8
 80053a2:	d1f7      	bne.n	8005394 <flashInit+0xc>
    }
    return true;
}
 80053a4:	2001      	movs	r0, #1
 80053a6:	4770      	bx	lr
 80053a8:	200001ac 	.word	0x200001ac
 80053ac:	08010000 	.word	0x08010000

080053b0 <ledOff.part.0>:
}
void ledOff(uint8_t ch)
{
    if (ch >= LED_MAX_CH)
        return;
    HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80053b0:	4b02      	ldr	r3, [pc, #8]	@ (80053bc <ledOff.part.0+0xc>)
 80053b2:	79da      	ldrb	r2, [r3, #7]
 80053b4:	8899      	ldrh	r1, [r3, #4]
 80053b6:	6818      	ldr	r0, [r3, #0]
 80053b8:	f000 bd46 	b.w	8005e48 <HAL_GPIO_WritePin>
 80053bc:	20000004 	.word	0x20000004

080053c0 <ledInit>:
{
 80053c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053c2:	2210      	movs	r2, #16
 80053c4:	2100      	movs	r1, #0
 80053c6:	4668      	mov	r0, sp
 80053c8:	f003 ffab 	bl	8009322 <memset>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80053cc:	2200      	movs	r2, #0
 80053ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80053d2:	480a      	ldr	r0, [pc, #40]	@ (80053fc <ledInit+0x3c>)
 80053d4:	f000 fd38 	bl	8005e48 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80053d8:	2401      	movs	r4, #1
 80053da:	2300      	movs	r3, #0
 80053dc:	e9cd 4301 	strd	r4, r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053e0:	2302      	movs	r3, #2
 80053e2:	9303      	str	r3, [sp, #12]
        GPIO_InitStruct.Pin = led_tbl[i].pin;
 80053e4:	4b06      	ldr	r3, [pc, #24]	@ (8005400 <ledInit+0x40>)
        HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80053e6:	4669      	mov	r1, sp
        GPIO_InitStruct.Pin = led_tbl[i].pin;
 80053e8:	889a      	ldrh	r2, [r3, #4]
        HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80053ea:	6818      	ldr	r0, [r3, #0]
        GPIO_InitStruct.Pin = led_tbl[i].pin;
 80053ec:	9200      	str	r2, [sp, #0]
        HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80053ee:	f000 fbe5 	bl	8005bbc <HAL_GPIO_Init>
    if (ch >= LED_MAX_CH)
 80053f2:	f7ff ffdd 	bl	80053b0 <ledOff.part.0>
}
 80053f6:	4620      	mov	r0, r4
 80053f8:	b004      	add	sp, #16
 80053fa:	bd10      	pop	{r4, pc}
 80053fc:	40011000 	.word	0x40011000
 8005400:	20000004 	.word	0x20000004

08005404 <ledToggle>:
}
void ledToggle(uint8_t ch)
{
    if (ch >= LED_MAX_CH)
 8005404:	b920      	cbnz	r0, 8005410 <ledToggle+0xc>
        return;
    HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8005406:	4b03      	ldr	r3, [pc, #12]	@ (8005414 <ledToggle+0x10>)
 8005408:	8899      	ldrh	r1, [r3, #4]
 800540a:	6818      	ldr	r0, [r3, #0]
 800540c:	f000 bd21 	b.w	8005e52 <HAL_GPIO_TogglePin>
}
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	20000004 	.word	0x20000004

08005418 <resetInit>:
#include "rtc.h"

static uint32_t reset_count = 0;

bool resetInit(void)
{
 8005418:	b508      	push	{r3, lr}
    bool ret = true;

    // push reset btn
    if (RCC->CSR & (1 << 26))
 800541a:	4b0d      	ldr	r3, [pc, #52]	@ (8005450 <resetInit+0x38>)
 800541c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541e:	015b      	lsls	r3, r3, #5
 8005420:	d50f      	bpl.n	8005442 <resetInit+0x2a>
    {
        rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1);
 8005422:	2001      	movs	r0, #1
 8005424:	f000 f834 	bl	8005490 <rtcBackupRegRead>
 8005428:	1c41      	adds	r1, r0, #1
 800542a:	2001      	movs	r0, #1
 800542c:	f000 f828 	bl	8005480 <rtcBackupRegWrite>
        delay(500);
 8005430:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005434:	f7ff feb0 	bl	8005198 <delay>
        reset_count = rtcBackupRegRead(1);
 8005438:	2001      	movs	r0, #1
 800543a:	f000 f829 	bl	8005490 <rtcBackupRegRead>
 800543e:	4b05      	ldr	r3, [pc, #20]	@ (8005454 <resetInit+0x3c>)
 8005440:	6018      	str	r0, [r3, #0]
    }

    rtcBackupRegWrite(1, 0);
 8005442:	2100      	movs	r1, #0
 8005444:	2001      	movs	r0, #1
 8005446:	f000 f81b 	bl	8005480 <rtcBackupRegWrite>

    return ret;
}
 800544a:	2001      	movs	r0, #1
 800544c:	bd08      	pop	{r3, pc}
 800544e:	bf00      	nop
 8005450:	40021000 	.word	0x40021000
 8005454:	200003ac 	.word	0x200003ac

08005458 <rtcInit>:
#include "rtc.h"

static RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 8005458:	b508      	push	{r3, lr}
    bool ret = true;
//    __HAL_RCC_GPIOC_CLK_ENABLE();

    hrtc.Instance          = RTC;
    hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800545a:	f04f 33ff 	mov.w	r3, #4294967295
    hrtc.Instance          = RTC;
 800545e:	4806      	ldr	r0, [pc, #24]	@ (8005478 <rtcInit+0x20>)
    hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8005460:	4a06      	ldr	r2, [pc, #24]	@ (800547c <rtcInit+0x24>)
 8005462:	e9c0 2300 	strd	r2, r3, [r0]
    hrtc.Init.OutPut       = RTC_OUTPUTSOURCE_NONE;
 8005466:	2300      	movs	r3, #0
 8005468:	6083      	str	r3, [r0, #8]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800546a:	f001 ff45 	bl	80072f8 <HAL_RTC_Init>
 800546e:	b108      	cbz	r0, 8005474 <rtcInit+0x1c>
    {
        Error_Handler();
 8005470:	f7ff ff16 	bl	80052a0 <Error_Handler>
    }

    return ret;
}
 8005474:	2001      	movs	r0, #1
 8005476:	bd08      	pop	{r3, pc}
 8005478:	200003b0 	.word	0x200003b0
 800547c:	40002800 	.word	0x40002800

08005480 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8005480:	460a      	mov	r2, r1

    HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8005482:	4601      	mov	r1, r0
 8005484:	4801      	ldr	r0, [pc, #4]	@ (800548c <rtcBackupRegWrite+0xc>)
 8005486:	f001 bf7d 	b.w	8007384 <HAL_RTCEx_BKUPWrite>
 800548a:	bf00      	nop
 800548c:	200003b0 	.word	0x200003b0

08005490 <rtcBackupRegRead>:
}

uint32_t rtcBackupRegRead(uint32_t index)
{
 8005490:	4601      	mov	r1, r0
    return HAL_RTCEx_BKUPRead(&hrtc, index);
 8005492:	4801      	ldr	r0, [pc, #4]	@ (8005498 <rtcBackupRegRead+0x8>)
 8005494:	f001 bf7e 	b.w	8007394 <HAL_RTCEx_BKUPRead>
 8005498:	200003b0 	.word	0x200003b0

0800549c <HAL_RTC_MspInit>:
}

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 800549c:	b507      	push	{r0, r1, r2, lr}

    if (rtcHandle->Instance == RTC)
 800549e:	4b0b      	ldr	r3, [pc, #44]	@ (80054cc <HAL_RTC_MspInit+0x30>)
 80054a0:	6802      	ldr	r2, [r0, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d10f      	bne.n	80054c6 <HAL_RTC_MspInit+0x2a>
    {
        /* USER CODE BEGIN RTC_MspInit 0 */

        /* USER CODE END RTC_MspInit 0 */
        HAL_PWR_EnableBkUpAccess();
 80054a6:	f001 fb81 	bl	8006bac <HAL_PWR_EnableBkUpAccess>
        /* Enable BKP CLK enable for backup registers */
        __HAL_RCC_BKP_CLK_ENABLE();
 80054aa:	4b09      	ldr	r3, [pc, #36]	@ (80054d0 <HAL_RTC_MspInit+0x34>)
 80054ac:	69da      	ldr	r2, [r3, #28]
 80054ae:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 80054b2:	61da      	str	r2, [r3, #28]
        /* RTC clock enable */
        __HAL_RCC_RTC_ENABLE();
 80054b4:	2201      	movs	r2, #1
        __HAL_RCC_BKP_CLK_ENABLE();
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054bc:	9301      	str	r3, [sp, #4]
 80054be:	9b01      	ldr	r3, [sp, #4]
        __HAL_RCC_RTC_ENABLE();
 80054c0:	4b04      	ldr	r3, [pc, #16]	@ (80054d4 <HAL_RTC_MspInit+0x38>)
 80054c2:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
        /* USER CODE BEGIN RTC_MspInit 1 */

        /* USER CODE END RTC_MspInit 1 */
    }
}
 80054c6:	b003      	add	sp, #12
 80054c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80054cc:	40002800 	.word	0x40002800
 80054d0:	40021000 	.word	0x40021000
 80054d4:	42420000 	.word	0x42420000

080054d8 <uartInit>:
    {
        is_open[i] = false;
    }

    return true;
}
 80054d8:	2001      	movs	r0, #1
 80054da:	4770      	bx	lr

080054dc <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 80054dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool ret = false;
    switch (ch)
 80054de:	2800      	cmp	r0, #0
 80054e0:	d041      	beq.n	8005566 <uartOpen+0x8a>
 80054e2:	2801      	cmp	r0, #1
 80054e4:	d12a      	bne.n	800553c <uartOpen+0x60>
        is_open[ch] = true;
        ret         = true;
        break;

    case _DEF_UART2:
        huart1.Instance          = USART1;
 80054e6:	4c21      	ldr	r4, [pc, #132]	@ (800556c <uartOpen+0x90>)
 80054e8:	4b21      	ldr	r3, [pc, #132]	@ (8005570 <uartOpen+0x94>)
        huart1.Init.BaudRate     = baud;
        huart1.Init.WordLength   = UART_WORDLENGTH_8B;
 80054ea:	2500      	movs	r5, #0
        huart1.Init.BaudRate     = baud;
 80054ec:	e9c4 3100 	strd	r3, r1, [r4]
        huart1.Init.StopBits     = UART_STOPBITS_1;
        huart1.Init.Parity       = UART_PARITY_NONE;
        huart1.Init.Mode         = UART_MODE_TX_RX;
 80054f0:	230c      	movs	r3, #12
        huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
        huart1.Init.OverSampling = UART_OVERSAMPLING_16;

        HAL_UART_DeInit(&huart1);
 80054f2:	4620      	mov	r0, r4
        huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80054f4:	e9c4 3505 	strd	r3, r5, [r4, #20]
        huart1.Init.StopBits     = UART_STOPBITS_1;
 80054f8:	e9c4 5502 	strd	r5, r5, [r4, #8]
        huart1.Init.Parity       = UART_PARITY_NONE;
 80054fc:	6125      	str	r5, [r4, #16]
        huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80054fe:	61e5      	str	r5, [r4, #28]
        HAL_UART_DeInit(&huart1);
 8005500:	f001 ffe7 	bl	80074d2 <HAL_UART_DeInit>

        qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8005504:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005508:	491a      	ldr	r1, [pc, #104]	@ (8005574 <uartOpen+0x98>)
 800550a:	481b      	ldr	r0, [pc, #108]	@ (8005578 <uartOpen+0x9c>)
 800550c:	f7ff ff35 	bl	800537a <qbufferCreate>

        __HAL_RCC_DMA1_CLK_ENABLE();
 8005510:	4b1a      	ldr	r3, [pc, #104]	@ (800557c <uartOpen+0xa0>)
        HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8005512:	4629      	mov	r1, r5
        __HAL_RCC_DMA1_CLK_ENABLE();
 8005514:	695a      	ldr	r2, [r3, #20]
        HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8005516:	200f      	movs	r0, #15
        __HAL_RCC_DMA1_CLK_ENABLE();
 8005518:	f042 0201 	orr.w	r2, r2, #1
 800551c:	615a      	str	r2, [r3, #20]
 800551e:	695b      	ldr	r3, [r3, #20]
        HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8005520:	462a      	mov	r2, r5
        __HAL_RCC_DMA1_CLK_ENABLE();
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	9301      	str	r3, [sp, #4]
 8005528:	9b01      	ldr	r3, [sp, #4]
        HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800552a:	f000 f951 	bl	80057d0 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800552e:	200f      	movs	r0, #15
 8005530:	f000 f97e 	bl	8005830 <HAL_NVIC_EnableIRQ>

        if (HAL_UART_Init(&huart1) != HAL_OK)
 8005534:	4620      	mov	r0, r4
 8005536:	f001 ff9d 	bl	8007474 <HAL_UART_Init>
 800553a:	b110      	cbz	r0, 8005542 <uartOpen+0x66>
    bool ret = false;
 800553c:	2000      	movs	r0, #0
            qbuffer[ch].out = qbuffer[ch].in;
        }
        break;
    }
    return ret;
}
 800553e:	b003      	add	sp, #12
 8005540:	bd30      	pop	{r4, r5, pc}
            if (HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) !=
 8005542:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005546:	490b      	ldr	r1, [pc, #44]	@ (8005574 <uartOpen+0x98>)
 8005548:	4620      	mov	r0, r4
 800554a:	f002 fa61 	bl	8007a10 <HAL_UART_Receive_DMA>
 800554e:	fab0 f080 	clz	r0, r0
            qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8005552:	4b0b      	ldr	r3, [pc, #44]	@ (8005580 <uartOpen+0xa4>)
 8005554:	4a0b      	ldr	r2, [pc, #44]	@ (8005584 <uartOpen+0xa8>)
 8005556:	681b      	ldr	r3, [r3, #0]
            if (HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) !=
 8005558:	0940      	lsrs	r0, r0, #5
            qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 800555a:	6859      	ldr	r1, [r3, #4]
 800555c:	6993      	ldr	r3, [r2, #24]
 800555e:	1a5b      	subs	r3, r3, r1
            qbuffer[ch].out = qbuffer[ch].in;
 8005560:	e9c2 3304 	strd	r3, r3, [r2, #16]
 8005564:	e7eb      	b.n	800553e <uartOpen+0x62>
        ret         = true;
 8005566:	2001      	movs	r0, #1
 8005568:	e7e9      	b.n	800553e <uartOpen+0x62>
 800556a:	bf00      	nop
 800556c:	20000408 	.word	0x20000408
 8005570:	40013800 	.word	0x40013800
 8005574:	20000450 	.word	0x20000450
 8005578:	20000560 	.word	0x20000560
 800557c:	40021000 	.word	0x40021000
 8005580:	200003c4 	.word	0x200003c4
 8005584:	20000550 	.word	0x20000550

08005588 <HAL_UART_ErrorCallback>:
        break;
    }
    return ret;
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8005588:	4770      	bx	lr

0800558a <HAL_UART_RxCpltCallback>:
        qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);

        HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
    }
#endif
}
 800558a:	4770      	bx	lr

0800558c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 800558c:	b570      	push	{r4, r5, r6, lr}
 800558e:	4606      	mov	r6, r0
 8005590:	b086      	sub	sp, #24

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005592:	2210      	movs	r2, #16
 8005594:	2100      	movs	r1, #0
 8005596:	a802      	add	r0, sp, #8
 8005598:	f003 fec3 	bl	8009322 <memset>
    if (uartHandle->Instance == USART1)
 800559c:	6832      	ldr	r2, [r6, #0]
 800559e:	4b25      	ldr	r3, [pc, #148]	@ (8005634 <HAL_UART_MspInit+0xa8>)
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d144      	bne.n	800562e <HAL_UART_MspInit+0xa2>
    {
        /* USER CODE BEGIN USART1_MspInit 0 */

        /* USER CODE END USART1_MspInit 0 */
        /* USART1 clock enable */
        __HAL_RCC_USART1_CLK_ENABLE();
 80055a4:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 80055a8:	699a      	ldr	r2, [r3, #24]
        PA10     ------> USART1_RX
        */
        GPIO_InitStruct.Pin   = GPIO_PIN_9;
        GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055aa:	4823      	ldr	r0, [pc, #140]	@ (8005638 <HAL_UART_MspInit+0xac>)
        __HAL_RCC_USART1_CLK_ENABLE();
 80055ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055b0:	619a      	str	r2, [r3, #24]
 80055b2:	699a      	ldr	r2, [r3, #24]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055b4:	a902      	add	r1, sp, #8
        __HAL_RCC_USART1_CLK_ENABLE();
 80055b6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80055ba:	9200      	str	r2, [sp, #0]
 80055bc:	9a00      	ldr	r2, [sp, #0]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 80055be:	699a      	ldr	r2, [r3, #24]

        GPIO_InitStruct.Pin  = GPIO_PIN_10;
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055c0:	2500      	movs	r5, #0
        __HAL_RCC_GPIOA_CLK_ENABLE();
 80055c2:	f042 0204 	orr.w	r2, r2, #4
 80055c6:	619a      	str	r2, [r3, #24]
 80055c8:	699b      	ldr	r3, [r3, #24]
        GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 80055ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
        __HAL_RCC_GPIOA_CLK_ENABLE();
 80055ce:	f003 0304 	and.w	r3, r3, #4
 80055d2:	9301      	str	r3, [sp, #4]
 80055d4:	9b01      	ldr	r3, [sp, #4]
        GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 80055d6:	2302      	movs	r3, #2
 80055d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80055dc:	2303      	movs	r3, #3
 80055de:	9305      	str	r3, [sp, #20]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055e0:	f000 faec 	bl	8005bbc <HAL_GPIO_Init>
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055e8:	4813      	ldr	r0, [pc, #76]	@ (8005638 <HAL_UART_MspInit+0xac>)
 80055ea:	a902      	add	r1, sp, #8

        /* USART1 DMA Init */
        /* USART1_RX Init */
        hdma_usart1_rx.Instance                 = DMA1_Channel5;
 80055ec:	4c13      	ldr	r4, [pc, #76]	@ (800563c <HAL_UART_MspInit+0xb0>)
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055ee:	e9cd 3502 	strd	r3, r5, [sp, #8]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f2:	9504      	str	r5, [sp, #16]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055f4:	f000 fae2 	bl	8005bbc <HAL_GPIO_Init>
        hdma_usart1_rx.Instance                 = DMA1_Channel5;
 80055f8:	4b11      	ldr	r3, [pc, #68]	@ (8005640 <HAL_UART_MspInit+0xb4>)
        hdma_usart1_rx.Init.MemInc              = DMA_MINC_ENABLE;
        hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
        hdma_usart1_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
        hdma_usart1_rx.Init.Mode                = DMA_CIRCULAR;
        hdma_usart1_rx.Init.Priority            = DMA_PRIORITY_LOW;
        if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80055fa:	4620      	mov	r0, r4
        hdma_usart1_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80055fc:	e9c4 3500 	strd	r3, r5, [r4]
        hdma_usart1_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8005600:	2380      	movs	r3, #128	@ 0x80
        hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005602:	e9c4 3503 	strd	r3, r5, [r4, #12]
        hdma_usart1_rx.Init.Mode                = DMA_CIRCULAR;
 8005606:	2320      	movs	r3, #32
        hdma_usart1_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8005608:	60a5      	str	r5, [r4, #8]
        hdma_usart1_rx.Init.Priority            = DMA_PRIORITY_LOW;
 800560a:	e9c4 3506 	strd	r3, r5, [r4, #24]
        hdma_usart1_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 800560e:	6165      	str	r5, [r4, #20]
        if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005610:	f000 f942 	bl	8005898 <HAL_DMA_Init>
 8005614:	b108      	cbz	r0, 800561a <HAL_UART_MspInit+0x8e>
        {
            Error_Handler();
 8005616:	f7ff fe43 	bl	80052a0 <Error_Handler>
        }

        __HAL_LINKDMA(uartHandle, hdmarx, hdma_usart1_rx);

        /* USART1 interrupt Init */
        HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800561a:	2200      	movs	r2, #0
 800561c:	2025      	movs	r0, #37	@ 0x25
 800561e:	4611      	mov	r1, r2
        __HAL_LINKDMA(uartHandle, hdmarx, hdma_usart1_rx);
 8005620:	63f4      	str	r4, [r6, #60]	@ 0x3c
 8005622:	6266      	str	r6, [r4, #36]	@ 0x24
        HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005624:	f000 f8d4 	bl	80057d0 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005628:	2025      	movs	r0, #37	@ 0x25
 800562a:	f000 f901 	bl	8005830 <HAL_NVIC_EnableIRQ>
        /* USER CODE BEGIN USART1_MspInit 1 */

        /* USER CODE END USART1_MspInit 1 */
    }
}
 800562e:	b006      	add	sp, #24
 8005630:	bd70      	pop	{r4, r5, r6, pc}
 8005632:	bf00      	nop
 8005634:	40013800 	.word	0x40013800
 8005638:	40010800 	.word	0x40010800
 800563c:	200003c4 	.word	0x200003c4
 8005640:	40020058 	.word	0x40020058

08005644 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{

    if (uartHandle->Instance == USART1)
 8005644:	6802      	ldr	r2, [r0, #0]
 8005646:	4b0c      	ldr	r3, [pc, #48]	@ (8005678 <HAL_UART_MspDeInit+0x34>)
{
 8005648:	b510      	push	{r4, lr}
    if (uartHandle->Instance == USART1)
 800564a:	429a      	cmp	r2, r3
{
 800564c:	4604      	mov	r4, r0
    if (uartHandle->Instance == USART1)
 800564e:	d111      	bne.n	8005674 <HAL_UART_MspDeInit+0x30>
    {
        /* USER CODE BEGIN USART1_MspDeInit 0 */

        /* USER CODE END USART1_MspDeInit 0 */
        /* Peripheral clock disable */
        __HAL_RCC_USART1_CLK_DISABLE();
 8005650:	4a0a      	ldr	r2, [pc, #40]	@ (800567c <HAL_UART_MspDeInit+0x38>)

        /**USART1 GPIO Configuration
        PA9     ------> USART1_TX
        PA10     ------> USART1_RX
        */
        HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9 | GPIO_PIN_10);
 8005652:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
        __HAL_RCC_USART1_CLK_DISABLE();
 8005656:	6993      	ldr	r3, [r2, #24]
        HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9 | GPIO_PIN_10);
 8005658:	4809      	ldr	r0, [pc, #36]	@ (8005680 <HAL_UART_MspDeInit+0x3c>)
        __HAL_RCC_USART1_CLK_DISABLE();
 800565a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800565e:	6193      	str	r3, [r2, #24]
        HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9 | GPIO_PIN_10);
 8005660:	f000 fb84 	bl	8005d6c <HAL_GPIO_DeInit>

        /* USART1 DMA DeInit */
        HAL_DMA_DeInit(uartHandle->hdmarx);
 8005664:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005666:	f000 f949 	bl	80058fc <HAL_DMA_DeInit>
        HAL_NVIC_DisableIRQ(USART1_IRQn);
        /* USER CODE BEGIN USART1_MspDeInit 1 */

        /* USER CODE END USART1_MspDeInit 1 */
    }
}
 800566a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_NVIC_DisableIRQ(USART1_IRQn);
 800566e:	2025      	movs	r0, #37	@ 0x25
 8005670:	f000 b8ec 	b.w	800584c <HAL_NVIC_DisableIRQ>
}
 8005674:	bd10      	pop	{r4, pc}
 8005676:	bf00      	nop
 8005678:	40013800 	.word	0x40013800
 800567c:	40021000 	.word	0x40021000
 8005680:	40010800 	.word	0x40010800

08005684 <usbInit>:

#include "usb.h"
#include "usb_device.h"


bool usbInit(void){
 8005684:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  bool ret = true;

  GPIO_InitTypeDef GPIO_InitStruct = {0};

      GPIO_InitStruct.Pin   = GPIO_PIN_12;
      GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_OD;
 8005686:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 800568a:	2311      	movs	r3, #17
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800568c:	2500      	movs	r5, #0
      GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_OD;
 800568e:	e9cd 6300 	strd	r6, r3, [sp]
      GPIO_InitStruct.Pull  = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005692:	2302      	movs	r3, #2
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005694:	4c0e      	ldr	r4, [pc, #56]	@ (80056d0 <usbInit+0x4c>)
 8005696:	4669      	mov	r1, sp
 8005698:	4620      	mov	r0, r4
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800569a:	9303      	str	r3, [sp, #12]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800569c:	9502      	str	r5, [sp, #8]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800569e:	f000 fa8d 	bl	8005bbc <HAL_GPIO_Init>

      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80056a2:	462a      	mov	r2, r5
 80056a4:	4631      	mov	r1, r6
 80056a6:	4620      	mov	r0, r4
 80056a8:	f000 fbce 	bl	8005e48 <HAL_GPIO_WritePin>
      delay(200);
 80056ac:	20c8      	movs	r0, #200	@ 0xc8
 80056ae:	f7ff fd73 	bl	8005198 <delay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80056b2:	2201      	movs	r2, #1
 80056b4:	4631      	mov	r1, r6
 80056b6:	4620      	mov	r0, r4
 80056b8:	f000 fbc6 	bl	8005e48 <HAL_GPIO_WritePin>

      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056bc:	4620      	mov	r0, r4
 80056be:	4669      	mov	r1, sp
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056c0:	9501      	str	r5, [sp, #4]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056c2:	f000 fa7b 	bl	8005bbc <HAL_GPIO_Init>

      MX_USB_DEVICE_Init();
 80056c6:	f003 fbc3 	bl	8008e50 <MX_USB_DEVICE_Init>

  return ret;
}
 80056ca:	2001      	movs	r0, #1
 80056cc:	b004      	add	sp, #16
 80056ce:	bd70      	pop	{r4, r5, r6, pc}
 80056d0:	40010800 	.word	0x40010800

080056d4 <hwInit>:
 */

#include "hw.h"

void hwInit(void)
{
 80056d4:	b508      	push	{r3, lr}
    bspInit();
 80056d6:	f7ff fda7 	bl	8005228 <bspInit>
    rtcInit();
 80056da:	f7ff febd 	bl	8005458 <rtcInit>

    resetInit();
 80056de:	f7ff fe9b 	bl	8005418 <resetInit>
    ledInit();
 80056e2:	f7ff fe6d 	bl	80053c0 <ledInit>
    usbInit();
 80056e6:	f7ff ffcd 	bl	8005684 <usbInit>
    uartInit();
 80056ea:	f7ff fef5 	bl	80054d8 <uartInit>
    flashInit();
}
 80056ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    flashInit();
 80056f2:	f7ff be49 	b.w	8005388 <flashInit>
	...

080056f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056f8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80056fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005734 <HAL_InitTick+0x3c>)
{
 80056fc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80056fe:	781a      	ldrb	r2, [r3, #0]
 8005700:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005704:	fbb3 f3f2 	udiv	r3, r3, r2
 8005708:	4a0b      	ldr	r2, [pc, #44]	@ (8005738 <HAL_InitTick+0x40>)
 800570a:	6810      	ldr	r0, [r2, #0]
 800570c:	fbb0 f0f3 	udiv	r0, r0, r3
 8005710:	f000 f8ae 	bl	8005870 <HAL_SYSTICK_Config>
 8005714:	4604      	mov	r4, r0
 8005716:	b958      	cbnz	r0, 8005730 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005718:	2d0f      	cmp	r5, #15
 800571a:	d809      	bhi.n	8005730 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800571c:	4602      	mov	r2, r0
 800571e:	4629      	mov	r1, r5
 8005720:	f04f 30ff 	mov.w	r0, #4294967295
 8005724:	f000 f854 	bl	80057d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005728:	4620      	mov	r0, r4
 800572a:	4b04      	ldr	r3, [pc, #16]	@ (800573c <HAL_InitTick+0x44>)
 800572c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800572e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005730:	2001      	movs	r0, #1
 8005732:	e7fc      	b.n	800572e <HAL_InitTick+0x36>
 8005734:	2000000c 	.word	0x2000000c
 8005738:	20000000 	.word	0x20000000
 800573c:	20000010 	.word	0x20000010

08005740 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005740:	4a07      	ldr	r2, [pc, #28]	@ (8005760 <HAL_Init+0x20>)
{
 8005742:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005744:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005746:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005748:	f043 0310 	orr.w	r3, r3, #16
 800574c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800574e:	f000 f82d 	bl	80057ac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8005752:	200f      	movs	r0, #15
 8005754:	f7ff ffd0 	bl	80056f8 <HAL_InitTick>
  HAL_MspInit();
 8005758:	f7ff fda4 	bl	80052a4 <HAL_MspInit>
}
 800575c:	2000      	movs	r0, #0
 800575e:	bd08      	pop	{r3, pc}
 8005760:	40022000 	.word	0x40022000

08005764 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005764:	4a03      	ldr	r2, [pc, #12]	@ (8005774 <HAL_IncTick+0x10>)
 8005766:	4b04      	ldr	r3, [pc, #16]	@ (8005778 <HAL_IncTick+0x14>)
 8005768:	6811      	ldr	r1, [r2, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	440b      	add	r3, r1
 800576e:	6013      	str	r3, [r2, #0]
}
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	20000570 	.word	0x20000570
 8005778:	2000000c 	.word	0x2000000c

0800577c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800577c:	4b01      	ldr	r3, [pc, #4]	@ (8005784 <HAL_GetTick+0x8>)
 800577e:	6818      	ldr	r0, [r3, #0]
}
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	20000570 	.word	0x20000570

08005788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005788:	b538      	push	{r3, r4, r5, lr}
 800578a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800578c:	f7ff fff6 	bl	800577c <HAL_GetTick>
 8005790:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005792:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8005794:	bf1e      	ittt	ne
 8005796:	4b04      	ldrne	r3, [pc, #16]	@ (80057a8 <HAL_Delay+0x20>)
 8005798:	781b      	ldrbne	r3, [r3, #0]
 800579a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800579c:	f7ff ffee 	bl	800577c <HAL_GetTick>
 80057a0:	1b43      	subs	r3, r0, r5
 80057a2:	42a3      	cmp	r3, r4
 80057a4:	d3fa      	bcc.n	800579c <HAL_Delay+0x14>
  {
  }
}
 80057a6:	bd38      	pop	{r3, r4, r5, pc}
 80057a8:	2000000c 	.word	0x2000000c

080057ac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057ac:	4907      	ldr	r1, [pc, #28]	@ (80057cc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80057ae:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057b0:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80057b2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80057ba:	0412      	lsls	r2, r2, #16
 80057bc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80057c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80057c8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80057ca:	4770      	bx	lr
 80057cc:	e000ed00 	.word	0xe000ed00

080057d0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057d0:	4b15      	ldr	r3, [pc, #84]	@ (8005828 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057d2:	b530      	push	{r4, r5, lr}
 80057d4:	68dc      	ldr	r4, [r3, #12]
 80057d6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057da:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057de:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057e0:	2b04      	cmp	r3, #4
 80057e2:	bf28      	it	cs
 80057e4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057e6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057e8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057ec:	bf94      	ite	ls
 80057ee:	2400      	movls	r4, #0
 80057f0:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057f2:	fa05 f303 	lsl.w	r3, r5, r3
 80057f6:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057fa:	40a5      	lsls	r5, r4
 80057fc:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005800:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8005802:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005804:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005808:	bfac      	ite	ge
 800580a:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800580e:	4a07      	ldrlt	r2, [pc, #28]	@ (800582c <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005810:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005814:	b2db      	uxtb	r3, r3
 8005816:	bfab      	itete	ge
 8005818:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800581c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005820:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005824:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005826:	bd30      	pop	{r4, r5, pc}
 8005828:	e000ed00 	.word	0xe000ed00
 800582c:	e000ed14 	.word	0xe000ed14

08005830 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005830:	2800      	cmp	r0, #0
 8005832:	db07      	blt.n	8005844 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005834:	2301      	movs	r3, #1
 8005836:	0941      	lsrs	r1, r0, #5
 8005838:	4a03      	ldr	r2, [pc, #12]	@ (8005848 <HAL_NVIC_EnableIRQ+0x18>)
 800583a:	f000 001f 	and.w	r0, r0, #31
 800583e:	4083      	lsls	r3, r0
 8005840:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	e000e100 	.word	0xe000e100

0800584c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800584c:	2800      	cmp	r0, #0
 800584e:	db0c      	blt.n	800586a <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005850:	2201      	movs	r2, #1
 8005852:	4906      	ldr	r1, [pc, #24]	@ (800586c <HAL_NVIC_DisableIRQ+0x20>)
 8005854:	0943      	lsrs	r3, r0, #5
 8005856:	f000 001f 	and.w	r0, r0, #31
 800585a:	4082      	lsls	r2, r0
 800585c:	3320      	adds	r3, #32
 800585e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005862:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005866:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800586a:	4770      	bx	lr
 800586c:	e000e100 	.word	0xe000e100

08005870 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005870:	3801      	subs	r0, #1
 8005872:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8005876:	d20b      	bcs.n	8005890 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005878:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800587c:	21f0      	movs	r1, #240	@ 0xf0
 800587e:	4a05      	ldr	r2, [pc, #20]	@ (8005894 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005880:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005882:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005886:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005888:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800588a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800588c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800588e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005890:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8005892:	4770      	bx	lr
 8005894:	e000ed00 	.word	0xe000ed00

08005898 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005898:	4603      	mov	r3, r0
{
 800589a:	b510      	push	{r4, lr}
  if(hdma == NULL)
 800589c:	b340      	cbz	r0, 80058f0 <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800589e:	2114      	movs	r1, #20
 80058a0:	6800      	ldr	r0, [r0, #0]
 80058a2:	4a14      	ldr	r2, [pc, #80]	@ (80058f4 <HAL_DMA_Init+0x5c>)
 80058a4:	4402      	add	r2, r0
 80058a6:	fbb2 f2f1 	udiv	r2, r2, r1
 80058aa:	0092      	lsls	r2, r2, #2
 80058ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80058ae:	4a12      	ldr	r2, [pc, #72]	@ (80058f8 <HAL_DMA_Init+0x60>)
 80058b0:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80058b8:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 80058bc:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058be:	68dc      	ldr	r4, [r3, #12]
  tmp = hdma->Instance->CCR;
 80058c0:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058c2:	4322      	orrs	r2, r4
 80058c4:	691c      	ldr	r4, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80058c6:	f421 517f 	bic.w	r1, r1, #16320	@ 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058ca:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058cc:	695c      	ldr	r4, [r3, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80058ce:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058d2:	4322      	orrs	r2, r4
 80058d4:	699c      	ldr	r4, [r3, #24]
 80058d6:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80058d8:	69dc      	ldr	r4, [r3, #28]
 80058da:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 80058dc:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80058de:	6002      	str	r2, [r0, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058e0:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80058e2:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058e4:	6398      	str	r0, [r3, #56]	@ 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80058e6:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 80058ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
}
 80058ee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80058f0:	2001      	movs	r0, #1
 80058f2:	e7fc      	b.n	80058ee <HAL_DMA_Init+0x56>
 80058f4:	bffdfff8 	.word	0xbffdfff8
 80058f8:	40020000 	.word	0x40020000

080058fc <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80058fc:	b510      	push	{r4, lr}
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80058fe:	b308      	cbz	r0, 8005944 <HAL_DMA_DeInit+0x48>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8005900:	6801      	ldr	r1, [r0, #0]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005902:	4a11      	ldr	r2, [pc, #68]	@ (8005948 <HAL_DMA_DeInit+0x4c>)
  __HAL_DMA_DISABLE(hdma);
 8005904:	680b      	ldr	r3, [r1, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005906:	440a      	add	r2, r1
  __HAL_DMA_DISABLE(hdma);
 8005908:	f023 0301 	bic.w	r3, r3, #1
 800590c:	600b      	str	r3, [r1, #0]
  hdma->Instance->CCR  = 0U;
 800590e:	2300      	movs	r3, #0
 8005910:	600b      	str	r3, [r1, #0]
  hdma->Instance->CNDTR = 0U;
 8005912:	604b      	str	r3, [r1, #4]
  hdma->Instance->CPAR  = 0U;
 8005914:	608b      	str	r3, [r1, #8]
  hdma->Instance->CMAR = 0U;
 8005916:	60cb      	str	r3, [r1, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005918:	2114      	movs	r1, #20
 800591a:	fbb2 f2f1 	udiv	r2, r2, r1
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 800591e:	2101      	movs	r1, #1
  hdma->DmaBaseAddress = DMA1;
 8005920:	4c0a      	ldr	r4, [pc, #40]	@ (800594c <HAL_DMA_DeInit+0x50>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005922:	0092      	lsls	r2, r2, #2
 8005924:	6402      	str	r2, [r0, #64]	@ 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8005926:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 800592a:	63c4      	str	r4, [r0, #60]	@ 0x3c
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 800592c:	6062      	str	r2, [r4, #4]
  hdma->XferHalfCpltCallback = NULL;
  hdma->XferErrorCallback = NULL;
  hdma->XferAbortCallback = NULL;

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800592e:	6383      	str	r3, [r0, #56]	@ 0x38
  hdma->XferHalfCpltCallback = NULL;
 8005930:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
  hdma->XferAbortCallback = NULL;
 8005934:	e9c0 330c 	strd	r3, r3, [r0, #48]	@ 0x30

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005938:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800593c:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8005940:	4618      	mov	r0, r3
}
 8005942:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005944:	2001      	movs	r0, #1
 8005946:	e7fc      	b.n	8005942 <HAL_DMA_DeInit+0x46>
 8005948:	bffdfff8 	.word	0xbffdfff8
 800594c:	40020000 	.word	0x40020000

08005950 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005950:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005952:	f890 4020 	ldrb.w	r4, [r0, #32]
 8005956:	2c01      	cmp	r4, #1
 8005958:	d034      	beq.n	80059c4 <HAL_DMA_Start_IT+0x74>
 800595a:	2401      	movs	r4, #1
 800595c:	f880 4020 	strb.w	r4, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005960:	f890 4021 	ldrb.w	r4, [r0, #33]	@ 0x21
 8005964:	2c01      	cmp	r4, #1
 8005966:	b2e5      	uxtb	r5, r4
 8005968:	f04f 0400 	mov.w	r4, #0
 800596c:	d128      	bne.n	80059c0 <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800596e:	2602      	movs	r6, #2
 8005970:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005974:	6384      	str	r4, [r0, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005976:	6804      	ldr	r4, [r0, #0]
 8005978:	6826      	ldr	r6, [r4, #0]
 800597a:	f026 0601 	bic.w	r6, r6, #1
 800597e:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005980:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 8005984:	40bd      	lsls	r5, r7
 8005986:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005988:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800598a:	6843      	ldr	r3, [r0, #4]
 800598c:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 800598e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005990:	bf0b      	itete	eq
 8005992:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8005994:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8005996:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8005998:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800599a:	b14b      	cbz	r3, 80059b0 <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 80059a2:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80059a4:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	f043 0301 	orr.w	r3, r3, #1
 80059ac:	6023      	str	r3, [r4, #0]
}
 80059ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	f023 0304 	bic.w	r3, r3, #4
 80059b6:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80059b8:	6823      	ldr	r3, [r4, #0]
 80059ba:	f043 030a 	orr.w	r3, r3, #10
 80059be:	e7f0      	b.n	80059a2 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 80059c0:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 80059c4:	2002      	movs	r0, #2
 80059c6:	e7f2      	b.n	80059ae <HAL_DMA_Start_IT+0x5e>

080059c8 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059c8:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
{
 80059cc:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059ce:	2a02      	cmp	r2, #2
 80059d0:	d006      	beq.n	80059e0 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059d2:	2204      	movs	r2, #4
 80059d4:	6382      	str	r2, [r0, #56]	@ 0x38
    return HAL_ERROR;
 80059d6:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2020 	strb.w	r2, [r3, #32]
}
 80059de:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059e0:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80059e2:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059e4:	6811      	ldr	r1, [r2, #0]
 80059e6:	f021 010e 	bic.w	r1, r1, #14
 80059ea:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80059ec:	6811      	ldr	r1, [r2, #0]
 80059ee:	f021 0101 	bic.w	r1, r1, #1
 80059f2:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80059f4:	2101      	movs	r1, #1
 80059f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059f8:	fa01 f202 	lsl.w	r2, r1, r2
 80059fc:	6042      	str	r2, [r0, #4]
  return status; 
 80059fe:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8005a00:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  return status; 
 8005a04:	e7e8      	b.n	80059d8 <HAL_DMA_Abort+0x10>
	...

08005a08 <HAL_DMA_Abort_IT>:
{  
 8005a08:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005a0a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d003      	beq.n	8005a1a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a12:	2304      	movs	r3, #4
 8005a14:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 8005a16:	2001      	movs	r0, #1
}
 8005a18:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a1a:	6803      	ldr	r3, [r0, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	f022 020e 	bic.w	r2, r2, #14
 8005a22:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	f022 0201 	bic.w	r2, r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005a2c:	4a17      	ldr	r2, [pc, #92]	@ (8005a8c <HAL_DMA_Abort_IT+0x84>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d01f      	beq.n	8005a72 <HAL_DMA_Abort_IT+0x6a>
 8005a32:	3214      	adds	r2, #20
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d01e      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x6e>
 8005a38:	3214      	adds	r2, #20
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d01d      	beq.n	8005a7a <HAL_DMA_Abort_IT+0x72>
 8005a3e:	3214      	adds	r2, #20
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d01d      	beq.n	8005a80 <HAL_DMA_Abort_IT+0x78>
 8005a44:	3214      	adds	r2, #20
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d01d      	beq.n	8005a86 <HAL_DMA_Abort_IT+0x7e>
 8005a4a:	3214      	adds	r2, #20
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	bf14      	ite	ne
 8005a50:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8005a54:	f44f 1380 	moveq.w	r3, #1048576	@ 0x100000
 8005a58:	4a0d      	ldr	r2, [pc, #52]	@ (8005a90 <HAL_DMA_Abort_IT+0x88>)
 8005a5a:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8005a62:	2300      	movs	r3, #0
 8005a64:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8005a68:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8005a6a:	b103      	cbz	r3, 8005a6e <HAL_DMA_Abort_IT+0x66>
      hdma->XferAbortCallback(hdma);
 8005a6c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8005a6e:	2000      	movs	r0, #0
 8005a70:	e7d2      	b.n	8005a18 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005a72:	2301      	movs	r3, #1
 8005a74:	e7f0      	b.n	8005a58 <HAL_DMA_Abort_IT+0x50>
 8005a76:	2310      	movs	r3, #16
 8005a78:	e7ee      	b.n	8005a58 <HAL_DMA_Abort_IT+0x50>
 8005a7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005a7e:	e7eb      	b.n	8005a58 <HAL_DMA_Abort_IT+0x50>
 8005a80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a84:	e7e8      	b.n	8005a58 <HAL_DMA_Abort_IT+0x50>
 8005a86:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005a8a:	e7e5      	b.n	8005a58 <HAL_DMA_Abort_IT+0x50>
 8005a8c:	40020008 	.word	0x40020008
 8005a90:	40020000 	.word	0x40020000

08005a94 <HAL_DMA_IRQHandler>:
{
 8005a94:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005a96:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005a98:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005a9a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005a9c:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005a9e:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005aa0:	4095      	lsls	r5, r2
 8005aa2:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8005aa4:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005aa6:	d032      	beq.n	8005b0e <HAL_DMA_IRQHandler+0x7a>
 8005aa8:	074d      	lsls	r5, r1, #29
 8005aaa:	d530      	bpl.n	8005b0e <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ab0:	bf5e      	ittt	pl
 8005ab2:	681a      	ldrpl	r2, [r3, #0]
 8005ab4:	f022 0204 	bicpl.w	r2, r2, #4
 8005ab8:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005aba:	4a3e      	ldr	r2, [pc, #248]	@ (8005bb4 <HAL_DMA_IRQHandler+0x120>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d019      	beq.n	8005af4 <HAL_DMA_IRQHandler+0x60>
 8005ac0:	3214      	adds	r2, #20
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d018      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x64>
 8005ac6:	3214      	adds	r2, #20
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d017      	beq.n	8005afc <HAL_DMA_IRQHandler+0x68>
 8005acc:	3214      	adds	r2, #20
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d017      	beq.n	8005b02 <HAL_DMA_IRQHandler+0x6e>
 8005ad2:	3214      	adds	r2, #20
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d017      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x74>
 8005ad8:	3214      	adds	r2, #20
 8005ada:	4293      	cmp	r3, r2
 8005adc:	bf14      	ite	ne
 8005ade:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 8005ae2:	f44f 0380 	moveq.w	r3, #4194304	@ 0x400000
 8005ae6:	4a34      	ldr	r2, [pc, #208]	@ (8005bb8 <HAL_DMA_IRQHandler+0x124>)
 8005ae8:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8005aea:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d05e      	beq.n	8005bae <HAL_DMA_IRQHandler+0x11a>
}
 8005af0:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005af2:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005af4:	2304      	movs	r3, #4
 8005af6:	e7f6      	b.n	8005ae6 <HAL_DMA_IRQHandler+0x52>
 8005af8:	2340      	movs	r3, #64	@ 0x40
 8005afa:	e7f4      	b.n	8005ae6 <HAL_DMA_IRQHandler+0x52>
 8005afc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b00:	e7f1      	b.n	8005ae6 <HAL_DMA_IRQHandler+0x52>
 8005b02:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005b06:	e7ee      	b.n	8005ae6 <HAL_DMA_IRQHandler+0x52>
 8005b08:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005b0c:	e7eb      	b.n	8005ae6 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005b0e:	2502      	movs	r5, #2
 8005b10:	4095      	lsls	r5, r2
 8005b12:	4225      	tst	r5, r4
 8005b14:	d035      	beq.n	8005b82 <HAL_DMA_IRQHandler+0xee>
 8005b16:	078d      	lsls	r5, r1, #30
 8005b18:	d533      	bpl.n	8005b82 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	0694      	lsls	r4, r2, #26
 8005b1e:	d406      	bmi.n	8005b2e <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	f022 020a 	bic.w	r2, r2, #10
 8005b26:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f880 2021 	strb.w	r2, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005b2e:	4a21      	ldr	r2, [pc, #132]	@ (8005bb4 <HAL_DMA_IRQHandler+0x120>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d019      	beq.n	8005b68 <HAL_DMA_IRQHandler+0xd4>
 8005b34:	3214      	adds	r2, #20
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d018      	beq.n	8005b6c <HAL_DMA_IRQHandler+0xd8>
 8005b3a:	3214      	adds	r2, #20
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d017      	beq.n	8005b70 <HAL_DMA_IRQHandler+0xdc>
 8005b40:	3214      	adds	r2, #20
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d017      	beq.n	8005b76 <HAL_DMA_IRQHandler+0xe2>
 8005b46:	3214      	adds	r2, #20
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d017      	beq.n	8005b7c <HAL_DMA_IRQHandler+0xe8>
 8005b4c:	3214      	adds	r2, #20
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	bf14      	ite	ne
 8005b52:	f04f 7300 	movne.w	r3, #33554432	@ 0x2000000
 8005b56:	f44f 1300 	moveq.w	r3, #2097152	@ 0x200000
 8005b5a:	4a17      	ldr	r2, [pc, #92]	@ (8005bb8 <HAL_DMA_IRQHandler+0x124>)
 8005b5c:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8005b5e:	2300      	movs	r3, #0
 8005b60:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8005b64:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005b66:	e7c1      	b.n	8005aec <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005b68:	2302      	movs	r3, #2
 8005b6a:	e7f6      	b.n	8005b5a <HAL_DMA_IRQHandler+0xc6>
 8005b6c:	2320      	movs	r3, #32
 8005b6e:	e7f4      	b.n	8005b5a <HAL_DMA_IRQHandler+0xc6>
 8005b70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b74:	e7f1      	b.n	8005b5a <HAL_DMA_IRQHandler+0xc6>
 8005b76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005b7a:	e7ee      	b.n	8005b5a <HAL_DMA_IRQHandler+0xc6>
 8005b7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005b80:	e7eb      	b.n	8005b5a <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005b82:	2508      	movs	r5, #8
 8005b84:	4095      	lsls	r5, r2
 8005b86:	4225      	tst	r5, r4
 8005b88:	d011      	beq.n	8005bae <HAL_DMA_IRQHandler+0x11a>
 8005b8a:	0709      	lsls	r1, r1, #28
 8005b8c:	d50f      	bpl.n	8005bae <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b8e:	6819      	ldr	r1, [r3, #0]
 8005b90:	f021 010e 	bic.w	r1, r1, #14
 8005b94:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005b96:	2301      	movs	r3, #1
 8005b98:	fa03 f202 	lsl.w	r2, r3, r2
 8005b9c:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005b9e:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8005ba0:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8005baa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8005bac:	e79e      	b.n	8005aec <HAL_DMA_IRQHandler+0x58>
}
 8005bae:	bc70      	pop	{r4, r5, r6}
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	40020008 	.word	0x40020008
 8005bb8:	40020000 	.word	0x40020000

08005bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005bc0:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8005bc2:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005bc4:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8005d50 <HAL_GPIO_Init+0x194>
 8005bc8:	4b62      	ldr	r3, [pc, #392]	@ (8005d54 <HAL_GPIO_Init+0x198>)
      switch (GPIO_Init->Mode)
 8005bca:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 8005d58 <HAL_GPIO_Init+0x19c>
 8005bce:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8005d5c <HAL_GPIO_Init+0x1a0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005bd2:	680a      	ldr	r2, [r1, #0]
 8005bd4:	fa32 f506 	lsrs.w	r5, r2, r6
 8005bd8:	d102      	bne.n	8005be0 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8005bda:	b003      	add	sp, #12
 8005bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8005be0:	2701      	movs	r7, #1
 8005be2:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005be4:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 8005be8:	ea37 0202 	bics.w	r2, r7, r2
 8005bec:	d17a      	bne.n	8005ce4 <HAL_GPIO_Init+0x128>
      switch (GPIO_Init->Mode)
 8005bee:	684a      	ldr	r2, [r1, #4]
 8005bf0:	2a03      	cmp	r2, #3
 8005bf2:	d807      	bhi.n	8005c04 <HAL_GPIO_Init+0x48>
 8005bf4:	3a01      	subs	r2, #1
 8005bf6:	2a02      	cmp	r2, #2
 8005bf8:	f200 8083 	bhi.w	8005d02 <HAL_GPIO_Init+0x146>
 8005bfc:	e8df f002 	tbb	[pc, r2]
 8005c00:	9792      	.short	0x9792
 8005c02:	9d          	.byte	0x9d
 8005c03:	00          	.byte	0x00
 8005c04:	2a12      	cmp	r2, #18
 8005c06:	f000 8095 	beq.w	8005d34 <HAL_GPIO_Init+0x178>
 8005c0a:	d86d      	bhi.n	8005ce8 <HAL_GPIO_Init+0x12c>
 8005c0c:	2a11      	cmp	r2, #17
 8005c0e:	f000 808b 	beq.w	8005d28 <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005c12:	2dff      	cmp	r5, #255	@ 0xff
 8005c14:	bf98      	it	ls
 8005c16:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005c18:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005c1c:	bf88      	it	hi
 8005c1e:	f100 0904 	addhi.w	r9, r0, #4
 8005c22:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005c26:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005c2a:	bf88      	it	hi
 8005c2c:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005c2e:	fa0b fa02 	lsl.w	sl, fp, r2
 8005c32:	ea27 070a 	bic.w	r7, r7, sl
 8005c36:	fa04 f202 	lsl.w	r2, r4, r2
 8005c3a:	4317      	orrs	r7, r2
 8005c3c:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005c40:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8005c44:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 8005c48:	d04c      	beq.n	8005ce4 <HAL_GPIO_Init+0x128>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005c4a:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8005c4e:	f026 0703 	bic.w	r7, r6, #3
 8005c52:	f042 0201 	orr.w	r2, r2, #1
 8005c56:	f8cc 2018 	str.w	r2, [ip, #24]
 8005c5a:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8005c5e:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8005c62:	f002 0201 	and.w	r2, r2, #1
 8005c66:	9201      	str	r2, [sp, #4]
 8005c68:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005c6c:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005c70:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005c72:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8005c76:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005c78:	fa0b fb0a 	lsl.w	fp, fp, sl
 8005c7c:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005c80:	4a37      	ldr	r2, [pc, #220]	@ (8005d60 <HAL_GPIO_Init+0x1a4>)
 8005c82:	4290      	cmp	r0, r2
 8005c84:	d05d      	beq.n	8005d42 <HAL_GPIO_Init+0x186>
 8005c86:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005c8a:	4290      	cmp	r0, r2
 8005c8c:	d05b      	beq.n	8005d46 <HAL_GPIO_Init+0x18a>
 8005c8e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005c92:	4290      	cmp	r0, r2
 8005c94:	d059      	beq.n	8005d4a <HAL_GPIO_Init+0x18e>
 8005c96:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005c9a:	4290      	cmp	r0, r2
 8005c9c:	bf14      	ite	ne
 8005c9e:	2204      	movne	r2, #4
 8005ca0:	2203      	moveq	r2, #3
 8005ca2:	fa02 f20a 	lsl.w	r2, r2, sl
 8005ca6:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8005caa:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8005cac:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005cae:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8005cb2:	bf14      	ite	ne
 8005cb4:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005cb6:	43aa      	biceq	r2, r5
 8005cb8:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8005cba:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005cbc:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8005cc0:	bf14      	ite	ne
 8005cc2:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005cc4:	43aa      	biceq	r2, r5
 8005cc6:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8005cc8:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005cca:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8005cce:	bf14      	ite	ne
 8005cd0:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005cd2:	43aa      	biceq	r2, r5
 8005cd4:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8005cd6:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005cd8:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8005cdc:	bf14      	ite	ne
 8005cde:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005ce0:	43aa      	biceq	r2, r5
 8005ce2:	601a      	str	r2, [r3, #0]
	position++;
 8005ce4:	3601      	adds	r6, #1
 8005ce6:	e774      	b.n	8005bd2 <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8005ce8:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8005d64 <HAL_GPIO_Init+0x1a8>
 8005cec:	454a      	cmp	r2, r9
 8005cee:	d008      	beq.n	8005d02 <HAL_GPIO_Init+0x146>
 8005cf0:	d810      	bhi.n	8005d14 <HAL_GPIO_Init+0x158>
 8005cf2:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8005cf6:	454a      	cmp	r2, r9
 8005cf8:	d003      	beq.n	8005d02 <HAL_GPIO_Init+0x146>
 8005cfa:	4572      	cmp	r2, lr
 8005cfc:	d001      	beq.n	8005d02 <HAL_GPIO_Init+0x146>
 8005cfe:	4542      	cmp	r2, r8
 8005d00:	d187      	bne.n	8005c12 <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005d02:	688a      	ldr	r2, [r1, #8]
 8005d04:	b1da      	cbz	r2, 8005d3e <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005d06:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005d08:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 8005d0c:	bf0c      	ite	eq
 8005d0e:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 8005d10:	6147      	strne	r7, [r0, #20]
 8005d12:	e77e      	b.n	8005c12 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8005d14:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 8005d68 <HAL_GPIO_Init+0x1ac>
 8005d18:	454a      	cmp	r2, r9
 8005d1a:	d0f2      	beq.n	8005d02 <HAL_GPIO_Init+0x146>
 8005d1c:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8005d20:	454a      	cmp	r2, r9
 8005d22:	e7ed      	b.n	8005d00 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005d24:	68cc      	ldr	r4, [r1, #12]
          break;
 8005d26:	e774      	b.n	8005c12 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005d28:	68cc      	ldr	r4, [r1, #12]
 8005d2a:	3404      	adds	r4, #4
          break;
 8005d2c:	e771      	b.n	8005c12 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005d2e:	68cc      	ldr	r4, [r1, #12]
 8005d30:	3408      	adds	r4, #8
          break;
 8005d32:	e76e      	b.n	8005c12 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005d34:	68cc      	ldr	r4, [r1, #12]
 8005d36:	340c      	adds	r4, #12
          break;
 8005d38:	e76b      	b.n	8005c12 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8005d3a:	2400      	movs	r4, #0
 8005d3c:	e769      	b.n	8005c12 <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005d3e:	2404      	movs	r4, #4
 8005d40:	e767      	b.n	8005c12 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005d42:	2200      	movs	r2, #0
 8005d44:	e7ad      	b.n	8005ca2 <HAL_GPIO_Init+0xe6>
 8005d46:	2201      	movs	r2, #1
 8005d48:	e7ab      	b.n	8005ca2 <HAL_GPIO_Init+0xe6>
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	e7a9      	b.n	8005ca2 <HAL_GPIO_Init+0xe6>
 8005d4e:	bf00      	nop
 8005d50:	40021000 	.word	0x40021000
 8005d54:	40010400 	.word	0x40010400
 8005d58:	10210000 	.word	0x10210000
 8005d5c:	10110000 	.word	0x10110000
 8005d60:	40010800 	.word	0x40010800
 8005d64:	10220000 	.word	0x10220000
 8005d68:	10310000 	.word	0x10310000

08005d6c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005d6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005d70:	f04f 0b04 	mov.w	fp, #4
  uint32_t position = 0x00u;
 8005d74:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005d76:	f04f 0a01 	mov.w	sl, #1
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8005d7a:	f04f 080f 	mov.w	r8, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005d7e:	eb00 030b 	add.w	r3, r0, fp
 8005d82:	9301      	str	r3, [sp, #4]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005d84:	4b2e      	ldr	r3, [pc, #184]	@ (8005e40 <HAL_GPIO_DeInit+0xd4>)
  while ((GPIO_Pin >> position) != 0u)
 8005d86:	fa31 f402 	lsrs.w	r4, r1, r2
 8005d8a:	d102      	bne.n	8005d92 <HAL_GPIO_DeInit+0x26>
      CLEAR_BIT(GPIOx->ODR, iocurrent);
    }

    position++;
  }
}
 8005d8c:	b003      	add	sp, #12
 8005d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005d92:	fa0a f702 	lsl.w	r7, sl, r2
    if (iocurrent)
 8005d96:	400f      	ands	r7, r1
 8005d98:	d049      	beq.n	8005e2e <HAL_GPIO_DeInit+0xc2>
      tmp = AFIO->EXTICR[position >> 2u];
 8005d9a:	f022 0403 	bic.w	r4, r2, #3
 8005d9e:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8005da2:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8005da6:	f002 0c03 	and.w	ip, r2, #3
      tmp = AFIO->EXTICR[position >> 2u];
 8005daa:	68a5      	ldr	r5, [r4, #8]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8005dac:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005db0:	fa08 f90c 	lsl.w	r9, r8, ip
 8005db4:	ea09 0e05 	and.w	lr, r9, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005db8:	4d22      	ldr	r5, [pc, #136]	@ (8005e44 <HAL_GPIO_DeInit+0xd8>)
 8005dba:	42a8      	cmp	r0, r5
 8005dbc:	d039      	beq.n	8005e32 <HAL_GPIO_DeInit+0xc6>
 8005dbe:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005dc2:	42a8      	cmp	r0, r5
 8005dc4:	d037      	beq.n	8005e36 <HAL_GPIO_DeInit+0xca>
 8005dc6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005dca:	42a8      	cmp	r0, r5
 8005dcc:	d035      	beq.n	8005e3a <HAL_GPIO_DeInit+0xce>
 8005dce:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005dd2:	42a8      	cmp	r0, r5
 8005dd4:	bf0c      	ite	eq
 8005dd6:	2503      	moveq	r5, #3
 8005dd8:	2504      	movne	r5, #4
 8005dda:	fa05 f50c 	lsl.w	r5, r5, ip
 8005dde:	4575      	cmp	r5, lr
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005de0:	ea6f 0607 	mvn.w	r6, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005de4:	d10f      	bne.n	8005e06 <HAL_GPIO_DeInit+0x9a>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005de6:	681d      	ldr	r5, [r3, #0]
 8005de8:	4035      	ands	r5, r6
 8005dea:	601d      	str	r5, [r3, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8005dec:	685d      	ldr	r5, [r3, #4]
 8005dee:	4035      	ands	r5, r6
 8005df0:	605d      	str	r5, [r3, #4]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8005df2:	68dd      	ldr	r5, [r3, #12]
 8005df4:	4035      	ands	r5, r6
 8005df6:	60dd      	str	r5, [r3, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8005df8:	689d      	ldr	r5, [r3, #8]
 8005dfa:	4035      	ands	r5, r6
 8005dfc:	609d      	str	r5, [r3, #8]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8005dfe:	68a5      	ldr	r5, [r4, #8]
 8005e00:	ea25 0509 	bic.w	r5, r5, r9
 8005e04:	60a5      	str	r5, [r4, #8]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005e06:	2fff      	cmp	r7, #255	@ 0xff
 8005e08:	bf94      	ite	ls
 8005e0a:	4607      	movls	r7, r0
 8005e0c:	9f01      	ldrhi	r7, [sp, #4]
 8005e0e:	ea4f 0482 	mov.w	r4, r2, lsl #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005e12:	683d      	ldr	r5, [r7, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005e14:	bf88      	it	hi
 8005e16:	3c20      	subhi	r4, #32
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005e18:	fa08 fc04 	lsl.w	ip, r8, r4
 8005e1c:	ea25 050c 	bic.w	r5, r5, ip
 8005e20:	fa0b f404 	lsl.w	r4, fp, r4
 8005e24:	4325      	orrs	r5, r4
 8005e26:	603d      	str	r5, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8005e28:	68c4      	ldr	r4, [r0, #12]
 8005e2a:	4034      	ands	r4, r6
 8005e2c:	60c4      	str	r4, [r0, #12]
    position++;
 8005e2e:	3201      	adds	r2, #1
 8005e30:	e7a9      	b.n	8005d86 <HAL_GPIO_DeInit+0x1a>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005e32:	2500      	movs	r5, #0
 8005e34:	e7d1      	b.n	8005dda <HAL_GPIO_DeInit+0x6e>
 8005e36:	2501      	movs	r5, #1
 8005e38:	e7cf      	b.n	8005dda <HAL_GPIO_DeInit+0x6e>
 8005e3a:	2502      	movs	r5, #2
 8005e3c:	e7cd      	b.n	8005dda <HAL_GPIO_DeInit+0x6e>
 8005e3e:	bf00      	nop
 8005e40:	40010400 	.word	0x40010400
 8005e44:	40010800 	.word	0x40010800

08005e48 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e48:	b10a      	cbz	r2, 8005e4e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005e4a:	6101      	str	r1, [r0, #16]
  }
}
 8005e4c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005e4e:	0409      	lsls	r1, r1, #16
 8005e50:	e7fb      	b.n	8005e4a <HAL_GPIO_WritePin+0x2>

08005e52 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005e52:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005e54:	ea01 0203 	and.w	r2, r1, r3
 8005e58:	ea21 0103 	bic.w	r1, r1, r3
 8005e5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005e60:	6101      	str	r1, [r0, #16]
}
 8005e62:	4770      	bx	lr

08005e64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005e66:	4604      	mov	r4, r0
 8005e68:	b1e0      	cbz	r0, 8005ea4 <HAL_PCD_Init+0x40>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005e6a:	f890 3291 	ldrb.w	r3, [r0, #657]	@ 0x291
 8005e6e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005e72:	b91b      	cbnz	r3, 8005e7c <HAL_PCD_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005e74:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005e78:	f003 f942 	bl	8009100 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8005e82:	2300      	movs	r3, #0

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005e84:	4625      	mov	r5, r4
  hpcd->Init.dma_enable = 0U;
 8005e86:	7163      	strb	r3, [r4, #5]
  __HAL_PCD_DISABLE(hpcd);
 8005e88:	f855 0b04 	ldr.w	r0, [r5], #4
 8005e8c:	f001 fde1 	bl	8007a52 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e90:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8005e94:	6820      	ldr	r0, [r4, #0]
 8005e96:	f001 fdcc 	bl	8007a32 <USB_CoreInit>
 8005e9a:	4601      	mov	r1, r0
 8005e9c:	b128      	cbz	r0, 8005eaa <HAL_PCD_Init+0x46>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 8005ea4:	2501      	movs	r5, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005eaa:	6820      	ldr	r0, [r4, #0]
 8005eac:	f001 fddb 	bl	8007a66 <USB_SetCurrentMode>
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	d1f4      	bne.n	8005e9e <HAL_PCD_Init+0x3a>
 8005eb4:	4602      	mov	r2, r0
    hpcd->IN_ep[i].is_in = 1U;
 8005eb6:	2701      	movs	r7, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005eb8:	7926      	ldrb	r6, [r4, #4]
 8005eba:	f104 0310 	add.w	r3, r4, #16
 8005ebe:	b2c1      	uxtb	r1, r0
 8005ec0:	428e      	cmp	r6, r1
 8005ec2:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8005ec6:	d818      	bhi.n	8005efa <HAL_PCD_Init+0x96>
 8005ec8:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8005eca:	460a      	mov	r2, r1
 8005ecc:	f504 73a8 	add.w	r3, r4, #336	@ 0x150
 8005ed0:	b2c8      	uxtb	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ed2:	4286      	cmp	r6, r0
 8005ed4:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8005ed8:	d81b      	bhi.n	8005f12 <HAL_PCD_Init+0xae>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005eda:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8005ede:	6820      	ldr	r0, [r4, #0]
 8005ee0:	f001 fdc3 	bl	8007a6a <USB_DevInit>
 8005ee4:	4605      	mov	r5, r0
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	d1d9      	bne.n	8005e9e <HAL_PCD_Init+0x3a>
  hpcd->State = HAL_PCD_STATE_READY;
 8005eea:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8005eec:	7360      	strb	r0, [r4, #13]
  (void)USB_DevDisconnect(hpcd->Instance);
 8005eee:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8005ef0:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8005ef4:	f002 f86e 	bl	8007fd4 <USB_DevDisconnect>
  return HAL_OK;
 8005ef8:	e7d5      	b.n	8005ea6 <HAL_PCD_Init+0x42>
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005efa:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->IN_ep[i].is_in = 1U;
 8005efe:	f803 7c27 	strb.w	r7, [r3, #-39]
    hpcd->IN_ep[i].num = i;
 8005f02:	f803 1c28 	strb.w	r1, [r3, #-40]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005f06:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005f0a:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f0e:	3001      	adds	r0, #1
 8005f10:	e7d5      	b.n	8005ebe <HAL_PCD_Init+0x5a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005f12:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->OUT_ep[i].is_in = 0U;
 8005f16:	f803 2c27 	strb.w	r2, [r3, #-39]
    hpcd->OUT_ep[i].num = i;
 8005f1a:	f803 0c28 	strb.w	r0, [r3, #-40]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005f1e:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005f22:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f26:	3101      	adds	r1, #1
 8005f28:	e7d2      	b.n	8005ed0 <HAL_PCD_Init+0x6c>

08005f2a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005f2a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8005f2c:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
{
 8005f30:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d010      	beq.n	8005f58 <HAL_PCD_Start+0x2e>
 8005f36:	2501      	movs	r5, #1
 8005f38:	f880 5290 	strb.w	r5, [r0, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8005f3c:	6800      	ldr	r0, [r0, #0]
 8005f3e:	f001 fd7f 	bl	8007a40 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005f42:	4629      	mov	r1, r5
 8005f44:	4620      	mov	r0, r4
 8005f46:	f003 f9e2 	bl	800930e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8005f4a:	6820      	ldr	r0, [r4, #0]
 8005f4c:	f002 f840 	bl	8007fd0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005f50:	2000      	movs	r0, #0
 8005f52:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 8005f56:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8005f58:	2002      	movs	r0, #2
 8005f5a:	e7fc      	b.n	8005f56 <HAL_PCD_Start+0x2c>

08005f5c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005f5c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8005f5e:	f890 2290 	ldrb.w	r2, [r0, #656]	@ 0x290
{
 8005f62:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8005f64:	2a01      	cmp	r2, #1
 8005f66:	d00a      	beq.n	8005f7e <HAL_PCD_SetAddress+0x22>
 8005f68:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8005f6a:	7341      	strb	r1, [r0, #13]
  __HAL_LOCK(hpcd);
 8005f6c:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005f70:	6800      	ldr	r0, [r0, #0]
 8005f72:	f002 f827 	bl	8007fc4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005f76:	2000      	movs	r0, #0
 8005f78:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 8005f7c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8005f7e:	2002      	movs	r0, #2
 8005f80:	e7fc      	b.n	8005f7c <HAL_PCD_SetAddress+0x20>
	...

08005f84 <HAL_PCD_IRQHandler>:
{
 8005f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f88:	4604      	mov	r4, r0
 8005f8a:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005f8c:	6800      	ldr	r0, [r0, #0]
 8005f8e:	f002 f823 	bl	8007fd8 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005f92:	f410 4500 	ands.w	r5, r0, #32768	@ 0x8000
 8005f96:	f000 844f 	beq.w	8006838 <HAL_PCD_IRQHandler+0x8b4>
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);

        if (ep->type == EP_TYPE_ISOC)
 8005f9a:	2528      	movs	r5, #40	@ 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005f9c:	4ec6      	ldr	r6, [pc, #792]	@ (80062b8 <HAL_PCD_IRQHandler+0x334>)
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005f9e:	6820      	ldr	r0, [r4, #0]
 8005fa0:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8005fa4:	041f      	lsls	r7, r3, #16
 8005fa6:	d402      	bmi.n	8005fae <HAL_PCD_IRQHandler+0x2a>
}
 8005fa8:	b005      	add	sp, #20
 8005faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8005fae:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
    if (epindex == 0U)
 8005fb2:	f013 070f 	ands.w	r7, r3, #15
    wIstr = hpcd->Instance->ISTR;
 8005fb6:	b299      	uxth	r1, r3
    if (epindex == 0U)
 8005fb8:	f040 80c0 	bne.w	800613c <HAL_PCD_IRQHandler+0x1b8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005fbc:	f011 0110 	ands.w	r1, r1, #16
 8005fc0:	d126      	bne.n	8006010 <HAL_PCD_IRQHandler+0x8c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005fc2:	8803      	ldrh	r3, [r0, #0]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	4033      	ands	r3, r6
 8005fc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fcc:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005fce:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8005fd2:	7c22      	ldrb	r2, [r4, #16]
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fda:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005fde:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
        ep->xfer_buff += ep->xfer_count;
 8005fe2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005fe4:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8005fe8:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005fea:	62e3      	str	r3, [r4, #44]	@ 0x2c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005fec:	4620      	mov	r0, r4
        ep->xfer_buff += ep->xfer_count;
 8005fee:	6262      	str	r2, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005ff0:	f003 f8b5 	bl	800915e <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005ff4:	7b63      	ldrb	r3, [r4, #13]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d0d1      	beq.n	8005f9e <HAL_PCD_IRQHandler+0x1a>
 8005ffa:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005ffc:	6821      	ldr	r1, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005ffe:	2a00      	cmp	r2, #0
 8006000:	d1cd      	bne.n	8005f9e <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006002:	7b63      	ldrb	r3, [r4, #13]
 8006004:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006008:	f8a1 304c 	strh.w	r3, [r1, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800600c:	7362      	strb	r2, [r4, #13]
 800600e:	e7c6      	b.n	8005f9e <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006010:	8807      	ldrh	r7, [r0, #0]
 8006012:	b2bb      	uxth	r3, r7
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006014:	f417 6700 	ands.w	r7, r7, #2048	@ 0x800
 8006018:	d021      	beq.n	800605e <HAL_PCD_IRQHandler+0xda>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800601a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800601e:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 8006022:	b29b      	uxth	r3, r3
 8006024:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006028:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800602c:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006030:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8006034:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006038:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800603c:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 8006040:	f002 fa15 	bl	800846e <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006044:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8006046:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006048:	8813      	ldrh	r3, [r2, #0]
 800604a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800604e:	051b      	lsls	r3, r3, #20
 8006050:	0d1b      	lsrs	r3, r3, #20
 8006052:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006056:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8006058:	f003 f872 	bl	8009140 <HAL_PCD_SetupStageCallback>
 800605c:	e79f      	b.n	8005f9e <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800605e:	0419      	lsls	r1, r3, #16
 8006060:	d59d      	bpl.n	8005f9e <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006062:	8803      	ldrh	r3, [r0, #0]
 8006064:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006068:	051b      	lsls	r3, r3, #20
 800606a:	0d1b      	lsrs	r3, r3, #20
 800606c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006070:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006072:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8006076:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 800607a:	b29b      	uxth	r3, r3
 800607c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006080:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8006084:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 8006088:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800608c:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006090:	b18b      	cbz	r3, 80060b6 <HAL_PCD_IRQHandler+0x132>
 8006092:	f8d4 1164 	ldr.w	r1, [r4, #356]	@ 0x164
 8006096:	b171      	cbz	r1, 80060b6 <HAL_PCD_IRQHandler+0x132>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006098:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 800609c:	f002 f9e7 	bl	800846e <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80060a0:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 80060a4:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80060a8:	4639      	mov	r1, r7
            ep->xfer_buff += ep->xfer_count;
 80060aa:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80060ac:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 80060ae:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80060b2:	f003 f84b 	bl	800914c <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80060b6:	6821      	ldr	r1, [r4, #0]
 80060b8:	880a      	ldrh	r2, [r1, #0]
 80060ba:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80060bc:	0512      	lsls	r2, r2, #20
 80060be:	f53f af6e 	bmi.w	8005f9e <HAL_PCD_IRQHandler+0x1a>
 80060c2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80060c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80060ca:	f43f af68 	beq.w	8005f9e <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80060ce:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 80060d2:	f201 400c 	addw	r0, r1, #1036	@ 0x40c
 80060d6:	b292      	uxth	r2, r2
 80060d8:	5a83      	ldrh	r3, [r0, r2]
 80060da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060de:	5283      	strh	r3, [r0, r2]
 80060e0:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
 80060e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80060e6:	d91d      	bls.n	8006124 <HAL_PCD_IRQHandler+0x1a0>
 80060e8:	095f      	lsrs	r7, r3, #5
 80060ea:	06db      	lsls	r3, r3, #27
 80060ec:	5a83      	ldrh	r3, [r0, r2]
 80060ee:	bf08      	it	eq
 80060f0:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 80060fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006102:	b29b      	uxth	r3, r3
 8006104:	5283      	strh	r3, [r0, r2]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006106:	880b      	ldrh	r3, [r1, #0]
 8006108:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800610c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006110:	041b      	lsls	r3, r3, #16
 8006112:	0c1b      	lsrs	r3, r3, #16
 8006114:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8006118:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800611c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006120:	800b      	strh	r3, [r1, #0]
 8006122:	e73c      	b.n	8005f9e <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006124:	b90b      	cbnz	r3, 800612a <HAL_PCD_IRQHandler+0x1a6>
 8006126:	5a83      	ldrh	r3, [r0, r2]
 8006128:	e7e7      	b.n	80060fa <HAL_PCD_IRQHandler+0x176>
 800612a:	085f      	lsrs	r7, r3, #1
 800612c:	07db      	lsls	r3, r3, #31
 800612e:	5a83      	ldrh	r3, [r0, r2]
 8006130:	bf48      	it	mi
 8006132:	3701      	addmi	r7, #1
 8006134:	b29b      	uxth	r3, r3
 8006136:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 800613a:	e7e2      	b.n	8006102 <HAL_PCD_IRQHandler+0x17e>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800613c:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006140:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006142:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006146:	f140 80f6 	bpl.w	8006336 <HAL_PCD_IRQHandler+0x3b2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800614a:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 800614e:	fb05 4107 	mla	r1, r5, r7, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006156:	051b      	lsls	r3, r3, #20
 8006158:	0d1b      	lsrs	r3, r3, #20
 800615a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800615e:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 8006162:	f891 315c 	ldrb.w	r3, [r1, #348]	@ 0x15c
 8006166:	f500 6e80 	add.w	lr, r0, #1024	@ 0x400
 800616a:	b9bb      	cbnz	r3, 800619c <HAL_PCD_IRQHandler+0x218>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800616c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8006170:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
 8006174:	b29b      	uxth	r3, r3
 8006176:	3306      	adds	r3, #6
 8006178:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800617c:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8006180:	f3c9 0909 	ubfx	r9, r9, #0, #10
          if (count != 0U)
 8006184:	f1b9 0f00 	cmp.w	r9, #0
 8006188:	f000 80ba 	beq.w	8006300 <HAL_PCD_IRQHandler+0x37c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800618c:	464b      	mov	r3, r9
 800618e:	f8b1 2156 	ldrh.w	r2, [r1, #342]	@ 0x156
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006192:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8006196:	f002 f96a 	bl	800846e <USB_ReadPMA>
 800619a:	e0b1      	b.n	8006300 <HAL_PCD_IRQHandler+0x37c>
          if (ep->type == EP_TYPE_BULK)
 800619c:	f891 3153 	ldrb.w	r3, [r1, #339]	@ 0x153

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80061a0:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
          if (ep->type == EP_TYPE_BULK)
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	f040 8089 	bne.w	80062bc <HAL_PCD_IRQHandler+0x338>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80061aa:	f8b0 9050 	ldrh.w	r9, [r0, #80]	@ 0x50
 80061ae:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
 80061b2:	fa1f f989 	uxth.w	r9, r9
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80061b6:	f418 4a80 	ands.w	sl, r8, #16384	@ 0x4000

    if (ep->xfer_len >= count)
 80061ba:	f8d1 3168 	ldr.w	r3, [r1, #360]	@ 0x168
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80061be:	44d9      	add	r9, fp
 80061c0:	f008 0c40 	and.w	ip, r8, #64	@ 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80061c4:	d03c      	beq.n	8006240 <HAL_PCD_IRQHandler+0x2bc>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80061c6:	f109 0902 	add.w	r9, r9, #2
 80061ca:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 80061ce:	f3c9 0909 	ubfx	r9, r9, #0, #10
    if (ep->xfer_len >= count)
 80061d2:	4599      	cmp	r9, r3
 80061d4:	d913      	bls.n	80061fe <HAL_PCD_IRQHandler+0x27a>
 80061d6:	2300      	movs	r3, #0
 80061d8:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80061dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80061e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061e8:	041b      	lsls	r3, r3, #16
 80061ea:	0c1b      	lsrs	r3, r3, #16
 80061ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80061f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061f8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80061fc:	e005      	b.n	800620a <HAL_PCD_IRQHandler+0x286>
      ep->xfer_len -= count;
 80061fe:	eba3 0309 	sub.w	r3, r3, r9
 8006202:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8006206:	2b00      	cmp	r3, #0
 8006208:	d0e8      	beq.n	80061dc <HAL_PCD_IRQHandler+0x258>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800620a:	f1bc 0f00 	cmp.w	ip, #0
 800620e:	d00d      	beq.n	800622c <HAL_PCD_IRQHandler+0x2a8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006210:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006214:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006218:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800621c:	041b      	lsls	r3, r3, #16
 800621e:	0c1b      	lsrs	r3, r3, #16
 8006220:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006224:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006228:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 800622c:	f1b9 0f00 	cmp.w	r9, #0
 8006230:	d066      	beq.n	8006300 <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006232:	2128      	movs	r1, #40	@ 0x28
 8006234:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006238:	464b      	mov	r3, r9
 800623a:	f8b1 2158 	ldrh.w	r2, [r1, #344]	@ 0x158
 800623e:	e7a8      	b.n	8006192 <HAL_PCD_IRQHandler+0x20e>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006240:	f109 0906 	add.w	r9, r9, #6
 8006244:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 8006248:	f3c9 0909 	ubfx	r9, r9, #0, #10

    if (ep->xfer_len >= count)
 800624c:	4599      	cmp	r9, r3
 800624e:	d912      	bls.n	8006276 <HAL_PCD_IRQHandler+0x2f2>
 8006250:	f8c1 a168 	str.w	sl, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006254:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006258:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800625c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006260:	041b      	lsls	r3, r3, #16
 8006262:	0c1b      	lsrs	r3, r3, #16
 8006264:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006268:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800626c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006270:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8006274:	e005      	b.n	8006282 <HAL_PCD_IRQHandler+0x2fe>
      ep->xfer_len -= count;
 8006276:	eba3 0309 	sub.w	r3, r3, r9
 800627a:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 800627e:	2b00      	cmp	r3, #0
 8006280:	d0e8      	beq.n	8006254 <HAL_PCD_IRQHandler+0x2d0>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006282:	f1bc 0f00 	cmp.w	ip, #0
 8006286:	d10d      	bne.n	80062a4 <HAL_PCD_IRQHandler+0x320>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006288:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800628c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006290:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006294:	041b      	lsls	r3, r3, #16
 8006296:	0c1b      	lsrs	r3, r3, #16
 8006298:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800629c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80062a0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 80062a4:	f1b9 0f00 	cmp.w	r9, #0
 80062a8:	d02a      	beq.n	8006300 <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80062aa:	2128      	movs	r1, #40	@ 0x28
 80062ac:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80062b0:	464b      	mov	r3, r9
 80062b2:	f8b1 215a 	ldrh.w	r2, [r1, #346]	@ 0x15a
 80062b6:	e76c      	b.n	8006192 <HAL_PCD_IRQHandler+0x20e>
 80062b8:	ffff8f0f 	.word	0xffff8f0f
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80062bc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80062c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062c8:	041b      	lsls	r3, r3, #16
 80062ca:	0c1b      	lsrs	r3, r3, #16
 80062cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80062d4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80062d8:	f891 3150 	ldrb.w	r3, [r1, #336]	@ 0x150
 80062dc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80062e6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80062ea:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80062ec:	d054      	beq.n	8006398 <HAL_PCD_IRQHandler+0x414>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80062ee:	3202      	adds	r2, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 80062f6:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 80062fa:	f1b9 0f00 	cmp.w	r9, #0
 80062fe:	d19b      	bne.n	8006238 <HAL_PCD_IRQHandler+0x2b4>
        ep->xfer_count += count;
 8006300:	fb05 f107 	mul.w	r1, r5, r7
 8006304:	1863      	adds	r3, r4, r1
 8006306:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 800630a:	444a      	add	r2, r9
 800630c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        ep->xfer_buff += count;
 8006310:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 8006314:	444a      	add	r2, r9
 8006316:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800631a:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 800631e:	b11a      	cbz	r2, 8006328 <HAL_PCD_IRQHandler+0x3a4>
 8006320:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8006324:	4599      	cmp	r9, r3
 8006326:	d241      	bcs.n	80063ac <HAL_PCD_IRQHandler+0x428>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006328:	fb05 4307 	mla	r3, r5, r7, r4
 800632c:	4620      	mov	r0, r4
 800632e:	f893 1150 	ldrb.w	r1, [r3, #336]	@ 0x150
 8006332:	f002 ff0b 	bl	800914c <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006336:	f018 0f80 	tst.w	r8, #128	@ 0x80
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800633a:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800633c:	f43f ae2f 	beq.w	8005f9e <HAL_PCD_IRQHandler+0x1a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006340:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8006344:	fb05 fc07 	mul.w	ip, r5, r7
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006348:	b29b      	uxth	r3, r3
 800634a:	4033      	ands	r3, r6
 800634c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006350:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8006354:	eb04 030c 	add.w	r3, r4, ip
 8006358:	7cda      	ldrb	r2, [r3, #19]
 800635a:	2a01      	cmp	r2, #1
 800635c:	d156      	bne.n	800640c <HAL_PCD_IRQHandler+0x488>
          ep->xfer_len = 0U;
 800635e:	2100      	movs	r1, #0
 8006360:	fb07 5205 	mla	r2, r7, r5, r5
 8006364:	50a1      	str	r1, [r4, r2]
          if (ep->doublebuffer != 0U)
 8006366:	7f1a      	ldrb	r2, [r3, #28]
 8006368:	b392      	cbz	r2, 80063d0 <HAL_PCD_IRQHandler+0x44c>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800636a:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800636e:	7c5a      	ldrb	r2, [r3, #17]
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006370:	d036      	beq.n	80063e0 <HAL_PCD_IRQHandler+0x45c>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006372:	bb12      	cbnz	r2, 80063ba <HAL_PCD_IRQHandler+0x436>
 8006374:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8006378:	7c1b      	ldrb	r3, [r3, #16]
 800637a:	b292      	uxth	r2, r2
 800637c:	011b      	lsls	r3, r3, #4
 800637e:	f200 4004 	addw	r0, r0, #1028	@ 0x404
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006382:	4410      	add	r0, r2
 8006384:	5a1a      	ldrh	r2, [r3, r0]
 8006386:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800638a:	521a      	strh	r2, [r3, r0]
 800638c:	5a1a      	ldrh	r2, [r3, r0]
 800638e:	b292      	uxth	r2, r2
 8006390:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006394:	521a      	strh	r2, [r3, r0]
 8006396:	e01b      	b.n	80063d0 <HAL_PCD_IRQHandler+0x44c>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006398:	3206      	adds	r2, #6
 800639a:	4413      	add	r3, r2
 800639c:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 80063a0:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 80063a4:	f1b9 0f00 	cmp.w	r9, #0
 80063a8:	d0aa      	beq.n	8006300 <HAL_PCD_IRQHandler+0x37c>
 80063aa:	e781      	b.n	80062b0 <HAL_PCD_IRQHandler+0x32c>
        ep = &hpcd->OUT_ep[epindex];
 80063ac:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80063b0:	6820      	ldr	r0, [r4, #0]
 80063b2:	4421      	add	r1, r4
 80063b4:	f001 fe26 	bl	8008004 <USB_EPStartXfer>
 80063b8:	e7bd      	b.n	8006336 <HAL_PCD_IRQHandler+0x3b2>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80063ba:	2a01      	cmp	r2, #1
 80063bc:	d108      	bne.n	80063d0 <HAL_PCD_IRQHandler+0x44c>
 80063be:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80063c2:	7c1b      	ldrb	r3, [r3, #16]
 80063c4:	b292      	uxth	r2, r2
 80063c6:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 80063ca:	011b      	lsls	r3, r3, #4
 80063cc:	4410      	add	r0, r2
 80063ce:	5219      	strh	r1, [r3, r0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80063d0:	2328      	movs	r3, #40	@ 0x28
 80063d2:	fb03 4307 	mla	r3, r3, r7, r4
 80063d6:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80063d8:	4620      	mov	r0, r4
 80063da:	f002 fec0 	bl	800915e <HAL_PCD_DataInStageCallback>
 80063de:	e5de      	b.n	8005f9e <HAL_PCD_IRQHandler+0x1a>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80063e0:	b93a      	cbnz	r2, 80063f2 <HAL_PCD_IRQHandler+0x46e>
 80063e2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80063e6:	7c1b      	ldrb	r3, [r3, #16]
 80063e8:	b292      	uxth	r2, r2
 80063ea:	011b      	lsls	r3, r3, #4
 80063ec:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 80063f0:	e7c7      	b.n	8006382 <HAL_PCD_IRQHandler+0x3fe>
 80063f2:	2a01      	cmp	r2, #1
 80063f4:	d1ec      	bne.n	80063d0 <HAL_PCD_IRQHandler+0x44c>
 80063f6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80063fa:	7c1b      	ldrb	r3, [r3, #16]
 80063fc:	b292      	uxth	r2, r2
 80063fe:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8006402:	011b      	lsls	r3, r3, #4
 8006404:	4410      	add	r0, r2
 8006406:	f823 8000 	strh.w	r8, [r3, r0]
 800640a:	e7e1      	b.n	80063d0 <HAL_PCD_IRQHandler+0x44c>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800640c:	7c19      	ldrb	r1, [r3, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 800640e:	f418 7e80 	ands.w	lr, r8, #256	@ 0x100
            if (ep->xfer_len > TxPctSize)
 8006412:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006414:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8006418:	f500 6980 	add.w	r9, r0, #1024	@ 0x400
          if ((wEPVal & USB_EP_KIND) == 0U)
 800641c:	d11b      	bne.n	8006456 <HAL_PCD_IRQHandler+0x4d2>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800641e:	f8b0 7050 	ldrh.w	r7, [r0, #80]	@ 0x50
 8006422:	b2bf      	uxth	r7, r7
 8006424:	4457      	add	r7, sl
 8006426:	3702      	adds	r7, #2
 8006428:	f839 7017 	ldrh.w	r7, [r9, r7, lsl #1]
            if (ep->xfer_len > TxPctSize)
 800642c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8006430:	4297      	cmp	r7, r2
 8006432:	d302      	bcc.n	800643a <HAL_PCD_IRQHandler+0x4b6>
 8006434:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
 8006438:	e7ce      	b.n	80063d8 <HAL_PCD_IRQHandler+0x454>
              ep->xfer_len -= TxPctSize;
 800643a:	1bd2      	subs	r2, r2, r7
 800643c:	629a      	str	r2, [r3, #40]	@ 0x28
              ep->xfer_buff += TxPctSize;
 800643e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        ep = &hpcd->IN_ep[epindex];
 8006440:	f10c 0110 	add.w	r1, ip, #16
              ep->xfer_buff += TxPctSize;
 8006444:	443a      	add	r2, r7
 8006446:	625a      	str	r2, [r3, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 8006448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800644a:	4421      	add	r1, r4
              ep->xfer_count += TxPctSize;
 800644c:	443a      	add	r2, r7
 800644e:	62da      	str	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006450:	f001 fdd8 	bl	8008004 <USB_EPStartXfer>
 8006454:	e5a3      	b.n	8005f9e <HAL_PCD_IRQHandler+0x1a>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006456:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800645a:	f018 0e40 	ands.w	lr, r8, #64	@ 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800645e:	fa1f fc8c 	uxth.w	ip, ip
 8006462:	44d4      	add	ip, sl
 8006464:	f408 4880 	and.w	r8, r8, #16384	@ 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006468:	f000 80f4 	beq.w	8006654 <HAL_PCD_IRQHandler+0x6d0>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800646c:	f10c 0c02 	add.w	ip, ip, #2
 8006470:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 8006474:	fa1f f888 	uxth.w	r8, r8

    if (ep->xfer_len > TxPctSize)
 8006478:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800647c:	4594      	cmp	ip, r2
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 800647e:	bf2c      	ite	cs
 8006480:	2200      	movcs	r2, #0
      ep->xfer_len -= TxPctSize;
 8006482:	eba2 020c 	subcc.w	r2, r2, ip
 8006486:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006488:	2a00      	cmp	r2, #0
 800648a:	d15b      	bne.n	8006544 <HAL_PCD_IRQHandler+0x5c0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800648c:	2328      	movs	r3, #40	@ 0x28
 800648e:	fb03 4307 	mla	r3, r3, r7, r4
 8006492:	7c5b      	ldrb	r3, [r3, #17]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d141      	bne.n	800651c <HAL_PCD_IRQHandler+0x598>
 8006498:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800649c:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 80064a0:	b292      	uxth	r2, r2
 80064a2:	010b      	lsls	r3, r1, #4
 80064a4:	4494      	add	ip, r2
 80064a6:	f83c 2003 	ldrh.w	r2, [ip, r3]
 80064aa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80064ae:	f82c 2003 	strh.w	r2, [ip, r3]
 80064b2:	f83c 2003 	ldrh.w	r2, [ip, r3]
 80064b6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80064ba:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80064be:	b292      	uxth	r2, r2
 80064c0:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80064c4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80064c8:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 80064cc:	b292      	uxth	r2, r2
 80064ce:	4410      	add	r0, r2
 80064d0:	5ac2      	ldrh	r2, [r0, r3]
 80064d2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80064d6:	52c2      	strh	r2, [r0, r3]
 80064d8:	5ac2      	ldrh	r2, [r0, r3]
 80064da:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80064de:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80064e2:	b292      	uxth	r2, r2
 80064e4:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80064e6:	4620      	mov	r0, r4
 80064e8:	f002 fe39 	bl	800915e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80064ec:	f1b8 0f00 	cmp.w	r8, #0
 80064f0:	f000 80f4 	beq.w	80066dc <HAL_PCD_IRQHandler+0x758>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80064f4:	2328      	movs	r3, #40	@ 0x28
 80064f6:	fb03 4307 	mla	r3, r3, r7, r4
 80064fa:	6822      	ldr	r2, [r4, #0]
 80064fc:	7c19      	ldrb	r1, [r3, #16]
 80064fe:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8006502:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800650a:	041b      	lsls	r3, r3, #16
 800650c:	0c1b      	lsrs	r3, r3, #16
 800650e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006516:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800651a:	e0df      	b.n	80066dc <HAL_PCD_IRQHandler+0x758>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800651c:	2b01      	cmp	r3, #1
 800651e:	d1e2      	bne.n	80064e6 <HAL_PCD_IRQHandler+0x562>
 8006520:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 8006524:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8006528:	fa1f fe8e 	uxth.w	lr, lr
 800652c:	44f4      	add	ip, lr
 800652e:	010b      	lsls	r3, r1, #4
 8006530:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006534:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8006538:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 800653c:	fa1f fc8c 	uxth.w	ip, ip
 8006540:	4460      	add	r0, ip
 8006542:	e7cf      	b.n	80064e4 <HAL_PCD_IRQHandler+0x560>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006544:	f1b8 0f00 	cmp.w	r8, #0
 8006548:	d00d      	beq.n	8006566 <HAL_PCD_IRQHandler+0x5e2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800654a:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 800654e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8006552:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006556:	0412      	lsls	r2, r2, #16
 8006558:	0c12      	lsrs	r2, r2, #16
 800655a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800655e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006562:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8006566:	f04f 0828 	mov.w	r8, #40	@ 0x28
 800656a:	fb08 4807 	mla	r8, r8, r7, r4
 800656e:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 8006572:	2a01      	cmp	r2, #1
 8006574:	f040 80b2 	bne.w	80066dc <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 8006578:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 800657c:	eb02 0e0c 	add.w	lr, r2, ip
 8006580:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8006584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006586:	4462      	add	r2, ip
 8006588:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 800658a:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 800658e:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8006592:	4293      	cmp	r3, r2
 8006594:	d335      	bcc.n	8006602 <HAL_PCD_IRQHandler+0x67e>
          ep->xfer_len_db -= len;
 8006596:	1a9b      	subs	r3, r3, r2
 8006598:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800659c:	2328      	movs	r3, #40	@ 0x28
 800659e:	fb03 4307 	mla	r3, r3, r7, r4
 80065a2:	f893 c011 	ldrb.w	ip, [r3, #17]
 80065a6:	b293      	uxth	r3, r2
 80065a8:	f1bc 0f00 	cmp.w	ip, #0
 80065ac:	d145      	bne.n	800663a <HAL_PCD_IRQHandler+0x6b6>
 80065ae:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 80065b2:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 80065b6:	fa1f f888 	uxth.w	r8, r8
 80065ba:	44c4      	add	ip, r8
 80065bc:	0109      	lsls	r1, r1, #4
 80065be:	f83c 8001 	ldrh.w	r8, [ip, r1]
 80065c2:	2a3e      	cmp	r2, #62	@ 0x3e
 80065c4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80065c8:	f82c 8001 	strh.w	r8, [ip, r1]
 80065cc:	d925      	bls.n	800661a <HAL_PCD_IRQHandler+0x696>
 80065ce:	ea4f 1852 	mov.w	r8, r2, lsr #5
 80065d2:	06d2      	lsls	r2, r2, #27
 80065d4:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80065d8:	bf08      	it	eq
 80065da:	f108 38ff 	addeq.w	r8, r8, #4294967295
 80065de:	b292      	uxth	r2, r2
 80065e0:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 80065e4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80065e8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80065ec:	b292      	uxth	r2, r2
 80065ee:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80065f2:	2228      	movs	r2, #40	@ 0x28
 80065f4:	fb02 4207 	mla	r2, r2, r7, r4
 80065f8:	8b12      	ldrh	r2, [r2, #24]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80065fa:	4671      	mov	r1, lr
 80065fc:	f001 fcf2 	bl	8007fe4 <USB_WritePMA>
 8006600:	e06c      	b.n	80066dc <HAL_PCD_IRQHandler+0x758>
        else if (ep->xfer_len_db == 0U)
 8006602:	b91b      	cbnz	r3, 800660c <HAL_PCD_IRQHandler+0x688>
    if (ep->xfer_len > TxPctSize)
 8006604:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 8006606:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 800660a:	e7c7      	b.n	800659c <HAL_PCD_IRQHandler+0x618>
          ep->xfer_fill_db = 0U;
 800660c:	2200      	movs	r2, #0
 800660e:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          ep->xfer_len_db = 0U;
 8006612:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
 8006616:	461a      	mov	r2, r3
 8006618:	e7c0      	b.n	800659c <HAL_PCD_IRQHandler+0x618>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800661a:	b912      	cbnz	r2, 8006622 <HAL_PCD_IRQHandler+0x69e>
 800661c:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8006620:	e7e0      	b.n	80065e4 <HAL_PCD_IRQHandler+0x660>
 8006622:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8006626:	07d2      	lsls	r2, r2, #31
 8006628:	f83c 2001 	ldrh.w	r2, [ip, r1]
 800662c:	bf48      	it	mi
 800662e:	f108 0801 	addmi.w	r8, r8, #1
 8006632:	b292      	uxth	r2, r2
 8006634:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8006638:	e7d8      	b.n	80065ec <HAL_PCD_IRQHandler+0x668>
 800663a:	f1bc 0f01 	cmp.w	ip, #1
 800663e:	d1d8      	bne.n	80065f2 <HAL_PCD_IRQHandler+0x66e>
 8006640:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8006644:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8006648:	fa1f fc8c 	uxth.w	ip, ip
 800664c:	4462      	add	r2, ip
 800664e:	0109      	lsls	r1, r1, #4
 8006650:	5253      	strh	r3, [r2, r1]
 8006652:	e7ce      	b.n	80065f2 <HAL_PCD_IRQHandler+0x66e>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006654:	f10c 0c06 	add.w	ip, ip, #6
 8006658:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 800665c:	fa1f f888 	uxth.w	r8, r8
    if (ep->xfer_len >= TxPctSize)
 8006660:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8006664:	4594      	cmp	ip, r2
      ep->xfer_len = 0U;
 8006666:	bf8c      	ite	hi
 8006668:	4672      	movhi	r2, lr
      ep->xfer_len -= TxPctSize;
 800666a:	eba2 020c 	subls.w	r2, r2, ip
 800666e:	629a      	str	r2, [r3, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 8006670:	2a00      	cmp	r2, #0
 8006672:	d15d      	bne.n	8006730 <HAL_PCD_IRQHandler+0x7ac>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006674:	2328      	movs	r3, #40	@ 0x28
 8006676:	fb03 4307 	mla	r3, r3, r7, r4
 800667a:	7c5b      	ldrb	r3, [r3, #17]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d143      	bne.n	8006708 <HAL_PCD_IRQHandler+0x784>
 8006680:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8006684:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8006688:	b292      	uxth	r2, r2
 800668a:	010b      	lsls	r3, r1, #4
 800668c:	4494      	add	ip, r2
 800668e:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8006692:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006696:	f82c 2003 	strh.w	r2, [ip, r3]
 800669a:	f83c 2003 	ldrh.w	r2, [ip, r3]
 800669e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80066a2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80066a6:	b292      	uxth	r2, r2
 80066a8:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80066ac:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80066b0:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 80066b4:	b292      	uxth	r2, r2
 80066b6:	4410      	add	r0, r2
 80066b8:	5ac2      	ldrh	r2, [r0, r3]
 80066ba:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80066be:	52c2      	strh	r2, [r0, r3]
 80066c0:	5ac2      	ldrh	r2, [r0, r3]
 80066c2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80066c6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80066ca:	b292      	uxth	r2, r2
 80066cc:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80066ce:	4620      	mov	r0, r4
 80066d0:	f002 fd45 	bl	800915e <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80066d4:	f1b8 0f00 	cmp.w	r8, #0
 80066d8:	f43f af0c 	beq.w	80064f4 <HAL_PCD_IRQHandler+0x570>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80066dc:	2328      	movs	r3, #40	@ 0x28
 80066de:	fb03 4307 	mla	r3, r3, r7, r4
 80066e2:	6822      	ldr	r2, [r4, #0]
 80066e4:	7c19      	ldrb	r1, [r3, #16]
 80066e6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80066ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066f2:	041b      	lsls	r3, r3, #16
 80066f4:	0c1b      	lsrs	r3, r3, #16
 80066f6:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 80066fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006702:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8006706:	e44a      	b.n	8005f9e <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006708:	2b01      	cmp	r3, #1
 800670a:	d1e0      	bne.n	80066ce <HAL_PCD_IRQHandler+0x74a>
 800670c:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 8006710:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8006714:	fa1f fe8e 	uxth.w	lr, lr
 8006718:	44f4      	add	ip, lr
 800671a:	010b      	lsls	r3, r1, #4
 800671c:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006720:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8006724:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8006728:	fa1f fc8c 	uxth.w	ip, ip
 800672c:	4460      	add	r0, ip
 800672e:	e7cd      	b.n	80066cc <HAL_PCD_IRQHandler+0x748>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006730:	f1b8 0f00 	cmp.w	r8, #0
 8006734:	d10d      	bne.n	8006752 <HAL_PCD_IRQHandler+0x7ce>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006736:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 800673a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800673e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006742:	0412      	lsls	r2, r2, #16
 8006744:	0c12      	lsrs	r2, r2, #16
 8006746:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800674a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800674e:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8006752:	f04f 0828 	mov.w	r8, #40	@ 0x28
 8006756:	fb08 4807 	mla	r8, r8, r7, r4
 800675a:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 800675e:	2a01      	cmp	r2, #1
 8006760:	d1bc      	bne.n	80066dc <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 8006762:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 8006766:	eb02 0e0c 	add.w	lr, r2, ip
 800676a:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 800676e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006770:	4462      	add	r2, ip
 8006772:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8006774:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8006778:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800677c:	4293      	cmp	r3, r2
 800677e:	d332      	bcc.n	80067e6 <HAL_PCD_IRQHandler+0x862>
          ep->xfer_len_db -= len;
 8006780:	1a9b      	subs	r3, r3, r2
 8006782:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006786:	2328      	movs	r3, #40	@ 0x28
 8006788:	fb03 4307 	mla	r3, r3, r7, r4
 800678c:	f893 c011 	ldrb.w	ip, [r3, #17]
 8006790:	b293      	uxth	r3, r2
 8006792:	f1bc 0f00 	cmp.w	ip, #0
 8006796:	d142      	bne.n	800681e <HAL_PCD_IRQHandler+0x89a>
 8006798:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 800679c:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 80067a0:	fa1f f888 	uxth.w	r8, r8
 80067a4:	44c4      	add	ip, r8
 80067a6:	0109      	lsls	r1, r1, #4
 80067a8:	f83c 8001 	ldrh.w	r8, [ip, r1]
 80067ac:	2a3e      	cmp	r2, #62	@ 0x3e
 80067ae:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80067b2:	f82c 8001 	strh.w	r8, [ip, r1]
 80067b6:	d922      	bls.n	80067fe <HAL_PCD_IRQHandler+0x87a>
 80067b8:	ea4f 1852 	mov.w	r8, r2, lsr #5
 80067bc:	06d2      	lsls	r2, r2, #27
 80067be:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80067c2:	bf08      	it	eq
 80067c4:	f108 38ff 	addeq.w	r8, r8, #4294967295
 80067c8:	b292      	uxth	r2, r2
 80067ca:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 80067ce:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80067d2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80067d6:	b292      	uxth	r2, r2
 80067d8:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80067dc:	2228      	movs	r2, #40	@ 0x28
 80067de:	fb02 4207 	mla	r2, r2, r7, r4
 80067e2:	8b52      	ldrh	r2, [r2, #26]
 80067e4:	e709      	b.n	80065fa <HAL_PCD_IRQHandler+0x676>
        else if (ep->xfer_len_db == 0U)
 80067e6:	b91b      	cbnz	r3, 80067f0 <HAL_PCD_IRQHandler+0x86c>
    if (ep->xfer_len >= TxPctSize)
 80067e8:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 80067ea:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 80067ee:	e7ca      	b.n	8006786 <HAL_PCD_IRQHandler+0x802>
          ep->xfer_len_db = 0U;
 80067f0:	2200      	movs	r2, #0
 80067f2:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 80067f6:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
 80067fa:	461a      	mov	r2, r3
 80067fc:	e7c3      	b.n	8006786 <HAL_PCD_IRQHandler+0x802>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80067fe:	b912      	cbnz	r2, 8006806 <HAL_PCD_IRQHandler+0x882>
 8006800:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8006804:	e7e3      	b.n	80067ce <HAL_PCD_IRQHandler+0x84a>
 8006806:	ea4f 0852 	mov.w	r8, r2, lsr #1
 800680a:	07d2      	lsls	r2, r2, #31
 800680c:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8006810:	bf48      	it	mi
 8006812:	f108 0801 	addmi.w	r8, r8, #1
 8006816:	b292      	uxth	r2, r2
 8006818:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 800681c:	e7db      	b.n	80067d6 <HAL_PCD_IRQHandler+0x852>
 800681e:	f1bc 0f01 	cmp.w	ip, #1
 8006822:	d1db      	bne.n	80067dc <HAL_PCD_IRQHandler+0x858>
 8006824:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8006828:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 800682c:	b292      	uxth	r2, r2
 800682e:	4494      	add	ip, r2
 8006830:	010a      	lsls	r2, r1, #4
 8006832:	f82c 3002 	strh.w	r3, [ip, r2]
 8006836:	e7d1      	b.n	80067dc <HAL_PCD_IRQHandler+0x858>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006838:	0546      	lsls	r6, r0, #21
 800683a:	d512      	bpl.n	8006862 <HAL_PCD_IRQHandler+0x8de>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800683c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 800683e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006840:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8006844:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006848:	041b      	lsls	r3, r3, #16
 800684a:	0c1b      	lsrs	r3, r3, #16
 800684c:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 8006850:	f002 fc91 	bl	8009176 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006854:	4629      	mov	r1, r5
 8006856:	4620      	mov	r0, r4
}
 8006858:	b005      	add	sp, #20
 800685a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800685e:	f7ff bb7d 	b.w	8005f5c <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006862:	0441      	lsls	r1, r0, #17
 8006864:	d50a      	bpl.n	800687c <HAL_PCD_IRQHandler+0x8f8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006866:	6822      	ldr	r2, [r4, #0]
 8006868:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800686c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006870:	041b      	lsls	r3, r3, #16
 8006872:	0c1b      	lsrs	r3, r3, #16
 8006874:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 8006878:	f7ff bb96 	b.w	8005fa8 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800687c:	0482      	lsls	r2, r0, #18
 800687e:	d505      	bpl.n	800688c <HAL_PCD_IRQHandler+0x908>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006880:	6822      	ldr	r2, [r4, #0]
 8006882:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8006886:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800688a:	e7f1      	b.n	8006870 <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800688c:	04c3      	lsls	r3, r0, #19
 800688e:	d519      	bpl.n	80068c4 <HAL_PCD_IRQHandler+0x940>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8006890:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8006892:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8006894:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8006898:	f023 0304 	bic.w	r3, r3, #4
 800689c:	041b      	lsls	r3, r3, #16
 800689e:	0c1b      	lsrs	r3, r3, #16
 80068a0:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80068a4:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 80068a8:	f023 0308 	bic.w	r3, r3, #8
 80068ac:	041b      	lsls	r3, r3, #16
 80068ae:	0c1b      	lsrs	r3, r3, #16
 80068b0:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80068b4:	f002 fc82 	bl	80091bc <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80068b8:	6822      	ldr	r2, [r4, #0]
 80068ba:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80068be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068c2:	e7d5      	b.n	8006870 <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80068c4:	0507      	lsls	r7, r0, #20
 80068c6:	d548      	bpl.n	800695a <HAL_PCD_IRQHandler+0x9d6>
 80068c8:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	4606      	mov	r6, r0
 80068ce:	4619      	mov	r1, r3
 80068d0:	461a      	mov	r2, r3
 80068d2:	f103 0520 	add.w	r5, r3, #32
 80068d6:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 80068da:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80068dc:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 80068e0:	d1f9      	bne.n	80068d6 <HAL_PCD_IRQHandler+0x952>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80068e2:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80068e6:	b292      	uxth	r2, r2
 80068e8:	f042 0201 	orr.w	r2, r2, #1
 80068ec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80068f0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80068f4:	f022 0201 	bic.w	r2, r2, #1
 80068f8:	0412      	lsls	r2, r2, #16
 80068fa:	0c12      	lsrs	r2, r2, #16
 80068fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8006900:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8006904:	0556      	lsls	r6, r2, #21
 8006906:	d5fb      	bpl.n	8006900 <HAL_PCD_IRQHandler+0x97c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006908:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800690c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006910:	0412      	lsls	r2, r2, #16
 8006912:	0c12      	lsrs	r2, r2, #16
 8006914:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8006918:	f830 2b02 	ldrh.w	r2, [r0], #2
 800691c:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 8006920:	428d      	cmp	r5, r1
 8006922:	d1f9      	bne.n	8006918 <HAL_PCD_IRQHandler+0x994>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006924:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8006928:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800692a:	b292      	uxth	r2, r2
 800692c:	f042 0208 	orr.w	r2, r2, #8
 8006930:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006934:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8006938:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800693c:	0412      	lsls	r2, r2, #16
 800693e:	0c12      	lsrs	r2, r2, #16
 8006940:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8006944:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8006948:	b292      	uxth	r2, r2
 800694a:	f042 0204 	orr.w	r2, r2, #4
 800694e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8006952:	f002 fc23 	bl	800919c <HAL_PCD_SuspendCallback>
    return;
 8006956:	f7ff bb27 	b.w	8005fa8 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800695a:	0582      	lsls	r2, r0, #22
 800695c:	d50d      	bpl.n	800697a <HAL_PCD_IRQHandler+0x9f6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800695e:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8006960:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006962:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8006966:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800696a:	041b      	lsls	r3, r3, #16
 800696c:	0c1b      	lsrs	r3, r3, #16
 800696e:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 8006972:	f002 fbfc 	bl	800916e <HAL_PCD_SOFCallback>
    return;
 8006976:	f7ff bb17 	b.w	8005fa8 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800697a:	05c3      	lsls	r3, r0, #23
 800697c:	f57f ab14 	bpl.w	8005fa8 <HAL_PCD_IRQHandler+0x24>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006980:	6822      	ldr	r2, [r4, #0]
 8006982:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8006986:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800698a:	e771      	b.n	8006870 <HAL_PCD_IRQHandler+0x8ec>

0800698c <HAL_PCD_EP_Open>:
{
 800698c:	b570      	push	{r4, r5, r6, lr}
 800698e:	2428      	movs	r4, #40	@ 0x28
 8006990:	4605      	mov	r5, r0
 8006992:	f001 0007 	and.w	r0, r1, #7
 8006996:	4344      	muls	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8006998:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800699c:	bf14      	ite	ne
 800699e:	f104 0110 	addne.w	r1, r4, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069a2:	f504 71a8 	addeq.w	r1, r4, #336	@ 0x150
 80069a6:	eb05 0604 	add.w	r6, r5, r4
    ep->is_in = 1U;
 80069aa:	bf15      	itete	ne
 80069ac:	2401      	movne	r4, #1
    ep->is_in = 0U;
 80069ae:	2400      	moveq	r4, #0
    ep->is_in = 1U;
 80069b0:	7474      	strbne	r4, [r6, #17]
    ep->is_in = 0U;
 80069b2:	f886 4151 	strbeq.w	r4, [r6, #337]	@ 0x151
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069b6:	bf14      	ite	ne
 80069b8:	1949      	addne	r1, r1, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069ba:	1949      	addeq	r1, r1, r5
  if (ep_type == EP_TYPE_BULK)
 80069bc:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 80069be:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 80069c0:	bf08      	it	eq
 80069c2:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 80069c4:	7008      	strb	r0, [r1, #0]
    ep->data_pid_start = 0U;
 80069c6:	bf08      	it	eq
 80069c8:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 80069ca:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 80069cc:	f895 3290 	ldrb.w	r3, [r5, #656]	@ 0x290
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d009      	beq.n	80069e8 <HAL_PCD_EP_Open+0x5c>
 80069d4:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80069d6:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 80069d8:	f885 3290 	strb.w	r3, [r5, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80069dc:	f001 f856 	bl	8007a8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80069e0:	2000      	movs	r0, #0
 80069e2:	f885 0290 	strb.w	r0, [r5, #656]	@ 0x290
}
 80069e6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 80069e8:	2002      	movs	r0, #2
 80069ea:	e7fc      	b.n	80069e6 <HAL_PCD_EP_Open+0x5a>

080069ec <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80069ec:	2328      	movs	r3, #40	@ 0x28
 80069ee:	f001 0207 	and.w	r2, r1, #7
 80069f2:	4353      	muls	r3, r2
 80069f4:	f011 0f80 	tst.w	r1, #128	@ 0x80
{
 80069f8:	b510      	push	{r4, lr}
 80069fa:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069fc:	bf18      	it	ne
 80069fe:	f103 0110 	addne.w	r1, r3, #16
 8006a02:	4418      	add	r0, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a04:	bf0b      	itete	eq
 8006a06:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
    ep->is_in = 1U;
 8006a0a:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8006a0c:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a0e:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a10:	bf0a      	itet	eq
 8006a12:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8006a14:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 8006a16:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a1a:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8006a1c:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d009      	beq.n	8006a38 <HAL_PCD_EP_Close+0x4c>
 8006a24:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006a26:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8006a28:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006a2c:	f001 f98e 	bl	8007d4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a30:	2000      	movs	r0, #0
 8006a32:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8006a36:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8006a38:	2002      	movs	r0, #2
 8006a3a:	e7fc      	b.n	8006a36 <HAL_PCD_EP_Close+0x4a>

08006a3c <HAL_PCD_EP_Receive>:
{
 8006a3c:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 8006a3e:	2428      	movs	r4, #40	@ 0x28
  ep->xfer_count = 0U;
 8006a40:	2600      	movs	r6, #0
 8006a42:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8006a46:	434c      	muls	r4, r1
 8006a48:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a4a:	f885 1150 	strb.w	r1, [r5, #336]	@ 0x150
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a4e:	f504 71a8 	add.w	r1, r4, #336	@ 0x150
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006a52:	4401      	add	r1, r0
  ep->xfer_len = len;
 8006a54:	e9c5 2359 	strd	r2, r3, [r5, #356]	@ 0x164
  ep->xfer_count = 0U;
 8006a58:	f8c5 616c 	str.w	r6, [r5, #364]	@ 0x16c
  ep->is_in = 0U;
 8006a5c:	f885 6151 	strb.w	r6, [r5, #337]	@ 0x151
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006a60:	6800      	ldr	r0, [r0, #0]
 8006a62:	f001 facf 	bl	8008004 <USB_EPStartXfer>
}
 8006a66:	4630      	mov	r0, r6
 8006a68:	bd70      	pop	{r4, r5, r6, pc}

08006a6a <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006a6a:	2328      	movs	r3, #40	@ 0x28
 8006a6c:	f001 0107 	and.w	r1, r1, #7
 8006a70:	fb03 0001 	mla	r0, r3, r1, r0
}
 8006a74:	f8d0 016c 	ldr.w	r0, [r0, #364]	@ 0x16c
 8006a78:	4770      	bx	lr

08006a7a <HAL_PCD_EP_Transmit>:
{
 8006a7a:	b570      	push	{r4, r5, r6, lr}
 8006a7c:	2528      	movs	r5, #40	@ 0x28
 8006a7e:	f001 0107 	and.w	r1, r1, #7
 8006a82:	434d      	muls	r5, r1
  ep->xfer_buff = pBuf;
 8006a84:	1944      	adds	r4, r0, r5
  ep->xfer_count = 0U;
 8006a86:	2600      	movs	r6, #0
  ep->xfer_len = len;
 8006a88:	e9c4 2309 	strd	r2, r3, [r4, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 8006a8c:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a8e:	7421      	strb	r1, [r4, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a90:	f105 0110 	add.w	r1, r5, #16
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006a94:	4401      	add	r1, r0
  ep->xfer_fill_db = 1U;
 8006a96:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  ep->xfer_len_db = len;
 8006a9a:	6323      	str	r3, [r4, #48]	@ 0x30
  ep->xfer_count = 0U;
 8006a9c:	62e6      	str	r6, [r4, #44]	@ 0x2c
  ep->is_in = 1U;
 8006a9e:	7462      	strb	r2, [r4, #17]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006aa0:	6800      	ldr	r0, [r0, #0]
 8006aa2:	f001 faaf 	bl	8008004 <USB_EPStartXfer>
}
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	bd70      	pop	{r4, r5, r6, pc}

08006aaa <HAL_PCD_EP_SetStall>:
{
 8006aaa:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006aac:	7903      	ldrb	r3, [r0, #4]
 8006aae:	f001 0507 	and.w	r5, r1, #7
 8006ab2:	42ab      	cmp	r3, r5
{
 8006ab4:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006ab6:	d32a      	bcc.n	8006b0e <HAL_PCD_EP_SetStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 8006ab8:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8006abc:	f04f 0328 	mov.w	r3, #40	@ 0x28
 8006ac0:	d01c      	beq.n	8006afc <HAL_PCD_EP_SetStall+0x52>
    ep->is_in = 1U;
 8006ac2:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ac4:	436b      	muls	r3, r5
 8006ac6:	f103 0110 	add.w	r1, r3, #16
    ep->is_in = 1U;
 8006aca:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006acc:	4401      	add	r1, r0
    ep->is_in = 1U;
 8006ace:	745a      	strb	r2, [r3, #17]
  ep->is_stall = 1U;
 8006ad0:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ad2:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8006ad4:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8006ad6:	f894 2290 	ldrb.w	r2, [r4, #656]	@ 0x290
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d019      	beq.n	8006b12 <HAL_PCD_EP_SetStall+0x68>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006ade:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8006ae0:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006ae4:	f001 fa05 	bl	8007ef2 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006ae8:	b925      	cbnz	r5, 8006af4 <HAL_PCD_EP_SetStall+0x4a>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006aea:	6820      	ldr	r0, [r4, #0]
 8006aec:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 8006af0:	f001 fa76 	bl	8007fe0 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8006af4:	2000      	movs	r0, #0
 8006af6:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8006afa:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8006afc:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8006afe:	434b      	muls	r3, r1
 8006b00:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
    ep->is_in = 0U;
 8006b04:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8006b06:	4401      	add	r1, r0
    ep->is_in = 0U;
 8006b08:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
 8006b0c:	e7e0      	b.n	8006ad0 <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
 8006b0e:	2001      	movs	r0, #1
 8006b10:	e7f3      	b.n	8006afa <HAL_PCD_EP_SetStall+0x50>
  __HAL_LOCK(hpcd);
 8006b12:	2002      	movs	r0, #2
 8006b14:	e7f1      	b.n	8006afa <HAL_PCD_EP_SetStall+0x50>

08006b16 <HAL_PCD_EP_ClrStall>:
{
 8006b16:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006b18:	7902      	ldrb	r2, [r0, #4]
 8006b1a:	f001 030f 	and.w	r3, r1, #15
 8006b1e:	429a      	cmp	r2, r3
{
 8006b20:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006b22:	d326      	bcc.n	8006b72 <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 8006b24:	2328      	movs	r3, #40	@ 0x28
 8006b26:	f001 0207 	and.w	r2, r1, #7
 8006b2a:	4353      	muls	r3, r2
 8006b2c:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b30:	bf14      	ite	ne
 8006b32:	f103 0110 	addne.w	r1, r3, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b36:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
 8006b3a:	4418      	add	r0, r3
  ep->is_stall = 0U;
 8006b3c:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8006b40:	bf15      	itete	ne
 8006b42:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8006b44:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b46:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b48:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8006b4a:	bf14      	ite	ne
 8006b4c:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 8006b4e:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->is_stall = 0U;
 8006b52:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b54:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8006b56:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d00b      	beq.n	8006b76 <HAL_PCD_EP_ClrStall+0x60>
 8006b5e:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006b60:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8006b62:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006b66:	f001 f9e4 	bl	8007f32 <USB_EPClearStall>
  return HAL_OK;
 8006b6a:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8006b6c:	f884 5290 	strb.w	r5, [r4, #656]	@ 0x290
}
 8006b70:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006b72:	2001      	movs	r0, #1
 8006b74:	e7fc      	b.n	8006b70 <HAL_PCD_EP_ClrStall+0x5a>
  __HAL_LOCK(hpcd);
 8006b76:	2002      	movs	r0, #2
 8006b78:	e7fa      	b.n	8006b70 <HAL_PCD_EP_ClrStall+0x5a>

08006b7a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006b7a:	b510      	push	{r4, lr}
 8006b7c:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006b7e:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b82:	bf1b      	ittet	ne
 8006b84:	f001 0107 	andne.w	r1, r1, #7
 8006b88:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006b8c:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b90:	3010      	addne	r0, #16
    ep = &hpcd->OUT_ep[ep_addr];
 8006b92:	bf08      	it	eq
 8006b94:	f500 70a8 	addeq.w	r0, r0, #336	@ 0x150
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006b98:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8006b9a:	b91a      	cbnz	r2, 8006ba4 <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 8006b9c:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8006b9e:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8006ba4:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006ba6:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8006ba8:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006baa:	e7f9      	b.n	8006ba0 <HAL_PCDEx_PMAConfig+0x26>

08006bac <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006bac:	2201      	movs	r2, #1
 8006bae:	4b01      	ldr	r3, [pc, #4]	@ (8006bb4 <HAL_PWR_EnableBkUpAccess+0x8>)
 8006bb0:	621a      	str	r2, [r3, #32]
}
 8006bb2:	4770      	bx	lr
 8006bb4:	420e0000 	.word	0x420e0000

08006bb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006bbc:	4605      	mov	r5, r0
 8006bbe:	b338      	cbz	r0, 8006c10 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bc0:	6803      	ldr	r3, [r0, #0]
 8006bc2:	07db      	lsls	r3, r3, #31
 8006bc4:	d410      	bmi.n	8006be8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bc6:	682b      	ldr	r3, [r5, #0]
 8006bc8:	079f      	lsls	r7, r3, #30
 8006bca:	d45e      	bmi.n	8006c8a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bcc:	682b      	ldr	r3, [r5, #0]
 8006bce:	0719      	lsls	r1, r3, #28
 8006bd0:	f100 8095 	bmi.w	8006cfe <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bd4:	682b      	ldr	r3, [r5, #0]
 8006bd6:	075a      	lsls	r2, r3, #29
 8006bd8:	f100 80c1 	bmi.w	8006d5e <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bdc:	69eb      	ldr	r3, [r5, #28]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f040 812c 	bne.w	8006e3c <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8006be4:	2000      	movs	r0, #0
 8006be6:	e029      	b.n	8006c3c <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006be8:	4c90      	ldr	r4, [pc, #576]	@ (8006e2c <HAL_RCC_OscConfig+0x274>)
 8006bea:	6863      	ldr	r3, [r4, #4]
 8006bec:	f003 030c 	and.w	r3, r3, #12
 8006bf0:	2b04      	cmp	r3, #4
 8006bf2:	d007      	beq.n	8006c04 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006bf4:	6863      	ldr	r3, [r4, #4]
 8006bf6:	f003 030c 	and.w	r3, r3, #12
 8006bfa:	2b08      	cmp	r3, #8
 8006bfc:	d10a      	bne.n	8006c14 <HAL_RCC_OscConfig+0x5c>
 8006bfe:	6863      	ldr	r3, [r4, #4]
 8006c00:	03de      	lsls	r6, r3, #15
 8006c02:	d507      	bpl.n	8006c14 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c04:	6823      	ldr	r3, [r4, #0]
 8006c06:	039c      	lsls	r4, r3, #14
 8006c08:	d5dd      	bpl.n	8006bc6 <HAL_RCC_OscConfig+0xe>
 8006c0a:	686b      	ldr	r3, [r5, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1da      	bne.n	8006bc6 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8006c10:	2001      	movs	r0, #1
 8006c12:	e013      	b.n	8006c3c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c14:	686b      	ldr	r3, [r5, #4]
 8006c16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c1a:	d112      	bne.n	8006c42 <HAL_RCC_OscConfig+0x8a>
 8006c1c:	6823      	ldr	r3, [r4, #0]
 8006c1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c22:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006c24:	f7fe fdaa 	bl	800577c <HAL_GetTick>
 8006c28:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	0398      	lsls	r0, r3, #14
 8006c2e:	d4ca      	bmi.n	8006bc6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c30:	f7fe fda4 	bl	800577c <HAL_GetTick>
 8006c34:	1b80      	subs	r0, r0, r6
 8006c36:	2864      	cmp	r0, #100	@ 0x64
 8006c38:	d9f7      	bls.n	8006c2a <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8006c3a:	2003      	movs	r0, #3
}
 8006c3c:	b002      	add	sp, #8
 8006c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c42:	b99b      	cbnz	r3, 8006c6c <HAL_RCC_OscConfig+0xb4>
 8006c44:	6823      	ldr	r3, [r4, #0]
 8006c46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c4a:	6023      	str	r3, [r4, #0]
 8006c4c:	6823      	ldr	r3, [r4, #0]
 8006c4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c52:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006c54:	f7fe fd92 	bl	800577c <HAL_GetTick>
 8006c58:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	0399      	lsls	r1, r3, #14
 8006c5e:	d5b2      	bpl.n	8006bc6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c60:	f7fe fd8c 	bl	800577c <HAL_GetTick>
 8006c64:	1b80      	subs	r0, r0, r6
 8006c66:	2864      	cmp	r0, #100	@ 0x64
 8006c68:	d9f7      	bls.n	8006c5a <HAL_RCC_OscConfig+0xa2>
 8006c6a:	e7e6      	b.n	8006c3a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c70:	6823      	ldr	r3, [r4, #0]
 8006c72:	d103      	bne.n	8006c7c <HAL_RCC_OscConfig+0xc4>
 8006c74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	e7cf      	b.n	8006c1c <HAL_RCC_OscConfig+0x64>
 8006c7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	6823      	ldr	r3, [r4, #0]
 8006c84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c88:	e7cb      	b.n	8006c22 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c8a:	4c68      	ldr	r4, [pc, #416]	@ (8006e2c <HAL_RCC_OscConfig+0x274>)
 8006c8c:	6863      	ldr	r3, [r4, #4]
 8006c8e:	f013 0f0c 	tst.w	r3, #12
 8006c92:	d007      	beq.n	8006ca4 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006c94:	6863      	ldr	r3, [r4, #4]
 8006c96:	f003 030c 	and.w	r3, r3, #12
 8006c9a:	2b08      	cmp	r3, #8
 8006c9c:	d110      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x108>
 8006c9e:	6863      	ldr	r3, [r4, #4]
 8006ca0:	03da      	lsls	r2, r3, #15
 8006ca2:	d40d      	bmi.n	8006cc0 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	079b      	lsls	r3, r3, #30
 8006ca8:	d502      	bpl.n	8006cb0 <HAL_RCC_OscConfig+0xf8>
 8006caa:	692b      	ldr	r3, [r5, #16]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d1af      	bne.n	8006c10 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cb0:	6823      	ldr	r3, [r4, #0]
 8006cb2:	696a      	ldr	r2, [r5, #20]
 8006cb4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006cb8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006cbc:	6023      	str	r3, [r4, #0]
 8006cbe:	e785      	b.n	8006bcc <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006cc0:	692a      	ldr	r2, [r5, #16]
 8006cc2:	4b5b      	ldr	r3, [pc, #364]	@ (8006e30 <HAL_RCC_OscConfig+0x278>)
 8006cc4:	b16a      	cbz	r2, 8006ce2 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006cca:	f7fe fd57 	bl	800577c <HAL_GetTick>
 8006cce:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cd0:	6823      	ldr	r3, [r4, #0]
 8006cd2:	079f      	lsls	r7, r3, #30
 8006cd4:	d4ec      	bmi.n	8006cb0 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cd6:	f7fe fd51 	bl	800577c <HAL_GetTick>
 8006cda:	1b80      	subs	r0, r0, r6
 8006cdc:	2802      	cmp	r0, #2
 8006cde:	d9f7      	bls.n	8006cd0 <HAL_RCC_OscConfig+0x118>
 8006ce0:	e7ab      	b.n	8006c3a <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8006ce2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006ce4:	f7fe fd4a 	bl	800577c <HAL_GetTick>
 8006ce8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	0798      	lsls	r0, r3, #30
 8006cee:	f57f af6d 	bpl.w	8006bcc <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cf2:	f7fe fd43 	bl	800577c <HAL_GetTick>
 8006cf6:	1b80      	subs	r0, r0, r6
 8006cf8:	2802      	cmp	r0, #2
 8006cfa:	d9f6      	bls.n	8006cea <HAL_RCC_OscConfig+0x132>
 8006cfc:	e79d      	b.n	8006c3a <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006cfe:	69aa      	ldr	r2, [r5, #24]
 8006d00:	4e4a      	ldr	r6, [pc, #296]	@ (8006e2c <HAL_RCC_OscConfig+0x274>)
 8006d02:	4b4b      	ldr	r3, [pc, #300]	@ (8006e30 <HAL_RCC_OscConfig+0x278>)
 8006d04:	b1e2      	cbz	r2, 8006d40 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8006d06:	2201      	movs	r2, #1
 8006d08:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8006d0c:	f7fe fd36 	bl	800577c <HAL_GetTick>
 8006d10:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d12:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8006d14:	079b      	lsls	r3, r3, #30
 8006d16:	d50d      	bpl.n	8006d34 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006d18:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8006d1c:	4b45      	ldr	r3, [pc, #276]	@ (8006e34 <HAL_RCC_OscConfig+0x27c>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d24:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8006d26:	bf00      	nop
  }
  while (Delay --);
 8006d28:	9b01      	ldr	r3, [sp, #4]
 8006d2a:	1e5a      	subs	r2, r3, #1
 8006d2c:	9201      	str	r2, [sp, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1f9      	bne.n	8006d26 <HAL_RCC_OscConfig+0x16e>
 8006d32:	e74f      	b.n	8006bd4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d34:	f7fe fd22 	bl	800577c <HAL_GetTick>
 8006d38:	1b00      	subs	r0, r0, r4
 8006d3a:	2802      	cmp	r0, #2
 8006d3c:	d9e9      	bls.n	8006d12 <HAL_RCC_OscConfig+0x15a>
 8006d3e:	e77c      	b.n	8006c3a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8006d40:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8006d44:	f7fe fd1a 	bl	800577c <HAL_GetTick>
 8006d48:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d4a:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8006d4c:	079f      	lsls	r7, r3, #30
 8006d4e:	f57f af41 	bpl.w	8006bd4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d52:	f7fe fd13 	bl	800577c <HAL_GetTick>
 8006d56:	1b00      	subs	r0, r0, r4
 8006d58:	2802      	cmp	r0, #2
 8006d5a:	d9f6      	bls.n	8006d4a <HAL_RCC_OscConfig+0x192>
 8006d5c:	e76d      	b.n	8006c3a <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d5e:	4c33      	ldr	r4, [pc, #204]	@ (8006e2c <HAL_RCC_OscConfig+0x274>)
 8006d60:	69e3      	ldr	r3, [r4, #28]
 8006d62:	00d8      	lsls	r0, r3, #3
 8006d64:	d424      	bmi.n	8006db0 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8006d66:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d68:	69e3      	ldr	r3, [r4, #28]
 8006d6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d6e:	61e3      	str	r3, [r4, #28]
 8006d70:	69e3      	ldr	r3, [r4, #28]
 8006d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d7a:	4e2f      	ldr	r6, [pc, #188]	@ (8006e38 <HAL_RCC_OscConfig+0x280>)
 8006d7c:	6833      	ldr	r3, [r6, #0]
 8006d7e:	05d9      	lsls	r1, r3, #23
 8006d80:	d518      	bpl.n	8006db4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d82:	68eb      	ldr	r3, [r5, #12]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d126      	bne.n	8006dd6 <HAL_RCC_OscConfig+0x21e>
 8006d88:	6a23      	ldr	r3, [r4, #32]
 8006d8a:	f043 0301 	orr.w	r3, r3, #1
 8006d8e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8006d90:	f7fe fcf4 	bl	800577c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d94:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8006d98:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d9a:	6a23      	ldr	r3, [r4, #32]
 8006d9c:	079b      	lsls	r3, r3, #30
 8006d9e:	d53f      	bpl.n	8006e20 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8006da0:	2f00      	cmp	r7, #0
 8006da2:	f43f af1b 	beq.w	8006bdc <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006da6:	69e3      	ldr	r3, [r4, #28]
 8006da8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006dac:	61e3      	str	r3, [r4, #28]
 8006dae:	e715      	b.n	8006bdc <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8006db0:	2700      	movs	r7, #0
 8006db2:	e7e2      	b.n	8006d7a <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006db4:	6833      	ldr	r3, [r6, #0]
 8006db6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dba:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006dbc:	f7fe fcde 	bl	800577c <HAL_GetTick>
 8006dc0:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dc2:	6833      	ldr	r3, [r6, #0]
 8006dc4:	05da      	lsls	r2, r3, #23
 8006dc6:	d4dc      	bmi.n	8006d82 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dc8:	f7fe fcd8 	bl	800577c <HAL_GetTick>
 8006dcc:	eba0 0008 	sub.w	r0, r0, r8
 8006dd0:	2864      	cmp	r0, #100	@ 0x64
 8006dd2:	d9f6      	bls.n	8006dc2 <HAL_RCC_OscConfig+0x20a>
 8006dd4:	e731      	b.n	8006c3a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dd6:	b9ab      	cbnz	r3, 8006e04 <HAL_RCC_OscConfig+0x24c>
 8006dd8:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dda:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dde:	f023 0301 	bic.w	r3, r3, #1
 8006de2:	6223      	str	r3, [r4, #32]
 8006de4:	6a23      	ldr	r3, [r4, #32]
 8006de6:	f023 0304 	bic.w	r3, r3, #4
 8006dea:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8006dec:	f7fe fcc6 	bl	800577c <HAL_GetTick>
 8006df0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006df2:	6a23      	ldr	r3, [r4, #32]
 8006df4:	0798      	lsls	r0, r3, #30
 8006df6:	d5d3      	bpl.n	8006da0 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006df8:	f7fe fcc0 	bl	800577c <HAL_GetTick>
 8006dfc:	1b80      	subs	r0, r0, r6
 8006dfe:	4540      	cmp	r0, r8
 8006e00:	d9f7      	bls.n	8006df2 <HAL_RCC_OscConfig+0x23a>
 8006e02:	e71a      	b.n	8006c3a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e04:	2b05      	cmp	r3, #5
 8006e06:	6a23      	ldr	r3, [r4, #32]
 8006e08:	d103      	bne.n	8006e12 <HAL_RCC_OscConfig+0x25a>
 8006e0a:	f043 0304 	orr.w	r3, r3, #4
 8006e0e:	6223      	str	r3, [r4, #32]
 8006e10:	e7ba      	b.n	8006d88 <HAL_RCC_OscConfig+0x1d0>
 8006e12:	f023 0301 	bic.w	r3, r3, #1
 8006e16:	6223      	str	r3, [r4, #32]
 8006e18:	6a23      	ldr	r3, [r4, #32]
 8006e1a:	f023 0304 	bic.w	r3, r3, #4
 8006e1e:	e7b6      	b.n	8006d8e <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e20:	f7fe fcac 	bl	800577c <HAL_GetTick>
 8006e24:	1b80      	subs	r0, r0, r6
 8006e26:	4540      	cmp	r0, r8
 8006e28:	d9b7      	bls.n	8006d9a <HAL_RCC_OscConfig+0x1e2>
 8006e2a:	e706      	b.n	8006c3a <HAL_RCC_OscConfig+0x82>
 8006e2c:	40021000 	.word	0x40021000
 8006e30:	42420000 	.word	0x42420000
 8006e34:	20000000 	.word	0x20000000
 8006e38:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e3c:	4c2a      	ldr	r4, [pc, #168]	@ (8006ee8 <HAL_RCC_OscConfig+0x330>)
 8006e3e:	6862      	ldr	r2, [r4, #4]
 8006e40:	f002 020c 	and.w	r2, r2, #12
 8006e44:	2a08      	cmp	r2, #8
 8006e46:	d03e      	beq.n	8006ec6 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	4b27      	ldr	r3, [pc, #156]	@ (8006eec <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 8006e4e:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e50:	d12c      	bne.n	8006eac <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8006e52:	f7fe fc93 	bl	800577c <HAL_GetTick>
 8006e56:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e58:	6823      	ldr	r3, [r4, #0]
 8006e5a:	0199      	lsls	r1, r3, #6
 8006e5c:	d420      	bmi.n	8006ea0 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006e5e:	6a2b      	ldr	r3, [r5, #32]
 8006e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e64:	d105      	bne.n	8006e72 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006e66:	6862      	ldr	r2, [r4, #4]
 8006e68:	68a9      	ldr	r1, [r5, #8]
 8006e6a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e72:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8006e74:	6862      	ldr	r2, [r4, #4]
 8006e76:	430b      	orrs	r3, r1
 8006e78:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8006e7c:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8006e7e:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e80:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8006e82:	4b1a      	ldr	r3, [pc, #104]	@ (8006eec <HAL_RCC_OscConfig+0x334>)
 8006e84:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8006e86:	f7fe fc79 	bl	800577c <HAL_GetTick>
 8006e8a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e8c:	6823      	ldr	r3, [r4, #0]
 8006e8e:	019a      	lsls	r2, r3, #6
 8006e90:	f53f aea8 	bmi.w	8006be4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e94:	f7fe fc72 	bl	800577c <HAL_GetTick>
 8006e98:	1b40      	subs	r0, r0, r5
 8006e9a:	2802      	cmp	r0, #2
 8006e9c:	d9f6      	bls.n	8006e8c <HAL_RCC_OscConfig+0x2d4>
 8006e9e:	e6cc      	b.n	8006c3a <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ea0:	f7fe fc6c 	bl	800577c <HAL_GetTick>
 8006ea4:	1b80      	subs	r0, r0, r6
 8006ea6:	2802      	cmp	r0, #2
 8006ea8:	d9d6      	bls.n	8006e58 <HAL_RCC_OscConfig+0x2a0>
 8006eaa:	e6c6      	b.n	8006c3a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8006eac:	f7fe fc66 	bl	800577c <HAL_GetTick>
 8006eb0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006eb2:	6823      	ldr	r3, [r4, #0]
 8006eb4:	019b      	lsls	r3, r3, #6
 8006eb6:	f57f ae95 	bpl.w	8006be4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006eba:	f7fe fc5f 	bl	800577c <HAL_GetTick>
 8006ebe:	1b40      	subs	r0, r0, r5
 8006ec0:	2802      	cmp	r0, #2
 8006ec2:	d9f6      	bls.n	8006eb2 <HAL_RCC_OscConfig+0x2fa>
 8006ec4:	e6b9      	b.n	8006c3a <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	f43f aea2 	beq.w	8006c10 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8006ecc:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ece:	6a2b      	ldr	r3, [r5, #32]
 8006ed0:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	f47f ae9b 	bne.w	8006c10 <HAL_RCC_OscConfig+0x58>
 8006eda:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006edc:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ee0:	1ac0      	subs	r0, r0, r3
 8006ee2:	bf18      	it	ne
 8006ee4:	2001      	movne	r0, #1
 8006ee6:	e6a9      	b.n	8006c3c <HAL_RCC_OscConfig+0x84>
 8006ee8:	40021000 	.word	0x40021000
 8006eec:	42420000 	.word	0x42420000

08006ef0 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8006ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8006f28 <HAL_RCC_GetSysClockFreq+0x38>)
 8006ef2:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8006ef4:	f003 010c 	and.w	r1, r3, #12
 8006ef8:	2908      	cmp	r1, #8
 8006efa:	d112      	bne.n	8006f22 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006efc:	480b      	ldr	r0, [pc, #44]	@ (8006f2c <HAL_RCC_GetSysClockFreq+0x3c>)
 8006efe:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006f02:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006f04:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006f06:	d509      	bpl.n	8006f1c <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006f08:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006f0a:	4a09      	ldr	r2, [pc, #36]	@ (8006f30 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006f0c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006f10:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006f12:	4a08      	ldr	r2, [pc, #32]	@ (8006f34 <HAL_RCC_GetSysClockFreq+0x44>)
 8006f14:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006f16:	fbb0 f0f3 	udiv	r0, r0, r3
 8006f1a:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006f1c:	4b06      	ldr	r3, [pc, #24]	@ (8006f38 <HAL_RCC_GetSysClockFreq+0x48>)
 8006f1e:	4358      	muls	r0, r3
 8006f20:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8006f22:	4803      	ldr	r0, [pc, #12]	@ (8006f30 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	40021000 	.word	0x40021000
 8006f2c:	080093ae 	.word	0x080093ae
 8006f30:	007a1200 	.word	0x007a1200
 8006f34:	080093ac 	.word	0x080093ac
 8006f38:	003d0900 	.word	0x003d0900

08006f3c <HAL_RCC_ClockConfig>:
{
 8006f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f40:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8006f42:	4604      	mov	r4, r0
 8006f44:	b910      	cbnz	r0, 8006f4c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8006f46:	2001      	movs	r0, #1
}
 8006f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f4c:	4a44      	ldr	r2, [pc, #272]	@ (8007060 <HAL_RCC_ClockConfig+0x124>)
 8006f4e:	6813      	ldr	r3, [r2, #0]
 8006f50:	f003 0307 	and.w	r3, r3, #7
 8006f54:	428b      	cmp	r3, r1
 8006f56:	d328      	bcc.n	8006faa <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f58:	6821      	ldr	r1, [r4, #0]
 8006f5a:	078e      	lsls	r6, r1, #30
 8006f5c:	d430      	bmi.n	8006fc0 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f5e:	07ca      	lsls	r2, r1, #31
 8006f60:	d443      	bmi.n	8006fea <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f62:	4a3f      	ldr	r2, [pc, #252]	@ (8007060 <HAL_RCC_ClockConfig+0x124>)
 8006f64:	6813      	ldr	r3, [r2, #0]
 8006f66:	f003 0307 	and.w	r3, r3, #7
 8006f6a:	42ab      	cmp	r3, r5
 8006f6c:	d865      	bhi.n	800703a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f6e:	6822      	ldr	r2, [r4, #0]
 8006f70:	4d3c      	ldr	r5, [pc, #240]	@ (8007064 <HAL_RCC_ClockConfig+0x128>)
 8006f72:	f012 0f04 	tst.w	r2, #4
 8006f76:	d16c      	bne.n	8007052 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f78:	0713      	lsls	r3, r2, #28
 8006f7a:	d506      	bpl.n	8006f8a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006f7c:	686b      	ldr	r3, [r5, #4]
 8006f7e:	6922      	ldr	r2, [r4, #16]
 8006f80:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8006f84:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006f88:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006f8a:	f7ff ffb1 	bl	8006ef0 <HAL_RCC_GetSysClockFreq>
 8006f8e:	686b      	ldr	r3, [r5, #4]
 8006f90:	4a35      	ldr	r2, [pc, #212]	@ (8007068 <HAL_RCC_ClockConfig+0x12c>)
 8006f92:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006f96:	5cd3      	ldrb	r3, [r2, r3]
 8006f98:	40d8      	lsrs	r0, r3
 8006f9a:	4b34      	ldr	r3, [pc, #208]	@ (800706c <HAL_RCC_ClockConfig+0x130>)
 8006f9c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8006f9e:	4b34      	ldr	r3, [pc, #208]	@ (8007070 <HAL_RCC_ClockConfig+0x134>)
 8006fa0:	6818      	ldr	r0, [r3, #0]
 8006fa2:	f7fe fba9 	bl	80056f8 <HAL_InitTick>
  return HAL_OK;
 8006fa6:	2000      	movs	r0, #0
 8006fa8:	e7ce      	b.n	8006f48 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006faa:	6813      	ldr	r3, [r2, #0]
 8006fac:	f023 0307 	bic.w	r3, r3, #7
 8006fb0:	430b      	orrs	r3, r1
 8006fb2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fb4:	6813      	ldr	r3, [r2, #0]
 8006fb6:	f003 0307 	and.w	r3, r3, #7
 8006fba:	428b      	cmp	r3, r1
 8006fbc:	d1c3      	bne.n	8006f46 <HAL_RCC_ClockConfig+0xa>
 8006fbe:	e7cb      	b.n	8006f58 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fc0:	4b28      	ldr	r3, [pc, #160]	@ (8007064 <HAL_RCC_ClockConfig+0x128>)
 8006fc2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fc6:	bf1e      	ittt	ne
 8006fc8:	685a      	ldrne	r2, [r3, #4]
 8006fca:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8006fce:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fd0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fd2:	bf42      	ittt	mi
 8006fd4:	685a      	ldrmi	r2, [r3, #4]
 8006fd6:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8006fda:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	68a0      	ldr	r0, [r4, #8]
 8006fe0:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8006fe4:	4302      	orrs	r2, r0
 8006fe6:	605a      	str	r2, [r3, #4]
 8006fe8:	e7b9      	b.n	8006f5e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fea:	6862      	ldr	r2, [r4, #4]
 8006fec:	4e1d      	ldr	r6, [pc, #116]	@ (8007064 <HAL_RCC_ClockConfig+0x128>)
 8006fee:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ff0:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ff2:	d11a      	bne.n	800702a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ff4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ff8:	d0a5      	beq.n	8006f46 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ffa:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ffc:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007000:	f023 0303 	bic.w	r3, r3, #3
 8007004:	4313      	orrs	r3, r2
 8007006:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8007008:	f7fe fbb8 	bl	800577c <HAL_GetTick>
 800700c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800700e:	6873      	ldr	r3, [r6, #4]
 8007010:	6862      	ldr	r2, [r4, #4]
 8007012:	f003 030c 	and.w	r3, r3, #12
 8007016:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800701a:	d0a2      	beq.n	8006f62 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800701c:	f7fe fbae 	bl	800577c <HAL_GetTick>
 8007020:	1bc0      	subs	r0, r0, r7
 8007022:	4540      	cmp	r0, r8
 8007024:	d9f3      	bls.n	800700e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8007026:	2003      	movs	r0, #3
 8007028:	e78e      	b.n	8006f48 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800702a:	2a02      	cmp	r2, #2
 800702c:	d102      	bne.n	8007034 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800702e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8007032:	e7e1      	b.n	8006ff8 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007034:	f013 0f02 	tst.w	r3, #2
 8007038:	e7de      	b.n	8006ff8 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800703a:	6813      	ldr	r3, [r2, #0]
 800703c:	f023 0307 	bic.w	r3, r3, #7
 8007040:	432b      	orrs	r3, r5
 8007042:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007044:	6813      	ldr	r3, [r2, #0]
 8007046:	f003 0307 	and.w	r3, r3, #7
 800704a:	42ab      	cmp	r3, r5
 800704c:	f47f af7b 	bne.w	8006f46 <HAL_RCC_ClockConfig+0xa>
 8007050:	e78d      	b.n	8006f6e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007052:	686b      	ldr	r3, [r5, #4]
 8007054:	68e1      	ldr	r1, [r4, #12]
 8007056:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800705a:	430b      	orrs	r3, r1
 800705c:	606b      	str	r3, [r5, #4]
 800705e:	e78b      	b.n	8006f78 <HAL_RCC_ClockConfig+0x3c>
 8007060:	40022000 	.word	0x40022000
 8007064:	40021000 	.word	0x40021000
 8007068:	0800939c 	.word	0x0800939c
 800706c:	20000000 	.word	0x20000000
 8007070:	20000010 	.word	0x20000010

08007074 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007074:	4b04      	ldr	r3, [pc, #16]	@ (8007088 <HAL_RCC_GetPCLK1Freq+0x14>)
 8007076:	4a05      	ldr	r2, [pc, #20]	@ (800708c <HAL_RCC_GetPCLK1Freq+0x18>)
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800707e:	5cd3      	ldrb	r3, [r2, r3]
 8007080:	4a03      	ldr	r2, [pc, #12]	@ (8007090 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007082:	6810      	ldr	r0, [r2, #0]
}
 8007084:	40d8      	lsrs	r0, r3
 8007086:	4770      	bx	lr
 8007088:	40021000 	.word	0x40021000
 800708c:	08009394 	.word	0x08009394
 8007090:	20000000 	.word	0x20000000

08007094 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007094:	4b04      	ldr	r3, [pc, #16]	@ (80070a8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8007096:	4a05      	ldr	r2, [pc, #20]	@ (80070ac <HAL_RCC_GetPCLK2Freq+0x18>)
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800709e:	5cd3      	ldrb	r3, [r2, r3]
 80070a0:	4a03      	ldr	r2, [pc, #12]	@ (80070b0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80070a2:	6810      	ldr	r0, [r2, #0]
}
 80070a4:	40d8      	lsrs	r0, r3
 80070a6:	4770      	bx	lr
 80070a8:	40021000 	.word	0x40021000
 80070ac:	08009394 	.word	0x08009394
 80070b0:	20000000 	.word	0x20000000

080070b4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80070b4:	6803      	ldr	r3, [r0, #0]
{
 80070b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80070ba:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80070bc:	07d8      	lsls	r0, r3, #31
 80070be:	d521      	bpl.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070c0:	4c36      	ldr	r4, [pc, #216]	@ (800719c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80070c2:	69e3      	ldr	r3, [r4, #28]
 80070c4:	00d9      	lsls	r1, r3, #3
 80070c6:	d42b      	bmi.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80070c8:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80070ca:	69e3      	ldr	r3, [r4, #28]
 80070cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070d0:	61e3      	str	r3, [r4, #28]
 80070d2:	69e3      	ldr	r3, [r4, #28]
 80070d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070d8:	9301      	str	r3, [sp, #4]
 80070da:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070dc:	4f30      	ldr	r7, [pc, #192]	@ (80071a0 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	05da      	lsls	r2, r3, #23
 80070e2:	d51f      	bpl.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80070e4:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80070e6:	686a      	ldr	r2, [r5, #4]
 80070e8:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80070ec:	d12e      	bne.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070ee:	6a23      	ldr	r3, [r4, #32]
 80070f0:	686a      	ldr	r2, [r5, #4]
 80070f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070f6:	4313      	orrs	r3, r2
 80070f8:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80070fa:	b11e      	cbz	r6, 8007104 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070fc:	69e3      	ldr	r3, [r4, #28]
 80070fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007102:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007104:	682a      	ldr	r2, [r5, #0]
 8007106:	0791      	lsls	r1, r2, #30
 8007108:	d506      	bpl.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800710a:	4924      	ldr	r1, [pc, #144]	@ (800719c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800710c:	68a8      	ldr	r0, [r5, #8]
 800710e:	684b      	ldr	r3, [r1, #4]
 8007110:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8007114:	4303      	orrs	r3, r0
 8007116:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007118:	06d3      	lsls	r3, r2, #27
 800711a:	d436      	bmi.n	800718a <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800711c:	2000      	movs	r0, #0
 800711e:	e012      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 8007120:	2600      	movs	r6, #0
 8007122:	e7db      	b.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800712a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800712c:	f7fe fb26 	bl	800577c <HAL_GetTick>
 8007130:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	05db      	lsls	r3, r3, #23
 8007136:	d4d5      	bmi.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007138:	f7fe fb20 	bl	800577c <HAL_GetTick>
 800713c:	eba0 0008 	sub.w	r0, r0, r8
 8007140:	2864      	cmp	r0, #100	@ 0x64
 8007142:	d9f6      	bls.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 8007144:	2003      	movs	r0, #3
}
 8007146:	b002      	add	sp, #8
 8007148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800714c:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8007150:	429a      	cmp	r2, r3
 8007152:	d0cc      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8007154:	2001      	movs	r0, #1
 8007156:	4a13      	ldr	r2, [pc, #76]	@ (80071a4 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007158:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800715a:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 800715e:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007160:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007164:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007166:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 800716a:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800716c:	d5bf      	bpl.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 800716e:	f7fe fb05 	bl	800577c <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007172:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8007176:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007178:	6a23      	ldr	r3, [r4, #32]
 800717a:	0798      	lsls	r0, r3, #30
 800717c:	d4b7      	bmi.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800717e:	f7fe fafd 	bl	800577c <HAL_GetTick>
 8007182:	1bc0      	subs	r0, r0, r7
 8007184:	4540      	cmp	r0, r8
 8007186:	d9f7      	bls.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8007188:	e7dc      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800718a:	4a04      	ldr	r2, [pc, #16]	@ (800719c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800718c:	68e9      	ldr	r1, [r5, #12]
 800718e:	6853      	ldr	r3, [r2, #4]
 8007190:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8007194:	430b      	orrs	r3, r1
 8007196:	6053      	str	r3, [r2, #4]
 8007198:	e7c0      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x68>
 800719a:	bf00      	nop
 800719c:	40021000 	.word	0x40021000
 80071a0:	40007000 	.word	0x40007000
 80071a4:	42420000 	.word	0x42420000

080071a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80071a8:	2802      	cmp	r0, #2
{
 80071aa:	b508      	push	{r3, lr}
  switch (PeriphClk)
 80071ac:	d044      	beq.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 80071ae:	2810      	cmp	r0, #16
 80071b0:	d003      	beq.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 80071b2:	2801      	cmp	r0, #1
 80071b4:	d022      	beq.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t temp_reg = 0U, frequency = 0U;
 80071b6:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 80071b8:	e034      	b.n	8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      temp_reg = RCC->CFGR;
 80071ba:	4b25      	ldr	r3, [pc, #148]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80071bc:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80071be:	6818      	ldr	r0, [r3, #0]
 80071c0:	f010 7080 	ands.w	r0, r0, #16777216	@ 0x1000000
 80071c4:	d02e      	beq.n	8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80071c6:	f3c2 4183 	ubfx	r1, r2, #18, #4
 80071ca:	4822      	ldr	r0, [pc, #136]	@ (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80071cc:	03d2      	lsls	r2, r2, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80071ce:	bf48      	it	mi
 80071d0:	685a      	ldrmi	r2, [r3, #4]
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80071d2:	5c40      	ldrb	r0, [r0, r1]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80071d4:	bf41      	itttt	mi
 80071d6:	4920      	ldrmi	r1, [pc, #128]	@ (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80071d8:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 80071dc:	5c89      	ldrbmi	r1, [r1, r2]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80071de:	4a1f      	ldrmi	r2, [pc, #124]	@ (800725c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80071e0:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80071e2:	bf4c      	ite	mi
 80071e4:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80071e8:	4a1d      	ldrpl	r2, [pc, #116]	@ (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80071ea:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80071ec:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80071f0:	d418      	bmi.n	8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
          frequency = (pllclk * 2) / 3;
 80071f2:	2303      	movs	r3, #3
 80071f4:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80071f6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80071fa:	e013      	b.n	8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80071fc:	f240 3102 	movw	r1, #770	@ 0x302
      temp_reg = RCC->BDCR;
 8007200:	4a13      	ldr	r2, [pc, #76]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8007202:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007204:	4019      	ands	r1, r3
 8007206:	f5b1 7f81 	cmp.w	r1, #258	@ 0x102
 800720a:	d01e      	beq.n	800724a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800720c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007210:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007214:	d107      	bne.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        frequency = LSI_VALUE;
 8007216:	f649 4340 	movw	r3, #40000	@ 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800721a:	6a50      	ldr	r0, [r2, #36]	@ 0x24
        frequency = LSI_VALUE;
 800721c:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 8007220:	bf18      	it	ne
 8007222:	4618      	movne	r0, r3
}
 8007224:	bd08      	pop	{r3, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007226:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800722a:	d1c4      	bne.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
 800722c:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 800722e:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8007232:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8007236:	e7f3      	b.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007238:	f7ff ff2c 	bl	8007094 <HAL_RCC_GetPCLK2Freq>
 800723c:	4b04      	ldr	r3, [pc, #16]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8007244:	3301      	adds	r3, #1
 8007246:	005b      	lsls	r3, r3, #1
 8007248:	e7d5      	b.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
        frequency = LSE_VALUE;
 800724a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800724e:	e7e9      	b.n	8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8007250:	40021000 	.word	0x40021000
 8007254:	080093c0 	.word	0x080093c0
 8007258:	080093be 	.word	0x080093be
 800725c:	007a1200 	.word	0x007a1200
 8007260:	003d0900 	.word	0x003d0900

08007264 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  tickstart = HAL_GetTick();
 8007268:	f7fe fa88 	bl	800577c <HAL_GetTick>
 800726c:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	685a      	ldr	r2, [r3, #4]
 8007272:	0692      	lsls	r2, r2, #26
 8007274:	d505      	bpl.n	8007282 <RTC_EnterInitMode+0x1e>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);


  return HAL_OK;
 8007276:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007278:	685a      	ldr	r2, [r3, #4]
 800727a:	f042 0210 	orr.w	r2, r2, #16
 800727e:	605a      	str	r2, [r3, #4]
}
 8007280:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007282:	f7fe fa7b 	bl	800577c <HAL_GetTick>
 8007286:	1b40      	subs	r0, r0, r5
 8007288:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800728c:	d9ef      	bls.n	800726e <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 800728e:	2003      	movs	r0, #3
 8007290:	e7f6      	b.n	8007280 <RTC_EnterInitMode+0x1c>

08007292 <RTC_ExitInitMode>:
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007292:	6802      	ldr	r2, [r0, #0]
{
 8007294:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007296:	6853      	ldr	r3, [r2, #4]
{
 8007298:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800729a:	f023 0310 	bic.w	r3, r3, #16
 800729e:	6053      	str	r3, [r2, #4]

  tickstart = HAL_GetTick();
 80072a0:	f7fe fa6c 	bl	800577c <HAL_GetTick>
 80072a4:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80072a6:	6823      	ldr	r3, [r4, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	069b      	lsls	r3, r3, #26
 80072ac:	d501      	bpl.n	80072b2 <RTC_ExitInitMode+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80072ae:	2000      	movs	r0, #0
}
 80072b0:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80072b2:	f7fe fa63 	bl	800577c <HAL_GetTick>
 80072b6:	1b40      	subs	r0, r0, r5
 80072b8:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80072bc:	d9f3      	bls.n	80072a6 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 80072be:	2003      	movs	r0, #3
 80072c0:	e7f6      	b.n	80072b0 <RTC_ExitInitMode+0x1e>

080072c2 <HAL_RTC_WaitForSynchro>:
{
 80072c2:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 80072c4:	4604      	mov	r4, r0
 80072c6:	b1a8      	cbz	r0, 80072f4 <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80072c8:	6802      	ldr	r2, [r0, #0]
 80072ca:	6853      	ldr	r3, [r2, #4]
 80072cc:	f023 0308 	bic.w	r3, r3, #8
 80072d0:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80072d2:	f7fe fa53 	bl	800577c <HAL_GetTick>
 80072d6:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80072d8:	6823      	ldr	r3, [r4, #0]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	071b      	lsls	r3, r3, #28
 80072de:	d501      	bpl.n	80072e4 <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 80072e0:	2000      	movs	r0, #0
}
 80072e2:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80072e4:	f7fe fa4a 	bl	800577c <HAL_GetTick>
 80072e8:	1b40      	subs	r0, r0, r5
 80072ea:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80072ee:	d9f3      	bls.n	80072d8 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 80072f0:	2003      	movs	r0, #3
 80072f2:	e7f6      	b.n	80072e2 <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 80072f4:	2001      	movs	r0, #1
 80072f6:	e7f4      	b.n	80072e2 <HAL_RTC_WaitForSynchro+0x20>

080072f8 <HAL_RTC_Init>:
{
 80072f8:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 80072fa:	4604      	mov	r4, r0
 80072fc:	b170      	cbz	r0, 800731c <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80072fe:	7c43      	ldrb	r3, [r0, #17]
 8007300:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007304:	b913      	cbnz	r3, 800730c <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8007306:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8007308:	f7fe f8c8 	bl	800549c <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800730c:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800730e:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007310:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007312:	f7ff ffd6 	bl	80072c2 <HAL_RTC_WaitForSynchro>
 8007316:	b118      	cbz	r0, 8007320 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007318:	2304      	movs	r3, #4
 800731a:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 800731c:	2001      	movs	r0, #1
}
 800731e:	bd10      	pop	{r4, pc}
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007320:	4620      	mov	r0, r4
 8007322:	f7ff ff9f 	bl	8007264 <RTC_EnterInitMode>
 8007326:	2800      	cmp	r0, #0
 8007328:	d1f6      	bne.n	8007318 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800732a:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800732c:	68a1      	ldr	r1, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800732e:	6853      	ldr	r3, [r2, #4]
 8007330:	f023 0307 	bic.w	r3, r3, #7
 8007334:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8007336:	4a12      	ldr	r2, [pc, #72]	@ (8007380 <HAL_RTC_Init+0x88>)
 8007338:	b119      	cbz	r1, 8007342 <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800733a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800733c:	f023 0301 	bic.w	r3, r3, #1
 8007340:	6313      	str	r3, [r2, #48]	@ 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8007342:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007344:	f423 7360 	bic.w	r3, r3, #896	@ 0x380
 8007348:	430b      	orrs	r3, r1
 800734a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800734c:	6860      	ldr	r0, [r4, #4]
 800734e:	1c43      	adds	r3, r0, #1
 8007350:	d105      	bne.n	800735e <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8007352:	2001      	movs	r0, #1
 8007354:	f7ff ff28 	bl	80071a8 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8007358:	2800      	cmp	r0, #0
 800735a:	d0dd      	beq.n	8007318 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 800735c:	3801      	subs	r0, #1
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	f3c0 4203 	ubfx	r2, r0, #16, #4
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8007364:	b280      	uxth	r0, r0
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8007366:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8007368:	60d8      	str	r0, [r3, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800736a:	4620      	mov	r0, r4
 800736c:	f7ff ff91 	bl	8007292 <RTC_ExitInitMode>
 8007370:	2800      	cmp	r0, #0
 8007372:	d1d1      	bne.n	8007318 <HAL_RTC_Init+0x20>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8007374:	2301      	movs	r3, #1
 8007376:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8007378:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 800737a:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 800737c:	e7cf      	b.n	800731e <HAL_RTC_Init+0x26>
 800737e:	bf00      	nop
 8007380:	40006c00 	.word	0x40006c00

08007384 <HAL_RTCEx_BKUPWrite>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
  tmp += (BackupRegister * 4U);
 8007384:	0089      	lsls	r1, r1, #2
 8007386:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800738a:	f501 41d8 	add.w	r1, r1, #27648	@ 0x6c00

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 800738e:	b292      	uxth	r2, r2
 8007390:	600a      	str	r2, [r1, #0]
}
 8007392:	4770      	bx	lr

08007394 <HAL_RTCEx_BKUPRead>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
  backupregister += (BackupRegister * 4U);
 8007394:	0089      	lsls	r1, r1, #2
 8007396:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800739a:	f501 41d8 	add.w	r1, r1, #27648	@ 0x6c00

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 800739e:	6808      	ldr	r0, [r1, #0]

  /* Read the specified register */
  return pvalue;
}
 80073a0:	b280      	uxth	r0, r0
 80073a2:	4770      	bx	lr

080073a4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073a4:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a6:	f102 030c 	add.w	r3, r2, #12
 80073aa:	e853 3f00 	ldrex	r3, [r3]
 80073ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b2:	320c      	adds	r2, #12
 80073b4:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80073b8:	6802      	ldr	r2, [r0, #0]
 80073ba:	2900      	cmp	r1, #0
 80073bc:	d1f2      	bne.n	80073a4 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073be:	f102 0314 	add.w	r3, r2, #20
 80073c2:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073c6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ca:	f102 0c14 	add.w	ip, r2, #20
 80073ce:	e84c 3100 	strex	r1, r3, [ip]
 80073d2:	2900      	cmp	r1, #0
 80073d4:	d1f3      	bne.n	80073be <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073d6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d10b      	bne.n	80073f4 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073dc:	f102 030c 	add.w	r3, r2, #12
 80073e0:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073e4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e8:	f102 0c0c 	add.w	ip, r2, #12
 80073ec:	e84c 3100 	strex	r1, r3, [ip]
 80073f0:	2900      	cmp	r1, #0
 80073f2:	d1f3      	bne.n	80073dc <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073f4:	2320      	movs	r3, #32
 80073f6:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073fa:	2300      	movs	r3, #0
 80073fc:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80073fe:	4770      	bx	lr

08007400 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007400:	b510      	push	{r4, lr}
 8007402:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007404:	6803      	ldr	r3, [r0, #0]
 8007406:	68c1      	ldr	r1, [r0, #12]
 8007408:	691a      	ldr	r2, [r3, #16]
 800740a:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800740e:	430a      	orrs	r2, r1
 8007410:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007412:	6882      	ldr	r2, [r0, #8]
 8007414:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8007416:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007418:	4302      	orrs	r2, r0
 800741a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800741c:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 8007420:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007424:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8007426:	430a      	orrs	r2, r1
 8007428:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800742a:	695a      	ldr	r2, [r3, #20]
 800742c:	69a1      	ldr	r1, [r4, #24]
 800742e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007432:	430a      	orrs	r2, r1
 8007434:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007436:	4a0e      	ldr	r2, [pc, #56]	@ (8007470 <UART_SetConfig+0x70>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d115      	bne.n	8007468 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800743c:	f7ff fe2a 	bl	8007094 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007440:	2319      	movs	r3, #25
 8007442:	4343      	muls	r3, r0
 8007444:	6862      	ldr	r2, [r4, #4]
 8007446:	6820      	ldr	r0, [r4, #0]
 8007448:	0092      	lsls	r2, r2, #2
 800744a:	fbb3 f3f2 	udiv	r3, r3, r2
 800744e:	2264      	movs	r2, #100	@ 0x64
 8007450:	fbb3 f1f2 	udiv	r1, r3, r2
 8007454:	fb02 3311 	mls	r3, r2, r1, r3
 8007458:	011b      	lsls	r3, r3, #4
 800745a:	3332      	adds	r3, #50	@ 0x32
 800745c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007460:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8007464:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8007466:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8007468:	f7ff fe04 	bl	8007074 <HAL_RCC_GetPCLK1Freq>
 800746c:	e7e8      	b.n	8007440 <UART_SetConfig+0x40>
 800746e:	bf00      	nop
 8007470:	40013800 	.word	0x40013800

08007474 <HAL_UART_Init>:
{
 8007474:	b510      	push	{r4, lr}
  if (huart == NULL)
 8007476:	4604      	mov	r4, r0
 8007478:	b348      	cbz	r0, 80074ce <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 800747a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800747e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007482:	b91b      	cbnz	r3, 800748c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8007484:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8007488:	f7fe f880 	bl	800558c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800748c:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800748e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007490:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8007494:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8007496:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8007498:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800749c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800749e:	f7ff ffaf 	bl	8007400 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074a2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074a4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074a6:	691a      	ldr	r2, [r3, #16]
 80074a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80074ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074ae:	695a      	ldr	r2, [r3, #20]
 80074b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80074b4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80074b6:	68da      	ldr	r2, [r3, #12]
 80074b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80074bc:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80074be:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074c0:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80074c2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80074c6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074ca:	6360      	str	r0, [r4, #52]	@ 0x34
}
 80074cc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80074ce:	2001      	movs	r0, #1
 80074d0:	e7fc      	b.n	80074cc <HAL_UART_Init+0x58>

080074d2 <HAL_UART_DeInit>:
{
 80074d2:	b510      	push	{r4, lr}
  if (huart == NULL)
 80074d4:	4604      	mov	r4, r0
 80074d6:	b1a0      	cbz	r0, 8007502 <HAL_UART_DeInit+0x30>
  huart->gState = HAL_UART_STATE_BUSY;
 80074d8:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80074da:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80074dc:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80074e0:	68d3      	ldr	r3, [r2, #12]
 80074e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80074e6:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 80074e8:	f7fe f8ac 	bl	8005644 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ec:	2000      	movs	r0, #0
 80074ee:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(huart);
 80074f0:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80074f4:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 80074f8:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074fc:	6320      	str	r0, [r4, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074fe:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8007500:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007502:	2001      	movs	r0, #1
 8007504:	e7fc      	b.n	8007500 <HAL_UART_DeInit+0x2e>

08007506 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8007506:	4770      	bx	lr

08007508 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8007508:	4770      	bx	lr

0800750a <UART_DMAError>:
{
 800750a:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800750c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800750e:	6803      	ldr	r3, [r0, #0]
 8007510:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007512:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 8007516:	2921      	cmp	r1, #33	@ 0x21
 8007518:	d112      	bne.n	8007540 <UART_DMAError+0x36>
 800751a:	0612      	lsls	r2, r2, #24
 800751c:	d510      	bpl.n	8007540 <UART_DMAError+0x36>
    huart->TxXferCount = 0x00U;
 800751e:	2200      	movs	r2, #0
 8007520:	84c2      	strh	r2, [r0, #38]	@ 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007522:	f103 020c 	add.w	r2, r3, #12
 8007526:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800752a:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752e:	f103 0c0c 	add.w	ip, r3, #12
 8007532:	e84c 2100 	strex	r1, r2, [ip]
 8007536:	2900      	cmp	r1, #0
 8007538:	d1f3      	bne.n	8007522 <UART_DMAError+0x18>
  huart->gState = HAL_UART_STATE_READY;
 800753a:	2220      	movs	r2, #32
 800753c:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007540:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007542:	f890 2042 	ldrb.w	r2, [r0, #66]	@ 0x42
 8007546:	2a22      	cmp	r2, #34	@ 0x22
 8007548:	d105      	bne.n	8007556 <UART_DMAError+0x4c>
 800754a:	065b      	lsls	r3, r3, #25
 800754c:	d503      	bpl.n	8007556 <UART_DMAError+0x4c>
    huart->RxXferCount = 0x00U;
 800754e:	2300      	movs	r3, #0
 8007550:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007552:	f7ff ff27 	bl	80073a4 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007556:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8007558:	f043 0310 	orr.w	r3, r3, #16
 800755c:	6443      	str	r3, [r0, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 800755e:	f7fe f813 	bl	8005588 <HAL_UART_ErrorCallback>
}
 8007562:	bd08      	pop	{r3, pc}

08007564 <UART_DMAAbortOnError>:
{
 8007564:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8007566:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007568:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 800756a:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800756c:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 800756e:	f7fe f80b 	bl	8005588 <HAL_UART_ErrorCallback>
}
 8007572:	bd08      	pop	{r3, pc}

08007574 <HAL_UARTEx_RxEventCallback>:
}
 8007574:	4770      	bx	lr

08007576 <UART_DMARxHalfCplt>:
{
 8007576:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007578:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800757a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800757c:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800757e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8007580:	2b01      	cmp	r3, #1
 8007582:	d104      	bne.n	800758e <UART_DMARxHalfCplt+0x18>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007584:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8007586:	0849      	lsrs	r1, r1, #1
 8007588:	f7ff fff4 	bl	8007574 <HAL_UARTEx_RxEventCallback>
}
 800758c:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 800758e:	f7ff ffbb 	bl	8007508 <HAL_UART_RxHalfCpltCallback>
}
 8007592:	e7fb      	b.n	800758c <UART_DMARxHalfCplt+0x16>

08007594 <UART_DMAReceiveCplt>:
{
 8007594:	b508      	push	{r3, lr}
 8007596:	4603      	mov	r3, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007598:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800759a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f013 0320 	ands.w	r3, r3, #32
 80075a2:	d137      	bne.n	8007614 <UART_DMAReceiveCplt+0x80>
    huart->RxXferCount = 0U;
 80075a4:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075a6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a8:	f102 030c 	add.w	r3, r2, #12
 80075ac:	e853 3f00 	ldrex	r3, [r3]
 80075b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	320c      	adds	r2, #12
 80075b6:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80075ba:	6803      	ldr	r3, [r0, #0]
 80075bc:	2900      	cmp	r1, #0
 80075be:	d1f2      	bne.n	80075a6 <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c0:	f103 0214 	add.w	r2, r3, #20
 80075c4:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075cc:	f103 0c14 	add.w	ip, r3, #20
 80075d0:	e84c 2100 	strex	r1, r2, [ip]
 80075d4:	2900      	cmp	r1, #0
 80075d6:	d1f3      	bne.n	80075c0 <UART_DMAReceiveCplt+0x2c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d8:	f103 0214 	add.w	r2, r3, #20
 80075dc:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e4:	f103 0c14 	add.w	ip, r3, #20
 80075e8:	e84c 2100 	strex	r1, r2, [ip]
 80075ec:	2900      	cmp	r1, #0
 80075ee:	d1f3      	bne.n	80075d8 <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 80075f0:	2220      	movs	r2, #32
 80075f2:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075f6:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80075f8:	2a01      	cmp	r2, #1
 80075fa:	d10b      	bne.n	8007614 <UART_DMAReceiveCplt+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fc:	f103 020c 	add.w	r2, r3, #12
 8007600:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007604:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007608:	f103 0c0c 	add.w	ip, r3, #12
 800760c:	e84c 2100 	strex	r1, r2, [ip]
 8007610:	2900      	cmp	r1, #0
 8007612:	d1f3      	bne.n	80075fc <UART_DMAReceiveCplt+0x68>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007614:	2300      	movs	r3, #0
 8007616:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007618:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800761a:	2b01      	cmp	r3, #1
 800761c:	d103      	bne.n	8007626 <UART_DMAReceiveCplt+0x92>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800761e:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8007620:	f7ff ffa8 	bl	8007574 <HAL_UARTEx_RxEventCallback>
}
 8007624:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8007626:	f7fd ffb0 	bl	800558a <HAL_UART_RxCpltCallback>
}
 800762a:	e7fb      	b.n	8007624 <UART_DMAReceiveCplt+0x90>

0800762c <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800762c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8007630:	b507      	push	{r0, r1, r2, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007632:	2b22      	cmp	r3, #34	@ 0x22
 8007634:	d142      	bne.n	80076bc <UART_Receive_IT.isra.0+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007636:	6881      	ldr	r1, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007638:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800763a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800763e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007640:	d13f      	bne.n	80076c2 <UART_Receive_IT.isra.0+0x96>
 8007642:	6901      	ldr	r1, [r0, #16]
 8007644:	2900      	cmp	r1, #0
 8007646:	d13f      	bne.n	80076c8 <UART_Receive_IT.isra.0+0x9c>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007648:	6852      	ldr	r2, [r2, #4]
 800764a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800764e:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8007652:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8007654:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8007656:	3b01      	subs	r3, #1
 8007658:	b29b      	uxth	r3, r3
 800765a:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800765c:	2b00      	cmp	r3, #0
 800765e:	d12d      	bne.n	80076bc <UART_Receive_IT.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007660:	6802      	ldr	r2, [r0, #0]
 8007662:	68d1      	ldr	r1, [r2, #12]
 8007664:	f021 0120 	bic.w	r1, r1, #32
 8007668:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800766a:	68d1      	ldr	r1, [r2, #12]
 800766c:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8007670:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007672:	6951      	ldr	r1, [r2, #20]
 8007674:	f021 0101 	bic.w	r1, r1, #1
 8007678:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800767a:	2220      	movs	r2, #32
 800767c:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007680:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007682:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8007684:	2a01      	cmp	r2, #1
 8007686:	6802      	ldr	r2, [r0, #0]
 8007688:	d128      	bne.n	80076dc <UART_Receive_IT.isra.0+0xb0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800768a:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768c:	f102 030c 	add.w	r3, r2, #12
 8007690:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007694:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007698:	f102 0c0c 	add.w	ip, r2, #12
 800769c:	e84c 3100 	strex	r1, r3, [ip]
 80076a0:	2900      	cmp	r1, #0
 80076a2:	d1f3      	bne.n	800768c <UART_Receive_IT.isra.0+0x60>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80076a4:	6813      	ldr	r3, [r2, #0]
 80076a6:	06db      	lsls	r3, r3, #27
 80076a8:	d505      	bpl.n	80076b6 <UART_Receive_IT.isra.0+0x8a>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076aa:	9101      	str	r1, [sp, #4]
 80076ac:	6813      	ldr	r3, [r2, #0]
 80076ae:	9301      	str	r3, [sp, #4]
 80076b0:	6853      	ldr	r3, [r2, #4]
 80076b2:	9301      	str	r3, [sp, #4]
 80076b4:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076b6:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80076b8:	f7ff ff5c 	bl	8007574 <HAL_UARTEx_RxEventCallback>
}
 80076bc:	b003      	add	sp, #12
 80076be:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80076c2:	b939      	cbnz	r1, 80076d4 <UART_Receive_IT.isra.0+0xa8>
 80076c4:	6901      	ldr	r1, [r0, #16]
 80076c6:	b929      	cbnz	r1, 80076d4 <UART_Receive_IT.isra.0+0xa8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80076c8:	6852      	ldr	r2, [r2, #4]
 80076ca:	b2d2      	uxtb	r2, r2
 80076cc:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 80076ce:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80076d0:	3301      	adds	r3, #1
 80076d2:	e7be      	b.n	8007652 <UART_Receive_IT.isra.0+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80076d4:	6852      	ldr	r2, [r2, #4]
 80076d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80076da:	e7f7      	b.n	80076cc <UART_Receive_IT.isra.0+0xa0>
        HAL_UART_RxCpltCallback(huart);
 80076dc:	f7fd ff55 	bl	800558a <HAL_UART_RxCpltCallback>
 80076e0:	e7ec      	b.n	80076bc <UART_Receive_IT.isra.0+0x90>
	...

080076e4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80076e4:	6803      	ldr	r3, [r0, #0]
{
 80076e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80076e8:	681a      	ldr	r2, [r3, #0]
{
 80076ea:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80076ec:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076ee:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076f0:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80076f2:	d108      	bne.n	8007706 <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80076f4:	0696      	lsls	r6, r2, #26
 80076f6:	d568      	bpl.n	80077ca <HAL_UART_IRQHandler+0xe6>
 80076f8:	068d      	lsls	r5, r1, #26
 80076fa:	d566      	bpl.n	80077ca <HAL_UART_IRQHandler+0xe6>
}
 80076fc:	b002      	add	sp, #8
 80076fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8007702:	f7ff bf93 	b.w	800762c <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007706:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800770a:	f401 7590 	and.w	r5, r1, #288	@ 0x120
 800770e:	4305      	orrs	r5, r0
 8007710:	d05b      	beq.n	80077ca <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007712:	07d6      	lsls	r6, r2, #31
 8007714:	d505      	bpl.n	8007722 <HAL_UART_IRQHandler+0x3e>
 8007716:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007718:	bf42      	ittt	mi
 800771a:	6c63      	ldrmi	r3, [r4, #68]	@ 0x44
 800771c:	f043 0301 	orrmi.w	r3, r3, #1
 8007720:	6463      	strmi	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007722:	0753      	lsls	r3, r2, #29
 8007724:	d504      	bpl.n	8007730 <HAL_UART_IRQHandler+0x4c>
 8007726:	b118      	cbz	r0, 8007730 <HAL_UART_IRQHandler+0x4c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007728:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800772a:	f043 0302 	orr.w	r3, r3, #2
 800772e:	6463      	str	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007730:	0796      	lsls	r6, r2, #30
 8007732:	d504      	bpl.n	800773e <HAL_UART_IRQHandler+0x5a>
 8007734:	b118      	cbz	r0, 800773e <HAL_UART_IRQHandler+0x5a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007736:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007738:	f043 0304 	orr.w	r3, r3, #4
 800773c:	6463      	str	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800773e:	0715      	lsls	r5, r2, #28
 8007740:	d507      	bpl.n	8007752 <HAL_UART_IRQHandler+0x6e>
 8007742:	f001 0320 	and.w	r3, r1, #32
 8007746:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007748:	bf1e      	ittt	ne
 800774a:	6c63      	ldrne	r3, [r4, #68]	@ 0x44
 800774c:	f043 0308 	orrne.w	r3, r3, #8
 8007750:	6463      	strne	r3, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007752:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007754:	2b00      	cmp	r3, #0
 8007756:	d032      	beq.n	80077be <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007758:	0692      	lsls	r2, r2, #26
 800775a:	d504      	bpl.n	8007766 <HAL_UART_IRQHandler+0x82>
 800775c:	068b      	lsls	r3, r1, #26
 800775e:	d502      	bpl.n	8007766 <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 8007760:	4620      	mov	r0, r4
 8007762:	f7ff ff63 	bl	800762c <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007766:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 8007768:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800776a:	6973      	ldr	r3, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800776c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800776e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007772:	f002 0208 	and.w	r2, r2, #8
 8007776:	ea53 0502 	orrs.w	r5, r3, r2
 800777a:	d022      	beq.n	80077c2 <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 800777c:	f7ff fe12 	bl	80073a4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007780:	6973      	ldr	r3, [r6, #20]
 8007782:	065e      	lsls	r6, r3, #25
 8007784:	d518      	bpl.n	80077b8 <HAL_UART_IRQHandler+0xd4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007786:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007788:	f102 0314 	add.w	r3, r2, #20
 800778c:	e853 3f00 	ldrex	r3, [r3]
 8007790:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007794:	3214      	adds	r2, #20
 8007796:	e842 3100 	strex	r1, r3, [r2]
 800779a:	2900      	cmp	r1, #0
 800779c:	d1f3      	bne.n	8007786 <HAL_UART_IRQHandler+0xa2>
          if (huart->hdmarx != NULL)
 800779e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80077a0:	b150      	cbz	r0, 80077b8 <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077a2:	4b74      	ldr	r3, [pc, #464]	@ (8007974 <HAL_UART_IRQHandler+0x290>)
 80077a4:	6343      	str	r3, [r0, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077a6:	f7fe f92f 	bl	8005a08 <HAL_DMA_Abort_IT>
 80077aa:	b140      	cbz	r0, 80077be <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077ac:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80077ae:	6b43      	ldr	r3, [r0, #52]	@ 0x34
}
 80077b0:	b002      	add	sp, #8
 80077b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077b6:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80077b8:	4620      	mov	r0, r4
 80077ba:	f7fd fee5 	bl	8005588 <HAL_UART_ErrorCallback>
}
 80077be:	b002      	add	sp, #8
 80077c0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80077c2:	f7fd fee1 	bl	8005588 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077c6:	6465      	str	r5, [r4, #68]	@ 0x44
 80077c8:	e7f9      	b.n	80077be <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077ca:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80077cc:	2801      	cmp	r0, #1
 80077ce:	f040 8094 	bne.w	80078fa <HAL_UART_IRQHandler+0x216>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80077d2:	06d5      	lsls	r5, r2, #27
 80077d4:	f140 8091 	bpl.w	80078fa <HAL_UART_IRQHandler+0x216>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80077d8:	06c8      	lsls	r0, r1, #27
 80077da:	f140 808e 	bpl.w	80078fa <HAL_UART_IRQHandler+0x216>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077de:	2200      	movs	r2, #0
 80077e0:	9201      	str	r2, [sp, #4]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	9201      	str	r2, [sp, #4]
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	9201      	str	r2, [sp, #4]
 80077ea:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077ec:	695a      	ldr	r2, [r3, #20]
 80077ee:	0652      	lsls	r2, r2, #25
 80077f0:	d54d      	bpl.n	800788e <HAL_UART_IRQHandler+0x1aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077f2:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80077f4:	680a      	ldr	r2, [r1, #0]
 80077f6:	6852      	ldr	r2, [r2, #4]
 80077f8:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80077fa:	2a00      	cmp	r2, #0
 80077fc:	d0df      	beq.n	80077be <HAL_UART_IRQHandler+0xda>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077fe:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
 8007800:	4290      	cmp	r0, r2
 8007802:	d9dc      	bls.n	80077be <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 8007804:	85e2      	strh	r2, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007806:	698a      	ldr	r2, [r1, #24]
 8007808:	2a20      	cmp	r2, #32
 800780a:	d036      	beq.n	800787a <HAL_UART_IRQHandler+0x196>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780c:	f103 020c 	add.w	r2, r3, #12
 8007810:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007814:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007818:	f103 000c 	add.w	r0, r3, #12
 800781c:	e840 2100 	strex	r1, r2, [r0]
 8007820:	2900      	cmp	r1, #0
 8007822:	d1f3      	bne.n	800780c <HAL_UART_IRQHandler+0x128>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007824:	f103 0214 	add.w	r2, r3, #20
 8007828:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800782c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007830:	f103 0014 	add.w	r0, r3, #20
 8007834:	e840 2100 	strex	r1, r2, [r0]
 8007838:	2900      	cmp	r1, #0
 800783a:	d1f3      	bne.n	8007824 <HAL_UART_IRQHandler+0x140>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783c:	f103 0214 	add.w	r2, r3, #20
 8007840:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007844:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007848:	f103 0014 	add.w	r0, r3, #20
 800784c:	e840 2100 	strex	r1, r2, [r0]
 8007850:	2900      	cmp	r1, #0
 8007852:	d1f3      	bne.n	800783c <HAL_UART_IRQHandler+0x158>
          huart->RxState = HAL_UART_STATE_READY;
 8007854:	2220      	movs	r2, #32
 8007856:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800785a:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785c:	f103 020c 	add.w	r2, r3, #12
 8007860:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007864:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007868:	f103 000c 	add.w	r0, r3, #12
 800786c:	e840 2100 	strex	r1, r2, [r0]
 8007870:	2900      	cmp	r1, #0
 8007872:	d1f3      	bne.n	800785c <HAL_UART_IRQHandler+0x178>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007874:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8007876:	f7fe f8a7 	bl	80059c8 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800787a:	2302      	movs	r3, #2
 800787c:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800787e:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8007880:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8007882:	1ac9      	subs	r1, r1, r3
 8007884:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007886:	4620      	mov	r0, r4
 8007888:	f7ff fe74 	bl	8007574 <HAL_UARTEx_RxEventCallback>
 800788c:	e797      	b.n	80077be <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800788e:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 8007890:	8de0      	ldrh	r0, [r4, #46]	@ 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007892:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
      if ((huart->RxXferCount > 0U)
 8007894:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007896:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8007898:	2800      	cmp	r0, #0
 800789a:	d090      	beq.n	80077be <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800789c:	1a89      	subs	r1, r1, r2
 800789e:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80078a0:	2900      	cmp	r1, #0
 80078a2:	d08c      	beq.n	80077be <HAL_UART_IRQHandler+0xda>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a4:	f103 020c 	add.w	r2, r3, #12
 80078a8:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078ac:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b0:	f103 050c 	add.w	r5, r3, #12
 80078b4:	e845 2000 	strex	r0, r2, [r5]
 80078b8:	2800      	cmp	r0, #0
 80078ba:	d1f3      	bne.n	80078a4 <HAL_UART_IRQHandler+0x1c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078bc:	f103 0214 	add.w	r2, r3, #20
 80078c0:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078c4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c8:	f103 0514 	add.w	r5, r3, #20
 80078cc:	e845 2000 	strex	r0, r2, [r5]
 80078d0:	2800      	cmp	r0, #0
 80078d2:	d1f3      	bne.n	80078bc <HAL_UART_IRQHandler+0x1d8>
        huart->RxState = HAL_UART_STATE_READY;
 80078d4:	2220      	movs	r2, #32
 80078d6:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078da:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078dc:	f103 020c 	add.w	r2, r3, #12
 80078e0:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078e4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e8:	f103 050c 	add.w	r5, r3, #12
 80078ec:	e845 2000 	strex	r0, r2, [r5]
 80078f0:	2800      	cmp	r0, #0
 80078f2:	d1f3      	bne.n	80078dc <HAL_UART_IRQHandler+0x1f8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078f4:	2302      	movs	r3, #2
 80078f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80078f8:	e7c5      	b.n	8007886 <HAL_UART_IRQHandler+0x1a2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80078fa:	0616      	lsls	r6, r2, #24
 80078fc:	d528      	bpl.n	8007950 <HAL_UART_IRQHandler+0x26c>
 80078fe:	060d      	lsls	r5, r1, #24
 8007900:	d526      	bpl.n	8007950 <HAL_UART_IRQHandler+0x26c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007902:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8007906:	2a21      	cmp	r2, #33	@ 0x21
 8007908:	f47f af59 	bne.w	80077be <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800790c:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800790e:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007910:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8007914:	d117      	bne.n	8007946 <HAL_UART_IRQHandler+0x262>
 8007916:	6921      	ldr	r1, [r4, #16]
 8007918:	b9a9      	cbnz	r1, 8007946 <HAL_UART_IRQHandler+0x262>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800791a:	f832 1b02 	ldrh.w	r1, [r2], #2
 800791e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8007922:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007924:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8007926:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8007928:	3a01      	subs	r2, #1
 800792a:	b292      	uxth	r2, r2
 800792c:	84e2      	strh	r2, [r4, #38]	@ 0x26
 800792e:	2a00      	cmp	r2, #0
 8007930:	f47f af45 	bne.w	80077be <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007934:	68da      	ldr	r2, [r3, #12]
 8007936:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800793a:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800793c:	68da      	ldr	r2, [r3, #12]
 800793e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007942:	60da      	str	r2, [r3, #12]
 8007944:	e73b      	b.n	80077be <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007946:	1c51      	adds	r1, r2, #1
 8007948:	6221      	str	r1, [r4, #32]
 800794a:	7812      	ldrb	r2, [r2, #0]
 800794c:	605a      	str	r2, [r3, #4]
 800794e:	e7ea      	b.n	8007926 <HAL_UART_IRQHandler+0x242>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007950:	0650      	lsls	r0, r2, #25
 8007952:	f57f af34 	bpl.w	80077be <HAL_UART_IRQHandler+0xda>
 8007956:	064a      	lsls	r2, r1, #25
 8007958:	f57f af31 	bpl.w	80077be <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800795c:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800795e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007960:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007964:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007966:	2320      	movs	r3, #32
 8007968:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 800796c:	f7ff fdcb 	bl	8007506 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8007970:	e725      	b.n	80077be <HAL_UART_IRQHandler+0xda>
 8007972:	bf00      	nop
 8007974:	08007565 	.word	0x08007565

08007978 <UART_Start_Receive_DMA>:
{
 8007978:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800797a:	4613      	mov	r3, r2
  huart->RxXferSize = Size;
 800797c:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800797e:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007980:	2222      	movs	r2, #34	@ 0x22
{
 8007982:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8007984:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007986:	6445      	str	r5, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007988:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800798c:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 800798e:	4a1d      	ldr	r2, [pc, #116]	@ (8007a04 <UART_Start_Receive_DMA+0x8c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007990:	6826      	ldr	r6, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007992:	6282      	str	r2, [r0, #40]	@ 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007994:	4a1c      	ldr	r2, [pc, #112]	@ (8007a08 <UART_Start_Receive_DMA+0x90>)
 8007996:	62c2      	str	r2, [r0, #44]	@ 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007998:	4a1c      	ldr	r2, [pc, #112]	@ (8007a0c <UART_Start_Receive_DMA+0x94>)
  huart->hdmarx->XferAbortCallback = NULL;
 800799a:	e9c0 250c 	strd	r2, r5, [r0, #48]	@ 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800799e:	460a      	mov	r2, r1
 80079a0:	1d31      	adds	r1, r6, #4
 80079a2:	f7fd ffd5 	bl	8005950 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 80079a6:	6823      	ldr	r3, [r4, #0]
 80079a8:	9501      	str	r5, [sp, #4]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	9201      	str	r2, [sp, #4]
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	9201      	str	r2, [sp, #4]
 80079b2:	9a01      	ldr	r2, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 80079b4:	6922      	ldr	r2, [r4, #16]
 80079b6:	b15a      	cbz	r2, 80079d0 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b8:	f103 020c 	add.w	r2, r3, #12
 80079bc:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c4:	f103 000c 	add.w	r0, r3, #12
 80079c8:	e840 2100 	strex	r1, r2, [r0]
 80079cc:	2900      	cmp	r1, #0
 80079ce:	d1f3      	bne.n	80079b8 <UART_Start_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d0:	f103 0214 	add.w	r2, r3, #20
 80079d4:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079d8:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079dc:	f103 0014 	add.w	r0, r3, #20
 80079e0:	e840 2100 	strex	r1, r2, [r0]
 80079e4:	2900      	cmp	r1, #0
 80079e6:	d1f3      	bne.n	80079d0 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e8:	f103 0214 	add.w	r2, r3, #20
 80079ec:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f4:	f103 0114 	add.w	r1, r3, #20
 80079f8:	e841 2000 	strex	r0, r2, [r1]
 80079fc:	2800      	cmp	r0, #0
 80079fe:	d1f3      	bne.n	80079e8 <UART_Start_Receive_DMA+0x70>
}
 8007a00:	b002      	add	sp, #8
 8007a02:	bd70      	pop	{r4, r5, r6, pc}
 8007a04:	08007595 	.word	0x08007595
 8007a08:	08007577 	.word	0x08007577
 8007a0c:	0800750b 	.word	0x0800750b

08007a10 <HAL_UART_Receive_DMA>:
{
 8007a10:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a12:	f890 6042 	ldrb.w	r6, [r0, #66]	@ 0x42
 8007a16:	2e20      	cmp	r6, #32
 8007a18:	d106      	bne.n	8007a28 <HAL_UART_Receive_DMA+0x18>
    if ((pData == NULL) || (Size == 0U))
 8007a1a:	b141      	cbz	r1, 8007a2e <HAL_UART_Receive_DMA+0x1e>
 8007a1c:	b13a      	cbz	r2, 8007a2e <HAL_UART_Receive_DMA+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a1e:	2400      	movs	r4, #0
 8007a20:	6304      	str	r4, [r0, #48]	@ 0x30
}
 8007a22:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007a24:	f7ff bfa8 	b.w	8007978 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 8007a28:	2002      	movs	r0, #2
}
 8007a2a:	bc70      	pop	{r4, r5, r6}
 8007a2c:	4770      	bx	lr
      return HAL_ERROR;
 8007a2e:	2001      	movs	r0, #1
 8007a30:	e7fb      	b.n	8007a2a <HAL_UART_Receive_DMA+0x1a>

08007a32 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007a32:	b084      	sub	sp, #16
 8007a34:	a804      	add	r0, sp, #16
 8007a36:	e900 000e 	stmdb	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8007a3a:	2000      	movs	r0, #0
 8007a3c:	b004      	add	sp, #16
 8007a3e:	4770      	bx	lr

08007a40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007a40:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007a42:	f44f 423f 	mov.w	r2, #48896	@ 0xbf00
  USBx->ISTR = 0U;
 8007a46:	2000      	movs	r0, #0
 8007a48:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8007a4c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 8007a50:	4770      	bx	lr

08007a52 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007a52:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8007a56:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007a5a:	045b      	lsls	r3, r3, #17
 8007a5c:	0c5b      	lsrs	r3, r3, #17
 8007a5e:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 8007a62:	2000      	movs	r0, #0
 8007a64:	4770      	bx	lr

08007a66 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8007a66:	2000      	movs	r0, #0
 8007a68:	4770      	bx	lr

08007a6a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007a6a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a6c:	4604      	mov	r4, r0
 8007a6e:	a804      	add	r0, sp, #16
 8007a70:	e900 000e 	stmdb	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007a74:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007a76:	2301      	movs	r3, #1
 8007a78:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
  USBx->CNTR = 0U;
 8007a7c:	f8a4 0040 	strh.w	r0, [r4, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007a80:	f8a4 0044 	strh.w	r0, [r4, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007a84:	f8a4 0050 	strh.w	r0, [r4, #80]	@ 0x50

  return HAL_OK;
}
 8007a88:	b004      	add	sp, #16
 8007a8a:	bd10      	pop	{r4, pc}

08007a8c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007a8e:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8007a90:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007a92:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 8007a96:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007a98:	f424 44ec 	bic.w	r4, r4, #30208	@ 0x7600
 8007a9c:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 8007aa0:	0424      	lsls	r4, r4, #16
 8007aa2:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 8007aa4:	2d03      	cmp	r5, #3
 8007aa6:	d84b      	bhi.n	8007b40 <USB_ActivateEndpoint+0xb4>
 8007aa8:	e8df f005 	tbb	[pc, r5]
 8007aac:	43454702 	.word	0x43454702
  HAL_StatusTypeDef ret = HAL_OK;
 8007ab0:	4628      	mov	r0, r5
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007ab2:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007ab6:	f248 0680 	movw	r6, #32896	@ 0x8080
 8007aba:	4334      	orrs	r4, r6
 8007abc:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007ac0:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8007ac4:	4f9e      	ldr	r7, [pc, #632]	@ (8007d40 <USB_ActivateEndpoint+0x2b4>)
 8007ac6:	b2a4      	uxth	r4, r4
 8007ac8:	403c      	ands	r4, r7
 8007aca:	4314      	orrs	r4, r2
 8007acc:	4334      	orrs	r4, r6
 8007ace:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 8007ad2:	7b0c      	ldrb	r4, [r1, #12]
 8007ad4:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 8007ad8:	2c00      	cmp	r4, #0
 8007ada:	f040 808b 	bne.w	8007bf4 <USB_ActivateEndpoint+0x168>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007ade:	88cc      	ldrh	r4, [r1, #6]
    if (ep->is_in != 0U)
 8007ae0:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007ae2:	0864      	lsrs	r4, r4, #1
 8007ae4:	0064      	lsls	r4, r4, #1
    if (ep->is_in != 0U)
 8007ae6:	b36e      	cbz	r6, 8007b44 <USB_ActivateEndpoint+0xb8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007ae8:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8007aec:	b289      	uxth	r1, r1
 8007aee:	4461      	add	r1, ip
 8007af0:	f8a1 4400 	strh.w	r4, [r1, #1024]	@ 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007af4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007af8:	0649      	lsls	r1, r1, #25
 8007afa:	d509      	bpl.n	8007b10 <USB_ActivateEndpoint+0x84>
 8007afc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007b00:	b289      	uxth	r1, r1
 8007b02:	4039      	ands	r1, r7
 8007b04:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8007b08:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8007b0c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b10:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007b14:	4c8b      	ldr	r4, [pc, #556]	@ (8007d44 <USB_ActivateEndpoint+0x2b8>)
 8007b16:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8007b18:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b1a:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8007b1e:	d001      	beq.n	8007b24 <USB_ActivateEndpoint+0x98>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b20:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007b24:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8007b28:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8007b2c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8007b30:	e04a      	b.n	8007bc8 <USB_ActivateEndpoint+0x13c>
      wEpRegVal |= USB_EP_INTERRUPT;
 8007b32:	f444 64c0 	orr.w	r4, r4, #1536	@ 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8007b36:	2000      	movs	r0, #0
      break;
 8007b38:	e7bd      	b.n	8007ab6 <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007b3a:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
      break;
 8007b3e:	e7fa      	b.n	8007b36 <USB_ActivateEndpoint+0xaa>
  switch (ep->type)
 8007b40:	2001      	movs	r0, #1
 8007b42:	e7b8      	b.n	8007ab6 <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007b44:	f8b3 5050 	ldrh.w	r5, [r3, #80]	@ 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007b48:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007b4a:	b2ad      	uxth	r5, r5
 8007b4c:	4465      	add	r5, ip
 8007b4e:	f8a5 4408 	strh.w	r4, [r5, #1032]	@ 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007b52:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8007b56:	293e      	cmp	r1, #62	@ 0x3e
 8007b58:	b2a4      	uxth	r4, r4
 8007b5a:	4464      	add	r4, ip
 8007b5c:	f8b4 540c 	ldrh.w	r5, [r4, #1036]	@ 0x40c
 8007b60:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007b64:	f8a4 540c 	strh.w	r5, [r4, #1036]	@ 0x40c
 8007b68:	d92f      	bls.n	8007bca <USB_ActivateEndpoint+0x13e>
 8007b6a:	094d      	lsrs	r5, r1, #5
 8007b6c:	06ce      	lsls	r6, r1, #27
 8007b6e:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8007b72:	bf08      	it	eq
 8007b74:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8007b78:	b289      	uxth	r1, r1
 8007b7a:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8007b7e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8007b82:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8007b86:	b289      	uxth	r1, r1
 8007b88:	f8a4 140c 	strh.w	r1, [r4, #1036]	@ 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b8c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007b90:	044f      	lsls	r7, r1, #17
 8007b92:	d50d      	bpl.n	8007bb0 <USB_ActivateEndpoint+0x124>
 8007b94:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007b98:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8007b9c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8007ba0:	0409      	lsls	r1, r1, #16
 8007ba2:	0c09      	lsrs	r1, r1, #16
 8007ba4:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8007ba8:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8007bac:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 8007bb0:	4c65      	ldr	r4, [pc, #404]	@ (8007d48 <USB_ActivateEndpoint+0x2bc>)
 8007bb2:	b9c2      	cbnz	r2, 8007be6 <USB_ActivateEndpoint+0x15a>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007bb4:	881a      	ldrh	r2, [r3, #0]
 8007bb6:	b292      	uxth	r2, r2
 8007bb8:	4022      	ands	r2, r4
 8007bba:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 8007bbe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007bc2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007bc6:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8007bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007bca:	b911      	cbnz	r1, 8007bd2 <USB_ActivateEndpoint+0x146>
 8007bcc:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8007bd0:	e7d5      	b.n	8007b7e <USB_ActivateEndpoint+0xf2>
 8007bd2:	084d      	lsrs	r5, r1, #1
 8007bd4:	07c9      	lsls	r1, r1, #31
 8007bd6:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8007bda:	bf48      	it	mi
 8007bdc:	3501      	addmi	r5, #1
 8007bde:	b289      	uxth	r1, r1
 8007be0:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8007be4:	e7cf      	b.n	8007b86 <USB_ActivateEndpoint+0xfa>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007be6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007bea:	b289      	uxth	r1, r1
 8007bec:	4021      	ands	r1, r4
 8007bee:	f481 5100 	eor.w	r1, r1, #8192	@ 0x2000
 8007bf2:	e797      	b.n	8007b24 <USB_ActivateEndpoint+0x98>
    if (ep->type == EP_TYPE_BULK)
 8007bf4:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007bf6:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 8007bfa:	d15b      	bne.n	8007cb4 <USB_ActivateEndpoint+0x228>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007bfc:	b2a4      	uxth	r4, r4
 8007bfe:	403c      	ands	r4, r7
 8007c00:	f444 4401 	orr.w	r4, r4, #33024	@ 0x8100
 8007c04:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
 8007c08:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007c0c:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8007c10:	890e      	ldrh	r6, [r1, #8]
 8007c12:	b2a4      	uxth	r4, r4
 8007c14:	0876      	lsrs	r6, r6, #1
 8007c16:	4464      	add	r4, ip
 8007c18:	0076      	lsls	r6, r6, #1
 8007c1a:	f8a4 6400 	strh.w	r6, [r4, #1024]	@ 0x400
 8007c1e:	894e      	ldrh	r6, [r1, #10]
 8007c20:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8007c24:	0876      	lsrs	r6, r6, #1
 8007c26:	b2a4      	uxth	r4, r4
 8007c28:	4464      	add	r4, ip
 8007c2a:	0076      	lsls	r6, r6, #1
 8007c2c:	f8a4 6408 	strh.w	r6, [r4, #1032]	@ 0x408
    if (ep->is_in == 0U)
 8007c30:	7849      	ldrb	r1, [r1, #1]
 8007c32:	2900      	cmp	r1, #0
 8007c34:	d148      	bne.n	8007cc8 <USB_ActivateEndpoint+0x23c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c36:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007c3a:	044e      	lsls	r6, r1, #17
 8007c3c:	d50d      	bpl.n	8007c5a <USB_ActivateEndpoint+0x1ce>
 8007c3e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007c42:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8007c46:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8007c4a:	0409      	lsls	r1, r1, #16
 8007c4c:	0c09      	lsrs	r1, r1, #16
 8007c4e:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8007c52:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8007c56:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c5a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007c5e:	064d      	lsls	r5, r1, #25
 8007c60:	d50d      	bpl.n	8007c7e <USB_ActivateEndpoint+0x1f2>
 8007c62:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007c66:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8007c6a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8007c6e:	0409      	lsls	r1, r1, #16
 8007c70:	0c09      	lsrs	r1, r1, #16
 8007c72:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8007c76:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8007c7a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c7e:	f248 0480 	movw	r4, #32896	@ 0x8080
 8007c82:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007c86:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8007c8a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8007c8e:	0409      	lsls	r1, r1, #16
 8007c90:	0c09      	lsrs	r1, r1, #16
 8007c92:	f481 5140 	eor.w	r1, r1, #12288	@ 0x3000
 8007c96:	4321      	orrs	r1, r4
 8007c98:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c9c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007ca0:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8007ca4:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8007ca8:	0409      	lsls	r1, r1, #16
 8007caa:	0c09      	lsrs	r1, r1, #16
 8007cac:	430c      	orrs	r4, r1
 8007cae:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 8007cb2:	e789      	b.n	8007bc8 <USB_ActivateEndpoint+0x13c>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007cb4:	f424 44e2 	bic.w	r4, r4, #28928	@ 0x7100
 8007cb8:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 8007cbc:	0424      	lsls	r4, r4, #16
 8007cbe:	0c24      	lsrs	r4, r4, #16
 8007cc0:	4326      	orrs	r6, r4
 8007cc2:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 8007cc6:	e7a1      	b.n	8007c0c <USB_ActivateEndpoint+0x180>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cc8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007ccc:	044c      	lsls	r4, r1, #17
 8007cce:	d50d      	bpl.n	8007cec <USB_ActivateEndpoint+0x260>
 8007cd0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007cd4:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8007cd8:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8007cdc:	0409      	lsls	r1, r1, #16
 8007cde:	0c09      	lsrs	r1, r1, #16
 8007ce0:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8007ce4:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8007ce8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007cec:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007cf0:	0649      	lsls	r1, r1, #25
 8007cf2:	d50d      	bpl.n	8007d10 <USB_ActivateEndpoint+0x284>
 8007cf4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007cf8:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8007cfc:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8007d00:	0409      	lsls	r1, r1, #16
 8007d02:	0c09      	lsrs	r1, r1, #16
 8007d04:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8007d08:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8007d0c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d10:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007d14:	4c0b      	ldr	r4, [pc, #44]	@ (8007d44 <USB_ActivateEndpoint+0x2b8>)
 8007d16:	b289      	uxth	r1, r1
 8007d18:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8007d1a:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d1c:	bf18      	it	ne
 8007d1e:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d22:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8007d26:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8007d2a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d2e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8007d32:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8007d36:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8007d3a:	0409      	lsls	r1, r1, #16
 8007d3c:	0c09      	lsrs	r1, r1, #16
 8007d3e:	e6f1      	b.n	8007b24 <USB_ActivateEndpoint+0x98>
 8007d40:	ffff8f8f 	.word	0xffff8f8f
 8007d44:	ffff8fbf 	.word	0xffff8fbf
 8007d48:	ffffbf8f 	.word	0xffffbf8f

08007d4c <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 8007d4c:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d4e:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8007d50:	7b09      	ldrb	r1, [r1, #12]
 8007d52:	bbd9      	cbnz	r1, 8007dcc <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 8007d54:	b30a      	cbz	r2, 8007d9a <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d56:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007d5a:	0651      	lsls	r1, r2, #25
 8007d5c:	d50d      	bpl.n	8007d7a <USB_DeactivateEndpoint+0x2e>
 8007d5e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007d62:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007d66:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007d6a:	0412      	lsls	r2, r2, #16
 8007d6c:	0c12      	lsrs	r2, r2, #16
 8007d6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d72:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8007d76:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d7a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007d7e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007d82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d86:	0412      	lsls	r2, r2, #16
 8007d88:	0c12      	lsrs	r2, r2, #16
 8007d8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d8e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007d92:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8007d96:	2000      	movs	r0, #0
 8007d98:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d9a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007d9e:	0452      	lsls	r2, r2, #17
 8007da0:	d50d      	bpl.n	8007dbe <USB_DeactivateEndpoint+0x72>
 8007da2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007da6:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007daa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007dae:	0412      	lsls	r2, r2, #16
 8007db0:	0c12      	lsrs	r2, r2, #16
 8007db2:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8007db6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007dba:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007dbe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007dc2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007dc6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007dca:	e7dc      	b.n	8007d86 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8007dcc:	2a00      	cmp	r2, #0
 8007dce:	d14a      	bne.n	8007e66 <USB_DeactivateEndpoint+0x11a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007dd0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007dd4:	0451      	lsls	r1, r2, #17
 8007dd6:	d50d      	bpl.n	8007df4 <USB_DeactivateEndpoint+0xa8>
 8007dd8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007ddc:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007de0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007de4:	0412      	lsls	r2, r2, #16
 8007de6:	0c12      	lsrs	r2, r2, #16
 8007de8:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8007dec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007df0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007df4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007df8:	0652      	lsls	r2, r2, #25
 8007dfa:	d50d      	bpl.n	8007e18 <USB_DeactivateEndpoint+0xcc>
 8007dfc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007e00:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007e04:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007e08:	0412      	lsls	r2, r2, #16
 8007e0a:	0c12      	lsrs	r2, r2, #16
 8007e0c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e10:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8007e14:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e18:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8007e1c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007e20:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007e24:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007e28:	0412      	lsls	r2, r2, #16
 8007e2a:	0c12      	lsrs	r2, r2, #16
 8007e2c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e30:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8007e34:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e38:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007e3c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007e40:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007e44:	0412      	lsls	r2, r2, #16
 8007e46:	0c12      	lsrs	r2, r2, #16
 8007e48:	430a      	orrs	r2, r1
 8007e4a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e4e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007e52:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007e56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e5a:	0412      	lsls	r2, r2, #16
 8007e5c:	0c12      	lsrs	r2, r2, #16
 8007e5e:	4311      	orrs	r1, r2
 8007e60:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
 8007e64:	e797      	b.n	8007d96 <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e66:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007e6a:	0451      	lsls	r1, r2, #17
 8007e6c:	d50d      	bpl.n	8007e8a <USB_DeactivateEndpoint+0x13e>
 8007e6e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007e72:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007e76:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007e7a:	0412      	lsls	r2, r2, #16
 8007e7c:	0c12      	lsrs	r2, r2, #16
 8007e7e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8007e82:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007e86:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e8a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007e8e:	0652      	lsls	r2, r2, #25
 8007e90:	d50d      	bpl.n	8007eae <USB_DeactivateEndpoint+0x162>
 8007e92:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007e96:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007e9a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007e9e:	0412      	lsls	r2, r2, #16
 8007ea0:	0c12      	lsrs	r2, r2, #16
 8007ea2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ea6:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8007eaa:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007eae:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8007eb2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007eb6:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007eba:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007ebe:	0412      	lsls	r2, r2, #16
 8007ec0:	0c12      	lsrs	r2, r2, #16
 8007ec2:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8007ec6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007eca:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ece:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007ed2:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007ed6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007eda:	0412      	lsls	r2, r2, #16
 8007edc:	0c12      	lsrs	r2, r2, #16
 8007ede:	430a      	orrs	r2, r1
 8007ee0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ee4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8007ee8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007eec:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007ef0:	e7b3      	b.n	8007e5a <USB_DeactivateEndpoint+0x10e>

08007ef2 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8007ef2:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007ef4:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8007ef6:	b18b      	cbz	r3, 8007f1c <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007ef8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007efc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f04:	041b      	lsls	r3, r3, #16
 8007f06:	0c1b      	lsrs	r3, r3, #16
 8007f08:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007f0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f14:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8007f18:	2000      	movs	r0, #0
 8007f1a:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007f1c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007f20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f28:	041b      	lsls	r3, r3, #16
 8007f2a:	0c1b      	lsrs	r3, r3, #16
 8007f2c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007f30:	e7ec      	b.n	8007f0c <USB_EPSetStall+0x1a>

08007f32 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8007f32:	7b0b      	ldrb	r3, [r1, #12]
 8007f34:	bb3b      	cbnz	r3, 8007f86 <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 8007f36:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f38:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8007f3a:	b333      	cbz	r3, 8007f8a <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f3c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007f40:	065b      	lsls	r3, r3, #25
 8007f42:	d50d      	bpl.n	8007f60 <USB_EPClearStall+0x2e>
 8007f44:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007f48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f50:	041b      	lsls	r3, r3, #16
 8007f52:	0c1b      	lsrs	r3, r3, #16
 8007f54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f58:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007f5c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8007f60:	78cb      	ldrb	r3, [r1, #3]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d00f      	beq.n	8007f86 <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007f66:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007f6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f72:	041b      	lsls	r3, r3, #16
 8007f74:	0c1b      	lsrs	r3, r3, #16
 8007f76:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f82:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8007f86:	2000      	movs	r0, #0
 8007f88:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f8a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007f8e:	045b      	lsls	r3, r3, #17
 8007f90:	d50d      	bpl.n	8007fae <USB_EPClearStall+0x7c>
 8007f92:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007f96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f9e:	041b      	lsls	r3, r3, #16
 8007fa0:	0c1b      	lsrs	r3, r3, #16
 8007fa2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007faa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007fae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007fb2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fba:	041b      	lsls	r3, r3, #16
 8007fbc:	0c1b      	lsrs	r3, r3, #16
 8007fbe:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8007fc2:	e7da      	b.n	8007f7a <USB_EPClearStall+0x48>

08007fc4 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8007fc4:	b911      	cbnz	r1, 8007fcc <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007fc6:	2380      	movs	r3, #128	@ 0x80
 8007fc8:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 8007fcc:	2000      	movs	r0, #0
 8007fce:	4770      	bx	lr

08007fd0 <USB_DevConnect>:
/**
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	4770      	bx	lr

08007fd4 <USB_DevDisconnect>:
/**
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
 8007fd4:	2000      	movs	r0, #0
 8007fd6:	4770      	bx	lr

08007fd8 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007fd8:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 8007fdc:	b280      	uxth	r0, r0
 8007fde:	4770      	bx	lr

08007fe0 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8007fe0:	2000      	movs	r0, #0
 8007fe2:	4770      	bx	lr

08007fe4 <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007fe4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007fe8:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007fea:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007fee:	085b      	lsrs	r3, r3, #1
 8007ff0:	eb00 0383 	add.w	r3, r0, r3, lsl #2

  for (count = n; count != 0U; count--)
 8007ff4:	4283      	cmp	r3, r0
 8007ff6:	d100      	bne.n	8007ffa <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8007ff8:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007ffa:	f831 2b02 	ldrh.w	r2, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 8007ffe:	f820 2b04 	strh.w	r2, [r0], #4
  for (count = n; count != 0U; count--)
 8008002:	e7f7      	b.n	8007ff4 <USB_WritePMA+0x10>

08008004 <USB_EPStartXfer>:
{
 8008004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 8008008:	784b      	ldrb	r3, [r1, #1]
{
 800800a:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 800800c:	2b01      	cmp	r3, #1
{
 800800e:	460d      	mov	r5, r1
    if (ep->doublebuffer == 0U)
 8008010:	7b0a      	ldrb	r2, [r1, #12]
  if (ep->is_in == 1U)
 8008012:	f040 8118 	bne.w	8008246 <USB_EPStartXfer+0x242>
    if (ep->xfer_len > ep->maxpacket)
 8008016:	f8d1 9010 	ldr.w	r9, [r1, #16]
 800801a:	698f      	ldr	r7, [r1, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800801c:	6949      	ldr	r1, [r1, #20]
 800801e:	454f      	cmp	r7, r9
 8008020:	bf28      	it	cs
 8008022:	464f      	movcs	r7, r9
    if (ep->doublebuffer == 0U)
 8008024:	bb0a      	cbnz	r2, 800806a <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008026:	b2bf      	uxth	r7, r7
 8008028:	88ea      	ldrh	r2, [r5, #6]
 800802a:	463b      	mov	r3, r7
 800802c:	f7ff ffda 	bl	8007fe4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008030:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8008034:	7829      	ldrb	r1, [r5, #0]
 8008036:	b280      	uxth	r0, r0
 8008038:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 800803c:	0109      	lsls	r1, r1, #4
 800803e:	4402      	add	r2, r0
 8008040:	528f      	strh	r7, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008042:	782a      	ldrb	r2, [r5, #0]
 8008044:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8008048:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800804c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008050:	041b      	lsls	r3, r3, #16
 8008052:	0c1b      	lsrs	r3, r3, #16
 8008054:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
  return HAL_OK;
 8008058:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800805a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800805e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008062:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8008066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ep->type == EP_TYPE_BULK)
 800806a:	78eb      	ldrb	r3, [r5, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800806c:	f895 e000 	ldrb.w	lr, [r5]
      if (ep->type == EP_TYPE_BULK)
 8008070:	2b02      	cmp	r3, #2
        if (ep->xfer_len_db > ep->maxpacket)
 8008072:	6a2e      	ldr	r6, [r5, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008074:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
      if (ep->type == EP_TYPE_BULK)
 8008078:	f040 80d0 	bne.w	800821c <USB_EPStartXfer+0x218>
        if (ep->xfer_len_db > ep->maxpacket)
 800807c:	45b1      	cmp	r9, r6
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800807e:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 8008082:	f080 80b4 	bcs.w	80081ee <USB_EPStartXfer+0x1ea>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008086:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800808a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800808e:	0412      	lsls	r2, r2, #16
 8008090:	0c12      	lsrs	r2, r2, #16
 8008092:	f442 4201 	orr.w	r2, r2, #33024	@ 0x8100
 8008096:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800809a:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800809e:	f830 802e 	ldrh.w	r8, [r0, lr, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80080a2:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
          ep->xfer_len_db -= len;
 80080a6:	1bf6      	subs	r6, r6, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80080a8:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
          ep->xfer_len_db -= len;
 80080ac:	622e      	str	r6, [r5, #32]
            ep->xfer_buff += len;
 80080ae:	eb01 0a07 	add.w	sl, r1, r7
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80080b2:	b2bb      	uxth	r3, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80080b4:	fa1f fe8e 	uxth.w	lr, lr
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80080b8:	d04e      	beq.n	8008158 <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80080ba:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 80080be:	4472      	add	r2, lr
 80080c0:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080c4:	896a      	ldrh	r2, [r5, #10]
 80080c6:	f7ff ff8d 	bl	8007fe4 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 80080ca:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 80080cc:	bf36      	itet	cc
 80080ce:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 80080d0:	2300      	movcs	r3, #0
 80080d2:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80080d4:	786a      	ldrb	r2, [r5, #1]
 80080d6:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 80080d8:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80080dc:	b2b3      	uxth	r3, r6
 80080de:	bb7a      	cbnz	r2, 8008140 <USB_EPStartXfer+0x13c>
 80080e0:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 80080e4:	7828      	ldrb	r0, [r5, #0]
 80080e6:	b292      	uxth	r2, r2
 80080e8:	f204 4104 	addw	r1, r4, #1028	@ 0x404
 80080ec:	0100      	lsls	r0, r0, #4
 80080ee:	4411      	add	r1, r2
 80080f0:	5a42      	ldrh	r2, [r0, r1]
 80080f2:	2e3e      	cmp	r6, #62	@ 0x3e
 80080f4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80080f8:	5242      	strh	r2, [r0, r1]
 80080fa:	d914      	bls.n	8008126 <USB_EPStartXfer+0x122>
 80080fc:	5a42      	ldrh	r2, [r0, r1]
 80080fe:	0977      	lsrs	r7, r6, #5
 8008100:	06f6      	lsls	r6, r6, #27
 8008102:	bf08      	it	eq
 8008104:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8008108:	b292      	uxth	r2, r2
 800810a:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800810e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8008112:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8008116:	b292      	uxth	r2, r2
 8008118:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800811a:	892a      	ldrh	r2, [r5, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800811c:	4651      	mov	r1, sl
 800811e:	4620      	mov	r0, r4
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008120:	f7ff ff60 	bl	8007fe4 <USB_WritePMA>
 8008124:	e78d      	b.n	8008042 <USB_EPStartXfer+0x3e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008126:	b90e      	cbnz	r6, 800812c <USB_EPStartXfer+0x128>
 8008128:	5a42      	ldrh	r2, [r0, r1]
 800812a:	e7f0      	b.n	800810e <USB_EPStartXfer+0x10a>
 800812c:	07f2      	lsls	r2, r6, #31
 800812e:	5a42      	ldrh	r2, [r0, r1]
 8008130:	ea4f 0756 	mov.w	r7, r6, lsr #1
 8008134:	bf48      	it	mi
 8008136:	3701      	addmi	r7, #1
 8008138:	b292      	uxth	r2, r2
 800813a:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800813e:	e7ea      	b.n	8008116 <USB_EPStartXfer+0x112>
 8008140:	2a01      	cmp	r2, #1
 8008142:	d1ea      	bne.n	800811a <USB_EPStartXfer+0x116>
 8008144:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8008148:	7829      	ldrb	r1, [r5, #0]
 800814a:	b280      	uxth	r0, r0
 800814c:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 8008150:	0109      	lsls	r1, r1, #4
 8008152:	4402      	add	r2, r0
 8008154:	528b      	strh	r3, [r1, r2]
 8008156:	e7e0      	b.n	800811a <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008158:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 800815c:	4472      	add	r2, lr
 800815e:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008162:	892a      	ldrh	r2, [r5, #8]
 8008164:	f7ff ff3e 	bl	8007fe4 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8008168:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 800816a:	bf36      	itet	cc
 800816c:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 800816e:	4643      	movcs	r3, r8
 8008170:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008172:	786a      	ldrb	r2, [r5, #1]
 8008174:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 8008176:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800817a:	b2b3      	uxth	r3, r6
 800817c:	bb5a      	cbnz	r2, 80081d6 <USB_EPStartXfer+0x1d2>
 800817e:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 8008182:	7828      	ldrb	r0, [r5, #0]
 8008184:	b292      	uxth	r2, r2
 8008186:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 800818a:	0100      	lsls	r0, r0, #4
 800818c:	4411      	add	r1, r2
 800818e:	5a42      	ldrh	r2, [r0, r1]
 8008190:	2e3e      	cmp	r6, #62	@ 0x3e
 8008192:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008196:	5242      	strh	r2, [r0, r1]
 8008198:	d910      	bls.n	80081bc <USB_EPStartXfer+0x1b8>
 800819a:	5a42      	ldrh	r2, [r0, r1]
 800819c:	0977      	lsrs	r7, r6, #5
 800819e:	06f6      	lsls	r6, r6, #27
 80081a0:	bf08      	it	eq
 80081a2:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80081a6:	b292      	uxth	r2, r2
 80081a8:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80081ac:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80081b0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80081b4:	b292      	uxth	r2, r2
 80081b6:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081b8:	896a      	ldrh	r2, [r5, #10]
 80081ba:	e7af      	b.n	800811c <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80081bc:	b90e      	cbnz	r6, 80081c2 <USB_EPStartXfer+0x1be>
 80081be:	5a42      	ldrh	r2, [r0, r1]
 80081c0:	e7f4      	b.n	80081ac <USB_EPStartXfer+0x1a8>
 80081c2:	07f2      	lsls	r2, r6, #31
 80081c4:	5a42      	ldrh	r2, [r0, r1]
 80081c6:	ea4f 0756 	mov.w	r7, r6, lsr #1
 80081ca:	bf48      	it	mi
 80081cc:	3701      	addmi	r7, #1
 80081ce:	b292      	uxth	r2, r2
 80081d0:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80081d4:	e7ee      	b.n	80081b4 <USB_EPStartXfer+0x1b0>
 80081d6:	2a01      	cmp	r2, #1
 80081d8:	d1ee      	bne.n	80081b8 <USB_EPStartXfer+0x1b4>
 80081da:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80081de:	7829      	ldrb	r1, [r5, #0]
 80081e0:	b280      	uxth	r0, r0
 80081e2:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 80081e6:	0109      	lsls	r1, r1, #4
 80081e8:	4402      	add	r2, r0
 80081ea:	528b      	strh	r3, [r1, r2]
 80081ec:	e7e4      	b.n	80081b8 <USB_EPStartXfer+0x1b4>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80081ee:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 80081f2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80081f6:	0412      	lsls	r2, r2, #16
 80081f8:	0c12      	lsrs	r2, r2, #16
 80081fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80081fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008202:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008206:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800820a:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 800820e:	b29b      	uxth	r3, r3
 8008210:	441a      	add	r2, r3
 8008212:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008214:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008218:	892a      	ldrh	r2, [r5, #8]
 800821a:	e781      	b.n	8008120 <USB_EPStartXfer+0x11c>
        ep->xfer_len_db -= len;
 800821c:	1bf6      	subs	r6, r6, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800821e:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        ep->xfer_len_db -= len;
 8008222:	622e      	str	r6, [r5, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008224:	f8b0 6050 	ldrh.w	r6, [r0, #80]	@ 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008228:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800822a:	0657      	lsls	r7, r2, #25
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800822c:	b2b6      	uxth	r6, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800822e:	d506      	bpl.n	800823e <USB_EPStartXfer+0x23a>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008230:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 8008234:	4432      	add	r2, r6
 8008236:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800823a:	896a      	ldrh	r2, [r5, #10]
 800823c:	e770      	b.n	8008120 <USB_EPStartXfer+0x11c>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800823e:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8008242:	4432      	add	r2, r6
 8008244:	e7e6      	b.n	8008214 <USB_EPStartXfer+0x210>
    if (ep->doublebuffer == 0U)
 8008246:	2a00      	cmp	r2, #0
 8008248:	d13b      	bne.n	80082c2 <USB_EPStartXfer+0x2be>
      if (ep->xfer_len > ep->maxpacket)
 800824a:	698b      	ldr	r3, [r1, #24]
 800824c:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800824e:	f8b0 0050 	ldrh.w	r0, [r0, #80]	@ 0x50
      if (ep->xfer_len > ep->maxpacket)
 8008252:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 8008254:	bf84      	itt	hi
 8008256:	1a5a      	subhi	r2, r3, r1
 8008258:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800825a:	7829      	ldrb	r1, [r5, #0]
 800825c:	61aa      	str	r2, [r5, #24]
 800825e:	b280      	uxth	r0, r0
 8008260:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 8008264:	0109      	lsls	r1, r1, #4
 8008266:	4402      	add	r2, r0
 8008268:	5a88      	ldrh	r0, [r1, r2]
 800826a:	2b3e      	cmp	r3, #62	@ 0x3e
 800826c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008270:	5288      	strh	r0, [r1, r2]
 8008272:	d91a      	bls.n	80082aa <USB_EPStartXfer+0x2a6>
 8008274:	0958      	lsrs	r0, r3, #5
 8008276:	06de      	lsls	r6, r3, #27
 8008278:	5a8b      	ldrh	r3, [r1, r2]
 800827a:	bf08      	it	eq
 800827c:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8008280:	b29b      	uxth	r3, r3
 8008282:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8008286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800828a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800828e:	b29b      	uxth	r3, r3
 8008290:	528b      	strh	r3, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008292:	782a      	ldrb	r2, [r5, #0]
 8008294:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8008298:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800829c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082a0:	041b      	lsls	r3, r3, #16
 80082a2:	0c1b      	lsrs	r3, r3, #16
 80082a4:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 80082a8:	e6d6      	b.n	8008058 <USB_EPStartXfer+0x54>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80082aa:	b90b      	cbnz	r3, 80082b0 <USB_EPStartXfer+0x2ac>
 80082ac:	5a8b      	ldrh	r3, [r1, r2]
 80082ae:	e7ea      	b.n	8008286 <USB_EPStartXfer+0x282>
 80082b0:	0858      	lsrs	r0, r3, #1
 80082b2:	07db      	lsls	r3, r3, #31
 80082b4:	5a8b      	ldrh	r3, [r1, r2]
 80082b6:	bf48      	it	mi
 80082b8:	3001      	addmi	r0, #1
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 80082c0:	e7e5      	b.n	800828e <USB_EPStartXfer+0x28a>
      if (ep->type == EP_TYPE_BULK)
 80082c2:	78ca      	ldrb	r2, [r1, #3]
 80082c4:	2a02      	cmp	r2, #2
 80082c6:	d170      	bne.n	80083aa <USB_EPStartXfer+0x3a6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d138      	bne.n	800833e <USB_EPStartXfer+0x33a>
 80082cc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80082d0:	780b      	ldrb	r3, [r1, #0]
 80082d2:	b292      	uxth	r2, r2
 80082d4:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 80082d8:	011b      	lsls	r3, r3, #4
 80082da:	4410      	add	r0, r2
 80082dc:	5ac2      	ldrh	r2, [r0, r3]
 80082de:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80082e2:	52c2      	strh	r2, [r0, r3]
 80082e4:	690a      	ldr	r2, [r1, #16]
 80082e6:	2a3e      	cmp	r2, #62	@ 0x3e
 80082e8:	d946      	bls.n	8008378 <USB_EPStartXfer+0x374>
 80082ea:	5ac1      	ldrh	r1, [r0, r3]
 80082ec:	0956      	lsrs	r6, r2, #5
 80082ee:	06d7      	lsls	r7, r2, #27
 80082f0:	bf08      	it	eq
 80082f2:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80082f6:	b289      	uxth	r1, r1
 80082f8:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80082fc:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8008300:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8008304:	b289      	uxth	r1, r1
 8008306:	52c1      	strh	r1, [r0, r3]
 8008308:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 800830c:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 8008310:	b280      	uxth	r0, r0
 8008312:	4401      	add	r1, r0
 8008314:	5ac8      	ldrh	r0, [r1, r3]
 8008316:	2a3e      	cmp	r2, #62	@ 0x3e
 8008318:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800831c:	52c8      	strh	r0, [r1, r3]
 800831e:	d938      	bls.n	8008392 <USB_EPStartXfer+0x38e>
 8008320:	0950      	lsrs	r0, r2, #5
 8008322:	06d7      	lsls	r7, r2, #27
 8008324:	5aca      	ldrh	r2, [r1, r3]
 8008326:	bf08      	it	eq
 8008328:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800832c:	b292      	uxth	r2, r2
 800832e:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8008332:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8008336:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800833a:	b292      	uxth	r2, r2
 800833c:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 800833e:	69eb      	ldr	r3, [r5, #28]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d0a6      	beq.n	8008292 <USB_EPStartXfer+0x28e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008344:	f244 0340 	movw	r3, #16448	@ 0x4040
 8008348:	782a      	ldrb	r2, [r5, #0]
 800834a:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800834e:	ea03 0001 	and.w	r0, r3, r1
 8008352:	438b      	bics	r3, r1
 8008354:	d001      	beq.n	800835a <USB_EPStartXfer+0x356>
 8008356:	2800      	cmp	r0, #0
 8008358:	d19b      	bne.n	8008292 <USB_EPStartXfer+0x28e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800835a:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800835e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008366:	041b      	lsls	r3, r3, #16
 8008368:	0c1b      	lsrs	r3, r3, #16
 800836a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800836e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008372:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8008376:	e78c      	b.n	8008292 <USB_EPStartXfer+0x28e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008378:	b90a      	cbnz	r2, 800837e <USB_EPStartXfer+0x37a>
 800837a:	5ac1      	ldrh	r1, [r0, r3]
 800837c:	e7be      	b.n	80082fc <USB_EPStartXfer+0x2f8>
 800837e:	07d1      	lsls	r1, r2, #31
 8008380:	5ac1      	ldrh	r1, [r0, r3]
 8008382:	ea4f 0652 	mov.w	r6, r2, lsr #1
 8008386:	bf48      	it	mi
 8008388:	3601      	addmi	r6, #1
 800838a:	b289      	uxth	r1, r1
 800838c:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8008390:	e7b8      	b.n	8008304 <USB_EPStartXfer+0x300>
 8008392:	b90a      	cbnz	r2, 8008398 <USB_EPStartXfer+0x394>
 8008394:	5aca      	ldrh	r2, [r1, r3]
 8008396:	e7cc      	b.n	8008332 <USB_EPStartXfer+0x32e>
 8008398:	0850      	lsrs	r0, r2, #1
 800839a:	07d6      	lsls	r6, r2, #31
 800839c:	5aca      	ldrh	r2, [r1, r3]
 800839e:	bf48      	it	mi
 80083a0:	3001      	addmi	r0, #1
 80083a2:	b292      	uxth	r2, r2
 80083a4:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80083a8:	e7c7      	b.n	800833a <USB_EPStartXfer+0x336>
      else if (ep->type == EP_TYPE_ISOC)
 80083aa:	2a01      	cmp	r2, #1
 80083ac:	d15d      	bne.n	800846a <USB_EPStartXfer+0x466>
        if (ep->xfer_len > ep->maxpacket)
 80083ae:	698a      	ldr	r2, [r1, #24]
 80083b0:	6909      	ldr	r1, [r1, #16]
 80083b2:	428a      	cmp	r2, r1
          ep->xfer_len = 0U;
 80083b4:	bf94      	ite	ls
 80083b6:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 80083b8:	1a50      	subhi	r0, r2, r1
 80083ba:	61a8      	str	r0, [r5, #24]
 80083bc:	bf88      	it	hi
 80083be:	460a      	movhi	r2, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f47f af66 	bne.w	8008292 <USB_EPStartXfer+0x28e>
 80083c6:	f8b4 1050 	ldrh.w	r1, [r4, #80]	@ 0x50
 80083ca:	782b      	ldrb	r3, [r5, #0]
 80083cc:	b289      	uxth	r1, r1
 80083ce:	f204 4004 	addw	r0, r4, #1028	@ 0x404
 80083d2:	011b      	lsls	r3, r3, #4
 80083d4:	4408      	add	r0, r1
 80083d6:	5ac1      	ldrh	r1, [r0, r3]
 80083d8:	2a3e      	cmp	r2, #62	@ 0x3e
 80083da:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80083de:	52c1      	strh	r1, [r0, r3]
 80083e0:	d92b      	bls.n	800843a <USB_EPStartXfer+0x436>
 80083e2:	06d1      	lsls	r1, r2, #27
 80083e4:	5ac1      	ldrh	r1, [r0, r3]
 80083e6:	ea4f 1652 	mov.w	r6, r2, lsr #5
 80083ea:	bf08      	it	eq
 80083ec:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80083f0:	b289      	uxth	r1, r1
 80083f2:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80083f6:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80083fa:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80083fe:	b289      	uxth	r1, r1
 8008400:	52c1      	strh	r1, [r0, r3]
 8008402:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8008406:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 800840a:	b280      	uxth	r0, r0
 800840c:	4401      	add	r1, r0
 800840e:	5ac8      	ldrh	r0, [r1, r3]
 8008410:	2a3e      	cmp	r2, #62	@ 0x3e
 8008412:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008416:	52c8      	strh	r0, [r1, r3]
 8008418:	d91b      	bls.n	8008452 <USB_EPStartXfer+0x44e>
 800841a:	0950      	lsrs	r0, r2, #5
 800841c:	06d6      	lsls	r6, r2, #27
 800841e:	5aca      	ldrh	r2, [r1, r3]
 8008420:	bf08      	it	eq
 8008422:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8008426:	b292      	uxth	r2, r2
 8008428:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800842c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8008430:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8008434:	b292      	uxth	r2, r2
 8008436:	52ca      	strh	r2, [r1, r3]
 8008438:	e72b      	b.n	8008292 <USB_EPStartXfer+0x28e>
 800843a:	b90a      	cbnz	r2, 8008440 <USB_EPStartXfer+0x43c>
 800843c:	5ac1      	ldrh	r1, [r0, r3]
 800843e:	e7da      	b.n	80083f6 <USB_EPStartXfer+0x3f2>
 8008440:	5ac1      	ldrh	r1, [r0, r3]
 8008442:	0856      	lsrs	r6, r2, #1
 8008444:	07d7      	lsls	r7, r2, #31
 8008446:	bf48      	it	mi
 8008448:	3601      	addmi	r6, #1
 800844a:	b289      	uxth	r1, r1
 800844c:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8008450:	e7d5      	b.n	80083fe <USB_EPStartXfer+0x3fa>
 8008452:	b90a      	cbnz	r2, 8008458 <USB_EPStartXfer+0x454>
 8008454:	5aca      	ldrh	r2, [r1, r3]
 8008456:	e7e9      	b.n	800842c <USB_EPStartXfer+0x428>
 8008458:	0850      	lsrs	r0, r2, #1
 800845a:	07d2      	lsls	r2, r2, #31
 800845c:	5aca      	ldrh	r2, [r1, r3]
 800845e:	bf48      	it	mi
 8008460:	3001      	addmi	r0, #1
 8008462:	b292      	uxth	r2, r2
 8008464:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8008468:	e7e4      	b.n	8008434 <USB_EPStartXfer+0x430>
        return HAL_ERROR;
 800846a:	2001      	movs	r0, #1
 800846c:	e5fb      	b.n	8008066 <USB_EPStartXfer+0x62>

0800846e <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800846e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
{
 8008472:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008474:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008478:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 800847a:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800847c:	4607      	mov	r7, r0
  for (count = n; count != 0U; count--)
 800847e:	462e      	mov	r6, r5
 8008480:	3402      	adds	r4, #2
 8008482:	b936      	cbnz	r6, 8008492 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008484:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 8008486:	bf44      	itt	mi
 8008488:	f830 3025 	ldrhmi.w	r3, [r0, r5, lsl #2]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800848c:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8008490:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 8008492:	f837 2b04 	ldrh.w	r2, [r7], #4
  for (count = n; count != 0U; count--)
 8008496:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 8008498:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800849a:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800849e:	0a12      	lsrs	r2, r2, #8
 80084a0:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (count = n; count != 0U; count--)
 80084a4:	e7ec      	b.n	8008480 <USB_ReadPMA+0x12>

080084a6 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80084a6:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
{
 80084aa:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80084ac:	b16b      	cbz	r3, 80084ca <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80084ae:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80084b2:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 80084b6:	28ff      	cmp	r0, #255	@ 0xff
 80084b8:	d007      	beq.n	80084ca <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	4621      	mov	r1, r4
 80084be:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 80084c2:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80084c4:	23ff      	movs	r3, #255	@ 0xff
 80084c6:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200

  }
  return USBD_OK;
}
 80084ca:	2000      	movs	r0, #0
 80084cc:	bd10      	pop	{r4, pc}
	...

080084d0 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80084d0:	2343      	movs	r3, #67	@ 0x43
 80084d2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80084d4:	4800      	ldr	r0, [pc, #0]	@ (80084d8 <USBD_CDC_GetFSCfgDesc+0x8>)
 80084d6:	4770      	bx	lr
 80084d8:	20000058 	.word	0x20000058

080084dc <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80084dc:	2343      	movs	r3, #67	@ 0x43
 80084de:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80084e0:	4800      	ldr	r0, [pc, #0]	@ (80084e4 <USBD_CDC_GetHSCfgDesc+0x8>)
 80084e2:	4770      	bx	lr
 80084e4:	2000009c 	.word	0x2000009c

080084e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80084e8:	2343      	movs	r3, #67	@ 0x43
 80084ea:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80084ec:	4800      	ldr	r0, [pc, #0]	@ (80084f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80084ee:	4770      	bx	lr
 80084f0:	20000014 	.word	0x20000014

080084f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80084f4:	230a      	movs	r3, #10
 80084f6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80084f8:	4800      	ldr	r0, [pc, #0]	@ (80084fc <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80084fa:	4770      	bx	lr
 80084fc:	20000118 	.word	0x20000118

08008500 <USBD_CDC_DataOut>:
{
 8008500:	b538      	push	{r3, r4, r5, lr}
 8008502:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008504:	f8d0 52b8 	ldr.w	r5, [r0, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008508:	f000 fef8 	bl	80092fc <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 800850c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008510:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  if (pdev->pClassData != NULL)
 8008514:	b14b      	cbz	r3, 800852a <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008516:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 800851a:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 8008524:	4798      	blx	r3
    return USBD_OK;
 8008526:	2000      	movs	r0, #0
}
 8008528:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800852a:	2002      	movs	r0, #2
 800852c:	e7fc      	b.n	8008528 <USBD_CDC_DataOut+0x28>

0800852e <USBD_CDC_DataIn>:
{
 800852e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008530:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  if (pdev->pClassData != NULL)
 8008534:	b1ce      	cbz	r6, 800856a <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008536:	2214      	movs	r2, #20
 8008538:	fb02 0201 	mla	r2, r2, r1, r0
 800853c:	69d3      	ldr	r3, [r2, #28]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800853e:	f8d0 52c0 	ldr.w	r5, [r0, #704]	@ 0x2c0
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008542:	b173      	cbz	r3, 8008562 <USBD_CDC_DataIn+0x34>
 8008544:	2728      	movs	r7, #40	@ 0x28
 8008546:	fb07 5401 	mla	r4, r7, r1, r5
 800854a:	6a24      	ldr	r4, [r4, #32]
 800854c:	fbb3 f5f4 	udiv	r5, r3, r4
 8008550:	fb04 3315 	mls	r3, r4, r5, r3
 8008554:	b92b      	cbnz	r3, 8008562 <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 8008556:	61d3      	str	r3, [r2, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008558:	461a      	mov	r2, r3
 800855a:	f000 febd 	bl	80092d8 <USBD_LL_Transmit>
    return USBD_OK;
 800855e:	2000      	movs	r0, #0
}
 8008560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8008562:	2300      	movs	r3, #0
 8008564:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
 8008568:	e7f9      	b.n	800855e <USBD_CDC_DataIn+0x30>
    return USBD_FAIL;
 800856a:	2002      	movs	r0, #2
 800856c:	e7f8      	b.n	8008560 <USBD_CDC_DataIn+0x32>

0800856e <USBD_CDC_Setup>:
  uint8_t ifalt = 0U;
 800856e:	2300      	movs	r3, #0
{
 8008570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008572:	780f      	ldrb	r7, [r1, #0]
  uint8_t ifalt = 0U;
 8008574:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 8008578:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800857c:	f017 0360 	ands.w	r3, r7, #96	@ 0x60
{
 8008580:	4604      	mov	r4, r0
 8008582:	460d      	mov	r5, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008584:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008588:	d022      	beq.n	80085d0 <USBD_CDC_Setup+0x62>
 800858a:	2b20      	cmp	r3, #32
 800858c:	d13a      	bne.n	8008604 <USBD_CDC_Setup+0x96>
      if (req->wLength)
 800858e:	88ca      	ldrh	r2, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008590:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 8008592:	b1ba      	cbz	r2, 80085c4 <USBD_CDC_Setup+0x56>
        if (req->bmRequest & 0x80U)
 8008594:	0639      	lsls	r1, r7, #24
 8008596:	d50b      	bpl.n	80085b0 <USBD_CDC_Setup+0x42>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008598:	f8d0 12bc 	ldr.w	r1, [r0, #700]	@ 0x2bc
 800859c:	4618      	mov	r0, r3
 800859e:	688f      	ldr	r7, [r1, #8]
 80085a0:	4631      	mov	r1, r6
 80085a2:	47b8      	blx	r7
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80085a4:	4631      	mov	r1, r6
 80085a6:	4620      	mov	r0, r4
 80085a8:	88ea      	ldrh	r2, [r5, #6]
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80085aa:	f000 fc11 	bl	8008dd0 <USBD_CtlSendData>
 80085ae:	e006      	b.n	80085be <USBD_CDC_Setup+0x50>
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80085b0:	4631      	mov	r1, r6
          hcdc->CmdOpCode = req->bRequest;
 80085b2:	f886 3200 	strb.w	r3, [r6, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80085b6:	f886 2201 	strb.w	r2, [r6, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80085ba:	f000 fc1e 	bl	8008dfa <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 80085be:	2000      	movs	r0, #0
}
 80085c0:	b003      	add	sp, #12
 80085c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80085c4:	f8d0 02bc 	ldr.w	r0, [r0, #700]	@ 0x2bc
 80085c8:	6884      	ldr	r4, [r0, #8]
 80085ca:	4618      	mov	r0, r3
 80085cc:	47a0      	blx	r4
 80085ce:	e7f6      	b.n	80085be <USBD_CDC_Setup+0x50>
      switch (req->bRequest)
 80085d0:	784b      	ldrb	r3, [r1, #1]
 80085d2:	2b0a      	cmp	r3, #10
 80085d4:	d00a      	beq.n	80085ec <USBD_CDC_Setup+0x7e>
 80085d6:	2b0b      	cmp	r3, #11
 80085d8:	d010      	beq.n	80085fc <USBD_CDC_Setup+0x8e>
 80085da:	b99b      	cbnz	r3, 8008604 <USBD_CDC_Setup+0x96>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085dc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80085e0:	2b03      	cmp	r3, #3
 80085e2:	d10f      	bne.n	8008604 <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80085e4:	2202      	movs	r2, #2
 80085e6:	f10d 0106 	add.w	r1, sp, #6
 80085ea:	e7de      	b.n	80085aa <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ec:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80085f0:	2b03      	cmp	r3, #3
 80085f2:	d107      	bne.n	8008604 <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80085f4:	2201      	movs	r2, #1
 80085f6:	f10d 0105 	add.w	r1, sp, #5
 80085fa:	e7d6      	b.n	80085aa <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80085fc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008600:	2b03      	cmp	r3, #3
 8008602:	d0dc      	beq.n	80085be <USBD_CDC_Setup+0x50>
          USBD_CtlError(pdev, req);
 8008604:	4620      	mov	r0, r4
 8008606:	4629      	mov	r1, r5
 8008608:	f000 fbbb 	bl	8008d82 <USBD_CtlError>
            ret = USBD_FAIL;
 800860c:	2002      	movs	r0, #2
 800860e:	e7d7      	b.n	80085c0 <USBD_CDC_Setup+0x52>

08008610 <USBD_CDC_DeInit>:
{
 8008610:	b538      	push	{r3, r4, r5, lr}
 8008612:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008614:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008616:	2181      	movs	r1, #129	@ 0x81
 8008618:	f000 fe29 	bl	800926e <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800861c:	2101      	movs	r1, #1
 800861e:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008620:	62e5      	str	r5, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008622:	f000 fe24 	bl	800926e <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008626:	2182      	movs	r1, #130	@ 0x82
 8008628:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800862a:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800862e:	f000 fe1e 	bl	800926e <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8008632:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008636:	6425      	str	r5, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 8008638:	b14b      	cbz	r3, 800864e <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800863a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008642:	f8d4 02b8 	ldr.w	r0, [r4, #696]	@ 0x2b8
 8008646:	f000 fe61 	bl	800930c <USBD_static_free>
    pdev->pClassData = NULL;
 800864a:	f8c4 52b8 	str.w	r5, [r4, #696]	@ 0x2b8
}
 800864e:	2000      	movs	r0, #0
 8008650:	bd38      	pop	{r3, r4, r5, pc}

08008652 <USBD_CDC_Init>:
{
 8008652:	b570      	push	{r4, r5, r6, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008654:	7c03      	ldrb	r3, [r0, #16]
{
 8008656:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008658:	bba3      	cbnz	r3, 80086c4 <USBD_CDC_Init+0x72>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800865a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800865e:	2181      	movs	r1, #129	@ 0x81
 8008660:	2202      	movs	r2, #2
 8008662:	f000 fdf8 	bl	8009256 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008666:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008668:	f44f 7300 	mov.w	r3, #512	@ 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800866c:	62e1      	str	r1, [r4, #44]	@ 0x2c
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800866e:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008670:	2202      	movs	r2, #2
 8008672:	4620      	mov	r0, r4
 8008674:	f000 fdef 	bl	8009256 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008678:	2308      	movs	r3, #8
 800867a:	2203      	movs	r2, #3
 800867c:	2182      	movs	r1, #130	@ 0x82
 800867e:	4620      	mov	r0, r4
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008680:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008684:	f000 fde7 	bl	8009256 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008688:	f44f 7007 	mov.w	r0, #540	@ 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800868c:	6425      	str	r5, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800868e:	f000 fe39 	bl	8009304 <USBD_static_malloc>
 8008692:	4606      	mov	r6, r0
 8008694:	f8c4 02b8 	str.w	r0, [r4, #696]	@ 0x2b8
  if (pdev->pClassData == NULL)
 8008698:	b1f8      	cbz	r0, 80086da <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800869a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4798      	blx	r3
    hcdc->TxState = 0U;
 80086a2:	2300      	movs	r3, #0
 80086a4:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
    hcdc->RxState = 0U;
 80086a8:	f8c6 3218 	str.w	r3, [r6, #536]	@ 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086ac:	7c23      	ldrb	r3, [r4, #16]
 80086ae:	b993      	cbnz	r3, 80086d6 <USBD_CDC_Init+0x84>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80086b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80086b4:	4629      	mov	r1, r5
 80086b6:	4620      	mov	r0, r4
 80086b8:	f8d6 2204 	ldr.w	r2, [r6, #516]	@ 0x204
 80086bc:	f000 fe15 	bl	80092ea <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80086c0:	2000      	movs	r0, #0
}
 80086c2:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80086c4:	2340      	movs	r3, #64	@ 0x40
 80086c6:	2181      	movs	r1, #129	@ 0x81
 80086c8:	2202      	movs	r2, #2
 80086ca:	f000 fdc4 	bl	8009256 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80086ce:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80086d0:	2340      	movs	r3, #64	@ 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80086d2:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80086d4:	e7cb      	b.n	800866e <USBD_CDC_Init+0x1c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80086d6:	2340      	movs	r3, #64	@ 0x40
 80086d8:	e7ec      	b.n	80086b4 <USBD_CDC_Init+0x62>
    ret = 1U;
 80086da:	4628      	mov	r0, r5
 80086dc:	e7f1      	b.n	80086c2 <USBD_CDC_Init+0x70>

080086de <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 80086de:	b119      	cbz	r1, 80086e8 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 80086e0:	f8c0 12bc 	str.w	r1, [r0, #700]	@ 0x2bc
    ret = USBD_OK;
 80086e4:	2000      	movs	r0, #0
 80086e6:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80086e8:	2002      	movs	r0, #2
  }

  return ret;
}
 80086ea:	4770      	bx	lr

080086ec <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80086ec:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 80086f0:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80086f2:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80086f6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
}
 80086fa:	4770      	bx	lr

080086fc <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80086fc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  return USBD_OK;
}
 8008700:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8008702:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204
}
 8008706:	4770      	bx	lr

08008708 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008708:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 800870c:	b508      	push	{r3, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800870e:	b162      	cbz	r2, 800872a <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008710:	7c03      	ldrb	r3, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008712:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008716:	b933      	cbnz	r3, 8008726 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 8008718:	f44f 7300 	mov.w	r3, #512	@ 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800871c:	2101      	movs	r1, #1
 800871e:	f000 fde4 	bl	80092ea <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008722:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8008724:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 8008726:	2340      	movs	r3, #64	@ 0x40
 8008728:	e7f8      	b.n	800871c <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 800872a:	2002      	movs	r0, #2
 800872c:	e7fa      	b.n	8008724 <USBD_CDC_ReceivePacket+0x1c>

0800872e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800872e:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008730:	b180      	cbz	r0, 8008754 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008732:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008736:	b113      	cbz	r3, 800873e <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8008738:	2300      	movs	r3, #0
 800873a:	f8c0 32b4 	str.w	r3, [r0, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800873e:	b109      	cbz	r1, 8008744 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8008740:	f8c0 12b0 	str.w	r1, [r0, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008744:	2301      	movs	r3, #1
  pdev->id = id;
 8008746:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008748:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800874c:	f000 fd3a 	bl	80091c4 <USBD_LL_Init>

  return USBD_OK;
 8008750:	2000      	movs	r0, #0
}
 8008752:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8008754:	2002      	movs	r0, #2
 8008756:	e7fc      	b.n	8008752 <USBD_Init+0x24>

08008758 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8008758:	b119      	cbz	r1, 8008762 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800875a:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
    status = USBD_OK;
 800875e:	2000      	movs	r0, #0
 8008760:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008762:	2002      	movs	r0, #2
  }

  return status;
}
 8008764:	4770      	bx	lr

08008766 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008766:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008768:	f000 fd6c 	bl	8009244 <USBD_LL_Start>

  return USBD_OK;
}
 800876c:	2000      	movs	r0, #0
 800876e:	bd08      	pop	{r3, pc}

08008770 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008770:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8008772:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008776:	b133      	cbz	r3, 8008786 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4798      	blx	r3
 800877c:	3800      	subs	r0, #0
 800877e:	bf18      	it	ne
 8008780:	2001      	movne	r0, #1
 8008782:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 8008784:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008786:	2002      	movs	r0, #2
 8008788:	e7fc      	b.n	8008784 <USBD_SetClassConfig+0x14>

0800878a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800878a:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800878c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	4798      	blx	r3

  return USBD_OK;
}
 8008794:	2000      	movs	r0, #0
 8008796:	bd08      	pop	{r3, pc}

08008798 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008798:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800879a:	f500 752a 	add.w	r5, r0, #680	@ 0x2a8
{
 800879e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80087a0:	4628      	mov	r0, r5
 80087a2:	f000 fae3 	bl	8008d6c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80087a6:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80087a8:	f894 12a8 	ldrb.w	r1, [r4, #680]	@ 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 80087ac:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 80087b0:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	@ 0x2ae
 80087b4:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 80087b8:	f001 031f 	and.w	r3, r1, #31
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d008      	beq.n	80087d2 <USBD_LL_SetupStage+0x3a>
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d00b      	beq.n	80087dc <USBD_LL_SetupStage+0x44>
 80087c4:	b97b      	cbnz	r3, 80087e6 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80087c6:	4629      	mov	r1, r5
 80087c8:	4620      	mov	r0, r4
 80087ca:	f000 f8fb 	bl	80089c4 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 80087ce:	2000      	movs	r0, #0
 80087d0:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80087d2:	4629      	mov	r1, r5
 80087d4:	4620      	mov	r0, r4
 80087d6:	f000 fa1d 	bl	8008c14 <USBD_StdItfReq>
      break;
 80087da:	e7f8      	b.n	80087ce <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 80087dc:	4629      	mov	r1, r5
 80087de:	4620      	mov	r0, r4
 80087e0:	f000 fa3c 	bl	8008c5c <USBD_StdEPReq>
      break;
 80087e4:	e7f3      	b.n	80087ce <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80087e6:	4620      	mov	r0, r4
 80087e8:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80087ec:	f000 fd48 	bl	8009280 <USBD_LL_StallEP>
      break;
 80087f0:	e7ed      	b.n	80087ce <USBD_LL_SetupStage+0x36>

080087f2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80087f2:	b570      	push	{r4, r5, r6, lr}
 80087f4:	4604      	mov	r4, r0
 80087f6:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80087f8:	bb39      	cbnz	r1, 800884a <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80087fa:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 80087fe:	2a03      	cmp	r2, #3
 8008800:	d11c      	bne.n	800883c <USBD_LL_DataOutStage+0x4a>
    {
      if (pep->rem_length > pep->maxpacket)
 8008802:	e9d0 5258 	ldrd	r5, r2, [r0, #352]	@ 0x160
 8008806:	4295      	cmp	r5, r2
 8008808:	d90b      	bls.n	8008822 <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -= pep->maxpacket;
 800880a:	1aad      	subs	r5, r5, r2

        USBD_CtlContinueRx(pdev, pdata,
 800880c:	42aa      	cmp	r2, r5
 800880e:	4631      	mov	r1, r6
        pep->rem_length -= pep->maxpacket;
 8008810:	f8c0 5160 	str.w	r5, [r0, #352]	@ 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8008814:	bf8c      	ite	hi
 8008816:	b2aa      	uxthhi	r2, r5
 8008818:	b292      	uxthls	r2, r2
 800881a:	f000 fafb 	bl	8008e14 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800881e:	2000      	movs	r0, #0
}
 8008820:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008822:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	b123      	cbz	r3, 8008834 <USBD_LL_DataOutStage+0x42>
 800882a:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800882e:	2a03      	cmp	r2, #3
 8008830:	d100      	bne.n	8008834 <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev);
 8008832:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8008834:	4620      	mov	r0, r4
 8008836:	f000 faf5 	bl	8008e24 <USBD_CtlSendStatus>
 800883a:	e7f0      	b.n	800881e <USBD_LL_DataOutStage+0x2c>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800883c:	2a05      	cmp	r2, #5
 800883e:	d1ee      	bne.n	800881e <USBD_LL_DataOutStage+0x2c>
        pdev->ep0_state = USBD_EP0_IDLE;
 8008840:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008844:	f000 fd1c 	bl	8009280 <USBD_LL_StallEP>
 8008848:	e7e9      	b.n	800881e <USBD_LL_DataOutStage+0x2c>
  else if ((pdev->pClass->DataOut != NULL) &&
 800884a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800884e:	699b      	ldr	r3, [r3, #24]
 8008850:	b12b      	cbz	r3, 800885e <USBD_LL_DataOutStage+0x6c>
 8008852:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8008856:	2a03      	cmp	r2, #3
 8008858:	d101      	bne.n	800885e <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 800885a:	4798      	blx	r3
 800885c:	e7df      	b.n	800881e <USBD_LL_DataOutStage+0x2c>
    return USBD_FAIL;
 800885e:	2002      	movs	r0, #2
 8008860:	e7de      	b.n	8008820 <USBD_LL_DataOutStage+0x2e>

08008862 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008864:	4604      	mov	r4, r0
 8008866:	4613      	mov	r3, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008868:	460f      	mov	r7, r1
 800886a:	2900      	cmp	r1, #0
 800886c:	d149      	bne.n	8008902 <USBD_LL_DataInStage+0xa0>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800886e:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8008872:	2a02      	cmp	r2, #2
 8008874:	d13a      	bne.n	80088ec <USBD_LL_DataInStage+0x8a>
    {
      if (pep->rem_length > pep->maxpacket)
 8008876:	e9d0 5608 	ldrd	r5, r6, [r0, #32]
 800887a:	42b5      	cmp	r5, r6
 800887c:	d911      	bls.n	80088a2 <USBD_LL_DataInStage+0x40>
      {
        pep->rem_length -= pep->maxpacket;
 800887e:	1bad      	subs	r5, r5, r6

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008880:	4619      	mov	r1, r3
        pep->rem_length -= pep->maxpacket;
 8008882:	6205      	str	r5, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008884:	b2aa      	uxth	r2, r5
 8008886:	f000 fab0 	bl	8008dea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800888a:	463b      	mov	r3, r7
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800888c:	461a      	mov	r2, r3
 800888e:	4619      	mov	r1, r3
 8008890:	4620      	mov	r0, r4
 8008892:	f000 fd2a 	bl	80092ea <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008896:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 800889a:	2b01      	cmp	r3, #1
 800889c:	d02d      	beq.n	80088fa <USBD_LL_DataInStage+0x98>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800889e:	2000      	movs	r0, #0
}
 80088a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80088a2:	69c3      	ldr	r3, [r0, #28]
 80088a4:	fbb3 f5f6 	udiv	r5, r3, r6
 80088a8:	fb06 3515 	mls	r5, r6, r5, r3
 80088ac:	b965      	cbnz	r5, 80088c8 <USBD_LL_DataInStage+0x66>
 80088ae:	429e      	cmp	r6, r3
 80088b0:	d80a      	bhi.n	80088c8 <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 80088b2:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d206      	bcs.n	80088c8 <USBD_LL_DataInStage+0x66>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80088ba:	462a      	mov	r2, r5
 80088bc:	f000 fa95 	bl	8008dea <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088c0:	462b      	mov	r3, r5
          pdev->ep0_data_len = 0U;
 80088c2:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088c6:	e7e1      	b.n	800888c <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80088c8:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	b12b      	cbz	r3, 80088dc <USBD_LL_DataInStage+0x7a>
 80088d0:	f894 229c 	ldrb.w	r2, [r4, #668]	@ 0x29c
 80088d4:	2a03      	cmp	r2, #3
 80088d6:	d101      	bne.n	80088dc <USBD_LL_DataInStage+0x7a>
            pdev->pClass->EP0_TxSent(pdev);
 80088d8:	4620      	mov	r0, r4
 80088da:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80088dc:	2180      	movs	r1, #128	@ 0x80
 80088de:	4620      	mov	r0, r4
 80088e0:	f000 fcce 	bl	8009280 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80088e4:	4620      	mov	r0, r4
 80088e6:	f000 faa8 	bl	8008e3a <USBD_CtlReceiveStatus>
 80088ea:	e7d4      	b.n	8008896 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80088ec:	f032 0304 	bics.w	r3, r2, #4
 80088f0:	d1d1      	bne.n	8008896 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80088f2:	2180      	movs	r1, #128	@ 0x80
 80088f4:	f000 fcc4 	bl	8009280 <USBD_LL_StallEP>
 80088f8:	e7cd      	b.n	8008896 <USBD_LL_DataInStage+0x34>
      pdev->dev_test_mode = 0U;
 80088fa:	2300      	movs	r3, #0
 80088fc:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
 8008900:	e7cd      	b.n	800889e <USBD_LL_DataInStage+0x3c>
  else if ((pdev->pClass->DataIn != NULL) &&
 8008902:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008906:	695b      	ldr	r3, [r3, #20]
 8008908:	b12b      	cbz	r3, 8008916 <USBD_LL_DataInStage+0xb4>
 800890a:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800890e:	2a03      	cmp	r2, #3
 8008910:	d101      	bne.n	8008916 <USBD_LL_DataInStage+0xb4>
    pdev->pClass->DataIn(pdev, epnum);
 8008912:	4798      	blx	r3
 8008914:	e7c3      	b.n	800889e <USBD_LL_DataInStage+0x3c>
    return USBD_FAIL;
 8008916:	2002      	movs	r0, #2
 8008918:	e7c2      	b.n	80088a0 <USBD_LL_DataInStage+0x3e>

0800891a <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800891a:	2200      	movs	r2, #0
{
 800891c:	b570      	push	{r4, r5, r6, lr}
 800891e:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008920:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008922:	2640      	movs	r6, #64	@ 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008924:	4611      	mov	r1, r2
 8008926:	2340      	movs	r3, #64	@ 0x40
 8008928:	f000 fc95 	bl	8009256 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800892c:	4633      	mov	r3, r6
 800892e:	2180      	movs	r1, #128	@ 0x80
 8008930:	2200      	movs	r2, #0
 8008932:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008934:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008938:	f8c4 6164 	str.w	r6, [r4, #356]	@ 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800893c:	f000 fc8b 	bl	8009256 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8008940:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8008942:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008946:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008948:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800894a:	f884 529c 	strb.w	r5, [r4, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800894e:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008952:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8008954:	f8c4 12a4 	str.w	r1, [r4, #676]	@ 0x2a4
  if (pdev->pClassData)
 8008958:	b123      	cbz	r3, 8008964 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800895a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 800895e:	4620      	mov	r0, r4
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	4798      	blx	r3
  }

  return USBD_OK;
}
 8008964:	2000      	movs	r0, #0
 8008966:	bd70      	pop	{r4, r5, r6, pc}

08008968 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8008968:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800896a:	2000      	movs	r0, #0
 800896c:	4770      	bx	lr

0800896e <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800896e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008972:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008976:	2304      	movs	r3, #4
 8008978:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 800897c:	2000      	movs	r0, #0
 800897e:	4770      	bx	lr

08008980 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008980:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008984:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8008986:	bf04      	itt	eq
 8008988:	f890 329d 	ldrbeq.w	r3, [r0, #669]	@ 0x29d
 800898c:	f880 329c 	strbeq.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 8008990:	2000      	movs	r0, #0
 8008992:	4770      	bx	lr

08008994 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008994:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008996:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800899a:	2a03      	cmp	r2, #3
 800899c:	d104      	bne.n	80089a8 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 800899e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80089a2:	69db      	ldr	r3, [r3, #28]
 80089a4:	b103      	cbz	r3, 80089a8 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80089a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 80089a8:	2000      	movs	r0, #0
 80089aa:	bd08      	pop	{r3, pc}

080089ac <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80089ac:	b510      	push	{r4, lr}
 80089ae:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80089b0:	2180      	movs	r1, #128	@ 0x80
 80089b2:	f000 fc65 	bl	8009280 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80089b6:	4620      	mov	r0, r4
}
 80089b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80089bc:	2100      	movs	r1, #0
 80089be:	f000 bc5f 	b.w	8009280 <USBD_LL_StallEP>
	...

080089c4 <USBD_StdDevReq>:
{
 80089c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089c6:	780b      	ldrb	r3, [r1, #0]
 80089c8:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80089ce:	2b20      	cmp	r3, #32
{
 80089d0:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089d2:	d012      	beq.n	80089fa <USBD_StdDevReq+0x36>
 80089d4:	2b40      	cmp	r3, #64	@ 0x40
 80089d6:	d010      	beq.n	80089fa <USBD_StdDevReq+0x36>
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d151      	bne.n	8008a80 <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 80089dc:	784b      	ldrb	r3, [r1, #1]
 80089de:	2b09      	cmp	r3, #9
 80089e0:	d84e      	bhi.n	8008a80 <USBD_StdDevReq+0xbc>
 80089e2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80089e6:	00ee      	.short	0x00ee
 80089e8:	004d0109 	.word	0x004d0109
 80089ec:	004d0102 	.word	0x004d0102
 80089f0:	00130087 	.word	0x00130087
 80089f4:	00d6004d 	.word	0x00d6004d
 80089f8:	00a3      	.short	0x00a3
      pdev->pClass->Setup(pdev, req);
 80089fa:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 80089fe:	4629      	mov	r1, r5
 8008a00:	4620      	mov	r0, r4
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	4798      	blx	r3
}
 8008a06:	2000      	movs	r0, #0
 8008a08:	b003      	add	sp, #12
 8008a0a:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8008a12:	884b      	ldrh	r3, [r1, #2]
 8008a14:	0a1a      	lsrs	r2, r3, #8
 8008a16:	3a01      	subs	r2, #1
 8008a18:	2a06      	cmp	r2, #6
 8008a1a:	d831      	bhi.n	8008a80 <USBD_StdDevReq+0xbc>
 8008a1c:	e8df f002 	tbb	[pc, r2]
 8008a20:	30231604 	.word	0x30231604
 8008a24:	4830      	.short	0x4830
 8008a26:	52          	.byte	0x52
 8008a27:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008a28:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8008a2c:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a2e:	7c20      	ldrb	r0, [r4, #16]
 8008a30:	f10d 0106 	add.w	r1, sp, #6
 8008a34:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8008a36:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008a3a:	88eb      	ldrh	r3, [r5, #6]
 8008a3c:	2a00      	cmp	r2, #0
 8008a3e:	d055      	beq.n	8008aec <USBD_StdDevReq+0x128>
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d14a      	bne.n	8008ada <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 8008a44:	4620      	mov	r0, r4
 8008a46:	f000 f9ed 	bl	8008e24 <USBD_CtlSendStatus>
 8008a4a:	e7dc      	b.n	8008a06 <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a4c:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 8008a4e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a52:	b932      	cbnz	r2, 8008a62 <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008a56:	f10d 0006 	add.w	r0, sp, #6
 8008a5a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a5c:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a5e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8008a60:	e7e9      	b.n	8008a36 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a64:	e7f7      	b.n	8008a56 <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b05      	cmp	r3, #5
 8008a6a:	d809      	bhi.n	8008a80 <USBD_StdDevReq+0xbc>
 8008a6c:	e8df f003 	tbb	[pc, r3]
 8008a70:	14100c03 	.word	0x14100c03
 8008a74:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008a76:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8008a7a:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1d6      	bne.n	8008a2e <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 8008a80:	4620      	mov	r0, r4
 8008a82:	f7ff ff93 	bl	80089ac <USBD_CtlError.constprop.0>
        break;
 8008a86:	e7be      	b.n	8008a06 <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a88:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	e7f5      	b.n	8008a7c <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a90:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	e7f1      	b.n	8008a7c <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a98:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	e7ed      	b.n	8008a7c <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008aa0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8008aa4:	695b      	ldr	r3, [r3, #20]
 8008aa6:	e7e9      	b.n	8008a7c <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008aa8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	e7e5      	b.n	8008a7c <USBD_StdDevReq+0xb8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ab0:	7c03      	ldrb	r3, [r0, #16]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1e4      	bne.n	8008a80 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008ab6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008aba:	f10d 0006 	add.w	r0, sp, #6
 8008abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ac0:	4798      	blx	r3
  if (err != 0U)
 8008ac2:	e7b8      	b.n	8008a36 <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ac4:	7c03      	ldrb	r3, [r0, #16]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1da      	bne.n	8008a80 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008aca:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8008ace:	f10d 0006 	add.w	r0, sp, #6
 8008ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ad4:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ad6:	2307      	movs	r3, #7
 8008ad8:	e7c1      	b.n	8008a5e <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 8008ada:	429a      	cmp	r2, r3
 8008adc:	bf28      	it	cs
 8008ade:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ae0:	4601      	mov	r1, r0
 8008ae2:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8008ae4:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ae8:	f000 f972 	bl	8008dd0 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8008aec:	88eb      	ldrh	r3, [r5, #6]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d189      	bne.n	8008a06 <USBD_StdDevReq+0x42>
 8008af2:	e7a7      	b.n	8008a44 <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008af4:	888b      	ldrh	r3, [r1, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1c2      	bne.n	8008a80 <USBD_StdDevReq+0xbc>
 8008afa:	88cb      	ldrh	r3, [r1, #6]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d1bf      	bne.n	8008a80 <USBD_StdDevReq+0xbc>
 8008b00:	884d      	ldrh	r5, [r1, #2]
 8008b02:	2d7f      	cmp	r5, #127	@ 0x7f
 8008b04:	d8bc      	bhi.n	8008a80 <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b06:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008b0a:	2b03      	cmp	r3, #3
 8008b0c:	d0b8      	beq.n	8008a80 <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b0e:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8008b10:	f880 129e 	strb.w	r1, [r0, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b14:	f000 fbd7 	bl	80092c6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f000 f983 	bl	8008e24 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8008b1e:	b11d      	cbz	r5, 8008b28 <USBD_StdDevReq+0x164>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b20:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b22:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8008b26:	e76e      	b.n	8008a06 <USBD_StdDevReq+0x42>
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e7fa      	b.n	8008b22 <USBD_StdDevReq+0x15e>
  cfgidx = (uint8_t)(req->wValue);
 8008b2c:	7889      	ldrb	r1, [r1, #2]
 8008b2e:	4d38      	ldr	r5, [pc, #224]	@ (8008c10 <USBD_StdDevReq+0x24c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b30:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8008b32:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b34:	d8a4      	bhi.n	8008a80 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 8008b36:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d008      	beq.n	8008b50 <USBD_StdDevReq+0x18c>
 8008b3e:	2b03      	cmp	r3, #3
 8008b40:	d015      	beq.n	8008b6e <USBD_StdDevReq+0x1aa>
        USBD_CtlError(pdev, req);
 8008b42:	f7ff ff33 	bl	80089ac <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008b46:	4620      	mov	r0, r4
 8008b48:	7829      	ldrb	r1, [r5, #0]
 8008b4a:	f7ff fe1e 	bl	800878a <USBD_ClrClassConfig>
        break;
 8008b4e:	e75a      	b.n	8008a06 <USBD_StdDevReq+0x42>
        if (cfgidx)
 8008b50:	2900      	cmp	r1, #0
 8008b52:	f43f af77 	beq.w	8008a44 <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 8008b56:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b58:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8008b5a:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b5c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008b60:	4620      	mov	r0, r4
 8008b62:	f7ff fe05 	bl	8008770 <USBD_SetClassConfig>
 8008b66:	2802      	cmp	r0, #2
 8008b68:	f47f af6c 	bne.w	8008a44 <USBD_StdDevReq+0x80>
 8008b6c:	e788      	b.n	8008a80 <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 8008b6e:	b931      	cbnz	r1, 8008b7e <USBD_StdDevReq+0x1ba>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b70:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8008b72:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b74:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8008b78:	f7ff fe07 	bl	800878a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008b7c:	e762      	b.n	8008a44 <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 8008b7e:	6841      	ldr	r1, [r0, #4]
 8008b80:	2901      	cmp	r1, #1
 8008b82:	f43f af5f 	beq.w	8008a44 <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b86:	b2c9      	uxtb	r1, r1
 8008b88:	f7ff fdff 	bl	800878a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008b8c:	7829      	ldrb	r1, [r5, #0]
 8008b8e:	6061      	str	r1, [r4, #4]
 8008b90:	e7e6      	b.n	8008b60 <USBD_StdDevReq+0x19c>
  if (req->wLength != 1U)
 8008b92:	88ca      	ldrh	r2, [r1, #6]
 8008b94:	2a01      	cmp	r2, #1
 8008b96:	f47f af73 	bne.w	8008a80 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 8008b9a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	d80a      	bhi.n	8008bb8 <USBD_StdDevReq+0x1f4>
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	f43f af6c 	beq.w	8008a80 <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 8008ba8:	4601      	mov	r1, r0
 8008baa:	2300      	movs	r3, #0
 8008bac:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f000 f90d 	bl	8008dd0 <USBD_CtlSendData>
      break;
 8008bb6:	e726      	b.n	8008a06 <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 8008bb8:	2b03      	cmp	r3, #3
 8008bba:	f47f af61 	bne.w	8008a80 <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008bbe:	1d01      	adds	r1, r0, #4
 8008bc0:	e7f6      	b.n	8008bb0 <USBD_StdDevReq+0x1ec>
  switch (pdev->dev_state)
 8008bc2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	f63f af59 	bhi.w	8008a80 <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 8008bce:	88ca      	ldrh	r2, [r1, #6]
 8008bd0:	2a02      	cmp	r2, #2
 8008bd2:	f47f af55 	bne.w	8008a80 <USBD_StdDevReq+0xbc>
      if (pdev->dev_remote_wakeup)
 8008bd6:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8008bda:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	bf0c      	ite	eq
 8008be0:	2301      	moveq	r3, #1
 8008be2:	2303      	movne	r3, #3
 8008be4:	f841 3f0c 	str.w	r3, [r1, #12]!
 8008be8:	e7e2      	b.n	8008bb0 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008bea:	884b      	ldrh	r3, [r1, #2]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	f47f af0a 	bne.w	8008a06 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8008bf2:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
 8008bf6:	e725      	b.n	8008a44 <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 8008bf8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	f63f af3e 	bhi.w	8008a80 <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c04:	884b      	ldrh	r3, [r1, #2]
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	f47f aefd 	bne.w	8008a06 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	e7f0      	b.n	8008bf2 <USBD_StdDevReq+0x22e>
 8008c10:	20000574 	.word	0x20000574

08008c14 <USBD_StdItfReq>:
{
 8008c14:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c16:	780b      	ldrb	r3, [r1, #0]
{
 8008c18:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c1a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8008c1e:	065b      	lsls	r3, r3, #25
{
 8008c20:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c22:	d501      	bpl.n	8008c28 <USBD_StdItfReq+0x14>
 8008c24:	2a40      	cmp	r2, #64	@ 0x40
 8008c26:	d115      	bne.n	8008c54 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8008c28:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d810      	bhi.n	8008c54 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008c32:	792b      	ldrb	r3, [r5, #4]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d80d      	bhi.n	8008c54 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c38:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8008c3c:	4629      	mov	r1, r5
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	4620      	mov	r0, r4
 8008c42:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c44:	88eb      	ldrh	r3, [r5, #6]
 8008c46:	b91b      	cbnz	r3, 8008c50 <USBD_StdItfReq+0x3c>
 8008c48:	b910      	cbnz	r0, 8008c50 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	f000 f8ea 	bl	8008e24 <USBD_CtlSendStatus>
}
 8008c50:	2000      	movs	r0, #0
 8008c52:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8008c54:	4620      	mov	r0, r4
 8008c56:	f7ff fea9 	bl	80089ac <USBD_CtlError.constprop.0>
          break;
 8008c5a:	e7f9      	b.n	8008c50 <USBD_StdItfReq+0x3c>

08008c5c <USBD_StdEPReq>:
{
 8008c5c:	b538      	push	{r3, r4, r5, lr}
 8008c5e:	780a      	ldrb	r2, [r1, #0]
 8008c60:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 8008c62:	f002 0260 	and.w	r2, r2, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c66:	2a20      	cmp	r2, #32
{
 8008c68:	460b      	mov	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 8008c6a:	888d      	ldrh	r5, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c6c:	d026      	beq.n	8008cbc <USBD_StdEPReq+0x60>
 8008c6e:	2a40      	cmp	r2, #64	@ 0x40
 8008c70:	d024      	beq.n	8008cbc <USBD_StdEPReq+0x60>
 8008c72:	bb8a      	cbnz	r2, 8008cd8 <USBD_StdEPReq+0x7c>
      switch (req->bRequest)
 8008c74:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8008c76:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 8008c78:	2a01      	cmp	r2, #1
 8008c7a:	d03d      	beq.n	8008cf8 <USBD_StdEPReq+0x9c>
 8008c7c:	2a03      	cmp	r2, #3
 8008c7e:	d025      	beq.n	8008ccc <USBD_StdEPReq+0x70>
 8008c80:	bb52      	cbnz	r2, 8008cd8 <USBD_StdEPReq+0x7c>
          switch (pdev->dev_state)
 8008c82:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d04d      	beq.n	8008d26 <USBD_StdEPReq+0xca>
 8008c8a:	2b03      	cmp	r3, #3
 8008c8c:	d124      	bne.n	8008cd8 <USBD_StdEPReq+0x7c>
              if ((ep_addr & 0x80U) == 0x80U)
 8008c8e:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c90:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8008c94:	f015 0f80 	tst.w	r5, #128	@ 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c98:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8008c9c:	d053      	beq.n	8008d46 <USBD_StdEPReq+0xea>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	b1d3      	cbz	r3, 8008cd8 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ca2:	2514      	movs	r5, #20
 8008ca4:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 8008ca8:	fb03 5505 	mla	r5, r3, r5, r5
 8008cac:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008cae:	064b      	lsls	r3, r1, #25
 8008cb0:	d155      	bne.n	8008d5e <USBD_StdEPReq+0x102>
{
 8008cb2:	2300      	movs	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008cb4:	2202      	movs	r2, #2
 8008cb6:	4629      	mov	r1, r5
                pep->status = 0x0000U;
 8008cb8:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008cba:	e040      	b.n	8008d3e <USBD_StdEPReq+0xe2>
      pdev->pClass->Setup(pdev, req);
 8008cbc:	f8d4 22b4 	ldr.w	r2, [r4, #692]	@ 0x2b4
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	6892      	ldr	r2, [r2, #8]
 8008cc6:	4790      	blx	r2
}
 8008cc8:	2000      	movs	r0, #0
 8008cca:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 8008ccc:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8008cd0:	2a02      	cmp	r2, #2
 8008cd2:	d01f      	beq.n	8008d14 <USBD_StdEPReq+0xb8>
 8008cd4:	2a03      	cmp	r2, #3
 8008cd6:	d003      	beq.n	8008ce0 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 8008cd8:	4620      	mov	r0, r4
 8008cda:	f7ff fe67 	bl	80089ac <USBD_CtlError.constprop.0>
              break;
 8008cde:	e7f3      	b.n	8008cc8 <USBD_StdEPReq+0x6c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ce0:	885a      	ldrh	r2, [r3, #2]
 8008ce2:	b92a      	cbnz	r2, 8008cf0 <USBD_StdEPReq+0x94>
                if ((ep_addr != 0x00U) &&
 8008ce4:	064a      	lsls	r2, r1, #25
 8008ce6:	d003      	beq.n	8008cf0 <USBD_StdEPReq+0x94>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008ce8:	88db      	ldrh	r3, [r3, #6]
 8008cea:	b90b      	cbnz	r3, 8008cf0 <USBD_StdEPReq+0x94>
                  USBD_LL_StallEP(pdev, ep_addr);
 8008cec:	f000 fac8 	bl	8009280 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	f000 f897 	bl	8008e24 <USBD_CtlSendStatus>
              break;
 8008cf6:	e7e7      	b.n	8008cc8 <USBD_StdEPReq+0x6c>
          switch (pdev->dev_state)
 8008cf8:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8008cfc:	2a02      	cmp	r2, #2
 8008cfe:	d009      	beq.n	8008d14 <USBD_StdEPReq+0xb8>
 8008d00:	2a03      	cmp	r2, #3
 8008d02:	d1e9      	bne.n	8008cd8 <USBD_StdEPReq+0x7c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d04:	885b      	ldrh	r3, [r3, #2]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1de      	bne.n	8008cc8 <USBD_StdEPReq+0x6c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8008d0a:	064d      	lsls	r5, r1, #25
 8008d0c:	d0f0      	beq.n	8008cf0 <USBD_StdEPReq+0x94>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d0e:	f000 fac0 	bl	8009292 <USBD_LL_ClearStallEP>
 8008d12:	e7ed      	b.n	8008cf0 <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d14:	064b      	lsls	r3, r1, #25
 8008d16:	d0df      	beq.n	8008cd8 <USBD_StdEPReq+0x7c>
                USBD_LL_StallEP(pdev, ep_addr);
 8008d18:	f000 fab2 	bl	8009280 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008d1c:	2180      	movs	r1, #128	@ 0x80
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f000 faae 	bl	8009280 <USBD_LL_StallEP>
 8008d24:	e7d0      	b.n	8008cc8 <USBD_StdEPReq+0x6c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d26:	0649      	lsls	r1, r1, #25
 8008d28:	d1d6      	bne.n	8008cd8 <USBD_StdEPReq+0x7c>
              pep->status = 0x0000U;
 8008d2a:	2300      	movs	r3, #0
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d2c:	062a      	lsls	r2, r5, #24
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008d2e:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d32:	bf4c      	ite	mi
 8008d34:	f100 0114 	addmi.w	r1, r0, #20
 8008d38:	f500 71aa 	addpl.w	r1, r0, #340	@ 0x154
              pep->status = 0x0000U;
 8008d3c:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008d3e:	4620      	mov	r0, r4
 8008d40:	f000 f846 	bl	8008dd0 <USBD_CtlSendData>
              break;
 8008d44:	e7c0      	b.n	8008cc8 <USBD_StdEPReq+0x6c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d46:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d0c4      	beq.n	8008cd8 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d4e:	2314      	movs	r3, #20
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d50:	f001 057f 	and.w	r5, r1, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d54:	fb03 0505 	mla	r5, r3, r5, r0
 8008d58:	f505 75aa 	add.w	r5, r5, #340	@ 0x154
 8008d5c:	e7a7      	b.n	8008cae <USBD_StdEPReq+0x52>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008d5e:	4620      	mov	r0, r4
 8008d60:	f000 faa0 	bl	80092a4 <USBD_LL_IsStallEP>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	d0a4      	beq.n	8008cb2 <USBD_StdEPReq+0x56>
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e7a3      	b.n	8008cb4 <USBD_StdEPReq+0x58>

08008d6c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8008d6c:	780b      	ldrb	r3, [r1, #0]
 8008d6e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008d70:	784b      	ldrb	r3, [r1, #1]
 8008d72:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008d74:	884b      	ldrh	r3, [r1, #2]
 8008d76:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008d78:	888b      	ldrh	r3, [r1, #4]
 8008d7a:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008d7c:	88cb      	ldrh	r3, [r1, #6]
 8008d7e:	80c3      	strh	r3, [r0, #6]
}
 8008d80:	4770      	bx	lr

08008d82 <USBD_CtlError>:
{
 8008d82:	b510      	push	{r4, lr}
 8008d84:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8008d86:	2180      	movs	r1, #128	@ 0x80
 8008d88:	f000 fa7a 	bl	8009280 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008d8c:	4620      	mov	r0, r4
}
 8008d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8008d92:	2100      	movs	r1, #0
 8008d94:	f000 ba74 	b.w	8009280 <USBD_LL_StallEP>

08008d98 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d98:	b570      	push	{r4, r5, r6, lr}
 8008d9a:	460d      	mov	r5, r1
 8008d9c:	4616      	mov	r6, r2
  uint8_t idx = 0U;

  if (desc != NULL)
 8008d9e:	4604      	mov	r4, r0
 8008da0:	b170      	cbz	r0, 8008dc0 <USBD_GetString+0x28>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8008da2:	f7fc f9d3 	bl	800514c <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008da6:	b2c3      	uxtb	r3, r0
 8008da8:	3301      	adds	r3, #1
 8008daa:	005b      	lsls	r3, r3, #1
 8008dac:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008dae:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008db0:	2303      	movs	r3, #3
      unicode[idx++] =  0U;
 8008db2:	2000      	movs	r0, #0
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008db4:	706b      	strb	r3, [r5, #1]
 8008db6:	2302      	movs	r3, #2
 8008db8:	3c01      	subs	r4, #1
    while (*desc != '\0')
 8008dba:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8008dbe:	b901      	cbnz	r1, 8008dc2 <USBD_GetString+0x2a>
}
 8008dc0:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 8008dc2:	1c5a      	adds	r2, r3, #1
 8008dc4:	54e9      	strb	r1, [r5, r3]
 8008dc6:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8008dc8:	3302      	adds	r3, #2
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	54a8      	strb	r0, [r5, r2]
 8008dce:	e7f4      	b.n	8008dba <USBD_GetString+0x22>

08008dd0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008dd0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008dd2:	2202      	movs	r2, #2
{
 8008dd4:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8008dd6:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008dda:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008dde:	460a      	mov	r2, r1
 8008de0:	2100      	movs	r1, #0
 8008de2:	f000 fa79 	bl	80092d8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008de6:	2000      	movs	r0, #0
 8008de8:	bd10      	pop	{r4, pc}

08008dea <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008dea:	b508      	push	{r3, lr}
 8008dec:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008dee:	460a      	mov	r2, r1
 8008df0:	2100      	movs	r1, #0
 8008df2:	f000 fa71 	bl	80092d8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008df6:	2000      	movs	r0, #0
 8008df8:	bd08      	pop	{r3, pc}

08008dfa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008dfa:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008dfc:	2203      	movs	r2, #3
{
 8008dfe:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8008e00:	e9c0 3357 	strd	r3, r3, [r0, #348]	@ 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008e04:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e08:	460a      	mov	r2, r1
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	f000 fa6d 	bl	80092ea <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008e10:	2000      	movs	r0, #0
 8008e12:	bd10      	pop	{r4, pc}

08008e14 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008e14:	b508      	push	{r3, lr}
 8008e16:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e18:	460a      	mov	r2, r1
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	f000 fa65 	bl	80092ea <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008e20:	2000      	movs	r0, #0
 8008e22:	bd08      	pop	{r3, pc}

08008e24 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e24:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e26:	2304      	movs	r3, #4
 8008e28:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	461a      	mov	r2, r3
 8008e30:	4619      	mov	r1, r3
 8008e32:	f000 fa51 	bl	80092d8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008e36:	2000      	movs	r0, #0
 8008e38:	bd08      	pop	{r3, pc}

08008e3a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e3a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e3c:	2305      	movs	r3, #5
 8008e3e:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e42:	2300      	movs	r3, #0
 8008e44:	461a      	mov	r2, r3
 8008e46:	4619      	mov	r1, r3
 8008e48:	f000 fa4f 	bl	80092ea <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	bd08      	pop	{r3, pc}

08008e50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008e50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008e52:	2200      	movs	r2, #0
 8008e54:	490e      	ldr	r1, [pc, #56]	@ (8008e90 <MX_USB_DEVICE_Init+0x40>)
 8008e56:	480f      	ldr	r0, [pc, #60]	@ (8008e94 <MX_USB_DEVICE_Init+0x44>)
 8008e58:	f7ff fc69 	bl	800872e <USBD_Init>
 8008e5c:	b108      	cbz	r0, 8008e62 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8008e5e:	f7fc fa1f 	bl	80052a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008e62:	490d      	ldr	r1, [pc, #52]	@ (8008e98 <MX_USB_DEVICE_Init+0x48>)
 8008e64:	480b      	ldr	r0, [pc, #44]	@ (8008e94 <MX_USB_DEVICE_Init+0x44>)
 8008e66:	f7ff fc77 	bl	8008758 <USBD_RegisterClass>
 8008e6a:	b108      	cbz	r0, 8008e70 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8008e6c:	f7fc fa18 	bl	80052a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008e70:	490a      	ldr	r1, [pc, #40]	@ (8008e9c <MX_USB_DEVICE_Init+0x4c>)
 8008e72:	4808      	ldr	r0, [pc, #32]	@ (8008e94 <MX_USB_DEVICE_Init+0x44>)
 8008e74:	f7ff fc33 	bl	80086de <USBD_CDC_RegisterInterface>
 8008e78:	b108      	cbz	r0, 8008e7e <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8008e7a:	f7fc fa11 	bl	80052a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008e7e:	4805      	ldr	r0, [pc, #20]	@ (8008e94 <MX_USB_DEVICE_Init+0x44>)
 8008e80:	f7ff fc71 	bl	8008766 <USBD_Start>
 8008e84:	b118      	cbz	r0, 8008e8e <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008e86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8008e8a:	f7fc ba09 	b.w	80052a0 <Error_Handler>
}
 8008e8e:	bd08      	pop	{r3, pc}
 8008e90:	20000174 	.word	0x20000174
 8008e94:	20000578 	.word	0x20000578
 8008e98:	200000e0 	.word	0x200000e0
 8008e9c:	20000124 	.word	0x20000124

08008ea0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
    /* USER CODE BEGIN 4 */
    return (USBD_OK);
    /* USER CODE END 4 */
}
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	4770      	bx	lr

08008ea4 <CDC_Control_FS>:
 * USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
    /* USER CODE BEGIN 5 */
    switch (cmd)
 8008ea4:	2820      	cmp	r0, #32
 8008ea6:	d003      	beq.n	8008eb0 <CDC_Control_FS+0xc>
 8008ea8:	2821      	cmp	r0, #33	@ 0x21
 8008eaa:	d017      	beq.n	8008edc <CDC_Control_FS+0x38>
        break;
    }

    return (USBD_OK);
    /* USER CODE END 5 */
}
 8008eac:	2000      	movs	r0, #0
 8008eae:	4770      	bx	lr
        LineCoding.bitrate = (uint32_t)(pbuf[0]);
 8008eb0:	780b      	ldrb	r3, [r1, #0]
 8008eb2:	4a13      	ldr	r2, [pc, #76]	@ (8008f00 <CDC_Control_FS+0x5c>)
 8008eb4:	6013      	str	r3, [r2, #0]
        LineCoding.bitrate |= (uint32_t)(pbuf[1] << 8);
 8008eb6:	7848      	ldrb	r0, [r1, #1]
 8008eb8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8008ebc:	6013      	str	r3, [r2, #0]
        LineCoding.bitrate |= (uint32_t)(pbuf[2] << 16);
 8008ebe:	7888      	ldrb	r0, [r1, #2]
 8008ec0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008ec4:	6013      	str	r3, [r2, #0]
        LineCoding.bitrate |= (uint32_t)(pbuf[3] << 24);
 8008ec6:	78c8      	ldrb	r0, [r1, #3]
 8008ec8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8008ecc:	6013      	str	r3, [r2, #0]
        LineCoding.format     = pbuf[4];
 8008ece:	790b      	ldrb	r3, [r1, #4]
 8008ed0:	7113      	strb	r3, [r2, #4]
        LineCoding.paritytype = pbuf[5];
 8008ed2:	794b      	ldrb	r3, [r1, #5]
 8008ed4:	7153      	strb	r3, [r2, #5]
        LineCoding.datatype   = pbuf[6];
 8008ed6:	798b      	ldrb	r3, [r1, #6]
 8008ed8:	7193      	strb	r3, [r2, #6]
        break;
 8008eda:	e7e7      	b.n	8008eac <CDC_Control_FS+0x8>
        pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8008edc:	4b08      	ldr	r3, [pc, #32]	@ (8008f00 <CDC_Control_FS+0x5c>)
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	700a      	strb	r2, [r1, #0]
        pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	0a12      	lsrs	r2, r2, #8
 8008ee6:	704a      	strb	r2, [r1, #1]
        pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8008ee8:	885a      	ldrh	r2, [r3, #2]
 8008eea:	708a      	strb	r2, [r1, #2]
        pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8008eec:	78da      	ldrb	r2, [r3, #3]
 8008eee:	70ca      	strb	r2, [r1, #3]
        pbuf[4] = LineCoding.format;
 8008ef0:	791a      	ldrb	r2, [r3, #4]
 8008ef2:	710a      	strb	r2, [r1, #4]
        pbuf[5] = LineCoding.paritytype;
 8008ef4:	795a      	ldrb	r2, [r3, #5]
 8008ef6:	714a      	strb	r2, [r1, #5]
        pbuf[6] = LineCoding.datatype;
 8008ef8:	799b      	ldrb	r3, [r3, #6]
 8008efa:	718b      	strb	r3, [r1, #6]
        break;
 8008efc:	e7d6      	b.n	8008eac <CDC_Control_FS+0x8>
 8008efe:	bf00      	nop
 8008f00:	20000138 	.word	0x20000138

08008f04 <CDC_Init_FS>:
{
 8008f04:	b510      	push	{r4, lr}
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008f06:	4c06      	ldr	r4, [pc, #24]	@ (8008f20 <CDC_Init_FS+0x1c>)
 8008f08:	2200      	movs	r2, #0
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	4905      	ldr	r1, [pc, #20]	@ (8008f24 <CDC_Init_FS+0x20>)
 8008f0e:	f7ff fbed 	bl	80086ec <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008f12:	4620      	mov	r0, r4
 8008f14:	4904      	ldr	r1, [pc, #16]	@ (8008f28 <CDC_Init_FS+0x24>)
 8008f16:	f7ff fbf1 	bl	80086fc <USBD_CDC_SetRxBuffer>
}
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	bd10      	pop	{r4, pc}
 8008f1e:	bf00      	nop
 8008f20:	20000578 	.word	0x20000578
 8008f24:	2000083c 	.word	0x2000083c
 8008f28:	20000a3c 	.word	0x20000a3c

08008f2c <cdcAvailable>:
    ret = (rx_in - rx_out) % rx_len;
 8008f2c:	4b05      	ldr	r3, [pc, #20]	@ (8008f44 <cdcAvailable+0x18>)
 8008f2e:	4a06      	ldr	r2, [pc, #24]	@ (8008f48 <cdcAvailable+0x1c>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	6812      	ldr	r2, [r2, #0]
 8008f34:	1a9b      	subs	r3, r3, r2
 8008f36:	4a05      	ldr	r2, [pc, #20]	@ (8008f4c <cdcAvailable+0x20>)
 8008f38:	6812      	ldr	r2, [r2, #0]
 8008f3a:	fbb3 f0f2 	udiv	r0, r3, r2
}
 8008f3e:	fb02 3010 	mls	r0, r2, r0, r3
 8008f42:	4770      	bx	lr
 8008f44:	20000e44 	.word	0x20000e44
 8008f48:	20000e40 	.word	0x20000e40
 8008f4c:	20000134 	.word	0x20000134

08008f50 <cdcDataIn>:
    rx_buf[rx_in] = rx_data;
 8008f50:	4a08      	ldr	r2, [pc, #32]	@ (8008f74 <cdcDataIn+0x24>)
 8008f52:	4909      	ldr	r1, [pc, #36]	@ (8008f78 <cdcDataIn+0x28>)
 8008f54:	6813      	ldr	r3, [r2, #0]
 8008f56:	54c8      	strb	r0, [r1, r3]
    next_rx_in = (rx_in + 1) % rx_len;
 8008f58:	4908      	ldr	r1, [pc, #32]	@ (8008f7c <cdcDataIn+0x2c>)
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	6809      	ldr	r1, [r1, #0]
 8008f5e:	fbb3 f0f1 	udiv	r0, r3, r1
 8008f62:	fb01 3310 	mls	r3, r1, r0, r3
    if (next_rx_in != rx_out)
 8008f66:	4906      	ldr	r1, [pc, #24]	@ (8008f80 <cdcDataIn+0x30>)
 8008f68:	6809      	ldr	r1, [r1, #0]
 8008f6a:	4299      	cmp	r1, r3
        rx_in = next_rx_in;
 8008f6c:	bf18      	it	ne
 8008f6e:	6013      	strne	r3, [r2, #0]
}
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	20000e44 	.word	0x20000e44
 8008f78:	20000c3d 	.word	0x20000c3d
 8008f7c:	20000134 	.word	0x20000134
 8008f80:	20000e40 	.word	0x20000e40

08008f84 <CDC_Receive_FS>:
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len)
{
 8008f84:	b570      	push	{r4, r5, r6, lr}
 8008f86:	4605      	mov	r5, r0
 8008f88:	460e      	mov	r6, r1
    /* USER CODE BEGIN 6 */

    for (int i = 0; i < *Len; i++)
 8008f8a:	2400      	movs	r4, #0
 8008f8c:	6833      	ldr	r3, [r6, #0]
 8008f8e:	42a3      	cmp	r3, r4
 8008f90:	d810      	bhi.n	8008fb4 <CDC_Receive_FS+0x30>
    }

    uint32_t buf_len;

    // 수신 버퍼에서 비어있는 데이터 양
    buf_len = (rx_len - cdcAvailable()) - 1;
 8008f92:	4b0d      	ldr	r3, [pc, #52]	@ (8008fc8 <CDC_Receive_FS+0x44>)
 8008f94:	681c      	ldr	r4, [r3, #0]
 8008f96:	f7ff ffc9 	bl	8008f2c <cdcAvailable>
 8008f9a:	3c01      	subs	r4, #1
 8008f9c:	1a24      	subs	r4, r4, r0

    if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 8008f9e:	2c3f      	cmp	r4, #63	@ 0x3f
 8008fa0:	d90d      	bls.n	8008fbe <CDC_Receive_FS+0x3a>
    {
        // 다음 데이터도 전송
        USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008fa2:	4629      	mov	r1, r5
 8008fa4:	4809      	ldr	r0, [pc, #36]	@ (8008fcc <CDC_Receive_FS+0x48>)
 8008fa6:	f7ff fba9 	bl	80086fc <USBD_CDC_SetRxBuffer>
        USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008faa:	4808      	ldr	r0, [pc, #32]	@ (8008fcc <CDC_Receive_FS+0x48>)
 8008fac:	f7ff fbac 	bl	8008708 <USBD_CDC_ReceivePacket>
        rx_full = true;
    }

    return (USBD_OK);
    /* USER CODE END 6 */
}
 8008fb0:	2000      	movs	r0, #0
 8008fb2:	bd70      	pop	{r4, r5, r6, pc}
        cdcDataIn(Buf[i]);
 8008fb4:	5d28      	ldrb	r0, [r5, r4]
 8008fb6:	f7ff ffcb 	bl	8008f50 <cdcDataIn>
    for (int i = 0; i < *Len; i++)
 8008fba:	3401      	adds	r4, #1
 8008fbc:	e7e6      	b.n	8008f8c <CDC_Receive_FS+0x8>
        rx_full = true;
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	4b03      	ldr	r3, [pc, #12]	@ (8008fd0 <CDC_Receive_FS+0x4c>)
 8008fc2:	701a      	strb	r2, [r3, #0]
 8008fc4:	e7f4      	b.n	8008fb0 <CDC_Receive_FS+0x2c>
 8008fc6:	bf00      	nop
 8008fc8:	20000134 	.word	0x20000134
 8008fcc:	20000578 	.word	0x20000578
 8008fd0:	20000c3c 	.word	0x20000c3c

08008fd4 <USBD_CDC_SOF>:
{
 8008fd4:	b538      	push	{r3, r4, r5, lr}
    if (rx_full == true)
 8008fd6:	4d09      	ldr	r5, [pc, #36]	@ (8008ffc <USBD_CDC_SOF+0x28>)
{
 8008fd8:	4604      	mov	r4, r0
    if (rx_full == true)
 8008fda:	782b      	ldrb	r3, [r5, #0]
 8008fdc:	b163      	cbz	r3, 8008ff8 <USBD_CDC_SOF+0x24>
        buf_len = (rx_len - cdcAvailable()) - 1;
 8008fde:	4b08      	ldr	r3, [pc, #32]	@ (8009000 <USBD_CDC_SOF+0x2c>)
 8008fe0:	6819      	ldr	r1, [r3, #0]
 8008fe2:	f7ff ffa3 	bl	8008f2c <cdcAvailable>
 8008fe6:	3901      	subs	r1, #1
 8008fe8:	1a09      	subs	r1, r1, r0
        if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 8008fea:	293f      	cmp	r1, #63	@ 0x3f
 8008fec:	d904      	bls.n	8008ff8 <USBD_CDC_SOF+0x24>
            USBD_CDC_ReceivePacket(pdev);
 8008fee:	4620      	mov	r0, r4
 8008ff0:	f7ff fb8a 	bl	8008708 <USBD_CDC_ReceivePacket>
            rx_full = false;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	702b      	strb	r3, [r5, #0]
}
 8008ff8:	2000      	movs	r0, #0
 8008ffa:	bd38      	pop	{r3, r4, r5, pc}
 8008ffc:	20000c3c 	.word	0x20000c3c
 8009000:	20000134 	.word	0x20000134

08009004 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009004:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8009006:	4801      	ldr	r0, [pc, #4]	@ (800900c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8009008:	800b      	strh	r3, [r1, #0]
}
 800900a:	4770      	bx	lr
 800900c:	20000160 	.word	0x20000160

08009010 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009010:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8009012:	4801      	ldr	r0, [pc, #4]	@ (8009018 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8009014:	800b      	strh	r3, [r1, #0]
}
 8009016:	4770      	bx	lr
 8009018:	2000015c 	.word	0x2000015c

0800901c <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800901c:	2300      	movs	r3, #0
{
 800901e:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8009020:	461e      	mov	r6, r3
 8009022:	1c4d      	adds	r5, r1, #1
  for (idx = 0; idx < len; idx++)
 8009024:	b2dc      	uxtb	r4, r3
 8009026:	42a2      	cmp	r2, r4
 8009028:	d800      	bhi.n	800902c <IntToUnicode+0x10>
  }
}
 800902a:	bd70      	pop	{r4, r5, r6, pc}
      pbuf[2 * idx] = (value >> 28) + '0';
 800902c:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 800902e:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8009032:	bf34      	ite	cc
 8009034:	3430      	addcc	r4, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009036:	3437      	addcs	r4, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8009038:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    value = value << 4;
 800903c:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 800903e:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 8009042:	3301      	adds	r3, #1
 8009044:	e7ee      	b.n	8009024 <IntToUnicode+0x8>
	...

08009048 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8009048:	231a      	movs	r3, #26
{
 800904a:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800904c:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800904e:	4b0a      	ldr	r3, [pc, #40]	@ (8009078 <USBD_FS_SerialStrDescriptor+0x30>)
 8009050:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	@ 0x7e8
  deviceserial0 += deviceserial2;
 8009054:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	@ 0x7f0
  if (deviceserial0 != 0)
 8009058:	1880      	adds	r0, r0, r2
 800905a:	d00a      	beq.n	8009072 <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800905c:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	@ 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009060:	4906      	ldr	r1, [pc, #24]	@ (800907c <USBD_FS_SerialStrDescriptor+0x34>)
 8009062:	2208      	movs	r2, #8
 8009064:	f7ff ffda 	bl	800901c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009068:	2204      	movs	r2, #4
 800906a:	4620      	mov	r0, r4
 800906c:	3110      	adds	r1, #16
 800906e:	f7ff ffd5 	bl	800901c <IntToUnicode>
}
 8009072:	4803      	ldr	r0, [pc, #12]	@ (8009080 <USBD_FS_SerialStrDescriptor+0x38>)
 8009074:	bd10      	pop	{r4, pc}
 8009076:	bf00      	nop
 8009078:	1ffff000 	.word	0x1ffff000
 800907c:	20000142 	.word	0x20000142
 8009080:	20000140 	.word	0x20000140

08009084 <USBD_FS_ManufacturerStrDescriptor>:
{
 8009084:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009086:	4c04      	ldr	r4, [pc, #16]	@ (8009098 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8009088:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800908a:	4804      	ldr	r0, [pc, #16]	@ (800909c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800908c:	4621      	mov	r1, r4
 800908e:	f7ff fe83 	bl	8008d98 <USBD_GetString>
}
 8009092:	4620      	mov	r0, r4
 8009094:	bd10      	pop	{r4, pc}
 8009096:	bf00      	nop
 8009098:	20000e48 	.word	0x20000e48
 800909c:	080093d0 	.word	0x080093d0

080090a0 <USBD_FS_ProductStrDescriptor>:
{
 80090a0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090a2:	4c04      	ldr	r4, [pc, #16]	@ (80090b4 <USBD_FS_ProductStrDescriptor+0x14>)
{
 80090a4:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090a6:	4804      	ldr	r0, [pc, #16]	@ (80090b8 <USBD_FS_ProductStrDescriptor+0x18>)
 80090a8:	4621      	mov	r1, r4
 80090aa:	f7ff fe75 	bl	8008d98 <USBD_GetString>
}
 80090ae:	4620      	mov	r0, r4
 80090b0:	bd10      	pop	{r4, pc}
 80090b2:	bf00      	nop
 80090b4:	20000e48 	.word	0x20000e48
 80090b8:	080093e3 	.word	0x080093e3

080090bc <USBD_FS_ConfigStrDescriptor>:
{
 80090bc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090be:	4c04      	ldr	r4, [pc, #16]	@ (80090d0 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 80090c0:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090c2:	4804      	ldr	r0, [pc, #16]	@ (80090d4 <USBD_FS_ConfigStrDescriptor+0x18>)
 80090c4:	4621      	mov	r1, r4
 80090c6:	f7ff fe67 	bl	8008d98 <USBD_GetString>
}
 80090ca:	4620      	mov	r0, r4
 80090cc:	bd10      	pop	{r4, pc}
 80090ce:	bf00      	nop
 80090d0:	20000e48 	.word	0x20000e48
 80090d4:	080093f9 	.word	0x080093f9

080090d8 <USBD_FS_InterfaceStrDescriptor>:
{
 80090d8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090da:	4c04      	ldr	r4, [pc, #16]	@ (80090ec <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 80090dc:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090de:	4804      	ldr	r0, [pc, #16]	@ (80090f0 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80090e0:	4621      	mov	r1, r4
 80090e2:	f7ff fe59 	bl	8008d98 <USBD_GetString>
}
 80090e6:	4620      	mov	r0, r4
 80090e8:	bd10      	pop	{r4, pc}
 80090ea:	bf00      	nop
 80090ec:	20000e48 	.word	0x20000e48
 80090f0:	08009404 	.word	0x08009404

080090f4 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80090f4:	b118      	cbz	r0, 80090fe <USBD_Get_USB_Status+0xa>
 80090f6:	2802      	cmp	r0, #2
 80090f8:	bf0c      	ite	eq
 80090fa:	2001      	moveq	r0, #1
 80090fc:	2002      	movne	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80090fe:	4770      	bx	lr

08009100 <HAL_PCD_MspInit>:
{
 8009100:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8009102:	4b0e      	ldr	r3, [pc, #56]	@ (800913c <HAL_PCD_MspInit+0x3c>)
 8009104:	6802      	ldr	r2, [r0, #0]
 8009106:	429a      	cmp	r2, r3
 8009108:	d115      	bne.n	8009136 <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 800910a:	f503 33da 	add.w	r3, r3, #111616	@ 0x1b400
 800910e:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009110:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8009112:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8009116:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009118:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800911a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800911c:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800911e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009122:	9301      	str	r3, [sp, #4]
 8009124:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009126:	f7fc fb53 	bl	80057d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800912a:	2014      	movs	r0, #20
}
 800912c:	b003      	add	sp, #12
 800912e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009132:	f7fc bb7d 	b.w	8005830 <HAL_NVIC_EnableIRQ>
}
 8009136:	b003      	add	sp, #12
 8009138:	f85d fb04 	ldr.w	pc, [sp], #4
 800913c:	40005c00 	.word	0x40005c00

08009140 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009140:	f500 7126 	add.w	r1, r0, #664	@ 0x298
 8009144:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8009148:	f7ff bb26 	b.w	8008798 <USBD_LL_SetupStage>

0800914c <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800914c:	2328      	movs	r3, #40	@ 0x28
 800914e:	fb03 0301 	mla	r3, r3, r1, r0
 8009152:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8009156:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 800915a:	f7ff bb4a 	b.w	80087f2 <USBD_LL_DataOutStage>

0800915e <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800915e:	2328      	movs	r3, #40	@ 0x28
 8009160:	fb03 0301 	mla	r3, r3, r1, r0
 8009164:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8009168:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800916a:	f7ff bb7a 	b.w	8008862 <USBD_LL_DataInStage>

0800916e <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800916e:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8009172:	f7ff bc0f 	b.w	8008994 <USBD_LL_SOF>

08009176 <HAL_PCD_ResetCallback>:
{
 8009176:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009178:	7983      	ldrb	r3, [r0, #6]
{
 800917a:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800917c:	2b02      	cmp	r3, #2
 800917e:	d001      	beq.n	8009184 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8009180:	f7fc f88e 	bl	80052a0 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009184:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
 8009188:	2101      	movs	r1, #1
 800918a:	f7ff fbed 	bl	8008968 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800918e:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
}
 8009192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009196:	f7ff bbc0 	b.w	800891a <USBD_LL_Reset>
	...

0800919c <HAL_PCD_SuspendCallback>:
{
 800919c:	b510      	push	{r4, lr}
 800919e:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80091a0:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80091a4:	f7ff fbe3 	bl	800896e <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 80091a8:	7aa3      	ldrb	r3, [r4, #10]
 80091aa:	b123      	cbz	r3, 80091b6 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80091ac:	4a02      	ldr	r2, [pc, #8]	@ (80091b8 <HAL_PCD_SuspendCallback+0x1c>)
 80091ae:	6913      	ldr	r3, [r2, #16]
 80091b0:	f043 0306 	orr.w	r3, r3, #6
 80091b4:	6113      	str	r3, [r2, #16]
}
 80091b6:	bd10      	pop	{r4, pc}
 80091b8:	e000ed00 	.word	0xe000ed00

080091bc <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80091bc:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80091c0:	f7ff bbde 	b.w	8008980 <USBD_LL_Resume>

080091c4 <USBD_LL_Init>:
{
 80091c4:	b510      	push	{r4, lr}
  hpcd_USB_FS.Instance = USB;
 80091c6:	4b1d      	ldr	r3, [pc, #116]	@ (800923c <USBD_LL_Init+0x78>)
{
 80091c8:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 80091ca:	481d      	ldr	r0, [pc, #116]	@ (8009240 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Instance = USB;
 80091cc:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80091ce:	2308      	movs	r3, #8
 80091d0:	7103      	strb	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80091d2:	2302      	movs	r3, #2
 80091d4:	7183      	strb	r3, [r0, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80091d6:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 80091d8:	f8c0 42d4 	str.w	r4, [r0, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80091dc:	f8c4 02c0 	str.w	r0, [r4, #704]	@ 0x2c0
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80091e0:	8143      	strh	r3, [r0, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80091e2:	7303      	strb	r3, [r0, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80091e4:	f7fc fe3e 	bl	8005e64 <HAL_PCD_Init>
 80091e8:	b108      	cbz	r0, 80091ee <USBD_LL_Init+0x2a>
    Error_Handler( );
 80091ea:	f7fc f859 	bl	80052a0 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80091ee:	2200      	movs	r2, #0
 80091f0:	2318      	movs	r3, #24
 80091f2:	4611      	mov	r1, r2
 80091f4:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80091f8:	f7fd fcbf 	bl	8006b7a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80091fc:	2358      	movs	r3, #88	@ 0x58
 80091fe:	2200      	movs	r2, #0
 8009200:	2180      	movs	r1, #128	@ 0x80
 8009202:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8009206:	f7fd fcb8 	bl	8006b7a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800920a:	23c0      	movs	r3, #192	@ 0xc0
 800920c:	2200      	movs	r2, #0
 800920e:	2181      	movs	r1, #129	@ 0x81
 8009210:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8009214:	f7fd fcb1 	bl	8006b7a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009218:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800921c:	2200      	movs	r2, #0
 800921e:	2101      	movs	r1, #1
 8009220:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8009224:	f7fd fca9 	bl	8006b7a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009228:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800922c:	2200      	movs	r2, #0
 800922e:	2182      	movs	r1, #130	@ 0x82
 8009230:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8009234:	f7fd fca1 	bl	8006b7a <HAL_PCDEx_PMAConfig>
}
 8009238:	2000      	movs	r0, #0
 800923a:	bd10      	pop	{r4, pc}
 800923c:	40005c00 	.word	0x40005c00
 8009240:	20001268 	.word	0x20001268

08009244 <USBD_LL_Start>:
{
 8009244:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8009246:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800924a:	f7fc fe6e 	bl	8005f2a <HAL_PCD_Start>
}
 800924e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009252:	f7ff bf4f 	b.w	80090f4 <USBD_Get_USB_Status>

08009256 <USBD_LL_OpenEP>:
{
 8009256:	b510      	push	{r4, lr}
 8009258:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800925a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
{
 800925e:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009260:	4623      	mov	r3, r4
 8009262:	f7fd fb93 	bl	800698c <HAL_PCD_EP_Open>
}
 8009266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800926a:	f7ff bf43 	b.w	80090f4 <USBD_Get_USB_Status>

0800926e <USBD_LL_CloseEP>:
{
 800926e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009270:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8009274:	f7fd fbba 	bl	80069ec <HAL_PCD_EP_Close>
}
 8009278:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800927c:	f7ff bf3a 	b.w	80090f4 <USBD_Get_USB_Status>

08009280 <USBD_LL_StallEP>:
{
 8009280:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009282:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8009286:	f7fd fc10 	bl	8006aaa <HAL_PCD_EP_SetStall>
}
 800928a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800928e:	f7ff bf31 	b.w	80090f4 <USBD_Get_USB_Status>

08009292 <USBD_LL_ClearStallEP>:
{
 8009292:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009294:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8009298:	f7fd fc3d 	bl	8006b16 <HAL_PCD_EP_ClrStall>
}
 800929c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80092a0:	f7ff bf28 	b.w	80090f4 <USBD_Get_USB_Status>

080092a4 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80092a4:	2228      	movs	r2, #40	@ 0x28
  if((ep_addr & 0x80) == 0x80)
 80092a6:	f011 0f80 	tst.w	r1, #128	@ 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80092aa:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80092ae:	bf1b      	ittet	ne
 80092b0:	f001 017f 	andne.w	r1, r1, #127	@ 0x7f
 80092b4:	fb02 3301 	mlane	r3, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80092b8:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80092bc:	7c98      	ldrbne	r0, [r3, #18]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80092be:	bf08      	it	eq
 80092c0:	f893 0152 	ldrbeq.w	r0, [r3, #338]	@ 0x152
}
 80092c4:	4770      	bx	lr

080092c6 <USBD_LL_SetUSBAddress>:
{
 80092c6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80092c8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80092cc:	f7fc fe46 	bl	8005f5c <HAL_PCD_SetAddress>
}
 80092d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80092d4:	f7ff bf0e 	b.w	80090f4 <USBD_Get_USB_Status>

080092d8 <USBD_LL_Transmit>:
{
 80092d8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80092da:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80092de:	f7fd fbcc 	bl	8006a7a <HAL_PCD_EP_Transmit>
}
 80092e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80092e6:	f7ff bf05 	b.w	80090f4 <USBD_Get_USB_Status>

080092ea <USBD_LL_PrepareReceive>:
{
 80092ea:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80092ec:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80092f0:	f7fd fba4 	bl	8006a3c <HAL_PCD_EP_Receive>
}
 80092f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80092f8:	f7ff befc 	b.w	80090f4 <USBD_Get_USB_Status>

080092fc <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80092fc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8009300:	f7fd bbb3 	b.w	8006a6a <HAL_PCD_EP_GetRxCount>

08009304 <USBD_static_malloc>:
}
 8009304:	4800      	ldr	r0, [pc, #0]	@ (8009308 <USBD_static_malloc+0x4>)
 8009306:	4770      	bx	lr
 8009308:	20001048 	.word	0x20001048

0800930c <USBD_static_free>:
}
 800930c:	4770      	bx	lr

0800930e <HAL_PCDEx_SetConnectionState>:
}
 800930e:	4770      	bx	lr

08009310 <main>:
 */

#include "main.h"

int main(void)
{
 8009310:	b508      	push	{r3, lr}

    hwInit();
 8009312:	f7fc f9df 	bl	80056d4 <hwInit>
    apInit();
 8009316:	f7fb ff21 	bl	800515c <apInit>

    apMain();
 800931a:	f7fb ff2c 	bl	8005176 <apMain>

    return 0;
}
 800931e:	2000      	movs	r0, #0
 8009320:	bd08      	pop	{r3, pc}

08009322 <memset>:
 8009322:	4603      	mov	r3, r0
 8009324:	4402      	add	r2, r0
 8009326:	4293      	cmp	r3, r2
 8009328:	d100      	bne.n	800932c <memset+0xa>
 800932a:	4770      	bx	lr
 800932c:	f803 1b01 	strb.w	r1, [r3], #1
 8009330:	e7f9      	b.n	8009326 <memset+0x4>
	...

08009334 <__libc_init_array>:
 8009334:	b570      	push	{r4, r5, r6, lr}
 8009336:	2600      	movs	r6, #0
 8009338:	4d0c      	ldr	r5, [pc, #48]	@ (800936c <__libc_init_array+0x38>)
 800933a:	4c0d      	ldr	r4, [pc, #52]	@ (8009370 <__libc_init_array+0x3c>)
 800933c:	1b64      	subs	r4, r4, r5
 800933e:	10a4      	asrs	r4, r4, #2
 8009340:	42a6      	cmp	r6, r4
 8009342:	d109      	bne.n	8009358 <__libc_init_array+0x24>
 8009344:	f000 f81a 	bl	800937c <_init>
 8009348:	2600      	movs	r6, #0
 800934a:	4d0a      	ldr	r5, [pc, #40]	@ (8009374 <__libc_init_array+0x40>)
 800934c:	4c0a      	ldr	r4, [pc, #40]	@ (8009378 <__libc_init_array+0x44>)
 800934e:	1b64      	subs	r4, r4, r5
 8009350:	10a4      	asrs	r4, r4, #2
 8009352:	42a6      	cmp	r6, r4
 8009354:	d105      	bne.n	8009362 <__libc_init_array+0x2e>
 8009356:	bd70      	pop	{r4, r5, r6, pc}
 8009358:	f855 3b04 	ldr.w	r3, [r5], #4
 800935c:	4798      	blx	r3
 800935e:	3601      	adds	r6, #1
 8009360:	e7ee      	b.n	8009340 <__libc_init_array+0xc>
 8009362:	f855 3b04 	ldr.w	r3, [r5], #4
 8009366:	4798      	blx	r3
 8009368:	3601      	adds	r6, #1
 800936a:	e7f2      	b.n	8009352 <__libc_init_array+0x1e>
 800936c:	0800941c 	.word	0x0800941c
 8009370:	0800941c 	.word	0x0800941c
 8009374:	0800941c 	.word	0x0800941c
 8009378:	08009420 	.word	0x08009420

0800937c <_init>:
 800937c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800937e:	bf00      	nop
 8009380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009382:	bc08      	pop	{r3}
 8009384:	469e      	mov	lr, r3
 8009386:	4770      	bx	lr

08009388 <_fini>:
 8009388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800938a:	bf00      	nop
 800938c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800938e:	bc08      	pop	{r3}
 8009390:	469e      	mov	lr, r3
 8009392:	4770      	bx	lr
