
baram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b35c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800b468  0800b468  0000c468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b558  0800b558  0000d1ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800b558  0800b558  0000d1ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b558  0800b558  0000d1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b558  0800b558  0000c558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b55c  0800b55c  0000c55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800b560  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001528  200001f0  0800b74c  0000d1f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001718  0800b74c  0000d718  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ac5  00000000  00000000  0000d215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004975  00000000  00000000  00021cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  00026650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e63  00000000  00000000  000279c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d68f  00000000  00000000  0002882b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002009d  00000000  00000000  00045eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c2ab  00000000  00000000  00065f57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f2202  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052b4  00000000  00000000  000f2248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000f74fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f0 	.word	0x200001f0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b450 	.word	0x0800b450

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f4 	.word	0x200001f4
 8000148:	0800b450 	.word	0x0800b450

0800014c <apInit>:
 */

#include "ap.h"

void apInit(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    uartOpen(_DEF_UART1, 57600); // USB
 8000150:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8000154:	2000      	movs	r0, #0
 8000156:	f000 fd6b 	bl	8000c30 <uartOpen>
    uartOpen(_DEF_UART2, 57600); // UART
 800015a:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 800015e:	2001      	movs	r0, #1
 8000160:	f000 fd66 	bl	8000c30 <uartOpen>
}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}

08000168 <apMain>:

void apMain(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b08c      	sub	sp, #48	@ 0x30
 800016c:	af00      	add	r7, sp, #0
    uint32_t pre_time;

    pre_time = millis();
 800016e:	f000 f8c6 	bl	80002fe <millis>
 8000172:	62f8      	str	r0, [r7, #44]	@ 0x2c
    while (1)
    {
        if (millis() - pre_time >= 500)
 8000174:	f000 f8c3 	bl	80002fe <millis>
 8000178:	4602      	mov	r2, r0
 800017a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800017c:	1ad3      	subs	r3, r2, r3
 800017e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000182:	d305      	bcc.n	8000190 <apMain+0x28>
        {
            pre_time = millis();
 8000184:	f000 f8bb 	bl	80002fe <millis>
 8000188:	62f8      	str	r0, [r7, #44]	@ 0x2c
            ledToggle(_DEF_LED1);
 800018a:	2000      	movs	r0, #0
 800018c:	f000 fc8a 	bl	8000aa4 <ledToggle>
        }

        if (uartAvailable(_DEF_UART1) > 0)
 8000190:	2000      	movs	r0, #0
 8000192:	f000 fde3 	bl	8000d5c <uartAvailable>
 8000196:	4603      	mov	r3, r0
 8000198:	2b00      	cmp	r3, #0
 800019a:	d0eb      	beq.n	8000174 <apMain+0xc>
        {
            uint8_t rx_data;

            rx_data = uartRead(_DEF_UART1);
 800019c:	2000      	movs	r0, #0
 800019e:	f000 fe0f 	bl	8000dc0 <uartRead>
 80001a2:	4603      	mov	r3, r0
 80001a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            if (rx_data == '1')
 80001a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80001ac:	2b31      	cmp	r3, #49	@ 0x31
 80001ae:	d11e      	bne.n	80001ee <apMain+0x86>
            {
                uint8_t buf[32];

                logPrintf("read\n");
 80001b0:	482d      	ldr	r0, [pc, #180]	@ (8000268 <apMain+0x100>)
 80001b2:	f00a fadf 	bl	800a774 <puts>
                flashRead(0x8000000 + (60 * 1024), buf, 32);
 80001b6:	463b      	mov	r3, r7
 80001b8:	2220      	movs	r2, #32
 80001ba:	4619      	mov	r1, r3
 80001bc:	482b      	ldr	r0, [pc, #172]	@ (800026c <apMain+0x104>)
 80001be:	f000 fb99 	bl	80008f4 <flashRead>

                for (int i = 0; i < 32; i++)
 80001c2:	2300      	movs	r3, #0
 80001c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80001c6:	e00f      	b.n	80001e8 <apMain+0x80>
                {
                    logPrintf("0x%X : 0x%X\n", 0x8000000 + (60 * 1024) + i,
 80001c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80001ca:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80001ce:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 80001d2:	4639      	mov	r1, r7
 80001d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80001d6:	440a      	add	r2, r1
 80001d8:	7812      	ldrb	r2, [r2, #0]
 80001da:	4619      	mov	r1, r3
 80001dc:	4824      	ldr	r0, [pc, #144]	@ (8000270 <apMain+0x108>)
 80001de:	f00a fa61 	bl	800a6a4 <iprintf>
                for (int i = 0; i < 32; i++)
 80001e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80001e4:	3301      	adds	r3, #1
 80001e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80001e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80001ea:	2b1f      	cmp	r3, #31
 80001ec:	ddec      	ble.n	80001c8 <apMain+0x60>
                              buf[i]);
                }
            }
            if (rx_data == '2')
 80001ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80001f2:	2b32      	cmp	r3, #50	@ 0x32
 80001f4:	d110      	bne.n	8000218 <apMain+0xb0>
            {
                logPrintf("erase\n");
 80001f6:	481f      	ldr	r0, [pc, #124]	@ (8000274 <apMain+0x10c>)
 80001f8:	f00a fabc 	bl	800a774 <puts>
                if (flashErase(0x8000000 + (60 * 1024), 32) == true)
 80001fc:	2120      	movs	r1, #32
 80001fe:	481b      	ldr	r0, [pc, #108]	@ (800026c <apMain+0x104>)
 8000200:	f000 fad0 	bl	80007a4 <flashErase>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d003      	beq.n	8000212 <apMain+0xaa>
                {
                    logPrintf("ok\n");
 800020a:	481b      	ldr	r0, [pc, #108]	@ (8000278 <apMain+0x110>)
 800020c:	f00a fab2 	bl	800a774 <puts>
 8000210:	e002      	b.n	8000218 <apMain+0xb0>
                }
                else
                {
                    logPrintf("fail\n");
 8000212:	481a      	ldr	r0, [pc, #104]	@ (800027c <apMain+0x114>)
 8000214:	f00a faae 	bl	800a774 <puts>
                }
            }
            if(rx_data =='3'){
 8000218:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800021c:	2b33      	cmp	r3, #51	@ 0x33
 800021e:	d1a9      	bne.n	8000174 <apMain+0xc>
              uint8_t buf[32];

              for(int i=0; i<32; i++){
 8000220:	2300      	movs	r3, #0
 8000222:	627b      	str	r3, [r7, #36]	@ 0x24
 8000224:	e009      	b.n	800023a <apMain+0xd2>
                buf[i] = i;
 8000226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000228:	b2d9      	uxtb	r1, r3
 800022a:	463a      	mov	r2, r7
 800022c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800022e:	4413      	add	r3, r2
 8000230:	460a      	mov	r2, r1
 8000232:	701a      	strb	r2, [r3, #0]
              for(int i=0; i<32; i++){
 8000234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000236:	3301      	adds	r3, #1
 8000238:	627b      	str	r3, [r7, #36]	@ 0x24
 800023a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800023c:	2b1f      	cmp	r3, #31
 800023e:	ddf2      	ble.n	8000226 <apMain+0xbe>
              }
              logPrintf("write\n");
 8000240:	480f      	ldr	r0, [pc, #60]	@ (8000280 <apMain+0x118>)
 8000242:	f00a fa97 	bl	800a774 <puts>

              if(flashWrite(0x8000000 + (60 * 1024),buf, 32) == true){
 8000246:	463b      	mov	r3, r7
 8000248:	2220      	movs	r2, #32
 800024a:	4619      	mov	r1, r3
 800024c:	4807      	ldr	r0, [pc, #28]	@ (800026c <apMain+0x104>)
 800024e:	f000 faff 	bl	8000850 <flashWrite>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d003      	beq.n	8000260 <apMain+0xf8>
                logPrintf("ok\n");
 8000258:	4807      	ldr	r0, [pc, #28]	@ (8000278 <apMain+0x110>)
 800025a:	f00a fa8b 	bl	800a774 <puts>
 800025e:	e789      	b.n	8000174 <apMain+0xc>
              }else{
                logPrintf("fail\n");
 8000260:	4806      	ldr	r0, [pc, #24]	@ (800027c <apMain+0x114>)
 8000262:	f00a fa87 	bl	800a774 <puts>
        if (millis() - pre_time >= 500)
 8000266:	e785      	b.n	8000174 <apMain+0xc>
 8000268:	0800b468 	.word	0x0800b468
 800026c:	0800f000 	.word	0x0800f000
 8000270:	0800b470 	.word	0x0800b470
 8000274:	0800b480 	.word	0x0800b480
 8000278:	0800b488 	.word	0x0800b488
 800027c:	0800b48c 	.word	0x0800b48c
 8000280:	0800b494 	.word	0x0800b494

08000284 <bspInit>:
#include "uart.h"

void SystemClock_Config(void);

void bspInit(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
    HAL_Init();
 800028a:	f000 fee7 	bl	800105c <HAL_Init>
    SystemClock_Config();
 800028e:	f000 f84c 	bl	800032a <SystemClock_Config>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000292:	4b14      	ldr	r3, [pc, #80]	@ (80002e4 <bspInit+0x60>)
 8000294:	699b      	ldr	r3, [r3, #24]
 8000296:	4a13      	ldr	r2, [pc, #76]	@ (80002e4 <bspInit+0x60>)
 8000298:	f043 0310 	orr.w	r3, r3, #16
 800029c:	6193      	str	r3, [r2, #24]
 800029e:	4b11      	ldr	r3, [pc, #68]	@ (80002e4 <bspInit+0x60>)
 80002a0:	699b      	ldr	r3, [r3, #24]
 80002a2:	f003 0310 	and.w	r3, r3, #16
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80002aa:	4b0e      	ldr	r3, [pc, #56]	@ (80002e4 <bspInit+0x60>)
 80002ac:	699b      	ldr	r3, [r3, #24]
 80002ae:	4a0d      	ldr	r2, [pc, #52]	@ (80002e4 <bspInit+0x60>)
 80002b0:	f043 0320 	orr.w	r3, r3, #32
 80002b4:	6193      	str	r3, [r2, #24]
 80002b6:	4b0b      	ldr	r3, [pc, #44]	@ (80002e4 <bspInit+0x60>)
 80002b8:	699b      	ldr	r3, [r3, #24]
 80002ba:	f003 0320 	and.w	r3, r3, #32
 80002be:	60bb      	str	r3, [r7, #8]
 80002c0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c2:	4b08      	ldr	r3, [pc, #32]	@ (80002e4 <bspInit+0x60>)
 80002c4:	699b      	ldr	r3, [r3, #24]
 80002c6:	4a07      	ldr	r2, [pc, #28]	@ (80002e4 <bspInit+0x60>)
 80002c8:	f043 0304 	orr.w	r3, r3, #4
 80002cc:	6193      	str	r3, [r2, #24]
 80002ce:	4b05      	ldr	r3, [pc, #20]	@ (80002e4 <bspInit+0x60>)
 80002d0:	699b      	ldr	r3, [r3, #24]
 80002d2:	f003 0304 	and.w	r3, r3, #4
 80002d6:	607b      	str	r3, [r7, #4]
 80002d8:	687b      	ldr	r3, [r7, #4]
}
 80002da:	bf00      	nop
 80002dc:	3710      	adds	r7, #16
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40021000 	.word	0x40021000

080002e8 <delay>:

void delay(uint32_t ms)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 80002f0:	6878      	ldr	r0, [r7, #4]
 80002f2:	f000 ff15 	bl	8001120 <HAL_Delay>
}
 80002f6:	bf00      	nop
 80002f8:	3708      	adds	r7, #8
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}

080002fe <millis>:

uint32_t millis(void)
{
 80002fe:	b580      	push	{r7, lr}
 8000300:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8000302:	f000 ff03 	bl	800110c <HAL_GetTick>
 8000306:	4603      	mov	r3, r0
}
 8000308:	4618      	mov	r0, r3
 800030a:	bd80      	pop	{r7, pc}

0800030c <__io_putchar>:

int __io_putchar(int ch)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
    // USB로 printf 캐릭터 전송
    uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	2201      	movs	r2, #1
 8000318:	4619      	mov	r1, r3
 800031a:	2000      	movs	r0, #0
 800031c:	f000 fd72 	bl	8000e04 <uartWrite>
    return 1;
 8000320:	2301      	movs	r3, #1
}
 8000322:	4618      	mov	r0, r3
 8000324:	3708      	adds	r7, #8
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}

0800032a <SystemClock_Config>:

void SystemClock_Config(void)
{
 800032a:	b580      	push	{r7, lr}
 800032c:	b094      	sub	sp, #80	@ 0x50
 800032e:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct   = {0};
 8000330:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000334:	2228      	movs	r2, #40	@ 0x28
 8000336:	2100      	movs	r1, #0
 8000338:	4618      	mov	r0, r3
 800033a:	f00a fafb 	bl	800a934 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct   = {0};
 800033e:	f107 0314 	add.w	r3, r7, #20
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
 800034c:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	2200      	movs	r2, #0
 8000352:	601a      	str	r2, [r3, #0]
 8000354:	605a      	str	r2, [r3, #4]
 8000356:	609a      	str	r2, [r3, #8]
 8000358:	60da      	str	r2, [r3, #12]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType =
 800035a:	2305      	movs	r3, #5
 800035c:	62bb      	str	r3, [r7, #40]	@ 0x28
        RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
    RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 800035e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000362:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.LSEState       = RCC_LSE_ON;
 8000368:	2301      	movs	r3, #1
 800036a:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.HSIState       = RCC_HSI_ON;
 800036c:	2301      	movs	r3, #1
 800036e:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 8000370:	2302      	movs	r3, #2
 8000372:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 8000374:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000378:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLMUL     = RCC_PLL_MUL9;
 800037a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800037e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000380:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000384:	4618      	mov	r0, r3
 8000386:	f003 fd0b 	bl	8003da0 <HAL_RCC_OscConfig>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <SystemClock_Config+0x6a>
    {
        Error_Handler();
 8000390:	f000 f82a 	bl	80003e8 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000394:	230f      	movs	r3, #15
 8000396:	617b      	str	r3, [r7, #20]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 8000398:	2302      	movs	r3, #2
 800039a:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003a4:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a6:	2300      	movs	r3, #0
 80003a8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003aa:	f107 0314 	add.w	r3, r7, #20
 80003ae:	2102      	movs	r1, #2
 80003b0:	4618      	mov	r0, r3
 80003b2:	f003 ff77 	bl	80042a4 <HAL_RCC_ClockConfig>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <SystemClock_Config+0x96>
    {
        Error_Handler();
 80003bc:	f000 f814 	bl	80003e8 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_USB;
 80003c0:	2311      	movs	r3, #17
 80003c2:	607b      	str	r3, [r7, #4]
    PeriphClkInit.RTCClockSelection    = RCC_RTCCLKSOURCE_LSE;
 80003c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003c8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.UsbClockSelection    = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003ca:	2300      	movs	r3, #0
 80003cc:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	4618      	mov	r0, r3
 80003d2:	f004 f8f5 	bl	80045c0 <HAL_RCCEx_PeriphCLKConfig>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <SystemClock_Config+0xb6>
    {
        Error_Handler();
 80003dc:	f000 f804 	bl	80003e8 <Error_Handler>
    }
}
 80003e0:	bf00      	nop
 80003e2:	3750      	adds	r7, #80	@ 0x50
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}

080003e8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ec:	b672      	cpsid	i
}
 80003ee:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state
     */
    __disable_irq();
    while (1)
 80003f0:	bf00      	nop
 80003f2:	e7fd      	b.n	80003f0 <Error_Handler+0x8>

080003f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_AFIO_CLK_ENABLE();
 80003fa:	4b15      	ldr	r3, [pc, #84]	@ (8000450 <HAL_MspInit+0x5c>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	4a14      	ldr	r2, [pc, #80]	@ (8000450 <HAL_MspInit+0x5c>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6193      	str	r3, [r2, #24]
 8000406:	4b12      	ldr	r3, [pc, #72]	@ (8000450 <HAL_MspInit+0x5c>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	60bb      	str	r3, [r7, #8]
 8000410:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_PWR_CLK_ENABLE();
 8000412:	4b0f      	ldr	r3, [pc, #60]	@ (8000450 <HAL_MspInit+0x5c>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	4a0e      	ldr	r2, [pc, #56]	@ (8000450 <HAL_MspInit+0x5c>)
 8000418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800041c:	61d3      	str	r3, [r2, #28]
 800041e:	4b0c      	ldr	r3, [pc, #48]	@ (8000450 <HAL_MspInit+0x5c>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]

    /* System interrupt init*/

    /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
     */
    __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800042a:	4b0a      	ldr	r3, [pc, #40]	@ (8000454 <HAL_MspInit+0x60>)
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	4a04      	ldr	r2, [pc, #16]	@ (8000454 <HAL_MspInit+0x60>)
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	6053      	str	r3, [r2, #4]

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 8000446:	bf00      	nop
 8000448:	3714      	adds	r7, #20
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr
 8000450:	40021000 	.word	0x40021000
 8000454:	40010000 	.word	0x40010000

08000458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800045c:	bf00      	nop
 800045e:	e7fd      	b.n	800045c <NMI_Handler+0x4>

08000460 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000464:	bf00      	nop
 8000466:	e7fd      	b.n	8000464 <HardFault_Handler+0x4>

08000468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800046c:	bf00      	nop
 800046e:	e7fd      	b.n	800046c <MemManage_Handler+0x4>

08000470 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000474:	bf00      	nop
 8000476:	e7fd      	b.n	8000474 <BusFault_Handler+0x4>

08000478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800047c:	bf00      	nop
 800047e:	e7fd      	b.n	800047c <UsageFault_Handler+0x4>

08000480 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr

0800048c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr

08000498 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr

080004a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004a8:	f000 fe1e 	bl	80010e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80004b4:	4802      	ldr	r0, [pc, #8]	@ (80004c0 <DMA1_Channel5_IRQHandler+0x10>)
 80004b6:	f001 f961 	bl	800177c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	20000594 	.word	0x20000594

080004c4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004c8:	4802      	ldr	r0, [pc, #8]	@ (80004d4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80004ca:	f002 f818 	bl	80024fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	200010d4 	.word	0x200010d4

080004d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80004dc:	4802      	ldr	r0, [pc, #8]	@ (80004e8 <USART1_IRQHandler+0x10>)
 80004de:	f004 fc4d 	bl	8004d7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	2000054c 	.word	0x2000054c

080004ec <_read>:
    {
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
 80004fc:	e00a      	b.n	8000514 <_read+0x28>
    {
        *ptr++ = __io_getchar();
 80004fe:	f3af 8000 	nop.w
 8000502:	4601      	mov	r1, r0
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	1c5a      	adds	r2, r3, #1
 8000508:	60ba      	str	r2, [r7, #8]
 800050a:	b2ca      	uxtb	r2, r1
 800050c:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	3301      	adds	r3, #1
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	697a      	ldr	r2, [r7, #20]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	429a      	cmp	r2, r3
 800051a:	dbf0      	blt.n	80004fe <_read+0x12>
    }

    return len;
 800051c:	687b      	ldr	r3, [r7, #4]
}
 800051e:	4618      	mov	r0, r3
 8000520:	3718      	adds	r7, #24
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	b086      	sub	sp, #24
 800052a:	af00      	add	r7, sp, #0
 800052c:	60f8      	str	r0, [r7, #12]
 800052e:	60b9      	str	r1, [r7, #8]
 8000530:	607a      	str	r2, [r7, #4]
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]
 8000536:	e009      	b.n	800054c <_write+0x26>
    {
        __io_putchar(*ptr++);
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	1c5a      	adds	r2, r3, #1
 800053c:	60ba      	str	r2, [r7, #8]
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	4618      	mov	r0, r3
 8000542:	f7ff fee3 	bl	800030c <__io_putchar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	3301      	adds	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	697a      	ldr	r2, [r7, #20]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	429a      	cmp	r2, r3
 8000552:	dbf1      	blt.n	8000538 <_write+0x12>
    }
    return len;
 8000554:	687b      	ldr	r3, [r7, #4]
}
 8000556:	4618      	mov	r0, r3
 8000558:	3718      	adds	r7, #24
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <_close>:

int _close(int file)
{
 800055e:	b480      	push	{r7}
 8000560:	b083      	sub	sp, #12
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
    (void)file;
    return -1;
 8000566:	f04f 33ff 	mov.w	r3, #4294967295
}
 800056a:	4618      	mov	r0, r3
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr

08000574 <_fstat>:

int _fstat(int file, struct stat *st)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
    (void)file;
    st->st_mode = S_IFCHR;
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000584:	605a      	str	r2, [r3, #4]
    return 0;
 8000586:	2300      	movs	r3, #0
}
 8000588:	4618      	mov	r0, r3
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr

08000592 <_isatty>:

int _isatty(int file)
{
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
    (void)file;
    return 1;
 800059a:	2301      	movs	r3, #1
}
 800059c:	4618      	mov	r0, r3
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr

080005a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005a6:	b480      	push	{r7}
 80005a8:	b085      	sub	sp, #20
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	60f8      	str	r0, [r7, #12]
 80005ae:	60b9      	str	r1, [r7, #8]
 80005b0:	607a      	str	r2, [r7, #4]
    (void)file;
    (void)ptr;
    (void)dir;
    return 0;
 80005b2:	2300      	movs	r3, #0
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3714      	adds	r7, #20
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr
	...

080005c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
    extern uint8_t _end;             /* Symbol defined in the linker script */
    extern uint8_t _estack;          /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit =
        (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005c8:	4a14      	ldr	r2, [pc, #80]	@ (800061c <_sbrk+0x5c>)
 80005ca:	4b15      	ldr	r3, [pc, #84]	@ (8000620 <_sbrk+0x60>)
    const uint32_t stack_limit =
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	617b      	str	r3, [r7, #20]
    const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	613b      	str	r3, [r7, #16]
    uint8_t *prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end)
 80005d4:	4b13      	ldr	r3, [pc, #76]	@ (8000624 <_sbrk+0x64>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d102      	bne.n	80005e2 <_sbrk+0x22>
    {
        __sbrk_heap_end = &_end;
 80005dc:	4b11      	ldr	r3, [pc, #68]	@ (8000624 <_sbrk+0x64>)
 80005de:	4a12      	ldr	r2, [pc, #72]	@ (8000628 <_sbrk+0x68>)
 80005e0:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap)
 80005e2:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <_sbrk+0x64>)
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4413      	add	r3, r2
 80005ea:	693a      	ldr	r2, [r7, #16]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d207      	bcs.n	8000600 <_sbrk+0x40>
    {
        errno = ENOMEM;
 80005f0:	f00a f9ee 	bl	800a9d0 <__errno>
 80005f4:	4603      	mov	r3, r0
 80005f6:	220c      	movs	r2, #12
 80005f8:	601a      	str	r2, [r3, #0]
        return (void *)-1;
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
 80005fe:	e009      	b.n	8000614 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8000600:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <_sbrk+0x64>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 8000606:	4b07      	ldr	r3, [pc, #28]	@ (8000624 <_sbrk+0x64>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4413      	add	r3, r2
 800060e:	4a05      	ldr	r2, [pc, #20]	@ (8000624 <_sbrk+0x64>)
 8000610:	6013      	str	r3, [r2, #0]

    return (void *)prev_heap_end;
 8000612:	68fb      	ldr	r3, [r7, #12]
}
 8000614:	4618      	mov	r0, r3
 8000616:	3718      	adds	r7, #24
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20005000 	.word	0x20005000
 8000620:	00000400 	.word	0x00000400
 8000624:	2000020c 	.word	0x2000020c
 8000628:	20001718 	.word	0x20001718

0800062c <SystemInit>:
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
     * -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR = VECT_TAB_BASE_ADDRESS |
                VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr

08000638 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000638:	f7ff fff8 	bl	800062c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800063c:	480b      	ldr	r0, [pc, #44]	@ (800066c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800063e:	490c      	ldr	r1, [pc, #48]	@ (8000670 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000640:	4a0c      	ldr	r2, [pc, #48]	@ (8000674 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000644:	e002      	b.n	800064c <LoopCopyDataInit>

08000646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064a:	3304      	adds	r3, #4

0800064c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800064c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000650:	d3f9      	bcc.n	8000646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000652:	4a09      	ldr	r2, [pc, #36]	@ (8000678 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000654:	4c09      	ldr	r4, [pc, #36]	@ (800067c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000658:	e001      	b.n	800065e <LoopFillZerobss>

0800065a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800065c:	3204      	adds	r2, #4

0800065e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000660:	d3fb      	bcc.n	800065a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000662:	f00a f9bb 	bl	800a9dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000666:	f009 ff4f 	bl	800a508 <main>
  bx lr
 800066a:	4770      	bx	lr
  ldr r0, =_sdata
 800066c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000670:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8000674:	0800b560 	.word	0x0800b560
  ldr r2, =_sbss
 8000678:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800067c:	20001718 	.word	0x20001718

08000680 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000680:	e7fe      	b.n	8000680 <ADC1_2_IRQHandler>

08000682 <qbufferCreate>:
void qbufferInit(void)
{
}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8000682:	b480      	push	{r7}
 8000684:	b087      	sub	sp, #28
 8000686:	af00      	add	r7, sp, #0
 8000688:	60f8      	str	r0, [r7, #12]
 800068a:	60b9      	str	r1, [r7, #8]
 800068c:	607a      	str	r2, [r7, #4]
    bool ret = true;
 800068e:	2301      	movs	r3, #1
 8000690:	75fb      	strb	r3, [r7, #23]

    p_node->in    = 0;
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
    p_node->out   = 0;
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	2200      	movs	r2, #0
 800069c:	605a      	str	r2, [r3, #4]
    p_node->len   = length;
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	609a      	str	r2, [r3, #8]
    p_node->p_buf = p_buf;
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	68ba      	ldr	r2, [r7, #8]
 80006a8:	60da      	str	r2, [r3, #12]

    return ret;
 80006aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	371c      	adds	r7, #28
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr

080006b6 <qbufferRead>:

    return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80006b6:	b480      	push	{r7}
 80006b8:	b087      	sub	sp, #28
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	60f8      	str	r0, [r7, #12]
 80006be:	60b9      	str	r1, [r7, #8]
 80006c0:	607a      	str	r2, [r7, #4]
    bool ret = true;
 80006c2:	2301      	movs	r3, #1
 80006c4:	75fb      	strb	r3, [r7, #23]

    for (int i = 0; i < length; i++)
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
 80006ca:	e026      	b.n	800071a <qbufferRead+0x64>
    {
        if (p_node->p_buf != NULL)
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d009      	beq.n	80006e8 <qbufferRead+0x32>
        {
            p_data[i] = p_node->p_buf[p_node->out];
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	68da      	ldr	r2, [r3, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	441a      	add	r2, r3
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	68b9      	ldr	r1, [r7, #8]
 80006e2:	440b      	add	r3, r1
 80006e4:	7812      	ldrb	r2, [r2, #0]
 80006e6:	701a      	strb	r2, [r3, #0]
        }

        if (p_node->out != p_node->in)
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	685a      	ldr	r2, [r3, #4]
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d00c      	beq.n	800070e <qbufferRead+0x58>
        {
            p_node->out = (p_node->out + 1) % p_node->len;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	3301      	adds	r3, #1
 80006fa:	68fa      	ldr	r2, [r7, #12]
 80006fc:	6892      	ldr	r2, [r2, #8]
 80006fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8000702:	fb01 f202 	mul.w	r2, r1, r2
 8000706:	1a9a      	subs	r2, r3, r2
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	e002      	b.n	8000714 <qbufferRead+0x5e>
        }
        else
        {
            ret = false;
 800070e:	2300      	movs	r3, #0
 8000710:	75fb      	strb	r3, [r7, #23]
            break;
 8000712:	e006      	b.n	8000722 <qbufferRead+0x6c>
    for (int i = 0; i < length; i++)
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	3301      	adds	r3, #1
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	429a      	cmp	r2, r3
 8000720:	d8d4      	bhi.n	80006cc <qbufferRead+0x16>
        }
    }

    return ret;
 8000722:	7dfb      	ldrb	r3, [r7, #23]
}
 8000724:	4618      	mov	r0, r3
 8000726:	371c      	adds	r7, #28
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr

0800072e <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 800072e:	b480      	push	{r7}
 8000730:	b085      	sub	sp, #20
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
    uint32_t ret;

    ret = (p_node->in - p_node->out) % p_node->len;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	6892      	ldr	r2, [r2, #8]
 8000744:	fbb3 f1f2 	udiv	r1, r3, r2
 8000748:	fb01 f202 	mul.w	r2, r1, r2
 800074c:	1a9b      	subs	r3, r3, r2
 800074e:	60fb      	str	r3, [r7, #12]

    return ret;
 8000750:	68fb      	ldr	r3, [r7, #12]
}
 8000752:	4618      	mov	r0, r3
 8000754:	3714      	adds	r7, #20
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <flashInit>:
static flash_tbl_t flash_tbl[FLASH_SECTOR_MAX];

static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);

bool flashInit(void)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
    for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	e012      	b.n	800078e <flashInit+0x32>
    {
        flash_tbl[i].addr   = 0x8000000 + i * 1024;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 800076e:	029b      	lsls	r3, r3, #10
 8000770:	4619      	mov	r1, r3
 8000772:	4a0b      	ldr	r2, [pc, #44]	@ (80007a0 <flashInit+0x44>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        flash_tbl[i].length = 1024;
 800077a:	4a09      	ldr	r2, [pc, #36]	@ (80007a0 <flashInit+0x44>)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	00db      	lsls	r3, r3, #3
 8000780:	4413      	add	r3, r2
 8000782:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000786:	809a      	strh	r2, [r3, #4]
    for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3301      	adds	r3, #1
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2b3f      	cmp	r3, #63	@ 0x3f
 8000792:	dde9      	ble.n	8000768 <flashInit+0xc>
    }
    return true;
 8000794:	2301      	movs	r3, #1
}
 8000796:	4618      	mov	r0, r3
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	20000210 	.word	0x20000210

080007a4 <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08c      	sub	sp, #48	@ 0x30
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
    bool ret = false;
 80007ae:	2300      	movs	r3, #0
 80007b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    HAL_StatusTypeDef status;
    FLASH_EraseInitTypeDef init;
    uint32_t page_error;

    int16_t start_sector_num = -1;
 80007b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007b8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint32_t sector_count     = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	62bb      	str	r3, [r7, #40]	@ 0x28

    for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 80007be:	2300      	movs	r3, #0
 80007c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80007c2:	e015      	b.n	80007f0 <flashErase+0x4c>
    {
        if (flashInSector(i, addr, length) == true)
 80007c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	683a      	ldr	r2, [r7, #0]
 80007ca:	6879      	ldr	r1, [r7, #4]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f8b3 	bl	8000938 <flashInSector>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d008      	beq.n	80007ea <flashErase+0x46>
        {
            if (start_sector_num < 0)
 80007d8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80007dc:	2b00      	cmp	r3, #0
 80007de:	da01      	bge.n	80007e4 <flashErase+0x40>
            {
                start_sector_num = i;
 80007e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            }
            sector_count++;
 80007e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007e6:	3301      	adds	r3, #1
 80007e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 80007ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ec:	3301      	adds	r3, #1
 80007ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80007f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80007f4:	dde6      	ble.n	80007c4 <flashErase+0x20>
        }
    }

    if (sector_count > 0)
 80007f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d021      	beq.n	8000840 <flashErase+0x9c>
    {
        HAL_FLASH_Unlock();
 80007fc:	f001 f962 	bl	8001ac4 <HAL_FLASH_Unlock>

        init.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]
        init.Banks       = FLASH_BANK_1;
 8000804:	2301      	movs	r3, #1
 8000806:	617b      	str	r3, [r7, #20]
        init.PageAddress = flash_tbl[start_sector_num].addr;
 8000808:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800080c:	4a0f      	ldr	r2, [pc, #60]	@ (800084c <flashErase+0xa8>)
 800080e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000812:	61bb      	str	r3, [r7, #24]
        init.NbPages     = sector_count;
 8000814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000816:	61fb      	str	r3, [r7, #28]

        status = HAL_FLASHEx_Erase(&init, &page_error);
 8000818:	f107 020c 	add.w	r2, r7, #12
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	4611      	mov	r1, r2
 8000822:	4618      	mov	r0, r3
 8000824:	f001 fa36 	bl	8001c94 <HAL_FLASHEx_Erase>
 8000828:	4603      	mov	r3, r0
 800082a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        if (status == HAL_OK)
 800082e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000832:	2b00      	cmp	r3, #0
 8000834:	d102      	bne.n	800083c <flashErase+0x98>
        {
            ret = true;
 8000836:	2301      	movs	r3, #1
 8000838:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        HAL_FLASH_Lock();
 800083c:	f001 f968 	bl	8001b10 <HAL_FLASH_Lock>
    }
    return ret;
 8000840:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000844:	4618      	mov	r0, r3
 8000846:	3730      	adds	r7, #48	@ 0x30
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000210 	.word	0x20000210

08000850 <flashWrite>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8000850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000854:	b08a      	sub	sp, #40	@ 0x28
 8000856:	af00      	add	r7, sp, #0
 8000858:	60f8      	str	r0, [r7, #12]
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
    bool ret = true;
 800085e:	2301      	movs	r3, #1
 8000860:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    HAL_StatusTypeDef status;

    if (addr % 2 != 0)
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <flashWrite+0x22>
    {
        return false;
 800086e:	2300      	movs	r3, #0
 8000870:	e03b      	b.n	80008ea <flashWrite+0x9a>
    }

    HAL_FLASH_Unlock();
 8000872:	f001 f927 	bl	8001ac4 <HAL_FLASH_Unlock>

    for (int i = 0; i < length; i += 2)
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
 800087a:	e02e      	b.n	80008da <flashWrite+0x8a>
    {
        uint64_t data;

        data = p_data[i + 0] << 0;
 800087c:	6a3b      	ldr	r3, [r7, #32]
 800087e:	68ba      	ldr	r2, [r7, #8]
 8000880:	4413      	add	r3, r2
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2200      	movs	r2, #0
 8000888:	469a      	mov	sl, r3
 800088a:	4693      	mov	fp, r2
 800088c:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        data |= p_data[i + 1] << 8;
 8000890:	6a3b      	ldr	r3, [r7, #32]
 8000892:	3301      	adds	r3, #1
 8000894:	68ba      	ldr	r2, [r7, #8]
 8000896:	4413      	add	r3, r2
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	021b      	lsls	r3, r3, #8
 800089c:	17da      	asrs	r2, r3, #31
 800089e:	461c      	mov	r4, r3
 80008a0:	4615      	mov	r5, r2
 80008a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80008a6:	ea42 0804 	orr.w	r8, r2, r4
 80008aa:	ea43 0905 	orr.w	r9, r3, r5
 80008ae:	e9c7 8906 	strd	r8, r9, [r7, #24]

        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + i,
 80008b2:	6a3a      	ldr	r2, [r7, #32]
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	18d1      	adds	r1, r2, r3
 80008b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80008bc:	2001      	movs	r0, #1
 80008be:	f001 f891 	bl	80019e4 <HAL_FLASH_Program>
 80008c2:	4603      	mov	r3, r0
 80008c4:	75fb      	strb	r3, [r7, #23]
                                   (uint64_t)data);
        if (status != HAL_OK)
 80008c6:	7dfb      	ldrb	r3, [r7, #23]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d003      	beq.n	80008d4 <flashWrite+0x84>
        {
            ret = false;
 80008cc:	2300      	movs	r3, #0
 80008ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 80008d2:	e006      	b.n	80008e2 <flashWrite+0x92>
    for (int i = 0; i < length; i += 2)
 80008d4:	6a3b      	ldr	r3, [r7, #32]
 80008d6:	3302      	adds	r3, #2
 80008d8:	623b      	str	r3, [r7, #32]
 80008da:	6a3b      	ldr	r3, [r7, #32]
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	429a      	cmp	r2, r3
 80008e0:	d8cc      	bhi.n	800087c <flashWrite+0x2c>
        }
    }

    HAL_FLASH_Lock();
 80008e2:	f001 f915 	bl	8001b10 <HAL_FLASH_Lock>

    return ret;
 80008e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3728      	adds	r7, #40	@ 0x28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080008f4 <flashRead>:

bool flashRead(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b089      	sub	sp, #36	@ 0x24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
    bool ret = true;
 8000900:	2301      	movs	r3, #1
 8000902:	76fb      	strb	r3, [r7, #27]
    uint8_t *p_byte = (uint8_t *)addr;
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < length; i++)
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
 800090c:	e00a      	b.n	8000924 <flashRead+0x30>
    {
        p_data[i] = p_byte[i];
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	697a      	ldr	r2, [r7, #20]
 8000912:	441a      	add	r2, r3
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	68b9      	ldr	r1, [r7, #8]
 8000918:	440b      	add	r3, r1
 800091a:	7812      	ldrb	r2, [r2, #0]
 800091c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < length; i++)
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	3301      	adds	r3, #1
 8000922:	61fb      	str	r3, [r7, #28]
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	429a      	cmp	r2, r3
 800092a:	d8f0      	bhi.n	800090e <flashRead+0x1a>
    }

    return ret;
 800092c:	7efb      	ldrb	r3, [r7, #27]
}
 800092e:	4618      	mov	r0, r3
 8000930:	3724      	adds	r7, #36	@ 0x24
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr

08000938 <flashInSector>:

bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 8000938:	b480      	push	{r7}
 800093a:	b08b      	sub	sp, #44	@ 0x2c
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
 8000944:	81fb      	strh	r3, [r7, #14]
    bool ret = false;
 8000946:	2300      	movs	r3, #0
 8000948:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint32_t sector_start;
    uint32_t sector_end;
    uint32_t flash_start;
    uint32_t flash_end;

    sector_start = flash_tbl[sector_num].addr;
 800094c:	89fb      	ldrh	r3, [r7, #14]
 800094e:	4a25      	ldr	r2, [pc, #148]	@ (80009e4 <flashInSector+0xac>)
 8000950:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000954:	623b      	str	r3, [r7, #32]
    sector_end  = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 8000956:	89fb      	ldrh	r3, [r7, #14]
 8000958:	4a22      	ldr	r2, [pc, #136]	@ (80009e4 <flashInSector+0xac>)
 800095a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800095e:	89fb      	ldrh	r3, [r7, #14]
 8000960:	4920      	ldr	r1, [pc, #128]	@ (80009e4 <flashInSector+0xac>)
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	440b      	add	r3, r1
 8000966:	889b      	ldrh	r3, [r3, #4]
 8000968:	4413      	add	r3, r2
 800096a:	3b01      	subs	r3, #1
 800096c:	61fb      	str	r3, [r7, #28]
    flash_start = addr;
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	61bb      	str	r3, [r7, #24]
    flash_end   = addr + length - 1;
 8000972:	68ba      	ldr	r2, [r7, #8]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4413      	add	r3, r2
 8000978:	3b01      	subs	r3, #1
 800097a:	617b      	str	r3, [r7, #20]

    if (sector_start >= flash_start && sector_start <= flash_end)
 800097c:	6a3a      	ldr	r2, [r7, #32]
 800097e:	69bb      	ldr	r3, [r7, #24]
 8000980:	429a      	cmp	r2, r3
 8000982:	d306      	bcc.n	8000992 <flashInSector+0x5a>
 8000984:	6a3a      	ldr	r2, [r7, #32]
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	429a      	cmp	r2, r3
 800098a:	d802      	bhi.n	8000992 <flashInSector+0x5a>
    {
        ret = true;
 800098c:	2301      	movs	r3, #1
 800098e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    if (sector_end >= flash_start && sector_end <= flash_end)
 8000992:	69fa      	ldr	r2, [r7, #28]
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	429a      	cmp	r2, r3
 8000998:	d306      	bcc.n	80009a8 <flashInSector+0x70>
 800099a:	69fa      	ldr	r2, [r7, #28]
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d802      	bhi.n	80009a8 <flashInSector+0x70>
    {
        ret = true;
 80009a2:	2301      	movs	r3, #1
 80009a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    if (flash_start >= sector_start && flash_start <= sector_end)
 80009a8:	69ba      	ldr	r2, [r7, #24]
 80009aa:	6a3b      	ldr	r3, [r7, #32]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d306      	bcc.n	80009be <flashInSector+0x86>
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d802      	bhi.n	80009be <flashInSector+0x86>
    {
        ret = true;
 80009b8:	2301      	movs	r3, #1
 80009ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    if (flash_end >= sector_start && flash_end <= sector_end)
 80009be:	697a      	ldr	r2, [r7, #20]
 80009c0:	6a3b      	ldr	r3, [r7, #32]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d306      	bcc.n	80009d4 <flashInSector+0x9c>
 80009c6:	697a      	ldr	r2, [r7, #20]
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d802      	bhi.n	80009d4 <flashInSector+0x9c>
    {
        ret = true;
 80009ce:	2301      	movs	r3, #1
 80009d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return ret;
 80009d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80009d8:	4618      	mov	r0, r3
 80009da:	372c      	adds	r7, #44	@ 0x2c
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	20000210 	.word	0x20000210

080009e8 <ledInit>:
led_tbl_t led_tbl[LED_MAX_CH] = {
    {GPIOC, GPIO_PIN_13, GPIO_PIN_RESET, GPIO_PIN_SET},
};

bool ledInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
    bool ret                         = true;
 80009ee:	2301      	movs	r3, #1
 80009f0:	74fb      	strb	r3, [r7, #19]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	463b      	mov	r3, r7
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]

    /* GPIO Ports Clock Enable */
//    __HAL_RCC_GPIOC_CLK_ENABLE();

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a04:	4815      	ldr	r0, [pc, #84]	@ (8000a5c <ledInit+0x74>)
 8000a06:	f001 fc2d 	bl	8002264 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PC13 */
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2302      	movs	r3, #2
 8000a14:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < LED_MAX_CH; i++)
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
 8000a1a:	e016      	b.n	8000a4a <ledInit+0x62>
    {
        GPIO_InitStruct.Pin = led_tbl[i].pin;
 8000a1c:	4a10      	ldr	r2, [pc, #64]	@ (8000a60 <ledInit+0x78>)
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	00db      	lsls	r3, r3, #3
 8000a22:	4413      	add	r3, r2
 8000a24:	889b      	ldrh	r3, [r3, #4]
 8000a26:	603b      	str	r3, [r7, #0]
        HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8000a28:	4a0d      	ldr	r2, [pc, #52]	@ (8000a60 <ledInit+0x78>)
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000a30:	463a      	mov	r2, r7
 8000a32:	4611      	mov	r1, r2
 8000a34:	4618      	mov	r0, r3
 8000a36:	f001 f9d5 	bl	8001de4 <HAL_GPIO_Init>

        ledOff(i);
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f810 	bl	8000a64 <ledOff>
    for (int i = 0; i < LED_MAX_CH; i++)
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	3301      	adds	r3, #1
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	dde5      	ble.n	8000a1c <ledInit+0x34>
    }

    return ret;
 8000a50:	7cfb      	ldrb	r3, [r7, #19]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40011000 	.word	0x40011000
 8000a60:	20000004 	.word	0x20000004

08000a64 <ledOff>:
    if (ch >= LED_MAX_CH)
        return;
    HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}
void ledOff(uint8_t ch)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
    if (ch >= LED_MAX_CH)
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d111      	bne.n	8000a98 <ledOff+0x34>
        return;
    HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa0 <ledOff+0x3c>)
 8000a78:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	4a08      	ldr	r2, [pc, #32]	@ (8000aa0 <ledOff+0x3c>)
 8000a80:	00db      	lsls	r3, r3, #3
 8000a82:	4413      	add	r3, r2
 8000a84:	8899      	ldrh	r1, [r3, #4]
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	4a05      	ldr	r2, [pc, #20]	@ (8000aa0 <ledOff+0x3c>)
 8000a8a:	00db      	lsls	r3, r3, #3
 8000a8c:	4413      	add	r3, r2
 8000a8e:	79db      	ldrb	r3, [r3, #7]
 8000a90:	461a      	mov	r2, r3
 8000a92:	f001 fbe7 	bl	8002264 <HAL_GPIO_WritePin>
 8000a96:	e000      	b.n	8000a9a <ledOff+0x36>
        return;
 8000a98:	bf00      	nop
}
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000004 	.word	0x20000004

08000aa4 <ledToggle>:
void ledToggle(uint8_t ch)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
    if (ch >= LED_MAX_CH)
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d10d      	bne.n	8000ad0 <ledToggle+0x2c>
        return;
    HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	4a08      	ldr	r2, [pc, #32]	@ (8000ad8 <ledToggle+0x34>)
 8000ab8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	4906      	ldr	r1, [pc, #24]	@ (8000ad8 <ledToggle+0x34>)
 8000ac0:	00db      	lsls	r3, r3, #3
 8000ac2:	440b      	add	r3, r1
 8000ac4:	889b      	ldrh	r3, [r3, #4]
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4610      	mov	r0, r2
 8000aca:	f001 fbe3 	bl	8002294 <HAL_GPIO_TogglePin>
 8000ace:	e000      	b.n	8000ad2 <ledToggle+0x2e>
        return;
 8000ad0:	bf00      	nop
}
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000004 	.word	0x20000004

08000adc <resetInit>:
#include "rtc.h"

static uint32_t reset_count = 0;

bool resetInit(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
    bool ret = true;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	71fb      	strb	r3, [r7, #7]

    // push reset btn
    if (RCC->CSR & (1 << 26))
 8000ae6:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <resetInit+0x50>)
 8000ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d012      	beq.n	8000b18 <resetInit+0x3c>
    {
        rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1);
 8000af2:	2001      	movs	r0, #1
 8000af4:	f000 f84e 	bl	8000b94 <rtcBackupRegRead>
 8000af8:	4603      	mov	r3, r0
 8000afa:	3301      	adds	r3, #1
 8000afc:	4619      	mov	r1, r3
 8000afe:	2001      	movs	r0, #1
 8000b00:	f000 f838 	bl	8000b74 <rtcBackupRegWrite>
        delay(500);
 8000b04:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b08:	f7ff fbee 	bl	80002e8 <delay>
        reset_count = rtcBackupRegRead(1);
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f000 f841 	bl	8000b94 <rtcBackupRegRead>
 8000b12:	4603      	mov	r3, r0
 8000b14:	4a06      	ldr	r2, [pc, #24]	@ (8000b30 <resetInit+0x54>)
 8000b16:	6013      	str	r3, [r2, #0]
    }

    rtcBackupRegWrite(1, 0);
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f000 f82a 	bl	8000b74 <rtcBackupRegWrite>

    return ret;
 8000b20:	79fb      	ldrb	r3, [r7, #7]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	20000410 	.word	0x20000410

08000b34 <rtcInit>:
#include "rtc.h"

static RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
    bool ret = true;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	71fb      	strb	r3, [r7, #7]
//    __HAL_RCC_GPIOC_CLK_ENABLE();

    hrtc.Instance          = RTC;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <rtcInit+0x38>)
 8000b40:	4a0b      	ldr	r2, [pc, #44]	@ (8000b70 <rtcInit+0x3c>)
 8000b42:	601a      	str	r2, [r3, #0]
    hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000b44:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <rtcInit+0x38>)
 8000b46:	f04f 32ff 	mov.w	r2, #4294967295
 8000b4a:	605a      	str	r2, [r3, #4]
    hrtc.Init.OutPut       = RTC_OUTPUTSOURCE_NONE;
 8000b4c:	4b07      	ldr	r3, [pc, #28]	@ (8000b6c <rtcInit+0x38>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b52:	4806      	ldr	r0, [pc, #24]	@ (8000b6c <rtcInit+0x38>)
 8000b54:	f003 fea0 	bl	8004898 <HAL_RTC_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <rtcInit+0x2e>
    {
        Error_Handler();
 8000b5e:	f7ff fc43 	bl	80003e8 <Error_Handler>
    }

    return ret;
 8000b62:	79fb      	ldrb	r3, [r7, #7]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000414 	.word	0x20000414
 8000b70:	40002800 	.word	0x40002800

08000b74 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]

    HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8000b7e:	683a      	ldr	r2, [r7, #0]
 8000b80:	6879      	ldr	r1, [r7, #4]
 8000b82:	4803      	ldr	r0, [pc, #12]	@ (8000b90 <rtcBackupRegWrite+0x1c>)
 8000b84:	f003 ff92 	bl	8004aac <HAL_RTCEx_BKUPWrite>
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000414 	.word	0x20000414

08000b94 <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
    return HAL_RTCEx_BKUPRead(&hrtc, index);
 8000b9c:	6879      	ldr	r1, [r7, #4]
 8000b9e:	4804      	ldr	r0, [pc, #16]	@ (8000bb0 <rtcBackupRegRead+0x1c>)
 8000ba0:	f003 ff9e 	bl	8004ae0 <HAL_RTCEx_BKUPRead>
 8000ba4:	4603      	mov	r3, r0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000414 	.word	0x20000414

08000bb4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]

    if (rtcHandle->Instance == RTC)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a0b      	ldr	r2, [pc, #44]	@ (8000bf0 <HAL_RTC_MspInit+0x3c>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d110      	bne.n	8000be8 <HAL_RTC_MspInit+0x34>
    {
        /* USER CODE BEGIN RTC_MspInit 0 */

        /* USER CODE END RTC_MspInit 0 */
        HAL_PWR_EnableBkUpAccess();
 8000bc6:	f003 f8df 	bl	8003d88 <HAL_PWR_EnableBkUpAccess>
        /* Enable BKP CLK enable for backup registers */
        __HAL_RCC_BKP_CLK_ENABLE();
 8000bca:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <HAL_RTC_MspInit+0x40>)
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	4a09      	ldr	r2, [pc, #36]	@ (8000bf4 <HAL_RTC_MspInit+0x40>)
 8000bd0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000bd4:	61d3      	str	r3, [r2, #28]
 8000bd6:	4b07      	ldr	r3, [pc, #28]	@ (8000bf4 <HAL_RTC_MspInit+0x40>)
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
        /* RTC clock enable */
        __HAL_RCC_RTC_ENABLE();
 8000be2:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <HAL_RTC_MspInit+0x44>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	601a      	str	r2, [r3, #0]
        /* USER CODE BEGIN RTC_MspInit 1 */

        /* USER CODE END RTC_MspInit 1 */
    }
}
 8000be8:	bf00      	nop
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40002800 	.word	0x40002800
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	4242043c 	.word	0x4242043c

08000bfc <uartInit>:

UART_HandleTypeDef huart1;
DMA_HandleTypeDef hdma_usart1_rx;

bool uartInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
    for (int i = 0; i < UART_MAX_CH; i++)
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	e007      	b.n	8000c18 <uartInit+0x1c>
    {
        is_open[i] = false;
 8000c08:	4a08      	ldr	r2, [pc, #32]	@ (8000c2c <uartInit+0x30>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	2200      	movs	r2, #0
 8000c10:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < UART_MAX_CH; i++)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	3301      	adds	r3, #1
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	ddf4      	ble.n	8000c08 <uartInit+0xc>
    }

    return true;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000428 	.word	0x20000428

08000c30 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	71fb      	strb	r3, [r7, #7]
    bool ret = false;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	73fb      	strb	r3, [r7, #15]
    switch (ch)
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d002      	beq.n	8000c4c <uartOpen+0x1c>
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d007      	beq.n	8000c5a <uartOpen+0x2a>
 8000c4a:	e074      	b.n	8000d36 <uartOpen+0x106>
    {
    case _DEF_UART1:
        is_open[ch] = true;
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	4a3c      	ldr	r2, [pc, #240]	@ (8000d40 <uartOpen+0x110>)
 8000c50:	2101      	movs	r1, #1
 8000c52:	54d1      	strb	r1, [r2, r3]
        ret         = true;
 8000c54:	2301      	movs	r3, #1
 8000c56:	73fb      	strb	r3, [r7, #15]
        break;
 8000c58:	e06d      	b.n	8000d36 <uartOpen+0x106>

    case _DEF_UART2:
        huart1.Instance          = USART1;
 8000c5a:	4b3a      	ldr	r3, [pc, #232]	@ (8000d44 <uartOpen+0x114>)
 8000c5c:	4a3a      	ldr	r2, [pc, #232]	@ (8000d48 <uartOpen+0x118>)
 8000c5e:	601a      	str	r2, [r3, #0]
        huart1.Init.BaudRate     = baud;
 8000c60:	4a38      	ldr	r2, [pc, #224]	@ (8000d44 <uartOpen+0x114>)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	6053      	str	r3, [r2, #4]
        huart1.Init.WordLength   = UART_WORDLENGTH_8B;
 8000c66:	4b37      	ldr	r3, [pc, #220]	@ (8000d44 <uartOpen+0x114>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
        huart1.Init.StopBits     = UART_STOPBITS_1;
 8000c6c:	4b35      	ldr	r3, [pc, #212]	@ (8000d44 <uartOpen+0x114>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
        huart1.Init.Parity       = UART_PARITY_NONE;
 8000c72:	4b34      	ldr	r3, [pc, #208]	@ (8000d44 <uartOpen+0x114>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
        huart1.Init.Mode         = UART_MODE_TX_RX;
 8000c78:	4b32      	ldr	r3, [pc, #200]	@ (8000d44 <uartOpen+0x114>)
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	615a      	str	r2, [r3, #20]
        huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8000c7e:	4b31      	ldr	r3, [pc, #196]	@ (8000d44 <uartOpen+0x114>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
        huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c84:	4b2f      	ldr	r3, [pc, #188]	@ (8000d44 <uartOpen+0x114>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]

        HAL_UART_DeInit(&huart1);
 8000c8a:	482e      	ldr	r0, [pc, #184]	@ (8000d44 <uartOpen+0x114>)
 8000c8c:	f003 ff94 	bl	8004bb8 <HAL_UART_DeInit>

        qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	011b      	lsls	r3, r3, #4
 8000c94:	4a2d      	ldr	r2, [pc, #180]	@ (8000d4c <uartOpen+0x11c>)
 8000c96:	4413      	add	r3, r2
 8000c98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c9c:	492c      	ldr	r1, [pc, #176]	@ (8000d50 <uartOpen+0x120>)
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fcef 	bl	8000682 <qbufferCreate>

        __HAL_RCC_DMA1_CLK_ENABLE();
 8000ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8000d54 <uartOpen+0x124>)
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	4a2a      	ldr	r2, [pc, #168]	@ (8000d54 <uartOpen+0x124>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	6153      	str	r3, [r2, #20]
 8000cb0:	4b28      	ldr	r3, [pc, #160]	@ (8000d54 <uartOpen+0x124>)
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
        HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	200f      	movs	r0, #15
 8000cc2:	f000 fb4c 	bl	800135e <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000cc6:	200f      	movs	r0, #15
 8000cc8:	f000 fb65 	bl	8001396 <HAL_NVIC_EnableIRQ>

        if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ccc:	481d      	ldr	r0, [pc, #116]	@ (8000d44 <uartOpen+0x114>)
 8000cce:	f003 ff23 	bl	8004b18 <HAL_UART_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d002      	beq.n	8000cde <uartOpen+0xae>
        {
            ret = false;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	73fb      	strb	r3, [r7, #15]
            }

            qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
            qbuffer[ch].out = qbuffer[ch].in;
        }
        break;
 8000cdc:	e02a      	b.n	8000d34 <uartOpen+0x104>
            ret         = true;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	73fb      	strb	r3, [r7, #15]
            is_open[ch] = true;
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	4a16      	ldr	r2, [pc, #88]	@ (8000d40 <uartOpen+0x110>)
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	54d1      	strb	r1, [r2, r3]
            if (HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) !=
 8000cea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cee:	4918      	ldr	r1, [pc, #96]	@ (8000d50 <uartOpen+0x120>)
 8000cf0:	4814      	ldr	r0, [pc, #80]	@ (8000d44 <uartOpen+0x114>)
 8000cf2:	f004 f81e 	bl	8004d32 <HAL_UART_Receive_DMA>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <uartOpen+0xd0>
                ret = false;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	73fb      	strb	r3, [r7, #15]
            qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	4a12      	ldr	r2, [pc, #72]	@ (8000d4c <uartOpen+0x11c>)
 8000d04:	011b      	lsls	r3, r3, #4
 8000d06:	4413      	add	r3, r2
 8000d08:	3308      	adds	r3, #8
 8000d0a:	6819      	ldr	r1, [r3, #0]
 8000d0c:	4b12      	ldr	r3, [pc, #72]	@ (8000d58 <uartOpen+0x128>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	685a      	ldr	r2, [r3, #4]
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	490d      	ldr	r1, [pc, #52]	@ (8000d4c <uartOpen+0x11c>)
 8000d18:	011b      	lsls	r3, r3, #4
 8000d1a:	440b      	add	r3, r1
 8000d1c:	601a      	str	r2, [r3, #0]
            qbuffer[ch].out = qbuffer[ch].in;
 8000d1e:	79fa      	ldrb	r2, [r7, #7]
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	490a      	ldr	r1, [pc, #40]	@ (8000d4c <uartOpen+0x11c>)
 8000d24:	0112      	lsls	r2, r2, #4
 8000d26:	440a      	add	r2, r1
 8000d28:	6812      	ldr	r2, [r2, #0]
 8000d2a:	4908      	ldr	r1, [pc, #32]	@ (8000d4c <uartOpen+0x11c>)
 8000d2c:	011b      	lsls	r3, r3, #4
 8000d2e:	440b      	add	r3, r1
 8000d30:	3304      	adds	r3, #4
 8000d32:	601a      	str	r2, [r3, #0]
        break;
 8000d34:	bf00      	nop
    }
    return ret;
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000428 	.word	0x20000428
 8000d44:	2000054c 	.word	0x2000054c
 8000d48:	40013800 	.word	0x40013800
 8000d4c:	2000042c 	.word	0x2000042c
 8000d50:	2000044c 	.word	0x2000044c
 8000d54:	40021000 	.word	0x40021000
 8000d58:	20000594 	.word	0x20000594

08000d5c <uartAvailable>:
uint32_t uartAvailable(uint8_t ch)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
    uint32_t ret = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]

    switch (ch)
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d002      	beq.n	8000d76 <uartAvailable+0x1a>
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d004      	beq.n	8000d7e <uartAvailable+0x22>
 8000d74:	e01b      	b.n	8000dae <uartAvailable+0x52>
    {
    case _DEF_UART1:
        ret = cdcAvailable();
 8000d76:	f008 fe21 	bl	80099bc <cdcAvailable>
 8000d7a:	60f8      	str	r0, [r7, #12]
        break;
 8000d7c:	e017      	b.n	8000dae <uartAvailable+0x52>

    case _DEF_UART2:
        qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	4a0d      	ldr	r2, [pc, #52]	@ (8000db8 <uartAvailable+0x5c>)
 8000d82:	011b      	lsls	r3, r3, #4
 8000d84:	4413      	add	r3, r2
 8000d86:	3308      	adds	r3, #8
 8000d88:	6819      	ldr	r1, [r3, #0]
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <uartAvailable+0x60>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	1a8a      	subs	r2, r1, r2
 8000d94:	4908      	ldr	r1, [pc, #32]	@ (8000db8 <uartAvailable+0x5c>)
 8000d96:	011b      	lsls	r3, r3, #4
 8000d98:	440b      	add	r3, r1
 8000d9a:	601a      	str	r2, [r3, #0]
        ret            = qbufferAvailable(&qbuffer[ch]);
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	4a05      	ldr	r2, [pc, #20]	@ (8000db8 <uartAvailable+0x5c>)
 8000da2:	4413      	add	r3, r2
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fcc2 	bl	800072e <qbufferAvailable>
 8000daa:	60f8      	str	r0, [r7, #12]
        break;
 8000dac:	bf00      	nop
    }

    return ret;
 8000dae:	68fb      	ldr	r3, [r7, #12]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	2000042c 	.word	0x2000042c
 8000dbc:	20000594 	.word	0x20000594

08000dc0 <uartRead>:
uint8_t uartRead(uint8_t ch)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
    uint8_t ret = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	73fb      	strb	r3, [r7, #15]

    switch (ch)
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d002      	beq.n	8000dda <uartRead+0x1a>
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d005      	beq.n	8000de4 <uartRead+0x24>
 8000dd8:	e00c      	b.n	8000df4 <uartRead+0x34>
    {
    case _DEF_UART1:
        ret = cdcRead();
 8000dda:	f008 fe0b 	bl	80099f4 <cdcRead>
 8000dde:	4603      	mov	r3, r0
 8000de0:	73fb      	strb	r3, [r7, #15]
        break;
 8000de2:	e007      	b.n	8000df4 <uartRead+0x34>

    case _DEF_UART2:
        qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8000de4:	f107 030f 	add.w	r3, r7, #15
 8000de8:	2201      	movs	r2, #1
 8000dea:	4619      	mov	r1, r3
 8000dec:	4804      	ldr	r0, [pc, #16]	@ (8000e00 <uartRead+0x40>)
 8000dee:	f7ff fc62 	bl	80006b6 <qbufferRead>
        break;
 8000df2:	bf00      	nop
    }

    return ret;
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000043c 	.word	0x2000043c

08000e04 <uartWrite>:
uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
 8000e10:	73fb      	strb	r3, [r7, #15]
    uint8_t ret = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	75fb      	strb	r3, [r7, #23]
    HAL_StatusTypeDef status;

    switch (ch)
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d002      	beq.n	8000e22 <uartWrite+0x1e>
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d007      	beq.n	8000e30 <uartWrite+0x2c>
 8000e20:	e015      	b.n	8000e4e <uartWrite+0x4a>
    {
    case _DEF_UART1:
        ret = cdcWrite(p_data, length);
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	68b8      	ldr	r0, [r7, #8]
 8000e26:	f008 fe37 	bl	8009a98 <cdcWrite>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	75fb      	strb	r3, [r7, #23]
        break;
 8000e2e:	e00e      	b.n	8000e4e <uartWrite+0x4a>

    case _DEF_UART2:
        status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	2364      	movs	r3, #100	@ 0x64
 8000e36:	68b9      	ldr	r1, [r7, #8]
 8000e38:	4807      	ldr	r0, [pc, #28]	@ (8000e58 <uartWrite+0x54>)
 8000e3a:	f003 feef 	bl	8004c1c <HAL_UART_Transmit>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	75bb      	strb	r3, [r7, #22]
        if (status == HAL_OK)
 8000e42:	7dbb      	ldrb	r3, [r7, #22]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d101      	bne.n	8000e4c <uartWrite+0x48>
        {
            ret = length;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000e4c:	bf00      	nop
    }

    return ret;
 8000e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	2000054c 	.word	0x2000054c

08000e5c <HAL_UART_ErrorCallback>:
    }
    return ret;
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
    {
    }
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr

08000e6e <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
        qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);

        HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
    }
#endif
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr

08000e80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0310 	add.w	r3, r7, #16
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
    if (uartHandle->Instance == USART1)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a33      	ldr	r2, [pc, #204]	@ (8000f68 <HAL_UART_MspInit+0xe8>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d15f      	bne.n	8000f60 <HAL_UART_MspInit+0xe0>
    {
        /* USER CODE BEGIN USART1_MspInit 0 */

        /* USER CODE END USART1_MspInit 0 */
        /* USART1 clock enable */
        __HAL_RCC_USART1_CLK_ENABLE();
 8000ea0:	4b32      	ldr	r3, [pc, #200]	@ (8000f6c <HAL_UART_MspInit+0xec>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	4a31      	ldr	r2, [pc, #196]	@ (8000f6c <HAL_UART_MspInit+0xec>)
 8000ea6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eaa:	6193      	str	r3, [r2, #24]
 8000eac:	4b2f      	ldr	r3, [pc, #188]	@ (8000f6c <HAL_UART_MspInit+0xec>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f6c <HAL_UART_MspInit+0xec>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	4a2b      	ldr	r2, [pc, #172]	@ (8000f6c <HAL_UART_MspInit+0xec>)
 8000ebe:	f043 0304 	orr.w	r3, r3, #4
 8000ec2:	6193      	str	r3, [r2, #24]
 8000ec4:	4b29      	ldr	r3, [pc, #164]	@ (8000f6c <HAL_UART_MspInit+0xec>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	f003 0304 	and.w	r3, r3, #4
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]
        /**USART1 GPIO Configuration
        PA9     ------> USART1_TX
        PA10     ------> USART1_RX
        */
        GPIO_InitStruct.Pin   = GPIO_PIN_9;
 8000ed0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ed4:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eda:	2303      	movs	r3, #3
 8000edc:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4822      	ldr	r0, [pc, #136]	@ (8000f70 <HAL_UART_MspInit+0xf0>)
 8000ee6:	f000 ff7d 	bl	8001de4 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin  = GPIO_PIN_10;
 8000eea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000eee:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	4619      	mov	r1, r3
 8000efe:	481c      	ldr	r0, [pc, #112]	@ (8000f70 <HAL_UART_MspInit+0xf0>)
 8000f00:	f000 ff70 	bl	8001de4 <HAL_GPIO_Init>

        /* USART1 DMA Init */
        /* USART1_RX Init */
        hdma_usart1_rx.Instance                 = DMA1_Channel5;
 8000f04:	4b1b      	ldr	r3, [pc, #108]	@ (8000f74 <HAL_UART_MspInit+0xf4>)
 8000f06:	4a1c      	ldr	r2, [pc, #112]	@ (8000f78 <HAL_UART_MspInit+0xf8>)
 8000f08:	601a      	str	r2, [r3, #0]
        hdma_usart1_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f74 <HAL_UART_MspInit+0xf4>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	605a      	str	r2, [r3, #4]
        hdma_usart1_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000f10:	4b18      	ldr	r3, [pc, #96]	@ (8000f74 <HAL_UART_MspInit+0xf4>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
        hdma_usart1_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8000f16:	4b17      	ldr	r3, [pc, #92]	@ (8000f74 <HAL_UART_MspInit+0xf4>)
 8000f18:	2280      	movs	r2, #128	@ 0x80
 8000f1a:	60da      	str	r2, [r3, #12]
        hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f1c:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <HAL_UART_MspInit+0xf4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
        hdma_usart1_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8000f22:	4b14      	ldr	r3, [pc, #80]	@ (8000f74 <HAL_UART_MspInit+0xf4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	615a      	str	r2, [r3, #20]
        hdma_usart1_rx.Init.Mode                = DMA_CIRCULAR;
 8000f28:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <HAL_UART_MspInit+0xf4>)
 8000f2a:	2220      	movs	r2, #32
 8000f2c:	619a      	str	r2, [r3, #24]
        hdma_usart1_rx.Init.Priority            = DMA_PRIORITY_LOW;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <HAL_UART_MspInit+0xf4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	61da      	str	r2, [r3, #28]
        if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000f34:	480f      	ldr	r0, [pc, #60]	@ (8000f74 <HAL_UART_MspInit+0xf4>)
 8000f36:	f000 fa57 	bl	80013e8 <HAL_DMA_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_UART_MspInit+0xc4>
        {
            Error_Handler();
 8000f40:	f7ff fa52 	bl	80003e8 <Error_Handler>
        }

        __HAL_LINKDMA(uartHandle, hdmarx, hdma_usart1_rx);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a0b      	ldr	r2, [pc, #44]	@ (8000f74 <HAL_UART_MspInit+0xf4>)
 8000f48:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f74 <HAL_UART_MspInit+0xf4>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6253      	str	r3, [r2, #36]	@ 0x24

        /* USART1 interrupt Init */
        HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	2025      	movs	r0, #37	@ 0x25
 8000f56:	f000 fa02 	bl	800135e <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f5a:	2025      	movs	r0, #37	@ 0x25
 8000f5c:	f000 fa1b 	bl	8001396 <HAL_NVIC_EnableIRQ>
        /* USER CODE BEGIN USART1_MspInit 1 */

        /* USER CODE END USART1_MspInit 1 */
    }
}
 8000f60:	bf00      	nop
 8000f62:	3720      	adds	r7, #32
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40013800 	.word	0x40013800
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40010800 	.word	0x40010800
 8000f74:	20000594 	.word	0x20000594
 8000f78:	40020058 	.word	0x40020058

08000f7c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

    if (uartHandle->Instance == USART1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0c      	ldr	r2, [pc, #48]	@ (8000fbc <HAL_UART_MspDeInit+0x40>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d112      	bne.n	8000fb4 <HAL_UART_MspDeInit+0x38>
    {
        /* USER CODE BEGIN USART1_MspDeInit 0 */

        /* USER CODE END USART1_MspDeInit 0 */
        /* Peripheral clock disable */
        __HAL_RCC_USART1_CLK_DISABLE();
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <HAL_UART_MspDeInit+0x44>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc0 <HAL_UART_MspDeInit+0x44>)
 8000f94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f98:	6193      	str	r3, [r2, #24]

        /**USART1 GPIO Configuration
        PA9     ------> USART1_TX
        PA10     ------> USART1_RX
        */
        HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9 | GPIO_PIN_10);
 8000f9a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000f9e:	4809      	ldr	r0, [pc, #36]	@ (8000fc4 <HAL_UART_MspDeInit+0x48>)
 8000fa0:	f001 f8a4 	bl	80020ec <HAL_GPIO_DeInit>

        /* USART1 DMA DeInit */
        HAL_DMA_DeInit(uartHandle->hdmarx);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 fa77 	bl	800149c <HAL_DMA_DeInit>

        /* USART1 interrupt Deinit */
        HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000fae:	2025      	movs	r0, #37	@ 0x25
 8000fb0:	f000 f9ff 	bl	80013b2 <HAL_NVIC_DisableIRQ>
        /* USER CODE BEGIN USART1_MspDeInit 1 */

        /* USER CODE END USART1_MspDeInit 1 */
    }
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40013800 	.word	0x40013800
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40010800 	.word	0x40010800

08000fc8 <usbInit>:

#include "usb.h"
#include "usb_device.h"


bool usbInit(void){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
  bool ret = true;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	75fb      	strb	r3, [r7, #23]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]

      GPIO_InitStruct.Pin   = GPIO_PIN_12;
 8000fde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fe2:	607b      	str	r3, [r7, #4]
      GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_OD;
 8000fe4:	2311      	movs	r3, #17
 8000fe6:	60bb      	str	r3, [r7, #8]
      GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2302      	movs	r3, #2
 8000fee:	613b      	str	r3, [r7, #16]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480f      	ldr	r0, [pc, #60]	@ (8001034 <usbInit+0x6c>)
 8000ff6:	f000 fef5 	bl	8001de4 <HAL_GPIO_Init>

      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001000:	480c      	ldr	r0, [pc, #48]	@ (8001034 <usbInit+0x6c>)
 8001002:	f001 f92f 	bl	8002264 <HAL_GPIO_WritePin>
      delay(100);
 8001006:	2064      	movs	r0, #100	@ 0x64
 8001008:	f7ff f96e 	bl	80002e8 <delay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001012:	4808      	ldr	r0, [pc, #32]	@ (8001034 <usbInit+0x6c>)
 8001014:	f001 f926 	bl	8002264 <HAL_GPIO_WritePin>

      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001018:	2300      	movs	r3, #0
 800101a:	60bb      	str	r3, [r7, #8]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	4619      	mov	r1, r3
 8001020:	4804      	ldr	r0, [pc, #16]	@ (8001034 <usbInit+0x6c>)
 8001022:	f000 fedf 	bl	8001de4 <HAL_GPIO_Init>

      MX_USB_DEVICE_Init();
 8001026:	f008 fc99 	bl	800995c <MX_USB_DEVICE_Init>

  return ret;
 800102a:	7dfb      	ldrb	r3, [r7, #23]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40010800 	.word	0x40010800

08001038 <hwInit>:
 */

#include "hw.h"

void hwInit(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
    bspInit();
 800103c:	f7ff f922 	bl	8000284 <bspInit>
    rtcInit();
 8001040:	f7ff fd78 	bl	8000b34 <rtcInit>

    resetInit();
 8001044:	f7ff fd4a 	bl	8000adc <resetInit>
    ledInit();
 8001048:	f7ff fcce 	bl	80009e8 <ledInit>
    usbInit();
 800104c:	f7ff ffbc 	bl	8000fc8 <usbInit>
    uartInit();
 8001050:	f7ff fdd4 	bl	8000bfc <uartInit>
    flashInit();
 8001054:	f7ff fb82 	bl	800075c <flashInit>
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}

0800105c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001060:	4b08      	ldr	r3, [pc, #32]	@ (8001084 <HAL_Init+0x28>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a07      	ldr	r2, [pc, #28]	@ (8001084 <HAL_Init+0x28>)
 8001066:	f043 0310 	orr.w	r3, r3, #16
 800106a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106c:	2003      	movs	r0, #3
 800106e:	f000 f96b 	bl	8001348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001072:	200f      	movs	r0, #15
 8001074:	f000 f808 	bl	8001088 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001078:	f7ff f9bc 	bl	80003f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40022000 	.word	0x40022000

08001088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001090:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <HAL_InitTick+0x54>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b12      	ldr	r3, [pc, #72]	@ (80010e0 <HAL_InitTick+0x58>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800109e:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f991 	bl	80013ce <HAL_SYSTICK_Config>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e00e      	b.n	80010d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b0f      	cmp	r3, #15
 80010ba:	d80a      	bhi.n	80010d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010bc:	2200      	movs	r2, #0
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295
 80010c4:	f000 f94b 	bl	800135e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c8:	4a06      	ldr	r2, [pc, #24]	@ (80010e4 <HAL_InitTick+0x5c>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e000      	b.n	80010d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000000 	.word	0x20000000
 80010e0:	20000010 	.word	0x20000010
 80010e4:	2000000c 	.word	0x2000000c

080010e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <HAL_IncTick+0x1c>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <HAL_IncTick+0x20>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	4a03      	ldr	r2, [pc, #12]	@ (8001108 <HAL_IncTick+0x20>)
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	20000010 	.word	0x20000010
 8001108:	200005d8 	.word	0x200005d8

0800110c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return uwTick;
 8001110:	4b02      	ldr	r3, [pc, #8]	@ (800111c <HAL_GetTick+0x10>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr
 800111c:	200005d8 	.word	0x200005d8

08001120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001128:	f7ff fff0 	bl	800110c <HAL_GetTick>
 800112c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001138:	d005      	beq.n	8001146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113a:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <HAL_Delay+0x44>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001146:	bf00      	nop
 8001148:	f7ff ffe0 	bl	800110c <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	429a      	cmp	r2, r3
 8001156:	d8f7      	bhi.n	8001148 <HAL_Delay+0x28>
  {
  }
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000010 	.word	0x20000010

08001168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001178:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001184:	4013      	ands	r3, r2
 8001186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001190:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001194:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119a:	4a04      	ldr	r2, [pc, #16]	@ (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	60d3      	str	r3, [r2, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b4:	4b04      	ldr	r3, [pc, #16]	@ (80011c8 <__NVIC_GetPriorityGrouping+0x18>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	f003 0307 	and.w	r3, r3, #7
}
 80011be:	4618      	mov	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	db0b      	blt.n	80011f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	f003 021f 	and.w	r2, r3, #31
 80011e4:	4906      	ldr	r1, [pc, #24]	@ (8001200 <__NVIC_EnableIRQ+0x34>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	095b      	lsrs	r3, r3, #5
 80011ec:	2001      	movs	r0, #1
 80011ee:	fa00 f202 	lsl.w	r2, r0, r2
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr
 8001200:	e000e100 	.word	0xe000e100

08001204 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	2b00      	cmp	r3, #0
 8001214:	db12      	blt.n	800123c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	f003 021f 	and.w	r2, r3, #31
 800121c:	490a      	ldr	r1, [pc, #40]	@ (8001248 <__NVIC_DisableIRQ+0x44>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	095b      	lsrs	r3, r3, #5
 8001224:	2001      	movs	r0, #1
 8001226:	fa00 f202 	lsl.w	r2, r0, r2
 800122a:	3320      	adds	r3, #32
 800122c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001230:	f3bf 8f4f 	dsb	sy
}
 8001234:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001236:	f3bf 8f6f 	isb	sy
}
 800123a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000e100 	.word	0xe000e100

0800124c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	db0a      	blt.n	8001276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	b2da      	uxtb	r2, r3
 8001264:	490c      	ldr	r1, [pc, #48]	@ (8001298 <__NVIC_SetPriority+0x4c>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	0112      	lsls	r2, r2, #4
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	440b      	add	r3, r1
 8001270:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001274:	e00a      	b.n	800128c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4908      	ldr	r1, [pc, #32]	@ (800129c <__NVIC_SetPriority+0x50>)
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	3b04      	subs	r3, #4
 8001284:	0112      	lsls	r2, r2, #4
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	440b      	add	r3, r1
 800128a:	761a      	strb	r2, [r3, #24]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000e100 	.word	0xe000e100
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	@ 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f1c3 0307 	rsb	r3, r3, #7
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	bf28      	it	cs
 80012be:	2304      	movcs	r3, #4
 80012c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3304      	adds	r3, #4
 80012c6:	2b06      	cmp	r3, #6
 80012c8:	d902      	bls.n	80012d0 <NVIC_EncodePriority+0x30>
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3b03      	subs	r3, #3
 80012ce:	e000      	b.n	80012d2 <NVIC_EncodePriority+0x32>
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	f04f 32ff 	mov.w	r2, #4294967295
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43da      	mvns	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	401a      	ands	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	43d9      	mvns	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	4313      	orrs	r3, r2
         );
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3724      	adds	r7, #36	@ 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001314:	d301      	bcc.n	800131a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001316:	2301      	movs	r3, #1
 8001318:	e00f      	b.n	800133a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131a:	4a0a      	ldr	r2, [pc, #40]	@ (8001344 <SysTick_Config+0x40>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001322:	210f      	movs	r1, #15
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f7ff ff90 	bl	800124c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800132c:	4b05      	ldr	r3, [pc, #20]	@ (8001344 <SysTick_Config+0x40>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001332:	4b04      	ldr	r3, [pc, #16]	@ (8001344 <SysTick_Config+0x40>)
 8001334:	2207      	movs	r2, #7
 8001336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	e000e010 	.word	0xe000e010

08001348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff09 	bl	8001168 <__NVIC_SetPriorityGrouping>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001370:	f7ff ff1e 	bl	80011b0 <__NVIC_GetPriorityGrouping>
 8001374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	6978      	ldr	r0, [r7, #20]
 800137c:	f7ff ff90 	bl	80012a0 <NVIC_EncodePriority>
 8001380:	4602      	mov	r2, r0
 8001382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff5f 	bl	800124c <__NVIC_SetPriority>
}
 800138e:	bf00      	nop
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff11 	bl	80011cc <__NVIC_EnableIRQ>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80013bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff1f 	bl	8001204 <__NVIC_DisableIRQ>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff ff94 	bl	8001304 <SysTick_Config>
 80013dc:	4603      	mov	r3, r0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e043      	b.n	8001486 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	4b22      	ldr	r3, [pc, #136]	@ (8001490 <HAL_DMA_Init+0xa8>)
 8001406:	4413      	add	r3, r2
 8001408:	4a22      	ldr	r2, [pc, #136]	@ (8001494 <HAL_DMA_Init+0xac>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	091b      	lsrs	r3, r3, #4
 8001410:	009a      	lsls	r2, r3, #2
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a1f      	ldr	r2, [pc, #124]	@ (8001498 <HAL_DMA_Init+0xb0>)
 800141a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2202      	movs	r2, #2
 8001420:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001432:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001436:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001440:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800144c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001458:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	4313      	orrs	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	bffdfff8 	.word	0xbffdfff8
 8001494:	cccccccd 	.word	0xcccccccd
 8001498:	40020000 	.word	0x40020000

0800149c <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e046      	b.n	800153c <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 0201 	bic.w	r2, r2, #1
 80014bc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2200      	movs	r2, #0
 80014cc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <HAL_DMA_DeInit+0xac>)
 80014e6:	4413      	add	r3, r2
 80014e8:	4a18      	ldr	r2, [pc, #96]	@ (800154c <HAL_DMA_DeInit+0xb0>)
 80014ea:	fba2 2303 	umull	r2, r3, r2, r3
 80014ee:	091b      	lsrs	r3, r3, #4
 80014f0:	009a      	lsls	r2, r3, #2
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a15      	ldr	r2, [pc, #84]	@ (8001550 <HAL_DMA_DeInit+0xb4>)
 80014fa:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001504:	2101      	movs	r1, #1
 8001506:	fa01 f202 	lsl.w	r2, r1, r2
 800150a:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferErrorCallback = NULL;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferAbortCallback = NULL;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	bffdfff8 	.word	0xbffdfff8
 800154c:	cccccccd 	.word	0xcccccccd
 8001550:	40020000 	.word	0x40020000

08001554 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f893 3020 	ldrb.w	r3, [r3, #32]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d101      	bne.n	8001574 <HAL_DMA_Start_IT+0x20>
 8001570:	2302      	movs	r3, #2
 8001572:	e04b      	b.n	800160c <HAL_DMA_Start_IT+0xb8>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b01      	cmp	r3, #1
 8001586:	d13a      	bne.n	80015fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2202      	movs	r2, #2
 800158c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2200      	movs	r2, #0
 8001594:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0201 	bic.w	r2, r2, #1
 80015a4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	68b9      	ldr	r1, [r7, #8]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f000 f9eb 	bl	8001988 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d008      	beq.n	80015cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f042 020e 	orr.w	r2, r2, #14
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	e00f      	b.n	80015ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 0204 	bic.w	r2, r2, #4
 80015da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 020a 	orr.w	r2, r2, #10
 80015ea:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 0201 	orr.w	r2, r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	e005      	b.n	800160a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001606:	2302      	movs	r3, #2
 8001608:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800160a:	7dfb      	ldrb	r3, [r7, #23]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800161c:	2300      	movs	r3, #0
 800161e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d008      	beq.n	800163e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2204      	movs	r2, #4
 8001630:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e020      	b.n	8001680 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 020e 	bic.w	r2, r2, #14
 800164c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 0201 	bic.w	r2, r2, #1
 800165c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001666:	2101      	movs	r1, #1
 8001668:	fa01 f202 	lsl.w	r2, r1, r2
 800166c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800167e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
	...

0800168c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001694:	2300      	movs	r3, #0
 8001696:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d005      	beq.n	80016b0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2204      	movs	r2, #4
 80016a8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	73fb      	strb	r3, [r7, #15]
 80016ae:	e051      	b.n	8001754 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 020e 	bic.w	r2, r2, #14
 80016be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0201 	bic.w	r2, r2, #1
 80016ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a22      	ldr	r2, [pc, #136]	@ (8001760 <HAL_DMA_Abort_IT+0xd4>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d029      	beq.n	800172e <HAL_DMA_Abort_IT+0xa2>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a21      	ldr	r2, [pc, #132]	@ (8001764 <HAL_DMA_Abort_IT+0xd8>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d022      	beq.n	800172a <HAL_DMA_Abort_IT+0x9e>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a1f      	ldr	r2, [pc, #124]	@ (8001768 <HAL_DMA_Abort_IT+0xdc>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d01a      	beq.n	8001724 <HAL_DMA_Abort_IT+0x98>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a1e      	ldr	r2, [pc, #120]	@ (800176c <HAL_DMA_Abort_IT+0xe0>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d012      	beq.n	800171e <HAL_DMA_Abort_IT+0x92>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a1c      	ldr	r2, [pc, #112]	@ (8001770 <HAL_DMA_Abort_IT+0xe4>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d00a      	beq.n	8001718 <HAL_DMA_Abort_IT+0x8c>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a1b      	ldr	r2, [pc, #108]	@ (8001774 <HAL_DMA_Abort_IT+0xe8>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d102      	bne.n	8001712 <HAL_DMA_Abort_IT+0x86>
 800170c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001710:	e00e      	b.n	8001730 <HAL_DMA_Abort_IT+0xa4>
 8001712:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001716:	e00b      	b.n	8001730 <HAL_DMA_Abort_IT+0xa4>
 8001718:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800171c:	e008      	b.n	8001730 <HAL_DMA_Abort_IT+0xa4>
 800171e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001722:	e005      	b.n	8001730 <HAL_DMA_Abort_IT+0xa4>
 8001724:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001728:	e002      	b.n	8001730 <HAL_DMA_Abort_IT+0xa4>
 800172a:	2310      	movs	r3, #16
 800172c:	e000      	b.n	8001730 <HAL_DMA_Abort_IT+0xa4>
 800172e:	2301      	movs	r3, #1
 8001730:	4a11      	ldr	r2, [pc, #68]	@ (8001778 <HAL_DMA_Abort_IT+0xec>)
 8001732:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	4798      	blx	r3
    } 
  }
  return status;
 8001754:	7bfb      	ldrb	r3, [r7, #15]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40020008 	.word	0x40020008
 8001764:	4002001c 	.word	0x4002001c
 8001768:	40020030 	.word	0x40020030
 800176c:	40020044 	.word	0x40020044
 8001770:	40020058 	.word	0x40020058
 8001774:	4002006c 	.word	0x4002006c
 8001778:	40020000 	.word	0x40020000

0800177c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001798:	2204      	movs	r2, #4
 800179a:	409a      	lsls	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4013      	ands	r3, r2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d04f      	beq.n	8001844 <HAL_DMA_IRQHandler+0xc8>
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d04a      	beq.n	8001844 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0320 	and.w	r3, r3, #32
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d107      	bne.n	80017cc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0204 	bic.w	r2, r2, #4
 80017ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a66      	ldr	r2, [pc, #408]	@ (800196c <HAL_DMA_IRQHandler+0x1f0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d029      	beq.n	800182a <HAL_DMA_IRQHandler+0xae>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a65      	ldr	r2, [pc, #404]	@ (8001970 <HAL_DMA_IRQHandler+0x1f4>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d022      	beq.n	8001826 <HAL_DMA_IRQHandler+0xaa>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a63      	ldr	r2, [pc, #396]	@ (8001974 <HAL_DMA_IRQHandler+0x1f8>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d01a      	beq.n	8001820 <HAL_DMA_IRQHandler+0xa4>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a62      	ldr	r2, [pc, #392]	@ (8001978 <HAL_DMA_IRQHandler+0x1fc>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d012      	beq.n	800181a <HAL_DMA_IRQHandler+0x9e>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a60      	ldr	r2, [pc, #384]	@ (800197c <HAL_DMA_IRQHandler+0x200>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d00a      	beq.n	8001814 <HAL_DMA_IRQHandler+0x98>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a5f      	ldr	r2, [pc, #380]	@ (8001980 <HAL_DMA_IRQHandler+0x204>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d102      	bne.n	800180e <HAL_DMA_IRQHandler+0x92>
 8001808:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800180c:	e00e      	b.n	800182c <HAL_DMA_IRQHandler+0xb0>
 800180e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001812:	e00b      	b.n	800182c <HAL_DMA_IRQHandler+0xb0>
 8001814:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001818:	e008      	b.n	800182c <HAL_DMA_IRQHandler+0xb0>
 800181a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800181e:	e005      	b.n	800182c <HAL_DMA_IRQHandler+0xb0>
 8001820:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001824:	e002      	b.n	800182c <HAL_DMA_IRQHandler+0xb0>
 8001826:	2340      	movs	r3, #64	@ 0x40
 8001828:	e000      	b.n	800182c <HAL_DMA_IRQHandler+0xb0>
 800182a:	2304      	movs	r3, #4
 800182c:	4a55      	ldr	r2, [pc, #340]	@ (8001984 <HAL_DMA_IRQHandler+0x208>)
 800182e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 8094 	beq.w	8001962 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001842:	e08e      	b.n	8001962 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001848:	2202      	movs	r2, #2
 800184a:	409a      	lsls	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4013      	ands	r3, r2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d056      	beq.n	8001902 <HAL_DMA_IRQHandler+0x186>
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d051      	beq.n	8001902 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0320 	and.w	r3, r3, #32
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10b      	bne.n	8001884 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 020a 	bic.w	r2, r2, #10
 800187a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a38      	ldr	r2, [pc, #224]	@ (800196c <HAL_DMA_IRQHandler+0x1f0>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d029      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x166>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a37      	ldr	r2, [pc, #220]	@ (8001970 <HAL_DMA_IRQHandler+0x1f4>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d022      	beq.n	80018de <HAL_DMA_IRQHandler+0x162>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a35      	ldr	r2, [pc, #212]	@ (8001974 <HAL_DMA_IRQHandler+0x1f8>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d01a      	beq.n	80018d8 <HAL_DMA_IRQHandler+0x15c>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a34      	ldr	r2, [pc, #208]	@ (8001978 <HAL_DMA_IRQHandler+0x1fc>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d012      	beq.n	80018d2 <HAL_DMA_IRQHandler+0x156>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a32      	ldr	r2, [pc, #200]	@ (800197c <HAL_DMA_IRQHandler+0x200>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d00a      	beq.n	80018cc <HAL_DMA_IRQHandler+0x150>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a31      	ldr	r2, [pc, #196]	@ (8001980 <HAL_DMA_IRQHandler+0x204>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d102      	bne.n	80018c6 <HAL_DMA_IRQHandler+0x14a>
 80018c0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80018c4:	e00e      	b.n	80018e4 <HAL_DMA_IRQHandler+0x168>
 80018c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018ca:	e00b      	b.n	80018e4 <HAL_DMA_IRQHandler+0x168>
 80018cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018d0:	e008      	b.n	80018e4 <HAL_DMA_IRQHandler+0x168>
 80018d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018d6:	e005      	b.n	80018e4 <HAL_DMA_IRQHandler+0x168>
 80018d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018dc:	e002      	b.n	80018e4 <HAL_DMA_IRQHandler+0x168>
 80018de:	2320      	movs	r3, #32
 80018e0:	e000      	b.n	80018e4 <HAL_DMA_IRQHandler+0x168>
 80018e2:	2302      	movs	r3, #2
 80018e4:	4a27      	ldr	r2, [pc, #156]	@ (8001984 <HAL_DMA_IRQHandler+0x208>)
 80018e6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d034      	beq.n	8001962 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001900:	e02f      	b.n	8001962 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001906:	2208      	movs	r2, #8
 8001908:	409a      	lsls	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4013      	ands	r3, r2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d028      	beq.n	8001964 <HAL_DMA_IRQHandler+0x1e8>
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	f003 0308 	and.w	r3, r3, #8
 8001918:	2b00      	cmp	r3, #0
 800191a:	d023      	beq.n	8001964 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 020e 	bic.w	r2, r2, #14
 800192a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001934:	2101      	movs	r1, #1
 8001936:	fa01 f202 	lsl.w	r2, r1, r2
 800193a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	2b00      	cmp	r3, #0
 8001958:	d004      	beq.n	8001964 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	4798      	blx	r3
    }
  }
  return;
 8001962:	bf00      	nop
 8001964:	bf00      	nop
}
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40020008 	.word	0x40020008
 8001970:	4002001c 	.word	0x4002001c
 8001974:	40020030 	.word	0x40020030
 8001978:	40020044 	.word	0x40020044
 800197c:	40020058 	.word	0x40020058
 8001980:	4002006c 	.word	0x4002006c
 8001984:	40020000 	.word	0x40020000

08001988 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
 8001994:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800199e:	2101      	movs	r1, #1
 80019a0:	fa01 f202 	lsl.w	r2, r1, r2
 80019a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b10      	cmp	r3, #16
 80019b4:	d108      	bne.n	80019c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019c6:	e007      	b.n	80019d8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68ba      	ldr	r2, [r7, #8]
 80019ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	60da      	str	r2, [r3, #12]
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr
	...

080019e4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80019e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019e6:	b087      	sub	sp, #28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80019fe:	4b2f      	ldr	r3, [pc, #188]	@ (8001abc <HAL_FLASH_Program+0xd8>)
 8001a00:	7e1b      	ldrb	r3, [r3, #24]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d101      	bne.n	8001a0a <HAL_FLASH_Program+0x26>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e054      	b.n	8001ab4 <HAL_FLASH_Program+0xd0>
 8001a0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001abc <HAL_FLASH_Program+0xd8>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001a10:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001a14:	f000 f8a8 	bl	8001b68 <FLASH_WaitForLastOperation>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001a1c:	7dfb      	ldrb	r3, [r7, #23]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d144      	bne.n	8001aac <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d102      	bne.n	8001a2e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	757b      	strb	r3, [r7, #21]
 8001a2c:	e007      	b.n	8001a3e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d102      	bne.n	8001a3a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001a34:	2302      	movs	r3, #2
 8001a36:	757b      	strb	r3, [r7, #21]
 8001a38:	e001      	b.n	8001a3e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001a3a:	2304      	movs	r3, #4
 8001a3c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	75bb      	strb	r3, [r7, #22]
 8001a42:	e02d      	b.n	8001aa0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001a44:	7dbb      	ldrb	r3, [r7, #22]
 8001a46:	005a      	lsls	r2, r3, #1
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	eb02 0c03 	add.w	ip, r2, r3
 8001a4e:	7dbb      	ldrb	r3, [r7, #22]
 8001a50:	0119      	lsls	r1, r3, #4
 8001a52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a56:	f1c1 0620 	rsb	r6, r1, #32
 8001a5a:	f1a1 0020 	sub.w	r0, r1, #32
 8001a5e:	fa22 f401 	lsr.w	r4, r2, r1
 8001a62:	fa03 f606 	lsl.w	r6, r3, r6
 8001a66:	4334      	orrs	r4, r6
 8001a68:	fa23 f000 	lsr.w	r0, r3, r0
 8001a6c:	4304      	orrs	r4, r0
 8001a6e:	fa23 f501 	lsr.w	r5, r3, r1
 8001a72:	b2a3      	uxth	r3, r4
 8001a74:	4619      	mov	r1, r3
 8001a76:	4660      	mov	r0, ip
 8001a78:	f000 f85a 	bl	8001b30 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001a7c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001a80:	f000 f872 	bl	8001b68 <FLASH_WaitForLastOperation>
 8001a84:	4603      	mov	r3, r0
 8001a86:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001a88:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac0 <HAL_FLASH_Program+0xdc>)
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	4a0c      	ldr	r2, [pc, #48]	@ (8001ac0 <HAL_FLASH_Program+0xdc>)
 8001a8e:	f023 0301 	bic.w	r3, r3, #1
 8001a92:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001a94:	7dfb      	ldrb	r3, [r7, #23]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d107      	bne.n	8001aaa <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001a9a:	7dbb      	ldrb	r3, [r7, #22]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	75bb      	strb	r3, [r7, #22]
 8001aa0:	7dba      	ldrb	r2, [r7, #22]
 8001aa2:	7d7b      	ldrb	r3, [r7, #21]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d3cd      	bcc.n	8001a44 <HAL_FLASH_Program+0x60>
 8001aa8:	e000      	b.n	8001aac <HAL_FLASH_Program+0xc8>
      {
        break;
 8001aaa:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001aac:	4b03      	ldr	r3, [pc, #12]	@ (8001abc <HAL_FLASH_Program+0xd8>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	761a      	strb	r2, [r3, #24]

  return status;
 8001ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	371c      	adds	r7, #28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001abc:	200005e0 	.word	0x200005e0
 8001ac0:	40022000 	.word	0x40022000

08001ac4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001ace:	4b0d      	ldr	r3, [pc, #52]	@ (8001b04 <HAL_FLASH_Unlock+0x40>)
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00d      	beq.n	8001af6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ada:	4b0a      	ldr	r3, [pc, #40]	@ (8001b04 <HAL_FLASH_Unlock+0x40>)
 8001adc:	4a0a      	ldr	r2, [pc, #40]	@ (8001b08 <HAL_FLASH_Unlock+0x44>)
 8001ade:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ae0:	4b08      	ldr	r3, [pc, #32]	@ (8001b04 <HAL_FLASH_Unlock+0x40>)
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8001b0c <HAL_FLASH_Unlock+0x48>)
 8001ae4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001ae6:	4b07      	ldr	r3, [pc, #28]	@ (8001b04 <HAL_FLASH_Unlock+0x40>)
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001af6:	79fb      	ldrb	r3, [r7, #7]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40022000 	.word	0x40022000
 8001b08:	45670123 	.word	0x45670123
 8001b0c:	cdef89ab 	.word	0xcdef89ab

08001b10 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001b14:	4b05      	ldr	r3, [pc, #20]	@ (8001b2c <HAL_FLASH_Lock+0x1c>)
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	4a04      	ldr	r2, [pc, #16]	@ (8001b2c <HAL_FLASH_Lock+0x1c>)
 8001b1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b1e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40022000 	.word	0x40022000

08001b30 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b3c:	4b08      	ldr	r3, [pc, #32]	@ (8001b60 <FLASH_Program_HalfWord+0x30>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001b42:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <FLASH_Program_HalfWord+0x34>)
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	4a07      	ldr	r2, [pc, #28]	@ (8001b64 <FLASH_Program_HalfWord+0x34>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	887a      	ldrh	r2, [r7, #2]
 8001b52:	801a      	strh	r2, [r3, #0]
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	200005e0 	.word	0x200005e0
 8001b64:	40022000 	.word	0x40022000

08001b68 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001b70:	f7ff facc 	bl	800110c <HAL_GetTick>
 8001b74:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001b76:	e010      	b.n	8001b9a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b7e:	d00c      	beq.n	8001b9a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d007      	beq.n	8001b96 <FLASH_WaitForLastOperation+0x2e>
 8001b86:	f7ff fac1 	bl	800110c <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d201      	bcs.n	8001b9a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e025      	b.n	8001be6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001b9a:	4b15      	ldr	r3, [pc, #84]	@ (8001bf0 <FLASH_WaitForLastOperation+0x88>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1e8      	bne.n	8001b78 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001ba6:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <FLASH_WaitForLastOperation+0x88>)
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	f003 0320 	and.w	r3, r3, #32
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf0 <FLASH_WaitForLastOperation+0x88>)
 8001bb4:	2220      	movs	r2, #32
 8001bb6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <FLASH_WaitForLastOperation+0x88>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	f003 0310 	and.w	r3, r3, #16
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10b      	bne.n	8001bdc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf0 <FLASH_WaitForLastOperation+0x88>)
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d105      	bne.n	8001bdc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001bd0:	4b07      	ldr	r3, [pc, #28]	@ (8001bf0 <FLASH_WaitForLastOperation+0x88>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001bdc:	f000 f80a 	bl	8001bf4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40022000 	.word	0x40022000

08001bf4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001bfe:	4b23      	ldr	r3, [pc, #140]	@ (8001c8c <FLASH_SetErrorCode+0x98>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	f003 0310 	and.w	r3, r3, #16
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d009      	beq.n	8001c1e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001c0a:	4b21      	ldr	r3, [pc, #132]	@ (8001c90 <FLASH_SetErrorCode+0x9c>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	f043 0302 	orr.w	r3, r3, #2
 8001c12:	4a1f      	ldr	r2, [pc, #124]	@ (8001c90 <FLASH_SetErrorCode+0x9c>)
 8001c14:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f043 0310 	orr.w	r3, r3, #16
 8001c1c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c8c <FLASH_SetErrorCode+0x98>)
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d009      	beq.n	8001c3e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001c2a:	4b19      	ldr	r3, [pc, #100]	@ (8001c90 <FLASH_SetErrorCode+0x9c>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	4a17      	ldr	r2, [pc, #92]	@ (8001c90 <FLASH_SetErrorCode+0x9c>)
 8001c34:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f043 0304 	orr.w	r3, r3, #4
 8001c3c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001c3e:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <FLASH_SetErrorCode+0x98>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00b      	beq.n	8001c62 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001c4a:	4b11      	ldr	r3, [pc, #68]	@ (8001c90 <FLASH_SetErrorCode+0x9c>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f043 0304 	orr.w	r3, r3, #4
 8001c52:	4a0f      	ldr	r2, [pc, #60]	@ (8001c90 <FLASH_SetErrorCode+0x9c>)
 8001c54:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001c56:	4b0d      	ldr	r3, [pc, #52]	@ (8001c8c <FLASH_SetErrorCode+0x98>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001c8c <FLASH_SetErrorCode+0x98>)
 8001c5c:	f023 0301 	bic.w	r3, r3, #1
 8001c60:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f240 1201 	movw	r2, #257	@ 0x101
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d106      	bne.n	8001c7a <FLASH_SetErrorCode+0x86>
 8001c6c:	4b07      	ldr	r3, [pc, #28]	@ (8001c8c <FLASH_SetErrorCode+0x98>)
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	4a06      	ldr	r2, [pc, #24]	@ (8001c8c <FLASH_SetErrorCode+0x98>)
 8001c72:	f023 0301 	bic.w	r3, r3, #1
 8001c76:	61d3      	str	r3, [r2, #28]
}  
 8001c78:	e002      	b.n	8001c80 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001c7a:	4a04      	ldr	r2, [pc, #16]	@ (8001c8c <FLASH_SetErrorCode+0x98>)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	60d3      	str	r3, [r2, #12]
}  
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40022000 	.word	0x40022000
 8001c90:	200005e0 	.word	0x200005e0

08001c94 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001ca6:	4b2f      	ldr	r3, [pc, #188]	@ (8001d64 <HAL_FLASHEx_Erase+0xd0>)
 8001ca8:	7e1b      	ldrb	r3, [r3, #24]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_FLASHEx_Erase+0x1e>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e053      	b.n	8001d5a <HAL_FLASHEx_Erase+0xc6>
 8001cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8001d64 <HAL_FLASHEx_Erase+0xd0>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d116      	bne.n	8001cee <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001cc0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001cc4:	f7ff ff50 	bl	8001b68 <FLASH_WaitForLastOperation>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d141      	bne.n	8001d52 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f000 f84c 	bl	8001d6c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001cd4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001cd8:	f7ff ff46 	bl	8001b68 <FLASH_WaitForLastOperation>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001ce0:	4b21      	ldr	r3, [pc, #132]	@ (8001d68 <HAL_FLASHEx_Erase+0xd4>)
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	4a20      	ldr	r2, [pc, #128]	@ (8001d68 <HAL_FLASHEx_Erase+0xd4>)
 8001ce6:	f023 0304 	bic.w	r3, r3, #4
 8001cea:	6113      	str	r3, [r2, #16]
 8001cec:	e031      	b.n	8001d52 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001cee:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001cf2:	f7ff ff39 	bl	8001b68 <FLASH_WaitForLastOperation>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d12a      	bne.n	8001d52 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8001d02:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	e019      	b.n	8001d40 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001d0c:	68b8      	ldr	r0, [r7, #8]
 8001d0e:	f000 f849 	bl	8001da4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d12:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001d16:	f7ff ff27 	bl	8001b68 <FLASH_WaitForLastOperation>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001d1e:	4b12      	ldr	r3, [pc, #72]	@ (8001d68 <HAL_FLASHEx_Erase+0xd4>)
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	4a11      	ldr	r2, [pc, #68]	@ (8001d68 <HAL_FLASHEx_Erase+0xd4>)
 8001d24:	f023 0302 	bic.w	r3, r3, #2
 8001d28:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	601a      	str	r2, [r3, #0]
            break;
 8001d36:	e00c      	b.n	8001d52 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d3e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	029a      	lsls	r2, r3, #10
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d3dc      	bcc.n	8001d0c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001d52:	4b04      	ldr	r3, [pc, #16]	@ (8001d64 <HAL_FLASHEx_Erase+0xd0>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	761a      	strb	r2, [r3, #24]

  return status;
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200005e0 	.word	0x200005e0
 8001d68:	40022000 	.word	0x40022000

08001d6c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001d74:	4b09      	ldr	r3, [pc, #36]	@ (8001d9c <FLASH_MassErase+0x30>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001d7a:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <FLASH_MassErase+0x34>)
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	4a08      	ldr	r2, [pc, #32]	@ (8001da0 <FLASH_MassErase+0x34>)
 8001d80:	f043 0304 	orr.w	r3, r3, #4
 8001d84:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001d86:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <FLASH_MassErase+0x34>)
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	4a05      	ldr	r2, [pc, #20]	@ (8001da0 <FLASH_MassErase+0x34>)
 8001d8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d90:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	200005e0 	.word	0x200005e0
 8001da0:	40022000 	.word	0x40022000

08001da4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001dac:	4b0b      	ldr	r3, [pc, #44]	@ (8001ddc <FLASH_PageErase+0x38>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001db2:	4b0b      	ldr	r3, [pc, #44]	@ (8001de0 <FLASH_PageErase+0x3c>)
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	4a0a      	ldr	r2, [pc, #40]	@ (8001de0 <FLASH_PageErase+0x3c>)
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001dbe:	4a08      	ldr	r2, [pc, #32]	@ (8001de0 <FLASH_PageErase+0x3c>)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001dc4:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <FLASH_PageErase+0x3c>)
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	4a05      	ldr	r2, [pc, #20]	@ (8001de0 <FLASH_PageErase+0x3c>)
 8001dca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dce:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	200005e0 	.word	0x200005e0
 8001de0:	40022000 	.word	0x40022000

08001de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b08b      	sub	sp, #44	@ 0x2c
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dee:	2300      	movs	r3, #0
 8001df0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001df2:	2300      	movs	r3, #0
 8001df4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001df6:	e169      	b.n	80020cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001df8:	2201      	movs	r2, #1
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	69fa      	ldr	r2, [r7, #28]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	f040 8158 	bne.w	80020c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	4a9a      	ldr	r2, [pc, #616]	@ (8002084 <HAL_GPIO_Init+0x2a0>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d05e      	beq.n	8001ede <HAL_GPIO_Init+0xfa>
 8001e20:	4a98      	ldr	r2, [pc, #608]	@ (8002084 <HAL_GPIO_Init+0x2a0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d875      	bhi.n	8001f12 <HAL_GPIO_Init+0x12e>
 8001e26:	4a98      	ldr	r2, [pc, #608]	@ (8002088 <HAL_GPIO_Init+0x2a4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d058      	beq.n	8001ede <HAL_GPIO_Init+0xfa>
 8001e2c:	4a96      	ldr	r2, [pc, #600]	@ (8002088 <HAL_GPIO_Init+0x2a4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d86f      	bhi.n	8001f12 <HAL_GPIO_Init+0x12e>
 8001e32:	4a96      	ldr	r2, [pc, #600]	@ (800208c <HAL_GPIO_Init+0x2a8>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d052      	beq.n	8001ede <HAL_GPIO_Init+0xfa>
 8001e38:	4a94      	ldr	r2, [pc, #592]	@ (800208c <HAL_GPIO_Init+0x2a8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d869      	bhi.n	8001f12 <HAL_GPIO_Init+0x12e>
 8001e3e:	4a94      	ldr	r2, [pc, #592]	@ (8002090 <HAL_GPIO_Init+0x2ac>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d04c      	beq.n	8001ede <HAL_GPIO_Init+0xfa>
 8001e44:	4a92      	ldr	r2, [pc, #584]	@ (8002090 <HAL_GPIO_Init+0x2ac>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d863      	bhi.n	8001f12 <HAL_GPIO_Init+0x12e>
 8001e4a:	4a92      	ldr	r2, [pc, #584]	@ (8002094 <HAL_GPIO_Init+0x2b0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d046      	beq.n	8001ede <HAL_GPIO_Init+0xfa>
 8001e50:	4a90      	ldr	r2, [pc, #576]	@ (8002094 <HAL_GPIO_Init+0x2b0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d85d      	bhi.n	8001f12 <HAL_GPIO_Init+0x12e>
 8001e56:	2b12      	cmp	r3, #18
 8001e58:	d82a      	bhi.n	8001eb0 <HAL_GPIO_Init+0xcc>
 8001e5a:	2b12      	cmp	r3, #18
 8001e5c:	d859      	bhi.n	8001f12 <HAL_GPIO_Init+0x12e>
 8001e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e64 <HAL_GPIO_Init+0x80>)
 8001e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e64:	08001edf 	.word	0x08001edf
 8001e68:	08001eb9 	.word	0x08001eb9
 8001e6c:	08001ecb 	.word	0x08001ecb
 8001e70:	08001f0d 	.word	0x08001f0d
 8001e74:	08001f13 	.word	0x08001f13
 8001e78:	08001f13 	.word	0x08001f13
 8001e7c:	08001f13 	.word	0x08001f13
 8001e80:	08001f13 	.word	0x08001f13
 8001e84:	08001f13 	.word	0x08001f13
 8001e88:	08001f13 	.word	0x08001f13
 8001e8c:	08001f13 	.word	0x08001f13
 8001e90:	08001f13 	.word	0x08001f13
 8001e94:	08001f13 	.word	0x08001f13
 8001e98:	08001f13 	.word	0x08001f13
 8001e9c:	08001f13 	.word	0x08001f13
 8001ea0:	08001f13 	.word	0x08001f13
 8001ea4:	08001f13 	.word	0x08001f13
 8001ea8:	08001ec1 	.word	0x08001ec1
 8001eac:	08001ed5 	.word	0x08001ed5
 8001eb0:	4a79      	ldr	r2, [pc, #484]	@ (8002098 <HAL_GPIO_Init+0x2b4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d013      	beq.n	8001ede <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eb6:	e02c      	b.n	8001f12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	623b      	str	r3, [r7, #32]
          break;
 8001ebe:	e029      	b.n	8001f14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	623b      	str	r3, [r7, #32]
          break;
 8001ec8:	e024      	b.n	8001f14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	3308      	adds	r3, #8
 8001ed0:	623b      	str	r3, [r7, #32]
          break;
 8001ed2:	e01f      	b.n	8001f14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	330c      	adds	r3, #12
 8001eda:	623b      	str	r3, [r7, #32]
          break;
 8001edc:	e01a      	b.n	8001f14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d102      	bne.n	8001eec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ee6:	2304      	movs	r3, #4
 8001ee8:	623b      	str	r3, [r7, #32]
          break;
 8001eea:	e013      	b.n	8001f14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d105      	bne.n	8001f00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ef4:	2308      	movs	r3, #8
 8001ef6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69fa      	ldr	r2, [r7, #28]
 8001efc:	611a      	str	r2, [r3, #16]
          break;
 8001efe:	e009      	b.n	8001f14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f00:	2308      	movs	r3, #8
 8001f02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69fa      	ldr	r2, [r7, #28]
 8001f08:	615a      	str	r2, [r3, #20]
          break;
 8001f0a:	e003      	b.n	8001f14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	623b      	str	r3, [r7, #32]
          break;
 8001f10:	e000      	b.n	8001f14 <HAL_GPIO_Init+0x130>
          break;
 8001f12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2bff      	cmp	r3, #255	@ 0xff
 8001f18:	d801      	bhi.n	8001f1e <HAL_GPIO_Init+0x13a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	e001      	b.n	8001f22 <HAL_GPIO_Init+0x13e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3304      	adds	r3, #4
 8001f22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	2bff      	cmp	r3, #255	@ 0xff
 8001f28:	d802      	bhi.n	8001f30 <HAL_GPIO_Init+0x14c>
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	e002      	b.n	8001f36 <HAL_GPIO_Init+0x152>
 8001f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f32:	3b08      	subs	r3, #8
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	210f      	movs	r1, #15
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	fa01 f303 	lsl.w	r3, r1, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	401a      	ands	r2, r3
 8001f48:	6a39      	ldr	r1, [r7, #32]
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f50:	431a      	orrs	r2, r3
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 80b1 	beq.w	80020c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f64:	4b4d      	ldr	r3, [pc, #308]	@ (800209c <HAL_GPIO_Init+0x2b8>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	4a4c      	ldr	r2, [pc, #304]	@ (800209c <HAL_GPIO_Init+0x2b8>)
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	6193      	str	r3, [r2, #24]
 8001f70:	4b4a      	ldr	r3, [pc, #296]	@ (800209c <HAL_GPIO_Init+0x2b8>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f7c:	4a48      	ldr	r2, [pc, #288]	@ (80020a0 <HAL_GPIO_Init+0x2bc>)
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f80:	089b      	lsrs	r3, r3, #2
 8001f82:	3302      	adds	r3, #2
 8001f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	220f      	movs	r2, #15
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a40      	ldr	r2, [pc, #256]	@ (80020a4 <HAL_GPIO_Init+0x2c0>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d013      	beq.n	8001fd0 <HAL_GPIO_Init+0x1ec>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a3f      	ldr	r2, [pc, #252]	@ (80020a8 <HAL_GPIO_Init+0x2c4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d00d      	beq.n	8001fcc <HAL_GPIO_Init+0x1e8>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a3e      	ldr	r2, [pc, #248]	@ (80020ac <HAL_GPIO_Init+0x2c8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d007      	beq.n	8001fc8 <HAL_GPIO_Init+0x1e4>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a3d      	ldr	r2, [pc, #244]	@ (80020b0 <HAL_GPIO_Init+0x2cc>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d101      	bne.n	8001fc4 <HAL_GPIO_Init+0x1e0>
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e006      	b.n	8001fd2 <HAL_GPIO_Init+0x1ee>
 8001fc4:	2304      	movs	r3, #4
 8001fc6:	e004      	b.n	8001fd2 <HAL_GPIO_Init+0x1ee>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e002      	b.n	8001fd2 <HAL_GPIO_Init+0x1ee>
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e000      	b.n	8001fd2 <HAL_GPIO_Init+0x1ee>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fd4:	f002 0203 	and.w	r2, r2, #3
 8001fd8:	0092      	lsls	r2, r2, #2
 8001fda:	4093      	lsls	r3, r2
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fe2:	492f      	ldr	r1, [pc, #188]	@ (80020a0 <HAL_GPIO_Init+0x2bc>)
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe6:	089b      	lsrs	r3, r3, #2
 8001fe8:	3302      	adds	r3, #2
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d006      	beq.n	800200a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ffc:	4b2d      	ldr	r3, [pc, #180]	@ (80020b4 <HAL_GPIO_Init+0x2d0>)
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	492c      	ldr	r1, [pc, #176]	@ (80020b4 <HAL_GPIO_Init+0x2d0>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	608b      	str	r3, [r1, #8]
 8002008:	e006      	b.n	8002018 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800200a:	4b2a      	ldr	r3, [pc, #168]	@ (80020b4 <HAL_GPIO_Init+0x2d0>)
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	43db      	mvns	r3, r3
 8002012:	4928      	ldr	r1, [pc, #160]	@ (80020b4 <HAL_GPIO_Init+0x2d0>)
 8002014:	4013      	ands	r3, r2
 8002016:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d006      	beq.n	8002032 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002024:	4b23      	ldr	r3, [pc, #140]	@ (80020b4 <HAL_GPIO_Init+0x2d0>)
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	4922      	ldr	r1, [pc, #136]	@ (80020b4 <HAL_GPIO_Init+0x2d0>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	60cb      	str	r3, [r1, #12]
 8002030:	e006      	b.n	8002040 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002032:	4b20      	ldr	r3, [pc, #128]	@ (80020b4 <HAL_GPIO_Init+0x2d0>)
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	43db      	mvns	r3, r3
 800203a:	491e      	ldr	r1, [pc, #120]	@ (80020b4 <HAL_GPIO_Init+0x2d0>)
 800203c:	4013      	ands	r3, r2
 800203e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d006      	beq.n	800205a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800204c:	4b19      	ldr	r3, [pc, #100]	@ (80020b4 <HAL_GPIO_Init+0x2d0>)
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	4918      	ldr	r1, [pc, #96]	@ (80020b4 <HAL_GPIO_Init+0x2d0>)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]
 8002058:	e006      	b.n	8002068 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800205a:	4b16      	ldr	r3, [pc, #88]	@ (80020b4 <HAL_GPIO_Init+0x2d0>)
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	43db      	mvns	r3, r3
 8002062:	4914      	ldr	r1, [pc, #80]	@ (80020b4 <HAL_GPIO_Init+0x2d0>)
 8002064:	4013      	ands	r3, r2
 8002066:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d021      	beq.n	80020b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002074:	4b0f      	ldr	r3, [pc, #60]	@ (80020b4 <HAL_GPIO_Init+0x2d0>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	490e      	ldr	r1, [pc, #56]	@ (80020b4 <HAL_GPIO_Init+0x2d0>)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	4313      	orrs	r3, r2
 800207e:	600b      	str	r3, [r1, #0]
 8002080:	e021      	b.n	80020c6 <HAL_GPIO_Init+0x2e2>
 8002082:	bf00      	nop
 8002084:	10320000 	.word	0x10320000
 8002088:	10310000 	.word	0x10310000
 800208c:	10220000 	.word	0x10220000
 8002090:	10210000 	.word	0x10210000
 8002094:	10120000 	.word	0x10120000
 8002098:	10110000 	.word	0x10110000
 800209c:	40021000 	.word	0x40021000
 80020a0:	40010000 	.word	0x40010000
 80020a4:	40010800 	.word	0x40010800
 80020a8:	40010c00 	.word	0x40010c00
 80020ac:	40011000 	.word	0x40011000
 80020b0:	40011400 	.word	0x40011400
 80020b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020b8:	4b0b      	ldr	r3, [pc, #44]	@ (80020e8 <HAL_GPIO_Init+0x304>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	43db      	mvns	r3, r3
 80020c0:	4909      	ldr	r1, [pc, #36]	@ (80020e8 <HAL_GPIO_Init+0x304>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c8:	3301      	adds	r3, #1
 80020ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d2:	fa22 f303 	lsr.w	r3, r2, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f47f ae8e 	bne.w	8001df8 <HAL_GPIO_Init+0x14>
  }
}
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
 80020e0:	372c      	adds	r7, #44	@ 0x2c
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	40010400 	.word	0x40010400

080020ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	@ 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80020fa:	e09a      	b.n	8002232 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80020fc:	2201      	movs	r2, #1
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 808d 	beq.w	800222c <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8002112:	4a4e      	ldr	r2, [pc, #312]	@ (800224c <HAL_GPIO_DeInit+0x160>)
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	089b      	lsrs	r3, r3, #2
 8002118:	3302      	adds	r3, #2
 800211a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	220f      	movs	r2, #15
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	4013      	ands	r3, r2
 8002132:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a46      	ldr	r2, [pc, #280]	@ (8002250 <HAL_GPIO_DeInit+0x164>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d013      	beq.n	8002164 <HAL_GPIO_DeInit+0x78>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a45      	ldr	r2, [pc, #276]	@ (8002254 <HAL_GPIO_DeInit+0x168>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d00d      	beq.n	8002160 <HAL_GPIO_DeInit+0x74>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a44      	ldr	r2, [pc, #272]	@ (8002258 <HAL_GPIO_DeInit+0x16c>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d007      	beq.n	800215c <HAL_GPIO_DeInit+0x70>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a43      	ldr	r2, [pc, #268]	@ (800225c <HAL_GPIO_DeInit+0x170>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d101      	bne.n	8002158 <HAL_GPIO_DeInit+0x6c>
 8002154:	2303      	movs	r3, #3
 8002156:	e006      	b.n	8002166 <HAL_GPIO_DeInit+0x7a>
 8002158:	2304      	movs	r3, #4
 800215a:	e004      	b.n	8002166 <HAL_GPIO_DeInit+0x7a>
 800215c:	2302      	movs	r3, #2
 800215e:	e002      	b.n	8002166 <HAL_GPIO_DeInit+0x7a>
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <HAL_GPIO_DeInit+0x7a>
 8002164:	2300      	movs	r3, #0
 8002166:	69fa      	ldr	r2, [r7, #28]
 8002168:	f002 0203 	and.w	r2, r2, #3
 800216c:	0092      	lsls	r2, r2, #2
 800216e:	4093      	lsls	r3, r2
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	429a      	cmp	r2, r3
 8002174:	d132      	bne.n	80021dc <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002176:	4b3a      	ldr	r3, [pc, #232]	@ (8002260 <HAL_GPIO_DeInit+0x174>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	43db      	mvns	r3, r3
 800217e:	4938      	ldr	r1, [pc, #224]	@ (8002260 <HAL_GPIO_DeInit+0x174>)
 8002180:	4013      	ands	r3, r2
 8002182:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8002184:	4b36      	ldr	r3, [pc, #216]	@ (8002260 <HAL_GPIO_DeInit+0x174>)
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	43db      	mvns	r3, r3
 800218c:	4934      	ldr	r1, [pc, #208]	@ (8002260 <HAL_GPIO_DeInit+0x174>)
 800218e:	4013      	ands	r3, r2
 8002190:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8002192:	4b33      	ldr	r3, [pc, #204]	@ (8002260 <HAL_GPIO_DeInit+0x174>)
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	43db      	mvns	r3, r3
 800219a:	4931      	ldr	r1, [pc, #196]	@ (8002260 <HAL_GPIO_DeInit+0x174>)
 800219c:	4013      	ands	r3, r2
 800219e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80021a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002260 <HAL_GPIO_DeInit+0x174>)
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	492d      	ldr	r1, [pc, #180]	@ (8002260 <HAL_GPIO_DeInit+0x174>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	220f      	movs	r2, #15
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80021be:	4a23      	ldr	r2, [pc, #140]	@ (800224c <HAL_GPIO_DeInit+0x160>)
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	089b      	lsrs	r3, r3, #2
 80021c4:	3302      	adds	r3, #2
 80021c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	43da      	mvns	r2, r3
 80021ce:	481f      	ldr	r0, [pc, #124]	@ (800224c <HAL_GPIO_DeInit+0x160>)
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	089b      	lsrs	r3, r3, #2
 80021d4:	400a      	ands	r2, r1
 80021d6:	3302      	adds	r3, #2
 80021d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	2bff      	cmp	r3, #255	@ 0xff
 80021e0:	d801      	bhi.n	80021e6 <HAL_GPIO_DeInit+0xfa>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	e001      	b.n	80021ea <HAL_GPIO_DeInit+0xfe>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3304      	adds	r3, #4
 80021ea:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	2bff      	cmp	r3, #255	@ 0xff
 80021f0:	d802      	bhi.n	80021f8 <HAL_GPIO_DeInit+0x10c>
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	e002      	b.n	80021fe <HAL_GPIO_DeInit+0x112>
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	3b08      	subs	r3, #8
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	210f      	movs	r1, #15
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	fa01 f303 	lsl.w	r3, r1, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	401a      	ands	r2, r3
 8002210:	2104      	movs	r1, #4
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	fa01 f303 	lsl.w	r3, r1, r3
 8002218:	431a      	orrs	r2, r3
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	43db      	mvns	r3, r3
 8002226:	401a      	ands	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	3301      	adds	r3, #1
 8002230:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	fa22 f303 	lsr.w	r3, r2, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	f47f af5e 	bne.w	80020fc <HAL_GPIO_DeInit+0x10>
  }
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	3724      	adds	r7, #36	@ 0x24
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	40010000 	.word	0x40010000
 8002250:	40010800 	.word	0x40010800
 8002254:	40010c00 	.word	0x40010c00
 8002258:	40011000 	.word	0x40011000
 800225c:	40011400 	.word	0x40011400
 8002260:	40010400 	.word	0x40010400

08002264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	807b      	strh	r3, [r7, #2]
 8002270:	4613      	mov	r3, r2
 8002272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002274:	787b      	ldrb	r3, [r7, #1]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800227a:	887a      	ldrh	r2, [r7, #2]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002280:	e003      	b.n	800228a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002282:	887b      	ldrh	r3, [r7, #2]
 8002284:	041a      	lsls	r2, r3, #16
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	611a      	str	r2, [r3, #16]
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr

08002294 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022a6:	887a      	ldrh	r2, [r7, #2]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4013      	ands	r3, r2
 80022ac:	041a      	lsls	r2, r3, #16
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	43d9      	mvns	r1, r3
 80022b2:	887b      	ldrh	r3, [r7, #2]
 80022b4:	400b      	ands	r3, r1
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	611a      	str	r2, [r3, #16]
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr

080022c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b084      	sub	sp, #16
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e0e8      	b.n	80024aa <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d106      	bne.n	80022f2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f007 fe61 	bl	8009fb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2203      	movs	r2, #3
 80022f6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f003 fc4c 	bl	8005ba2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3304      	adds	r3, #4
 8002312:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002314:	f003 fc22 	bl	8005b5c <USB_CoreInit>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d005      	beq.n	800232a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2202      	movs	r2, #2
 8002322:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e0bf      	b.n	80024aa <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2100      	movs	r1, #0
 8002330:	4618      	mov	r0, r3
 8002332:	f003 fc50 	bl	8005bd6 <USB_SetCurrentMode>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0b0      	b.n	80024aa <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002348:	2300      	movs	r3, #0
 800234a:	73fb      	strb	r3, [r7, #15]
 800234c:	e03e      	b.n	80023cc <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	440b      	add	r3, r1
 800235c:	3311      	adds	r3, #17
 800235e:	2201      	movs	r2, #1
 8002360:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	440b      	add	r3, r1
 8002370:	3310      	adds	r3, #16
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002376:	7bfa      	ldrb	r2, [r7, #15]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	440b      	add	r3, r1
 8002384:	3313      	adds	r3, #19
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800238a:	7bfa      	ldrb	r2, [r7, #15]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	440b      	add	r3, r1
 8002398:	3320      	adds	r3, #32
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800239e:	7bfa      	ldrb	r2, [r7, #15]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	440b      	add	r3, r1
 80023ac:	3324      	adds	r3, #36	@ 0x24
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	440b      	add	r3, r1
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
 80023c8:	3301      	adds	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	791b      	ldrb	r3, [r3, #4]
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d3bb      	bcc.n	800234e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d6:	2300      	movs	r3, #0
 80023d8:	73fb      	strb	r3, [r7, #15]
 80023da:	e044      	b.n	8002466 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023dc:	7bfa      	ldrb	r2, [r7, #15]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	440b      	add	r3, r1
 80023ea:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80023ee:	2200      	movs	r2, #0
 80023f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023f2:	7bfa      	ldrb	r2, [r7, #15]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	440b      	add	r3, r1
 8002400:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002404:	7bfa      	ldrb	r2, [r7, #15]
 8002406:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002408:	7bfa      	ldrb	r2, [r7, #15]
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	440b      	add	r3, r1
 8002416:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800241a:	2200      	movs	r2, #0
 800241c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800241e:	7bfa      	ldrb	r2, [r7, #15]
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	440b      	add	r3, r1
 800242c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002434:	7bfa      	ldrb	r2, [r7, #15]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	440b      	add	r3, r1
 8002442:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800244a:	7bfa      	ldrb	r2, [r7, #15]
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	440b      	add	r3, r1
 8002458:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002460:	7bfb      	ldrb	r3, [r7, #15]
 8002462:	3301      	adds	r3, #1
 8002464:	73fb      	strb	r3, [r7, #15]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	791b      	ldrb	r3, [r3, #4]
 800246a:	7bfa      	ldrb	r2, [r7, #15]
 800246c:	429a      	cmp	r2, r3
 800246e:	d3b5      	bcc.n	80023dc <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3304      	adds	r3, #4
 8002478:	cb0e      	ldmia	r3, {r1, r2, r3}
 800247a:	f003 fbb8 	bl	8005bee <USB_DevInit>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e00c      	b.n	80024aa <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f005 fe37 	bl	8008116 <USB_DevDisconnect>

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d101      	bne.n	80024c8 <HAL_PCD_Start+0x16>
 80024c4:	2302      	movs	r3, #2
 80024c6:	e016      	b.n	80024f6 <HAL_PCD_Start+0x44>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f003 fb4e 	bl	8005b76 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80024da:	2101      	movs	r1, #1
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f007 ffdc 	bl	800a49a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f005 fe0b 	bl	8008102 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b088      	sub	sp, #32
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f005 fe0d 	bl	800812a <USB_ReadInterrupts>
 8002510:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 fb1a 	bl	8002b56 <PCD_EP_ISR_Handler>

    return;
 8002522:	e119      	b.n	8002758 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800252a:	2b00      	cmp	r3, #0
 800252c:	d013      	beq.n	8002556 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002536:	b29a      	uxth	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002540:	b292      	uxth	r2, r2
 8002542:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f007 fdaf 	bl	800a0aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800254c:	2100      	movs	r1, #0
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f905 	bl	800275e <HAL_PCD_SetAddress>

    return;
 8002554:	e100      	b.n	8002758 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00c      	beq.n	800257a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002568:	b29a      	uxth	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002572:	b292      	uxth	r2, r2
 8002574:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002578:	e0ee      	b.n	8002758 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00c      	beq.n	800259e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800258c:	b29a      	uxth	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002596:	b292      	uxth	r2, r2
 8002598:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800259c:	e0dc      	b.n	8002758 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d027      	beq.n	80025f8 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0204 	bic.w	r2, r2, #4
 80025ba:	b292      	uxth	r2, r2
 80025bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0208 	bic.w	r2, r2, #8
 80025d2:	b292      	uxth	r2, r2
 80025d4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f007 fd9f 	bl	800a11c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80025f0:	b292      	uxth	r2, r2
 80025f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80025f6:	e0af      	b.n	8002758 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 8083 	beq.w	800270a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002604:	2300      	movs	r3, #0
 8002606:	77fb      	strb	r3, [r7, #31]
 8002608:	e010      	b.n	800262c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	461a      	mov	r2, r3
 8002610:	7ffb      	ldrb	r3, [r7, #31]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	441a      	add	r2, r3
 8002616:	7ffb      	ldrb	r3, [r7, #31]
 8002618:	8812      	ldrh	r2, [r2, #0]
 800261a:	b292      	uxth	r2, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	3320      	adds	r3, #32
 8002620:	443b      	add	r3, r7
 8002622:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002626:	7ffb      	ldrb	r3, [r7, #31]
 8002628:	3301      	adds	r3, #1
 800262a:	77fb      	strb	r3, [r7, #31]
 800262c:	7ffb      	ldrb	r3, [r7, #31]
 800262e:	2b07      	cmp	r3, #7
 8002630:	d9eb      	bls.n	800260a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800263a:	b29a      	uxth	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f042 0201 	orr.w	r2, r2, #1
 8002644:	b292      	uxth	r2, r2
 8002646:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002652:	b29a      	uxth	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0201 	bic.w	r2, r2, #1
 800265c:	b292      	uxth	r2, r2
 800265e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002662:	bf00      	nop
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800266c:	b29b      	uxth	r3, r3
 800266e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f6      	beq.n	8002664 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800267e:	b29a      	uxth	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002688:	b292      	uxth	r2, r2
 800268a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800268e:	2300      	movs	r3, #0
 8002690:	77fb      	strb	r3, [r7, #31]
 8002692:	e00f      	b.n	80026b4 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002694:	7ffb      	ldrb	r3, [r7, #31]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	4611      	mov	r1, r2
 800269c:	7ffa      	ldrb	r2, [r7, #31]
 800269e:	0092      	lsls	r2, r2, #2
 80026a0:	440a      	add	r2, r1
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	3320      	adds	r3, #32
 80026a6:	443b      	add	r3, r7
 80026a8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80026ac:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80026ae:	7ffb      	ldrb	r3, [r7, #31]
 80026b0:	3301      	adds	r3, #1
 80026b2:	77fb      	strb	r3, [r7, #31]
 80026b4:	7ffb      	ldrb	r3, [r7, #31]
 80026b6:	2b07      	cmp	r3, #7
 80026b8:	d9ec      	bls.n	8002694 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f042 0208 	orr.w	r2, r2, #8
 80026cc:	b292      	uxth	r2, r2
 80026ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80026da:	b29a      	uxth	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026e4:	b292      	uxth	r2, r2
 80026e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 0204 	orr.w	r2, r2, #4
 80026fc:	b292      	uxth	r2, r2
 80026fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f007 fcf0 	bl	800a0e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002708:	e026      	b.n	8002758 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00f      	beq.n	8002734 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800271c:	b29a      	uxth	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002726:	b292      	uxth	r2, r2
 8002728:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f007 fcae 	bl	800a08e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002732:	e011      	b.n	8002758 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00c      	beq.n	8002758 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002746:	b29a      	uxth	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002750:	b292      	uxth	r2, r2
 8002752:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002756:	bf00      	nop
  }
}
 8002758:	3720      	adds	r7, #32
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	460b      	mov	r3, r1
 8002768:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_PCD_SetAddress+0x1a>
 8002774:	2302      	movs	r3, #2
 8002776:	e012      	b.n	800279e <HAL_PCD_SetAddress+0x40>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	78fa      	ldrb	r2, [r7, #3]
 8002784:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	78fa      	ldrb	r2, [r7, #3]
 800278c:	4611      	mov	r1, r2
 800278e:	4618      	mov	r0, r3
 8002790:	f005 fca4 	bl	80080dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b084      	sub	sp, #16
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	4608      	mov	r0, r1
 80027b0:	4611      	mov	r1, r2
 80027b2:	461a      	mov	r2, r3
 80027b4:	4603      	mov	r3, r0
 80027b6:	70fb      	strb	r3, [r7, #3]
 80027b8:	460b      	mov	r3, r1
 80027ba:	803b      	strh	r3, [r7, #0]
 80027bc:	4613      	mov	r3, r2
 80027be:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	da0e      	bge.n	80027ea <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	f003 0207 	and.w	r2, r3, #7
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	3310      	adds	r3, #16
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	4413      	add	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2201      	movs	r2, #1
 80027e6:	705a      	strb	r2, [r3, #1]
 80027e8:	e00e      	b.n	8002808 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027ea:	78fb      	ldrb	r3, [r7, #3]
 80027ec:	f003 0207 	and.w	r2, r3, #7
 80027f0:	4613      	mov	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	4413      	add	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002808:	78fb      	ldrb	r3, [r7, #3]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	b2da      	uxtb	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002814:	883a      	ldrh	r2, [r7, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	78ba      	ldrb	r2, [r7, #2]
 800281e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002820:	78bb      	ldrb	r3, [r7, #2]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d102      	bne.n	800282c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <HAL_PCD_EP_Open+0x94>
 8002836:	2302      	movs	r3, #2
 8002838:	e00e      	b.n	8002858 <HAL_PCD_EP_Open+0xb2>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68f9      	ldr	r1, [r7, #12]
 8002848:	4618      	mov	r0, r3
 800284a:	f003 f9ed 	bl	8005c28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002856:	7afb      	ldrb	r3, [r7, #11]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800286c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002870:	2b00      	cmp	r3, #0
 8002872:	da0e      	bge.n	8002892 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002874:	78fb      	ldrb	r3, [r7, #3]
 8002876:	f003 0207 	and.w	r2, r3, #7
 800287a:	4613      	mov	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	3310      	adds	r3, #16
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	4413      	add	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2201      	movs	r2, #1
 800288e:	705a      	strb	r2, [r3, #1]
 8002890:	e00e      	b.n	80028b0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002892:	78fb      	ldrb	r3, [r7, #3]
 8002894:	f003 0207 	and.w	r2, r3, #7
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	4413      	add	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80028b0:	78fb      	ldrb	r3, [r7, #3]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_PCD_EP_Close+0x6a>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e00e      	b.n	80028e8 <HAL_PCD_EP_Close+0x88>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68f9      	ldr	r1, [r7, #12]
 80028d8:	4618      	mov	r0, r3
 80028da:	f003 fd65 	bl	80063a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	607a      	str	r2, [r7, #4]
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	460b      	mov	r3, r1
 80028fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002900:	7afb      	ldrb	r3, [r7, #11]
 8002902:	f003 0207 	and.w	r2, r3, #7
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	4413      	add	r3, r2
 8002916:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	2200      	movs	r2, #0
 8002928:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2200      	movs	r2, #0
 800292e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002930:	7afb      	ldrb	r3, [r7, #11]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	b2da      	uxtb	r2, r3
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6979      	ldr	r1, [r7, #20]
 8002942:	4618      	mov	r0, r3
 8002944:	f003 ff1c 	bl	8006780 <USB_EPStartXfer>

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	460b      	mov	r3, r1
 800295c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800295e:	78fb      	ldrb	r3, [r7, #3]
 8002960:	f003 0207 	and.w	r2, r3, #7
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	440b      	add	r3, r1
 8002970:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002974:	681b      	ldr	r3, [r3, #0]
}
 8002976:	4618      	mov	r0, r3
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	607a      	str	r2, [r7, #4]
 800298a:	603b      	str	r3, [r7, #0]
 800298c:	460b      	mov	r3, r1
 800298e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002990:	7afb      	ldrb	r3, [r7, #11]
 8002992:	f003 0207 	and.w	r2, r3, #7
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	3310      	adds	r3, #16
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4413      	add	r3, r2
 80029a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2200      	movs	r2, #0
 80029c4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2201      	movs	r2, #1
 80029ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029cc:	7afb      	ldrb	r3, [r7, #11]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6979      	ldr	r1, [r7, #20]
 80029de:	4618      	mov	r0, r3
 80029e0:	f003 fece 	bl	8006780 <USB_EPStartXfer>

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	460b      	mov	r3, r1
 80029f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029fa:	78fb      	ldrb	r3, [r7, #3]
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	7912      	ldrb	r2, [r2, #4]
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d901      	bls.n	8002a0c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e04c      	b.n	8002aa6 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	da0e      	bge.n	8002a32 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a14:	78fb      	ldrb	r3, [r7, #3]
 8002a16:	f003 0207 	and.w	r2, r3, #7
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	3310      	adds	r3, #16
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	4413      	add	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	705a      	strb	r2, [r3, #1]
 8002a30:	e00c      	b.n	8002a4c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a32:	78fa      	ldrb	r2, [r7, #3]
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	4413      	add	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a52:	78fb      	ldrb	r3, [r7, #3]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <HAL_PCD_EP_SetStall+0x7e>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e01c      	b.n	8002aa6 <HAL_PCD_EP_SetStall+0xb8>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68f9      	ldr	r1, [r7, #12]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f005 fa31 	bl	8007ee2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d108      	bne.n	8002a9c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002a94:	4619      	mov	r1, r3
 8002a96:	4610      	mov	r0, r2
 8002a98:	f005 fb56 	bl	8008148 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b084      	sub	sp, #16
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002aba:	78fb      	ldrb	r3, [r7, #3]
 8002abc:	f003 030f 	and.w	r3, r3, #15
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	7912      	ldrb	r2, [r2, #4]
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d901      	bls.n	8002acc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e040      	b.n	8002b4e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002acc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	da0e      	bge.n	8002af2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ad4:	78fb      	ldrb	r3, [r7, #3]
 8002ad6:	f003 0207 	and.w	r2, r3, #7
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	3310      	adds	r3, #16
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2201      	movs	r2, #1
 8002aee:	705a      	strb	r2, [r3, #1]
 8002af0:	e00e      	b.n	8002b10 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002af2:	78fb      	ldrb	r3, [r7, #3]
 8002af4:	f003 0207 	and.w	r2, r3, #7
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	4413      	add	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b16:	78fb      	ldrb	r3, [r7, #3]
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <HAL_PCD_EP_ClrStall+0x82>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e00e      	b.n	8002b4e <HAL_PCD_EP_ClrStall+0xa0>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68f9      	ldr	r1, [r7, #12]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f005 fa1f 	bl	8007f82 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b096      	sub	sp, #88	@ 0x58
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b5e:	e3bb      	b.n	80032d8 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b68:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002b6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002b7a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f040 8175 	bne.w	8002e6e <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002b84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002b88:	f003 0310 	and.w	r3, r3, #16
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d14e      	bne.n	8002c2e <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002b9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ba0:	81fb      	strh	r3, [r7, #14]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	89fb      	ldrh	r3, [r7, #14]
 8002ba8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3310      	adds	r3, #16
 8002bb8:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4413      	add	r3, r2
 8002bce:	3302      	adds	r3, #2
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6812      	ldr	r2, [r2, #0]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002be2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002be4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002be6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002be8:	695a      	ldr	r2, [r3, #20]
 8002bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	441a      	add	r2, r3
 8002bf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f007 fa2f 	bl	800a05a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	7b5b      	ldrb	r3, [r3, #13]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 8368 	beq.w	80032d8 <PCD_EP_ISR_Handler+0x782>
 8002c08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f040 8363 	bne.w	80032d8 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	7b5b      	ldrb	r3, [r3, #13]
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	735a      	strb	r2, [r3, #13]
 8002c2c:	e354      	b.n	80032d8 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c34:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002c40:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002c44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d034      	beq.n	8002cb6 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	461a      	mov	r2, r3
 8002c58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4413      	add	r3, r2
 8002c60:	3306      	adds	r3, #6
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6812      	ldr	r2, [r2, #0]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c76:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6818      	ldr	r0, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002c82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c84:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c88:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	f005 faac 	bl	80081e8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	823b      	strh	r3, [r7, #16]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	8a3a      	ldrh	r2, [r7, #16]
 8002ca6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002caa:	b292      	uxth	r2, r2
 8002cac:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f007 f9a6 	bl	800a000 <HAL_PCD_SetupStageCallback>
 8002cb4:	e310      	b.n	80032d8 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002cb6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f280 830c 	bge.w	80032d8 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002ccc:	4013      	ands	r3, r2
 8002cce:	83fb      	strh	r3, [r7, #30]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	8bfa      	ldrh	r2, [r7, #30]
 8002cd6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002cda:	b292      	uxth	r2, r2
 8002cdc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3306      	adds	r3, #6
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6812      	ldr	r2, [r2, #0]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d08:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d019      	beq.n	8002d46 <PCD_EP_ISR_Handler+0x1f0>
 8002d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d015      	beq.n	8002d46 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6818      	ldr	r0, [r3, #0]
 8002d1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d20:	6959      	ldr	r1, [r3, #20]
 8002d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d24:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d28:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	f005 fa5c 	bl	80081e8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002d30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d32:	695a      	ldr	r2, [r3, #20]
 8002d34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	441a      	add	r2, r3
 8002d3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d3c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002d3e:	2100      	movs	r1, #0
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f007 f96f 	bl	800a024 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002d50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002d54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f040 82bd 	bne.w	80032d8 <PCD_EP_ISR_Handler+0x782>
 8002d5e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002d62:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002d66:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002d6a:	f000 82b5 	beq.w	80032d8 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	61bb      	str	r3, [r7, #24]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	461a      	mov	r2, r3
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	4413      	add	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	801a      	strh	r2, [r3, #0]
 8002d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	2b3e      	cmp	r3, #62	@ 0x3e
 8002da4:	d91d      	bls.n	8002de2 <PCD_EP_ISR_Handler+0x28c>
 8002da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	095b      	lsrs	r3, r3, #5
 8002dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f003 031f 	and.w	r3, r3, #31
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d102      	bne.n	8002dc0 <PCD_EP_ISR_Handler+0x26a>
 8002dba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	029b      	lsls	r3, r3, #10
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	801a      	strh	r2, [r3, #0]
 8002de0:	e026      	b.n	8002e30 <PCD_EP_ISR_Handler+0x2da>
 8002de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10a      	bne.n	8002e00 <PCD_EP_ISR_Handler+0x2aa>
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	801a      	strh	r2, [r3, #0]
 8002dfe:	e017      	b.n	8002e30 <PCD_EP_ISR_Handler+0x2da>
 8002e00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	085b      	lsrs	r3, r3, #1
 8002e06:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <PCD_EP_ISR_Handler+0x2c4>
 8002e14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e16:	3301      	adds	r3, #1
 8002e18:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	029b      	lsls	r3, r3, #10
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e40:	827b      	strh	r3, [r7, #18]
 8002e42:	8a7b      	ldrh	r3, [r7, #18]
 8002e44:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002e48:	827b      	strh	r3, [r7, #18]
 8002e4a:	8a7b      	ldrh	r3, [r7, #18]
 8002e4c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002e50:	827b      	strh	r3, [r7, #18]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	8a7b      	ldrh	r3, [r7, #18]
 8002e58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	8013      	strh	r3, [r2, #0]
 8002e6c:	e234      	b.n	80032d8 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	461a      	mov	r2, r3
 8002e74:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e82:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f280 80fc 	bge.w	8003084 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	461a      	mov	r2, r3
 8002eae:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002eba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002ebe:	b292      	uxth	r2, r2
 8002ec0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002ec2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eda:	7b1b      	ldrb	r3, [r3, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d125      	bne.n	8002f2c <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	461a      	mov	r2, r3
 8002eec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3306      	adds	r3, #6
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f08:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002f0c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 8092 	beq.w	800303a <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6818      	ldr	r0, [r3, #0]
 8002f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f1c:	6959      	ldr	r1, [r3, #20]
 8002f1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f20:	88da      	ldrh	r2, [r3, #6]
 8002f22:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002f26:	f005 f95f 	bl	80081e8 <USB_ReadPMA>
 8002f2a:	e086      	b.n	800303a <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f2e:	78db      	ldrb	r3, [r3, #3]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d10a      	bne.n	8002f4a <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002f34:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002f38:	461a      	mov	r2, r3
 8002f3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f9d9 	bl	80032f4 <HAL_PCD_EP_DB_Receive>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002f48:	e077      	b.n	800303a <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f64:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	441a      	add	r2, r3
 8002f76:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002f7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f86:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d024      	beq.n	8002ff2 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	4413      	add	r3, r2
 8002fbc:	3302      	adds	r3, #2
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6812      	ldr	r2, [r2, #0]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fd0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002fd4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d02e      	beq.n	800303a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6818      	ldr	r0, [r3, #0]
 8002fe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fe2:	6959      	ldr	r1, [r3, #20]
 8002fe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fe6:	891a      	ldrh	r2, [r3, #8]
 8002fe8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002fec:	f005 f8fc 	bl	80081e8 <USB_ReadPMA>
 8002ff0:	e023      	b.n	800303a <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4413      	add	r3, r2
 8003006:	3306      	adds	r3, #6
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6812      	ldr	r2, [r2, #0]
 800300e:	4413      	add	r3, r2
 8003010:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800301a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800301e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003022:	2b00      	cmp	r3, #0
 8003024:	d009      	beq.n	800303a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6818      	ldr	r0, [r3, #0]
 800302a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800302c:	6959      	ldr	r1, [r3, #20]
 800302e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003030:	895a      	ldrh	r2, [r3, #10]
 8003032:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003036:	f005 f8d7 	bl	80081e8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800303a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800303c:	69da      	ldr	r2, [r3, #28]
 800303e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003042:	441a      	add	r2, r3
 8003044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003046:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800304a:	695a      	ldr	r2, [r3, #20]
 800304c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003050:	441a      	add	r2, r3
 8003052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003054:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d005      	beq.n	800306a <PCD_EP_ISR_Handler+0x514>
 800305e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	429a      	cmp	r2, r3
 8003068:	d206      	bcs.n	8003078 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800306a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	4619      	mov	r1, r3
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f006 ffd7 	bl	800a024 <HAL_PCD_DataOutStageCallback>
 8003076:	e005      	b.n	8003084 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800307e:	4618      	mov	r0, r3
 8003080:	f003 fb7e 	bl	8006780 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003084:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003088:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 8123 	beq.w	80032d8 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8003092:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	3310      	adds	r3, #16
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	4413      	add	r3, r2
 80030a4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80030bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030c0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	461a      	mov	r2, r3
 80030ca:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	441a      	add	r2, r3
 80030d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80030d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030de:	b29b      	uxth	r3, r3
 80030e0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80030e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030e4:	78db      	ldrb	r3, [r3, #3]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	f040 80a2 	bne.w	8003230 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80030ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030ee:	2200      	movs	r2, #0
 80030f0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80030f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030f4:	7b1b      	ldrb	r3, [r3, #12]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 8093 	beq.w	8003222 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80030fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003104:	2b00      	cmp	r3, #0
 8003106:	d046      	beq.n	8003196 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800310a:	785b      	ldrb	r3, [r3, #1]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d126      	bne.n	800315e <PCD_EP_ISR_Handler+0x608>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	627b      	str	r3, [r7, #36]	@ 0x24
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800311e:	b29b      	uxth	r3, r3
 8003120:	461a      	mov	r2, r3
 8003122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003124:	4413      	add	r3, r2
 8003126:	627b      	str	r3, [r7, #36]	@ 0x24
 8003128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	011a      	lsls	r2, r3, #4
 800312e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003130:	4413      	add	r3, r2
 8003132:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003136:	623b      	str	r3, [r7, #32]
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	b29b      	uxth	r3, r3
 800313e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003142:	b29a      	uxth	r2, r3
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	801a      	strh	r2, [r3, #0]
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	b29b      	uxth	r3, r3
 800314e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003156:	b29a      	uxth	r2, r3
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	801a      	strh	r2, [r3, #0]
 800315c:	e061      	b.n	8003222 <PCD_EP_ISR_Handler+0x6cc>
 800315e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003160:	785b      	ldrb	r3, [r3, #1]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d15d      	bne.n	8003222 <PCD_EP_ISR_Handler+0x6cc>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003174:	b29b      	uxth	r3, r3
 8003176:	461a      	mov	r2, r3
 8003178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800317a:	4413      	add	r3, r2
 800317c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800317e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	011a      	lsls	r2, r3, #4
 8003184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003186:	4413      	add	r3, r2
 8003188:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800318c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800318e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003190:	2200      	movs	r2, #0
 8003192:	801a      	strh	r2, [r3, #0]
 8003194:	e045      	b.n	8003222 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800319c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800319e:	785b      	ldrb	r3, [r3, #1]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d126      	bne.n	80031f2 <PCD_EP_ISR_Handler+0x69c>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	461a      	mov	r2, r3
 80031b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031b8:	4413      	add	r3, r2
 80031ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80031bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	011a      	lsls	r2, r3, #4
 80031c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031c4:	4413      	add	r3, r2
 80031c6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80031ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80031cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031da:	801a      	strh	r2, [r3, #0]
 80031dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031de:	881b      	ldrh	r3, [r3, #0]
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ee:	801a      	strh	r2, [r3, #0]
 80031f0:	e017      	b.n	8003222 <PCD_EP_ISR_Handler+0x6cc>
 80031f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031f4:	785b      	ldrb	r3, [r3, #1]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d113      	bne.n	8003222 <PCD_EP_ISR_Handler+0x6cc>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003202:	b29b      	uxth	r3, r3
 8003204:	461a      	mov	r2, r3
 8003206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003208:	4413      	add	r3, r2
 800320a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800320c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	011a      	lsls	r2, r3, #4
 8003212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003214:	4413      	add	r3, r2
 8003216:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800321a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800321c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800321e:	2200      	movs	r2, #0
 8003220:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	4619      	mov	r1, r3
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f006 ff16 	bl	800a05a <HAL_PCD_DataInStageCallback>
 800322e:	e053      	b.n	80032d8 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003230:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003238:	2b00      	cmp	r3, #0
 800323a:	d146      	bne.n	80032ca <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003244:	b29b      	uxth	r3, r3
 8003246:	461a      	mov	r2, r3
 8003248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4413      	add	r3, r2
 8003250:	3302      	adds	r3, #2
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	4413      	add	r3, r2
 800325a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800325e:	881b      	ldrh	r3, [r3, #0]
 8003260:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003264:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800326a:	699a      	ldr	r2, [r3, #24]
 800326c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003270:	429a      	cmp	r2, r3
 8003272:	d907      	bls.n	8003284 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003274:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003276:	699a      	ldr	r2, [r3, #24]
 8003278:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800327c:	1ad2      	subs	r2, r2, r3
 800327e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003280:	619a      	str	r2, [r3, #24]
 8003282:	e002      	b.n	800328a <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003286:	2200      	movs	r2, #0
 8003288:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800328a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003292:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	4619      	mov	r1, r3
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f006 fede 	bl	800a05a <HAL_PCD_DataInStageCallback>
 800329e:	e01b      	b.n	80032d8 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80032a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032a2:	695a      	ldr	r2, [r3, #20]
 80032a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80032a8:	441a      	add	r2, r3
 80032aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ac:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80032ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032b0:	69da      	ldr	r2, [r3, #28]
 80032b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80032b6:	441a      	add	r2, r3
 80032b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ba:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80032c2:	4618      	mov	r0, r3
 80032c4:	f003 fa5c 	bl	8006780 <USB_EPStartXfer>
 80032c8:	e006      	b.n	80032d8 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80032ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80032ce:	461a      	mov	r2, r3
 80032d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f91b 	bl	800350e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	b21b      	sxth	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f6ff ac3b 	blt.w	8002b60 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3758      	adds	r7, #88	@ 0x58
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	4613      	mov	r3, r2
 8003300:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003302:	88fb      	ldrh	r3, [r7, #6]
 8003304:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d07e      	beq.n	800340a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003314:	b29b      	uxth	r3, r3
 8003316:	461a      	mov	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	4413      	add	r3, r2
 8003320:	3302      	adds	r3, #2
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	4413      	add	r3, r2
 800332a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800332e:	881b      	ldrh	r3, [r3, #0]
 8003330:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003334:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	699a      	ldr	r2, [r3, #24]
 800333a:	8b7b      	ldrh	r3, [r7, #26]
 800333c:	429a      	cmp	r2, r3
 800333e:	d306      	bcc.n	800334e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	699a      	ldr	r2, [r3, #24]
 8003344:	8b7b      	ldrh	r3, [r7, #26]
 8003346:	1ad2      	subs	r2, r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	619a      	str	r2, [r3, #24]
 800334c:	e002      	b.n	8003354 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2200      	movs	r2, #0
 8003352:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d123      	bne.n	80033a4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	461a      	mov	r2, r3
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	b29b      	uxth	r3, r3
 800336e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003372:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003376:	833b      	strh	r3, [r7, #24]
 8003378:	8b3b      	ldrh	r3, [r7, #24]
 800337a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800337e:	833b      	strh	r3, [r7, #24]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	461a      	mov	r2, r3
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	441a      	add	r2, r3
 800338e:	8b3b      	ldrh	r3, [r7, #24]
 8003390:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003394:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003398:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800339c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033a4:	88fb      	ldrh	r3, [r7, #6]
 80033a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d01f      	beq.n	80033ee <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	461a      	mov	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	b29b      	uxth	r3, r3
 80033c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033c8:	82fb      	strh	r3, [r7, #22]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	441a      	add	r2, r3
 80033d8:	8afb      	ldrh	r3, [r7, #22]
 80033da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80033ee:	8b7b      	ldrh	r3, [r7, #26]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 8087 	beq.w	8003504 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	6959      	ldr	r1, [r3, #20]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	891a      	ldrh	r2, [r3, #8]
 8003402:	8b7b      	ldrh	r3, [r7, #26]
 8003404:	f004 fef0 	bl	80081e8 <USB_ReadPMA>
 8003408:	e07c      	b.n	8003504 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003412:	b29b      	uxth	r3, r3
 8003414:	461a      	mov	r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4413      	add	r3, r2
 800341e:	3306      	adds	r3, #6
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	6812      	ldr	r2, [r2, #0]
 8003426:	4413      	add	r3, r2
 8003428:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003432:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	699a      	ldr	r2, [r3, #24]
 8003438:	8b7b      	ldrh	r3, [r7, #26]
 800343a:	429a      	cmp	r2, r3
 800343c:	d306      	bcc.n	800344c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	699a      	ldr	r2, [r3, #24]
 8003442:	8b7b      	ldrh	r3, [r7, #26]
 8003444:	1ad2      	subs	r2, r2, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	619a      	str	r2, [r3, #24]
 800344a:	e002      	b.n	8003452 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2200      	movs	r2, #0
 8003450:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d123      	bne.n	80034a2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	461a      	mov	r2, r3
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	881b      	ldrh	r3, [r3, #0]
 800346a:	b29b      	uxth	r3, r3
 800346c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003470:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003474:	83fb      	strh	r3, [r7, #30]
 8003476:	8bfb      	ldrh	r3, [r7, #30]
 8003478:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800347c:	83fb      	strh	r3, [r7, #30]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	441a      	add	r2, r3
 800348c:	8bfb      	ldrh	r3, [r7, #30]
 800348e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003492:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003496:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800349a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800349e:	b29b      	uxth	r3, r3
 80034a0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80034a2:	88fb      	ldrh	r3, [r7, #6]
 80034a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d11f      	bne.n	80034ec <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	461a      	mov	r2, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	b29b      	uxth	r3, r3
 80034be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034c6:	83bb      	strh	r3, [r7, #28]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	461a      	mov	r2, r3
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	441a      	add	r2, r3
 80034d6:	8bbb      	ldrh	r3, [r7, #28]
 80034d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80034ec:	8b7b      	ldrh	r3, [r7, #26]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d008      	beq.n	8003504 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6818      	ldr	r0, [r3, #0]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	6959      	ldr	r1, [r3, #20]
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	895a      	ldrh	r2, [r3, #10]
 80034fe:	8b7b      	ldrh	r3, [r7, #26]
 8003500:	f004 fe72 	bl	80081e8 <USB_ReadPMA>
    }
  }

  return count;
 8003504:	8b7b      	ldrh	r3, [r7, #26]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3720      	adds	r7, #32
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b0a4      	sub	sp, #144	@ 0x90
 8003512:	af00      	add	r7, sp, #0
 8003514:	60f8      	str	r0, [r7, #12]
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	4613      	mov	r3, r2
 800351a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800351c:	88fb      	ldrh	r3, [r7, #6]
 800351e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 81dd 	beq.w	80038e2 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003530:	b29b      	uxth	r3, r3
 8003532:	461a      	mov	r2, r3
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	4413      	add	r3, r2
 800353c:	3302      	adds	r3, #2
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	6812      	ldr	r2, [r2, #0]
 8003544:	4413      	add	r3, r2
 8003546:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003550:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	699a      	ldr	r2, [r3, #24]
 8003558:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800355c:	429a      	cmp	r2, r3
 800355e:	d907      	bls.n	8003570 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	699a      	ldr	r2, [r3, #24]
 8003564:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003568:	1ad2      	subs	r2, r2, r3
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	619a      	str	r2, [r3, #24]
 800356e:	e002      	b.n	8003576 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2200      	movs	r2, #0
 8003574:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	2b00      	cmp	r3, #0
 800357c:	f040 80b9 	bne.w	80036f2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	785b      	ldrb	r3, [r3, #1]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d126      	bne.n	80035d6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003596:	b29b      	uxth	r3, r3
 8003598:	461a      	mov	r2, r3
 800359a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800359c:	4413      	add	r3, r2
 800359e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	011a      	lsls	r2, r3, #4
 80035a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a8:	4413      	add	r3, r2
 80035aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80035ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035be:	801a      	strh	r2, [r3, #0]
 80035c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d2:	801a      	strh	r2, [r3, #0]
 80035d4:	e01a      	b.n	800360c <HAL_PCD_EP_DB_Transmit+0xfe>
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	785b      	ldrb	r3, [r3, #1]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d116      	bne.n	800360c <HAL_PCD_EP_DB_Transmit+0xfe>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	461a      	mov	r2, r3
 80035f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035f2:	4413      	add	r3, r2
 80035f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	011a      	lsls	r2, r3, #4
 80035fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035fe:	4413      	add	r3, r2
 8003600:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003604:	633b      	str	r3, [r7, #48]	@ 0x30
 8003606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003608:	2200      	movs	r2, #0
 800360a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	627b      	str	r3, [r7, #36]	@ 0x24
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	785b      	ldrb	r3, [r3, #1]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d126      	bne.n	8003668 <HAL_PCD_EP_DB_Transmit+0x15a>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	61fb      	str	r3, [r7, #28]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003628:	b29b      	uxth	r3, r3
 800362a:	461a      	mov	r2, r3
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	4413      	add	r3, r2
 8003630:	61fb      	str	r3, [r7, #28]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	011a      	lsls	r2, r3, #4
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	4413      	add	r3, r2
 800363c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	b29b      	uxth	r3, r3
 8003648:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800364c:	b29a      	uxth	r2, r3
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	801a      	strh	r2, [r3, #0]
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	b29b      	uxth	r3, r3
 8003658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800365c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003660:	b29a      	uxth	r2, r3
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	801a      	strh	r2, [r3, #0]
 8003666:	e017      	b.n	8003698 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	785b      	ldrb	r3, [r3, #1]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d113      	bne.n	8003698 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003678:	b29b      	uxth	r3, r3
 800367a:	461a      	mov	r2, r3
 800367c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367e:	4413      	add	r3, r2
 8003680:	627b      	str	r3, [r7, #36]	@ 0x24
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	011a      	lsls	r2, r3, #4
 8003688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368a:	4413      	add	r3, r2
 800368c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003690:	623b      	str	r3, [r7, #32]
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	2200      	movs	r2, #0
 8003696:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	4619      	mov	r1, r3
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f006 fcdb 	bl	800a05a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036a4:	88fb      	ldrh	r3, [r7, #6]
 80036a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 82fc 	beq.w	8003ca8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	461a      	mov	r2, r3
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036ca:	82fb      	strh	r3, [r7, #22]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	461a      	mov	r2, r3
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	441a      	add	r2, r3
 80036da:	8afb      	ldrh	r3, [r7, #22]
 80036dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	8013      	strh	r3, [r2, #0]
 80036f0:	e2da      	b.n	8003ca8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036f2:	88fb      	ldrh	r3, [r7, #6]
 80036f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d021      	beq.n	8003740 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	461a      	mov	r2, r3
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	b29b      	uxth	r3, r3
 800370e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003716:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	441a      	add	r2, r3
 8003728:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800372c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003730:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003734:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800373c:	b29b      	uxth	r3, r3
 800373e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003746:	2b01      	cmp	r3, #1
 8003748:	f040 82ae 	bne.w	8003ca8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	695a      	ldr	r2, [r3, #20]
 8003750:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003754:	441a      	add	r2, r3
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	69da      	ldr	r2, [r3, #28]
 800375e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003762:	441a      	add	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	6a1a      	ldr	r2, [r3, #32]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	429a      	cmp	r2, r3
 8003772:	d30b      	bcc.n	800378c <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	6a1a      	ldr	r2, [r3, #32]
 8003780:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003784:	1ad2      	subs	r2, r2, r3
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	621a      	str	r2, [r3, #32]
 800378a:	e017      	b.n	80037bc <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d108      	bne.n	80037a6 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003794:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003798:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80037a4:	e00a      	b.n	80037bc <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2200      	movs	r2, #0
 80037ba:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	785b      	ldrb	r3, [r3, #1]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d165      	bne.n	8003890 <HAL_PCD_EP_DB_Transmit+0x382>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	461a      	mov	r2, r3
 80037d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037d8:	4413      	add	r3, r2
 80037da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	011a      	lsls	r2, r3, #4
 80037e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037e4:	4413      	add	r3, r2
 80037e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80037ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ee:	881b      	ldrh	r3, [r3, #0]
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037fa:	801a      	strh	r2, [r3, #0]
 80037fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003800:	2b3e      	cmp	r3, #62	@ 0x3e
 8003802:	d91d      	bls.n	8003840 <HAL_PCD_EP_DB_Transmit+0x332>
 8003804:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003808:	095b      	lsrs	r3, r3, #5
 800380a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800380c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003810:	f003 031f 	and.w	r3, r3, #31
 8003814:	2b00      	cmp	r3, #0
 8003816:	d102      	bne.n	800381e <HAL_PCD_EP_DB_Transmit+0x310>
 8003818:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800381a:	3b01      	subs	r3, #1
 800381c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800381e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	b29a      	uxth	r2, r3
 8003824:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003826:	b29b      	uxth	r3, r3
 8003828:	029b      	lsls	r3, r3, #10
 800382a:	b29b      	uxth	r3, r3
 800382c:	4313      	orrs	r3, r2
 800382e:	b29b      	uxth	r3, r3
 8003830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003838:	b29a      	uxth	r2, r3
 800383a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800383c:	801a      	strh	r2, [r3, #0]
 800383e:	e044      	b.n	80038ca <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003840:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10a      	bne.n	800385e <HAL_PCD_EP_DB_Transmit+0x350>
 8003848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	b29b      	uxth	r3, r3
 800384e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003852:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003856:	b29a      	uxth	r2, r3
 8003858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800385a:	801a      	strh	r2, [r3, #0]
 800385c:	e035      	b.n	80038ca <HAL_PCD_EP_DB_Transmit+0x3bc>
 800385e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003862:	085b      	lsrs	r3, r3, #1
 8003864:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003866:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003872:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003874:	3301      	adds	r3, #1
 8003876:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	b29a      	uxth	r2, r3
 800387e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003880:	b29b      	uxth	r3, r3
 8003882:	029b      	lsls	r3, r3, #10
 8003884:	b29b      	uxth	r3, r3
 8003886:	4313      	orrs	r3, r2
 8003888:	b29a      	uxth	r2, r3
 800388a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800388c:	801a      	strh	r2, [r3, #0]
 800388e:	e01c      	b.n	80038ca <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	785b      	ldrb	r3, [r3, #1]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d118      	bne.n	80038ca <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	647b      	str	r3, [r7, #68]	@ 0x44
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	461a      	mov	r2, r3
 80038aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038ac:	4413      	add	r3, r2
 80038ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	011a      	lsls	r2, r3, #4
 80038b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038b8:	4413      	add	r3, r2
 80038ba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80038be:	643b      	str	r3, [r7, #64]	@ 0x40
 80038c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038c8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	6959      	ldr	r1, [r3, #20]
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	891a      	ldrh	r2, [r3, #8]
 80038d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038da:	b29b      	uxth	r3, r3
 80038dc:	f004 fc3f 	bl	800815e <USB_WritePMA>
 80038e0:	e1e2      	b.n	8003ca8 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	461a      	mov	r2, r3
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	4413      	add	r3, r2
 80038f6:	3306      	adds	r3, #6
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	6812      	ldr	r2, [r2, #0]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800390a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	699a      	ldr	r2, [r3, #24]
 8003912:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003916:	429a      	cmp	r2, r3
 8003918:	d307      	bcc.n	800392a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	699a      	ldr	r2, [r3, #24]
 800391e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003922:	1ad2      	subs	r2, r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	619a      	str	r2, [r3, #24]
 8003928:	e002      	b.n	8003930 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2200      	movs	r2, #0
 800392e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	2b00      	cmp	r3, #0
 8003936:	f040 80c0 	bne.w	8003aba <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	785b      	ldrb	r3, [r3, #1]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d126      	bne.n	8003990 <HAL_PCD_EP_DB_Transmit+0x482>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003950:	b29b      	uxth	r3, r3
 8003952:	461a      	mov	r2, r3
 8003954:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003956:	4413      	add	r3, r2
 8003958:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	011a      	lsls	r2, r3, #4
 8003960:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003962:	4413      	add	r3, r2
 8003964:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003968:	67bb      	str	r3, [r7, #120]	@ 0x78
 800396a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	b29b      	uxth	r3, r3
 8003970:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003974:	b29a      	uxth	r2, r3
 8003976:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003978:	801a      	strh	r2, [r3, #0]
 800397a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	b29b      	uxth	r3, r3
 8003980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003988:	b29a      	uxth	r2, r3
 800398a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800398c:	801a      	strh	r2, [r3, #0]
 800398e:	e01a      	b.n	80039c6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	785b      	ldrb	r3, [r3, #1]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d116      	bne.n	80039c6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	667b      	str	r3, [r7, #100]	@ 0x64
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	461a      	mov	r2, r3
 80039aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039ac:	4413      	add	r3, r2
 80039ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	011a      	lsls	r2, r3, #4
 80039b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039b8:	4413      	add	r3, r2
 80039ba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80039be:	663b      	str	r3, [r7, #96]	@ 0x60
 80039c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039c2:	2200      	movs	r2, #0
 80039c4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	677b      	str	r3, [r7, #116]	@ 0x74
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	785b      	ldrb	r3, [r3, #1]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d12b      	bne.n	8003a2c <HAL_PCD_EP_DB_Transmit+0x51e>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	461a      	mov	r2, r3
 80039e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039e8:	4413      	add	r3, r2
 80039ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	011a      	lsls	r2, r3, #4
 80039f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039f4:	4413      	add	r3, r2
 80039f6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80039fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a10:	801a      	strh	r2, [r3, #0]
 8003a12:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a28:	801a      	strh	r2, [r3, #0]
 8003a2a:	e017      	b.n	8003a5c <HAL_PCD_EP_DB_Transmit+0x54e>
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	785b      	ldrb	r3, [r3, #1]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d113      	bne.n	8003a5c <HAL_PCD_EP_DB_Transmit+0x54e>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a42:	4413      	add	r3, r2
 8003a44:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	011a      	lsls	r2, r3, #4
 8003a4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a4e:	4413      	add	r3, r2
 8003a50:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a54:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a58:	2200      	movs	r2, #0
 8003a5a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	4619      	mov	r1, r3
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f006 faf9 	bl	800a05a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a68:	88fb      	ldrh	r3, [r7, #6]
 8003a6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f040 811a 	bne.w	8003ca8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a8e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	441a      	add	r2, r3
 8003aa0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003aa4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003aa8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003aac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	8013      	strh	r3, [r2, #0]
 8003ab8:	e0f6      	b.n	8003ca8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003aba:	88fb      	ldrh	r3, [r7, #6]
 8003abc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d121      	bne.n	8003b08 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ade:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	441a      	add	r2, r3
 8003af0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003af4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003af8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003afc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	f040 80ca 	bne.w	8003ca8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	695a      	ldr	r2, [r3, #20]
 8003b18:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b1c:	441a      	add	r2, r3
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	69da      	ldr	r2, [r3, #28]
 8003b26:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b2a:	441a      	add	r2, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	6a1a      	ldr	r2, [r3, #32]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d30b      	bcc.n	8003b54 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	6a1a      	ldr	r2, [r3, #32]
 8003b48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b4c:	1ad2      	subs	r2, r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	621a      	str	r2, [r3, #32]
 8003b52:	e017      	b.n	8003b84 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d108      	bne.n	8003b6e <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003b5c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003b60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003b6c:	e00a      	b.n	8003b84 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	785b      	ldrb	r3, [r3, #1]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d165      	bne.n	8003c5e <HAL_PCD_EP_DB_Transmit+0x750>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ba6:	4413      	add	r3, r2
 8003ba8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	011a      	lsls	r2, r3, #4
 8003bb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003bb8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003bba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bc8:	801a      	strh	r2, [r3, #0]
 8003bca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bce:	2b3e      	cmp	r3, #62	@ 0x3e
 8003bd0:	d91d      	bls.n	8003c0e <HAL_PCD_EP_DB_Transmit+0x700>
 8003bd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bde:	f003 031f 	and.w	r3, r3, #31
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d102      	bne.n	8003bec <HAL_PCD_EP_DB_Transmit+0x6de>
 8003be6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003be8:	3b01      	subs	r3, #1
 8003bea:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	029b      	lsls	r3, r3, #10
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c0a:	801a      	strh	r2, [r3, #0]
 8003c0c:	e041      	b.n	8003c92 <HAL_PCD_EP_DB_Transmit+0x784>
 8003c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10a      	bne.n	8003c2c <HAL_PCD_EP_DB_Transmit+0x71e>
 8003c16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c28:	801a      	strh	r2, [r3, #0]
 8003c2a:	e032      	b.n	8003c92 <HAL_PCD_EP_DB_Transmit+0x784>
 8003c2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c30:	085b      	lsrs	r3, r3, #1
 8003c32:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d002      	beq.n	8003c46 <HAL_PCD_EP_DB_Transmit+0x738>
 8003c40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c42:	3301      	adds	r3, #1
 8003c44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	029b      	lsls	r3, r3, #10
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	4313      	orrs	r3, r2
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c5a:	801a      	strh	r2, [r3, #0]
 8003c5c:	e019      	b.n	8003c92 <HAL_PCD_EP_DB_Transmit+0x784>
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	785b      	ldrb	r3, [r3, #1]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d115      	bne.n	8003c92 <HAL_PCD_EP_DB_Transmit+0x784>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	461a      	mov	r2, r3
 8003c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c74:	4413      	add	r3, r2
 8003c76:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	011a      	lsls	r2, r3, #4
 8003c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c80:	4413      	add	r3, r2
 8003c82:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003c86:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c90:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6959      	ldr	r1, [r3, #20]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	895a      	ldrh	r2, [r3, #10]
 8003c9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	f004 fa5b 	bl	800815e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	461a      	mov	r2, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cc2:	82bb      	strh	r3, [r7, #20]
 8003cc4:	8abb      	ldrh	r3, [r7, #20]
 8003cc6:	f083 0310 	eor.w	r3, r3, #16
 8003cca:	82bb      	strh	r3, [r7, #20]
 8003ccc:	8abb      	ldrh	r3, [r7, #20]
 8003cce:	f083 0320 	eor.w	r3, r3, #32
 8003cd2:	82bb      	strh	r3, [r7, #20]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	441a      	add	r2, r3
 8003ce2:	8abb      	ldrh	r3, [r7, #20]
 8003ce4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ce8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3790      	adds	r7, #144	@ 0x90
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b087      	sub	sp, #28
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	607b      	str	r3, [r7, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	817b      	strh	r3, [r7, #10]
 8003d10:	4613      	mov	r3, r2
 8003d12:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003d14:	897b      	ldrh	r3, [r7, #10]
 8003d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00b      	beq.n	8003d38 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d20:	897b      	ldrh	r3, [r7, #10]
 8003d22:	f003 0207 	and.w	r2, r3, #7
 8003d26:	4613      	mov	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	3310      	adds	r3, #16
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4413      	add	r3, r2
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	e009      	b.n	8003d4c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d38:	897a      	ldrh	r2, [r7, #10]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4413      	add	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003d4c:	893b      	ldrh	r3, [r7, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d107      	bne.n	8003d62 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2200      	movs	r2, #0
 8003d56:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	80da      	strh	r2, [r3, #6]
 8003d60:	e00b      	b.n	8003d7a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2201      	movs	r2, #1
 8003d66:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	0c1b      	lsrs	r3, r3, #16
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	371c      	adds	r7, #28
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bc80      	pop	{r7}
 8003d84:	4770      	bx	lr
	...

08003d88 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003d8c:	4b03      	ldr	r3, [pc, #12]	@ (8003d9c <HAL_PWR_EnableBkUpAccess+0x14>)
 8003d8e:	2201      	movs	r2, #1
 8003d90:	601a      	str	r2, [r3, #0]
}
 8003d92:	bf00      	nop
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bc80      	pop	{r7}
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	420e0020 	.word	0x420e0020

08003da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e272      	b.n	8004298 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 8087 	beq.w	8003ece <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dc0:	4b92      	ldr	r3, [pc, #584]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 030c 	and.w	r3, r3, #12
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d00c      	beq.n	8003de6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003dcc:	4b8f      	ldr	r3, [pc, #572]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 030c 	and.w	r3, r3, #12
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d112      	bne.n	8003dfe <HAL_RCC_OscConfig+0x5e>
 8003dd8:	4b8c      	ldr	r3, [pc, #560]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003de4:	d10b      	bne.n	8003dfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de6:	4b89      	ldr	r3, [pc, #548]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d06c      	beq.n	8003ecc <HAL_RCC_OscConfig+0x12c>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d168      	bne.n	8003ecc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e24c      	b.n	8004298 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e06:	d106      	bne.n	8003e16 <HAL_RCC_OscConfig+0x76>
 8003e08:	4b80      	ldr	r3, [pc, #512]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a7f      	ldr	r2, [pc, #508]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003e0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	e02e      	b.n	8003e74 <HAL_RCC_OscConfig+0xd4>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10c      	bne.n	8003e38 <HAL_RCC_OscConfig+0x98>
 8003e1e:	4b7b      	ldr	r3, [pc, #492]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a7a      	ldr	r2, [pc, #488]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003e24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	4b78      	ldr	r3, [pc, #480]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a77      	ldr	r2, [pc, #476]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003e30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	e01d      	b.n	8003e74 <HAL_RCC_OscConfig+0xd4>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e40:	d10c      	bne.n	8003e5c <HAL_RCC_OscConfig+0xbc>
 8003e42:	4b72      	ldr	r3, [pc, #456]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a71      	ldr	r2, [pc, #452]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003e48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	4b6f      	ldr	r3, [pc, #444]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a6e      	ldr	r2, [pc, #440]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	e00b      	b.n	8003e74 <HAL_RCC_OscConfig+0xd4>
 8003e5c:	4b6b      	ldr	r3, [pc, #428]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a6a      	ldr	r2, [pc, #424]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003e62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e66:	6013      	str	r3, [r2, #0]
 8003e68:	4b68      	ldr	r3, [pc, #416]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a67      	ldr	r2, [pc, #412]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003e6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d013      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7c:	f7fd f946 	bl	800110c <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e84:	f7fd f942 	bl	800110c <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	@ 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e200      	b.n	8004298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e96:	4b5d      	ldr	r3, [pc, #372]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCC_OscConfig+0xe4>
 8003ea2:	e014      	b.n	8003ece <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea4:	f7fd f932 	bl	800110c <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eac:	f7fd f92e 	bl	800110c <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b64      	cmp	r3, #100	@ 0x64
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e1ec      	b.n	8004298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ebe:	4b53      	ldr	r3, [pc, #332]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f0      	bne.n	8003eac <HAL_RCC_OscConfig+0x10c>
 8003eca:	e000      	b.n	8003ece <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d063      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003eda:	4b4c      	ldr	r3, [pc, #304]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f003 030c 	and.w	r3, r3, #12
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00b      	beq.n	8003efe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ee6:	4b49      	ldr	r3, [pc, #292]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f003 030c 	and.w	r3, r3, #12
 8003eee:	2b08      	cmp	r3, #8
 8003ef0:	d11c      	bne.n	8003f2c <HAL_RCC_OscConfig+0x18c>
 8003ef2:	4b46      	ldr	r3, [pc, #280]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d116      	bne.n	8003f2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003efe:	4b43      	ldr	r3, [pc, #268]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d005      	beq.n	8003f16 <HAL_RCC_OscConfig+0x176>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d001      	beq.n	8003f16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e1c0      	b.n	8004298 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f16:	4b3d      	ldr	r3, [pc, #244]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	4939      	ldr	r1, [pc, #228]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f2a:	e03a      	b.n	8003fa2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d020      	beq.n	8003f76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f34:	4b36      	ldr	r3, [pc, #216]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003f36:	2201      	movs	r2, #1
 8003f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3a:	f7fd f8e7 	bl	800110c <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f42:	f7fd f8e3 	bl	800110c <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e1a1      	b.n	8004298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f54:	4b2d      	ldr	r3, [pc, #180]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0f0      	beq.n	8003f42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f60:	4b2a      	ldr	r3, [pc, #168]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	4927      	ldr	r1, [pc, #156]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	600b      	str	r3, [r1, #0]
 8003f74:	e015      	b.n	8003fa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f76:	4b26      	ldr	r3, [pc, #152]	@ (8004010 <HAL_RCC_OscConfig+0x270>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7c:	f7fd f8c6 	bl	800110c <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f84:	f7fd f8c2 	bl	800110c <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e180      	b.n	8004298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f96:	4b1d      	ldr	r3, [pc, #116]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0308 	and.w	r3, r3, #8
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d03a      	beq.n	8004024 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d019      	beq.n	8003fea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fb6:	4b17      	ldr	r3, [pc, #92]	@ (8004014 <HAL_RCC_OscConfig+0x274>)
 8003fb8:	2201      	movs	r2, #1
 8003fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fbc:	f7fd f8a6 	bl	800110c <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fc4:	f7fd f8a2 	bl	800110c <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e160      	b.n	8004298 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800400c <HAL_RCC_OscConfig+0x26c>)
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0f0      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003fe2:	2001      	movs	r0, #1
 8003fe4:	f000 face 	bl	8004584 <RCC_Delay>
 8003fe8:	e01c      	b.n	8004024 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fea:	4b0a      	ldr	r3, [pc, #40]	@ (8004014 <HAL_RCC_OscConfig+0x274>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ff0:	f7fd f88c 	bl	800110c <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ff6:	e00f      	b.n	8004018 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ff8:	f7fd f888 	bl	800110c <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d908      	bls.n	8004018 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e146      	b.n	8004298 <HAL_RCC_OscConfig+0x4f8>
 800400a:	bf00      	nop
 800400c:	40021000 	.word	0x40021000
 8004010:	42420000 	.word	0x42420000
 8004014:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004018:	4b92      	ldr	r3, [pc, #584]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1e9      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 80a6 	beq.w	800417e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004032:	2300      	movs	r3, #0
 8004034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004036:	4b8b      	ldr	r3, [pc, #556]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10d      	bne.n	800405e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004042:	4b88      	ldr	r3, [pc, #544]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	4a87      	ldr	r2, [pc, #540]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 8004048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800404c:	61d3      	str	r3, [r2, #28]
 800404e:	4b85      	ldr	r3, [pc, #532]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004056:	60bb      	str	r3, [r7, #8]
 8004058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800405a:	2301      	movs	r3, #1
 800405c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800405e:	4b82      	ldr	r3, [pc, #520]	@ (8004268 <HAL_RCC_OscConfig+0x4c8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004066:	2b00      	cmp	r3, #0
 8004068:	d118      	bne.n	800409c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800406a:	4b7f      	ldr	r3, [pc, #508]	@ (8004268 <HAL_RCC_OscConfig+0x4c8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a7e      	ldr	r2, [pc, #504]	@ (8004268 <HAL_RCC_OscConfig+0x4c8>)
 8004070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004076:	f7fd f849 	bl	800110c <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800407e:	f7fd f845 	bl	800110c <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b64      	cmp	r3, #100	@ 0x64
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e103      	b.n	8004298 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004090:	4b75      	ldr	r3, [pc, #468]	@ (8004268 <HAL_RCC_OscConfig+0x4c8>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0f0      	beq.n	800407e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d106      	bne.n	80040b2 <HAL_RCC_OscConfig+0x312>
 80040a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	4a6e      	ldr	r2, [pc, #440]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 80040aa:	f043 0301 	orr.w	r3, r3, #1
 80040ae:	6213      	str	r3, [r2, #32]
 80040b0:	e02d      	b.n	800410e <HAL_RCC_OscConfig+0x36e>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10c      	bne.n	80040d4 <HAL_RCC_OscConfig+0x334>
 80040ba:	4b6a      	ldr	r3, [pc, #424]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	4a69      	ldr	r2, [pc, #420]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 80040c0:	f023 0301 	bic.w	r3, r3, #1
 80040c4:	6213      	str	r3, [r2, #32]
 80040c6:	4b67      	ldr	r3, [pc, #412]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	4a66      	ldr	r2, [pc, #408]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 80040cc:	f023 0304 	bic.w	r3, r3, #4
 80040d0:	6213      	str	r3, [r2, #32]
 80040d2:	e01c      	b.n	800410e <HAL_RCC_OscConfig+0x36e>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	2b05      	cmp	r3, #5
 80040da:	d10c      	bne.n	80040f6 <HAL_RCC_OscConfig+0x356>
 80040dc:	4b61      	ldr	r3, [pc, #388]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	4a60      	ldr	r2, [pc, #384]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 80040e2:	f043 0304 	orr.w	r3, r3, #4
 80040e6:	6213      	str	r3, [r2, #32]
 80040e8:	4b5e      	ldr	r3, [pc, #376]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	4a5d      	ldr	r2, [pc, #372]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 80040ee:	f043 0301 	orr.w	r3, r3, #1
 80040f2:	6213      	str	r3, [r2, #32]
 80040f4:	e00b      	b.n	800410e <HAL_RCC_OscConfig+0x36e>
 80040f6:	4b5b      	ldr	r3, [pc, #364]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	4a5a      	ldr	r2, [pc, #360]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 80040fc:	f023 0301 	bic.w	r3, r3, #1
 8004100:	6213      	str	r3, [r2, #32]
 8004102:	4b58      	ldr	r3, [pc, #352]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	4a57      	ldr	r2, [pc, #348]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 8004108:	f023 0304 	bic.w	r3, r3, #4
 800410c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d015      	beq.n	8004142 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004116:	f7fc fff9 	bl	800110c <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800411c:	e00a      	b.n	8004134 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800411e:	f7fc fff5 	bl	800110c <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800412c:	4293      	cmp	r3, r2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e0b1      	b.n	8004298 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004134:	4b4b      	ldr	r3, [pc, #300]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0ee      	beq.n	800411e <HAL_RCC_OscConfig+0x37e>
 8004140:	e014      	b.n	800416c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004142:	f7fc ffe3 	bl	800110c <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004148:	e00a      	b.n	8004160 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800414a:	f7fc ffdf 	bl	800110c <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004158:	4293      	cmp	r3, r2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e09b      	b.n	8004298 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004160:	4b40      	ldr	r3, [pc, #256]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1ee      	bne.n	800414a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800416c:	7dfb      	ldrb	r3, [r7, #23]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d105      	bne.n	800417e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004172:	4b3c      	ldr	r3, [pc, #240]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	4a3b      	ldr	r2, [pc, #236]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 8004178:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800417c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 8087 	beq.w	8004296 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004188:	4b36      	ldr	r3, [pc, #216]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f003 030c 	and.w	r3, r3, #12
 8004190:	2b08      	cmp	r3, #8
 8004192:	d061      	beq.n	8004258 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	2b02      	cmp	r3, #2
 800419a:	d146      	bne.n	800422a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800419c:	4b33      	ldr	r3, [pc, #204]	@ (800426c <HAL_RCC_OscConfig+0x4cc>)
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a2:	f7fc ffb3 	bl	800110c <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041aa:	f7fc ffaf 	bl	800110c <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e06d      	b.n	8004298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041bc:	4b29      	ldr	r3, [pc, #164]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1f0      	bne.n	80041aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041d0:	d108      	bne.n	80041e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041d2:	4b24      	ldr	r3, [pc, #144]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	4921      	ldr	r1, [pc, #132]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041e4:	4b1f      	ldr	r3, [pc, #124]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a19      	ldr	r1, [r3, #32]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f4:	430b      	orrs	r3, r1
 80041f6:	491b      	ldr	r1, [pc, #108]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041fc:	4b1b      	ldr	r3, [pc, #108]	@ (800426c <HAL_RCC_OscConfig+0x4cc>)
 80041fe:	2201      	movs	r2, #1
 8004200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004202:	f7fc ff83 	bl	800110c <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800420a:	f7fc ff7f 	bl	800110c <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e03d      	b.n	8004298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800421c:	4b11      	ldr	r3, [pc, #68]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0f0      	beq.n	800420a <HAL_RCC_OscConfig+0x46a>
 8004228:	e035      	b.n	8004296 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800422a:	4b10      	ldr	r3, [pc, #64]	@ (800426c <HAL_RCC_OscConfig+0x4cc>)
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004230:	f7fc ff6c 	bl	800110c <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004238:	f7fc ff68 	bl	800110c <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e026      	b.n	8004298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800424a:	4b06      	ldr	r3, [pc, #24]	@ (8004264 <HAL_RCC_OscConfig+0x4c4>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1f0      	bne.n	8004238 <HAL_RCC_OscConfig+0x498>
 8004256:	e01e      	b.n	8004296 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d107      	bne.n	8004270 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e019      	b.n	8004298 <HAL_RCC_OscConfig+0x4f8>
 8004264:	40021000 	.word	0x40021000
 8004268:	40007000 	.word	0x40007000
 800426c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004270:	4b0b      	ldr	r3, [pc, #44]	@ (80042a0 <HAL_RCC_OscConfig+0x500>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	429a      	cmp	r2, r3
 8004282:	d106      	bne.n	8004292 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800428e:	429a      	cmp	r2, r3
 8004290:	d001      	beq.n	8004296 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e000      	b.n	8004298 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3718      	adds	r7, #24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40021000 	.word	0x40021000

080042a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e0d0      	b.n	800445a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042b8:	4b6a      	ldr	r3, [pc, #424]	@ (8004464 <HAL_RCC_ClockConfig+0x1c0>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d910      	bls.n	80042e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c6:	4b67      	ldr	r3, [pc, #412]	@ (8004464 <HAL_RCC_ClockConfig+0x1c0>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f023 0207 	bic.w	r2, r3, #7
 80042ce:	4965      	ldr	r1, [pc, #404]	@ (8004464 <HAL_RCC_ClockConfig+0x1c0>)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042d6:	4b63      	ldr	r3, [pc, #396]	@ (8004464 <HAL_RCC_ClockConfig+0x1c0>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0307 	and.w	r3, r3, #7
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d001      	beq.n	80042e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e0b8      	b.n	800445a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d020      	beq.n	8004336 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d005      	beq.n	800430c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004300:	4b59      	ldr	r3, [pc, #356]	@ (8004468 <HAL_RCC_ClockConfig+0x1c4>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	4a58      	ldr	r2, [pc, #352]	@ (8004468 <HAL_RCC_ClockConfig+0x1c4>)
 8004306:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800430a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	2b00      	cmp	r3, #0
 8004316:	d005      	beq.n	8004324 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004318:	4b53      	ldr	r3, [pc, #332]	@ (8004468 <HAL_RCC_ClockConfig+0x1c4>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	4a52      	ldr	r2, [pc, #328]	@ (8004468 <HAL_RCC_ClockConfig+0x1c4>)
 800431e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004322:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004324:	4b50      	ldr	r3, [pc, #320]	@ (8004468 <HAL_RCC_ClockConfig+0x1c4>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	494d      	ldr	r1, [pc, #308]	@ (8004468 <HAL_RCC_ClockConfig+0x1c4>)
 8004332:	4313      	orrs	r3, r2
 8004334:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d040      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d107      	bne.n	800435a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434a:	4b47      	ldr	r3, [pc, #284]	@ (8004468 <HAL_RCC_ClockConfig+0x1c4>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d115      	bne.n	8004382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e07f      	b.n	800445a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b02      	cmp	r3, #2
 8004360:	d107      	bne.n	8004372 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004362:	4b41      	ldr	r3, [pc, #260]	@ (8004468 <HAL_RCC_ClockConfig+0x1c4>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d109      	bne.n	8004382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e073      	b.n	800445a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004372:	4b3d      	ldr	r3, [pc, #244]	@ (8004468 <HAL_RCC_ClockConfig+0x1c4>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e06b      	b.n	800445a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004382:	4b39      	ldr	r3, [pc, #228]	@ (8004468 <HAL_RCC_ClockConfig+0x1c4>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f023 0203 	bic.w	r2, r3, #3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	4936      	ldr	r1, [pc, #216]	@ (8004468 <HAL_RCC_ClockConfig+0x1c4>)
 8004390:	4313      	orrs	r3, r2
 8004392:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004394:	f7fc feba 	bl	800110c <HAL_GetTick>
 8004398:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800439a:	e00a      	b.n	80043b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800439c:	f7fc feb6 	bl	800110c <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e053      	b.n	800445a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b2:	4b2d      	ldr	r3, [pc, #180]	@ (8004468 <HAL_RCC_ClockConfig+0x1c4>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f003 020c 	and.w	r2, r3, #12
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d1eb      	bne.n	800439c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043c4:	4b27      	ldr	r3, [pc, #156]	@ (8004464 <HAL_RCC_ClockConfig+0x1c0>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0307 	and.w	r3, r3, #7
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d210      	bcs.n	80043f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d2:	4b24      	ldr	r3, [pc, #144]	@ (8004464 <HAL_RCC_ClockConfig+0x1c0>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f023 0207 	bic.w	r2, r3, #7
 80043da:	4922      	ldr	r1, [pc, #136]	@ (8004464 <HAL_RCC_ClockConfig+0x1c0>)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	4313      	orrs	r3, r2
 80043e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e2:	4b20      	ldr	r3, [pc, #128]	@ (8004464 <HAL_RCC_ClockConfig+0x1c0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d001      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e032      	b.n	800445a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d008      	beq.n	8004412 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004400:	4b19      	ldr	r3, [pc, #100]	@ (8004468 <HAL_RCC_ClockConfig+0x1c4>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	4916      	ldr	r1, [pc, #88]	@ (8004468 <HAL_RCC_ClockConfig+0x1c4>)
 800440e:	4313      	orrs	r3, r2
 8004410:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b00      	cmp	r3, #0
 800441c:	d009      	beq.n	8004432 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800441e:	4b12      	ldr	r3, [pc, #72]	@ (8004468 <HAL_RCC_ClockConfig+0x1c4>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	490e      	ldr	r1, [pc, #56]	@ (8004468 <HAL_RCC_ClockConfig+0x1c4>)
 800442e:	4313      	orrs	r3, r2
 8004430:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004432:	f000 f821 	bl	8004478 <HAL_RCC_GetSysClockFreq>
 8004436:	4602      	mov	r2, r0
 8004438:	4b0b      	ldr	r3, [pc, #44]	@ (8004468 <HAL_RCC_ClockConfig+0x1c4>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	091b      	lsrs	r3, r3, #4
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	490a      	ldr	r1, [pc, #40]	@ (800446c <HAL_RCC_ClockConfig+0x1c8>)
 8004444:	5ccb      	ldrb	r3, [r1, r3]
 8004446:	fa22 f303 	lsr.w	r3, r2, r3
 800444a:	4a09      	ldr	r2, [pc, #36]	@ (8004470 <HAL_RCC_ClockConfig+0x1cc>)
 800444c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800444e:	4b09      	ldr	r3, [pc, #36]	@ (8004474 <HAL_RCC_ClockConfig+0x1d0>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f7fc fe18 	bl	8001088 <HAL_InitTick>

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	40022000 	.word	0x40022000
 8004468:	40021000 	.word	0x40021000
 800446c:	0800b4e4 	.word	0x0800b4e4
 8004470:	20000000 	.word	0x20000000
 8004474:	2000000c 	.word	0x2000000c

08004478 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800447e:	2300      	movs	r3, #0
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	2300      	movs	r3, #0
 8004484:	60bb      	str	r3, [r7, #8]
 8004486:	2300      	movs	r3, #0
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	2300      	movs	r3, #0
 800448c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004492:	4b1e      	ldr	r3, [pc, #120]	@ (800450c <HAL_RCC_GetSysClockFreq+0x94>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f003 030c 	and.w	r3, r3, #12
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d002      	beq.n	80044a8 <HAL_RCC_GetSysClockFreq+0x30>
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	d003      	beq.n	80044ae <HAL_RCC_GetSysClockFreq+0x36>
 80044a6:	e027      	b.n	80044f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044a8:	4b19      	ldr	r3, [pc, #100]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x98>)
 80044aa:	613b      	str	r3, [r7, #16]
      break;
 80044ac:	e027      	b.n	80044fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	0c9b      	lsrs	r3, r3, #18
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	4a17      	ldr	r2, [pc, #92]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x9c>)
 80044b8:	5cd3      	ldrb	r3, [r2, r3]
 80044ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d010      	beq.n	80044e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044c6:	4b11      	ldr	r3, [pc, #68]	@ (800450c <HAL_RCC_GetSysClockFreq+0x94>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	0c5b      	lsrs	r3, r3, #17
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	4a11      	ldr	r2, [pc, #68]	@ (8004518 <HAL_RCC_GetSysClockFreq+0xa0>)
 80044d2:	5cd3      	ldrb	r3, [r2, r3]
 80044d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x98>)
 80044da:	fb03 f202 	mul.w	r2, r3, r2
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e4:	617b      	str	r3, [r7, #20]
 80044e6:	e004      	b.n	80044f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a0c      	ldr	r2, [pc, #48]	@ (800451c <HAL_RCC_GetSysClockFreq+0xa4>)
 80044ec:	fb02 f303 	mul.w	r3, r2, r3
 80044f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	613b      	str	r3, [r7, #16]
      break;
 80044f6:	e002      	b.n	80044fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044f8:	4b05      	ldr	r3, [pc, #20]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x98>)
 80044fa:	613b      	str	r3, [r7, #16]
      break;
 80044fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044fe:	693b      	ldr	r3, [r7, #16]
}
 8004500:	4618      	mov	r0, r3
 8004502:	371c      	adds	r7, #28
 8004504:	46bd      	mov	sp, r7
 8004506:	bc80      	pop	{r7}
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	40021000 	.word	0x40021000
 8004510:	007a1200 	.word	0x007a1200
 8004514:	0800b4fc 	.word	0x0800b4fc
 8004518:	0800b50c 	.word	0x0800b50c
 800451c:	003d0900 	.word	0x003d0900

08004520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004524:	4b02      	ldr	r3, [pc, #8]	@ (8004530 <HAL_RCC_GetHCLKFreq+0x10>)
 8004526:	681b      	ldr	r3, [r3, #0]
}
 8004528:	4618      	mov	r0, r3
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr
 8004530:	20000000 	.word	0x20000000

08004534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004538:	f7ff fff2 	bl	8004520 <HAL_RCC_GetHCLKFreq>
 800453c:	4602      	mov	r2, r0
 800453e:	4b05      	ldr	r3, [pc, #20]	@ (8004554 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	0a1b      	lsrs	r3, r3, #8
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	4903      	ldr	r1, [pc, #12]	@ (8004558 <HAL_RCC_GetPCLK1Freq+0x24>)
 800454a:	5ccb      	ldrb	r3, [r1, r3]
 800454c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004550:	4618      	mov	r0, r3
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40021000 	.word	0x40021000
 8004558:	0800b4f4 	.word	0x0800b4f4

0800455c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004560:	f7ff ffde 	bl	8004520 <HAL_RCC_GetHCLKFreq>
 8004564:	4602      	mov	r2, r0
 8004566:	4b05      	ldr	r3, [pc, #20]	@ (800457c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	0adb      	lsrs	r3, r3, #11
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	4903      	ldr	r1, [pc, #12]	@ (8004580 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004572:	5ccb      	ldrb	r3, [r1, r3]
 8004574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004578:	4618      	mov	r0, r3
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40021000 	.word	0x40021000
 8004580:	0800b4f4 	.word	0x0800b4f4

08004584 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800458c:	4b0a      	ldr	r3, [pc, #40]	@ (80045b8 <RCC_Delay+0x34>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a0a      	ldr	r2, [pc, #40]	@ (80045bc <RCC_Delay+0x38>)
 8004592:	fba2 2303 	umull	r2, r3, r2, r3
 8004596:	0a5b      	lsrs	r3, r3, #9
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	fb02 f303 	mul.w	r3, r2, r3
 800459e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80045a0:	bf00      	nop
  }
  while (Delay --);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	1e5a      	subs	r2, r3, #1
 80045a6:	60fa      	str	r2, [r7, #12]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1f9      	bne.n	80045a0 <RCC_Delay+0x1c>
}
 80045ac:	bf00      	nop
 80045ae:	bf00      	nop
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bc80      	pop	{r7}
 80045b6:	4770      	bx	lr
 80045b8:	20000000 	.word	0x20000000
 80045bc:	10624dd3 	.word	0x10624dd3

080045c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	613b      	str	r3, [r7, #16]
 80045cc:	2300      	movs	r3, #0
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d07d      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80045dc:	2300      	movs	r3, #0
 80045de:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045e0:	4b4f      	ldr	r3, [pc, #316]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10d      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ec:	4b4c      	ldr	r3, [pc, #304]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	4a4b      	ldr	r2, [pc, #300]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045f6:	61d3      	str	r3, [r2, #28]
 80045f8:	4b49      	ldr	r3, [pc, #292]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004600:	60bb      	str	r3, [r7, #8]
 8004602:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004604:	2301      	movs	r3, #1
 8004606:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004608:	4b46      	ldr	r3, [pc, #280]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004610:	2b00      	cmp	r3, #0
 8004612:	d118      	bne.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004614:	4b43      	ldr	r3, [pc, #268]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a42      	ldr	r2, [pc, #264]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800461a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800461e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004620:	f7fc fd74 	bl	800110c <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004626:	e008      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004628:	f7fc fd70 	bl	800110c <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b64      	cmp	r3, #100	@ 0x64
 8004634:	d901      	bls.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e06d      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463a:	4b3a      	ldr	r3, [pc, #232]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0f0      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004646:	4b36      	ldr	r3, [pc, #216]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800464e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d02e      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	429a      	cmp	r2, r3
 8004662:	d027      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004664:	4b2e      	ldr	r3, [pc, #184]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800466c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800466e:	4b2e      	ldr	r3, [pc, #184]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004670:	2201      	movs	r2, #1
 8004672:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004674:	4b2c      	ldr	r3, [pc, #176]	@ (8004728 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004676:	2200      	movs	r2, #0
 8004678:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800467a:	4a29      	ldr	r2, [pc, #164]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d014      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468a:	f7fc fd3f 	bl	800110c <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004690:	e00a      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004692:	f7fc fd3b 	bl	800110c <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e036      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0ee      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	4917      	ldr	r1, [pc, #92]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046c6:	7dfb      	ldrb	r3, [r7, #23]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d105      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046cc:	4b14      	ldr	r3, [pc, #80]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	4a13      	ldr	r2, [pc, #76]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d008      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	490b      	ldr	r1, [pc, #44]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0310 	and.w	r3, r3, #16
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d008      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004702:	4b07      	ldr	r3, [pc, #28]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	4904      	ldr	r1, [pc, #16]	@ (8004720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004710:	4313      	orrs	r3, r2
 8004712:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40021000 	.word	0x40021000
 8004724:	40007000 	.word	0x40007000
 8004728:	42420440 	.word	0x42420440

0800472c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b088      	sub	sp, #32
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	2300      	movs	r3, #0
 800473a:	61fb      	str	r3, [r7, #28]
 800473c:	2300      	movs	r3, #0
 800473e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	2300      	movs	r3, #0
 8004746:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b10      	cmp	r3, #16
 800474c:	d00a      	beq.n	8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b10      	cmp	r3, #16
 8004752:	f200 808a 	bhi.w	800486a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d045      	beq.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b02      	cmp	r3, #2
 8004760:	d075      	beq.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004762:	e082      	b.n	800486a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004764:	4b46      	ldr	r3, [pc, #280]	@ (8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800476a:	4b45      	ldr	r3, [pc, #276]	@ (8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d07b      	beq.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	0c9b      	lsrs	r3, r3, #18
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	4a41      	ldr	r2, [pc, #260]	@ (8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004780:	5cd3      	ldrb	r3, [r2, r3]
 8004782:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d015      	beq.n	80047ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800478e:	4b3c      	ldr	r3, [pc, #240]	@ (8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	0c5b      	lsrs	r3, r3, #17
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	4a3b      	ldr	r2, [pc, #236]	@ (8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800479a:	5cd3      	ldrb	r3, [r2, r3]
 800479c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00d      	beq.n	80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80047a8:	4a38      	ldr	r2, [pc, #224]	@ (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	fb02 f303 	mul.w	r3, r2, r3
 80047b6:	61fb      	str	r3, [r7, #28]
 80047b8:	e004      	b.n	80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	4a34      	ldr	r2, [pc, #208]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80047be:	fb02 f303 	mul.w	r3, r2, r3
 80047c2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80047c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047d0:	d102      	bne.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	61bb      	str	r3, [r7, #24]
      break;
 80047d6:	e04a      	b.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	4a2d      	ldr	r2, [pc, #180]	@ (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80047de:	fba2 2303 	umull	r2, r3, r2, r3
 80047e2:	085b      	lsrs	r3, r3, #1
 80047e4:	61bb      	str	r3, [r7, #24]
      break;
 80047e6:	e042      	b.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80047e8:	4b25      	ldr	r3, [pc, #148]	@ (8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047f8:	d108      	bne.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004804:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004808:	61bb      	str	r3, [r7, #24]
 800480a:	e01f      	b.n	800484c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004812:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004816:	d109      	bne.n	800482c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004818:	4b19      	ldr	r3, [pc, #100]	@ (8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800481a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004824:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004828:	61bb      	str	r3, [r7, #24]
 800482a:	e00f      	b.n	800484c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004832:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004836:	d11c      	bne.n	8004872 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004838:	4b11      	ldr	r3, [pc, #68]	@ (8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d016      	beq.n	8004872 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004844:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004848:	61bb      	str	r3, [r7, #24]
      break;
 800484a:	e012      	b.n	8004872 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800484c:	e011      	b.n	8004872 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800484e:	f7ff fe85 	bl	800455c <HAL_RCC_GetPCLK2Freq>
 8004852:	4602      	mov	r2, r0
 8004854:	4b0a      	ldr	r3, [pc, #40]	@ (8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	0b9b      	lsrs	r3, r3, #14
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	3301      	adds	r3, #1
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	fbb2 f3f3 	udiv	r3, r2, r3
 8004866:	61bb      	str	r3, [r7, #24]
      break;
 8004868:	e004      	b.n	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800486a:	bf00      	nop
 800486c:	e002      	b.n	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800486e:	bf00      	nop
 8004870:	e000      	b.n	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004872:	bf00      	nop
    }
  }
  return (frequency);
 8004874:	69bb      	ldr	r3, [r7, #24]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3720      	adds	r7, #32
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	40021000 	.word	0x40021000
 8004884:	0800b510 	.word	0x0800b510
 8004888:	0800b520 	.word	0x0800b520
 800488c:	007a1200 	.word	0x007a1200
 8004890:	003d0900 	.word	0x003d0900
 8004894:	aaaaaaab 	.word	0xaaaaaaab

08004898 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e07a      	b.n	80049a4 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	7c5b      	ldrb	r3, [r3, #17]
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d105      	bne.n	80048c4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7fc f978 	bl	8000bb4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f870 	bl	80049b0 <HAL_RTC_WaitForSynchro>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d004      	beq.n	80048e0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2204      	movs	r2, #4
 80048da:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e061      	b.n	80049a4 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f892 	bl	8004a0a <RTC_EnterInitMode>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d004      	beq.n	80048f6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2204      	movs	r2, #4
 80048f0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e056      	b.n	80049a4 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0207 	bic.w	r2, r2, #7
 8004904:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d005      	beq.n	800491a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800490e:	4b27      	ldr	r3, [pc, #156]	@ (80049ac <HAL_RTC_Init+0x114>)
 8004910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004912:	4a26      	ldr	r2, [pc, #152]	@ (80049ac <HAL_RTC_Init+0x114>)
 8004914:	f023 0301 	bic.w	r3, r3, #1
 8004918:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800491a:	4b24      	ldr	r3, [pc, #144]	@ (80049ac <HAL_RTC_Init+0x114>)
 800491c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491e:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	4921      	ldr	r1, [pc, #132]	@ (80049ac <HAL_RTC_Init+0x114>)
 8004928:	4313      	orrs	r3, r2
 800492a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004934:	d003      	beq.n	800493e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	e00e      	b.n	800495c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800493e:	2001      	movs	r0, #1
 8004940:	f7ff fef4 	bl	800472c <HAL_RCCEx_GetPeriphCLKFreq>
 8004944:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d104      	bne.n	8004956 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2204      	movs	r2, #4
 8004950:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e026      	b.n	80049a4 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	3b01      	subs	r3, #1
 800495a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	0c1a      	lsrs	r2, r3, #16
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f002 020f 	and.w	r2, r2, #15
 8004968:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	b292      	uxth	r2, r2
 8004972:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f870 	bl	8004a5a <RTC_ExitInitMode>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d004      	beq.n	800498a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2204      	movs	r2, #4
 8004984:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e00c      	b.n	80049a4 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80049a2:	2300      	movs	r3, #0
  }
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	40006c00 	.word	0x40006c00

080049b0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049b8:	2300      	movs	r3, #0
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e01d      	b.n	8004a02 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0208 	bic.w	r2, r2, #8
 80049d4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80049d6:	f7fc fb99 	bl	800110c <HAL_GetTick>
 80049da:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80049dc:	e009      	b.n	80049f2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80049de:	f7fc fb95 	bl	800110c <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049ec:	d901      	bls.n	80049f2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e007      	b.n	8004a02 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f003 0308 	and.w	r3, r3, #8
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0ee      	beq.n	80049de <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b084      	sub	sp, #16
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a12:	2300      	movs	r3, #0
 8004a14:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004a16:	f7fc fb79 	bl	800110c <HAL_GetTick>
 8004a1a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004a1c:	e009      	b.n	8004a32 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004a1e:	f7fc fb75 	bl	800110c <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a2c:	d901      	bls.n	8004a32 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e00f      	b.n	8004a52 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f003 0320 	and.w	r3, r3, #32
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0ee      	beq.n	8004a1e <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0210 	orr.w	r2, r2, #16
 8004a4e:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b084      	sub	sp, #16
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 0210 	bic.w	r2, r2, #16
 8004a74:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004a76:	f7fc fb49 	bl	800110c <HAL_GetTick>
 8004a7a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004a7c:	e009      	b.n	8004a92 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004a7e:	f7fc fb45 	bl	800110c <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a8c:	d901      	bls.n	8004a92 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e007      	b.n	8004aa2 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f003 0320 	and.w	r3, r3, #32
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d0ee      	beq.n	8004a7e <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
	...

08004aac <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 8004abc:	4b07      	ldr	r3, [pc, #28]	@ (8004adc <HAL_RTCEx_BKUPWrite+0x30>)
 8004abe:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	b292      	uxth	r2, r2
 8004ad0:	601a      	str	r2, [r3, #0]
}
 8004ad2:	bf00      	nop
 8004ad4:	371c      	adds	r7, #28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr
 8004adc:	40006c00 	.word	0x40006c00

08004ae0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 8004af2:	4b08      	ldr	r3, [pc, #32]	@ (8004b14 <HAL_RTCEx_BKUPRead+0x34>)
 8004af4:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	4413      	add	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8004b08:	68bb      	ldr	r3, [r7, #8]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bc80      	pop	{r7}
 8004b12:	4770      	bx	lr
 8004b14:	40006c00 	.word	0x40006c00

08004b18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e042      	b.n	8004bb0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d106      	bne.n	8004b44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7fc f99e 	bl	8000e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2224      	movs	r2, #36	@ 0x24
 8004b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68da      	ldr	r2, [r3, #12]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 ff6f 	bl	8005a40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	691a      	ldr	r2, [r3, #16]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	695a      	ldr	r2, [r3, #20]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68da      	ldr	r2, [r3, #12]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e024      	b.n	8004c14 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2224      	movs	r2, #36	@ 0x24
 8004bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68da      	ldr	r2, [r3, #12]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004be0:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7fc f9ca 	bl	8000f7c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08a      	sub	sp, #40	@ 0x28
 8004c20:	af02      	add	r7, sp, #8
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	603b      	str	r3, [r7, #0]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b20      	cmp	r3, #32
 8004c3a:	d175      	bne.n	8004d28 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <HAL_UART_Transmit+0x2c>
 8004c42:	88fb      	ldrh	r3, [r7, #6]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e06e      	b.n	8004d2a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2221      	movs	r2, #33	@ 0x21
 8004c56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c5a:	f7fc fa57 	bl	800110c <HAL_GetTick>
 8004c5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	88fa      	ldrh	r2, [r7, #6]
 8004c64:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	88fa      	ldrh	r2, [r7, #6]
 8004c6a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c74:	d108      	bne.n	8004c88 <HAL_UART_Transmit+0x6c>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d104      	bne.n	8004c88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	61bb      	str	r3, [r7, #24]
 8004c86:	e003      	b.n	8004c90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c90:	e02e      	b.n	8004cf0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	2180      	movs	r1, #128	@ 0x80
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f000 fc1a 	bl	80054d6 <UART_WaitOnFlagUntilTimeout>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d005      	beq.n	8004cb4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e03a      	b.n	8004d2a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10b      	bne.n	8004cd2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	3302      	adds	r3, #2
 8004cce:	61bb      	str	r3, [r7, #24]
 8004cd0:	e007      	b.n	8004ce2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	781a      	ldrb	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1cb      	bne.n	8004c92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	2200      	movs	r2, #0
 8004d02:	2140      	movs	r1, #64	@ 0x40
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 fbe6 	bl	80054d6 <UART_WaitOnFlagUntilTimeout>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d005      	beq.n	8004d1c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e006      	b.n	8004d2a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004d24:	2300      	movs	r3, #0
 8004d26:	e000      	b.n	8004d2a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004d28:	2302      	movs	r3, #2
  }
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3720      	adds	r7, #32
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b084      	sub	sp, #16
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b20      	cmp	r3, #32
 8004d4a:	d112      	bne.n	8004d72 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <HAL_UART_Receive_DMA+0x26>
 8004d52:	88fb      	ldrh	r3, [r7, #6]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e00b      	b.n	8004d74 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004d62:	88fb      	ldrh	r3, [r7, #6]
 8004d64:	461a      	mov	r2, r3
 8004d66:	68b9      	ldr	r1, [r7, #8]
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 fc0d 	bl	8005588 <UART_Start_Receive_DMA>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	e000      	b.n	8004d74 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d72:	2302      	movs	r3, #2
  }
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b0ba      	sub	sp, #232	@ 0xe8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004db2:	f003 030f 	and.w	r3, r3, #15
 8004db6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004dba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10f      	bne.n	8004de2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dc6:	f003 0320 	and.w	r3, r3, #32
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d009      	beq.n	8004de2 <HAL_UART_IRQHandler+0x66>
 8004dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dd2:	f003 0320 	and.w	r3, r3, #32
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fd72 	bl	80058c4 <UART_Receive_IT>
      return;
 8004de0:	e25b      	b.n	800529a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004de2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 80de 	beq.w	8004fa8 <HAL_UART_IRQHandler+0x22c>
 8004dec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d106      	bne.n	8004e06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dfc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 80d1 	beq.w	8004fa8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00b      	beq.n	8004e2a <HAL_UART_IRQHandler+0xae>
 8004e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d005      	beq.n	8004e2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e22:	f043 0201 	orr.w	r2, r3, #1
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e2e:	f003 0304 	and.w	r3, r3, #4
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00b      	beq.n	8004e4e <HAL_UART_IRQHandler+0xd2>
 8004e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d005      	beq.n	8004e4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e46:	f043 0202 	orr.w	r2, r3, #2
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00b      	beq.n	8004e72 <HAL_UART_IRQHandler+0xf6>
 8004e5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d005      	beq.n	8004e72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e6a:	f043 0204 	orr.w	r2, r3, #4
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e76:	f003 0308 	and.w	r3, r3, #8
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d011      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x126>
 8004e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e82:	f003 0320 	and.w	r3, r3, #32
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d105      	bne.n	8004e96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d005      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9a:	f043 0208 	orr.w	r2, r3, #8
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 81f2 	beq.w	8005290 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eb0:	f003 0320 	and.w	r3, r3, #32
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d008      	beq.n	8004eca <HAL_UART_IRQHandler+0x14e>
 8004eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ebc:	f003 0320 	and.w	r3, r3, #32
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d002      	beq.n	8004eca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 fcfd 	bl	80058c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	bf14      	ite	ne
 8004ed8:	2301      	movne	r3, #1
 8004eda:	2300      	moveq	r3, #0
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d103      	bne.n	8004ef6 <HAL_UART_IRQHandler+0x17a>
 8004eee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d04f      	beq.n	8004f96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 fc07 	bl	800570a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d041      	beq.n	8004f8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3314      	adds	r3, #20
 8004f10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f18:	e853 3f00 	ldrex	r3, [r3]
 8004f1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	3314      	adds	r3, #20
 8004f32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f36:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f46:	e841 2300 	strex	r3, r2, [r1]
 8004f4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1d9      	bne.n	8004f0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d013      	beq.n	8004f86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f62:	4a7e      	ldr	r2, [pc, #504]	@ (800515c <HAL_UART_IRQHandler+0x3e0>)
 8004f64:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fc fb8e 	bl	800168c <HAL_DMA_Abort_IT>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d016      	beq.n	8004fa4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f80:	4610      	mov	r0, r2
 8004f82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f84:	e00e      	b.n	8004fa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7fb ff68 	bl	8000e5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f8c:	e00a      	b.n	8004fa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7fb ff64 	bl	8000e5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f94:	e006      	b.n	8004fa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7fb ff60 	bl	8000e5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004fa2:	e175      	b.n	8005290 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa4:	bf00      	nop
    return;
 8004fa6:	e173      	b.n	8005290 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	f040 814f 	bne.w	8005250 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fb6:	f003 0310 	and.w	r3, r3, #16
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 8148 	beq.w	8005250 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fc4:	f003 0310 	and.w	r3, r3, #16
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 8141 	beq.w	8005250 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60bb      	str	r3, [r7, #8]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	60bb      	str	r3, [r7, #8]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	60bb      	str	r3, [r7, #8]
 8004fe2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 80b6 	beq.w	8005160 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005000:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 8145 	beq.w	8005294 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800500e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005012:	429a      	cmp	r2, r3
 8005014:	f080 813e 	bcs.w	8005294 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800501e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	2b20      	cmp	r3, #32
 8005028:	f000 8088 	beq.w	800513c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	330c      	adds	r3, #12
 8005032:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005036:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800503a:	e853 3f00 	ldrex	r3, [r3]
 800503e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005042:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005046:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800504a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	330c      	adds	r3, #12
 8005054:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005058:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800505c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005060:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005064:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005068:	e841 2300 	strex	r3, r2, [r1]
 800506c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005070:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1d9      	bne.n	800502c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3314      	adds	r3, #20
 800507e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005080:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005082:	e853 3f00 	ldrex	r3, [r3]
 8005086:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005088:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800508a:	f023 0301 	bic.w	r3, r3, #1
 800508e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3314      	adds	r3, #20
 8005098:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800509c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80050a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80050a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80050a8:	e841 2300 	strex	r3, r2, [r1]
 80050ac:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80050ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1e1      	bne.n	8005078 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3314      	adds	r3, #20
 80050ba:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050be:	e853 3f00 	ldrex	r3, [r3]
 80050c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80050c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3314      	adds	r3, #20
 80050d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80050d8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050da:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050dc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80050de:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050e0:	e841 2300 	strex	r3, r2, [r1]
 80050e4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80050e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1e3      	bne.n	80050b4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2220      	movs	r2, #32
 80050f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	330c      	adds	r3, #12
 8005100:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005102:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005104:	e853 3f00 	ldrex	r3, [r3]
 8005108:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800510a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800510c:	f023 0310 	bic.w	r3, r3, #16
 8005110:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	330c      	adds	r3, #12
 800511a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800511e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005120:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005122:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005124:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005126:	e841 2300 	strex	r3, r2, [r1]
 800512a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800512c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1e3      	bne.n	80050fa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005136:	4618      	mov	r0, r3
 8005138:	f7fc fa6c 	bl	8001614 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800514a:	b29b      	uxth	r3, r3
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	b29b      	uxth	r3, r3
 8005150:	4619      	mov	r1, r3
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f8b6 	bl	80052c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005158:	e09c      	b.n	8005294 <HAL_UART_IRQHandler+0x518>
 800515a:	bf00      	nop
 800515c:	080057cf 	.word	0x080057cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005168:	b29b      	uxth	r3, r3
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005174:	b29b      	uxth	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 808e 	beq.w	8005298 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800517c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 8089 	beq.w	8005298 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	330c      	adds	r3, #12
 800518c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005190:	e853 3f00 	ldrex	r3, [r3]
 8005194:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005198:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800519c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	330c      	adds	r3, #12
 80051a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80051aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80051ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051b2:	e841 2300 	strex	r3, r2, [r1]
 80051b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1e3      	bne.n	8005186 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	3314      	adds	r3, #20
 80051c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c8:	e853 3f00 	ldrex	r3, [r3]
 80051cc:	623b      	str	r3, [r7, #32]
   return(result);
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	f023 0301 	bic.w	r3, r3, #1
 80051d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3314      	adds	r3, #20
 80051de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80051e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80051e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051ea:	e841 2300 	strex	r3, r2, [r1]
 80051ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1e3      	bne.n	80051be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2220      	movs	r2, #32
 80051fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	330c      	adds	r3, #12
 800520a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	e853 3f00 	ldrex	r3, [r3]
 8005212:	60fb      	str	r3, [r7, #12]
   return(result);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0310 	bic.w	r3, r3, #16
 800521a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	330c      	adds	r3, #12
 8005224:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005228:	61fa      	str	r2, [r7, #28]
 800522a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522c:	69b9      	ldr	r1, [r7, #24]
 800522e:	69fa      	ldr	r2, [r7, #28]
 8005230:	e841 2300 	strex	r3, r2, [r1]
 8005234:	617b      	str	r3, [r7, #20]
   return(result);
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1e3      	bne.n	8005204 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005242:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005246:	4619      	mov	r1, r3
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 f83b 	bl	80052c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800524e:	e023      	b.n	8005298 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005258:	2b00      	cmp	r3, #0
 800525a:	d009      	beq.n	8005270 <HAL_UART_IRQHandler+0x4f4>
 800525c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fac4 	bl	80057f6 <UART_Transmit_IT>
    return;
 800526e:	e014      	b.n	800529a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00e      	beq.n	800529a <HAL_UART_IRQHandler+0x51e>
 800527c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005284:	2b00      	cmp	r3, #0
 8005286:	d008      	beq.n	800529a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 fb03 	bl	8005894 <UART_EndTransmit_IT>
    return;
 800528e:	e004      	b.n	800529a <HAL_UART_IRQHandler+0x51e>
    return;
 8005290:	bf00      	nop
 8005292:	e002      	b.n	800529a <HAL_UART_IRQHandler+0x51e>
      return;
 8005294:	bf00      	nop
 8005296:	e000      	b.n	800529a <HAL_UART_IRQHandler+0x51e>
      return;
 8005298:	bf00      	nop
  }
}
 800529a:	37e8      	adds	r7, #232	@ 0xe8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bc80      	pop	{r7}
 80052b0:	4770      	bx	lr

080052b2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80052ba:	bf00      	nop
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	bc80      	pop	{r7}
 80052c2:	4770      	bx	lr

080052c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	460b      	mov	r3, r1
 80052ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bc80      	pop	{r7}
 80052d8:	4770      	bx	lr

080052da <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b09c      	sub	sp, #112	@ 0x70
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d172      	bne.n	80053dc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80052f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052f8:	2200      	movs	r2, #0
 80052fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	330c      	adds	r3, #12
 8005302:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005306:	e853 3f00 	ldrex	r3, [r3]
 800530a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800530c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800530e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005312:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005314:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	330c      	adds	r3, #12
 800531a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800531c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800531e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005320:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005322:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005324:	e841 2300 	strex	r3, r2, [r1]
 8005328:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800532a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1e5      	bne.n	80052fc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005330:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3314      	adds	r3, #20
 8005336:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800533a:	e853 3f00 	ldrex	r3, [r3]
 800533e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005342:	f023 0301 	bic.w	r3, r3, #1
 8005346:	667b      	str	r3, [r7, #100]	@ 0x64
 8005348:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	3314      	adds	r3, #20
 800534e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005350:	647a      	str	r2, [r7, #68]	@ 0x44
 8005352:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005354:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005356:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005358:	e841 2300 	strex	r3, r2, [r1]
 800535c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800535e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1e5      	bne.n	8005330 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005364:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	3314      	adds	r3, #20
 800536a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536e:	e853 3f00 	ldrex	r3, [r3]
 8005372:	623b      	str	r3, [r7, #32]
   return(result);
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800537a:	663b      	str	r3, [r7, #96]	@ 0x60
 800537c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3314      	adds	r3, #20
 8005382:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005384:	633a      	str	r2, [r7, #48]	@ 0x30
 8005386:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005388:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800538a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800538c:	e841 2300 	strex	r3, r2, [r1]
 8005390:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1e5      	bne.n	8005364 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005398:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800539a:	2220      	movs	r2, #32
 800539c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d119      	bne.n	80053dc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	330c      	adds	r3, #12
 80053ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	e853 3f00 	ldrex	r3, [r3]
 80053b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0310 	bic.w	r3, r3, #16
 80053be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	330c      	adds	r3, #12
 80053c6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80053c8:	61fa      	str	r2, [r7, #28]
 80053ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053cc:	69b9      	ldr	r1, [r7, #24]
 80053ce:	69fa      	ldr	r2, [r7, #28]
 80053d0:	e841 2300 	strex	r3, r2, [r1]
 80053d4:	617b      	str	r3, [r7, #20]
   return(result);
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1e5      	bne.n	80053a8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053de:	2200      	movs	r2, #0
 80053e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d106      	bne.n	80053f8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053ee:	4619      	mov	r1, r3
 80053f0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80053f2:	f7ff ff67 	bl	80052c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80053f6:	e002      	b.n	80053fe <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80053f8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80053fa:	f7fb fd38 	bl	8000e6e <HAL_UART_RxCpltCallback>
}
 80053fe:	bf00      	nop
 8005400:	3770      	adds	r7, #112	@ 0x70
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b084      	sub	sp, #16
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005412:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2201      	movs	r2, #1
 8005418:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800541e:	2b01      	cmp	r3, #1
 8005420:	d108      	bne.n	8005434 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005426:	085b      	lsrs	r3, r3, #1
 8005428:	b29b      	uxth	r3, r3
 800542a:	4619      	mov	r1, r3
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f7ff ff49 	bl	80052c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005432:	e002      	b.n	800543a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f7ff ff3c 	bl	80052b2 <HAL_UART_RxHalfCpltCallback>
}
 800543a:	bf00      	nop
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b084      	sub	sp, #16
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800544a:	2300      	movs	r3, #0
 800544c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005452:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800545e:	2b00      	cmp	r3, #0
 8005460:	bf14      	ite	ne
 8005462:	2301      	movne	r3, #1
 8005464:	2300      	moveq	r3, #0
 8005466:	b2db      	uxtb	r3, r3
 8005468:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b21      	cmp	r3, #33	@ 0x21
 8005474:	d108      	bne.n	8005488 <UART_DMAError+0x46>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d005      	beq.n	8005488 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2200      	movs	r2, #0
 8005480:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005482:	68b8      	ldr	r0, [r7, #8]
 8005484:	f000 f91a 	bl	80056bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005492:	2b00      	cmp	r3, #0
 8005494:	bf14      	ite	ne
 8005496:	2301      	movne	r3, #1
 8005498:	2300      	moveq	r3, #0
 800549a:	b2db      	uxtb	r3, r3
 800549c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b22      	cmp	r3, #34	@ 0x22
 80054a8:	d108      	bne.n	80054bc <UART_DMAError+0x7a>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d005      	beq.n	80054bc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2200      	movs	r2, #0
 80054b4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80054b6:	68b8      	ldr	r0, [r7, #8]
 80054b8:	f000 f927 	bl	800570a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c0:	f043 0210 	orr.w	r2, r3, #16
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054c8:	68b8      	ldr	r0, [r7, #8]
 80054ca:	f7fb fcc7 	bl	8000e5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054ce:	bf00      	nop
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b086      	sub	sp, #24
 80054da:	af00      	add	r7, sp, #0
 80054dc:	60f8      	str	r0, [r7, #12]
 80054de:	60b9      	str	r1, [r7, #8]
 80054e0:	603b      	str	r3, [r7, #0]
 80054e2:	4613      	mov	r3, r2
 80054e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054e6:	e03b      	b.n	8005560 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ee:	d037      	beq.n	8005560 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054f0:	f7fb fe0c 	bl	800110c <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	6a3a      	ldr	r2, [r7, #32]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d302      	bcc.n	8005506 <UART_WaitOnFlagUntilTimeout+0x30>
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e03a      	b.n	8005580 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f003 0304 	and.w	r3, r3, #4
 8005514:	2b00      	cmp	r3, #0
 8005516:	d023      	beq.n	8005560 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b80      	cmp	r3, #128	@ 0x80
 800551c:	d020      	beq.n	8005560 <UART_WaitOnFlagUntilTimeout+0x8a>
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b40      	cmp	r3, #64	@ 0x40
 8005522:	d01d      	beq.n	8005560 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0308 	and.w	r3, r3, #8
 800552e:	2b08      	cmp	r3, #8
 8005530:	d116      	bne.n	8005560 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005532:	2300      	movs	r3, #0
 8005534:	617b      	str	r3, [r7, #20]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	617b      	str	r3, [r7, #20]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f000 f8de 	bl	800570a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2208      	movs	r2, #8
 8005552:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e00f      	b.n	8005580 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	4013      	ands	r3, r2
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	429a      	cmp	r2, r3
 800556e:	bf0c      	ite	eq
 8005570:	2301      	moveq	r3, #1
 8005572:	2300      	movne	r3, #0
 8005574:	b2db      	uxtb	r3, r3
 8005576:	461a      	mov	r2, r3
 8005578:	79fb      	ldrb	r3, [r7, #7]
 800557a:	429a      	cmp	r2, r3
 800557c:	d0b4      	beq.n	80054e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b098      	sub	sp, #96	@ 0x60
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	4613      	mov	r3, r2
 8005594:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	88fa      	ldrh	r2, [r7, #6]
 80055a0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2222      	movs	r2, #34	@ 0x22
 80055ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b4:	4a3e      	ldr	r2, [pc, #248]	@ (80056b0 <UART_Start_Receive_DMA+0x128>)
 80055b6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055bc:	4a3d      	ldr	r2, [pc, #244]	@ (80056b4 <UART_Start_Receive_DMA+0x12c>)
 80055be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055c4:	4a3c      	ldr	r2, [pc, #240]	@ (80056b8 <UART_Start_Receive_DMA+0x130>)
 80055c6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055cc:	2200      	movs	r2, #0
 80055ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80055d0:	f107 0308 	add.w	r3, r7, #8
 80055d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	3304      	adds	r3, #4
 80055e0:	4619      	mov	r1, r3
 80055e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	88fb      	ldrh	r3, [r7, #6]
 80055e8:	f7fb ffb4 	bl	8001554 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80055ec:	2300      	movs	r3, #0
 80055ee:	613b      	str	r3, [r7, #16]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	613b      	str	r3, [r7, #16]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	613b      	str	r3, [r7, #16]
 8005600:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d019      	beq.n	800563e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	330c      	adds	r3, #12
 8005610:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005614:	e853 3f00 	ldrex	r3, [r3]
 8005618:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800561a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800561c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005620:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	330c      	adds	r3, #12
 8005628:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800562a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800562c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005630:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005632:	e841 2300 	strex	r3, r2, [r1]
 8005636:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005638:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1e5      	bne.n	800560a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3314      	adds	r3, #20
 8005644:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005648:	e853 3f00 	ldrex	r3, [r3]
 800564c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800564e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005650:	f043 0301 	orr.w	r3, r3, #1
 8005654:	657b      	str	r3, [r7, #84]	@ 0x54
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3314      	adds	r3, #20
 800565c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800565e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005660:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005662:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005664:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005666:	e841 2300 	strex	r3, r2, [r1]
 800566a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800566c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1e5      	bne.n	800563e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3314      	adds	r3, #20
 8005678:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	e853 3f00 	ldrex	r3, [r3]
 8005680:	617b      	str	r3, [r7, #20]
   return(result);
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005688:	653b      	str	r3, [r7, #80]	@ 0x50
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	3314      	adds	r3, #20
 8005690:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005692:	627a      	str	r2, [r7, #36]	@ 0x24
 8005694:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005696:	6a39      	ldr	r1, [r7, #32]
 8005698:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800569a:	e841 2300 	strex	r3, r2, [r1]
 800569e:	61fb      	str	r3, [r7, #28]
   return(result);
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1e5      	bne.n	8005672 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3760      	adds	r7, #96	@ 0x60
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	080052db 	.word	0x080052db
 80056b4:	08005407 	.word	0x08005407
 80056b8:	08005443 	.word	0x08005443

080056bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80056bc:	b480      	push	{r7}
 80056be:	b089      	sub	sp, #36	@ 0x24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	330c      	adds	r3, #12
 80056ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	e853 3f00 	ldrex	r3, [r3]
 80056d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80056da:	61fb      	str	r3, [r7, #28]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	330c      	adds	r3, #12
 80056e2:	69fa      	ldr	r2, [r7, #28]
 80056e4:	61ba      	str	r2, [r7, #24]
 80056e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e8:	6979      	ldr	r1, [r7, #20]
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	e841 2300 	strex	r3, r2, [r1]
 80056f0:	613b      	str	r3, [r7, #16]
   return(result);
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1e5      	bne.n	80056c4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005700:	bf00      	nop
 8005702:	3724      	adds	r7, #36	@ 0x24
 8005704:	46bd      	mov	sp, r7
 8005706:	bc80      	pop	{r7}
 8005708:	4770      	bx	lr

0800570a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800570a:	b480      	push	{r7}
 800570c:	b095      	sub	sp, #84	@ 0x54
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	330c      	adds	r3, #12
 8005718:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800571c:	e853 3f00 	ldrex	r3, [r3]
 8005720:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005724:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005728:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	330c      	adds	r3, #12
 8005730:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005732:	643a      	str	r2, [r7, #64]	@ 0x40
 8005734:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005736:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005738:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800573a:	e841 2300 	strex	r3, r2, [r1]
 800573e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1e5      	bne.n	8005712 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3314      	adds	r3, #20
 800574c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	e853 3f00 	ldrex	r3, [r3]
 8005754:	61fb      	str	r3, [r7, #28]
   return(result);
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	f023 0301 	bic.w	r3, r3, #1
 800575c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	3314      	adds	r3, #20
 8005764:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005766:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005768:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800576c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800576e:	e841 2300 	strex	r3, r2, [r1]
 8005772:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1e5      	bne.n	8005746 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800577e:	2b01      	cmp	r3, #1
 8005780:	d119      	bne.n	80057b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	330c      	adds	r3, #12
 8005788:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	e853 3f00 	ldrex	r3, [r3]
 8005790:	60bb      	str	r3, [r7, #8]
   return(result);
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	f023 0310 	bic.w	r3, r3, #16
 8005798:	647b      	str	r3, [r7, #68]	@ 0x44
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	330c      	adds	r3, #12
 80057a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057a2:	61ba      	str	r2, [r7, #24]
 80057a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a6:	6979      	ldr	r1, [r7, #20]
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	e841 2300 	strex	r3, r2, [r1]
 80057ae:	613b      	str	r3, [r7, #16]
   return(result);
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1e5      	bne.n	8005782 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2220      	movs	r2, #32
 80057ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80057c4:	bf00      	nop
 80057c6:	3754      	adds	r7, #84	@ 0x54
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bc80      	pop	{r7}
 80057cc:	4770      	bx	lr

080057ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b084      	sub	sp, #16
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f7fb fb37 	bl	8000e5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057ee:	bf00      	nop
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b085      	sub	sp, #20
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b21      	cmp	r3, #33	@ 0x21
 8005808:	d13e      	bne.n	8005888 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005812:	d114      	bne.n	800583e <UART_Transmit_IT+0x48>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d110      	bne.n	800583e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	461a      	mov	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005830:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	1c9a      	adds	r2, r3, #2
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	621a      	str	r2, [r3, #32]
 800583c:	e008      	b.n	8005850 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	1c59      	adds	r1, r3, #1
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	6211      	str	r1, [r2, #32]
 8005848:	781a      	ldrb	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005854:	b29b      	uxth	r3, r3
 8005856:	3b01      	subs	r3, #1
 8005858:	b29b      	uxth	r3, r3
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	4619      	mov	r1, r3
 800585e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10f      	bne.n	8005884 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68da      	ldr	r2, [r3, #12]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005872:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005882:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005884:	2300      	movs	r3, #0
 8005886:	e000      	b.n	800588a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005888:	2302      	movs	r3, #2
  }
}
 800588a:	4618      	mov	r0, r3
 800588c:	3714      	adds	r7, #20
 800588e:	46bd      	mov	sp, r7
 8005890:	bc80      	pop	{r7}
 8005892:	4770      	bx	lr

08005894 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2220      	movs	r2, #32
 80058b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7ff fcf3 	bl	80052a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3708      	adds	r7, #8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08c      	sub	sp, #48	@ 0x30
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b22      	cmp	r3, #34	@ 0x22
 80058d6:	f040 80ae 	bne.w	8005a36 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058e2:	d117      	bne.n	8005914 <UART_Receive_IT+0x50>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d113      	bne.n	8005914 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80058ec:	2300      	movs	r3, #0
 80058ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005902:	b29a      	uxth	r2, r3
 8005904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005906:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800590c:	1c9a      	adds	r2, r3, #2
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	629a      	str	r2, [r3, #40]	@ 0x28
 8005912:	e026      	b.n	8005962 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005918:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800591a:	2300      	movs	r3, #0
 800591c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005926:	d007      	beq.n	8005938 <UART_Receive_IT+0x74>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10a      	bne.n	8005946 <UART_Receive_IT+0x82>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d106      	bne.n	8005946 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	b2da      	uxtb	r2, r3
 8005940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005942:	701a      	strb	r2, [r3, #0]
 8005944:	e008      	b.n	8005958 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	b2db      	uxtb	r3, r3
 800594e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005952:	b2da      	uxtb	r2, r3
 8005954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005956:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005966:	b29b      	uxth	r3, r3
 8005968:	3b01      	subs	r3, #1
 800596a:	b29b      	uxth	r3, r3
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	4619      	mov	r1, r3
 8005970:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005972:	2b00      	cmp	r3, #0
 8005974:	d15d      	bne.n	8005a32 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68da      	ldr	r2, [r3, #12]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f022 0220 	bic.w	r2, r2, #32
 8005984:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005994:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	695a      	ldr	r2, [r3, #20]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 0201 	bic.w	r2, r2, #1
 80059a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2220      	movs	r2, #32
 80059aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d135      	bne.n	8005a28 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	330c      	adds	r3, #12
 80059c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	e853 3f00 	ldrex	r3, [r3]
 80059d0:	613b      	str	r3, [r7, #16]
   return(result);
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	f023 0310 	bic.w	r3, r3, #16
 80059d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	330c      	adds	r3, #12
 80059e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059e2:	623a      	str	r2, [r7, #32]
 80059e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e6:	69f9      	ldr	r1, [r7, #28]
 80059e8:	6a3a      	ldr	r2, [r7, #32]
 80059ea:	e841 2300 	strex	r3, r2, [r1]
 80059ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1e5      	bne.n	80059c2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0310 	and.w	r3, r3, #16
 8005a00:	2b10      	cmp	r3, #16
 8005a02:	d10a      	bne.n	8005a1a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a04:	2300      	movs	r3, #0
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	60fb      	str	r3, [r7, #12]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a1e:	4619      	mov	r1, r3
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7ff fc4f 	bl	80052c4 <HAL_UARTEx_RxEventCallback>
 8005a26:	e002      	b.n	8005a2e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f7fb fa20 	bl	8000e6e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	e002      	b.n	8005a38 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005a32:	2300      	movs	r3, #0
 8005a34:	e000      	b.n	8005a38 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005a36:	2302      	movs	r3, #2
  }
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3730      	adds	r7, #48	@ 0x30
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68da      	ldr	r2, [r3, #12]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689a      	ldr	r2, [r3, #8]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	431a      	orrs	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005a7a:	f023 030c 	bic.w	r3, r3, #12
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6812      	ldr	r2, [r2, #0]
 8005a82:	68b9      	ldr	r1, [r7, #8]
 8005a84:	430b      	orrs	r3, r1
 8005a86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	699a      	ldr	r2, [r3, #24]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a2c      	ldr	r2, [pc, #176]	@ (8005b54 <UART_SetConfig+0x114>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d103      	bne.n	8005ab0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005aa8:	f7fe fd58 	bl	800455c <HAL_RCC_GetPCLK2Freq>
 8005aac:	60f8      	str	r0, [r7, #12]
 8005aae:	e002      	b.n	8005ab6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ab0:	f7fe fd40 	bl	8004534 <HAL_RCC_GetPCLK1Freq>
 8005ab4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	009a      	lsls	r2, r3, #2
 8005ac0:	441a      	add	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005acc:	4a22      	ldr	r2, [pc, #136]	@ (8005b58 <UART_SetConfig+0x118>)
 8005ace:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad2:	095b      	lsrs	r3, r3, #5
 8005ad4:	0119      	lsls	r1, r3, #4
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	009a      	lsls	r2, r3, #2
 8005ae0:	441a      	add	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005aec:	4b1a      	ldr	r3, [pc, #104]	@ (8005b58 <UART_SetConfig+0x118>)
 8005aee:	fba3 0302 	umull	r0, r3, r3, r2
 8005af2:	095b      	lsrs	r3, r3, #5
 8005af4:	2064      	movs	r0, #100	@ 0x64
 8005af6:	fb00 f303 	mul.w	r3, r0, r3
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	011b      	lsls	r3, r3, #4
 8005afe:	3332      	adds	r3, #50	@ 0x32
 8005b00:	4a15      	ldr	r2, [pc, #84]	@ (8005b58 <UART_SetConfig+0x118>)
 8005b02:	fba2 2303 	umull	r2, r3, r2, r3
 8005b06:	095b      	lsrs	r3, r3, #5
 8005b08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b0c:	4419      	add	r1, r3
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	4613      	mov	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	009a      	lsls	r2, r3, #2
 8005b18:	441a      	add	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b24:	4b0c      	ldr	r3, [pc, #48]	@ (8005b58 <UART_SetConfig+0x118>)
 8005b26:	fba3 0302 	umull	r0, r3, r3, r2
 8005b2a:	095b      	lsrs	r3, r3, #5
 8005b2c:	2064      	movs	r0, #100	@ 0x64
 8005b2e:	fb00 f303 	mul.w	r3, r0, r3
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	3332      	adds	r3, #50	@ 0x32
 8005b38:	4a07      	ldr	r2, [pc, #28]	@ (8005b58 <UART_SetConfig+0x118>)
 8005b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3e:	095b      	lsrs	r3, r3, #5
 8005b40:	f003 020f 	and.w	r2, r3, #15
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	440a      	add	r2, r1
 8005b4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005b4c:	bf00      	nop
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	40013800 	.word	0x40013800
 8005b58:	51eb851f 	.word	0x51eb851f

08005b5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	4638      	mov	r0, r7
 8005b66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bc80      	pop	{r7}
 8005b74:	4770      	bx	lr

08005b76 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b085      	sub	sp, #20
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b86:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005b8a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bc80      	pop	{r7}
 8005ba0:	4770      	bx	lr

08005ba2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b085      	sub	sp, #20
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005baa:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005bae:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	43db      	mvns	r3, r3
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3714      	adds	r7, #20
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bc80      	pop	{r7}
 8005bd4:	4770      	bx	lr

08005bd6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	460b      	mov	r3, r1
 8005be0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bc80      	pop	{r7}
 8005bec:	4770      	bx	lr

08005bee <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b085      	sub	sp, #20
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	60f8      	str	r0, [r7, #12]
 8005bf6:	4638      	mov	r0, r7
 8005bf8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bc80      	pop	{r7}
 8005c26:	4770      	bx	lr

08005c28 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b09d      	sub	sp, #116	@ 0x74
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c32:	2300      	movs	r3, #0
 8005c34:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	881b      	ldrh	r3, [r3, #0]
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c4e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	78db      	ldrb	r3, [r3, #3]
 8005c56:	2b03      	cmp	r3, #3
 8005c58:	d81f      	bhi.n	8005c9a <USB_ActivateEndpoint+0x72>
 8005c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c60 <USB_ActivateEndpoint+0x38>)
 8005c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c60:	08005c71 	.word	0x08005c71
 8005c64:	08005c8d 	.word	0x08005c8d
 8005c68:	08005ca3 	.word	0x08005ca3
 8005c6c:	08005c7f 	.word	0x08005c7f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005c70:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005c74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c78:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005c7c:	e012      	b.n	8005ca4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005c7e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005c82:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005c86:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005c8a:	e00b      	b.n	8005ca4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005c8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005c90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005c94:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005c98:	e004      	b.n	8005ca4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005ca0:	e000      	b.n	8005ca4 <USB_ActivateEndpoint+0x7c>
      break;
 8005ca2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	441a      	add	r2, r3
 8005cae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005cb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	7812      	ldrb	r2, [r2, #0]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	441a      	add	r2, r3
 8005cf2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005cf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	7b1b      	ldrb	r3, [r3, #12]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f040 8178 	bne.w	8006004 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	785b      	ldrb	r3, [r3, #1]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 8084 	beq.w	8005e26 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	61bb      	str	r3, [r7, #24]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	4413      	add	r3, r2
 8005d30:	61bb      	str	r3, [r7, #24]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	011a      	lsls	r2, r3, #4
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d40:	617b      	str	r3, [r7, #20]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	88db      	ldrh	r3, [r3, #6]
 8005d46:	085b      	lsrs	r3, r3, #1
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	881b      	ldrh	r3, [r3, #0]
 8005d5e:	827b      	strh	r3, [r7, #18]
 8005d60:	8a7b      	ldrh	r3, [r7, #18]
 8005d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d01b      	beq.n	8005da2 <USB_ActivateEndpoint+0x17a>
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	881b      	ldrh	r3, [r3, #0]
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d80:	823b      	strh	r3, [r7, #16]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	441a      	add	r2, r3
 8005d8c:	8a3b      	ldrh	r3, [r7, #16]
 8005d8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d9a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	78db      	ldrb	r3, [r3, #3]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d020      	beq.n	8005dec <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dc0:	81bb      	strh	r3, [r7, #12]
 8005dc2:	89bb      	ldrh	r3, [r7, #12]
 8005dc4:	f083 0320 	eor.w	r3, r3, #32
 8005dc8:	81bb      	strh	r3, [r7, #12]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	441a      	add	r2, r3
 8005dd4:	89bb      	ldrh	r3, [r7, #12]
 8005dd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	8013      	strh	r3, [r2, #0]
 8005dea:	e2d5      	b.n	8006398 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	881b      	ldrh	r3, [r3, #0]
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e02:	81fb      	strh	r3, [r7, #14]
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	441a      	add	r2, r3
 8005e0e:	89fb      	ldrh	r3, [r7, #14]
 8005e10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	8013      	strh	r3, [r2, #0]
 8005e24:	e2b8      	b.n	8006398 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	461a      	mov	r2, r3
 8005e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e36:	4413      	add	r3, r2
 8005e38:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	011a      	lsls	r2, r3, #4
 8005e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	88db      	ldrh	r3, [r3, #6]
 8005e4e:	085b      	lsrs	r3, r3, #1
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e58:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	461a      	mov	r2, r3
 8005e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e6a:	4413      	add	r3, r2
 8005e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	011a      	lsls	r2, r3, #4
 8005e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e76:	4413      	add	r3, r2
 8005e78:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8c:	801a      	strh	r2, [r3, #0]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e94:	d91d      	bls.n	8005ed2 <USB_ActivateEndpoint+0x2aa>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	095b      	lsrs	r3, r3, #5
 8005e9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f003 031f 	and.w	r3, r3, #31
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d102      	bne.n	8005eb0 <USB_ActivateEndpoint+0x288>
 8005eaa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005eac:	3b01      	subs	r3, #1
 8005eae:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb2:	881b      	ldrh	r3, [r3, #0]
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	029b      	lsls	r3, r3, #10
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ec6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ece:	801a      	strh	r2, [r3, #0]
 8005ed0:	e026      	b.n	8005f20 <USB_ActivateEndpoint+0x2f8>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10a      	bne.n	8005ef0 <USB_ActivateEndpoint+0x2c8>
 8005eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eec:	801a      	strh	r2, [r3, #0]
 8005eee:	e017      	b.n	8005f20 <USB_ActivateEndpoint+0x2f8>
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	085b      	lsrs	r3, r3, #1
 8005ef6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <USB_ActivateEndpoint+0x2e2>
 8005f04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f06:	3301      	adds	r3, #1
 8005f08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	029b      	lsls	r3, r3, #10
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	881b      	ldrh	r3, [r3, #0]
 8005f2c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005f2e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d01b      	beq.n	8005f70 <USB_ActivateEndpoint+0x348>
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f4e:	843b      	strh	r3, [r7, #32]
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	441a      	add	r2, r3
 8005f5a:	8c3b      	ldrh	r3, [r7, #32]
 8005f5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d124      	bne.n	8005fc2 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	881b      	ldrh	r3, [r3, #0]
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f8e:	83bb      	strh	r3, [r7, #28]
 8005f90:	8bbb      	ldrh	r3, [r7, #28]
 8005f92:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005f96:	83bb      	strh	r3, [r7, #28]
 8005f98:	8bbb      	ldrh	r3, [r7, #28]
 8005f9a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005f9e:	83bb      	strh	r3, [r7, #28]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	441a      	add	r2, r3
 8005faa:	8bbb      	ldrh	r3, [r7, #28]
 8005fac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	8013      	strh	r3, [r2, #0]
 8005fc0:	e1ea      	b.n	8006398 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fd8:	83fb      	strh	r3, [r7, #30]
 8005fda:	8bfb      	ldrh	r3, [r7, #30]
 8005fdc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005fe0:	83fb      	strh	r3, [r7, #30]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	441a      	add	r2, r3
 8005fec:	8bfb      	ldrh	r3, [r7, #30]
 8005fee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ff2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ff6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	8013      	strh	r3, [r2, #0]
 8006002:	e1c9      	b.n	8006398 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	78db      	ldrb	r3, [r3, #3]
 8006008:	2b02      	cmp	r3, #2
 800600a:	d11e      	bne.n	800604a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	b29b      	uxth	r3, r3
 800601a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800601e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006022:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	441a      	add	r2, r3
 8006030:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006034:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006038:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800603c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006040:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006044:	b29b      	uxth	r3, r3
 8006046:	8013      	strh	r3, [r2, #0]
 8006048:	e01d      	b.n	8006086 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	b29b      	uxth	r3, r3
 8006058:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800605c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006060:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	441a      	add	r2, r3
 800606e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006072:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006076:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800607a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800607e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006082:	b29b      	uxth	r3, r3
 8006084:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006090:	b29b      	uxth	r3, r3
 8006092:	461a      	mov	r2, r3
 8006094:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006096:	4413      	add	r3, r2
 8006098:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	011a      	lsls	r2, r3, #4
 80060a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	891b      	ldrh	r3, [r3, #8]
 80060ae:	085b      	lsrs	r3, r3, #1
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060b8:	801a      	strh	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	461a      	mov	r2, r3
 80060c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060ca:	4413      	add	r3, r2
 80060cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	011a      	lsls	r2, r3, #4
 80060d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80060dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	895b      	ldrh	r3, [r3, #10]
 80060e2:	085b      	lsrs	r3, r3, #1
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060ec:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	785b      	ldrb	r3, [r3, #1]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f040 8093 	bne.w	800621e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006108:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800610c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d01b      	beq.n	800614c <USB_ActivateEndpoint+0x524>
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4413      	add	r3, r2
 800611e:	881b      	ldrh	r3, [r3, #0]
 8006120:	b29b      	uxth	r3, r3
 8006122:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800612a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	441a      	add	r2, r3
 8006136:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006138:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800613c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006140:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006148:	b29b      	uxth	r3, r3
 800614a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800615a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800615c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006160:	2b00      	cmp	r3, #0
 8006162:	d01b      	beq.n	800619c <USB_ActivateEndpoint+0x574>
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	b29b      	uxth	r3, r3
 8006172:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800617a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	441a      	add	r2, r3
 8006186:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006188:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800618c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006190:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006194:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006198:	b29b      	uxth	r3, r3
 800619a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061b2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80061b4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80061b6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80061ba:	873b      	strh	r3, [r7, #56]	@ 0x38
 80061bc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80061be:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80061c2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	441a      	add	r2, r3
 80061ce:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80061d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	881b      	ldrh	r3, [r3, #0]
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061fa:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	441a      	add	r2, r3
 8006206:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006208:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800620c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006210:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006218:	b29b      	uxth	r3, r3
 800621a:	8013      	strh	r3, [r2, #0]
 800621c:	e0bc      	b.n	8006398 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800622e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006232:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d01d      	beq.n	8006276 <USB_ActivateEndpoint+0x64e>
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	b29b      	uxth	r3, r3
 8006248:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800624c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006250:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	441a      	add	r2, r3
 800625e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006262:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006266:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800626a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800626e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006272:	b29b      	uxth	r3, r3
 8006274:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006286:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800628a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800628e:	2b00      	cmp	r3, #0
 8006290:	d01d      	beq.n	80062ce <USB_ActivateEndpoint+0x6a6>
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062a8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	441a      	add	r2, r3
 80062b6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80062ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062c6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	78db      	ldrb	r3, [r3, #3]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d024      	beq.n	8006320 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4413      	add	r3, r2
 80062e0:	881b      	ldrh	r3, [r3, #0]
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062ec:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80062f0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80062f4:	f083 0320 	eor.w	r3, r3, #32
 80062f8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	441a      	add	r2, r3
 8006306:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800630a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800630e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006312:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800631a:	b29b      	uxth	r3, r3
 800631c:	8013      	strh	r3, [r2, #0]
 800631e:	e01d      	b.n	800635c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	4413      	add	r3, r2
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	b29b      	uxth	r3, r3
 800632e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006332:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006336:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	441a      	add	r2, r3
 8006344:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006348:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800634c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006350:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006354:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006358:	b29b      	uxth	r3, r3
 800635a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	b29b      	uxth	r3, r3
 800636a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800636e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006372:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	441a      	add	r2, r3
 8006380:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006384:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006388:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800638c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006390:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006394:	b29b      	uxth	r3, r3
 8006396:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006398:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800639c:	4618      	mov	r0, r3
 800639e:	3774      	adds	r7, #116	@ 0x74
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bc80      	pop	{r7}
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop

080063a8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b08d      	sub	sp, #52	@ 0x34
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	7b1b      	ldrb	r3, [r3, #12]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f040 808e 	bne.w	80064d8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	785b      	ldrb	r3, [r3, #1]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d044      	beq.n	800644e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	4413      	add	r3, r2
 80063ce:	881b      	ldrh	r3, [r3, #0]
 80063d0:	81bb      	strh	r3, [r7, #12]
 80063d2:	89bb      	ldrh	r3, [r7, #12]
 80063d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d01b      	beq.n	8006414 <USB_DeactivateEndpoint+0x6c>
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063f2:	817b      	strh	r3, [r7, #10]
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	441a      	add	r2, r3
 80063fe:	897b      	ldrh	r3, [r7, #10]
 8006400:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006404:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006408:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800640c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006410:	b29b      	uxth	r3, r3
 8006412:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	b29b      	uxth	r3, r3
 8006422:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006426:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800642a:	813b      	strh	r3, [r7, #8]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	441a      	add	r2, r3
 8006436:	893b      	ldrh	r3, [r7, #8]
 8006438:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800643c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006440:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006444:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006448:	b29b      	uxth	r3, r3
 800644a:	8013      	strh	r3, [r2, #0]
 800644c:	e192      	b.n	8006774 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4413      	add	r3, r2
 8006458:	881b      	ldrh	r3, [r3, #0]
 800645a:	827b      	strh	r3, [r7, #18]
 800645c:	8a7b      	ldrh	r3, [r7, #18]
 800645e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d01b      	beq.n	800649e <USB_DeactivateEndpoint+0xf6>
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	b29b      	uxth	r3, r3
 8006474:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006478:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800647c:	823b      	strh	r3, [r7, #16]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	441a      	add	r2, r3
 8006488:	8a3b      	ldrh	r3, [r7, #16]
 800648a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800648e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006492:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800649a:	b29b      	uxth	r3, r3
 800649c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	881b      	ldrh	r3, [r3, #0]
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064b4:	81fb      	strh	r3, [r7, #14]
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	441a      	add	r2, r3
 80064c0:	89fb      	ldrh	r3, [r7, #14]
 80064c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	8013      	strh	r3, [r2, #0]
 80064d6:	e14d      	b.n	8006774 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	785b      	ldrb	r3, [r3, #1]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f040 80a5 	bne.w	800662c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4413      	add	r3, r2
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	843b      	strh	r3, [r7, #32]
 80064f0:	8c3b      	ldrh	r3, [r7, #32]
 80064f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d01b      	beq.n	8006532 <USB_DeactivateEndpoint+0x18a>
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	b29b      	uxth	r3, r3
 8006508:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800650c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006510:	83fb      	strh	r3, [r7, #30]
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	441a      	add	r2, r3
 800651c:	8bfb      	ldrh	r3, [r7, #30]
 800651e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006522:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006526:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800652a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800652e:	b29b      	uxth	r3, r3
 8006530:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	881b      	ldrh	r3, [r3, #0]
 800653e:	83bb      	strh	r3, [r7, #28]
 8006540:	8bbb      	ldrh	r3, [r7, #28]
 8006542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006546:	2b00      	cmp	r3, #0
 8006548:	d01b      	beq.n	8006582 <USB_DeactivateEndpoint+0x1da>
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4413      	add	r3, r2
 8006554:	881b      	ldrh	r3, [r3, #0]
 8006556:	b29b      	uxth	r3, r3
 8006558:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800655c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006560:	837b      	strh	r3, [r7, #26]
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	441a      	add	r2, r3
 800656c:	8b7b      	ldrh	r3, [r7, #26]
 800656e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006572:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006576:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800657a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800657e:	b29b      	uxth	r3, r3
 8006580:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	881b      	ldrh	r3, [r3, #0]
 800658e:	b29b      	uxth	r3, r3
 8006590:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006594:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006598:	833b      	strh	r3, [r7, #24]
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	441a      	add	r2, r3
 80065a4:	8b3b      	ldrh	r3, [r7, #24]
 80065a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	881b      	ldrh	r3, [r3, #0]
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065d0:	82fb      	strh	r3, [r7, #22]
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	441a      	add	r2, r3
 80065dc:	8afb      	ldrh	r3, [r7, #22]
 80065de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	881b      	ldrh	r3, [r3, #0]
 80065fe:	b29b      	uxth	r3, r3
 8006600:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006604:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006608:	82bb      	strh	r3, [r7, #20]
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	441a      	add	r2, r3
 8006614:	8abb      	ldrh	r3, [r7, #20]
 8006616:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800661a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800661e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006626:	b29b      	uxth	r3, r3
 8006628:	8013      	strh	r3, [r2, #0]
 800662a:	e0a3      	b.n	8006774 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800663a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800663c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d01b      	beq.n	800667c <USB_DeactivateEndpoint+0x2d4>
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	881b      	ldrh	r3, [r3, #0]
 8006650:	b29b      	uxth	r3, r3
 8006652:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800665a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	441a      	add	r2, r3
 8006666:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006668:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800666c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006670:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006678:	b29b      	uxth	r3, r3
 800667a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800668a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800668c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006690:	2b00      	cmp	r3, #0
 8006692:	d01b      	beq.n	80066cc <USB_DeactivateEndpoint+0x324>
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	881b      	ldrh	r3, [r3, #0]
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066aa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	441a      	add	r2, r3
 80066b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80066b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	b29b      	uxth	r3, r3
 80066da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066e2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	441a      	add	r2, r3
 80066ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80066f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006700:	b29b      	uxth	r3, r3
 8006702:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	881b      	ldrh	r3, [r3, #0]
 8006710:	b29b      	uxth	r3, r3
 8006712:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006716:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800671a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	441a      	add	r2, r3
 8006726:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006728:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800672c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006730:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006738:	b29b      	uxth	r3, r3
 800673a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4413      	add	r3, r2
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	b29b      	uxth	r3, r3
 800674a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800674e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006752:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	441a      	add	r2, r3
 800675e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006760:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006764:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006768:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800676c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006770:	b29b      	uxth	r3, r3
 8006772:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3734      	adds	r7, #52	@ 0x34
 800677a:	46bd      	mov	sp, r7
 800677c:	bc80      	pop	{r7}
 800677e:	4770      	bx	lr

08006780 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b0c2      	sub	sp, #264	@ 0x108
 8006784:	af00      	add	r7, sp, #0
 8006786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800678a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800678e:	6018      	str	r0, [r3, #0]
 8006790:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006794:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006798:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800679a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800679e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	785b      	ldrb	r3, [r3, #1]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	f040 86b7 	bne.w	800751a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80067ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	699a      	ldr	r2, [r3, #24]
 80067b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d908      	bls.n	80067da <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80067c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80067d8:	e007      	b.n	80067ea <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80067da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80067ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	7b1b      	ldrb	r3, [r3, #12]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d13a      	bne.n	8006870 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80067fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6959      	ldr	r1, [r3, #20]
 8006806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800680a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	88da      	ldrh	r2, [r3, #6]
 8006812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006816:	b29b      	uxth	r3, r3
 8006818:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800681c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006820:	6800      	ldr	r0, [r0, #0]
 8006822:	f001 fc9c 	bl	800815e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800682a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	613b      	str	r3, [r7, #16]
 8006832:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006836:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006840:	b29b      	uxth	r3, r3
 8006842:	461a      	mov	r2, r3
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	4413      	add	r3, r2
 8006848:	613b      	str	r3, [r7, #16]
 800684a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800684e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	011a      	lsls	r2, r3, #4
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	4413      	add	r3, r2
 800685c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006860:	60fb      	str	r3, [r7, #12]
 8006862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006866:	b29a      	uxth	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	801a      	strh	r2, [r3, #0]
 800686c:	f000 be1f 	b.w	80074ae <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	78db      	ldrb	r3, [r3, #3]
 800687c:	2b02      	cmp	r3, #2
 800687e:	f040 8462 	bne.w	8007146 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006886:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6a1a      	ldr	r2, [r3, #32]
 800688e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006892:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	429a      	cmp	r2, r3
 800689c:	f240 83df 	bls.w	800705e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80068a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	881b      	ldrh	r3, [r3, #0]
 80068bc:	b29b      	uxth	r3, r3
 80068be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068c6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80068ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	441a      	add	r2, r3
 80068e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80068e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068f0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80068f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80068fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	6a1a      	ldr	r2, [r3, #32]
 8006908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800690c:	1ad2      	subs	r2, r2, r3
 800690e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006912:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800691a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800691e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006928:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	881b      	ldrh	r3, [r3, #0]
 8006936:	b29b      	uxth	r3, r3
 8006938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 81c7 	beq.w	8006cd0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006946:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	633b      	str	r3, [r7, #48]	@ 0x30
 800694e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006952:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	785b      	ldrb	r3, [r3, #1]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d177      	bne.n	8006a4e <USB_EPStartXfer+0x2ce>
 800695e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006962:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	62bb      	str	r3, [r7, #40]	@ 0x28
 800696a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800696e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006978:	b29b      	uxth	r3, r3
 800697a:	461a      	mov	r2, r3
 800697c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800697e:	4413      	add	r3, r2
 8006980:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006986:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	011a      	lsls	r2, r3, #4
 8006990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006992:	4413      	add	r3, r2
 8006994:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006998:	627b      	str	r3, [r7, #36]	@ 0x24
 800699a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	b29b      	uxth	r3, r3
 80069a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a8:	801a      	strh	r2, [r3, #0]
 80069aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80069b0:	d921      	bls.n	80069f6 <USB_EPStartXfer+0x276>
 80069b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b6:	095b      	lsrs	r3, r3, #5
 80069b8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80069bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c0:	f003 031f 	and.w	r3, r3, #31
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d104      	bne.n	80069d2 <USB_EPStartXfer+0x252>
 80069c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80069cc:	3b01      	subs	r3, #1
 80069ce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80069d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80069dc:	b29b      	uxth	r3, r3
 80069de:	029b      	lsls	r3, r3, #10
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	4313      	orrs	r3, r2
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f2:	801a      	strh	r2, [r3, #0]
 80069f4:	e050      	b.n	8006a98 <USB_EPStartXfer+0x318>
 80069f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10a      	bne.n	8006a14 <USB_EPStartXfer+0x294>
 80069fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a10:	801a      	strh	r2, [r3, #0]
 8006a12:	e041      	b.n	8006a98 <USB_EPStartXfer+0x318>
 8006a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a18:	085b      	lsrs	r3, r3, #1
 8006a1a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d004      	beq.n	8006a34 <USB_EPStartXfer+0x2b4>
 8006a2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006a2e:	3301      	adds	r3, #1
 8006a30:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a36:	881b      	ldrh	r3, [r3, #0]
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	029b      	lsls	r3, r3, #10
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	4313      	orrs	r3, r2
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4a:	801a      	strh	r2, [r3, #0]
 8006a4c:	e024      	b.n	8006a98 <USB_EPStartXfer+0x318>
 8006a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	785b      	ldrb	r3, [r3, #1]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d11c      	bne.n	8006a98 <USB_EPStartXfer+0x318>
 8006a5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	461a      	mov	r2, r3
 8006a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a72:	4413      	add	r3, r2
 8006a74:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	011a      	lsls	r2, r3, #4
 8006a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a86:	4413      	add	r3, r2
 8006a88:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a96:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006a98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	895b      	ldrh	r3, [r3, #10]
 8006aa4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6959      	ldr	r1, [r3, #20]
 8006ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006abe:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006ac2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006ac6:	6800      	ldr	r0, [r0, #0]
 8006ac8:	f001 fb49 	bl	800815e <USB_WritePMA>
            ep->xfer_buff += len;
 8006acc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	695a      	ldr	r2, [r3, #20]
 8006ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006adc:	441a      	add	r2, r3
 8006ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6a1a      	ldr	r2, [r3, #32]
 8006af6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006afa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d90f      	bls.n	8006b26 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006b06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6a1a      	ldr	r2, [r3, #32]
 8006b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b16:	1ad2      	subs	r2, r2, r3
 8006b18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	621a      	str	r2, [r3, #32]
 8006b24:	e00e      	b.n	8006b44 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006b26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006b36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2200      	movs	r2, #0
 8006b42:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	785b      	ldrb	r3, [r3, #1]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d177      	bne.n	8006c44 <USB_EPStartXfer+0x4c4>
 8006b54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	61bb      	str	r3, [r7, #24]
 8006b60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	461a      	mov	r2, r3
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	4413      	add	r3, r2
 8006b76:	61bb      	str	r3, [r7, #24]
 8006b78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	011a      	lsls	r2, r3, #4
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	4413      	add	r3, r2
 8006b8a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006b8e:	617b      	str	r3, [r7, #20]
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	881b      	ldrh	r3, [r3, #0]
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	801a      	strh	r2, [r3, #0]
 8006ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba4:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ba6:	d921      	bls.n	8006bec <USB_EPStartXfer+0x46c>
 8006ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bac:	095b      	lsrs	r3, r3, #5
 8006bae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb6:	f003 031f 	and.w	r3, r3, #31
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d104      	bne.n	8006bc8 <USB_EPStartXfer+0x448>
 8006bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	029b      	lsls	r3, r3, #10
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	801a      	strh	r2, [r3, #0]
 8006bea:	e056      	b.n	8006c9a <USB_EPStartXfer+0x51a>
 8006bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10a      	bne.n	8006c0a <USB_EPStartXfer+0x48a>
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	881b      	ldrh	r3, [r3, #0]
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	801a      	strh	r2, [r3, #0]
 8006c08:	e047      	b.n	8006c9a <USB_EPStartXfer+0x51a>
 8006c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c0e:	085b      	lsrs	r3, r3, #1
 8006c10:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d004      	beq.n	8006c2a <USB_EPStartXfer+0x4aa>
 8006c20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c24:	3301      	adds	r3, #1
 8006c26:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	881b      	ldrh	r3, [r3, #0]
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	029b      	lsls	r3, r3, #10
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	801a      	strh	r2, [r3, #0]
 8006c42:	e02a      	b.n	8006c9a <USB_EPStartXfer+0x51a>
 8006c44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	785b      	ldrb	r3, [r3, #1]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d122      	bne.n	8006c9a <USB_EPStartXfer+0x51a>
 8006c54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	623b      	str	r3, [r7, #32]
 8006c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	461a      	mov	r2, r3
 8006c72:	6a3b      	ldr	r3, [r7, #32]
 8006c74:	4413      	add	r3, r2
 8006c76:	623b      	str	r3, [r7, #32]
 8006c78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	011a      	lsls	r2, r3, #4
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c8e:	61fb      	str	r3, [r7, #28]
 8006c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006c9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	891b      	ldrh	r3, [r3, #8]
 8006ca6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006caa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6959      	ldr	r1, [r3, #20]
 8006cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006cc0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006cc4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006cc8:	6800      	ldr	r0, [r0, #0]
 8006cca:	f001 fa48 	bl	800815e <USB_WritePMA>
 8006cce:	e3ee      	b.n	80074ae <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	785b      	ldrb	r3, [r3, #1]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d177      	bne.n	8006dd0 <USB_EPStartXfer+0x650>
 8006ce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d00:	4413      	add	r3, r2
 8006d02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	011a      	lsls	r2, r3, #4
 8006d12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d14:	4413      	add	r3, r2
 8006d16:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d1e:	881b      	ldrh	r3, [r3, #0]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d2a:	801a      	strh	r2, [r3, #0]
 8006d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d30:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d32:	d921      	bls.n	8006d78 <USB_EPStartXfer+0x5f8>
 8006d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d38:	095b      	lsrs	r3, r3, #5
 8006d3a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d42:	f003 031f 	and.w	r3, r3, #31
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d104      	bne.n	8006d54 <USB_EPStartXfer+0x5d4>
 8006d4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	029b      	lsls	r3, r3, #10
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	4313      	orrs	r3, r2
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d74:	801a      	strh	r2, [r3, #0]
 8006d76:	e056      	b.n	8006e26 <USB_EPStartXfer+0x6a6>
 8006d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10a      	bne.n	8006d96 <USB_EPStartXfer+0x616>
 8006d80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d92:	801a      	strh	r2, [r3, #0]
 8006d94:	e047      	b.n	8006e26 <USB_EPStartXfer+0x6a6>
 8006d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d9a:	085b      	lsrs	r3, r3, #1
 8006d9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da4:	f003 0301 	and.w	r3, r3, #1
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d004      	beq.n	8006db6 <USB_EPStartXfer+0x636>
 8006dac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006db0:	3301      	adds	r3, #1
 8006db2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006db6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006db8:	881b      	ldrh	r3, [r3, #0]
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	029b      	lsls	r3, r3, #10
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dcc:	801a      	strh	r2, [r3, #0]
 8006dce:	e02a      	b.n	8006e26 <USB_EPStartXfer+0x6a6>
 8006dd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	785b      	ldrb	r3, [r3, #1]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d122      	bne.n	8006e26 <USB_EPStartXfer+0x6a6>
 8006de0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e00:	4413      	add	r3, r2
 8006e02:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	011a      	lsls	r2, r3, #4
 8006e12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e14:	4413      	add	r3, r2
 8006e16:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e24:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006e26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	891b      	ldrh	r3, [r3, #8]
 8006e32:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6959      	ldr	r1, [r3, #20]
 8006e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006e4c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006e50:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006e54:	6800      	ldr	r0, [r0, #0]
 8006e56:	f001 f982 	bl	800815e <USB_WritePMA>
            ep->xfer_buff += len;
 8006e5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	695a      	ldr	r2, [r3, #20]
 8006e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e6a:	441a      	add	r2, r3
 8006e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6a1a      	ldr	r2, [r3, #32]
 8006e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d90f      	bls.n	8006eb4 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006e94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	6a1a      	ldr	r2, [r3, #32]
 8006ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ea4:	1ad2      	subs	r2, r2, r3
 8006ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	621a      	str	r2, [r3, #32]
 8006eb2:	e00e      	b.n	8006ed2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	6a1b      	ldr	r3, [r3, #32]
 8006ec0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ed2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	785b      	ldrb	r3, [r3, #1]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d177      	bne.n	8006fde <USB_EPStartXfer+0x85e>
 8006eee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f0e:	4413      	add	r3, r2
 8006f10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	011a      	lsls	r2, r3, #4
 8006f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f22:	4413      	add	r3, r2
 8006f24:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f28:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f38:	801a      	strh	r2, [r3, #0]
 8006f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f40:	d921      	bls.n	8006f86 <USB_EPStartXfer+0x806>
 8006f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f46:	095b      	lsrs	r3, r3, #5
 8006f48:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f50:	f003 031f 	and.w	r3, r3, #31
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d104      	bne.n	8006f62 <USB_EPStartXfer+0x7e2>
 8006f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	029b      	lsls	r3, r3, #10
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	4313      	orrs	r3, r2
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f82:	801a      	strh	r2, [r3, #0]
 8006f84:	e050      	b.n	8007028 <USB_EPStartXfer+0x8a8>
 8006f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10a      	bne.n	8006fa4 <USB_EPStartXfer+0x824>
 8006f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f90:	881b      	ldrh	r3, [r3, #0]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fa0:	801a      	strh	r2, [r3, #0]
 8006fa2:	e041      	b.n	8007028 <USB_EPStartXfer+0x8a8>
 8006fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa8:	085b      	lsrs	r3, r3, #1
 8006faa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d004      	beq.n	8006fc4 <USB_EPStartXfer+0x844>
 8006fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fc6:	881b      	ldrh	r3, [r3, #0]
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	029b      	lsls	r3, r3, #10
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fda:	801a      	strh	r2, [r3, #0]
 8006fdc:	e024      	b.n	8007028 <USB_EPStartXfer+0x8a8>
 8006fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	785b      	ldrb	r3, [r3, #1]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d11c      	bne.n	8007028 <USB_EPStartXfer+0x8a8>
 8006fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ff2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	461a      	mov	r2, r3
 8007000:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007002:	4413      	add	r3, r2
 8007004:	643b      	str	r3, [r7, #64]	@ 0x40
 8007006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800700a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	011a      	lsls	r2, r3, #4
 8007014:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007016:	4413      	add	r3, r2
 8007018:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800701c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800701e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007022:	b29a      	uxth	r2, r3
 8007024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007026:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800702c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	895b      	ldrh	r3, [r3, #10]
 8007034:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007038:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800703c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6959      	ldr	r1, [r3, #20]
 8007044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007048:	b29b      	uxth	r3, r3
 800704a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800704e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007052:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007056:	6800      	ldr	r0, [r0, #0]
 8007058:	f001 f881 	bl	800815e <USB_WritePMA>
 800705c:	e227      	b.n	80074ae <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800705e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800706e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007072:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800707c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	b29b      	uxth	r3, r3
 800708c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007090:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007094:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800709c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	441a      	add	r2, r3
 80070b2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80070b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80070ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	461a      	mov	r2, r3
 80070e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070ea:	4413      	add	r3, r2
 80070ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	011a      	lsls	r2, r3, #4
 80070fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070fe:	4413      	add	r3, r2
 8007100:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007104:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800710a:	b29a      	uxth	r2, r3
 800710c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800710e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007114:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	891b      	ldrh	r3, [r3, #8]
 800711c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007124:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	6959      	ldr	r1, [r3, #20]
 800712c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007130:	b29b      	uxth	r3, r3
 8007132:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007136:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800713a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800713e:	6800      	ldr	r0, [r0, #0]
 8007140:	f001 f80d 	bl	800815e <USB_WritePMA>
 8007144:	e1b3      	b.n	80074ae <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800714a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6a1a      	ldr	r2, [r3, #32]
 8007152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007156:	1ad2      	subs	r2, r2, r3
 8007158:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800715c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007164:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007168:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007172:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	4413      	add	r3, r2
 800717e:	881b      	ldrh	r3, [r3, #0]
 8007180:	b29b      	uxth	r3, r3
 8007182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007186:	2b00      	cmp	r3, #0
 8007188:	f000 80c6 	beq.w	8007318 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800718c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007190:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	673b      	str	r3, [r7, #112]	@ 0x70
 8007198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800719c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	785b      	ldrb	r3, [r3, #1]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d177      	bne.n	8007298 <USB_EPStartXfer+0xb18>
 80071a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	461a      	mov	r2, r3
 80071c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071c8:	4413      	add	r3, r2
 80071ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	011a      	lsls	r2, r3, #4
 80071da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071dc:	4413      	add	r3, r2
 80071de:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80071e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80071e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071e6:	881b      	ldrh	r3, [r3, #0]
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071f2:	801a      	strh	r2, [r3, #0]
 80071f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80071fa:	d921      	bls.n	8007240 <USB_EPStartXfer+0xac0>
 80071fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007200:	095b      	lsrs	r3, r3, #5
 8007202:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800720a:	f003 031f 	and.w	r3, r3, #31
 800720e:	2b00      	cmp	r3, #0
 8007210:	d104      	bne.n	800721c <USB_EPStartXfer+0xa9c>
 8007212:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007216:	3b01      	subs	r3, #1
 8007218:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800721c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800721e:	881b      	ldrh	r3, [r3, #0]
 8007220:	b29a      	uxth	r2, r3
 8007222:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007226:	b29b      	uxth	r3, r3
 8007228:	029b      	lsls	r3, r3, #10
 800722a:	b29b      	uxth	r3, r3
 800722c:	4313      	orrs	r3, r2
 800722e:	b29b      	uxth	r3, r3
 8007230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007238:	b29a      	uxth	r2, r3
 800723a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800723c:	801a      	strh	r2, [r3, #0]
 800723e:	e050      	b.n	80072e2 <USB_EPStartXfer+0xb62>
 8007240:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10a      	bne.n	800725e <USB_EPStartXfer+0xade>
 8007248:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800724a:	881b      	ldrh	r3, [r3, #0]
 800724c:	b29b      	uxth	r3, r3
 800724e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007252:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007256:	b29a      	uxth	r2, r3
 8007258:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800725a:	801a      	strh	r2, [r3, #0]
 800725c:	e041      	b.n	80072e2 <USB_EPStartXfer+0xb62>
 800725e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007262:	085b      	lsrs	r3, r3, #1
 8007264:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	2b00      	cmp	r3, #0
 8007272:	d004      	beq.n	800727e <USB_EPStartXfer+0xafe>
 8007274:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007278:	3301      	adds	r3, #1
 800727a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800727e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007280:	881b      	ldrh	r3, [r3, #0]
 8007282:	b29a      	uxth	r2, r3
 8007284:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007288:	b29b      	uxth	r3, r3
 800728a:	029b      	lsls	r3, r3, #10
 800728c:	b29b      	uxth	r3, r3
 800728e:	4313      	orrs	r3, r2
 8007290:	b29a      	uxth	r2, r3
 8007292:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007294:	801a      	strh	r2, [r3, #0]
 8007296:	e024      	b.n	80072e2 <USB_EPStartXfer+0xb62>
 8007298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800729c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	785b      	ldrb	r3, [r3, #1]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d11c      	bne.n	80072e2 <USB_EPStartXfer+0xb62>
 80072a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	461a      	mov	r2, r3
 80072ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80072bc:	4413      	add	r3, r2
 80072be:	673b      	str	r3, [r7, #112]	@ 0x70
 80072c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	011a      	lsls	r2, r3, #4
 80072ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80072d0:	4413      	add	r3, r2
 80072d2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80072d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80072d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072dc:	b29a      	uxth	r2, r3
 80072de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072e0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80072e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	895b      	ldrh	r3, [r3, #10]
 80072ee:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6959      	ldr	r1, [r3, #20]
 80072fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007302:	b29b      	uxth	r3, r3
 8007304:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007308:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800730c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007310:	6800      	ldr	r0, [r0, #0]
 8007312:	f000 ff24 	bl	800815e <USB_WritePMA>
 8007316:	e0ca      	b.n	80074ae <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800731c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	785b      	ldrb	r3, [r3, #1]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d177      	bne.n	8007418 <USB_EPStartXfer+0xc98>
 8007328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800732c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007338:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007342:	b29b      	uxth	r3, r3
 8007344:	461a      	mov	r2, r3
 8007346:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007348:	4413      	add	r3, r2
 800734a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800734c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	011a      	lsls	r2, r3, #4
 800735a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800735c:	4413      	add	r3, r2
 800735e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007362:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007364:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007366:	881b      	ldrh	r3, [r3, #0]
 8007368:	b29b      	uxth	r3, r3
 800736a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800736e:	b29a      	uxth	r2, r3
 8007370:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007372:	801a      	strh	r2, [r3, #0]
 8007374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007378:	2b3e      	cmp	r3, #62	@ 0x3e
 800737a:	d921      	bls.n	80073c0 <USB_EPStartXfer+0xc40>
 800737c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007380:	095b      	lsrs	r3, r3, #5
 8007382:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800738a:	f003 031f 	and.w	r3, r3, #31
 800738e:	2b00      	cmp	r3, #0
 8007390:	d104      	bne.n	800739c <USB_EPStartXfer+0xc1c>
 8007392:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007396:	3b01      	subs	r3, #1
 8007398:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800739c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800739e:	881b      	ldrh	r3, [r3, #0]
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	029b      	lsls	r3, r3, #10
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	4313      	orrs	r3, r2
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073bc:	801a      	strh	r2, [r3, #0]
 80073be:	e05c      	b.n	800747a <USB_EPStartXfer+0xcfa>
 80073c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10a      	bne.n	80073de <USB_EPStartXfer+0xc5e>
 80073c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073ca:	881b      	ldrh	r3, [r3, #0]
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073da:	801a      	strh	r2, [r3, #0]
 80073dc:	e04d      	b.n	800747a <USB_EPStartXfer+0xcfa>
 80073de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e2:	085b      	lsrs	r3, r3, #1
 80073e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80073e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ec:	f003 0301 	and.w	r3, r3, #1
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d004      	beq.n	80073fe <USB_EPStartXfer+0xc7e>
 80073f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80073f8:	3301      	adds	r3, #1
 80073fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80073fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007400:	881b      	ldrh	r3, [r3, #0]
 8007402:	b29a      	uxth	r2, r3
 8007404:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007408:	b29b      	uxth	r3, r3
 800740a:	029b      	lsls	r3, r3, #10
 800740c:	b29b      	uxth	r3, r3
 800740e:	4313      	orrs	r3, r2
 8007410:	b29a      	uxth	r2, r3
 8007412:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007414:	801a      	strh	r2, [r3, #0]
 8007416:	e030      	b.n	800747a <USB_EPStartXfer+0xcfa>
 8007418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800741c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	785b      	ldrb	r3, [r3, #1]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d128      	bne.n	800747a <USB_EPStartXfer+0xcfa>
 8007428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800742c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800743a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007444:	b29b      	uxth	r3, r3
 8007446:	461a      	mov	r2, r3
 8007448:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800744c:	4413      	add	r3, r2
 800744e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	011a      	lsls	r2, r3, #4
 8007460:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007464:	4413      	add	r3, r2
 8007466:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800746a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800746e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007472:	b29a      	uxth	r2, r3
 8007474:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007478:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800747a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	891b      	ldrh	r3, [r3, #8]
 8007486:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800748a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800748e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	6959      	ldr	r1, [r3, #20]
 8007496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800749a:	b29b      	uxth	r3, r3
 800749c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80074a0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80074a4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80074a8:	6800      	ldr	r0, [r0, #0]
 80074aa:	f000 fe58 	bl	800815e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80074ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4413      	add	r3, r2
 80074c8:	881b      	ldrh	r3, [r3, #0]
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074d4:	817b      	strh	r3, [r7, #10]
 80074d6:	897b      	ldrh	r3, [r7, #10]
 80074d8:	f083 0310 	eor.w	r3, r3, #16
 80074dc:	817b      	strh	r3, [r7, #10]
 80074de:	897b      	ldrh	r3, [r7, #10]
 80074e0:	f083 0320 	eor.w	r3, r3, #32
 80074e4:	817b      	strh	r3, [r7, #10]
 80074e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	441a      	add	r2, r3
 8007500:	897b      	ldrh	r3, [r7, #10]
 8007502:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007506:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800750a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800750e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007512:	b29b      	uxth	r3, r3
 8007514:	8013      	strh	r3, [r2, #0]
 8007516:	f000 bcde 	b.w	8007ed6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800751a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800751e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	7b1b      	ldrb	r3, [r3, #12]
 8007526:	2b00      	cmp	r3, #0
 8007528:	f040 80bb 	bne.w	80076a2 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800752c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	699a      	ldr	r2, [r3, #24]
 8007538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800753c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	429a      	cmp	r2, r3
 8007546:	d917      	bls.n	8007578 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800754c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800755c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	699a      	ldr	r2, [r3, #24]
 8007564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007568:	1ad2      	subs	r2, r2, r3
 800756a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800756e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	619a      	str	r2, [r3, #24]
 8007576:	e00e      	b.n	8007596 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800757c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800758c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2200      	movs	r2, #0
 8007594:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800759a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	461a      	mov	r2, r3
 80075b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80075ba:	4413      	add	r3, r2
 80075bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	011a      	lsls	r2, r3, #4
 80075ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80075d2:	4413      	add	r3, r2
 80075d4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80075d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80075dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075e0:	881b      	ldrh	r3, [r3, #0]
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075ee:	801a      	strh	r2, [r3, #0]
 80075f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80075f6:	d924      	bls.n	8007642 <USB_EPStartXfer+0xec2>
 80075f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075fc:	095b      	lsrs	r3, r3, #5
 80075fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007606:	f003 031f 	and.w	r3, r3, #31
 800760a:	2b00      	cmp	r3, #0
 800760c:	d104      	bne.n	8007618 <USB_EPStartXfer+0xe98>
 800760e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007612:	3b01      	subs	r3, #1
 8007614:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007618:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800761c:	881b      	ldrh	r3, [r3, #0]
 800761e:	b29a      	uxth	r2, r3
 8007620:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007624:	b29b      	uxth	r3, r3
 8007626:	029b      	lsls	r3, r3, #10
 8007628:	b29b      	uxth	r3, r3
 800762a:	4313      	orrs	r3, r2
 800762c:	b29b      	uxth	r3, r3
 800762e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007636:	b29a      	uxth	r2, r3
 8007638:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800763c:	801a      	strh	r2, [r3, #0]
 800763e:	f000 bc10 	b.w	8007e62 <USB_EPStartXfer+0x16e2>
 8007642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10c      	bne.n	8007664 <USB_EPStartXfer+0xee4>
 800764a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800764e:	881b      	ldrh	r3, [r3, #0]
 8007650:	b29b      	uxth	r3, r3
 8007652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800765a:	b29a      	uxth	r2, r3
 800765c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007660:	801a      	strh	r2, [r3, #0]
 8007662:	e3fe      	b.n	8007e62 <USB_EPStartXfer+0x16e2>
 8007664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007668:	085b      	lsrs	r3, r3, #1
 800766a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800766e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	2b00      	cmp	r3, #0
 8007678:	d004      	beq.n	8007684 <USB_EPStartXfer+0xf04>
 800767a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800767e:	3301      	adds	r3, #1
 8007680:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007684:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	b29a      	uxth	r2, r3
 800768c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007690:	b29b      	uxth	r3, r3
 8007692:	029b      	lsls	r3, r3, #10
 8007694:	b29b      	uxth	r3, r3
 8007696:	4313      	orrs	r3, r2
 8007698:	b29a      	uxth	r2, r3
 800769a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800769e:	801a      	strh	r2, [r3, #0]
 80076a0:	e3df      	b.n	8007e62 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80076a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	78db      	ldrb	r3, [r3, #3]
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	f040 8218 	bne.w	8007ae4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80076b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	785b      	ldrb	r3, [r3, #1]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f040 809d 	bne.w	8007800 <USB_EPStartXfer+0x1080>
 80076c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80076d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	461a      	mov	r2, r3
 80076e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076ea:	4413      	add	r3, r2
 80076ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80076f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	011a      	lsls	r2, r3, #4
 80076fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007702:	4413      	add	r3, r2
 8007704:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007708:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800770c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007710:	881b      	ldrh	r3, [r3, #0]
 8007712:	b29b      	uxth	r3, r3
 8007714:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007718:	b29a      	uxth	r2, r3
 800771a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800771e:	801a      	strh	r2, [r3, #0]
 8007720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007724:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	2b3e      	cmp	r3, #62	@ 0x3e
 800772e:	d92b      	bls.n	8007788 <USB_EPStartXfer+0x1008>
 8007730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	095b      	lsrs	r3, r3, #5
 800773e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007746:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	f003 031f 	and.w	r3, r3, #31
 8007752:	2b00      	cmp	r3, #0
 8007754:	d104      	bne.n	8007760 <USB_EPStartXfer+0xfe0>
 8007756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800775a:	3b01      	subs	r3, #1
 800775c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007760:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007764:	881b      	ldrh	r3, [r3, #0]
 8007766:	b29a      	uxth	r2, r3
 8007768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800776c:	b29b      	uxth	r3, r3
 800776e:	029b      	lsls	r3, r3, #10
 8007770:	b29b      	uxth	r3, r3
 8007772:	4313      	orrs	r3, r2
 8007774:	b29b      	uxth	r3, r3
 8007776:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800777a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800777e:	b29a      	uxth	r2, r3
 8007780:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007784:	801a      	strh	r2, [r3, #0]
 8007786:	e070      	b.n	800786a <USB_EPStartXfer+0x10ea>
 8007788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800778c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d10c      	bne.n	80077b2 <USB_EPStartXfer+0x1032>
 8007798:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800779c:	881b      	ldrh	r3, [r3, #0]
 800779e:	b29b      	uxth	r3, r3
 80077a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80077ae:	801a      	strh	r2, [r3, #0]
 80077b0:	e05b      	b.n	800786a <USB_EPStartXfer+0x10ea>
 80077b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	085b      	lsrs	r3, r3, #1
 80077c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d004      	beq.n	80077e2 <USB_EPStartXfer+0x1062>
 80077d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077dc:	3301      	adds	r3, #1
 80077de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80077e6:	881b      	ldrh	r3, [r3, #0]
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	029b      	lsls	r3, r3, #10
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	4313      	orrs	r3, r2
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80077fc:	801a      	strh	r2, [r3, #0]
 80077fe:	e034      	b.n	800786a <USB_EPStartXfer+0x10ea>
 8007800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007804:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	785b      	ldrb	r3, [r3, #1]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d12c      	bne.n	800786a <USB_EPStartXfer+0x10ea>
 8007810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007814:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800781e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007822:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800782c:	b29b      	uxth	r3, r3
 800782e:	461a      	mov	r2, r3
 8007830:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007834:	4413      	add	r3, r2
 8007836:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800783a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800783e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	011a      	lsls	r2, r3, #4
 8007848:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800784c:	4413      	add	r3, r2
 800784e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007852:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800785a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	b29a      	uxth	r2, r3
 8007864:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007868:	801a      	strh	r2, [r3, #0]
 800786a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800786e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800787c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	785b      	ldrb	r3, [r3, #1]
 8007884:	2b00      	cmp	r3, #0
 8007886:	f040 809d 	bne.w	80079c4 <USB_EPStartXfer+0x1244>
 800788a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800788e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800789c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	461a      	mov	r2, r3
 80078aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80078ae:	4413      	add	r3, r2
 80078b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80078b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	011a      	lsls	r2, r3, #4
 80078c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80078c6:	4413      	add	r3, r2
 80078c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80078cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80078d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078d4:	881b      	ldrh	r3, [r3, #0]
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078dc:	b29a      	uxth	r2, r3
 80078de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078e2:	801a      	strh	r2, [r3, #0]
 80078e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80078f2:	d92b      	bls.n	800794c <USB_EPStartXfer+0x11cc>
 80078f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	095b      	lsrs	r3, r3, #5
 8007902:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800790a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	f003 031f 	and.w	r3, r3, #31
 8007916:	2b00      	cmp	r3, #0
 8007918:	d104      	bne.n	8007924 <USB_EPStartXfer+0x11a4>
 800791a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800791e:	3b01      	subs	r3, #1
 8007920:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007924:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007928:	881b      	ldrh	r3, [r3, #0]
 800792a:	b29a      	uxth	r2, r3
 800792c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007930:	b29b      	uxth	r3, r3
 8007932:	029b      	lsls	r3, r3, #10
 8007934:	b29b      	uxth	r3, r3
 8007936:	4313      	orrs	r3, r2
 8007938:	b29b      	uxth	r3, r3
 800793a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800793e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007942:	b29a      	uxth	r2, r3
 8007944:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007948:	801a      	strh	r2, [r3, #0]
 800794a:	e069      	b.n	8007a20 <USB_EPStartXfer+0x12a0>
 800794c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10c      	bne.n	8007976 <USB_EPStartXfer+0x11f6>
 800795c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007960:	881b      	ldrh	r3, [r3, #0]
 8007962:	b29b      	uxth	r3, r3
 8007964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800796c:	b29a      	uxth	r2, r3
 800796e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007972:	801a      	strh	r2, [r3, #0]
 8007974:	e054      	b.n	8007a20 <USB_EPStartXfer+0x12a0>
 8007976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800797a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	085b      	lsrs	r3, r3, #1
 8007984:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800798c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	2b00      	cmp	r3, #0
 800799a:	d004      	beq.n	80079a6 <USB_EPStartXfer+0x1226>
 800799c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079a0:	3301      	adds	r3, #1
 80079a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80079a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079aa:	881b      	ldrh	r3, [r3, #0]
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	029b      	lsls	r3, r3, #10
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	4313      	orrs	r3, r2
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079c0:	801a      	strh	r2, [r3, #0]
 80079c2:	e02d      	b.n	8007a20 <USB_EPStartXfer+0x12a0>
 80079c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	785b      	ldrb	r3, [r3, #1]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d125      	bne.n	8007a20 <USB_EPStartXfer+0x12a0>
 80079d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	461a      	mov	r2, r3
 80079e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80079ea:	4413      	add	r3, r2
 80079ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80079f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	011a      	lsls	r2, r3, #4
 80079fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007a02:	4413      	add	r3, r2
 8007a04:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007a08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007a0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a1e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	69db      	ldr	r3, [r3, #28]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 8218 	beq.w	8007e62 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	881b      	ldrh	r3, [r3, #0]
 8007a4e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007a52:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d005      	beq.n	8007a6a <USB_EPStartXfer+0x12ea>
 8007a5e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10d      	bne.n	8007a86 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007a6a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007a6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f040 81f5 	bne.w	8007e62 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007a78:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f040 81ee 	bne.w	8007e62 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007a86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4413      	add	r3, r2
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007aa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007aac:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007ab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ab4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007abe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	441a      	add	r2, r3
 8007aca:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007ace:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ad2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ad6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ada:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	8013      	strh	r3, [r2, #0]
 8007ae2:	e1be      	b.n	8007e62 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	78db      	ldrb	r3, [r3, #3]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	f040 81b4 	bne.w	8007e5e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007af6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007afa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	699a      	ldr	r2, [r3, #24]
 8007b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d917      	bls.n	8007b42 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007b22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	699a      	ldr	r2, [r3, #24]
 8007b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b32:	1ad2      	subs	r2, r2, r3
 8007b34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	619a      	str	r2, [r3, #24]
 8007b40:	e00e      	b.n	8007b60 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007b42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007b52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007b60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	785b      	ldrb	r3, [r3, #1]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f040 8085 	bne.w	8007c7c <USB_EPStartXfer+0x14fc>
 8007b72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007b80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	461a      	mov	r2, r3
 8007b92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b96:	4413      	add	r3, r2
 8007b98:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007b9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ba0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	011a      	lsls	r2, r3, #4
 8007baa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007bae:	4413      	add	r3, r2
 8007bb0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007bb4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007bb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007bbc:	881b      	ldrh	r3, [r3, #0]
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007bca:	801a      	strh	r2, [r3, #0]
 8007bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bd0:	2b3e      	cmp	r3, #62	@ 0x3e
 8007bd2:	d923      	bls.n	8007c1c <USB_EPStartXfer+0x149c>
 8007bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bd8:	095b      	lsrs	r3, r3, #5
 8007bda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007be2:	f003 031f 	and.w	r3, r3, #31
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d104      	bne.n	8007bf4 <USB_EPStartXfer+0x1474>
 8007bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007bf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007bf8:	881b      	ldrh	r3, [r3, #0]
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	029b      	lsls	r3, r3, #10
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	4313      	orrs	r3, r2
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c18:	801a      	strh	r2, [r3, #0]
 8007c1a:	e060      	b.n	8007cde <USB_EPStartXfer+0x155e>
 8007c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10c      	bne.n	8007c3e <USB_EPStartXfer+0x14be>
 8007c24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c28:	881b      	ldrh	r3, [r3, #0]
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c3a:	801a      	strh	r2, [r3, #0]
 8007c3c:	e04f      	b.n	8007cde <USB_EPStartXfer+0x155e>
 8007c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c42:	085b      	lsrs	r3, r3, #1
 8007c44:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c4c:	f003 0301 	and.w	r3, r3, #1
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d004      	beq.n	8007c5e <USB_EPStartXfer+0x14de>
 8007c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c58:	3301      	adds	r3, #1
 8007c5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007c5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c62:	881b      	ldrh	r3, [r3, #0]
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	029b      	lsls	r3, r3, #10
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	4313      	orrs	r3, r2
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c78:	801a      	strh	r2, [r3, #0]
 8007c7a:	e030      	b.n	8007cde <USB_EPStartXfer+0x155e>
 8007c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	785b      	ldrb	r3, [r3, #1]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d128      	bne.n	8007cde <USB_EPStartXfer+0x155e>
 8007c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007c9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	461a      	mov	r2, r3
 8007cac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cb0:	4413      	add	r3, r2
 8007cb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007cb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	011a      	lsls	r2, r3, #4
 8007cc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cc8:	4413      	add	r3, r2
 8007cca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007cce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007cdc:	801a      	strh	r2, [r3, #0]
 8007cde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ce2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	785b      	ldrb	r3, [r3, #1]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f040 8085 	bne.w	8007e08 <USB_EPStartXfer+0x1688>
 8007cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007d22:	4413      	add	r3, r2
 8007d24:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007d28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	011a      	lsls	r2, r3, #4
 8007d36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007d40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d48:	881b      	ldrh	r3, [r3, #0]
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d56:	801a      	strh	r2, [r3, #0]
 8007d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d5e:	d923      	bls.n	8007da8 <USB_EPStartXfer+0x1628>
 8007d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d64:	095b      	lsrs	r3, r3, #5
 8007d66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d6e:	f003 031f 	and.w	r3, r3, #31
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d104      	bne.n	8007d80 <USB_EPStartXfer+0x1600>
 8007d76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d84:	881b      	ldrh	r3, [r3, #0]
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	029b      	lsls	r3, r3, #10
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	4313      	orrs	r3, r2
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007da4:	801a      	strh	r2, [r3, #0]
 8007da6:	e05c      	b.n	8007e62 <USB_EPStartXfer+0x16e2>
 8007da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10c      	bne.n	8007dca <USB_EPStartXfer+0x164a>
 8007db0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007db4:	881b      	ldrh	r3, [r3, #0]
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007dc6:	801a      	strh	r2, [r3, #0]
 8007dc8:	e04b      	b.n	8007e62 <USB_EPStartXfer+0x16e2>
 8007dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dce:	085b      	lsrs	r3, r3, #1
 8007dd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd8:	f003 0301 	and.w	r3, r3, #1
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d004      	beq.n	8007dea <USB_EPStartXfer+0x166a>
 8007de0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007de4:	3301      	adds	r3, #1
 8007de6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007dea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007dee:	881b      	ldrh	r3, [r3, #0]
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	029b      	lsls	r3, r3, #10
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e04:	801a      	strh	r2, [r3, #0]
 8007e06:	e02c      	b.n	8007e62 <USB_EPStartXfer+0x16e2>
 8007e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	785b      	ldrb	r3, [r3, #1]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d124      	bne.n	8007e62 <USB_EPStartXfer+0x16e2>
 8007e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	461a      	mov	r2, r3
 8007e2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e2e:	4413      	add	r3, r2
 8007e30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	011a      	lsls	r2, r3, #4
 8007e42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e46:	4413      	add	r3, r2
 8007e48:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007e4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007e5a:	801a      	strh	r2, [r3, #0]
 8007e5c:	e001      	b.n	8007e62 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e03a      	b.n	8007ed8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4413      	add	r3, r2
 8007e7c:	881b      	ldrh	r3, [r3, #0]
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e88:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007e8c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007e90:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007e94:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007e98:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007e9c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007ea0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007ea4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ea8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	441a      	add	r2, r3
 8007ebe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007ec2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ec6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007eca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	b085      	sub	sp, #20
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
 8007eea:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	785b      	ldrb	r3, [r3, #1]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d020      	beq.n	8007f36 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4413      	add	r3, r2
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f0a:	81bb      	strh	r3, [r7, #12]
 8007f0c:	89bb      	ldrh	r3, [r7, #12]
 8007f0e:	f083 0310 	eor.w	r3, r3, #16
 8007f12:	81bb      	strh	r3, [r7, #12]
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	441a      	add	r2, r3
 8007f1e:	89bb      	ldrh	r3, [r7, #12]
 8007f20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	8013      	strh	r3, [r2, #0]
 8007f34:	e01f      	b.n	8007f76 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	881b      	ldrh	r3, [r3, #0]
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f4c:	81fb      	strh	r3, [r7, #14]
 8007f4e:	89fb      	ldrh	r3, [r7, #14]
 8007f50:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007f54:	81fb      	strh	r3, [r7, #14]
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	441a      	add	r2, r3
 8007f60:	89fb      	ldrh	r3, [r7, #14]
 8007f62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bc80      	pop	{r7}
 8007f80:	4770      	bx	lr

08007f82 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b087      	sub	sp, #28
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
 8007f8a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	7b1b      	ldrb	r3, [r3, #12]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f040 809d 	bne.w	80080d0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	785b      	ldrb	r3, [r3, #1]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d04c      	beq.n	8008038 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	4413      	add	r3, r2
 8007fa8:	881b      	ldrh	r3, [r3, #0]
 8007faa:	823b      	strh	r3, [r7, #16]
 8007fac:	8a3b      	ldrh	r3, [r7, #16]
 8007fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d01b      	beq.n	8007fee <USB_EPClearStall+0x6c>
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4413      	add	r3, r2
 8007fc0:	881b      	ldrh	r3, [r3, #0]
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fcc:	81fb      	strh	r3, [r7, #14]
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	441a      	add	r2, r3
 8007fd8:	89fb      	ldrh	r3, [r7, #14]
 8007fda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fe2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fe6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	78db      	ldrb	r3, [r3, #3]
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d06c      	beq.n	80080d0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	881b      	ldrh	r3, [r3, #0]
 8008002:	b29b      	uxth	r3, r3
 8008004:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008008:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800800c:	81bb      	strh	r3, [r7, #12]
 800800e:	89bb      	ldrh	r3, [r7, #12]
 8008010:	f083 0320 	eor.w	r3, r3, #32
 8008014:	81bb      	strh	r3, [r7, #12]
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	441a      	add	r2, r3
 8008020:	89bb      	ldrh	r3, [r7, #12]
 8008022:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008026:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800802a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800802e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008032:	b29b      	uxth	r3, r3
 8008034:	8013      	strh	r3, [r2, #0]
 8008036:	e04b      	b.n	80080d0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	4413      	add	r3, r2
 8008042:	881b      	ldrh	r3, [r3, #0]
 8008044:	82fb      	strh	r3, [r7, #22]
 8008046:	8afb      	ldrh	r3, [r7, #22]
 8008048:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800804c:	2b00      	cmp	r3, #0
 800804e:	d01b      	beq.n	8008088 <USB_EPClearStall+0x106>
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4413      	add	r3, r2
 800805a:	881b      	ldrh	r3, [r3, #0]
 800805c:	b29b      	uxth	r3, r3
 800805e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008066:	82bb      	strh	r3, [r7, #20]
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	441a      	add	r2, r3
 8008072:	8abb      	ldrh	r3, [r7, #20]
 8008074:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008078:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800807c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008084:	b29b      	uxth	r3, r3
 8008086:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	4413      	add	r3, r2
 8008092:	881b      	ldrh	r3, [r3, #0]
 8008094:	b29b      	uxth	r3, r3
 8008096:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800809a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800809e:	827b      	strh	r3, [r7, #18]
 80080a0:	8a7b      	ldrh	r3, [r7, #18]
 80080a2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80080a6:	827b      	strh	r3, [r7, #18]
 80080a8:	8a7b      	ldrh	r3, [r7, #18]
 80080aa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80080ae:	827b      	strh	r3, [r7, #18]
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	441a      	add	r2, r3
 80080ba:	8a7b      	ldrh	r3, [r7, #18]
 80080bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	371c      	adds	r7, #28
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bc80      	pop	{r7}
 80080da:	4770      	bx	lr

080080dc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	460b      	mov	r3, r1
 80080e6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80080e8:	78fb      	ldrb	r3, [r7, #3]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d103      	bne.n	80080f6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2280      	movs	r2, #128	@ 0x80
 80080f2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bc80      	pop	{r7}
 8008100:	4770      	bx	lr

08008102 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008102:	b480      	push	{r7}
 8008104:	b083      	sub	sp, #12
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	bc80      	pop	{r7}
 8008114:	4770      	bx	lr

08008116 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008116:	b480      	push	{r7}
 8008118:	b083      	sub	sp, #12
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	bc80      	pop	{r7}
 8008128:	4770      	bx	lr

0800812a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800812a:	b480      	push	{r7}
 800812c:	b085      	sub	sp, #20
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008138:	b29b      	uxth	r3, r3
 800813a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800813c:	68fb      	ldr	r3, [r7, #12]
}
 800813e:	4618      	mov	r0, r3
 8008140:	3714      	adds	r7, #20
 8008142:	46bd      	mov	sp, r7
 8008144:	bc80      	pop	{r7}
 8008146:	4770      	bx	lr

08008148 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	bc80      	pop	{r7}
 800815c:	4770      	bx	lr

0800815e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800815e:	b480      	push	{r7}
 8008160:	b08b      	sub	sp, #44	@ 0x2c
 8008162:	af00      	add	r7, sp, #0
 8008164:	60f8      	str	r0, [r7, #12]
 8008166:	60b9      	str	r1, [r7, #8]
 8008168:	4611      	mov	r1, r2
 800816a:	461a      	mov	r2, r3
 800816c:	460b      	mov	r3, r1
 800816e:	80fb      	strh	r3, [r7, #6]
 8008170:	4613      	mov	r3, r2
 8008172:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008174:	88bb      	ldrh	r3, [r7, #4]
 8008176:	3301      	adds	r3, #1
 8008178:	085b      	lsrs	r3, r3, #1
 800817a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008184:	88fb      	ldrh	r3, [r7, #6]
 8008186:	005a      	lsls	r2, r3, #1
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	4413      	add	r3, r2
 800818c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008190:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	627b      	str	r3, [r7, #36]	@ 0x24
 8008196:	e01e      	b.n	80081d6 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	3301      	adds	r3, #1
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	021b      	lsls	r3, r3, #8
 80081a6:	b21a      	sxth	r2, r3
 80081a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	b21b      	sxth	r3, r3
 80081b0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80081b2:	6a3b      	ldr	r3, [r7, #32]
 80081b4:	8a7a      	ldrh	r2, [r7, #18]
 80081b6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80081b8:	6a3b      	ldr	r3, [r7, #32]
 80081ba:	3302      	adds	r3, #2
 80081bc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80081be:	6a3b      	ldr	r3, [r7, #32]
 80081c0:	3302      	adds	r3, #2
 80081c2:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	3301      	adds	r3, #1
 80081c8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	3301      	adds	r3, #1
 80081ce:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80081d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d2:	3b01      	subs	r3, #1
 80081d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80081d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1dd      	bne.n	8008198 <USB_WritePMA+0x3a>
  }
}
 80081dc:	bf00      	nop
 80081de:	bf00      	nop
 80081e0:	372c      	adds	r7, #44	@ 0x2c
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bc80      	pop	{r7}
 80081e6:	4770      	bx	lr

080081e8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b08b      	sub	sp, #44	@ 0x2c
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	4611      	mov	r1, r2
 80081f4:	461a      	mov	r2, r3
 80081f6:	460b      	mov	r3, r1
 80081f8:	80fb      	strh	r3, [r7, #6]
 80081fa:	4613      	mov	r3, r2
 80081fc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80081fe:	88bb      	ldrh	r3, [r7, #4]
 8008200:	085b      	lsrs	r3, r3, #1
 8008202:	b29b      	uxth	r3, r3
 8008204:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800820e:	88fb      	ldrh	r3, [r7, #6]
 8008210:	005a      	lsls	r2, r3, #1
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	4413      	add	r3, r2
 8008216:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800821a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008220:	e01b      	b.n	800825a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008222:	6a3b      	ldr	r3, [r7, #32]
 8008224:	881b      	ldrh	r3, [r3, #0]
 8008226:	b29b      	uxth	r3, r3
 8008228:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800822a:	6a3b      	ldr	r3, [r7, #32]
 800822c:	3302      	adds	r3, #2
 800822e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	b2da      	uxtb	r2, r3
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008238:	69fb      	ldr	r3, [r7, #28]
 800823a:	3301      	adds	r3, #1
 800823c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	0a1b      	lsrs	r3, r3, #8
 8008242:	b2da      	uxtb	r2, r3
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	3301      	adds	r3, #1
 800824c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800824e:	6a3b      	ldr	r3, [r7, #32]
 8008250:	3302      	adds	r3, #2
 8008252:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008256:	3b01      	subs	r3, #1
 8008258:	627b      	str	r3, [r7, #36]	@ 0x24
 800825a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1e0      	bne.n	8008222 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008260:	88bb      	ldrh	r3, [r7, #4]
 8008262:	f003 0301 	and.w	r3, r3, #1
 8008266:	b29b      	uxth	r3, r3
 8008268:	2b00      	cmp	r3, #0
 800826a:	d007      	beq.n	800827c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800826c:	6a3b      	ldr	r3, [r7, #32]
 800826e:	881b      	ldrh	r3, [r3, #0]
 8008270:	b29b      	uxth	r3, r3
 8008272:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	b2da      	uxtb	r2, r3
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	701a      	strb	r2, [r3, #0]
  }
}
 800827c:	bf00      	nop
 800827e:	372c      	adds	r7, #44	@ 0x2c
 8008280:	46bd      	mov	sp, r7
 8008282:	bc80      	pop	{r7}
 8008284:	4770      	bx	lr

08008286 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b084      	sub	sp, #16
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
 800828e:	460b      	mov	r3, r1
 8008290:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008292:	2300      	movs	r3, #0
 8008294:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	7c1b      	ldrb	r3, [r3, #16]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d115      	bne.n	80082ca <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800829e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082a2:	2202      	movs	r2, #2
 80082a4:	2181      	movs	r1, #129	@ 0x81
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f001 ffbb 	bl	800a222 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80082b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082b6:	2202      	movs	r2, #2
 80082b8:	2101      	movs	r1, #1
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f001 ffb1 	bl	800a222 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80082c8:	e012      	b.n	80082f0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80082ca:	2340      	movs	r3, #64	@ 0x40
 80082cc:	2202      	movs	r2, #2
 80082ce:	2181      	movs	r1, #129	@ 0x81
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f001 ffa6 	bl	800a222 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2201      	movs	r2, #1
 80082da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80082dc:	2340      	movs	r3, #64	@ 0x40
 80082de:	2202      	movs	r2, #2
 80082e0:	2101      	movs	r1, #1
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f001 ff9d 	bl	800a222 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80082f0:	2308      	movs	r3, #8
 80082f2:	2203      	movs	r2, #3
 80082f4:	2182      	movs	r1, #130	@ 0x82
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f001 ff93 	bl	800a222 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008302:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008306:	f002 f8b3 	bl	800a470 <USBD_static_malloc>
 800830a:	4602      	mov	r2, r0
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008318:	2b00      	cmp	r3, #0
 800831a:	d102      	bne.n	8008322 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800831c:	2301      	movs	r3, #1
 800831e:	73fb      	strb	r3, [r7, #15]
 8008320:	e026      	b.n	8008370 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008328:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	2200      	movs	r2, #0
 8008338:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	2200      	movs	r2, #0
 8008340:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	7c1b      	ldrb	r3, [r3, #16]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d109      	bne.n	8008360 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008352:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008356:	2101      	movs	r1, #1
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f002 f852 	bl	800a402 <USBD_LL_PrepareReceive>
 800835e:	e007      	b.n	8008370 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008366:	2340      	movs	r3, #64	@ 0x40
 8008368:	2101      	movs	r1, #1
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f002 f849 	bl	800a402 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008370:	7bfb      	ldrb	r3, [r7, #15]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b084      	sub	sp, #16
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
 8008382:	460b      	mov	r3, r1
 8008384:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008386:	2300      	movs	r3, #0
 8008388:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800838a:	2181      	movs	r1, #129	@ 0x81
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f001 ff6e 	bl	800a26e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008398:	2101      	movs	r1, #1
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f001 ff67 	bl	800a26e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80083a8:	2182      	movs	r1, #130	@ 0x82
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f001 ff5f 	bl	800a26e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00e      	beq.n	80083de <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083d0:	4618      	mov	r0, r3
 80083d2:	f002 f859 	bl	800a488 <USBD_static_free>
    pdev->pClassData = NULL;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80083de:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b086      	sub	sp, #24
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083f8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80083fa:	2300      	movs	r3, #0
 80083fc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80083fe:	2300      	movs	r3, #0
 8008400:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008402:	2300      	movs	r3, #0
 8008404:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800840e:	2b00      	cmp	r3, #0
 8008410:	d039      	beq.n	8008486 <USBD_CDC_Setup+0x9e>
 8008412:	2b20      	cmp	r3, #32
 8008414:	d17f      	bne.n	8008516 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	88db      	ldrh	r3, [r3, #6]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d029      	beq.n	8008472 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	b25b      	sxtb	r3, r3
 8008424:	2b00      	cmp	r3, #0
 8008426:	da11      	bge.n	800844c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	683a      	ldr	r2, [r7, #0]
 8008432:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008434:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008436:	683a      	ldr	r2, [r7, #0]
 8008438:	88d2      	ldrh	r2, [r2, #6]
 800843a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800843c:	6939      	ldr	r1, [r7, #16]
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	88db      	ldrh	r3, [r3, #6]
 8008442:	461a      	mov	r2, r3
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f001 fa05 	bl	8009854 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800844a:	e06b      	b.n	8008524 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	785a      	ldrb	r2, [r3, #1]
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	88db      	ldrh	r3, [r3, #6]
 800845a:	b2da      	uxtb	r2, r3
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008462:	6939      	ldr	r1, [r7, #16]
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	88db      	ldrh	r3, [r3, #6]
 8008468:	461a      	mov	r2, r3
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f001 fa20 	bl	80098b0 <USBD_CtlPrepareRx>
      break;
 8008470:	e058      	b.n	8008524 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	683a      	ldr	r2, [r7, #0]
 800847c:	7850      	ldrb	r0, [r2, #1]
 800847e:	2200      	movs	r2, #0
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	4798      	blx	r3
      break;
 8008484:	e04e      	b.n	8008524 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	785b      	ldrb	r3, [r3, #1]
 800848a:	2b0b      	cmp	r3, #11
 800848c:	d02e      	beq.n	80084ec <USBD_CDC_Setup+0x104>
 800848e:	2b0b      	cmp	r3, #11
 8008490:	dc38      	bgt.n	8008504 <USBD_CDC_Setup+0x11c>
 8008492:	2b00      	cmp	r3, #0
 8008494:	d002      	beq.n	800849c <USBD_CDC_Setup+0xb4>
 8008496:	2b0a      	cmp	r3, #10
 8008498:	d014      	beq.n	80084c4 <USBD_CDC_Setup+0xdc>
 800849a:	e033      	b.n	8008504 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084a2:	2b03      	cmp	r3, #3
 80084a4:	d107      	bne.n	80084b6 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80084a6:	f107 030c 	add.w	r3, r7, #12
 80084aa:	2202      	movs	r2, #2
 80084ac:	4619      	mov	r1, r3
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f001 f9d0 	bl	8009854 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80084b4:	e02e      	b.n	8008514 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f001 f961 	bl	8009780 <USBD_CtlError>
            ret = USBD_FAIL;
 80084be:	2302      	movs	r3, #2
 80084c0:	75fb      	strb	r3, [r7, #23]
          break;
 80084c2:	e027      	b.n	8008514 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084ca:	2b03      	cmp	r3, #3
 80084cc:	d107      	bne.n	80084de <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80084ce:	f107 030f 	add.w	r3, r7, #15
 80084d2:	2201      	movs	r2, #1
 80084d4:	4619      	mov	r1, r3
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f001 f9bc 	bl	8009854 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80084dc:	e01a      	b.n	8008514 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80084de:	6839      	ldr	r1, [r7, #0]
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f001 f94d 	bl	8009780 <USBD_CtlError>
            ret = USBD_FAIL;
 80084e6:	2302      	movs	r3, #2
 80084e8:	75fb      	strb	r3, [r7, #23]
          break;
 80084ea:	e013      	b.n	8008514 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084f2:	2b03      	cmp	r3, #3
 80084f4:	d00d      	beq.n	8008512 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80084f6:	6839      	ldr	r1, [r7, #0]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f001 f941 	bl	8009780 <USBD_CtlError>
            ret = USBD_FAIL;
 80084fe:	2302      	movs	r3, #2
 8008500:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008502:	e006      	b.n	8008512 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008504:	6839      	ldr	r1, [r7, #0]
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f001 f93a 	bl	8009780 <USBD_CtlError>
          ret = USBD_FAIL;
 800850c:	2302      	movs	r3, #2
 800850e:	75fb      	strb	r3, [r7, #23]
          break;
 8008510:	e000      	b.n	8008514 <USBD_CDC_Setup+0x12c>
          break;
 8008512:	bf00      	nop
      }
      break;
 8008514:	e006      	b.n	8008524 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008516:	6839      	ldr	r1, [r7, #0]
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f001 f931 	bl	8009780 <USBD_CtlError>
      ret = USBD_FAIL;
 800851e:	2302      	movs	r3, #2
 8008520:	75fb      	strb	r3, [r7, #23]
      break;
 8008522:	bf00      	nop
  }

  return ret;
 8008524:	7dfb      	ldrb	r3, [r7, #23]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3718      	adds	r7, #24
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b084      	sub	sp, #16
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	460b      	mov	r3, r1
 8008538:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008540:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008548:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008550:	2b00      	cmp	r3, #0
 8008552:	d03a      	beq.n	80085ca <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008554:	78fa      	ldrb	r2, [r7, #3]
 8008556:	6879      	ldr	r1, [r7, #4]
 8008558:	4613      	mov	r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	4413      	add	r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	440b      	add	r3, r1
 8008562:	331c      	adds	r3, #28
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d029      	beq.n	80085be <USBD_CDC_DataIn+0x90>
 800856a:	78fa      	ldrb	r2, [r7, #3]
 800856c:	6879      	ldr	r1, [r7, #4]
 800856e:	4613      	mov	r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	4413      	add	r3, r2
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	440b      	add	r3, r1
 8008578:	331c      	adds	r3, #28
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	78f9      	ldrb	r1, [r7, #3]
 800857e:	68b8      	ldr	r0, [r7, #8]
 8008580:	460b      	mov	r3, r1
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	440b      	add	r3, r1
 8008586:	00db      	lsls	r3, r3, #3
 8008588:	4403      	add	r3, r0
 800858a:	3320      	adds	r3, #32
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	fbb2 f1f3 	udiv	r1, r2, r3
 8008592:	fb01 f303 	mul.w	r3, r1, r3
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	2b00      	cmp	r3, #0
 800859a:	d110      	bne.n	80085be <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800859c:	78fa      	ldrb	r2, [r7, #3]
 800859e:	6879      	ldr	r1, [r7, #4]
 80085a0:	4613      	mov	r3, r2
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4413      	add	r3, r2
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	440b      	add	r3, r1
 80085aa:	331c      	adds	r3, #28
 80085ac:	2200      	movs	r2, #0
 80085ae:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80085b0:	78f9      	ldrb	r1, [r7, #3]
 80085b2:	2300      	movs	r3, #0
 80085b4:	2200      	movs	r2, #0
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f001 ff00 	bl	800a3bc <USBD_LL_Transmit>
 80085bc:	e003      	b.n	80085c6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80085c6:	2300      	movs	r3, #0
 80085c8:	e000      	b.n	80085cc <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80085ca:	2302      	movs	r3, #2
  }
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	460b      	mov	r3, r1
 80085de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085e6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80085e8:	78fb      	ldrb	r3, [r7, #3]
 80085ea:	4619      	mov	r1, r3
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f001 ff2b 	bl	800a448 <USBD_LL_GetRxDataSize>
 80085f2:	4602      	mov	r2, r0
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00d      	beq.n	8008620 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008618:	4611      	mov	r1, r2
 800861a:	4798      	blx	r3

    return USBD_OK;
 800861c:	2300      	movs	r3, #0
 800861e:	e000      	b.n	8008622 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008620:	2302      	movs	r3, #2
  }
}
 8008622:	4618      	mov	r0, r3
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b084      	sub	sp, #16
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008638:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008640:	2b00      	cmp	r3, #0
 8008642:	d014      	beq.n	800866e <USBD_CDC_EP0_RxReady+0x44>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800864a:	2bff      	cmp	r3, #255	@ 0xff
 800864c:	d00f      	beq.n	800866e <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800865c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008664:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	22ff      	movs	r2, #255	@ 0xff
 800866a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2243      	movs	r2, #67	@ 0x43
 8008684:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008686:	4b03      	ldr	r3, [pc, #12]	@ (8008694 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008688:	4618      	mov	r0, r3
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	bc80      	pop	{r7}
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop
 8008694:	2000009c 	.word	0x2000009c

08008698 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2243      	movs	r2, #67	@ 0x43
 80086a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80086a6:	4b03      	ldr	r3, [pc, #12]	@ (80086b4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bc80      	pop	{r7}
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	20000058 	.word	0x20000058

080086b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2243      	movs	r2, #67	@ 0x43
 80086c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80086c6:	4b03      	ldr	r3, [pc, #12]	@ (80086d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	370c      	adds	r7, #12
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bc80      	pop	{r7}
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	200000e0 	.word	0x200000e0

080086d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	220a      	movs	r2, #10
 80086e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80086e6:	4b03      	ldr	r3, [pc, #12]	@ (80086f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bc80      	pop	{r7}
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	20000014 	.word	0x20000014

080086f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008702:	2302      	movs	r3, #2
 8008704:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d005      	beq.n	8008718 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	683a      	ldr	r2, [r7, #0]
 8008710:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008714:	2300      	movs	r3, #0
 8008716:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008718:	7bfb      	ldrb	r3, [r7, #15]
}
 800871a:	4618      	mov	r0, r3
 800871c:	3714      	adds	r7, #20
 800871e:	46bd      	mov	sp, r7
 8008720:	bc80      	pop	{r7}
 8008722:	4770      	bx	lr

08008724 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008724:	b480      	push	{r7}
 8008726:	b087      	sub	sp, #28
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	4613      	mov	r3, r2
 8008730:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008738:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008742:	88fa      	ldrh	r2, [r7, #6]
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	371c      	adds	r7, #28
 8008750:	46bd      	mov	sp, r7
 8008752:	bc80      	pop	{r7}
 8008754:	4770      	bx	lr

08008756 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008756:	b480      	push	{r7}
 8008758:	b085      	sub	sp, #20
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
 800875e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008766:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	683a      	ldr	r2, [r7, #0]
 800876c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3714      	adds	r7, #20
 8008776:	46bd      	mov	sp, r7
 8008778:	bc80      	pop	{r7}
 800877a:	4770      	bx	lr

0800877c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800878a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008792:	2b00      	cmp	r3, #0
 8008794:	d01c      	beq.n	80087d0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800879c:	2b00      	cmp	r3, #0
 800879e:	d115      	bne.n	80087cc <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80087be:	b29b      	uxth	r3, r3
 80087c0:	2181      	movs	r1, #129	@ 0x81
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f001 fdfa 	bl	800a3bc <USBD_LL_Transmit>

      return USBD_OK;
 80087c8:	2300      	movs	r3, #0
 80087ca:	e002      	b.n	80087d2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e000      	b.n	80087d2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80087d0:	2302      	movs	r3, #2
  }
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b084      	sub	sp, #16
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087e8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d017      	beq.n	8008824 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	7c1b      	ldrb	r3, [r3, #16]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d109      	bne.n	8008810 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008802:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008806:	2101      	movs	r1, #1
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f001 fdfa 	bl	800a402 <USBD_LL_PrepareReceive>
 800880e:	e007      	b.n	8008820 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008816:	2340      	movs	r3, #64	@ 0x40
 8008818:	2101      	movs	r1, #1
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f001 fdf1 	bl	800a402 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008820:	2300      	movs	r3, #0
 8008822:	e000      	b.n	8008826 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008824:	2302      	movs	r3, #2
  }
}
 8008826:	4618      	mov	r0, r3
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b084      	sub	sp, #16
 8008832:	af00      	add	r7, sp, #0
 8008834:	60f8      	str	r0, [r7, #12]
 8008836:	60b9      	str	r1, [r7, #8]
 8008838:	4613      	mov	r3, r2
 800883a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d101      	bne.n	8008846 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008842:	2302      	movs	r3, #2
 8008844:	e01a      	b.n	800887c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800884c:	2b00      	cmp	r3, #0
 800884e:	d003      	beq.n	8008858 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d003      	beq.n	8008866 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2201      	movs	r2, #1
 800886a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	79fa      	ldrb	r2, [r7, #7]
 8008872:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f001 fc5f 	bl	800a138 <USBD_LL_Init>

  return USBD_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800888e:	2300      	movs	r3, #0
 8008890:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d006      	beq.n	80088a6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	683a      	ldr	r2, [r7, #0]
 800889c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80088a0:	2300      	movs	r3, #0
 80088a2:	73fb      	strb	r3, [r7, #15]
 80088a4:	e001      	b.n	80088aa <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80088a6:	2302      	movs	r3, #2
 80088a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80088aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3714      	adds	r7, #20
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bc80      	pop	{r7}
 80088b4:	4770      	bx	lr

080088b6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b082      	sub	sp, #8
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f001 fc94 	bl	800a1ec <USBD_LL_Start>

  return USBD_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80088ce:	b480      	push	{r7}
 80088d0:	b083      	sub	sp, #12
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	bc80      	pop	{r7}
 80088e0:	4770      	bx	lr

080088e2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b084      	sub	sp, #16
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	460b      	mov	r3, r1
 80088ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80088ee:	2302      	movs	r3, #2
 80088f0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00c      	beq.n	8008916 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	78fa      	ldrb	r2, [r7, #3]
 8008906:	4611      	mov	r1, r2
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	4798      	blx	r3
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d101      	bne.n	8008916 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008912:	2300      	movs	r3, #0
 8008914:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008916:	7bfb      	ldrb	r3, [r7, #15]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	460b      	mov	r3, r1
 800892a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	78fa      	ldrb	r2, [r7, #3]
 8008936:	4611      	mov	r1, r2
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	4798      	blx	r3

  return USBD_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3708      	adds	r7, #8
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b082      	sub	sp, #8
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	4618      	mov	r0, r3
 800895a:	f000 fed8 	bl	800970e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800896c:	461a      	mov	r2, r3
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800897a:	f003 031f 	and.w	r3, r3, #31
 800897e:	2b02      	cmp	r3, #2
 8008980:	d016      	beq.n	80089b0 <USBD_LL_SetupStage+0x6a>
 8008982:	2b02      	cmp	r3, #2
 8008984:	d81c      	bhi.n	80089c0 <USBD_LL_SetupStage+0x7a>
 8008986:	2b00      	cmp	r3, #0
 8008988:	d002      	beq.n	8008990 <USBD_LL_SetupStage+0x4a>
 800898a:	2b01      	cmp	r3, #1
 800898c:	d008      	beq.n	80089a0 <USBD_LL_SetupStage+0x5a>
 800898e:	e017      	b.n	80089c0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008996:	4619      	mov	r1, r3
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 f9cb 	bl	8008d34 <USBD_StdDevReq>
      break;
 800899e:	e01a      	b.n	80089d6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80089a6:	4619      	mov	r1, r3
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 fa2d 	bl	8008e08 <USBD_StdItfReq>
      break;
 80089ae:	e012      	b.n	80089d6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80089b6:	4619      	mov	r1, r3
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 fa6d 	bl	8008e98 <USBD_StdEPReq>
      break;
 80089be:	e00a      	b.n	80089d6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80089c6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	4619      	mov	r1, r3
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f001 fc6c 	bl	800a2ac <USBD_LL_StallEP>
      break;
 80089d4:	bf00      	nop
  }

  return USBD_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3708      	adds	r7, #8
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	460b      	mov	r3, r1
 80089ea:	607a      	str	r2, [r7, #4]
 80089ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80089ee:	7afb      	ldrb	r3, [r7, #11]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d14b      	bne.n	8008a8c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80089fa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008a02:	2b03      	cmp	r3, #3
 8008a04:	d134      	bne.n	8008a70 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	68da      	ldr	r2, [r3, #12]
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d919      	bls.n	8008a46 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	68da      	ldr	r2, [r3, #12]
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	1ad2      	subs	r2, r2, r3
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	68da      	ldr	r2, [r3, #12]
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d203      	bcs.n	8008a34 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	e002      	b.n	8008a3a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	6879      	ldr	r1, [r7, #4]
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f000 ff54 	bl	80098ec <USBD_CtlContinueRx>
 8008a44:	e038      	b.n	8008ab8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00a      	beq.n	8008a68 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008a58:	2b03      	cmp	r3, #3
 8008a5a:	d105      	bne.n	8008a68 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f000 ff51 	bl	8009910 <USBD_CtlSendStatus>
 8008a6e:	e023      	b.n	8008ab8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008a76:	2b05      	cmp	r3, #5
 8008a78:	d11e      	bne.n	8008ab8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008a82:	2100      	movs	r1, #0
 8008a84:	68f8      	ldr	r0, [r7, #12]
 8008a86:	f001 fc11 	bl	800a2ac <USBD_LL_StallEP>
 8008a8a:	e015      	b.n	8008ab8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a92:	699b      	ldr	r3, [r3, #24]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d00d      	beq.n	8008ab4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008a9e:	2b03      	cmp	r3, #3
 8008aa0:	d108      	bne.n	8008ab4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008aa8:	699b      	ldr	r3, [r3, #24]
 8008aaa:	7afa      	ldrb	r2, [r7, #11]
 8008aac:	4611      	mov	r1, r2
 8008aae:	68f8      	ldr	r0, [r7, #12]
 8008ab0:	4798      	blx	r3
 8008ab2:	e001      	b.n	8008ab8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008ab4:	2302      	movs	r3, #2
 8008ab6:	e000      	b.n	8008aba <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3718      	adds	r7, #24
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b086      	sub	sp, #24
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	60f8      	str	r0, [r7, #12]
 8008aca:	460b      	mov	r3, r1
 8008acc:	607a      	str	r2, [r7, #4]
 8008ace:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008ad0:	7afb      	ldrb	r3, [r7, #11]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d17f      	bne.n	8008bd6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	3314      	adds	r3, #20
 8008ada:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d15c      	bne.n	8008ba0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	68da      	ldr	r2, [r3, #12]
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d915      	bls.n	8008b1e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	68da      	ldr	r2, [r3, #12]
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	1ad2      	subs	r2, r2, r3
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	461a      	mov	r2, r3
 8008b08:	6879      	ldr	r1, [r7, #4]
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f000 febe 	bl	800988c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b10:	2300      	movs	r3, #0
 8008b12:	2200      	movs	r2, #0
 8008b14:	2100      	movs	r1, #0
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f001 fc73 	bl	800a402 <USBD_LL_PrepareReceive>
 8008b1c:	e04e      	b.n	8008bbc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	697a      	ldr	r2, [r7, #20]
 8008b24:	6912      	ldr	r2, [r2, #16]
 8008b26:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b2a:	fb01 f202 	mul.w	r2, r1, r2
 8008b2e:	1a9b      	subs	r3, r3, r2
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d11c      	bne.n	8008b6e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	689a      	ldr	r2, [r3, #8]
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d316      	bcc.n	8008b6e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	689a      	ldr	r2, [r3, #8]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d20f      	bcs.n	8008b6e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b4e:	2200      	movs	r2, #0
 8008b50:	2100      	movs	r1, #0
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f000 fe9a 	bl	800988c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b60:	2300      	movs	r3, #0
 8008b62:	2200      	movs	r2, #0
 8008b64:	2100      	movs	r1, #0
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	f001 fc4b 	bl	800a402 <USBD_LL_PrepareReceive>
 8008b6c:	e026      	b.n	8008bbc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00a      	beq.n	8008b90 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008b80:	2b03      	cmp	r3, #3
 8008b82:	d105      	bne.n	8008b90 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008b90:	2180      	movs	r1, #128	@ 0x80
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f001 fb8a 	bl	800a2ac <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f000 fecc 	bl	8009936 <USBD_CtlReceiveStatus>
 8008b9e:	e00d      	b.n	8008bbc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008ba6:	2b04      	cmp	r3, #4
 8008ba8:	d004      	beq.n	8008bb4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d103      	bne.n	8008bbc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008bb4:	2180      	movs	r1, #128	@ 0x80
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f001 fb78 	bl	800a2ac <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d11d      	bne.n	8008c02 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f7ff fe81 	bl	80088ce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008bd4:	e015      	b.n	8008c02 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bdc:	695b      	ldr	r3, [r3, #20]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00d      	beq.n	8008bfe <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008be8:	2b03      	cmp	r3, #3
 8008bea:	d108      	bne.n	8008bfe <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bf2:	695b      	ldr	r3, [r3, #20]
 8008bf4:	7afa      	ldrb	r2, [r7, #11]
 8008bf6:	4611      	mov	r1, r2
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	4798      	blx	r3
 8008bfc:	e001      	b.n	8008c02 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008bfe:	2302      	movs	r3, #2
 8008c00:	e000      	b.n	8008c04 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3718      	adds	r7, #24
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c14:	2340      	movs	r3, #64	@ 0x40
 8008c16:	2200      	movs	r2, #0
 8008c18:	2100      	movs	r1, #0
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f001 fb01 	bl	800a222 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2240      	movs	r2, #64	@ 0x40
 8008c2c:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c30:	2340      	movs	r3, #64	@ 0x40
 8008c32:	2200      	movs	r2, #0
 8008c34:	2180      	movs	r1, #128	@ 0x80
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f001 faf3 	bl	800a222 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2240      	movs	r2, #64	@ 0x40
 8008c46:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d009      	beq.n	8008c84 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	6852      	ldr	r2, [r2, #4]
 8008c7c:	b2d2      	uxtb	r2, r2
 8008c7e:	4611      	mov	r1, r2
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	4798      	blx	r3
  }

  return USBD_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b083      	sub	sp, #12
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	460b      	mov	r3, r1
 8008c98:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	78fa      	ldrb	r2, [r7, #3]
 8008c9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	370c      	adds	r7, #12
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bc80      	pop	{r7}
 8008caa:	4770      	bx	lr

08008cac <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2204      	movs	r2, #4
 8008cc4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	370c      	adds	r7, #12
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bc80      	pop	{r7}
 8008cd2:	4770      	bx	lr

08008cd4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ce2:	2b04      	cmp	r3, #4
 8008ce4:	d105      	bne.n	8008cf2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bc80      	pop	{r7}
 8008cfc:	4770      	bx	lr

08008cfe <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b082      	sub	sp, #8
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d0c:	2b03      	cmp	r3, #3
 8008d0e:	d10b      	bne.n	8008d28 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d16:	69db      	ldr	r3, [r3, #28]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d005      	beq.n	8008d28 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d22:	69db      	ldr	r3, [r3, #28]
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3708      	adds	r7, #8
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
	...

08008d34 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d4a:	2b40      	cmp	r3, #64	@ 0x40
 8008d4c:	d005      	beq.n	8008d5a <USBD_StdDevReq+0x26>
 8008d4e:	2b40      	cmp	r3, #64	@ 0x40
 8008d50:	d84f      	bhi.n	8008df2 <USBD_StdDevReq+0xbe>
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d009      	beq.n	8008d6a <USBD_StdDevReq+0x36>
 8008d56:	2b20      	cmp	r3, #32
 8008d58:	d14b      	bne.n	8008df2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	6839      	ldr	r1, [r7, #0]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	4798      	blx	r3
      break;
 8008d68:	e048      	b.n	8008dfc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	785b      	ldrb	r3, [r3, #1]
 8008d6e:	2b09      	cmp	r3, #9
 8008d70:	d839      	bhi.n	8008de6 <USBD_StdDevReq+0xb2>
 8008d72:	a201      	add	r2, pc, #4	@ (adr r2, 8008d78 <USBD_StdDevReq+0x44>)
 8008d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d78:	08008dc9 	.word	0x08008dc9
 8008d7c:	08008ddd 	.word	0x08008ddd
 8008d80:	08008de7 	.word	0x08008de7
 8008d84:	08008dd3 	.word	0x08008dd3
 8008d88:	08008de7 	.word	0x08008de7
 8008d8c:	08008dab 	.word	0x08008dab
 8008d90:	08008da1 	.word	0x08008da1
 8008d94:	08008de7 	.word	0x08008de7
 8008d98:	08008dbf 	.word	0x08008dbf
 8008d9c:	08008db5 	.word	0x08008db5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008da0:	6839      	ldr	r1, [r7, #0]
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 f9dc 	bl	8009160 <USBD_GetDescriptor>
          break;
 8008da8:	e022      	b.n	8008df0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008daa:	6839      	ldr	r1, [r7, #0]
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fb3f 	bl	8009430 <USBD_SetAddress>
          break;
 8008db2:	e01d      	b.n	8008df0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008db4:	6839      	ldr	r1, [r7, #0]
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fb7e 	bl	80094b8 <USBD_SetConfig>
          break;
 8008dbc:	e018      	b.n	8008df0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008dbe:	6839      	ldr	r1, [r7, #0]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fc07 	bl	80095d4 <USBD_GetConfig>
          break;
 8008dc6:	e013      	b.n	8008df0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008dc8:	6839      	ldr	r1, [r7, #0]
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 fc37 	bl	800963e <USBD_GetStatus>
          break;
 8008dd0:	e00e      	b.n	8008df0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008dd2:	6839      	ldr	r1, [r7, #0]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fc65 	bl	80096a4 <USBD_SetFeature>
          break;
 8008dda:	e009      	b.n	8008df0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008ddc:	6839      	ldr	r1, [r7, #0]
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 fc74 	bl	80096cc <USBD_ClrFeature>
          break;
 8008de4:	e004      	b.n	8008df0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008de6:	6839      	ldr	r1, [r7, #0]
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 fcc9 	bl	8009780 <USBD_CtlError>
          break;
 8008dee:	bf00      	nop
      }
      break;
 8008df0:	e004      	b.n	8008dfc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008df2:	6839      	ldr	r1, [r7, #0]
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 fcc3 	bl	8009780 <USBD_CtlError>
      break;
 8008dfa:	bf00      	nop
  }

  return ret;
 8008dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop

08008e08 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e12:	2300      	movs	r3, #0
 8008e14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e1e:	2b40      	cmp	r3, #64	@ 0x40
 8008e20:	d005      	beq.n	8008e2e <USBD_StdItfReq+0x26>
 8008e22:	2b40      	cmp	r3, #64	@ 0x40
 8008e24:	d82e      	bhi.n	8008e84 <USBD_StdItfReq+0x7c>
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d001      	beq.n	8008e2e <USBD_StdItfReq+0x26>
 8008e2a:	2b20      	cmp	r3, #32
 8008e2c:	d12a      	bne.n	8008e84 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e34:	3b01      	subs	r3, #1
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	d81d      	bhi.n	8008e76 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	889b      	ldrh	r3, [r3, #4]
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d813      	bhi.n	8008e6c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	6839      	ldr	r1, [r7, #0]
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	4798      	blx	r3
 8008e52:	4603      	mov	r3, r0
 8008e54:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	88db      	ldrh	r3, [r3, #6]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d110      	bne.n	8008e80 <USBD_StdItfReq+0x78>
 8008e5e:	7bfb      	ldrb	r3, [r7, #15]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d10d      	bne.n	8008e80 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fd53 	bl	8009910 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e6a:	e009      	b.n	8008e80 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008e6c:	6839      	ldr	r1, [r7, #0]
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fc86 	bl	8009780 <USBD_CtlError>
          break;
 8008e74:	e004      	b.n	8008e80 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fc81 	bl	8009780 <USBD_CtlError>
          break;
 8008e7e:	e000      	b.n	8008e82 <USBD_StdItfReq+0x7a>
          break;
 8008e80:	bf00      	nop
      }
      break;
 8008e82:	e004      	b.n	8008e8e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008e84:	6839      	ldr	r1, [r7, #0]
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fc7a 	bl	8009780 <USBD_CtlError>
      break;
 8008e8c:	bf00      	nop
  }

  return USBD_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	889b      	ldrh	r3, [r3, #4]
 8008eaa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008eb4:	2b40      	cmp	r3, #64	@ 0x40
 8008eb6:	d007      	beq.n	8008ec8 <USBD_StdEPReq+0x30>
 8008eb8:	2b40      	cmp	r3, #64	@ 0x40
 8008eba:	f200 8146 	bhi.w	800914a <USBD_StdEPReq+0x2b2>
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00a      	beq.n	8008ed8 <USBD_StdEPReq+0x40>
 8008ec2:	2b20      	cmp	r3, #32
 8008ec4:	f040 8141 	bne.w	800914a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	6839      	ldr	r1, [r7, #0]
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	4798      	blx	r3
      break;
 8008ed6:	e13d      	b.n	8009154 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ee0:	2b20      	cmp	r3, #32
 8008ee2:	d10a      	bne.n	8008efa <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	4798      	blx	r3
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008ef6:	7bfb      	ldrb	r3, [r7, #15]
 8008ef8:	e12d      	b.n	8009156 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	785b      	ldrb	r3, [r3, #1]
 8008efe:	2b03      	cmp	r3, #3
 8008f00:	d007      	beq.n	8008f12 <USBD_StdEPReq+0x7a>
 8008f02:	2b03      	cmp	r3, #3
 8008f04:	f300 811b 	bgt.w	800913e <USBD_StdEPReq+0x2a6>
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d072      	beq.n	8008ff2 <USBD_StdEPReq+0x15a>
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d03a      	beq.n	8008f86 <USBD_StdEPReq+0xee>
 8008f10:	e115      	b.n	800913e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d002      	beq.n	8008f22 <USBD_StdEPReq+0x8a>
 8008f1c:	2b03      	cmp	r3, #3
 8008f1e:	d015      	beq.n	8008f4c <USBD_StdEPReq+0xb4>
 8008f20:	e02b      	b.n	8008f7a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f22:	7bbb      	ldrb	r3, [r7, #14]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d00c      	beq.n	8008f42 <USBD_StdEPReq+0xaa>
 8008f28:	7bbb      	ldrb	r3, [r7, #14]
 8008f2a:	2b80      	cmp	r3, #128	@ 0x80
 8008f2c:	d009      	beq.n	8008f42 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008f2e:	7bbb      	ldrb	r3, [r7, #14]
 8008f30:	4619      	mov	r1, r3
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f001 f9ba 	bl	800a2ac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008f38:	2180      	movs	r1, #128	@ 0x80
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f001 f9b6 	bl	800a2ac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f40:	e020      	b.n	8008f84 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008f42:	6839      	ldr	r1, [r7, #0]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 fc1b 	bl	8009780 <USBD_CtlError>
              break;
 8008f4a:	e01b      	b.n	8008f84 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	885b      	ldrh	r3, [r3, #2]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d10e      	bne.n	8008f72 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008f54:	7bbb      	ldrb	r3, [r7, #14]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00b      	beq.n	8008f72 <USBD_StdEPReq+0xda>
 8008f5a:	7bbb      	ldrb	r3, [r7, #14]
 8008f5c:	2b80      	cmp	r3, #128	@ 0x80
 8008f5e:	d008      	beq.n	8008f72 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	88db      	ldrh	r3, [r3, #6]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d104      	bne.n	8008f72 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008f68:	7bbb      	ldrb	r3, [r7, #14]
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f001 f99d 	bl	800a2ac <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fccc 	bl	8009910 <USBD_CtlSendStatus>

              break;
 8008f78:	e004      	b.n	8008f84 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008f7a:	6839      	ldr	r1, [r7, #0]
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fbff 	bl	8009780 <USBD_CtlError>
              break;
 8008f82:	bf00      	nop
          }
          break;
 8008f84:	e0e0      	b.n	8009148 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	d002      	beq.n	8008f96 <USBD_StdEPReq+0xfe>
 8008f90:	2b03      	cmp	r3, #3
 8008f92:	d015      	beq.n	8008fc0 <USBD_StdEPReq+0x128>
 8008f94:	e026      	b.n	8008fe4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f96:	7bbb      	ldrb	r3, [r7, #14]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00c      	beq.n	8008fb6 <USBD_StdEPReq+0x11e>
 8008f9c:	7bbb      	ldrb	r3, [r7, #14]
 8008f9e:	2b80      	cmp	r3, #128	@ 0x80
 8008fa0:	d009      	beq.n	8008fb6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008fa2:	7bbb      	ldrb	r3, [r7, #14]
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f001 f980 	bl	800a2ac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008fac:	2180      	movs	r1, #128	@ 0x80
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f001 f97c 	bl	800a2ac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008fb4:	e01c      	b.n	8008ff0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008fb6:	6839      	ldr	r1, [r7, #0]
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 fbe1 	bl	8009780 <USBD_CtlError>
              break;
 8008fbe:	e017      	b.n	8008ff0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	885b      	ldrh	r3, [r3, #2]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d112      	bne.n	8008fee <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008fc8:	7bbb      	ldrb	r3, [r7, #14]
 8008fca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d004      	beq.n	8008fdc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008fd2:	7bbb      	ldrb	r3, [r7, #14]
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f001 f987 	bl	800a2ea <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 fc97 	bl	8009910 <USBD_CtlSendStatus>
              }
              break;
 8008fe2:	e004      	b.n	8008fee <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008fe4:	6839      	ldr	r1, [r7, #0]
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fbca 	bl	8009780 <USBD_CtlError>
              break;
 8008fec:	e000      	b.n	8008ff0 <USBD_StdEPReq+0x158>
              break;
 8008fee:	bf00      	nop
          }
          break;
 8008ff0:	e0aa      	b.n	8009148 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ff8:	2b02      	cmp	r3, #2
 8008ffa:	d002      	beq.n	8009002 <USBD_StdEPReq+0x16a>
 8008ffc:	2b03      	cmp	r3, #3
 8008ffe:	d032      	beq.n	8009066 <USBD_StdEPReq+0x1ce>
 8009000:	e097      	b.n	8009132 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009002:	7bbb      	ldrb	r3, [r7, #14]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d007      	beq.n	8009018 <USBD_StdEPReq+0x180>
 8009008:	7bbb      	ldrb	r3, [r7, #14]
 800900a:	2b80      	cmp	r3, #128	@ 0x80
 800900c:	d004      	beq.n	8009018 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800900e:	6839      	ldr	r1, [r7, #0]
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 fbb5 	bl	8009780 <USBD_CtlError>
                break;
 8009016:	e091      	b.n	800913c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009018:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800901c:	2b00      	cmp	r3, #0
 800901e:	da0b      	bge.n	8009038 <USBD_StdEPReq+0x1a0>
 8009020:	7bbb      	ldrb	r3, [r7, #14]
 8009022:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009026:	4613      	mov	r3, r2
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	4413      	add	r3, r2
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	3310      	adds	r3, #16
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	4413      	add	r3, r2
 8009034:	3304      	adds	r3, #4
 8009036:	e00b      	b.n	8009050 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009038:	7bbb      	ldrb	r3, [r7, #14]
 800903a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800903e:	4613      	mov	r3, r2
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	4413      	add	r3, r2
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	4413      	add	r3, r2
 800904e:	3304      	adds	r3, #4
 8009050:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	2200      	movs	r2, #0
 8009056:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	2202      	movs	r2, #2
 800905c:	4619      	mov	r1, r3
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fbf8 	bl	8009854 <USBD_CtlSendData>
              break;
 8009064:	e06a      	b.n	800913c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009066:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800906a:	2b00      	cmp	r3, #0
 800906c:	da11      	bge.n	8009092 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800906e:	7bbb      	ldrb	r3, [r7, #14]
 8009070:	f003 020f 	and.w	r2, r3, #15
 8009074:	6879      	ldr	r1, [r7, #4]
 8009076:	4613      	mov	r3, r2
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	4413      	add	r3, r2
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	440b      	add	r3, r1
 8009080:	3318      	adds	r3, #24
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d117      	bne.n	80090b8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009088:	6839      	ldr	r1, [r7, #0]
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fb78 	bl	8009780 <USBD_CtlError>
                  break;
 8009090:	e054      	b.n	800913c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009092:	7bbb      	ldrb	r3, [r7, #14]
 8009094:	f003 020f 	and.w	r2, r3, #15
 8009098:	6879      	ldr	r1, [r7, #4]
 800909a:	4613      	mov	r3, r2
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	4413      	add	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	440b      	add	r3, r1
 80090a4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d104      	bne.n	80090b8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80090ae:	6839      	ldr	r1, [r7, #0]
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 fb65 	bl	8009780 <USBD_CtlError>
                  break;
 80090b6:	e041      	b.n	800913c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	da0b      	bge.n	80090d8 <USBD_StdEPReq+0x240>
 80090c0:	7bbb      	ldrb	r3, [r7, #14]
 80090c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090c6:	4613      	mov	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	4413      	add	r3, r2
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	3310      	adds	r3, #16
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	4413      	add	r3, r2
 80090d4:	3304      	adds	r3, #4
 80090d6:	e00b      	b.n	80090f0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090d8:	7bbb      	ldrb	r3, [r7, #14]
 80090da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090de:	4613      	mov	r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	4413      	add	r3, r2
 80090ee:	3304      	adds	r3, #4
 80090f0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80090f2:	7bbb      	ldrb	r3, [r7, #14]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d002      	beq.n	80090fe <USBD_StdEPReq+0x266>
 80090f8:	7bbb      	ldrb	r3, [r7, #14]
 80090fa:	2b80      	cmp	r3, #128	@ 0x80
 80090fc:	d103      	bne.n	8009106 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	2200      	movs	r2, #0
 8009102:	601a      	str	r2, [r3, #0]
 8009104:	e00e      	b.n	8009124 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009106:	7bbb      	ldrb	r3, [r7, #14]
 8009108:	4619      	mov	r1, r3
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f001 f90c 	bl	800a328 <USBD_LL_IsStallEP>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d003      	beq.n	800911e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	2201      	movs	r2, #1
 800911a:	601a      	str	r2, [r3, #0]
 800911c:	e002      	b.n	8009124 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	2200      	movs	r2, #0
 8009122:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	2202      	movs	r2, #2
 8009128:	4619      	mov	r1, r3
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fb92 	bl	8009854 <USBD_CtlSendData>
              break;
 8009130:	e004      	b.n	800913c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009132:	6839      	ldr	r1, [r7, #0]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 fb23 	bl	8009780 <USBD_CtlError>
              break;
 800913a:	bf00      	nop
          }
          break;
 800913c:	e004      	b.n	8009148 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800913e:	6839      	ldr	r1, [r7, #0]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 fb1d 	bl	8009780 <USBD_CtlError>
          break;
 8009146:	bf00      	nop
      }
      break;
 8009148:	e004      	b.n	8009154 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800914a:	6839      	ldr	r1, [r7, #0]
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 fb17 	bl	8009780 <USBD_CtlError>
      break;
 8009152:	bf00      	nop
  }

  return ret;
 8009154:	7bfb      	ldrb	r3, [r7, #15]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
	...

08009160 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800916a:	2300      	movs	r3, #0
 800916c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800916e:	2300      	movs	r3, #0
 8009170:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009172:	2300      	movs	r3, #0
 8009174:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	885b      	ldrh	r3, [r3, #2]
 800917a:	0a1b      	lsrs	r3, r3, #8
 800917c:	b29b      	uxth	r3, r3
 800917e:	3b01      	subs	r3, #1
 8009180:	2b06      	cmp	r3, #6
 8009182:	f200 8128 	bhi.w	80093d6 <USBD_GetDescriptor+0x276>
 8009186:	a201      	add	r2, pc, #4	@ (adr r2, 800918c <USBD_GetDescriptor+0x2c>)
 8009188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800918c:	080091a9 	.word	0x080091a9
 8009190:	080091c1 	.word	0x080091c1
 8009194:	08009201 	.word	0x08009201
 8009198:	080093d7 	.word	0x080093d7
 800919c:	080093d7 	.word	0x080093d7
 80091a0:	08009377 	.word	0x08009377
 80091a4:	080093a3 	.word	0x080093a3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	7c12      	ldrb	r2, [r2, #16]
 80091b4:	f107 0108 	add.w	r1, r7, #8
 80091b8:	4610      	mov	r0, r2
 80091ba:	4798      	blx	r3
 80091bc:	60f8      	str	r0, [r7, #12]
      break;
 80091be:	e112      	b.n	80093e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	7c1b      	ldrb	r3, [r3, #16]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d10d      	bne.n	80091e4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091d0:	f107 0208 	add.w	r2, r7, #8
 80091d4:	4610      	mov	r0, r2
 80091d6:	4798      	blx	r3
 80091d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	3301      	adds	r3, #1
 80091de:	2202      	movs	r2, #2
 80091e0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80091e2:	e100      	b.n	80093e6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ec:	f107 0208 	add.w	r2, r7, #8
 80091f0:	4610      	mov	r0, r2
 80091f2:	4798      	blx	r3
 80091f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	3301      	adds	r3, #1
 80091fa:	2202      	movs	r2, #2
 80091fc:	701a      	strb	r2, [r3, #0]
      break;
 80091fe:	e0f2      	b.n	80093e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	885b      	ldrh	r3, [r3, #2]
 8009204:	b2db      	uxtb	r3, r3
 8009206:	2b05      	cmp	r3, #5
 8009208:	f200 80ac 	bhi.w	8009364 <USBD_GetDescriptor+0x204>
 800920c:	a201      	add	r2, pc, #4	@ (adr r2, 8009214 <USBD_GetDescriptor+0xb4>)
 800920e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009212:	bf00      	nop
 8009214:	0800922d 	.word	0x0800922d
 8009218:	08009261 	.word	0x08009261
 800921c:	08009295 	.word	0x08009295
 8009220:	080092c9 	.word	0x080092c9
 8009224:	080092fd 	.word	0x080092fd
 8009228:	08009331 	.word	0x08009331
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00b      	beq.n	8009250 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	7c12      	ldrb	r2, [r2, #16]
 8009244:	f107 0108 	add.w	r1, r7, #8
 8009248:	4610      	mov	r0, r2
 800924a:	4798      	blx	r3
 800924c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800924e:	e091      	b.n	8009374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009250:	6839      	ldr	r1, [r7, #0]
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 fa94 	bl	8009780 <USBD_CtlError>
            err++;
 8009258:	7afb      	ldrb	r3, [r7, #11]
 800925a:	3301      	adds	r3, #1
 800925c:	72fb      	strb	r3, [r7, #11]
          break;
 800925e:	e089      	b.n	8009374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00b      	beq.n	8009284 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	7c12      	ldrb	r2, [r2, #16]
 8009278:	f107 0108 	add.w	r1, r7, #8
 800927c:	4610      	mov	r0, r2
 800927e:	4798      	blx	r3
 8009280:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009282:	e077      	b.n	8009374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009284:	6839      	ldr	r1, [r7, #0]
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 fa7a 	bl	8009780 <USBD_CtlError>
            err++;
 800928c:	7afb      	ldrb	r3, [r7, #11]
 800928e:	3301      	adds	r3, #1
 8009290:	72fb      	strb	r3, [r7, #11]
          break;
 8009292:	e06f      	b.n	8009374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d00b      	beq.n	80092b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	7c12      	ldrb	r2, [r2, #16]
 80092ac:	f107 0108 	add.w	r1, r7, #8
 80092b0:	4610      	mov	r0, r2
 80092b2:	4798      	blx	r3
 80092b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092b6:	e05d      	b.n	8009374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092b8:	6839      	ldr	r1, [r7, #0]
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 fa60 	bl	8009780 <USBD_CtlError>
            err++;
 80092c0:	7afb      	ldrb	r3, [r7, #11]
 80092c2:	3301      	adds	r3, #1
 80092c4:	72fb      	strb	r3, [r7, #11]
          break;
 80092c6:	e055      	b.n	8009374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d00b      	beq.n	80092ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80092da:	691b      	ldr	r3, [r3, #16]
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	7c12      	ldrb	r2, [r2, #16]
 80092e0:	f107 0108 	add.w	r1, r7, #8
 80092e4:	4610      	mov	r0, r2
 80092e6:	4798      	blx	r3
 80092e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092ea:	e043      	b.n	8009374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092ec:	6839      	ldr	r1, [r7, #0]
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 fa46 	bl	8009780 <USBD_CtlError>
            err++;
 80092f4:	7afb      	ldrb	r3, [r7, #11]
 80092f6:	3301      	adds	r3, #1
 80092f8:	72fb      	strb	r3, [r7, #11]
          break;
 80092fa:	e03b      	b.n	8009374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009302:	695b      	ldr	r3, [r3, #20]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00b      	beq.n	8009320 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800930e:	695b      	ldr	r3, [r3, #20]
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	7c12      	ldrb	r2, [r2, #16]
 8009314:	f107 0108 	add.w	r1, r7, #8
 8009318:	4610      	mov	r0, r2
 800931a:	4798      	blx	r3
 800931c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800931e:	e029      	b.n	8009374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009320:	6839      	ldr	r1, [r7, #0]
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 fa2c 	bl	8009780 <USBD_CtlError>
            err++;
 8009328:	7afb      	ldrb	r3, [r7, #11]
 800932a:	3301      	adds	r3, #1
 800932c:	72fb      	strb	r3, [r7, #11]
          break;
 800932e:	e021      	b.n	8009374 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009336:	699b      	ldr	r3, [r3, #24]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00b      	beq.n	8009354 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	7c12      	ldrb	r2, [r2, #16]
 8009348:	f107 0108 	add.w	r1, r7, #8
 800934c:	4610      	mov	r0, r2
 800934e:	4798      	blx	r3
 8009350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009352:	e00f      	b.n	8009374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fa12 	bl	8009780 <USBD_CtlError>
            err++;
 800935c:	7afb      	ldrb	r3, [r7, #11]
 800935e:	3301      	adds	r3, #1
 8009360:	72fb      	strb	r3, [r7, #11]
          break;
 8009362:	e007      	b.n	8009374 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009364:	6839      	ldr	r1, [r7, #0]
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fa0a 	bl	8009780 <USBD_CtlError>
          err++;
 800936c:	7afb      	ldrb	r3, [r7, #11]
 800936e:	3301      	adds	r3, #1
 8009370:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009372:	e038      	b.n	80093e6 <USBD_GetDescriptor+0x286>
 8009374:	e037      	b.n	80093e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	7c1b      	ldrb	r3, [r3, #16]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d109      	bne.n	8009392 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009386:	f107 0208 	add.w	r2, r7, #8
 800938a:	4610      	mov	r0, r2
 800938c:	4798      	blx	r3
 800938e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009390:	e029      	b.n	80093e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009392:	6839      	ldr	r1, [r7, #0]
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 f9f3 	bl	8009780 <USBD_CtlError>
        err++;
 800939a:	7afb      	ldrb	r3, [r7, #11]
 800939c:	3301      	adds	r3, #1
 800939e:	72fb      	strb	r3, [r7, #11]
      break;
 80093a0:	e021      	b.n	80093e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	7c1b      	ldrb	r3, [r3, #16]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d10d      	bne.n	80093c6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093b2:	f107 0208 	add.w	r2, r7, #8
 80093b6:	4610      	mov	r0, r2
 80093b8:	4798      	blx	r3
 80093ba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	3301      	adds	r3, #1
 80093c0:	2207      	movs	r2, #7
 80093c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093c4:	e00f      	b.n	80093e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 f9d9 	bl	8009780 <USBD_CtlError>
        err++;
 80093ce:	7afb      	ldrb	r3, [r7, #11]
 80093d0:	3301      	adds	r3, #1
 80093d2:	72fb      	strb	r3, [r7, #11]
      break;
 80093d4:	e007      	b.n	80093e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80093d6:	6839      	ldr	r1, [r7, #0]
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 f9d1 	bl	8009780 <USBD_CtlError>
      err++;
 80093de:	7afb      	ldrb	r3, [r7, #11]
 80093e0:	3301      	adds	r3, #1
 80093e2:	72fb      	strb	r3, [r7, #11]
      break;
 80093e4:	bf00      	nop
  }

  if (err != 0U)
 80093e6:	7afb      	ldrb	r3, [r7, #11]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d11c      	bne.n	8009426 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80093ec:	893b      	ldrh	r3, [r7, #8]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d011      	beq.n	8009416 <USBD_GetDescriptor+0x2b6>
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	88db      	ldrh	r3, [r3, #6]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00d      	beq.n	8009416 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	88da      	ldrh	r2, [r3, #6]
 80093fe:	893b      	ldrh	r3, [r7, #8]
 8009400:	4293      	cmp	r3, r2
 8009402:	bf28      	it	cs
 8009404:	4613      	movcs	r3, r2
 8009406:	b29b      	uxth	r3, r3
 8009408:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800940a:	893b      	ldrh	r3, [r7, #8]
 800940c:	461a      	mov	r2, r3
 800940e:	68f9      	ldr	r1, [r7, #12]
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 fa1f 	bl	8009854 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	88db      	ldrh	r3, [r3, #6]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d104      	bne.n	8009428 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fa76 	bl	8009910 <USBD_CtlSendStatus>
 8009424:	e000      	b.n	8009428 <USBD_GetDescriptor+0x2c8>
    return;
 8009426:	bf00      	nop
    }
  }
}
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop

08009430 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	889b      	ldrh	r3, [r3, #4]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d130      	bne.n	80094a4 <USBD_SetAddress+0x74>
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	88db      	ldrh	r3, [r3, #6]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d12c      	bne.n	80094a4 <USBD_SetAddress+0x74>
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	885b      	ldrh	r3, [r3, #2]
 800944e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009450:	d828      	bhi.n	80094a4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	885b      	ldrh	r3, [r3, #2]
 8009456:	b2db      	uxtb	r3, r3
 8009458:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800945c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009464:	2b03      	cmp	r3, #3
 8009466:	d104      	bne.n	8009472 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f988 	bl	8009780 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009470:	e01d      	b.n	80094ae <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	7bfa      	ldrb	r2, [r7, #15]
 8009476:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800947a:	7bfb      	ldrb	r3, [r7, #15]
 800947c:	4619      	mov	r1, r3
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 ff7d 	bl	800a37e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 fa43 	bl	8009910 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800948a:	7bfb      	ldrb	r3, [r7, #15]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d004      	beq.n	800949a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2202      	movs	r2, #2
 8009494:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009498:	e009      	b.n	80094ae <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2201      	movs	r2, #1
 800949e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094a2:	e004      	b.n	80094ae <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80094a4:	6839      	ldr	r1, [r7, #0]
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 f96a 	bl	8009780 <USBD_CtlError>
  }
}
 80094ac:	bf00      	nop
 80094ae:	bf00      	nop
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
	...

080094b8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	885b      	ldrh	r3, [r3, #2]
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	4b41      	ldr	r3, [pc, #260]	@ (80095d0 <USBD_SetConfig+0x118>)
 80094ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80094cc:	4b40      	ldr	r3, [pc, #256]	@ (80095d0 <USBD_SetConfig+0x118>)
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d904      	bls.n	80094de <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80094d4:	6839      	ldr	r1, [r7, #0]
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 f952 	bl	8009780 <USBD_CtlError>
 80094dc:	e075      	b.n	80095ca <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d002      	beq.n	80094ee <USBD_SetConfig+0x36>
 80094e8:	2b03      	cmp	r3, #3
 80094ea:	d023      	beq.n	8009534 <USBD_SetConfig+0x7c>
 80094ec:	e062      	b.n	80095b4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80094ee:	4b38      	ldr	r3, [pc, #224]	@ (80095d0 <USBD_SetConfig+0x118>)
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d01a      	beq.n	800952c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80094f6:	4b36      	ldr	r3, [pc, #216]	@ (80095d0 <USBD_SetConfig+0x118>)
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	461a      	mov	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2203      	movs	r2, #3
 8009504:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009508:	4b31      	ldr	r3, [pc, #196]	@ (80095d0 <USBD_SetConfig+0x118>)
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	4619      	mov	r1, r3
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f7ff f9e7 	bl	80088e2 <USBD_SetClassConfig>
 8009514:	4603      	mov	r3, r0
 8009516:	2b02      	cmp	r3, #2
 8009518:	d104      	bne.n	8009524 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800951a:	6839      	ldr	r1, [r7, #0]
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 f92f 	bl	8009780 <USBD_CtlError>
            return;
 8009522:	e052      	b.n	80095ca <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 f9f3 	bl	8009910 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800952a:	e04e      	b.n	80095ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 f9ef 	bl	8009910 <USBD_CtlSendStatus>
        break;
 8009532:	e04a      	b.n	80095ca <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009534:	4b26      	ldr	r3, [pc, #152]	@ (80095d0 <USBD_SetConfig+0x118>)
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d112      	bne.n	8009562 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2202      	movs	r2, #2
 8009540:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009544:	4b22      	ldr	r3, [pc, #136]	@ (80095d0 <USBD_SetConfig+0x118>)
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	461a      	mov	r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800954e:	4b20      	ldr	r3, [pc, #128]	@ (80095d0 <USBD_SetConfig+0x118>)
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	4619      	mov	r1, r3
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f7ff f9e3 	bl	8008920 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f9d8 	bl	8009910 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009560:	e033      	b.n	80095ca <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009562:	4b1b      	ldr	r3, [pc, #108]	@ (80095d0 <USBD_SetConfig+0x118>)
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	461a      	mov	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	429a      	cmp	r2, r3
 800956e:	d01d      	beq.n	80095ac <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	b2db      	uxtb	r3, r3
 8009576:	4619      	mov	r1, r3
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f7ff f9d1 	bl	8008920 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800957e:	4b14      	ldr	r3, [pc, #80]	@ (80095d0 <USBD_SetConfig+0x118>)
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	461a      	mov	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009588:	4b11      	ldr	r3, [pc, #68]	@ (80095d0 <USBD_SetConfig+0x118>)
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	4619      	mov	r1, r3
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f7ff f9a7 	bl	80088e2 <USBD_SetClassConfig>
 8009594:	4603      	mov	r3, r0
 8009596:	2b02      	cmp	r3, #2
 8009598:	d104      	bne.n	80095a4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800959a:	6839      	ldr	r1, [r7, #0]
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 f8ef 	bl	8009780 <USBD_CtlError>
            return;
 80095a2:	e012      	b.n	80095ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 f9b3 	bl	8009910 <USBD_CtlSendStatus>
        break;
 80095aa:	e00e      	b.n	80095ca <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 f9af 	bl	8009910 <USBD_CtlSendStatus>
        break;
 80095b2:	e00a      	b.n	80095ca <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80095b4:	6839      	ldr	r1, [r7, #0]
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 f8e2 	bl	8009780 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80095bc:	4b04      	ldr	r3, [pc, #16]	@ (80095d0 <USBD_SetConfig+0x118>)
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	4619      	mov	r1, r3
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f7ff f9ac 	bl	8008920 <USBD_ClrClassConfig>
        break;
 80095c8:	bf00      	nop
    }
  }
}
 80095ca:	3708      	adds	r7, #8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	20000600 	.word	0x20000600

080095d4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	88db      	ldrh	r3, [r3, #6]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d004      	beq.n	80095f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80095e6:	6839      	ldr	r1, [r7, #0]
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 f8c9 	bl	8009780 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80095ee:	e022      	b.n	8009636 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095f6:	2b02      	cmp	r3, #2
 80095f8:	dc02      	bgt.n	8009600 <USBD_GetConfig+0x2c>
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	dc03      	bgt.n	8009606 <USBD_GetConfig+0x32>
 80095fe:	e015      	b.n	800962c <USBD_GetConfig+0x58>
 8009600:	2b03      	cmp	r3, #3
 8009602:	d00b      	beq.n	800961c <USBD_GetConfig+0x48>
 8009604:	e012      	b.n	800962c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	3308      	adds	r3, #8
 8009610:	2201      	movs	r2, #1
 8009612:	4619      	mov	r1, r3
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 f91d 	bl	8009854 <USBD_CtlSendData>
        break;
 800961a:	e00c      	b.n	8009636 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	3304      	adds	r3, #4
 8009620:	2201      	movs	r2, #1
 8009622:	4619      	mov	r1, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 f915 	bl	8009854 <USBD_CtlSendData>
        break;
 800962a:	e004      	b.n	8009636 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800962c:	6839      	ldr	r1, [r7, #0]
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 f8a6 	bl	8009780 <USBD_CtlError>
        break;
 8009634:	bf00      	nop
}
 8009636:	bf00      	nop
 8009638:	3708      	adds	r7, #8
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}

0800963e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800963e:	b580      	push	{r7, lr}
 8009640:	b082      	sub	sp, #8
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
 8009646:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800964e:	3b01      	subs	r3, #1
 8009650:	2b02      	cmp	r3, #2
 8009652:	d81e      	bhi.n	8009692 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	88db      	ldrh	r3, [r3, #6]
 8009658:	2b02      	cmp	r3, #2
 800965a:	d004      	beq.n	8009666 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800965c:	6839      	ldr	r1, [r7, #0]
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 f88e 	bl	8009780 <USBD_CtlError>
        break;
 8009664:	e01a      	b.n	800969c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2201      	movs	r2, #1
 800966a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009672:	2b00      	cmp	r3, #0
 8009674:	d005      	beq.n	8009682 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	f043 0202 	orr.w	r2, r3, #2
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	330c      	adds	r3, #12
 8009686:	2202      	movs	r2, #2
 8009688:	4619      	mov	r1, r3
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 f8e2 	bl	8009854 <USBD_CtlSendData>
      break;
 8009690:	e004      	b.n	800969c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009692:	6839      	ldr	r1, [r7, #0]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 f873 	bl	8009780 <USBD_CtlError>
      break;
 800969a:	bf00      	nop
  }
}
 800969c:	bf00      	nop
 800969e:	3708      	adds	r7, #8
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	885b      	ldrh	r3, [r3, #2]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d106      	bne.n	80096c4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2201      	movs	r2, #1
 80096ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 f926 	bl	8009910 <USBD_CtlSendStatus>
  }
}
 80096c4:	bf00      	nop
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096dc:	3b01      	subs	r3, #1
 80096de:	2b02      	cmp	r3, #2
 80096e0:	d80b      	bhi.n	80096fa <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	885b      	ldrh	r3, [r3, #2]
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d10c      	bne.n	8009704 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2200      	movs	r2, #0
 80096ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f90c 	bl	8009910 <USBD_CtlSendStatus>
      }
      break;
 80096f8:	e004      	b.n	8009704 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80096fa:	6839      	ldr	r1, [r7, #0]
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 f83f 	bl	8009780 <USBD_CtlError>
      break;
 8009702:	e000      	b.n	8009706 <USBD_ClrFeature+0x3a>
      break;
 8009704:	bf00      	nop
  }
}
 8009706:	bf00      	nop
 8009708:	3708      	adds	r7, #8
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800970e:	b480      	push	{r7}
 8009710:	b083      	sub	sp, #12
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
 8009716:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	781a      	ldrb	r2, [r3, #0]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	785a      	ldrb	r2, [r3, #1]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	3302      	adds	r3, #2
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	461a      	mov	r2, r3
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	3303      	adds	r3, #3
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	021b      	lsls	r3, r3, #8
 8009738:	b29b      	uxth	r3, r3
 800973a:	4413      	add	r3, r2
 800973c:	b29a      	uxth	r2, r3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	3304      	adds	r3, #4
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	461a      	mov	r2, r3
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	3305      	adds	r3, #5
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	021b      	lsls	r3, r3, #8
 8009752:	b29b      	uxth	r3, r3
 8009754:	4413      	add	r3, r2
 8009756:	b29a      	uxth	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	3306      	adds	r3, #6
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	461a      	mov	r2, r3
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	3307      	adds	r3, #7
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	021b      	lsls	r3, r3, #8
 800976c:	b29b      	uxth	r3, r3
 800976e:	4413      	add	r3, r2
 8009770:	b29a      	uxth	r2, r3
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	80da      	strh	r2, [r3, #6]

}
 8009776:	bf00      	nop
 8009778:	370c      	adds	r7, #12
 800977a:	46bd      	mov	sp, r7
 800977c:	bc80      	pop	{r7}
 800977e:	4770      	bx	lr

08009780 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800978a:	2180      	movs	r1, #128	@ 0x80
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 fd8d 	bl	800a2ac <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009792:	2100      	movs	r1, #0
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 fd89 	bl	800a2ac <USBD_LL_StallEP>
}
 800979a:	bf00      	nop
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b086      	sub	sp, #24
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	60f8      	str	r0, [r7, #12]
 80097aa:	60b9      	str	r1, [r7, #8]
 80097ac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80097ae:	2300      	movs	r3, #0
 80097b0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d032      	beq.n	800981e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	f000 f834 	bl	8009826 <USBD_GetLen>
 80097be:	4603      	mov	r3, r0
 80097c0:	3301      	adds	r3, #1
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	005b      	lsls	r3, r3, #1
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80097cc:	7dfb      	ldrb	r3, [r7, #23]
 80097ce:	1c5a      	adds	r2, r3, #1
 80097d0:	75fa      	strb	r2, [r7, #23]
 80097d2:	461a      	mov	r2, r3
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	4413      	add	r3, r2
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	7812      	ldrb	r2, [r2, #0]
 80097dc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80097de:	7dfb      	ldrb	r3, [r7, #23]
 80097e0:	1c5a      	adds	r2, r3, #1
 80097e2:	75fa      	strb	r2, [r7, #23]
 80097e4:	461a      	mov	r2, r3
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	4413      	add	r3, r2
 80097ea:	2203      	movs	r2, #3
 80097ec:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80097ee:	e012      	b.n	8009816 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	1c5a      	adds	r2, r3, #1
 80097f4:	60fa      	str	r2, [r7, #12]
 80097f6:	7dfa      	ldrb	r2, [r7, #23]
 80097f8:	1c51      	adds	r1, r2, #1
 80097fa:	75f9      	strb	r1, [r7, #23]
 80097fc:	4611      	mov	r1, r2
 80097fe:	68ba      	ldr	r2, [r7, #8]
 8009800:	440a      	add	r2, r1
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009806:	7dfb      	ldrb	r3, [r7, #23]
 8009808:	1c5a      	adds	r2, r3, #1
 800980a:	75fa      	strb	r2, [r7, #23]
 800980c:	461a      	mov	r2, r3
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	4413      	add	r3, r2
 8009812:	2200      	movs	r2, #0
 8009814:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d1e8      	bne.n	80097f0 <USBD_GetString+0x4e>
    }
  }
}
 800981e:	bf00      	nop
 8009820:	3718      	adds	r7, #24
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009826:	b480      	push	{r7}
 8009828:	b085      	sub	sp, #20
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800982e:	2300      	movs	r3, #0
 8009830:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009832:	e005      	b.n	8009840 <USBD_GetLen+0x1a>
  {
    len++;
 8009834:	7bfb      	ldrb	r3, [r7, #15]
 8009836:	3301      	adds	r3, #1
 8009838:	73fb      	strb	r3, [r7, #15]
    buf++;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	3301      	adds	r3, #1
 800983e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d1f5      	bne.n	8009834 <USBD_GetLen+0xe>
  }

  return len;
 8009848:	7bfb      	ldrb	r3, [r7, #15]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3714      	adds	r7, #20
 800984e:	46bd      	mov	sp, r7
 8009850:	bc80      	pop	{r7}
 8009852:	4770      	bx	lr

08009854 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	60b9      	str	r1, [r7, #8]
 800985e:	4613      	mov	r3, r2
 8009860:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2202      	movs	r2, #2
 8009866:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800986a:	88fa      	ldrh	r2, [r7, #6]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009870:	88fa      	ldrh	r2, [r7, #6]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009876:	88fb      	ldrh	r3, [r7, #6]
 8009878:	68ba      	ldr	r2, [r7, #8]
 800987a:	2100      	movs	r1, #0
 800987c:	68f8      	ldr	r0, [r7, #12]
 800987e:	f000 fd9d 	bl	800a3bc <USBD_LL_Transmit>

  return USBD_OK;
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	3710      	adds	r7, #16
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	4613      	mov	r3, r2
 8009898:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800989a:	88fb      	ldrh	r3, [r7, #6]
 800989c:	68ba      	ldr	r2, [r7, #8]
 800989e:	2100      	movs	r1, #0
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f000 fd8b 	bl	800a3bc <USBD_LL_Transmit>

  return USBD_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3710      	adds	r7, #16
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	4613      	mov	r3, r2
 80098bc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2203      	movs	r2, #3
 80098c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80098c6:	88fa      	ldrh	r2, [r7, #6]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80098ce:	88fa      	ldrh	r2, [r7, #6]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80098d6:	88fb      	ldrh	r3, [r7, #6]
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	2100      	movs	r1, #0
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f000 fd90 	bl	800a402 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	4613      	mov	r3, r2
 80098f8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80098fa:	88fb      	ldrh	r3, [r7, #6]
 80098fc:	68ba      	ldr	r2, [r7, #8]
 80098fe:	2100      	movs	r1, #0
 8009900:	68f8      	ldr	r0, [r7, #12]
 8009902:	f000 fd7e 	bl	800a402 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009906:	2300      	movs	r3, #0
}
 8009908:	4618      	mov	r0, r3
 800990a:	3710      	adds	r7, #16
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2204      	movs	r2, #4
 800991c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009920:	2300      	movs	r3, #0
 8009922:	2200      	movs	r2, #0
 8009924:	2100      	movs	r1, #0
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 fd48 	bl	800a3bc <USBD_LL_Transmit>

  return USBD_OK;
 800992c:	2300      	movs	r3, #0
}
 800992e:	4618      	mov	r0, r3
 8009930:	3708      	adds	r7, #8
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b082      	sub	sp, #8
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2205      	movs	r2, #5
 8009942:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009946:	2300      	movs	r3, #0
 8009948:	2200      	movs	r2, #0
 800994a:	2100      	movs	r1, #0
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 fd58 	bl	800a402 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009952:	2300      	movs	r3, #0
}
 8009954:	4618      	mov	r0, r3
 8009956:	3708      	adds	r7, #8
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009960:	2200      	movs	r2, #0
 8009962:	4912      	ldr	r1, [pc, #72]	@ (80099ac <MX_USB_DEVICE_Init+0x50>)
 8009964:	4812      	ldr	r0, [pc, #72]	@ (80099b0 <MX_USB_DEVICE_Init+0x54>)
 8009966:	f7fe ff62 	bl	800882e <USBD_Init>
 800996a:	4603      	mov	r3, r0
 800996c:	2b00      	cmp	r3, #0
 800996e:	d001      	beq.n	8009974 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009970:	f7f6 fd3a 	bl	80003e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009974:	490f      	ldr	r1, [pc, #60]	@ (80099b4 <MX_USB_DEVICE_Init+0x58>)
 8009976:	480e      	ldr	r0, [pc, #56]	@ (80099b0 <MX_USB_DEVICE_Init+0x54>)
 8009978:	f7fe ff84 	bl	8008884 <USBD_RegisterClass>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d001      	beq.n	8009986 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009982:	f7f6 fd31 	bl	80003e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009986:	490c      	ldr	r1, [pc, #48]	@ (80099b8 <MX_USB_DEVICE_Init+0x5c>)
 8009988:	4809      	ldr	r0, [pc, #36]	@ (80099b0 <MX_USB_DEVICE_Init+0x54>)
 800998a:	f7fe feb5 	bl	80086f8 <USBD_CDC_RegisterInterface>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d001      	beq.n	8009998 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009994:	f7f6 fd28 	bl	80003e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009998:	4805      	ldr	r0, [pc, #20]	@ (80099b0 <MX_USB_DEVICE_Init+0x54>)
 800999a:	f7fe ff8c 	bl	80088b6 <USBD_Start>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d001      	beq.n	80099a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80099a4:	f7f6 fd20 	bl	80003e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80099a8:	bf00      	nop
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	20000140 	.word	0x20000140
 80099b0:	20000604 	.word	0x20000604
 80099b4:	20000020 	.word	0x20000020
 80099b8:	20000130 	.word	0x20000130

080099bc <cdcAvailable>:
uint32_t rx_len = 512;
uint8_t rx_buf[512];
bool rx_full = false;

uint32_t cdcAvailable(void)
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
    uint32_t ret;

    ret = (rx_in - rx_out) % rx_len;
 80099c2:	4b09      	ldr	r3, [pc, #36]	@ (80099e8 <cdcAvailable+0x2c>)
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	4b09      	ldr	r3, [pc, #36]	@ (80099ec <cdcAvailable+0x30>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	1ad3      	subs	r3, r2, r3
 80099cc:	4a08      	ldr	r2, [pc, #32]	@ (80099f0 <cdcAvailable+0x34>)
 80099ce:	6812      	ldr	r2, [r2, #0]
 80099d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80099d4:	fb01 f202 	mul.w	r2, r1, r2
 80099d8:	1a9b      	subs	r3, r3, r2
 80099da:	607b      	str	r3, [r7, #4]

    return ret;
 80099dc:	687b      	ldr	r3, [r7, #4]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	370c      	adds	r7, #12
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bc80      	pop	{r7}
 80099e6:	4770      	bx	lr
 80099e8:	200008c8 	.word	0x200008c8
 80099ec:	200008cc 	.word	0x200008cc
 80099f0:	2000012c 	.word	0x2000012c

080099f4 <cdcRead>:

uint8_t cdcRead(void)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
    uint8_t ret;

    ret = rx_buf[rx_out];
 80099fa:	4b0e      	ldr	r3, [pc, #56]	@ (8009a34 <cdcRead+0x40>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a0e      	ldr	r2, [pc, #56]	@ (8009a38 <cdcRead+0x44>)
 8009a00:	5cd3      	ldrb	r3, [r2, r3]
 8009a02:	71fb      	strb	r3, [r7, #7]

    if (rx_out != rx_in)
 8009a04:	4b0b      	ldr	r3, [pc, #44]	@ (8009a34 <cdcRead+0x40>)
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	4b0c      	ldr	r3, [pc, #48]	@ (8009a3c <cdcRead+0x48>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d00b      	beq.n	8009a28 <cdcRead+0x34>
    {
        rx_out = (rx_out + 1) % rx_len;
 8009a10:	4b08      	ldr	r3, [pc, #32]	@ (8009a34 <cdcRead+0x40>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	3301      	adds	r3, #1
 8009a16:	4a0a      	ldr	r2, [pc, #40]	@ (8009a40 <cdcRead+0x4c>)
 8009a18:	6812      	ldr	r2, [r2, #0]
 8009a1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a1e:	fb01 f202 	mul.w	r2, r1, r2
 8009a22:	1a9b      	subs	r3, r3, r2
 8009a24:	4a03      	ldr	r2, [pc, #12]	@ (8009a34 <cdcRead+0x40>)
 8009a26:	6013      	str	r3, [r2, #0]
    }

    return ret;
 8009a28:	79fb      	ldrb	r3, [r7, #7]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	370c      	adds	r7, #12
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bc80      	pop	{r7}
 8009a32:	4770      	bx	lr
 8009a34:	200008cc 	.word	0x200008cc
 8009a38:	200008d0 	.word	0x200008d0
 8009a3c:	200008c8 	.word	0x200008c8
 8009a40:	2000012c 	.word	0x2000012c

08009a44 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b085      	sub	sp, #20
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	71fb      	strb	r3, [r7, #7]
    uint32_t next_rx_in;

    rx_buf[rx_in] = rx_data;
 8009a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8009a88 <cdcDataIn+0x44>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	490e      	ldr	r1, [pc, #56]	@ (8009a8c <cdcDataIn+0x48>)
 8009a54:	79fa      	ldrb	r2, [r7, #7]
 8009a56:	54ca      	strb	r2, [r1, r3]

    next_rx_in = (rx_in + 1) % rx_len;
 8009a58:	4b0b      	ldr	r3, [pc, #44]	@ (8009a88 <cdcDataIn+0x44>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	4a0c      	ldr	r2, [pc, #48]	@ (8009a90 <cdcDataIn+0x4c>)
 8009a60:	6812      	ldr	r2, [r2, #0]
 8009a62:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a66:	fb01 f202 	mul.w	r2, r1, r2
 8009a6a:	1a9b      	subs	r3, r3, r2
 8009a6c:	60fb      	str	r3, [r7, #12]
    if (next_rx_in != rx_out)
 8009a6e:	4b09      	ldr	r3, [pc, #36]	@ (8009a94 <cdcDataIn+0x50>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	68fa      	ldr	r2, [r7, #12]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d002      	beq.n	8009a7e <cdcDataIn+0x3a>
    {
        rx_in = next_rx_in;
 8009a78:	4a03      	ldr	r2, [pc, #12]	@ (8009a88 <cdcDataIn+0x44>)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	6013      	str	r3, [r2, #0]
    }
}
 8009a7e:	bf00      	nop
 8009a80:	3714      	adds	r7, #20
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bc80      	pop	{r7}
 8009a86:	4770      	bx	lr
 8009a88:	200008c8 	.word	0x200008c8
 8009a8c:	200008d0 	.word	0x200008d0
 8009a90:	2000012c 	.word	0x2000012c
 8009a94:	200008cc 	.word	0x200008cc

08009a98 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
    uint32_t pre_time;
    uint8_t ret;

    pre_time = millis();
 8009aa2:	f7f6 fc2c 	bl	80002fe <millis>
 8009aa6:	60f8      	str	r0, [r7, #12]
    while (1)
    {
        ret = CDC_Transmit_FS(p_data, length);
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	4619      	mov	r1, r3
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 f94c 	bl	8009d4c <CDC_Transmit_FS>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	72fb      	strb	r3, [r7, #11]

        if (ret == USBD_OK)
 8009ab8:	7afb      	ldrb	r3, [r7, #11]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d101      	bne.n	8009ac2 <cdcWrite+0x2a>
        {
            return length;
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	e00e      	b.n	8009ae0 <cdcWrite+0x48>
        }
        else if (ret == USBD_FAIL)
 8009ac2:	7afb      	ldrb	r3, [r7, #11]
 8009ac4:	2b02      	cmp	r3, #2
 8009ac6:	d101      	bne.n	8009acc <cdcWrite+0x34>
        {
            return 0;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	e009      	b.n	8009ae0 <cdcWrite+0x48>
        }

        if (millis() - pre_time >= 100)
 8009acc:	f7f6 fc17 	bl	80002fe <millis>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	2b63      	cmp	r3, #99	@ 0x63
 8009ad8:	d800      	bhi.n	8009adc <cdcWrite+0x44>
        ret = CDC_Transmit_FS(p_data, length);
 8009ada:	e7e5      	b.n	8009aa8 <cdcWrite+0x10>
        {
            break;
 8009adc:	bf00      	nop
        }
    }
    return 0;
 8009ade:	2300      	movs	r3, #0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3710      	adds	r7, #16
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <USBD_CDC_SOF>:
{
    return LineCoding.bitrate;
}

uint8_t USBD_CDC_SOF(struct _USBD_HandleTypeDef *pdev)
{
 8009ae8:	b590      	push	{r4, r7, lr}
 8009aea:	b085      	sub	sp, #20
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
    if (rx_full == true)
 8009af0:	4b0e      	ldr	r3, [pc, #56]	@ (8009b2c <USBD_CDC_SOF+0x44>)
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d014      	beq.n	8009b22 <USBD_CDC_SOF+0x3a>
    {
        uint32_t buf_len;

        // 수신 버퍼에서 비어있는 데이터 양
        buf_len = (rx_len - cdcAvailable()) - 1;
 8009af8:	4b0d      	ldr	r3, [pc, #52]	@ (8009b30 <USBD_CDC_SOF+0x48>)
 8009afa:	681c      	ldr	r4, [r3, #0]
 8009afc:	f7ff ff5e 	bl	80099bc <cdcAvailable>
 8009b00:	4603      	mov	r3, r0
 8009b02:	1ae3      	subs	r3, r4, r3
 8009b04:	3b01      	subs	r3, #1
 8009b06:	60fb      	str	r3, [r7, #12]

        if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2b3f      	cmp	r3, #63	@ 0x3f
 8009b0c:	d906      	bls.n	8009b1c <USBD_CDC_SOF+0x34>
        {
            // 다음 데이터도 전송
            USBD_CDC_ReceivePacket(pdev);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f7fe fe63 	bl	80087da <USBD_CDC_ReceivePacket>
            rx_full = false;
 8009b14:	4b05      	ldr	r3, [pc, #20]	@ (8009b2c <USBD_CDC_SOF+0x44>)
 8009b16:	2200      	movs	r2, #0
 8009b18:	701a      	strb	r2, [r3, #0]
 8009b1a:	e002      	b.n	8009b22 <USBD_CDC_SOF+0x3a>
        }
        else
        {
            // 버퍼 용량 부족, 대기
            rx_full = true;
 8009b1c:	4b03      	ldr	r3, [pc, #12]	@ (8009b2c <USBD_CDC_SOF+0x44>)
 8009b1e:	2201      	movs	r2, #1
 8009b20:	701a      	strb	r2, [r3, #0]
        }
    }
    return 0;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3714      	adds	r7, #20
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd90      	pop	{r4, r7, pc}
 8009b2c:	20000ad0 	.word	0x20000ad0
 8009b30:	2000012c 	.word	0x2000012c

08009b34 <CDC_Init_FS>:
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 3 */
    /* Set Application Buffers */
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009b38:	2200      	movs	r2, #0
 8009b3a:	4905      	ldr	r1, [pc, #20]	@ (8009b50 <CDC_Init_FS+0x1c>)
 8009b3c:	4805      	ldr	r0, [pc, #20]	@ (8009b54 <CDC_Init_FS+0x20>)
 8009b3e:	f7fe fdf1 	bl	8008724 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009b42:	4905      	ldr	r1, [pc, #20]	@ (8009b58 <CDC_Init_FS+0x24>)
 8009b44:	4803      	ldr	r0, [pc, #12]	@ (8009b54 <CDC_Init_FS+0x20>)
 8009b46:	f7fe fe06 	bl	8008756 <USBD_CDC_SetRxBuffer>
    return (USBD_OK);
 8009b4a:	2300      	movs	r3, #0
    /* USER CODE END 3 */
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	20000cd4 	.word	0x20000cd4
 8009b54:	20000604 	.word	0x20000604
 8009b58:	20000ad4 	.word	0x20000ad4

08009b5c <CDC_DeInit_FS>:
/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 4 */
    return (USBD_OK);
 8009b60:	2300      	movs	r3, #0
    /* USER CODE END 4 */
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bc80      	pop	{r7}
 8009b68:	4770      	bx	lr
	...

08009b6c <CDC_Control_FS>:
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	4603      	mov	r3, r0
 8009b74:	6039      	str	r1, [r7, #0]
 8009b76:	71fb      	strb	r3, [r7, #7]
 8009b78:	4613      	mov	r3, r2
 8009b7a:	80bb      	strh	r3, [r7, #4]
    /* USER CODE BEGIN 5 */
    switch (cmd)
 8009b7c:	79fb      	ldrb	r3, [r7, #7]
 8009b7e:	2b23      	cmp	r3, #35	@ 0x23
 8009b80:	f200 80a3 	bhi.w	8009cca <CDC_Control_FS+0x15e>
 8009b84:	a201      	add	r2, pc, #4	@ (adr r2, 8009b8c <CDC_Control_FS+0x20>)
 8009b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8a:	bf00      	nop
 8009b8c:	08009ccb 	.word	0x08009ccb
 8009b90:	08009ccb 	.word	0x08009ccb
 8009b94:	08009ccb 	.word	0x08009ccb
 8009b98:	08009ccb 	.word	0x08009ccb
 8009b9c:	08009ccb 	.word	0x08009ccb
 8009ba0:	08009ccb 	.word	0x08009ccb
 8009ba4:	08009ccb 	.word	0x08009ccb
 8009ba8:	08009ccb 	.word	0x08009ccb
 8009bac:	08009ccb 	.word	0x08009ccb
 8009bb0:	08009ccb 	.word	0x08009ccb
 8009bb4:	08009ccb 	.word	0x08009ccb
 8009bb8:	08009ccb 	.word	0x08009ccb
 8009bbc:	08009ccb 	.word	0x08009ccb
 8009bc0:	08009ccb 	.word	0x08009ccb
 8009bc4:	08009ccb 	.word	0x08009ccb
 8009bc8:	08009ccb 	.word	0x08009ccb
 8009bcc:	08009ccb 	.word	0x08009ccb
 8009bd0:	08009ccb 	.word	0x08009ccb
 8009bd4:	08009ccb 	.word	0x08009ccb
 8009bd8:	08009ccb 	.word	0x08009ccb
 8009bdc:	08009ccb 	.word	0x08009ccb
 8009be0:	08009ccb 	.word	0x08009ccb
 8009be4:	08009ccb 	.word	0x08009ccb
 8009be8:	08009ccb 	.word	0x08009ccb
 8009bec:	08009ccb 	.word	0x08009ccb
 8009bf0:	08009ccb 	.word	0x08009ccb
 8009bf4:	08009ccb 	.word	0x08009ccb
 8009bf8:	08009ccb 	.word	0x08009ccb
 8009bfc:	08009ccb 	.word	0x08009ccb
 8009c00:	08009ccb 	.word	0x08009ccb
 8009c04:	08009ccb 	.word	0x08009ccb
 8009c08:	08009ccb 	.word	0x08009ccb
 8009c0c:	08009c1d 	.word	0x08009c1d
 8009c10:	08009c77 	.word	0x08009c77
 8009c14:	08009ccb 	.word	0x08009ccb
 8009c18:	08009ccb 	.word	0x08009ccb
        /*                                        3 - Mark */
        /*                                        4 - Space */
        /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16). */
        /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        LineCoding.bitrate = (uint32_t)(pbuf[0]);
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	461a      	mov	r2, r3
 8009c22:	4b2d      	ldr	r3, [pc, #180]	@ (8009cd8 <CDC_Control_FS+0x16c>)
 8009c24:	601a      	str	r2, [r3, #0]
        LineCoding.bitrate |= (uint32_t)(pbuf[1] << 8);
 8009c26:	4b2c      	ldr	r3, [pc, #176]	@ (8009cd8 <CDC_Control_FS+0x16c>)
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	021b      	lsls	r3, r3, #8
 8009c32:	4313      	orrs	r3, r2
 8009c34:	4a28      	ldr	r2, [pc, #160]	@ (8009cd8 <CDC_Control_FS+0x16c>)
 8009c36:	6013      	str	r3, [r2, #0]
        LineCoding.bitrate |= (uint32_t)(pbuf[2] << 16);
 8009c38:	4b27      	ldr	r3, [pc, #156]	@ (8009cd8 <CDC_Control_FS+0x16c>)
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	3302      	adds	r3, #2
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	041b      	lsls	r3, r3, #16
 8009c44:	4313      	orrs	r3, r2
 8009c46:	4a24      	ldr	r2, [pc, #144]	@ (8009cd8 <CDC_Control_FS+0x16c>)
 8009c48:	6013      	str	r3, [r2, #0]
        LineCoding.bitrate |= (uint32_t)(pbuf[3] << 24);
 8009c4a:	4b23      	ldr	r3, [pc, #140]	@ (8009cd8 <CDC_Control_FS+0x16c>)
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	3303      	adds	r3, #3
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	061b      	lsls	r3, r3, #24
 8009c56:	4313      	orrs	r3, r2
 8009c58:	4a1f      	ldr	r2, [pc, #124]	@ (8009cd8 <CDC_Control_FS+0x16c>)
 8009c5a:	6013      	str	r3, [r2, #0]
        LineCoding.format     = pbuf[4];
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	791a      	ldrb	r2, [r3, #4]
 8009c60:	4b1d      	ldr	r3, [pc, #116]	@ (8009cd8 <CDC_Control_FS+0x16c>)
 8009c62:	711a      	strb	r2, [r3, #4]
        LineCoding.paritytype = pbuf[5];
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	795a      	ldrb	r2, [r3, #5]
 8009c68:	4b1b      	ldr	r3, [pc, #108]	@ (8009cd8 <CDC_Control_FS+0x16c>)
 8009c6a:	715a      	strb	r2, [r3, #5]
        LineCoding.datatype   = pbuf[6];
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	799a      	ldrb	r2, [r3, #6]
 8009c70:	4b19      	ldr	r3, [pc, #100]	@ (8009cd8 <CDC_Control_FS+0x16c>)
 8009c72:	719a      	strb	r2, [r3, #6]
        break;
 8009c74:	e02a      	b.n	8009ccc <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
        pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8009c76:	4b18      	ldr	r3, [pc, #96]	@ (8009cd8 <CDC_Control_FS+0x16c>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	b2da      	uxtb	r2, r3
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	701a      	strb	r2, [r3, #0]
        pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8009c80:	4b15      	ldr	r3, [pc, #84]	@ (8009cd8 <CDC_Control_FS+0x16c>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	0a1a      	lsrs	r2, r3, #8
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	3301      	adds	r3, #1
 8009c8a:	b2d2      	uxtb	r2, r2
 8009c8c:	701a      	strb	r2, [r3, #0]
        pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8009c8e:	4b12      	ldr	r3, [pc, #72]	@ (8009cd8 <CDC_Control_FS+0x16c>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	0c1a      	lsrs	r2, r3, #16
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	3302      	adds	r3, #2
 8009c98:	b2d2      	uxtb	r2, r2
 8009c9a:	701a      	strb	r2, [r3, #0]
        pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8009c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8009cd8 <CDC_Control_FS+0x16c>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	0e1a      	lsrs	r2, r3, #24
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	3303      	adds	r3, #3
 8009ca6:	b2d2      	uxtb	r2, r2
 8009ca8:	701a      	strb	r2, [r3, #0]
        pbuf[4] = LineCoding.format;
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	3304      	adds	r3, #4
 8009cae:	4a0a      	ldr	r2, [pc, #40]	@ (8009cd8 <CDC_Control_FS+0x16c>)
 8009cb0:	7912      	ldrb	r2, [r2, #4]
 8009cb2:	701a      	strb	r2, [r3, #0]
        pbuf[5] = LineCoding.paritytype;
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	3305      	adds	r3, #5
 8009cb8:	4a07      	ldr	r2, [pc, #28]	@ (8009cd8 <CDC_Control_FS+0x16c>)
 8009cba:	7952      	ldrb	r2, [r2, #5]
 8009cbc:	701a      	strb	r2, [r3, #0]
        pbuf[6] = LineCoding.datatype;
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	3306      	adds	r3, #6
 8009cc2:	4a05      	ldr	r2, [pc, #20]	@ (8009cd8 <CDC_Control_FS+0x16c>)
 8009cc4:	7992      	ldrb	r2, [r2, #6]
 8009cc6:	701a      	strb	r2, [r3, #0]
        break;
 8009cc8:	e000      	b.n	8009ccc <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

        break;

    default:
        break;
 8009cca:	bf00      	nop
    }

    return (USBD_OK);
 8009ccc:	2300      	movs	r3, #0
    /* USER CODE END 5 */
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	370c      	adds	r7, #12
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bc80      	pop	{r7}
 8009cd6:	4770      	bx	lr
 8009cd8:	20000124 	.word	0x20000124

08009cdc <CDC_Receive_FS>:
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len)
{
 8009cdc:	b590      	push	{r4, r7, lr}
 8009cde:	b085      	sub	sp, #20
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
    /* USER CODE BEGIN 6 */

    for (int i = 0; i < *Len; i++)
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	60fb      	str	r3, [r7, #12]
 8009cea:	e009      	b.n	8009d00 <CDC_Receive_FS+0x24>
    {
        cdcDataIn(Buf[i]);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7ff fea5 	bl	8009a44 <cdcDataIn>
    for (int i = 0; i < *Len; i++)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	60fb      	str	r3, [r7, #12]
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d8f0      	bhi.n	8009cec <CDC_Receive_FS+0x10>
    }

    uint32_t buf_len;

    // 수신 버퍼에서 비어있는 데이터 양
    buf_len = (rx_len - cdcAvailable()) - 1;
 8009d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8009d40 <CDC_Receive_FS+0x64>)
 8009d0c:	681c      	ldr	r4, [r3, #0]
 8009d0e:	f7ff fe55 	bl	80099bc <cdcAvailable>
 8009d12:	4603      	mov	r3, r0
 8009d14:	1ae3      	subs	r3, r4, r3
 8009d16:	3b01      	subs	r3, #1
 8009d18:	60bb      	str	r3, [r7, #8]

    if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	2b3f      	cmp	r3, #63	@ 0x3f
 8009d1e:	d907      	bls.n	8009d30 <CDC_Receive_FS+0x54>
    {
        // 다음 데이터도 전송
        USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009d20:	6879      	ldr	r1, [r7, #4]
 8009d22:	4808      	ldr	r0, [pc, #32]	@ (8009d44 <CDC_Receive_FS+0x68>)
 8009d24:	f7fe fd17 	bl	8008756 <USBD_CDC_SetRxBuffer>
        USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009d28:	4806      	ldr	r0, [pc, #24]	@ (8009d44 <CDC_Receive_FS+0x68>)
 8009d2a:	f7fe fd56 	bl	80087da <USBD_CDC_ReceivePacket>
 8009d2e:	e002      	b.n	8009d36 <CDC_Receive_FS+0x5a>
    }
    else
    {
        // 버퍼 용량 부족, 대기
        rx_full = true;
 8009d30:	4b05      	ldr	r3, [pc, #20]	@ (8009d48 <CDC_Receive_FS+0x6c>)
 8009d32:	2201      	movs	r2, #1
 8009d34:	701a      	strb	r2, [r3, #0]
    }

    return (USBD_OK);
 8009d36:	2300      	movs	r3, #0
    /* USER CODE END 6 */
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3714      	adds	r7, #20
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd90      	pop	{r4, r7, pc}
 8009d40:	2000012c 	.word	0x2000012c
 8009d44:	20000604 	.word	0x20000604
 8009d48:	20000ad0 	.word	0x20000ad0

08009d4c <CDC_Transmit_FS>:
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	460b      	mov	r3, r1
 8009d56:	807b      	strh	r3, [r7, #2]
    uint8_t result = USBD_OK;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	73fb      	strb	r3, [r7, #15]
    /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef *hcdc =
 8009d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8009d94 <CDC_Transmit_FS+0x48>)
 8009d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d62:	60bb      	str	r3, [r7, #8]
        (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
    if (hcdc->TxState != 0)
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d001      	beq.n	8009d72 <CDC_Transmit_FS+0x26>
    {
        return USBD_BUSY;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e00b      	b.n	8009d8a <CDC_Transmit_FS+0x3e>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009d72:	887b      	ldrh	r3, [r7, #2]
 8009d74:	461a      	mov	r2, r3
 8009d76:	6879      	ldr	r1, [r7, #4]
 8009d78:	4806      	ldr	r0, [pc, #24]	@ (8009d94 <CDC_Transmit_FS+0x48>)
 8009d7a:	f7fe fcd3 	bl	8008724 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009d7e:	4805      	ldr	r0, [pc, #20]	@ (8009d94 <CDC_Transmit_FS+0x48>)
 8009d80:	f7fe fcfc 	bl	800877c <USBD_CDC_TransmitPacket>
 8009d84:	4603      	mov	r3, r0
 8009d86:	73fb      	strb	r3, [r7, #15]
    /* USER CODE END 7 */
    return result;
 8009d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	20000604 	.word	0x20000604

08009d98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	4603      	mov	r3, r0
 8009da0:	6039      	str	r1, [r7, #0]
 8009da2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	2212      	movs	r2, #18
 8009da8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009daa:	4b03      	ldr	r3, [pc, #12]	@ (8009db8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bc80      	pop	{r7}
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	2000015c 	.word	0x2000015c

08009dbc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b083      	sub	sp, #12
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	6039      	str	r1, [r7, #0]
 8009dc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	2204      	movs	r2, #4
 8009dcc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009dce:	4b03      	ldr	r3, [pc, #12]	@ (8009ddc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	370c      	adds	r7, #12
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bc80      	pop	{r7}
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	20000170 	.word	0x20000170

08009de0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	4603      	mov	r3, r0
 8009de8:	6039      	str	r1, [r7, #0]
 8009dea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009dec:	79fb      	ldrb	r3, [r7, #7]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d105      	bne.n	8009dfe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009df2:	683a      	ldr	r2, [r7, #0]
 8009df4:	4907      	ldr	r1, [pc, #28]	@ (8009e14 <USBD_FS_ProductStrDescriptor+0x34>)
 8009df6:	4808      	ldr	r0, [pc, #32]	@ (8009e18 <USBD_FS_ProductStrDescriptor+0x38>)
 8009df8:	f7ff fcd3 	bl	80097a2 <USBD_GetString>
 8009dfc:	e004      	b.n	8009e08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009dfe:	683a      	ldr	r2, [r7, #0]
 8009e00:	4904      	ldr	r1, [pc, #16]	@ (8009e14 <USBD_FS_ProductStrDescriptor+0x34>)
 8009e02:	4805      	ldr	r0, [pc, #20]	@ (8009e18 <USBD_FS_ProductStrDescriptor+0x38>)
 8009e04:	f7ff fccd 	bl	80097a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e08:	4b02      	ldr	r3, [pc, #8]	@ (8009e14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3708      	adds	r7, #8
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	20000ed4 	.word	0x20000ed4
 8009e18:	0800b49c 	.word	0x0800b49c

08009e1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	4603      	mov	r3, r0
 8009e24:	6039      	str	r1, [r7, #0]
 8009e26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009e28:	683a      	ldr	r2, [r7, #0]
 8009e2a:	4904      	ldr	r1, [pc, #16]	@ (8009e3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009e2c:	4804      	ldr	r0, [pc, #16]	@ (8009e40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009e2e:	f7ff fcb8 	bl	80097a2 <USBD_GetString>
  return USBD_StrDesc;
 8009e32:	4b02      	ldr	r3, [pc, #8]	@ (8009e3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3708      	adds	r7, #8
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	20000ed4 	.word	0x20000ed4
 8009e40:	0800b4b4 	.word	0x0800b4b4

08009e44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b082      	sub	sp, #8
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	6039      	str	r1, [r7, #0]
 8009e4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	221a      	movs	r2, #26
 8009e54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009e56:	f000 f843 	bl	8009ee0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009e5a:	4b02      	ldr	r3, [pc, #8]	@ (8009e64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3708      	adds	r7, #8
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}
 8009e64:	20000174 	.word	0x20000174

08009e68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	4603      	mov	r3, r0
 8009e70:	6039      	str	r1, [r7, #0]
 8009e72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009e74:	79fb      	ldrb	r3, [r7, #7]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d105      	bne.n	8009e86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e7a:	683a      	ldr	r2, [r7, #0]
 8009e7c:	4907      	ldr	r1, [pc, #28]	@ (8009e9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e7e:	4808      	ldr	r0, [pc, #32]	@ (8009ea0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e80:	f7ff fc8f 	bl	80097a2 <USBD_GetString>
 8009e84:	e004      	b.n	8009e90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009e86:	683a      	ldr	r2, [r7, #0]
 8009e88:	4904      	ldr	r1, [pc, #16]	@ (8009e9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009e8a:	4805      	ldr	r0, [pc, #20]	@ (8009ea0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009e8c:	f7ff fc89 	bl	80097a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e90:	4b02      	ldr	r3, [pc, #8]	@ (8009e9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3708      	adds	r7, #8
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	20000ed4 	.word	0x20000ed4
 8009ea0:	0800b4c8 	.word	0x0800b4c8

08009ea4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	4603      	mov	r3, r0
 8009eac:	6039      	str	r1, [r7, #0]
 8009eae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009eb0:	79fb      	ldrb	r3, [r7, #7]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d105      	bne.n	8009ec2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009eb6:	683a      	ldr	r2, [r7, #0]
 8009eb8:	4907      	ldr	r1, [pc, #28]	@ (8009ed8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009eba:	4808      	ldr	r0, [pc, #32]	@ (8009edc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ebc:	f7ff fc71 	bl	80097a2 <USBD_GetString>
 8009ec0:	e004      	b.n	8009ecc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ec2:	683a      	ldr	r2, [r7, #0]
 8009ec4:	4904      	ldr	r1, [pc, #16]	@ (8009ed8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ec6:	4805      	ldr	r0, [pc, #20]	@ (8009edc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ec8:	f7ff fc6b 	bl	80097a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ecc:	4b02      	ldr	r3, [pc, #8]	@ (8009ed8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3708      	adds	r7, #8
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	20000ed4 	.word	0x20000ed4
 8009edc:	0800b4d4 	.word	0x0800b4d4

08009ee0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8009f24 <Get_SerialNum+0x44>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009eec:	4b0e      	ldr	r3, [pc, #56]	@ (8009f28 <Get_SerialNum+0x48>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8009f2c <Get_SerialNum+0x4c>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	4413      	add	r3, r2
 8009efe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d009      	beq.n	8009f1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009f06:	2208      	movs	r2, #8
 8009f08:	4909      	ldr	r1, [pc, #36]	@ (8009f30 <Get_SerialNum+0x50>)
 8009f0a:	68f8      	ldr	r0, [r7, #12]
 8009f0c:	f000 f814 	bl	8009f38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009f10:	2204      	movs	r2, #4
 8009f12:	4908      	ldr	r1, [pc, #32]	@ (8009f34 <Get_SerialNum+0x54>)
 8009f14:	68b8      	ldr	r0, [r7, #8]
 8009f16:	f000 f80f 	bl	8009f38 <IntToUnicode>
  }
}
 8009f1a:	bf00      	nop
 8009f1c:	3710      	adds	r7, #16
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	1ffff7e8 	.word	0x1ffff7e8
 8009f28:	1ffff7ec 	.word	0x1ffff7ec
 8009f2c:	1ffff7f0 	.word	0x1ffff7f0
 8009f30:	20000176 	.word	0x20000176
 8009f34:	20000186 	.word	0x20000186

08009f38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b087      	sub	sp, #28
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	4613      	mov	r3, r2
 8009f44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009f46:	2300      	movs	r3, #0
 8009f48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	75fb      	strb	r3, [r7, #23]
 8009f4e:	e027      	b.n	8009fa0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	0f1b      	lsrs	r3, r3, #28
 8009f54:	2b09      	cmp	r3, #9
 8009f56:	d80b      	bhi.n	8009f70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	0f1b      	lsrs	r3, r3, #28
 8009f5c:	b2da      	uxtb	r2, r3
 8009f5e:	7dfb      	ldrb	r3, [r7, #23]
 8009f60:	005b      	lsls	r3, r3, #1
 8009f62:	4619      	mov	r1, r3
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	440b      	add	r3, r1
 8009f68:	3230      	adds	r2, #48	@ 0x30
 8009f6a:	b2d2      	uxtb	r2, r2
 8009f6c:	701a      	strb	r2, [r3, #0]
 8009f6e:	e00a      	b.n	8009f86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	0f1b      	lsrs	r3, r3, #28
 8009f74:	b2da      	uxtb	r2, r3
 8009f76:	7dfb      	ldrb	r3, [r7, #23]
 8009f78:	005b      	lsls	r3, r3, #1
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	440b      	add	r3, r1
 8009f80:	3237      	adds	r2, #55	@ 0x37
 8009f82:	b2d2      	uxtb	r2, r2
 8009f84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	011b      	lsls	r3, r3, #4
 8009f8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009f8c:	7dfb      	ldrb	r3, [r7, #23]
 8009f8e:	005b      	lsls	r3, r3, #1
 8009f90:	3301      	adds	r3, #1
 8009f92:	68ba      	ldr	r2, [r7, #8]
 8009f94:	4413      	add	r3, r2
 8009f96:	2200      	movs	r2, #0
 8009f98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009f9a:	7dfb      	ldrb	r3, [r7, #23]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	75fb      	strb	r3, [r7, #23]
 8009fa0:	7dfa      	ldrb	r2, [r7, #23]
 8009fa2:	79fb      	ldrb	r3, [r7, #7]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d3d3      	bcc.n	8009f50 <IntToUnicode+0x18>
  }
}
 8009fa8:	bf00      	nop
 8009faa:	bf00      	nop
 8009fac:	371c      	adds	r7, #28
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bc80      	pop	{r7}
 8009fb2:	4770      	bx	lr

08009fb4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8009ff8 <HAL_PCD_MspInit+0x44>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d113      	bne.n	8009fee <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8009ffc <HAL_PCD_MspInit+0x48>)
 8009fc8:	69db      	ldr	r3, [r3, #28]
 8009fca:	4a0c      	ldr	r2, [pc, #48]	@ (8009ffc <HAL_PCD_MspInit+0x48>)
 8009fcc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009fd0:	61d3      	str	r3, [r2, #28]
 8009fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8009ffc <HAL_PCD_MspInit+0x48>)
 8009fd4:	69db      	ldr	r3, [r3, #28]
 8009fd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009fda:	60fb      	str	r3, [r7, #12]
 8009fdc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009fde:	2200      	movs	r2, #0
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	2014      	movs	r0, #20
 8009fe4:	f7f7 f9bb 	bl	800135e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009fe8:	2014      	movs	r0, #20
 8009fea:	f7f7 f9d4 	bl	8001396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009fee:	bf00      	nop
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	40005c00 	.word	0x40005c00
 8009ffc:	40021000 	.word	0x40021000

0800a000 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b082      	sub	sp, #8
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800a014:	4619      	mov	r1, r3
 800a016:	4610      	mov	r0, r2
 800a018:	f7fe fc95 	bl	8008946 <USBD_LL_SetupStage>
}
 800a01c:	bf00      	nop
 800a01e:	3708      	adds	r7, #8
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	460b      	mov	r3, r1
 800a02e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a036:	78fa      	ldrb	r2, [r7, #3]
 800a038:	6879      	ldr	r1, [r7, #4]
 800a03a:	4613      	mov	r3, r2
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	4413      	add	r3, r2
 800a040:	00db      	lsls	r3, r3, #3
 800a042:	440b      	add	r3, r1
 800a044:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	78fb      	ldrb	r3, [r7, #3]
 800a04c:	4619      	mov	r1, r3
 800a04e:	f7fe fcc7 	bl	80089e0 <USBD_LL_DataOutStage>
}
 800a052:	bf00      	nop
 800a054:	3708      	adds	r7, #8
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b082      	sub	sp, #8
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
 800a062:	460b      	mov	r3, r1
 800a064:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800a06c:	78fa      	ldrb	r2, [r7, #3]
 800a06e:	6879      	ldr	r1, [r7, #4]
 800a070:	4613      	mov	r3, r2
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	4413      	add	r3, r2
 800a076:	00db      	lsls	r3, r3, #3
 800a078:	440b      	add	r3, r1
 800a07a:	3324      	adds	r3, #36	@ 0x24
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	78fb      	ldrb	r3, [r7, #3]
 800a080:	4619      	mov	r1, r3
 800a082:	f7fe fd1e 	bl	8008ac2 <USBD_LL_DataInStage>
}
 800a086:	bf00      	nop
 800a088:	3708      	adds	r7, #8
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b082      	sub	sp, #8
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7fe fe2e 	bl	8008cfe <USBD_LL_SOF>
}
 800a0a2:	bf00      	nop
 800a0a4:	3708      	adds	r7, #8
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b084      	sub	sp, #16
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	799b      	ldrb	r3, [r3, #6]
 800a0ba:	2b02      	cmp	r3, #2
 800a0bc:	d001      	beq.n	800a0c2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a0be:	f7f6 f993 	bl	80003e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0c8:	7bfa      	ldrb	r2, [r7, #15]
 800a0ca:	4611      	mov	r1, r2
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7fe fdde 	bl	8008c8e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7fe fd97 	bl	8008c0c <USBD_LL_Reset>
}
 800a0de:	bf00      	nop
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
	...

0800a0e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7fe fdd8 	bl	8008cac <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	7a9b      	ldrb	r3, [r3, #10]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d005      	beq.n	800a110 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a104:	4b04      	ldr	r3, [pc, #16]	@ (800a118 <HAL_PCD_SuspendCallback+0x30>)
 800a106:	691b      	ldr	r3, [r3, #16]
 800a108:	4a03      	ldr	r2, [pc, #12]	@ (800a118 <HAL_PCD_SuspendCallback+0x30>)
 800a10a:	f043 0306 	orr.w	r3, r3, #6
 800a10e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a110:	bf00      	nop
 800a112:	3708      	adds	r7, #8
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	e000ed00 	.word	0xe000ed00

0800a11c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7fe fdd2 	bl	8008cd4 <USBD_LL_Resume>
}
 800a130:	bf00      	nop
 800a132:	3708      	adds	r7, #8
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a140:	4a28      	ldr	r2, [pc, #160]	@ (800a1e4 <USBD_LL_Init+0xac>)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	4a26      	ldr	r2, [pc, #152]	@ (800a1e4 <USBD_LL_Init+0xac>)
 800a14c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a150:	4b24      	ldr	r3, [pc, #144]	@ (800a1e4 <USBD_LL_Init+0xac>)
 800a152:	4a25      	ldr	r2, [pc, #148]	@ (800a1e8 <USBD_LL_Init+0xb0>)
 800a154:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a156:	4b23      	ldr	r3, [pc, #140]	@ (800a1e4 <USBD_LL_Init+0xac>)
 800a158:	2208      	movs	r2, #8
 800a15a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a15c:	4b21      	ldr	r3, [pc, #132]	@ (800a1e4 <USBD_LL_Init+0xac>)
 800a15e:	2202      	movs	r2, #2
 800a160:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a162:	4b20      	ldr	r3, [pc, #128]	@ (800a1e4 <USBD_LL_Init+0xac>)
 800a164:	2200      	movs	r2, #0
 800a166:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a168:	4b1e      	ldr	r3, [pc, #120]	@ (800a1e4 <USBD_LL_Init+0xac>)
 800a16a:	2200      	movs	r2, #0
 800a16c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a16e:	4b1d      	ldr	r3, [pc, #116]	@ (800a1e4 <USBD_LL_Init+0xac>)
 800a170:	2200      	movs	r2, #0
 800a172:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a174:	481b      	ldr	r0, [pc, #108]	@ (800a1e4 <USBD_LL_Init+0xac>)
 800a176:	f7f8 f8a6 	bl	80022c6 <HAL_PCD_Init>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d001      	beq.n	800a184 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a180:	f7f6 f932 	bl	80003e8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a18a:	2318      	movs	r3, #24
 800a18c:	2200      	movs	r2, #0
 800a18e:	2100      	movs	r1, #0
 800a190:	f7f9 fdb7 	bl	8003d02 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a19a:	2358      	movs	r3, #88	@ 0x58
 800a19c:	2200      	movs	r2, #0
 800a19e:	2180      	movs	r1, #128	@ 0x80
 800a1a0:	f7f9 fdaf 	bl	8003d02 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a1aa:	23c0      	movs	r3, #192	@ 0xc0
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	2181      	movs	r1, #129	@ 0x81
 800a1b0:	f7f9 fda7 	bl	8003d02 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a1ba:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a1be:	2200      	movs	r2, #0
 800a1c0:	2101      	movs	r1, #1
 800a1c2:	f7f9 fd9e 	bl	8003d02 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a1cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	2182      	movs	r1, #130	@ 0x82
 800a1d4:	f7f9 fd95 	bl	8003d02 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a1d8:	2300      	movs	r3, #0
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3708      	adds	r7, #8
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	200010d4 	.word	0x200010d4
 800a1e8:	40005c00 	.word	0x40005c00

0800a1ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a202:	4618      	mov	r0, r3
 800a204:	f7f8 f955 	bl	80024b2 <HAL_PCD_Start>
 800a208:	4603      	mov	r3, r0
 800a20a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a20c:	7bfb      	ldrb	r3, [r7, #15]
 800a20e:	4618      	mov	r0, r3
 800a210:	f000 f94e 	bl	800a4b0 <USBD_Get_USB_Status>
 800a214:	4603      	mov	r3, r0
 800a216:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a218:	7bbb      	ldrb	r3, [r7, #14]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3710      	adds	r7, #16
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}

0800a222 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b084      	sub	sp, #16
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
 800a22a:	4608      	mov	r0, r1
 800a22c:	4611      	mov	r1, r2
 800a22e:	461a      	mov	r2, r3
 800a230:	4603      	mov	r3, r0
 800a232:	70fb      	strb	r3, [r7, #3]
 800a234:	460b      	mov	r3, r1
 800a236:	70bb      	strb	r3, [r7, #2]
 800a238:	4613      	mov	r3, r2
 800a23a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a23c:	2300      	movs	r3, #0
 800a23e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a240:	2300      	movs	r3, #0
 800a242:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a24a:	78bb      	ldrb	r3, [r7, #2]
 800a24c:	883a      	ldrh	r2, [r7, #0]
 800a24e:	78f9      	ldrb	r1, [r7, #3]
 800a250:	f7f8 faa9 	bl	80027a6 <HAL_PCD_EP_Open>
 800a254:	4603      	mov	r3, r0
 800a256:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a258:	7bfb      	ldrb	r3, [r7, #15]
 800a25a:	4618      	mov	r0, r3
 800a25c:	f000 f928 	bl	800a4b0 <USBD_Get_USB_Status>
 800a260:	4603      	mov	r3, r0
 800a262:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a264:	7bbb      	ldrb	r3, [r7, #14]
}
 800a266:	4618      	mov	r0, r3
 800a268:	3710      	adds	r7, #16
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a26e:	b580      	push	{r7, lr}
 800a270:	b084      	sub	sp, #16
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
 800a276:	460b      	mov	r3, r1
 800a278:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a27a:	2300      	movs	r3, #0
 800a27c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a27e:	2300      	movs	r3, #0
 800a280:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a288:	78fa      	ldrb	r2, [r7, #3]
 800a28a:	4611      	mov	r1, r2
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7f8 fae7 	bl	8002860 <HAL_PCD_EP_Close>
 800a292:	4603      	mov	r3, r0
 800a294:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a296:	7bfb      	ldrb	r3, [r7, #15]
 800a298:	4618      	mov	r0, r3
 800a29a:	f000 f909 	bl	800a4b0 <USBD_Get_USB_Status>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3710      	adds	r7, #16
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a2c6:	78fa      	ldrb	r2, [r7, #3]
 800a2c8:	4611      	mov	r1, r2
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7f8 fb8f 	bl	80029ee <HAL_PCD_EP_SetStall>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2d4:	7bfb      	ldrb	r3, [r7, #15]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f000 f8ea 	bl	800a4b0 <USBD_Get_USB_Status>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3710      	adds	r7, #16
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}

0800a2ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b084      	sub	sp, #16
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a304:	78fa      	ldrb	r2, [r7, #3]
 800a306:	4611      	mov	r1, r2
 800a308:	4618      	mov	r0, r3
 800a30a:	f7f8 fbd0 	bl	8002aae <HAL_PCD_EP_ClrStall>
 800a30e:	4603      	mov	r3, r0
 800a310:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a312:	7bfb      	ldrb	r3, [r7, #15]
 800a314:	4618      	mov	r0, r3
 800a316:	f000 f8cb 	bl	800a4b0 <USBD_Get_USB_Status>
 800a31a:	4603      	mov	r3, r0
 800a31c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a31e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a320:	4618      	mov	r0, r3
 800a322:	3710      	adds	r7, #16
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a328:	b480      	push	{r7}
 800a32a:	b085      	sub	sp, #20
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	460b      	mov	r3, r1
 800a332:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a33a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a33c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a340:	2b00      	cmp	r3, #0
 800a342:	da0b      	bge.n	800a35c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a344:	78fb      	ldrb	r3, [r7, #3]
 800a346:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a34a:	68f9      	ldr	r1, [r7, #12]
 800a34c:	4613      	mov	r3, r2
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	4413      	add	r3, r2
 800a352:	00db      	lsls	r3, r3, #3
 800a354:	440b      	add	r3, r1
 800a356:	3312      	adds	r3, #18
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	e00b      	b.n	800a374 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a35c:	78fb      	ldrb	r3, [r7, #3]
 800a35e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a362:	68f9      	ldr	r1, [r7, #12]
 800a364:	4613      	mov	r3, r2
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	4413      	add	r3, r2
 800a36a:	00db      	lsls	r3, r3, #3
 800a36c:	440b      	add	r3, r1
 800a36e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a372:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a374:	4618      	mov	r0, r3
 800a376:	3714      	adds	r7, #20
 800a378:	46bd      	mov	sp, r7
 800a37a:	bc80      	pop	{r7}
 800a37c:	4770      	bx	lr

0800a37e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	b084      	sub	sp, #16
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
 800a386:	460b      	mov	r3, r1
 800a388:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a38a:	2300      	movs	r3, #0
 800a38c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a38e:	2300      	movs	r3, #0
 800a390:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a398:	78fa      	ldrb	r2, [r7, #3]
 800a39a:	4611      	mov	r1, r2
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7f8 f9de 	bl	800275e <HAL_PCD_SetAddress>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3a6:	7bfb      	ldrb	r3, [r7, #15]
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f000 f881 	bl	800a4b0 <USBD_Get_USB_Status>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3710      	adds	r7, #16
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b086      	sub	sp, #24
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	607a      	str	r2, [r7, #4]
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	72fb      	strb	r3, [r7, #11]
 800a3cc:	4613      	mov	r3, r2
 800a3ce:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a3de:	893b      	ldrh	r3, [r7, #8]
 800a3e0:	7af9      	ldrb	r1, [r7, #11]
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	f7f8 facc 	bl	8002980 <HAL_PCD_EP_Transmit>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3ec:	7dfb      	ldrb	r3, [r7, #23]
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f000 f85e 	bl	800a4b0 <USBD_Get_USB_Status>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3f8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3718      	adds	r7, #24
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a402:	b580      	push	{r7, lr}
 800a404:	b086      	sub	sp, #24
 800a406:	af00      	add	r7, sp, #0
 800a408:	60f8      	str	r0, [r7, #12]
 800a40a:	607a      	str	r2, [r7, #4]
 800a40c:	461a      	mov	r2, r3
 800a40e:	460b      	mov	r3, r1
 800a410:	72fb      	strb	r3, [r7, #11]
 800a412:	4613      	mov	r3, r2
 800a414:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a416:	2300      	movs	r3, #0
 800a418:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a41a:	2300      	movs	r3, #0
 800a41c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a424:	893b      	ldrh	r3, [r7, #8]
 800a426:	7af9      	ldrb	r1, [r7, #11]
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	f7f8 fa61 	bl	80028f0 <HAL_PCD_EP_Receive>
 800a42e:	4603      	mov	r3, r0
 800a430:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a432:	7dfb      	ldrb	r3, [r7, #23]
 800a434:	4618      	mov	r0, r3
 800a436:	f000 f83b 	bl	800a4b0 <USBD_Get_USB_Status>
 800a43a:	4603      	mov	r3, r0
 800a43c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a43e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a440:	4618      	mov	r0, r3
 800a442:	3718      	adds	r7, #24
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	460b      	mov	r3, r1
 800a452:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a45a:	78fa      	ldrb	r2, [r7, #3]
 800a45c:	4611      	mov	r1, r2
 800a45e:	4618      	mov	r0, r3
 800a460:	f7f8 fa77 	bl	8002952 <HAL_PCD_EP_GetRxCount>
 800a464:	4603      	mov	r3, r0
}
 800a466:	4618      	mov	r0, r3
 800a468:	3708      	adds	r7, #8
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
	...

0800a470 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a470:	b480      	push	{r7}
 800a472:	b083      	sub	sp, #12
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a478:	4b02      	ldr	r3, [pc, #8]	@ (800a484 <USBD_static_malloc+0x14>)
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	370c      	adds	r7, #12
 800a47e:	46bd      	mov	sp, r7
 800a480:	bc80      	pop	{r7}
 800a482:	4770      	bx	lr
 800a484:	200013ac 	.word	0x200013ac

0800a488 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]

}
 800a490:	bf00      	nop
 800a492:	370c      	adds	r7, #12
 800a494:	46bd      	mov	sp, r7
 800a496:	bc80      	pop	{r7}
 800a498:	4770      	bx	lr

0800a49a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a49a:	b480      	push	{r7}
 800a49c:	b083      	sub	sp, #12
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a4a6:	bf00      	nop
 800a4a8:	370c      	adds	r7, #12
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bc80      	pop	{r7}
 800a4ae:	4770      	bx	lr

0800a4b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a4be:	79fb      	ldrb	r3, [r7, #7]
 800a4c0:	2b03      	cmp	r3, #3
 800a4c2:	d817      	bhi.n	800a4f4 <USBD_Get_USB_Status+0x44>
 800a4c4:	a201      	add	r2, pc, #4	@ (adr r2, 800a4cc <USBD_Get_USB_Status+0x1c>)
 800a4c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ca:	bf00      	nop
 800a4cc:	0800a4dd 	.word	0x0800a4dd
 800a4d0:	0800a4e3 	.word	0x0800a4e3
 800a4d4:	0800a4e9 	.word	0x0800a4e9
 800a4d8:	0800a4ef 	.word	0x0800a4ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	73fb      	strb	r3, [r7, #15]
    break;
 800a4e0:	e00b      	b.n	800a4fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a4e2:	2302      	movs	r3, #2
 800a4e4:	73fb      	strb	r3, [r7, #15]
    break;
 800a4e6:	e008      	b.n	800a4fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	73fb      	strb	r3, [r7, #15]
    break;
 800a4ec:	e005      	b.n	800a4fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a4ee:	2302      	movs	r3, #2
 800a4f0:	73fb      	strb	r3, [r7, #15]
    break;
 800a4f2:	e002      	b.n	800a4fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a4f4:	2302      	movs	r3, #2
 800a4f6:	73fb      	strb	r3, [r7, #15]
    break;
 800a4f8:	bf00      	nop
  }
  return usb_status;
 800a4fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3714      	adds	r7, #20
 800a500:	46bd      	mov	sp, r7
 800a502:	bc80      	pop	{r7}
 800a504:	4770      	bx	lr
 800a506:	bf00      	nop

0800a508 <main>:
 */

#include "main.h"

int main(void)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	af00      	add	r7, sp, #0

    hwInit();
 800a50c:	f7f6 fd94 	bl	8001038 <hwInit>
    apInit();
 800a510:	f7f5 fe1c 	bl	800014c <apInit>

    apMain();
 800a514:	f7f5 fe28 	bl	8000168 <apMain>

    return 0;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	bd80      	pop	{r7, pc}
	...

0800a520 <std>:
 800a520:	2300      	movs	r3, #0
 800a522:	b510      	push	{r4, lr}
 800a524:	4604      	mov	r4, r0
 800a526:	e9c0 3300 	strd	r3, r3, [r0]
 800a52a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a52e:	6083      	str	r3, [r0, #8]
 800a530:	8181      	strh	r1, [r0, #12]
 800a532:	6643      	str	r3, [r0, #100]	@ 0x64
 800a534:	81c2      	strh	r2, [r0, #14]
 800a536:	6183      	str	r3, [r0, #24]
 800a538:	4619      	mov	r1, r3
 800a53a:	2208      	movs	r2, #8
 800a53c:	305c      	adds	r0, #92	@ 0x5c
 800a53e:	f000 f9f9 	bl	800a934 <memset>
 800a542:	4b0d      	ldr	r3, [pc, #52]	@ (800a578 <std+0x58>)
 800a544:	6224      	str	r4, [r4, #32]
 800a546:	6263      	str	r3, [r4, #36]	@ 0x24
 800a548:	4b0c      	ldr	r3, [pc, #48]	@ (800a57c <std+0x5c>)
 800a54a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a54c:	4b0c      	ldr	r3, [pc, #48]	@ (800a580 <std+0x60>)
 800a54e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a550:	4b0c      	ldr	r3, [pc, #48]	@ (800a584 <std+0x64>)
 800a552:	6323      	str	r3, [r4, #48]	@ 0x30
 800a554:	4b0c      	ldr	r3, [pc, #48]	@ (800a588 <std+0x68>)
 800a556:	429c      	cmp	r4, r3
 800a558:	d006      	beq.n	800a568 <std+0x48>
 800a55a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a55e:	4294      	cmp	r4, r2
 800a560:	d002      	beq.n	800a568 <std+0x48>
 800a562:	33d0      	adds	r3, #208	@ 0xd0
 800a564:	429c      	cmp	r4, r3
 800a566:	d105      	bne.n	800a574 <std+0x54>
 800a568:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a56c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a570:	f000 ba58 	b.w	800aa24 <__retarget_lock_init_recursive>
 800a574:	bd10      	pop	{r4, pc}
 800a576:	bf00      	nop
 800a578:	0800a785 	.word	0x0800a785
 800a57c:	0800a7a7 	.word	0x0800a7a7
 800a580:	0800a7df 	.word	0x0800a7df
 800a584:	0800a803 	.word	0x0800a803
 800a588:	200015cc 	.word	0x200015cc

0800a58c <stdio_exit_handler>:
 800a58c:	4a02      	ldr	r2, [pc, #8]	@ (800a598 <stdio_exit_handler+0xc>)
 800a58e:	4903      	ldr	r1, [pc, #12]	@ (800a59c <stdio_exit_handler+0x10>)
 800a590:	4803      	ldr	r0, [pc, #12]	@ (800a5a0 <stdio_exit_handler+0x14>)
 800a592:	f000 b869 	b.w	800a668 <_fwalk_sglue>
 800a596:	bf00      	nop
 800a598:	20000190 	.word	0x20000190
 800a59c:	0800b2bd 	.word	0x0800b2bd
 800a5a0:	200001a0 	.word	0x200001a0

0800a5a4 <cleanup_stdio>:
 800a5a4:	6841      	ldr	r1, [r0, #4]
 800a5a6:	4b0c      	ldr	r3, [pc, #48]	@ (800a5d8 <cleanup_stdio+0x34>)
 800a5a8:	b510      	push	{r4, lr}
 800a5aa:	4299      	cmp	r1, r3
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	d001      	beq.n	800a5b4 <cleanup_stdio+0x10>
 800a5b0:	f000 fe84 	bl	800b2bc <_fflush_r>
 800a5b4:	68a1      	ldr	r1, [r4, #8]
 800a5b6:	4b09      	ldr	r3, [pc, #36]	@ (800a5dc <cleanup_stdio+0x38>)
 800a5b8:	4299      	cmp	r1, r3
 800a5ba:	d002      	beq.n	800a5c2 <cleanup_stdio+0x1e>
 800a5bc:	4620      	mov	r0, r4
 800a5be:	f000 fe7d 	bl	800b2bc <_fflush_r>
 800a5c2:	68e1      	ldr	r1, [r4, #12]
 800a5c4:	4b06      	ldr	r3, [pc, #24]	@ (800a5e0 <cleanup_stdio+0x3c>)
 800a5c6:	4299      	cmp	r1, r3
 800a5c8:	d004      	beq.n	800a5d4 <cleanup_stdio+0x30>
 800a5ca:	4620      	mov	r0, r4
 800a5cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5d0:	f000 be74 	b.w	800b2bc <_fflush_r>
 800a5d4:	bd10      	pop	{r4, pc}
 800a5d6:	bf00      	nop
 800a5d8:	200015cc 	.word	0x200015cc
 800a5dc:	20001634 	.word	0x20001634
 800a5e0:	2000169c 	.word	0x2000169c

0800a5e4 <global_stdio_init.part.0>:
 800a5e4:	b510      	push	{r4, lr}
 800a5e6:	4b0b      	ldr	r3, [pc, #44]	@ (800a614 <global_stdio_init.part.0+0x30>)
 800a5e8:	4c0b      	ldr	r4, [pc, #44]	@ (800a618 <global_stdio_init.part.0+0x34>)
 800a5ea:	4a0c      	ldr	r2, [pc, #48]	@ (800a61c <global_stdio_init.part.0+0x38>)
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	601a      	str	r2, [r3, #0]
 800a5f0:	2104      	movs	r1, #4
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f7ff ff94 	bl	800a520 <std>
 800a5f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	2109      	movs	r1, #9
 800a600:	f7ff ff8e 	bl	800a520 <std>
 800a604:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a608:	2202      	movs	r2, #2
 800a60a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a60e:	2112      	movs	r1, #18
 800a610:	f7ff bf86 	b.w	800a520 <std>
 800a614:	20001704 	.word	0x20001704
 800a618:	200015cc 	.word	0x200015cc
 800a61c:	0800a58d 	.word	0x0800a58d

0800a620 <__sfp_lock_acquire>:
 800a620:	4801      	ldr	r0, [pc, #4]	@ (800a628 <__sfp_lock_acquire+0x8>)
 800a622:	f000 ba00 	b.w	800aa26 <__retarget_lock_acquire_recursive>
 800a626:	bf00      	nop
 800a628:	2000170d 	.word	0x2000170d

0800a62c <__sfp_lock_release>:
 800a62c:	4801      	ldr	r0, [pc, #4]	@ (800a634 <__sfp_lock_release+0x8>)
 800a62e:	f000 b9fb 	b.w	800aa28 <__retarget_lock_release_recursive>
 800a632:	bf00      	nop
 800a634:	2000170d 	.word	0x2000170d

0800a638 <__sinit>:
 800a638:	b510      	push	{r4, lr}
 800a63a:	4604      	mov	r4, r0
 800a63c:	f7ff fff0 	bl	800a620 <__sfp_lock_acquire>
 800a640:	6a23      	ldr	r3, [r4, #32]
 800a642:	b11b      	cbz	r3, 800a64c <__sinit+0x14>
 800a644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a648:	f7ff bff0 	b.w	800a62c <__sfp_lock_release>
 800a64c:	4b04      	ldr	r3, [pc, #16]	@ (800a660 <__sinit+0x28>)
 800a64e:	6223      	str	r3, [r4, #32]
 800a650:	4b04      	ldr	r3, [pc, #16]	@ (800a664 <__sinit+0x2c>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d1f5      	bne.n	800a644 <__sinit+0xc>
 800a658:	f7ff ffc4 	bl	800a5e4 <global_stdio_init.part.0>
 800a65c:	e7f2      	b.n	800a644 <__sinit+0xc>
 800a65e:	bf00      	nop
 800a660:	0800a5a5 	.word	0x0800a5a5
 800a664:	20001704 	.word	0x20001704

0800a668 <_fwalk_sglue>:
 800a668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a66c:	4607      	mov	r7, r0
 800a66e:	4688      	mov	r8, r1
 800a670:	4614      	mov	r4, r2
 800a672:	2600      	movs	r6, #0
 800a674:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a678:	f1b9 0901 	subs.w	r9, r9, #1
 800a67c:	d505      	bpl.n	800a68a <_fwalk_sglue+0x22>
 800a67e:	6824      	ldr	r4, [r4, #0]
 800a680:	2c00      	cmp	r4, #0
 800a682:	d1f7      	bne.n	800a674 <_fwalk_sglue+0xc>
 800a684:	4630      	mov	r0, r6
 800a686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a68a:	89ab      	ldrh	r3, [r5, #12]
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d907      	bls.n	800a6a0 <_fwalk_sglue+0x38>
 800a690:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a694:	3301      	adds	r3, #1
 800a696:	d003      	beq.n	800a6a0 <_fwalk_sglue+0x38>
 800a698:	4629      	mov	r1, r5
 800a69a:	4638      	mov	r0, r7
 800a69c:	47c0      	blx	r8
 800a69e:	4306      	orrs	r6, r0
 800a6a0:	3568      	adds	r5, #104	@ 0x68
 800a6a2:	e7e9      	b.n	800a678 <_fwalk_sglue+0x10>

0800a6a4 <iprintf>:
 800a6a4:	b40f      	push	{r0, r1, r2, r3}
 800a6a6:	b507      	push	{r0, r1, r2, lr}
 800a6a8:	4906      	ldr	r1, [pc, #24]	@ (800a6c4 <iprintf+0x20>)
 800a6aa:	ab04      	add	r3, sp, #16
 800a6ac:	6808      	ldr	r0, [r1, #0]
 800a6ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6b2:	6881      	ldr	r1, [r0, #8]
 800a6b4:	9301      	str	r3, [sp, #4]
 800a6b6:	f000 fad7 	bl	800ac68 <_vfiprintf_r>
 800a6ba:	b003      	add	sp, #12
 800a6bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6c0:	b004      	add	sp, #16
 800a6c2:	4770      	bx	lr
 800a6c4:	2000019c 	.word	0x2000019c

0800a6c8 <_puts_r>:
 800a6c8:	6a03      	ldr	r3, [r0, #32]
 800a6ca:	b570      	push	{r4, r5, r6, lr}
 800a6cc:	4605      	mov	r5, r0
 800a6ce:	460e      	mov	r6, r1
 800a6d0:	6884      	ldr	r4, [r0, #8]
 800a6d2:	b90b      	cbnz	r3, 800a6d8 <_puts_r+0x10>
 800a6d4:	f7ff ffb0 	bl	800a638 <__sinit>
 800a6d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a6da:	07db      	lsls	r3, r3, #31
 800a6dc:	d405      	bmi.n	800a6ea <_puts_r+0x22>
 800a6de:	89a3      	ldrh	r3, [r4, #12]
 800a6e0:	0598      	lsls	r0, r3, #22
 800a6e2:	d402      	bmi.n	800a6ea <_puts_r+0x22>
 800a6e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6e6:	f000 f99e 	bl	800aa26 <__retarget_lock_acquire_recursive>
 800a6ea:	89a3      	ldrh	r3, [r4, #12]
 800a6ec:	0719      	lsls	r1, r3, #28
 800a6ee:	d502      	bpl.n	800a6f6 <_puts_r+0x2e>
 800a6f0:	6923      	ldr	r3, [r4, #16]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d135      	bne.n	800a762 <_puts_r+0x9a>
 800a6f6:	4621      	mov	r1, r4
 800a6f8:	4628      	mov	r0, r5
 800a6fa:	f000 f8c5 	bl	800a888 <__swsetup_r>
 800a6fe:	b380      	cbz	r0, 800a762 <_puts_r+0x9a>
 800a700:	f04f 35ff 	mov.w	r5, #4294967295
 800a704:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a706:	07da      	lsls	r2, r3, #31
 800a708:	d405      	bmi.n	800a716 <_puts_r+0x4e>
 800a70a:	89a3      	ldrh	r3, [r4, #12]
 800a70c:	059b      	lsls	r3, r3, #22
 800a70e:	d402      	bmi.n	800a716 <_puts_r+0x4e>
 800a710:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a712:	f000 f989 	bl	800aa28 <__retarget_lock_release_recursive>
 800a716:	4628      	mov	r0, r5
 800a718:	bd70      	pop	{r4, r5, r6, pc}
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	da04      	bge.n	800a728 <_puts_r+0x60>
 800a71e:	69a2      	ldr	r2, [r4, #24]
 800a720:	429a      	cmp	r2, r3
 800a722:	dc17      	bgt.n	800a754 <_puts_r+0x8c>
 800a724:	290a      	cmp	r1, #10
 800a726:	d015      	beq.n	800a754 <_puts_r+0x8c>
 800a728:	6823      	ldr	r3, [r4, #0]
 800a72a:	1c5a      	adds	r2, r3, #1
 800a72c:	6022      	str	r2, [r4, #0]
 800a72e:	7019      	strb	r1, [r3, #0]
 800a730:	68a3      	ldr	r3, [r4, #8]
 800a732:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a736:	3b01      	subs	r3, #1
 800a738:	60a3      	str	r3, [r4, #8]
 800a73a:	2900      	cmp	r1, #0
 800a73c:	d1ed      	bne.n	800a71a <_puts_r+0x52>
 800a73e:	2b00      	cmp	r3, #0
 800a740:	da11      	bge.n	800a766 <_puts_r+0x9e>
 800a742:	4622      	mov	r2, r4
 800a744:	210a      	movs	r1, #10
 800a746:	4628      	mov	r0, r5
 800a748:	f000 f85f 	bl	800a80a <__swbuf_r>
 800a74c:	3001      	adds	r0, #1
 800a74e:	d0d7      	beq.n	800a700 <_puts_r+0x38>
 800a750:	250a      	movs	r5, #10
 800a752:	e7d7      	b.n	800a704 <_puts_r+0x3c>
 800a754:	4622      	mov	r2, r4
 800a756:	4628      	mov	r0, r5
 800a758:	f000 f857 	bl	800a80a <__swbuf_r>
 800a75c:	3001      	adds	r0, #1
 800a75e:	d1e7      	bne.n	800a730 <_puts_r+0x68>
 800a760:	e7ce      	b.n	800a700 <_puts_r+0x38>
 800a762:	3e01      	subs	r6, #1
 800a764:	e7e4      	b.n	800a730 <_puts_r+0x68>
 800a766:	6823      	ldr	r3, [r4, #0]
 800a768:	1c5a      	adds	r2, r3, #1
 800a76a:	6022      	str	r2, [r4, #0]
 800a76c:	220a      	movs	r2, #10
 800a76e:	701a      	strb	r2, [r3, #0]
 800a770:	e7ee      	b.n	800a750 <_puts_r+0x88>
	...

0800a774 <puts>:
 800a774:	4b02      	ldr	r3, [pc, #8]	@ (800a780 <puts+0xc>)
 800a776:	4601      	mov	r1, r0
 800a778:	6818      	ldr	r0, [r3, #0]
 800a77a:	f7ff bfa5 	b.w	800a6c8 <_puts_r>
 800a77e:	bf00      	nop
 800a780:	2000019c 	.word	0x2000019c

0800a784 <__sread>:
 800a784:	b510      	push	{r4, lr}
 800a786:	460c      	mov	r4, r1
 800a788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a78c:	f000 f8fc 	bl	800a988 <_read_r>
 800a790:	2800      	cmp	r0, #0
 800a792:	bfab      	itete	ge
 800a794:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a796:	89a3      	ldrhlt	r3, [r4, #12]
 800a798:	181b      	addge	r3, r3, r0
 800a79a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a79e:	bfac      	ite	ge
 800a7a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a7a2:	81a3      	strhlt	r3, [r4, #12]
 800a7a4:	bd10      	pop	{r4, pc}

0800a7a6 <__swrite>:
 800a7a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7aa:	461f      	mov	r7, r3
 800a7ac:	898b      	ldrh	r3, [r1, #12]
 800a7ae:	4605      	mov	r5, r0
 800a7b0:	05db      	lsls	r3, r3, #23
 800a7b2:	460c      	mov	r4, r1
 800a7b4:	4616      	mov	r6, r2
 800a7b6:	d505      	bpl.n	800a7c4 <__swrite+0x1e>
 800a7b8:	2302      	movs	r3, #2
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7c0:	f000 f8d0 	bl	800a964 <_lseek_r>
 800a7c4:	89a3      	ldrh	r3, [r4, #12]
 800a7c6:	4632      	mov	r2, r6
 800a7c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a7cc:	81a3      	strh	r3, [r4, #12]
 800a7ce:	4628      	mov	r0, r5
 800a7d0:	463b      	mov	r3, r7
 800a7d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7da:	f000 b8e7 	b.w	800a9ac <_write_r>

0800a7de <__sseek>:
 800a7de:	b510      	push	{r4, lr}
 800a7e0:	460c      	mov	r4, r1
 800a7e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7e6:	f000 f8bd 	bl	800a964 <_lseek_r>
 800a7ea:	1c43      	adds	r3, r0, #1
 800a7ec:	89a3      	ldrh	r3, [r4, #12]
 800a7ee:	bf15      	itete	ne
 800a7f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a7f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a7f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a7fa:	81a3      	strheq	r3, [r4, #12]
 800a7fc:	bf18      	it	ne
 800a7fe:	81a3      	strhne	r3, [r4, #12]
 800a800:	bd10      	pop	{r4, pc}

0800a802 <__sclose>:
 800a802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a806:	f000 b89d 	b.w	800a944 <_close_r>

0800a80a <__swbuf_r>:
 800a80a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a80c:	460e      	mov	r6, r1
 800a80e:	4614      	mov	r4, r2
 800a810:	4605      	mov	r5, r0
 800a812:	b118      	cbz	r0, 800a81c <__swbuf_r+0x12>
 800a814:	6a03      	ldr	r3, [r0, #32]
 800a816:	b90b      	cbnz	r3, 800a81c <__swbuf_r+0x12>
 800a818:	f7ff ff0e 	bl	800a638 <__sinit>
 800a81c:	69a3      	ldr	r3, [r4, #24]
 800a81e:	60a3      	str	r3, [r4, #8]
 800a820:	89a3      	ldrh	r3, [r4, #12]
 800a822:	071a      	lsls	r2, r3, #28
 800a824:	d501      	bpl.n	800a82a <__swbuf_r+0x20>
 800a826:	6923      	ldr	r3, [r4, #16]
 800a828:	b943      	cbnz	r3, 800a83c <__swbuf_r+0x32>
 800a82a:	4621      	mov	r1, r4
 800a82c:	4628      	mov	r0, r5
 800a82e:	f000 f82b 	bl	800a888 <__swsetup_r>
 800a832:	b118      	cbz	r0, 800a83c <__swbuf_r+0x32>
 800a834:	f04f 37ff 	mov.w	r7, #4294967295
 800a838:	4638      	mov	r0, r7
 800a83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a83c:	6823      	ldr	r3, [r4, #0]
 800a83e:	6922      	ldr	r2, [r4, #16]
 800a840:	b2f6      	uxtb	r6, r6
 800a842:	1a98      	subs	r0, r3, r2
 800a844:	6963      	ldr	r3, [r4, #20]
 800a846:	4637      	mov	r7, r6
 800a848:	4283      	cmp	r3, r0
 800a84a:	dc05      	bgt.n	800a858 <__swbuf_r+0x4e>
 800a84c:	4621      	mov	r1, r4
 800a84e:	4628      	mov	r0, r5
 800a850:	f000 fd34 	bl	800b2bc <_fflush_r>
 800a854:	2800      	cmp	r0, #0
 800a856:	d1ed      	bne.n	800a834 <__swbuf_r+0x2a>
 800a858:	68a3      	ldr	r3, [r4, #8]
 800a85a:	3b01      	subs	r3, #1
 800a85c:	60a3      	str	r3, [r4, #8]
 800a85e:	6823      	ldr	r3, [r4, #0]
 800a860:	1c5a      	adds	r2, r3, #1
 800a862:	6022      	str	r2, [r4, #0]
 800a864:	701e      	strb	r6, [r3, #0]
 800a866:	6962      	ldr	r2, [r4, #20]
 800a868:	1c43      	adds	r3, r0, #1
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d004      	beq.n	800a878 <__swbuf_r+0x6e>
 800a86e:	89a3      	ldrh	r3, [r4, #12]
 800a870:	07db      	lsls	r3, r3, #31
 800a872:	d5e1      	bpl.n	800a838 <__swbuf_r+0x2e>
 800a874:	2e0a      	cmp	r6, #10
 800a876:	d1df      	bne.n	800a838 <__swbuf_r+0x2e>
 800a878:	4621      	mov	r1, r4
 800a87a:	4628      	mov	r0, r5
 800a87c:	f000 fd1e 	bl	800b2bc <_fflush_r>
 800a880:	2800      	cmp	r0, #0
 800a882:	d0d9      	beq.n	800a838 <__swbuf_r+0x2e>
 800a884:	e7d6      	b.n	800a834 <__swbuf_r+0x2a>
	...

0800a888 <__swsetup_r>:
 800a888:	b538      	push	{r3, r4, r5, lr}
 800a88a:	4b29      	ldr	r3, [pc, #164]	@ (800a930 <__swsetup_r+0xa8>)
 800a88c:	4605      	mov	r5, r0
 800a88e:	6818      	ldr	r0, [r3, #0]
 800a890:	460c      	mov	r4, r1
 800a892:	b118      	cbz	r0, 800a89c <__swsetup_r+0x14>
 800a894:	6a03      	ldr	r3, [r0, #32]
 800a896:	b90b      	cbnz	r3, 800a89c <__swsetup_r+0x14>
 800a898:	f7ff fece 	bl	800a638 <__sinit>
 800a89c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8a0:	0719      	lsls	r1, r3, #28
 800a8a2:	d422      	bmi.n	800a8ea <__swsetup_r+0x62>
 800a8a4:	06da      	lsls	r2, r3, #27
 800a8a6:	d407      	bmi.n	800a8b8 <__swsetup_r+0x30>
 800a8a8:	2209      	movs	r2, #9
 800a8aa:	602a      	str	r2, [r5, #0]
 800a8ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b4:	81a3      	strh	r3, [r4, #12]
 800a8b6:	e033      	b.n	800a920 <__swsetup_r+0x98>
 800a8b8:	0758      	lsls	r0, r3, #29
 800a8ba:	d512      	bpl.n	800a8e2 <__swsetup_r+0x5a>
 800a8bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8be:	b141      	cbz	r1, 800a8d2 <__swsetup_r+0x4a>
 800a8c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a8c4:	4299      	cmp	r1, r3
 800a8c6:	d002      	beq.n	800a8ce <__swsetup_r+0x46>
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	f000 f8af 	bl	800aa2c <_free_r>
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a8d2:	89a3      	ldrh	r3, [r4, #12]
 800a8d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a8d8:	81a3      	strh	r3, [r4, #12]
 800a8da:	2300      	movs	r3, #0
 800a8dc:	6063      	str	r3, [r4, #4]
 800a8de:	6923      	ldr	r3, [r4, #16]
 800a8e0:	6023      	str	r3, [r4, #0]
 800a8e2:	89a3      	ldrh	r3, [r4, #12]
 800a8e4:	f043 0308 	orr.w	r3, r3, #8
 800a8e8:	81a3      	strh	r3, [r4, #12]
 800a8ea:	6923      	ldr	r3, [r4, #16]
 800a8ec:	b94b      	cbnz	r3, 800a902 <__swsetup_r+0x7a>
 800a8ee:	89a3      	ldrh	r3, [r4, #12]
 800a8f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a8f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8f8:	d003      	beq.n	800a902 <__swsetup_r+0x7a>
 800a8fa:	4621      	mov	r1, r4
 800a8fc:	4628      	mov	r0, r5
 800a8fe:	f000 fd2a 	bl	800b356 <__smakebuf_r>
 800a902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a906:	f013 0201 	ands.w	r2, r3, #1
 800a90a:	d00a      	beq.n	800a922 <__swsetup_r+0x9a>
 800a90c:	2200      	movs	r2, #0
 800a90e:	60a2      	str	r2, [r4, #8]
 800a910:	6962      	ldr	r2, [r4, #20]
 800a912:	4252      	negs	r2, r2
 800a914:	61a2      	str	r2, [r4, #24]
 800a916:	6922      	ldr	r2, [r4, #16]
 800a918:	b942      	cbnz	r2, 800a92c <__swsetup_r+0xa4>
 800a91a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a91e:	d1c5      	bne.n	800a8ac <__swsetup_r+0x24>
 800a920:	bd38      	pop	{r3, r4, r5, pc}
 800a922:	0799      	lsls	r1, r3, #30
 800a924:	bf58      	it	pl
 800a926:	6962      	ldrpl	r2, [r4, #20]
 800a928:	60a2      	str	r2, [r4, #8]
 800a92a:	e7f4      	b.n	800a916 <__swsetup_r+0x8e>
 800a92c:	2000      	movs	r0, #0
 800a92e:	e7f7      	b.n	800a920 <__swsetup_r+0x98>
 800a930:	2000019c 	.word	0x2000019c

0800a934 <memset>:
 800a934:	4603      	mov	r3, r0
 800a936:	4402      	add	r2, r0
 800a938:	4293      	cmp	r3, r2
 800a93a:	d100      	bne.n	800a93e <memset+0xa>
 800a93c:	4770      	bx	lr
 800a93e:	f803 1b01 	strb.w	r1, [r3], #1
 800a942:	e7f9      	b.n	800a938 <memset+0x4>

0800a944 <_close_r>:
 800a944:	b538      	push	{r3, r4, r5, lr}
 800a946:	2300      	movs	r3, #0
 800a948:	4d05      	ldr	r5, [pc, #20]	@ (800a960 <_close_r+0x1c>)
 800a94a:	4604      	mov	r4, r0
 800a94c:	4608      	mov	r0, r1
 800a94e:	602b      	str	r3, [r5, #0]
 800a950:	f7f5 fe05 	bl	800055e <_close>
 800a954:	1c43      	adds	r3, r0, #1
 800a956:	d102      	bne.n	800a95e <_close_r+0x1a>
 800a958:	682b      	ldr	r3, [r5, #0]
 800a95a:	b103      	cbz	r3, 800a95e <_close_r+0x1a>
 800a95c:	6023      	str	r3, [r4, #0]
 800a95e:	bd38      	pop	{r3, r4, r5, pc}
 800a960:	20001708 	.word	0x20001708

0800a964 <_lseek_r>:
 800a964:	b538      	push	{r3, r4, r5, lr}
 800a966:	4604      	mov	r4, r0
 800a968:	4608      	mov	r0, r1
 800a96a:	4611      	mov	r1, r2
 800a96c:	2200      	movs	r2, #0
 800a96e:	4d05      	ldr	r5, [pc, #20]	@ (800a984 <_lseek_r+0x20>)
 800a970:	602a      	str	r2, [r5, #0]
 800a972:	461a      	mov	r2, r3
 800a974:	f7f5 fe17 	bl	80005a6 <_lseek>
 800a978:	1c43      	adds	r3, r0, #1
 800a97a:	d102      	bne.n	800a982 <_lseek_r+0x1e>
 800a97c:	682b      	ldr	r3, [r5, #0]
 800a97e:	b103      	cbz	r3, 800a982 <_lseek_r+0x1e>
 800a980:	6023      	str	r3, [r4, #0]
 800a982:	bd38      	pop	{r3, r4, r5, pc}
 800a984:	20001708 	.word	0x20001708

0800a988 <_read_r>:
 800a988:	b538      	push	{r3, r4, r5, lr}
 800a98a:	4604      	mov	r4, r0
 800a98c:	4608      	mov	r0, r1
 800a98e:	4611      	mov	r1, r2
 800a990:	2200      	movs	r2, #0
 800a992:	4d05      	ldr	r5, [pc, #20]	@ (800a9a8 <_read_r+0x20>)
 800a994:	602a      	str	r2, [r5, #0]
 800a996:	461a      	mov	r2, r3
 800a998:	f7f5 fda8 	bl	80004ec <_read>
 800a99c:	1c43      	adds	r3, r0, #1
 800a99e:	d102      	bne.n	800a9a6 <_read_r+0x1e>
 800a9a0:	682b      	ldr	r3, [r5, #0]
 800a9a2:	b103      	cbz	r3, 800a9a6 <_read_r+0x1e>
 800a9a4:	6023      	str	r3, [r4, #0]
 800a9a6:	bd38      	pop	{r3, r4, r5, pc}
 800a9a8:	20001708 	.word	0x20001708

0800a9ac <_write_r>:
 800a9ac:	b538      	push	{r3, r4, r5, lr}
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	4608      	mov	r0, r1
 800a9b2:	4611      	mov	r1, r2
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	4d05      	ldr	r5, [pc, #20]	@ (800a9cc <_write_r+0x20>)
 800a9b8:	602a      	str	r2, [r5, #0]
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	f7f5 fdb3 	bl	8000526 <_write>
 800a9c0:	1c43      	adds	r3, r0, #1
 800a9c2:	d102      	bne.n	800a9ca <_write_r+0x1e>
 800a9c4:	682b      	ldr	r3, [r5, #0]
 800a9c6:	b103      	cbz	r3, 800a9ca <_write_r+0x1e>
 800a9c8:	6023      	str	r3, [r4, #0]
 800a9ca:	bd38      	pop	{r3, r4, r5, pc}
 800a9cc:	20001708 	.word	0x20001708

0800a9d0 <__errno>:
 800a9d0:	4b01      	ldr	r3, [pc, #4]	@ (800a9d8 <__errno+0x8>)
 800a9d2:	6818      	ldr	r0, [r3, #0]
 800a9d4:	4770      	bx	lr
 800a9d6:	bf00      	nop
 800a9d8:	2000019c 	.word	0x2000019c

0800a9dc <__libc_init_array>:
 800a9dc:	b570      	push	{r4, r5, r6, lr}
 800a9de:	2600      	movs	r6, #0
 800a9e0:	4d0c      	ldr	r5, [pc, #48]	@ (800aa14 <__libc_init_array+0x38>)
 800a9e2:	4c0d      	ldr	r4, [pc, #52]	@ (800aa18 <__libc_init_array+0x3c>)
 800a9e4:	1b64      	subs	r4, r4, r5
 800a9e6:	10a4      	asrs	r4, r4, #2
 800a9e8:	42a6      	cmp	r6, r4
 800a9ea:	d109      	bne.n	800aa00 <__libc_init_array+0x24>
 800a9ec:	f000 fd30 	bl	800b450 <_init>
 800a9f0:	2600      	movs	r6, #0
 800a9f2:	4d0a      	ldr	r5, [pc, #40]	@ (800aa1c <__libc_init_array+0x40>)
 800a9f4:	4c0a      	ldr	r4, [pc, #40]	@ (800aa20 <__libc_init_array+0x44>)
 800a9f6:	1b64      	subs	r4, r4, r5
 800a9f8:	10a4      	asrs	r4, r4, #2
 800a9fa:	42a6      	cmp	r6, r4
 800a9fc:	d105      	bne.n	800aa0a <__libc_init_array+0x2e>
 800a9fe:	bd70      	pop	{r4, r5, r6, pc}
 800aa00:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa04:	4798      	blx	r3
 800aa06:	3601      	adds	r6, #1
 800aa08:	e7ee      	b.n	800a9e8 <__libc_init_array+0xc>
 800aa0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa0e:	4798      	blx	r3
 800aa10:	3601      	adds	r6, #1
 800aa12:	e7f2      	b.n	800a9fa <__libc_init_array+0x1e>
 800aa14:	0800b558 	.word	0x0800b558
 800aa18:	0800b558 	.word	0x0800b558
 800aa1c:	0800b558 	.word	0x0800b558
 800aa20:	0800b55c 	.word	0x0800b55c

0800aa24 <__retarget_lock_init_recursive>:
 800aa24:	4770      	bx	lr

0800aa26 <__retarget_lock_acquire_recursive>:
 800aa26:	4770      	bx	lr

0800aa28 <__retarget_lock_release_recursive>:
 800aa28:	4770      	bx	lr
	...

0800aa2c <_free_r>:
 800aa2c:	b538      	push	{r3, r4, r5, lr}
 800aa2e:	4605      	mov	r5, r0
 800aa30:	2900      	cmp	r1, #0
 800aa32:	d040      	beq.n	800aab6 <_free_r+0x8a>
 800aa34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa38:	1f0c      	subs	r4, r1, #4
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	bfb8      	it	lt
 800aa3e:	18e4      	addlt	r4, r4, r3
 800aa40:	f000 f8de 	bl	800ac00 <__malloc_lock>
 800aa44:	4a1c      	ldr	r2, [pc, #112]	@ (800aab8 <_free_r+0x8c>)
 800aa46:	6813      	ldr	r3, [r2, #0]
 800aa48:	b933      	cbnz	r3, 800aa58 <_free_r+0x2c>
 800aa4a:	6063      	str	r3, [r4, #4]
 800aa4c:	6014      	str	r4, [r2, #0]
 800aa4e:	4628      	mov	r0, r5
 800aa50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa54:	f000 b8da 	b.w	800ac0c <__malloc_unlock>
 800aa58:	42a3      	cmp	r3, r4
 800aa5a:	d908      	bls.n	800aa6e <_free_r+0x42>
 800aa5c:	6820      	ldr	r0, [r4, #0]
 800aa5e:	1821      	adds	r1, r4, r0
 800aa60:	428b      	cmp	r3, r1
 800aa62:	bf01      	itttt	eq
 800aa64:	6819      	ldreq	r1, [r3, #0]
 800aa66:	685b      	ldreq	r3, [r3, #4]
 800aa68:	1809      	addeq	r1, r1, r0
 800aa6a:	6021      	streq	r1, [r4, #0]
 800aa6c:	e7ed      	b.n	800aa4a <_free_r+0x1e>
 800aa6e:	461a      	mov	r2, r3
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	b10b      	cbz	r3, 800aa78 <_free_r+0x4c>
 800aa74:	42a3      	cmp	r3, r4
 800aa76:	d9fa      	bls.n	800aa6e <_free_r+0x42>
 800aa78:	6811      	ldr	r1, [r2, #0]
 800aa7a:	1850      	adds	r0, r2, r1
 800aa7c:	42a0      	cmp	r0, r4
 800aa7e:	d10b      	bne.n	800aa98 <_free_r+0x6c>
 800aa80:	6820      	ldr	r0, [r4, #0]
 800aa82:	4401      	add	r1, r0
 800aa84:	1850      	adds	r0, r2, r1
 800aa86:	4283      	cmp	r3, r0
 800aa88:	6011      	str	r1, [r2, #0]
 800aa8a:	d1e0      	bne.n	800aa4e <_free_r+0x22>
 800aa8c:	6818      	ldr	r0, [r3, #0]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	4408      	add	r0, r1
 800aa92:	6010      	str	r0, [r2, #0]
 800aa94:	6053      	str	r3, [r2, #4]
 800aa96:	e7da      	b.n	800aa4e <_free_r+0x22>
 800aa98:	d902      	bls.n	800aaa0 <_free_r+0x74>
 800aa9a:	230c      	movs	r3, #12
 800aa9c:	602b      	str	r3, [r5, #0]
 800aa9e:	e7d6      	b.n	800aa4e <_free_r+0x22>
 800aaa0:	6820      	ldr	r0, [r4, #0]
 800aaa2:	1821      	adds	r1, r4, r0
 800aaa4:	428b      	cmp	r3, r1
 800aaa6:	bf01      	itttt	eq
 800aaa8:	6819      	ldreq	r1, [r3, #0]
 800aaaa:	685b      	ldreq	r3, [r3, #4]
 800aaac:	1809      	addeq	r1, r1, r0
 800aaae:	6021      	streq	r1, [r4, #0]
 800aab0:	6063      	str	r3, [r4, #4]
 800aab2:	6054      	str	r4, [r2, #4]
 800aab4:	e7cb      	b.n	800aa4e <_free_r+0x22>
 800aab6:	bd38      	pop	{r3, r4, r5, pc}
 800aab8:	20001714 	.word	0x20001714

0800aabc <sbrk_aligned>:
 800aabc:	b570      	push	{r4, r5, r6, lr}
 800aabe:	4e0f      	ldr	r6, [pc, #60]	@ (800aafc <sbrk_aligned+0x40>)
 800aac0:	460c      	mov	r4, r1
 800aac2:	6831      	ldr	r1, [r6, #0]
 800aac4:	4605      	mov	r5, r0
 800aac6:	b911      	cbnz	r1, 800aace <sbrk_aligned+0x12>
 800aac8:	f000 fca4 	bl	800b414 <_sbrk_r>
 800aacc:	6030      	str	r0, [r6, #0]
 800aace:	4621      	mov	r1, r4
 800aad0:	4628      	mov	r0, r5
 800aad2:	f000 fc9f 	bl	800b414 <_sbrk_r>
 800aad6:	1c43      	adds	r3, r0, #1
 800aad8:	d103      	bne.n	800aae2 <sbrk_aligned+0x26>
 800aada:	f04f 34ff 	mov.w	r4, #4294967295
 800aade:	4620      	mov	r0, r4
 800aae0:	bd70      	pop	{r4, r5, r6, pc}
 800aae2:	1cc4      	adds	r4, r0, #3
 800aae4:	f024 0403 	bic.w	r4, r4, #3
 800aae8:	42a0      	cmp	r0, r4
 800aaea:	d0f8      	beq.n	800aade <sbrk_aligned+0x22>
 800aaec:	1a21      	subs	r1, r4, r0
 800aaee:	4628      	mov	r0, r5
 800aaf0:	f000 fc90 	bl	800b414 <_sbrk_r>
 800aaf4:	3001      	adds	r0, #1
 800aaf6:	d1f2      	bne.n	800aade <sbrk_aligned+0x22>
 800aaf8:	e7ef      	b.n	800aada <sbrk_aligned+0x1e>
 800aafa:	bf00      	nop
 800aafc:	20001710 	.word	0x20001710

0800ab00 <_malloc_r>:
 800ab00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab04:	1ccd      	adds	r5, r1, #3
 800ab06:	f025 0503 	bic.w	r5, r5, #3
 800ab0a:	3508      	adds	r5, #8
 800ab0c:	2d0c      	cmp	r5, #12
 800ab0e:	bf38      	it	cc
 800ab10:	250c      	movcc	r5, #12
 800ab12:	2d00      	cmp	r5, #0
 800ab14:	4606      	mov	r6, r0
 800ab16:	db01      	blt.n	800ab1c <_malloc_r+0x1c>
 800ab18:	42a9      	cmp	r1, r5
 800ab1a:	d904      	bls.n	800ab26 <_malloc_r+0x26>
 800ab1c:	230c      	movs	r3, #12
 800ab1e:	6033      	str	r3, [r6, #0]
 800ab20:	2000      	movs	r0, #0
 800ab22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800abfc <_malloc_r+0xfc>
 800ab2a:	f000 f869 	bl	800ac00 <__malloc_lock>
 800ab2e:	f8d8 3000 	ldr.w	r3, [r8]
 800ab32:	461c      	mov	r4, r3
 800ab34:	bb44      	cbnz	r4, 800ab88 <_malloc_r+0x88>
 800ab36:	4629      	mov	r1, r5
 800ab38:	4630      	mov	r0, r6
 800ab3a:	f7ff ffbf 	bl	800aabc <sbrk_aligned>
 800ab3e:	1c43      	adds	r3, r0, #1
 800ab40:	4604      	mov	r4, r0
 800ab42:	d158      	bne.n	800abf6 <_malloc_r+0xf6>
 800ab44:	f8d8 4000 	ldr.w	r4, [r8]
 800ab48:	4627      	mov	r7, r4
 800ab4a:	2f00      	cmp	r7, #0
 800ab4c:	d143      	bne.n	800abd6 <_malloc_r+0xd6>
 800ab4e:	2c00      	cmp	r4, #0
 800ab50:	d04b      	beq.n	800abea <_malloc_r+0xea>
 800ab52:	6823      	ldr	r3, [r4, #0]
 800ab54:	4639      	mov	r1, r7
 800ab56:	4630      	mov	r0, r6
 800ab58:	eb04 0903 	add.w	r9, r4, r3
 800ab5c:	f000 fc5a 	bl	800b414 <_sbrk_r>
 800ab60:	4581      	cmp	r9, r0
 800ab62:	d142      	bne.n	800abea <_malloc_r+0xea>
 800ab64:	6821      	ldr	r1, [r4, #0]
 800ab66:	4630      	mov	r0, r6
 800ab68:	1a6d      	subs	r5, r5, r1
 800ab6a:	4629      	mov	r1, r5
 800ab6c:	f7ff ffa6 	bl	800aabc <sbrk_aligned>
 800ab70:	3001      	adds	r0, #1
 800ab72:	d03a      	beq.n	800abea <_malloc_r+0xea>
 800ab74:	6823      	ldr	r3, [r4, #0]
 800ab76:	442b      	add	r3, r5
 800ab78:	6023      	str	r3, [r4, #0]
 800ab7a:	f8d8 3000 	ldr.w	r3, [r8]
 800ab7e:	685a      	ldr	r2, [r3, #4]
 800ab80:	bb62      	cbnz	r2, 800abdc <_malloc_r+0xdc>
 800ab82:	f8c8 7000 	str.w	r7, [r8]
 800ab86:	e00f      	b.n	800aba8 <_malloc_r+0xa8>
 800ab88:	6822      	ldr	r2, [r4, #0]
 800ab8a:	1b52      	subs	r2, r2, r5
 800ab8c:	d420      	bmi.n	800abd0 <_malloc_r+0xd0>
 800ab8e:	2a0b      	cmp	r2, #11
 800ab90:	d917      	bls.n	800abc2 <_malloc_r+0xc2>
 800ab92:	1961      	adds	r1, r4, r5
 800ab94:	42a3      	cmp	r3, r4
 800ab96:	6025      	str	r5, [r4, #0]
 800ab98:	bf18      	it	ne
 800ab9a:	6059      	strne	r1, [r3, #4]
 800ab9c:	6863      	ldr	r3, [r4, #4]
 800ab9e:	bf08      	it	eq
 800aba0:	f8c8 1000 	streq.w	r1, [r8]
 800aba4:	5162      	str	r2, [r4, r5]
 800aba6:	604b      	str	r3, [r1, #4]
 800aba8:	4630      	mov	r0, r6
 800abaa:	f000 f82f 	bl	800ac0c <__malloc_unlock>
 800abae:	f104 000b 	add.w	r0, r4, #11
 800abb2:	1d23      	adds	r3, r4, #4
 800abb4:	f020 0007 	bic.w	r0, r0, #7
 800abb8:	1ac2      	subs	r2, r0, r3
 800abba:	bf1c      	itt	ne
 800abbc:	1a1b      	subne	r3, r3, r0
 800abbe:	50a3      	strne	r3, [r4, r2]
 800abc0:	e7af      	b.n	800ab22 <_malloc_r+0x22>
 800abc2:	6862      	ldr	r2, [r4, #4]
 800abc4:	42a3      	cmp	r3, r4
 800abc6:	bf0c      	ite	eq
 800abc8:	f8c8 2000 	streq.w	r2, [r8]
 800abcc:	605a      	strne	r2, [r3, #4]
 800abce:	e7eb      	b.n	800aba8 <_malloc_r+0xa8>
 800abd0:	4623      	mov	r3, r4
 800abd2:	6864      	ldr	r4, [r4, #4]
 800abd4:	e7ae      	b.n	800ab34 <_malloc_r+0x34>
 800abd6:	463c      	mov	r4, r7
 800abd8:	687f      	ldr	r7, [r7, #4]
 800abda:	e7b6      	b.n	800ab4a <_malloc_r+0x4a>
 800abdc:	461a      	mov	r2, r3
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	42a3      	cmp	r3, r4
 800abe2:	d1fb      	bne.n	800abdc <_malloc_r+0xdc>
 800abe4:	2300      	movs	r3, #0
 800abe6:	6053      	str	r3, [r2, #4]
 800abe8:	e7de      	b.n	800aba8 <_malloc_r+0xa8>
 800abea:	230c      	movs	r3, #12
 800abec:	4630      	mov	r0, r6
 800abee:	6033      	str	r3, [r6, #0]
 800abf0:	f000 f80c 	bl	800ac0c <__malloc_unlock>
 800abf4:	e794      	b.n	800ab20 <_malloc_r+0x20>
 800abf6:	6005      	str	r5, [r0, #0]
 800abf8:	e7d6      	b.n	800aba8 <_malloc_r+0xa8>
 800abfa:	bf00      	nop
 800abfc:	20001714 	.word	0x20001714

0800ac00 <__malloc_lock>:
 800ac00:	4801      	ldr	r0, [pc, #4]	@ (800ac08 <__malloc_lock+0x8>)
 800ac02:	f7ff bf10 	b.w	800aa26 <__retarget_lock_acquire_recursive>
 800ac06:	bf00      	nop
 800ac08:	2000170c 	.word	0x2000170c

0800ac0c <__malloc_unlock>:
 800ac0c:	4801      	ldr	r0, [pc, #4]	@ (800ac14 <__malloc_unlock+0x8>)
 800ac0e:	f7ff bf0b 	b.w	800aa28 <__retarget_lock_release_recursive>
 800ac12:	bf00      	nop
 800ac14:	2000170c 	.word	0x2000170c

0800ac18 <__sfputc_r>:
 800ac18:	6893      	ldr	r3, [r2, #8]
 800ac1a:	b410      	push	{r4}
 800ac1c:	3b01      	subs	r3, #1
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	6093      	str	r3, [r2, #8]
 800ac22:	da07      	bge.n	800ac34 <__sfputc_r+0x1c>
 800ac24:	6994      	ldr	r4, [r2, #24]
 800ac26:	42a3      	cmp	r3, r4
 800ac28:	db01      	blt.n	800ac2e <__sfputc_r+0x16>
 800ac2a:	290a      	cmp	r1, #10
 800ac2c:	d102      	bne.n	800ac34 <__sfputc_r+0x1c>
 800ac2e:	bc10      	pop	{r4}
 800ac30:	f7ff bdeb 	b.w	800a80a <__swbuf_r>
 800ac34:	6813      	ldr	r3, [r2, #0]
 800ac36:	1c58      	adds	r0, r3, #1
 800ac38:	6010      	str	r0, [r2, #0]
 800ac3a:	7019      	strb	r1, [r3, #0]
 800ac3c:	4608      	mov	r0, r1
 800ac3e:	bc10      	pop	{r4}
 800ac40:	4770      	bx	lr

0800ac42 <__sfputs_r>:
 800ac42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac44:	4606      	mov	r6, r0
 800ac46:	460f      	mov	r7, r1
 800ac48:	4614      	mov	r4, r2
 800ac4a:	18d5      	adds	r5, r2, r3
 800ac4c:	42ac      	cmp	r4, r5
 800ac4e:	d101      	bne.n	800ac54 <__sfputs_r+0x12>
 800ac50:	2000      	movs	r0, #0
 800ac52:	e007      	b.n	800ac64 <__sfputs_r+0x22>
 800ac54:	463a      	mov	r2, r7
 800ac56:	4630      	mov	r0, r6
 800ac58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac5c:	f7ff ffdc 	bl	800ac18 <__sfputc_r>
 800ac60:	1c43      	adds	r3, r0, #1
 800ac62:	d1f3      	bne.n	800ac4c <__sfputs_r+0xa>
 800ac64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac68 <_vfiprintf_r>:
 800ac68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac6c:	460d      	mov	r5, r1
 800ac6e:	4614      	mov	r4, r2
 800ac70:	4698      	mov	r8, r3
 800ac72:	4606      	mov	r6, r0
 800ac74:	b09d      	sub	sp, #116	@ 0x74
 800ac76:	b118      	cbz	r0, 800ac80 <_vfiprintf_r+0x18>
 800ac78:	6a03      	ldr	r3, [r0, #32]
 800ac7a:	b90b      	cbnz	r3, 800ac80 <_vfiprintf_r+0x18>
 800ac7c:	f7ff fcdc 	bl	800a638 <__sinit>
 800ac80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac82:	07d9      	lsls	r1, r3, #31
 800ac84:	d405      	bmi.n	800ac92 <_vfiprintf_r+0x2a>
 800ac86:	89ab      	ldrh	r3, [r5, #12]
 800ac88:	059a      	lsls	r2, r3, #22
 800ac8a:	d402      	bmi.n	800ac92 <_vfiprintf_r+0x2a>
 800ac8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac8e:	f7ff feca 	bl	800aa26 <__retarget_lock_acquire_recursive>
 800ac92:	89ab      	ldrh	r3, [r5, #12]
 800ac94:	071b      	lsls	r3, r3, #28
 800ac96:	d501      	bpl.n	800ac9c <_vfiprintf_r+0x34>
 800ac98:	692b      	ldr	r3, [r5, #16]
 800ac9a:	b99b      	cbnz	r3, 800acc4 <_vfiprintf_r+0x5c>
 800ac9c:	4629      	mov	r1, r5
 800ac9e:	4630      	mov	r0, r6
 800aca0:	f7ff fdf2 	bl	800a888 <__swsetup_r>
 800aca4:	b170      	cbz	r0, 800acc4 <_vfiprintf_r+0x5c>
 800aca6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aca8:	07dc      	lsls	r4, r3, #31
 800acaa:	d504      	bpl.n	800acb6 <_vfiprintf_r+0x4e>
 800acac:	f04f 30ff 	mov.w	r0, #4294967295
 800acb0:	b01d      	add	sp, #116	@ 0x74
 800acb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acb6:	89ab      	ldrh	r3, [r5, #12]
 800acb8:	0598      	lsls	r0, r3, #22
 800acba:	d4f7      	bmi.n	800acac <_vfiprintf_r+0x44>
 800acbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800acbe:	f7ff feb3 	bl	800aa28 <__retarget_lock_release_recursive>
 800acc2:	e7f3      	b.n	800acac <_vfiprintf_r+0x44>
 800acc4:	2300      	movs	r3, #0
 800acc6:	9309      	str	r3, [sp, #36]	@ 0x24
 800acc8:	2320      	movs	r3, #32
 800acca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800acce:	2330      	movs	r3, #48	@ 0x30
 800acd0:	f04f 0901 	mov.w	r9, #1
 800acd4:	f8cd 800c 	str.w	r8, [sp, #12]
 800acd8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800ae84 <_vfiprintf_r+0x21c>
 800acdc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ace0:	4623      	mov	r3, r4
 800ace2:	469a      	mov	sl, r3
 800ace4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ace8:	b10a      	cbz	r2, 800acee <_vfiprintf_r+0x86>
 800acea:	2a25      	cmp	r2, #37	@ 0x25
 800acec:	d1f9      	bne.n	800ace2 <_vfiprintf_r+0x7a>
 800acee:	ebba 0b04 	subs.w	fp, sl, r4
 800acf2:	d00b      	beq.n	800ad0c <_vfiprintf_r+0xa4>
 800acf4:	465b      	mov	r3, fp
 800acf6:	4622      	mov	r2, r4
 800acf8:	4629      	mov	r1, r5
 800acfa:	4630      	mov	r0, r6
 800acfc:	f7ff ffa1 	bl	800ac42 <__sfputs_r>
 800ad00:	3001      	adds	r0, #1
 800ad02:	f000 80a7 	beq.w	800ae54 <_vfiprintf_r+0x1ec>
 800ad06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad08:	445a      	add	r2, fp
 800ad0a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad0c:	f89a 3000 	ldrb.w	r3, [sl]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	f000 809f 	beq.w	800ae54 <_vfiprintf_r+0x1ec>
 800ad16:	2300      	movs	r3, #0
 800ad18:	f04f 32ff 	mov.w	r2, #4294967295
 800ad1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad20:	f10a 0a01 	add.w	sl, sl, #1
 800ad24:	9304      	str	r3, [sp, #16]
 800ad26:	9307      	str	r3, [sp, #28]
 800ad28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ad2c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad2e:	4654      	mov	r4, sl
 800ad30:	2205      	movs	r2, #5
 800ad32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad36:	4853      	ldr	r0, [pc, #332]	@ (800ae84 <_vfiprintf_r+0x21c>)
 800ad38:	f000 fb7c 	bl	800b434 <memchr>
 800ad3c:	9a04      	ldr	r2, [sp, #16]
 800ad3e:	b9d8      	cbnz	r0, 800ad78 <_vfiprintf_r+0x110>
 800ad40:	06d1      	lsls	r1, r2, #27
 800ad42:	bf44      	itt	mi
 800ad44:	2320      	movmi	r3, #32
 800ad46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad4a:	0713      	lsls	r3, r2, #28
 800ad4c:	bf44      	itt	mi
 800ad4e:	232b      	movmi	r3, #43	@ 0x2b
 800ad50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad54:	f89a 3000 	ldrb.w	r3, [sl]
 800ad58:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad5a:	d015      	beq.n	800ad88 <_vfiprintf_r+0x120>
 800ad5c:	4654      	mov	r4, sl
 800ad5e:	2000      	movs	r0, #0
 800ad60:	f04f 0c0a 	mov.w	ip, #10
 800ad64:	9a07      	ldr	r2, [sp, #28]
 800ad66:	4621      	mov	r1, r4
 800ad68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad6c:	3b30      	subs	r3, #48	@ 0x30
 800ad6e:	2b09      	cmp	r3, #9
 800ad70:	d94b      	bls.n	800ae0a <_vfiprintf_r+0x1a2>
 800ad72:	b1b0      	cbz	r0, 800ada2 <_vfiprintf_r+0x13a>
 800ad74:	9207      	str	r2, [sp, #28]
 800ad76:	e014      	b.n	800ada2 <_vfiprintf_r+0x13a>
 800ad78:	eba0 0308 	sub.w	r3, r0, r8
 800ad7c:	fa09 f303 	lsl.w	r3, r9, r3
 800ad80:	4313      	orrs	r3, r2
 800ad82:	46a2      	mov	sl, r4
 800ad84:	9304      	str	r3, [sp, #16]
 800ad86:	e7d2      	b.n	800ad2e <_vfiprintf_r+0xc6>
 800ad88:	9b03      	ldr	r3, [sp, #12]
 800ad8a:	1d19      	adds	r1, r3, #4
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	9103      	str	r1, [sp, #12]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	bfbb      	ittet	lt
 800ad94:	425b      	neglt	r3, r3
 800ad96:	f042 0202 	orrlt.w	r2, r2, #2
 800ad9a:	9307      	strge	r3, [sp, #28]
 800ad9c:	9307      	strlt	r3, [sp, #28]
 800ad9e:	bfb8      	it	lt
 800ada0:	9204      	strlt	r2, [sp, #16]
 800ada2:	7823      	ldrb	r3, [r4, #0]
 800ada4:	2b2e      	cmp	r3, #46	@ 0x2e
 800ada6:	d10a      	bne.n	800adbe <_vfiprintf_r+0x156>
 800ada8:	7863      	ldrb	r3, [r4, #1]
 800adaa:	2b2a      	cmp	r3, #42	@ 0x2a
 800adac:	d132      	bne.n	800ae14 <_vfiprintf_r+0x1ac>
 800adae:	9b03      	ldr	r3, [sp, #12]
 800adb0:	3402      	adds	r4, #2
 800adb2:	1d1a      	adds	r2, r3, #4
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	9203      	str	r2, [sp, #12]
 800adb8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800adbc:	9305      	str	r3, [sp, #20]
 800adbe:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800ae88 <_vfiprintf_r+0x220>
 800adc2:	2203      	movs	r2, #3
 800adc4:	4650      	mov	r0, sl
 800adc6:	7821      	ldrb	r1, [r4, #0]
 800adc8:	f000 fb34 	bl	800b434 <memchr>
 800adcc:	b138      	cbz	r0, 800adde <_vfiprintf_r+0x176>
 800adce:	2240      	movs	r2, #64	@ 0x40
 800add0:	9b04      	ldr	r3, [sp, #16]
 800add2:	eba0 000a 	sub.w	r0, r0, sl
 800add6:	4082      	lsls	r2, r0
 800add8:	4313      	orrs	r3, r2
 800adda:	3401      	adds	r4, #1
 800addc:	9304      	str	r3, [sp, #16]
 800adde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ade2:	2206      	movs	r2, #6
 800ade4:	4829      	ldr	r0, [pc, #164]	@ (800ae8c <_vfiprintf_r+0x224>)
 800ade6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800adea:	f000 fb23 	bl	800b434 <memchr>
 800adee:	2800      	cmp	r0, #0
 800adf0:	d03f      	beq.n	800ae72 <_vfiprintf_r+0x20a>
 800adf2:	4b27      	ldr	r3, [pc, #156]	@ (800ae90 <_vfiprintf_r+0x228>)
 800adf4:	bb1b      	cbnz	r3, 800ae3e <_vfiprintf_r+0x1d6>
 800adf6:	9b03      	ldr	r3, [sp, #12]
 800adf8:	3307      	adds	r3, #7
 800adfa:	f023 0307 	bic.w	r3, r3, #7
 800adfe:	3308      	adds	r3, #8
 800ae00:	9303      	str	r3, [sp, #12]
 800ae02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae04:	443b      	add	r3, r7
 800ae06:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae08:	e76a      	b.n	800ace0 <_vfiprintf_r+0x78>
 800ae0a:	460c      	mov	r4, r1
 800ae0c:	2001      	movs	r0, #1
 800ae0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae12:	e7a8      	b.n	800ad66 <_vfiprintf_r+0xfe>
 800ae14:	2300      	movs	r3, #0
 800ae16:	f04f 0c0a 	mov.w	ip, #10
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	3401      	adds	r4, #1
 800ae1e:	9305      	str	r3, [sp, #20]
 800ae20:	4620      	mov	r0, r4
 800ae22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae26:	3a30      	subs	r2, #48	@ 0x30
 800ae28:	2a09      	cmp	r2, #9
 800ae2a:	d903      	bls.n	800ae34 <_vfiprintf_r+0x1cc>
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d0c6      	beq.n	800adbe <_vfiprintf_r+0x156>
 800ae30:	9105      	str	r1, [sp, #20]
 800ae32:	e7c4      	b.n	800adbe <_vfiprintf_r+0x156>
 800ae34:	4604      	mov	r4, r0
 800ae36:	2301      	movs	r3, #1
 800ae38:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae3c:	e7f0      	b.n	800ae20 <_vfiprintf_r+0x1b8>
 800ae3e:	ab03      	add	r3, sp, #12
 800ae40:	9300      	str	r3, [sp, #0]
 800ae42:	462a      	mov	r2, r5
 800ae44:	4630      	mov	r0, r6
 800ae46:	4b13      	ldr	r3, [pc, #76]	@ (800ae94 <_vfiprintf_r+0x22c>)
 800ae48:	a904      	add	r1, sp, #16
 800ae4a:	f3af 8000 	nop.w
 800ae4e:	4607      	mov	r7, r0
 800ae50:	1c78      	adds	r0, r7, #1
 800ae52:	d1d6      	bne.n	800ae02 <_vfiprintf_r+0x19a>
 800ae54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae56:	07d9      	lsls	r1, r3, #31
 800ae58:	d405      	bmi.n	800ae66 <_vfiprintf_r+0x1fe>
 800ae5a:	89ab      	ldrh	r3, [r5, #12]
 800ae5c:	059a      	lsls	r2, r3, #22
 800ae5e:	d402      	bmi.n	800ae66 <_vfiprintf_r+0x1fe>
 800ae60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae62:	f7ff fde1 	bl	800aa28 <__retarget_lock_release_recursive>
 800ae66:	89ab      	ldrh	r3, [r5, #12]
 800ae68:	065b      	lsls	r3, r3, #25
 800ae6a:	f53f af1f 	bmi.w	800acac <_vfiprintf_r+0x44>
 800ae6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae70:	e71e      	b.n	800acb0 <_vfiprintf_r+0x48>
 800ae72:	ab03      	add	r3, sp, #12
 800ae74:	9300      	str	r3, [sp, #0]
 800ae76:	462a      	mov	r2, r5
 800ae78:	4630      	mov	r0, r6
 800ae7a:	4b06      	ldr	r3, [pc, #24]	@ (800ae94 <_vfiprintf_r+0x22c>)
 800ae7c:	a904      	add	r1, sp, #16
 800ae7e:	f000 f87d 	bl	800af7c <_printf_i>
 800ae82:	e7e4      	b.n	800ae4e <_vfiprintf_r+0x1e6>
 800ae84:	0800b522 	.word	0x0800b522
 800ae88:	0800b528 	.word	0x0800b528
 800ae8c:	0800b52c 	.word	0x0800b52c
 800ae90:	00000000 	.word	0x00000000
 800ae94:	0800ac43 	.word	0x0800ac43

0800ae98 <_printf_common>:
 800ae98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae9c:	4616      	mov	r6, r2
 800ae9e:	4698      	mov	r8, r3
 800aea0:	688a      	ldr	r2, [r1, #8]
 800aea2:	690b      	ldr	r3, [r1, #16]
 800aea4:	4607      	mov	r7, r0
 800aea6:	4293      	cmp	r3, r2
 800aea8:	bfb8      	it	lt
 800aeaa:	4613      	movlt	r3, r2
 800aeac:	6033      	str	r3, [r6, #0]
 800aeae:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aeb2:	460c      	mov	r4, r1
 800aeb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aeb8:	b10a      	cbz	r2, 800aebe <_printf_common+0x26>
 800aeba:	3301      	adds	r3, #1
 800aebc:	6033      	str	r3, [r6, #0]
 800aebe:	6823      	ldr	r3, [r4, #0]
 800aec0:	0699      	lsls	r1, r3, #26
 800aec2:	bf42      	ittt	mi
 800aec4:	6833      	ldrmi	r3, [r6, #0]
 800aec6:	3302      	addmi	r3, #2
 800aec8:	6033      	strmi	r3, [r6, #0]
 800aeca:	6825      	ldr	r5, [r4, #0]
 800aecc:	f015 0506 	ands.w	r5, r5, #6
 800aed0:	d106      	bne.n	800aee0 <_printf_common+0x48>
 800aed2:	f104 0a19 	add.w	sl, r4, #25
 800aed6:	68e3      	ldr	r3, [r4, #12]
 800aed8:	6832      	ldr	r2, [r6, #0]
 800aeda:	1a9b      	subs	r3, r3, r2
 800aedc:	42ab      	cmp	r3, r5
 800aede:	dc2b      	bgt.n	800af38 <_printf_common+0xa0>
 800aee0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aee4:	6822      	ldr	r2, [r4, #0]
 800aee6:	3b00      	subs	r3, #0
 800aee8:	bf18      	it	ne
 800aeea:	2301      	movne	r3, #1
 800aeec:	0692      	lsls	r2, r2, #26
 800aeee:	d430      	bmi.n	800af52 <_printf_common+0xba>
 800aef0:	4641      	mov	r1, r8
 800aef2:	4638      	mov	r0, r7
 800aef4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aef8:	47c8      	blx	r9
 800aefa:	3001      	adds	r0, #1
 800aefc:	d023      	beq.n	800af46 <_printf_common+0xae>
 800aefe:	6823      	ldr	r3, [r4, #0]
 800af00:	6922      	ldr	r2, [r4, #16]
 800af02:	f003 0306 	and.w	r3, r3, #6
 800af06:	2b04      	cmp	r3, #4
 800af08:	bf14      	ite	ne
 800af0a:	2500      	movne	r5, #0
 800af0c:	6833      	ldreq	r3, [r6, #0]
 800af0e:	f04f 0600 	mov.w	r6, #0
 800af12:	bf08      	it	eq
 800af14:	68e5      	ldreq	r5, [r4, #12]
 800af16:	f104 041a 	add.w	r4, r4, #26
 800af1a:	bf08      	it	eq
 800af1c:	1aed      	subeq	r5, r5, r3
 800af1e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800af22:	bf08      	it	eq
 800af24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af28:	4293      	cmp	r3, r2
 800af2a:	bfc4      	itt	gt
 800af2c:	1a9b      	subgt	r3, r3, r2
 800af2e:	18ed      	addgt	r5, r5, r3
 800af30:	42b5      	cmp	r5, r6
 800af32:	d11a      	bne.n	800af6a <_printf_common+0xd2>
 800af34:	2000      	movs	r0, #0
 800af36:	e008      	b.n	800af4a <_printf_common+0xb2>
 800af38:	2301      	movs	r3, #1
 800af3a:	4652      	mov	r2, sl
 800af3c:	4641      	mov	r1, r8
 800af3e:	4638      	mov	r0, r7
 800af40:	47c8      	blx	r9
 800af42:	3001      	adds	r0, #1
 800af44:	d103      	bne.n	800af4e <_printf_common+0xb6>
 800af46:	f04f 30ff 	mov.w	r0, #4294967295
 800af4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af4e:	3501      	adds	r5, #1
 800af50:	e7c1      	b.n	800aed6 <_printf_common+0x3e>
 800af52:	2030      	movs	r0, #48	@ 0x30
 800af54:	18e1      	adds	r1, r4, r3
 800af56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800af5a:	1c5a      	adds	r2, r3, #1
 800af5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800af60:	4422      	add	r2, r4
 800af62:	3302      	adds	r3, #2
 800af64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800af68:	e7c2      	b.n	800aef0 <_printf_common+0x58>
 800af6a:	2301      	movs	r3, #1
 800af6c:	4622      	mov	r2, r4
 800af6e:	4641      	mov	r1, r8
 800af70:	4638      	mov	r0, r7
 800af72:	47c8      	blx	r9
 800af74:	3001      	adds	r0, #1
 800af76:	d0e6      	beq.n	800af46 <_printf_common+0xae>
 800af78:	3601      	adds	r6, #1
 800af7a:	e7d9      	b.n	800af30 <_printf_common+0x98>

0800af7c <_printf_i>:
 800af7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af80:	7e0f      	ldrb	r7, [r1, #24]
 800af82:	4691      	mov	r9, r2
 800af84:	2f78      	cmp	r7, #120	@ 0x78
 800af86:	4680      	mov	r8, r0
 800af88:	460c      	mov	r4, r1
 800af8a:	469a      	mov	sl, r3
 800af8c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800af8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800af92:	d807      	bhi.n	800afa4 <_printf_i+0x28>
 800af94:	2f62      	cmp	r7, #98	@ 0x62
 800af96:	d80a      	bhi.n	800afae <_printf_i+0x32>
 800af98:	2f00      	cmp	r7, #0
 800af9a:	f000 80d3 	beq.w	800b144 <_printf_i+0x1c8>
 800af9e:	2f58      	cmp	r7, #88	@ 0x58
 800afa0:	f000 80ba 	beq.w	800b118 <_printf_i+0x19c>
 800afa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800afa8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800afac:	e03a      	b.n	800b024 <_printf_i+0xa8>
 800afae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800afb2:	2b15      	cmp	r3, #21
 800afb4:	d8f6      	bhi.n	800afa4 <_printf_i+0x28>
 800afb6:	a101      	add	r1, pc, #4	@ (adr r1, 800afbc <_printf_i+0x40>)
 800afb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800afbc:	0800b015 	.word	0x0800b015
 800afc0:	0800b029 	.word	0x0800b029
 800afc4:	0800afa5 	.word	0x0800afa5
 800afc8:	0800afa5 	.word	0x0800afa5
 800afcc:	0800afa5 	.word	0x0800afa5
 800afd0:	0800afa5 	.word	0x0800afa5
 800afd4:	0800b029 	.word	0x0800b029
 800afd8:	0800afa5 	.word	0x0800afa5
 800afdc:	0800afa5 	.word	0x0800afa5
 800afe0:	0800afa5 	.word	0x0800afa5
 800afe4:	0800afa5 	.word	0x0800afa5
 800afe8:	0800b12b 	.word	0x0800b12b
 800afec:	0800b053 	.word	0x0800b053
 800aff0:	0800b0e5 	.word	0x0800b0e5
 800aff4:	0800afa5 	.word	0x0800afa5
 800aff8:	0800afa5 	.word	0x0800afa5
 800affc:	0800b14d 	.word	0x0800b14d
 800b000:	0800afa5 	.word	0x0800afa5
 800b004:	0800b053 	.word	0x0800b053
 800b008:	0800afa5 	.word	0x0800afa5
 800b00c:	0800afa5 	.word	0x0800afa5
 800b010:	0800b0ed 	.word	0x0800b0ed
 800b014:	6833      	ldr	r3, [r6, #0]
 800b016:	1d1a      	adds	r2, r3, #4
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	6032      	str	r2, [r6, #0]
 800b01c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b020:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b024:	2301      	movs	r3, #1
 800b026:	e09e      	b.n	800b166 <_printf_i+0x1ea>
 800b028:	6833      	ldr	r3, [r6, #0]
 800b02a:	6820      	ldr	r0, [r4, #0]
 800b02c:	1d19      	adds	r1, r3, #4
 800b02e:	6031      	str	r1, [r6, #0]
 800b030:	0606      	lsls	r6, r0, #24
 800b032:	d501      	bpl.n	800b038 <_printf_i+0xbc>
 800b034:	681d      	ldr	r5, [r3, #0]
 800b036:	e003      	b.n	800b040 <_printf_i+0xc4>
 800b038:	0645      	lsls	r5, r0, #25
 800b03a:	d5fb      	bpl.n	800b034 <_printf_i+0xb8>
 800b03c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b040:	2d00      	cmp	r5, #0
 800b042:	da03      	bge.n	800b04c <_printf_i+0xd0>
 800b044:	232d      	movs	r3, #45	@ 0x2d
 800b046:	426d      	negs	r5, r5
 800b048:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b04c:	230a      	movs	r3, #10
 800b04e:	4859      	ldr	r0, [pc, #356]	@ (800b1b4 <_printf_i+0x238>)
 800b050:	e011      	b.n	800b076 <_printf_i+0xfa>
 800b052:	6821      	ldr	r1, [r4, #0]
 800b054:	6833      	ldr	r3, [r6, #0]
 800b056:	0608      	lsls	r0, r1, #24
 800b058:	f853 5b04 	ldr.w	r5, [r3], #4
 800b05c:	d402      	bmi.n	800b064 <_printf_i+0xe8>
 800b05e:	0649      	lsls	r1, r1, #25
 800b060:	bf48      	it	mi
 800b062:	b2ad      	uxthmi	r5, r5
 800b064:	2f6f      	cmp	r7, #111	@ 0x6f
 800b066:	6033      	str	r3, [r6, #0]
 800b068:	bf14      	ite	ne
 800b06a:	230a      	movne	r3, #10
 800b06c:	2308      	moveq	r3, #8
 800b06e:	4851      	ldr	r0, [pc, #324]	@ (800b1b4 <_printf_i+0x238>)
 800b070:	2100      	movs	r1, #0
 800b072:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b076:	6866      	ldr	r6, [r4, #4]
 800b078:	2e00      	cmp	r6, #0
 800b07a:	bfa8      	it	ge
 800b07c:	6821      	ldrge	r1, [r4, #0]
 800b07e:	60a6      	str	r6, [r4, #8]
 800b080:	bfa4      	itt	ge
 800b082:	f021 0104 	bicge.w	r1, r1, #4
 800b086:	6021      	strge	r1, [r4, #0]
 800b088:	b90d      	cbnz	r5, 800b08e <_printf_i+0x112>
 800b08a:	2e00      	cmp	r6, #0
 800b08c:	d04b      	beq.n	800b126 <_printf_i+0x1aa>
 800b08e:	4616      	mov	r6, r2
 800b090:	fbb5 f1f3 	udiv	r1, r5, r3
 800b094:	fb03 5711 	mls	r7, r3, r1, r5
 800b098:	5dc7      	ldrb	r7, [r0, r7]
 800b09a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b09e:	462f      	mov	r7, r5
 800b0a0:	42bb      	cmp	r3, r7
 800b0a2:	460d      	mov	r5, r1
 800b0a4:	d9f4      	bls.n	800b090 <_printf_i+0x114>
 800b0a6:	2b08      	cmp	r3, #8
 800b0a8:	d10b      	bne.n	800b0c2 <_printf_i+0x146>
 800b0aa:	6823      	ldr	r3, [r4, #0]
 800b0ac:	07df      	lsls	r7, r3, #31
 800b0ae:	d508      	bpl.n	800b0c2 <_printf_i+0x146>
 800b0b0:	6923      	ldr	r3, [r4, #16]
 800b0b2:	6861      	ldr	r1, [r4, #4]
 800b0b4:	4299      	cmp	r1, r3
 800b0b6:	bfde      	ittt	le
 800b0b8:	2330      	movle	r3, #48	@ 0x30
 800b0ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b0be:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b0c2:	1b92      	subs	r2, r2, r6
 800b0c4:	6122      	str	r2, [r4, #16]
 800b0c6:	464b      	mov	r3, r9
 800b0c8:	4621      	mov	r1, r4
 800b0ca:	4640      	mov	r0, r8
 800b0cc:	f8cd a000 	str.w	sl, [sp]
 800b0d0:	aa03      	add	r2, sp, #12
 800b0d2:	f7ff fee1 	bl	800ae98 <_printf_common>
 800b0d6:	3001      	adds	r0, #1
 800b0d8:	d14a      	bne.n	800b170 <_printf_i+0x1f4>
 800b0da:	f04f 30ff 	mov.w	r0, #4294967295
 800b0de:	b004      	add	sp, #16
 800b0e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0e4:	6823      	ldr	r3, [r4, #0]
 800b0e6:	f043 0320 	orr.w	r3, r3, #32
 800b0ea:	6023      	str	r3, [r4, #0]
 800b0ec:	2778      	movs	r7, #120	@ 0x78
 800b0ee:	4832      	ldr	r0, [pc, #200]	@ (800b1b8 <_printf_i+0x23c>)
 800b0f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b0f4:	6823      	ldr	r3, [r4, #0]
 800b0f6:	6831      	ldr	r1, [r6, #0]
 800b0f8:	061f      	lsls	r7, r3, #24
 800b0fa:	f851 5b04 	ldr.w	r5, [r1], #4
 800b0fe:	d402      	bmi.n	800b106 <_printf_i+0x18a>
 800b100:	065f      	lsls	r7, r3, #25
 800b102:	bf48      	it	mi
 800b104:	b2ad      	uxthmi	r5, r5
 800b106:	6031      	str	r1, [r6, #0]
 800b108:	07d9      	lsls	r1, r3, #31
 800b10a:	bf44      	itt	mi
 800b10c:	f043 0320 	orrmi.w	r3, r3, #32
 800b110:	6023      	strmi	r3, [r4, #0]
 800b112:	b11d      	cbz	r5, 800b11c <_printf_i+0x1a0>
 800b114:	2310      	movs	r3, #16
 800b116:	e7ab      	b.n	800b070 <_printf_i+0xf4>
 800b118:	4826      	ldr	r0, [pc, #152]	@ (800b1b4 <_printf_i+0x238>)
 800b11a:	e7e9      	b.n	800b0f0 <_printf_i+0x174>
 800b11c:	6823      	ldr	r3, [r4, #0]
 800b11e:	f023 0320 	bic.w	r3, r3, #32
 800b122:	6023      	str	r3, [r4, #0]
 800b124:	e7f6      	b.n	800b114 <_printf_i+0x198>
 800b126:	4616      	mov	r6, r2
 800b128:	e7bd      	b.n	800b0a6 <_printf_i+0x12a>
 800b12a:	6833      	ldr	r3, [r6, #0]
 800b12c:	6825      	ldr	r5, [r4, #0]
 800b12e:	1d18      	adds	r0, r3, #4
 800b130:	6961      	ldr	r1, [r4, #20]
 800b132:	6030      	str	r0, [r6, #0]
 800b134:	062e      	lsls	r6, r5, #24
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	d501      	bpl.n	800b13e <_printf_i+0x1c2>
 800b13a:	6019      	str	r1, [r3, #0]
 800b13c:	e002      	b.n	800b144 <_printf_i+0x1c8>
 800b13e:	0668      	lsls	r0, r5, #25
 800b140:	d5fb      	bpl.n	800b13a <_printf_i+0x1be>
 800b142:	8019      	strh	r1, [r3, #0]
 800b144:	2300      	movs	r3, #0
 800b146:	4616      	mov	r6, r2
 800b148:	6123      	str	r3, [r4, #16]
 800b14a:	e7bc      	b.n	800b0c6 <_printf_i+0x14a>
 800b14c:	6833      	ldr	r3, [r6, #0]
 800b14e:	2100      	movs	r1, #0
 800b150:	1d1a      	adds	r2, r3, #4
 800b152:	6032      	str	r2, [r6, #0]
 800b154:	681e      	ldr	r6, [r3, #0]
 800b156:	6862      	ldr	r2, [r4, #4]
 800b158:	4630      	mov	r0, r6
 800b15a:	f000 f96b 	bl	800b434 <memchr>
 800b15e:	b108      	cbz	r0, 800b164 <_printf_i+0x1e8>
 800b160:	1b80      	subs	r0, r0, r6
 800b162:	6060      	str	r0, [r4, #4]
 800b164:	6863      	ldr	r3, [r4, #4]
 800b166:	6123      	str	r3, [r4, #16]
 800b168:	2300      	movs	r3, #0
 800b16a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b16e:	e7aa      	b.n	800b0c6 <_printf_i+0x14a>
 800b170:	4632      	mov	r2, r6
 800b172:	4649      	mov	r1, r9
 800b174:	4640      	mov	r0, r8
 800b176:	6923      	ldr	r3, [r4, #16]
 800b178:	47d0      	blx	sl
 800b17a:	3001      	adds	r0, #1
 800b17c:	d0ad      	beq.n	800b0da <_printf_i+0x15e>
 800b17e:	6823      	ldr	r3, [r4, #0]
 800b180:	079b      	lsls	r3, r3, #30
 800b182:	d413      	bmi.n	800b1ac <_printf_i+0x230>
 800b184:	68e0      	ldr	r0, [r4, #12]
 800b186:	9b03      	ldr	r3, [sp, #12]
 800b188:	4298      	cmp	r0, r3
 800b18a:	bfb8      	it	lt
 800b18c:	4618      	movlt	r0, r3
 800b18e:	e7a6      	b.n	800b0de <_printf_i+0x162>
 800b190:	2301      	movs	r3, #1
 800b192:	4632      	mov	r2, r6
 800b194:	4649      	mov	r1, r9
 800b196:	4640      	mov	r0, r8
 800b198:	47d0      	blx	sl
 800b19a:	3001      	adds	r0, #1
 800b19c:	d09d      	beq.n	800b0da <_printf_i+0x15e>
 800b19e:	3501      	adds	r5, #1
 800b1a0:	68e3      	ldr	r3, [r4, #12]
 800b1a2:	9903      	ldr	r1, [sp, #12]
 800b1a4:	1a5b      	subs	r3, r3, r1
 800b1a6:	42ab      	cmp	r3, r5
 800b1a8:	dcf2      	bgt.n	800b190 <_printf_i+0x214>
 800b1aa:	e7eb      	b.n	800b184 <_printf_i+0x208>
 800b1ac:	2500      	movs	r5, #0
 800b1ae:	f104 0619 	add.w	r6, r4, #25
 800b1b2:	e7f5      	b.n	800b1a0 <_printf_i+0x224>
 800b1b4:	0800b533 	.word	0x0800b533
 800b1b8:	0800b544 	.word	0x0800b544

0800b1bc <__sflush_r>:
 800b1bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1c2:	0716      	lsls	r6, r2, #28
 800b1c4:	4605      	mov	r5, r0
 800b1c6:	460c      	mov	r4, r1
 800b1c8:	d454      	bmi.n	800b274 <__sflush_r+0xb8>
 800b1ca:	684b      	ldr	r3, [r1, #4]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	dc02      	bgt.n	800b1d6 <__sflush_r+0x1a>
 800b1d0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	dd48      	ble.n	800b268 <__sflush_r+0xac>
 800b1d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b1d8:	2e00      	cmp	r6, #0
 800b1da:	d045      	beq.n	800b268 <__sflush_r+0xac>
 800b1dc:	2300      	movs	r3, #0
 800b1de:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b1e2:	682f      	ldr	r7, [r5, #0]
 800b1e4:	6a21      	ldr	r1, [r4, #32]
 800b1e6:	602b      	str	r3, [r5, #0]
 800b1e8:	d030      	beq.n	800b24c <__sflush_r+0x90>
 800b1ea:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b1ec:	89a3      	ldrh	r3, [r4, #12]
 800b1ee:	0759      	lsls	r1, r3, #29
 800b1f0:	d505      	bpl.n	800b1fe <__sflush_r+0x42>
 800b1f2:	6863      	ldr	r3, [r4, #4]
 800b1f4:	1ad2      	subs	r2, r2, r3
 800b1f6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b1f8:	b10b      	cbz	r3, 800b1fe <__sflush_r+0x42>
 800b1fa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b1fc:	1ad2      	subs	r2, r2, r3
 800b1fe:	2300      	movs	r3, #0
 800b200:	4628      	mov	r0, r5
 800b202:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b204:	6a21      	ldr	r1, [r4, #32]
 800b206:	47b0      	blx	r6
 800b208:	1c43      	adds	r3, r0, #1
 800b20a:	89a3      	ldrh	r3, [r4, #12]
 800b20c:	d106      	bne.n	800b21c <__sflush_r+0x60>
 800b20e:	6829      	ldr	r1, [r5, #0]
 800b210:	291d      	cmp	r1, #29
 800b212:	d82b      	bhi.n	800b26c <__sflush_r+0xb0>
 800b214:	4a28      	ldr	r2, [pc, #160]	@ (800b2b8 <__sflush_r+0xfc>)
 800b216:	410a      	asrs	r2, r1
 800b218:	07d6      	lsls	r6, r2, #31
 800b21a:	d427      	bmi.n	800b26c <__sflush_r+0xb0>
 800b21c:	2200      	movs	r2, #0
 800b21e:	6062      	str	r2, [r4, #4]
 800b220:	6922      	ldr	r2, [r4, #16]
 800b222:	04d9      	lsls	r1, r3, #19
 800b224:	6022      	str	r2, [r4, #0]
 800b226:	d504      	bpl.n	800b232 <__sflush_r+0x76>
 800b228:	1c42      	adds	r2, r0, #1
 800b22a:	d101      	bne.n	800b230 <__sflush_r+0x74>
 800b22c:	682b      	ldr	r3, [r5, #0]
 800b22e:	b903      	cbnz	r3, 800b232 <__sflush_r+0x76>
 800b230:	6560      	str	r0, [r4, #84]	@ 0x54
 800b232:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b234:	602f      	str	r7, [r5, #0]
 800b236:	b1b9      	cbz	r1, 800b268 <__sflush_r+0xac>
 800b238:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b23c:	4299      	cmp	r1, r3
 800b23e:	d002      	beq.n	800b246 <__sflush_r+0x8a>
 800b240:	4628      	mov	r0, r5
 800b242:	f7ff fbf3 	bl	800aa2c <_free_r>
 800b246:	2300      	movs	r3, #0
 800b248:	6363      	str	r3, [r4, #52]	@ 0x34
 800b24a:	e00d      	b.n	800b268 <__sflush_r+0xac>
 800b24c:	2301      	movs	r3, #1
 800b24e:	4628      	mov	r0, r5
 800b250:	47b0      	blx	r6
 800b252:	4602      	mov	r2, r0
 800b254:	1c50      	adds	r0, r2, #1
 800b256:	d1c9      	bne.n	800b1ec <__sflush_r+0x30>
 800b258:	682b      	ldr	r3, [r5, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d0c6      	beq.n	800b1ec <__sflush_r+0x30>
 800b25e:	2b1d      	cmp	r3, #29
 800b260:	d001      	beq.n	800b266 <__sflush_r+0xaa>
 800b262:	2b16      	cmp	r3, #22
 800b264:	d11d      	bne.n	800b2a2 <__sflush_r+0xe6>
 800b266:	602f      	str	r7, [r5, #0]
 800b268:	2000      	movs	r0, #0
 800b26a:	e021      	b.n	800b2b0 <__sflush_r+0xf4>
 800b26c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b270:	b21b      	sxth	r3, r3
 800b272:	e01a      	b.n	800b2aa <__sflush_r+0xee>
 800b274:	690f      	ldr	r7, [r1, #16]
 800b276:	2f00      	cmp	r7, #0
 800b278:	d0f6      	beq.n	800b268 <__sflush_r+0xac>
 800b27a:	0793      	lsls	r3, r2, #30
 800b27c:	bf18      	it	ne
 800b27e:	2300      	movne	r3, #0
 800b280:	680e      	ldr	r6, [r1, #0]
 800b282:	bf08      	it	eq
 800b284:	694b      	ldreq	r3, [r1, #20]
 800b286:	1bf6      	subs	r6, r6, r7
 800b288:	600f      	str	r7, [r1, #0]
 800b28a:	608b      	str	r3, [r1, #8]
 800b28c:	2e00      	cmp	r6, #0
 800b28e:	ddeb      	ble.n	800b268 <__sflush_r+0xac>
 800b290:	4633      	mov	r3, r6
 800b292:	463a      	mov	r2, r7
 800b294:	4628      	mov	r0, r5
 800b296:	6a21      	ldr	r1, [r4, #32]
 800b298:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b29c:	47e0      	blx	ip
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	dc07      	bgt.n	800b2b2 <__sflush_r+0xf6>
 800b2a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ae:	81a3      	strh	r3, [r4, #12]
 800b2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2b2:	4407      	add	r7, r0
 800b2b4:	1a36      	subs	r6, r6, r0
 800b2b6:	e7e9      	b.n	800b28c <__sflush_r+0xd0>
 800b2b8:	dfbffffe 	.word	0xdfbffffe

0800b2bc <_fflush_r>:
 800b2bc:	b538      	push	{r3, r4, r5, lr}
 800b2be:	690b      	ldr	r3, [r1, #16]
 800b2c0:	4605      	mov	r5, r0
 800b2c2:	460c      	mov	r4, r1
 800b2c4:	b913      	cbnz	r3, 800b2cc <_fflush_r+0x10>
 800b2c6:	2500      	movs	r5, #0
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	bd38      	pop	{r3, r4, r5, pc}
 800b2cc:	b118      	cbz	r0, 800b2d6 <_fflush_r+0x1a>
 800b2ce:	6a03      	ldr	r3, [r0, #32]
 800b2d0:	b90b      	cbnz	r3, 800b2d6 <_fflush_r+0x1a>
 800b2d2:	f7ff f9b1 	bl	800a638 <__sinit>
 800b2d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d0f3      	beq.n	800b2c6 <_fflush_r+0xa>
 800b2de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b2e0:	07d0      	lsls	r0, r2, #31
 800b2e2:	d404      	bmi.n	800b2ee <_fflush_r+0x32>
 800b2e4:	0599      	lsls	r1, r3, #22
 800b2e6:	d402      	bmi.n	800b2ee <_fflush_r+0x32>
 800b2e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2ea:	f7ff fb9c 	bl	800aa26 <__retarget_lock_acquire_recursive>
 800b2ee:	4628      	mov	r0, r5
 800b2f0:	4621      	mov	r1, r4
 800b2f2:	f7ff ff63 	bl	800b1bc <__sflush_r>
 800b2f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b2f8:	4605      	mov	r5, r0
 800b2fa:	07da      	lsls	r2, r3, #31
 800b2fc:	d4e4      	bmi.n	800b2c8 <_fflush_r+0xc>
 800b2fe:	89a3      	ldrh	r3, [r4, #12]
 800b300:	059b      	lsls	r3, r3, #22
 800b302:	d4e1      	bmi.n	800b2c8 <_fflush_r+0xc>
 800b304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b306:	f7ff fb8f 	bl	800aa28 <__retarget_lock_release_recursive>
 800b30a:	e7dd      	b.n	800b2c8 <_fflush_r+0xc>

0800b30c <__swhatbuf_r>:
 800b30c:	b570      	push	{r4, r5, r6, lr}
 800b30e:	460c      	mov	r4, r1
 800b310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b314:	4615      	mov	r5, r2
 800b316:	2900      	cmp	r1, #0
 800b318:	461e      	mov	r6, r3
 800b31a:	b096      	sub	sp, #88	@ 0x58
 800b31c:	da0c      	bge.n	800b338 <__swhatbuf_r+0x2c>
 800b31e:	89a3      	ldrh	r3, [r4, #12]
 800b320:	2100      	movs	r1, #0
 800b322:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b326:	bf14      	ite	ne
 800b328:	2340      	movne	r3, #64	@ 0x40
 800b32a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b32e:	2000      	movs	r0, #0
 800b330:	6031      	str	r1, [r6, #0]
 800b332:	602b      	str	r3, [r5, #0]
 800b334:	b016      	add	sp, #88	@ 0x58
 800b336:	bd70      	pop	{r4, r5, r6, pc}
 800b338:	466a      	mov	r2, sp
 800b33a:	f000 f849 	bl	800b3d0 <_fstat_r>
 800b33e:	2800      	cmp	r0, #0
 800b340:	dbed      	blt.n	800b31e <__swhatbuf_r+0x12>
 800b342:	9901      	ldr	r1, [sp, #4]
 800b344:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b348:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b34c:	4259      	negs	r1, r3
 800b34e:	4159      	adcs	r1, r3
 800b350:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b354:	e7eb      	b.n	800b32e <__swhatbuf_r+0x22>

0800b356 <__smakebuf_r>:
 800b356:	898b      	ldrh	r3, [r1, #12]
 800b358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b35a:	079d      	lsls	r5, r3, #30
 800b35c:	4606      	mov	r6, r0
 800b35e:	460c      	mov	r4, r1
 800b360:	d507      	bpl.n	800b372 <__smakebuf_r+0x1c>
 800b362:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b366:	6023      	str	r3, [r4, #0]
 800b368:	6123      	str	r3, [r4, #16]
 800b36a:	2301      	movs	r3, #1
 800b36c:	6163      	str	r3, [r4, #20]
 800b36e:	b003      	add	sp, #12
 800b370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b372:	466a      	mov	r2, sp
 800b374:	ab01      	add	r3, sp, #4
 800b376:	f7ff ffc9 	bl	800b30c <__swhatbuf_r>
 800b37a:	9f00      	ldr	r7, [sp, #0]
 800b37c:	4605      	mov	r5, r0
 800b37e:	4639      	mov	r1, r7
 800b380:	4630      	mov	r0, r6
 800b382:	f7ff fbbd 	bl	800ab00 <_malloc_r>
 800b386:	b948      	cbnz	r0, 800b39c <__smakebuf_r+0x46>
 800b388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b38c:	059a      	lsls	r2, r3, #22
 800b38e:	d4ee      	bmi.n	800b36e <__smakebuf_r+0x18>
 800b390:	f023 0303 	bic.w	r3, r3, #3
 800b394:	f043 0302 	orr.w	r3, r3, #2
 800b398:	81a3      	strh	r3, [r4, #12]
 800b39a:	e7e2      	b.n	800b362 <__smakebuf_r+0xc>
 800b39c:	89a3      	ldrh	r3, [r4, #12]
 800b39e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b3a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3a6:	81a3      	strh	r3, [r4, #12]
 800b3a8:	9b01      	ldr	r3, [sp, #4]
 800b3aa:	6020      	str	r0, [r4, #0]
 800b3ac:	b15b      	cbz	r3, 800b3c6 <__smakebuf_r+0x70>
 800b3ae:	4630      	mov	r0, r6
 800b3b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3b4:	f000 f81e 	bl	800b3f4 <_isatty_r>
 800b3b8:	b128      	cbz	r0, 800b3c6 <__smakebuf_r+0x70>
 800b3ba:	89a3      	ldrh	r3, [r4, #12]
 800b3bc:	f023 0303 	bic.w	r3, r3, #3
 800b3c0:	f043 0301 	orr.w	r3, r3, #1
 800b3c4:	81a3      	strh	r3, [r4, #12]
 800b3c6:	89a3      	ldrh	r3, [r4, #12]
 800b3c8:	431d      	orrs	r5, r3
 800b3ca:	81a5      	strh	r5, [r4, #12]
 800b3cc:	e7cf      	b.n	800b36e <__smakebuf_r+0x18>
	...

0800b3d0 <_fstat_r>:
 800b3d0:	b538      	push	{r3, r4, r5, lr}
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	4d06      	ldr	r5, [pc, #24]	@ (800b3f0 <_fstat_r+0x20>)
 800b3d6:	4604      	mov	r4, r0
 800b3d8:	4608      	mov	r0, r1
 800b3da:	4611      	mov	r1, r2
 800b3dc:	602b      	str	r3, [r5, #0]
 800b3de:	f7f5 f8c9 	bl	8000574 <_fstat>
 800b3e2:	1c43      	adds	r3, r0, #1
 800b3e4:	d102      	bne.n	800b3ec <_fstat_r+0x1c>
 800b3e6:	682b      	ldr	r3, [r5, #0]
 800b3e8:	b103      	cbz	r3, 800b3ec <_fstat_r+0x1c>
 800b3ea:	6023      	str	r3, [r4, #0]
 800b3ec:	bd38      	pop	{r3, r4, r5, pc}
 800b3ee:	bf00      	nop
 800b3f0:	20001708 	.word	0x20001708

0800b3f4 <_isatty_r>:
 800b3f4:	b538      	push	{r3, r4, r5, lr}
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	4d05      	ldr	r5, [pc, #20]	@ (800b410 <_isatty_r+0x1c>)
 800b3fa:	4604      	mov	r4, r0
 800b3fc:	4608      	mov	r0, r1
 800b3fe:	602b      	str	r3, [r5, #0]
 800b400:	f7f5 f8c7 	bl	8000592 <_isatty>
 800b404:	1c43      	adds	r3, r0, #1
 800b406:	d102      	bne.n	800b40e <_isatty_r+0x1a>
 800b408:	682b      	ldr	r3, [r5, #0]
 800b40a:	b103      	cbz	r3, 800b40e <_isatty_r+0x1a>
 800b40c:	6023      	str	r3, [r4, #0]
 800b40e:	bd38      	pop	{r3, r4, r5, pc}
 800b410:	20001708 	.word	0x20001708

0800b414 <_sbrk_r>:
 800b414:	b538      	push	{r3, r4, r5, lr}
 800b416:	2300      	movs	r3, #0
 800b418:	4d05      	ldr	r5, [pc, #20]	@ (800b430 <_sbrk_r+0x1c>)
 800b41a:	4604      	mov	r4, r0
 800b41c:	4608      	mov	r0, r1
 800b41e:	602b      	str	r3, [r5, #0]
 800b420:	f7f5 f8ce 	bl	80005c0 <_sbrk>
 800b424:	1c43      	adds	r3, r0, #1
 800b426:	d102      	bne.n	800b42e <_sbrk_r+0x1a>
 800b428:	682b      	ldr	r3, [r5, #0]
 800b42a:	b103      	cbz	r3, 800b42e <_sbrk_r+0x1a>
 800b42c:	6023      	str	r3, [r4, #0]
 800b42e:	bd38      	pop	{r3, r4, r5, pc}
 800b430:	20001708 	.word	0x20001708

0800b434 <memchr>:
 800b434:	4603      	mov	r3, r0
 800b436:	b510      	push	{r4, lr}
 800b438:	b2c9      	uxtb	r1, r1
 800b43a:	4402      	add	r2, r0
 800b43c:	4293      	cmp	r3, r2
 800b43e:	4618      	mov	r0, r3
 800b440:	d101      	bne.n	800b446 <memchr+0x12>
 800b442:	2000      	movs	r0, #0
 800b444:	e003      	b.n	800b44e <memchr+0x1a>
 800b446:	7804      	ldrb	r4, [r0, #0]
 800b448:	3301      	adds	r3, #1
 800b44a:	428c      	cmp	r4, r1
 800b44c:	d1f6      	bne.n	800b43c <memchr+0x8>
 800b44e:	bd10      	pop	{r4, pc}

0800b450 <_init>:
 800b450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b452:	bf00      	nop
 800b454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b456:	bc08      	pop	{r3}
 800b458:	469e      	mov	lr, r3
 800b45a:	4770      	bx	lr

0800b45c <_fini>:
 800b45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b45e:	bf00      	nop
 800b460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b462:	bc08      	pop	{r3}
 800b464:	469e      	mov	lr, r3
 800b466:	4770      	bx	lr
