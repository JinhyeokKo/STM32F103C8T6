
baram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08005000  08005000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009800  08005110  08005110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  0800e910  0800e910  0000a910  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef28  0800ef28  0000b35c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ef28  0800ef28  0000af28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef30  0800ef30  0000b35c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef30  0800ef30  0000af30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ef34  0800ef34  0000af34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000035c  20000000  0800ef38  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031f8  2000035c  0800f294  0000b35c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003554  0800f294  0000b554  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b35c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ff3a  00000000  00000000  0000b385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006a99  00000000  00000000  0002b2bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000b95b  00000000  00000000  00031d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001680  00000000  00000000  0003d6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000188f  00000000  00000000  0003ed38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002027a  00000000  00000000  000405c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c836  00000000  00000000  00060841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009452e  00000000  00000000  0008d077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001215a5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c04  00000000  00000000  001215e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000042  00000000  00000000  001261ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08005110 <__do_global_dtors_aux>:
 8005110:	b510      	push	{r4, lr}
 8005112:	4c05      	ldr	r4, [pc, #20]	@ (8005128 <__do_global_dtors_aux+0x18>)
 8005114:	7823      	ldrb	r3, [r4, #0]
 8005116:	b933      	cbnz	r3, 8005126 <__do_global_dtors_aux+0x16>
 8005118:	4b04      	ldr	r3, [pc, #16]	@ (800512c <__do_global_dtors_aux+0x1c>)
 800511a:	b113      	cbz	r3, 8005122 <__do_global_dtors_aux+0x12>
 800511c:	4804      	ldr	r0, [pc, #16]	@ (8005130 <__do_global_dtors_aux+0x20>)
 800511e:	f3af 8000 	nop.w
 8005122:	2301      	movs	r3, #1
 8005124:	7023      	strb	r3, [r4, #0]
 8005126:	bd10      	pop	{r4, pc}
 8005128:	2000035c 	.word	0x2000035c
 800512c:	00000000 	.word	0x00000000
 8005130:	0800e8f8 	.word	0x0800e8f8

08005134 <frame_dummy>:
 8005134:	b508      	push	{r3, lr}
 8005136:	4b03      	ldr	r3, [pc, #12]	@ (8005144 <frame_dummy+0x10>)
 8005138:	b11b      	cbz	r3, 8005142 <frame_dummy+0xe>
 800513a:	4903      	ldr	r1, [pc, #12]	@ (8005148 <frame_dummy+0x14>)
 800513c:	4803      	ldr	r0, [pc, #12]	@ (800514c <frame_dummy+0x18>)
 800513e:	f3af 8000 	nop.w
 8005142:	bd08      	pop	{r3, pc}
 8005144:	00000000 	.word	0x00000000
 8005148:	20000360 	.word	0x20000360
 800514c:	0800e8f8 	.word	0x0800e8f8

08005150 <strcmp>:
 8005150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005158:	2a01      	cmp	r2, #1
 800515a:	bf28      	it	cs
 800515c:	429a      	cmpcs	r2, r3
 800515e:	d0f7      	beq.n	8005150 <strcmp>
 8005160:	1ad0      	subs	r0, r2, r3
 8005162:	4770      	bx	lr

08005164 <strlen>:
 8005164:	4603      	mov	r3, r0
 8005166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800516a:	2a00      	cmp	r2, #0
 800516c:	d1fb      	bne.n	8005166 <strlen+0x2>
 800516e:	1a18      	subs	r0, r3, r0
 8005170:	3801      	subs	r0, #1
 8005172:	4770      	bx	lr

08005174 <__aeabi_drsub>:
 8005174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8005178:	e002      	b.n	8005180 <__adddf3>
 800517a:	bf00      	nop

0800517c <__aeabi_dsub>:
 800517c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08005180 <__adddf3>:
 8005180:	b530      	push	{r4, r5, lr}
 8005182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800518a:	ea94 0f05 	teq	r4, r5
 800518e:	bf08      	it	eq
 8005190:	ea90 0f02 	teqeq	r0, r2
 8005194:	bf1f      	itttt	ne
 8005196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800519a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800519e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80051a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80051a6:	f000 80e2 	beq.w	800536e <__adddf3+0x1ee>
 80051aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80051ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80051b2:	bfb8      	it	lt
 80051b4:	426d      	neglt	r5, r5
 80051b6:	dd0c      	ble.n	80051d2 <__adddf3+0x52>
 80051b8:	442c      	add	r4, r5
 80051ba:	ea80 0202 	eor.w	r2, r0, r2
 80051be:	ea81 0303 	eor.w	r3, r1, r3
 80051c2:	ea82 0000 	eor.w	r0, r2, r0
 80051c6:	ea83 0101 	eor.w	r1, r3, r1
 80051ca:	ea80 0202 	eor.w	r2, r0, r2
 80051ce:	ea81 0303 	eor.w	r3, r1, r3
 80051d2:	2d36      	cmp	r5, #54	@ 0x36
 80051d4:	bf88      	it	hi
 80051d6:	bd30      	pophi	{r4, r5, pc}
 80051d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80051dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80051e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80051e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80051e8:	d002      	beq.n	80051f0 <__adddf3+0x70>
 80051ea:	4240      	negs	r0, r0
 80051ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80051f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80051f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80051f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80051fc:	d002      	beq.n	8005204 <__adddf3+0x84>
 80051fe:	4252      	negs	r2, r2
 8005200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005204:	ea94 0f05 	teq	r4, r5
 8005208:	f000 80a7 	beq.w	800535a <__adddf3+0x1da>
 800520c:	f1a4 0401 	sub.w	r4, r4, #1
 8005210:	f1d5 0e20 	rsbs	lr, r5, #32
 8005214:	db0d      	blt.n	8005232 <__adddf3+0xb2>
 8005216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800521a:	fa22 f205 	lsr.w	r2, r2, r5
 800521e:	1880      	adds	r0, r0, r2
 8005220:	f141 0100 	adc.w	r1, r1, #0
 8005224:	fa03 f20e 	lsl.w	r2, r3, lr
 8005228:	1880      	adds	r0, r0, r2
 800522a:	fa43 f305 	asr.w	r3, r3, r5
 800522e:	4159      	adcs	r1, r3
 8005230:	e00e      	b.n	8005250 <__adddf3+0xd0>
 8005232:	f1a5 0520 	sub.w	r5, r5, #32
 8005236:	f10e 0e20 	add.w	lr, lr, #32
 800523a:	2a01      	cmp	r2, #1
 800523c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005240:	bf28      	it	cs
 8005242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005246:	fa43 f305 	asr.w	r3, r3, r5
 800524a:	18c0      	adds	r0, r0, r3
 800524c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8005254:	d507      	bpl.n	8005266 <__adddf3+0xe6>
 8005256:	f04f 0e00 	mov.w	lr, #0
 800525a:	f1dc 0c00 	rsbs	ip, ip, #0
 800525e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005262:	eb6e 0101 	sbc.w	r1, lr, r1
 8005266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800526a:	d31b      	bcc.n	80052a4 <__adddf3+0x124>
 800526c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8005270:	d30c      	bcc.n	800528c <__adddf3+0x10c>
 8005272:	0849      	lsrs	r1, r1, #1
 8005274:	ea5f 0030 	movs.w	r0, r0, rrx
 8005278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800527c:	f104 0401 	add.w	r4, r4, #1
 8005280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8005288:	f080 809a 	bcs.w	80053c0 <__adddf3+0x240>
 800528c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8005290:	bf08      	it	eq
 8005292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005296:	f150 0000 	adcs.w	r0, r0, #0
 800529a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800529e:	ea41 0105 	orr.w	r1, r1, r5
 80052a2:	bd30      	pop	{r4, r5, pc}
 80052a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80052a8:	4140      	adcs	r0, r0
 80052aa:	eb41 0101 	adc.w	r1, r1, r1
 80052ae:	3c01      	subs	r4, #1
 80052b0:	bf28      	it	cs
 80052b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80052b6:	d2e9      	bcs.n	800528c <__adddf3+0x10c>
 80052b8:	f091 0f00 	teq	r1, #0
 80052bc:	bf04      	itt	eq
 80052be:	4601      	moveq	r1, r0
 80052c0:	2000      	moveq	r0, #0
 80052c2:	fab1 f381 	clz	r3, r1
 80052c6:	bf08      	it	eq
 80052c8:	3320      	addeq	r3, #32
 80052ca:	f1a3 030b 	sub.w	r3, r3, #11
 80052ce:	f1b3 0220 	subs.w	r2, r3, #32
 80052d2:	da0c      	bge.n	80052ee <__adddf3+0x16e>
 80052d4:	320c      	adds	r2, #12
 80052d6:	dd08      	ble.n	80052ea <__adddf3+0x16a>
 80052d8:	f102 0c14 	add.w	ip, r2, #20
 80052dc:	f1c2 020c 	rsb	r2, r2, #12
 80052e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80052e4:	fa21 f102 	lsr.w	r1, r1, r2
 80052e8:	e00c      	b.n	8005304 <__adddf3+0x184>
 80052ea:	f102 0214 	add.w	r2, r2, #20
 80052ee:	bfd8      	it	le
 80052f0:	f1c2 0c20 	rsble	ip, r2, #32
 80052f4:	fa01 f102 	lsl.w	r1, r1, r2
 80052f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80052fc:	bfdc      	itt	le
 80052fe:	ea41 010c 	orrle.w	r1, r1, ip
 8005302:	4090      	lslle	r0, r2
 8005304:	1ae4      	subs	r4, r4, r3
 8005306:	bfa2      	ittt	ge
 8005308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800530c:	4329      	orrge	r1, r5
 800530e:	bd30      	popge	{r4, r5, pc}
 8005310:	ea6f 0404 	mvn.w	r4, r4
 8005314:	3c1f      	subs	r4, #31
 8005316:	da1c      	bge.n	8005352 <__adddf3+0x1d2>
 8005318:	340c      	adds	r4, #12
 800531a:	dc0e      	bgt.n	800533a <__adddf3+0x1ba>
 800531c:	f104 0414 	add.w	r4, r4, #20
 8005320:	f1c4 0220 	rsb	r2, r4, #32
 8005324:	fa20 f004 	lsr.w	r0, r0, r4
 8005328:	fa01 f302 	lsl.w	r3, r1, r2
 800532c:	ea40 0003 	orr.w	r0, r0, r3
 8005330:	fa21 f304 	lsr.w	r3, r1, r4
 8005334:	ea45 0103 	orr.w	r1, r5, r3
 8005338:	bd30      	pop	{r4, r5, pc}
 800533a:	f1c4 040c 	rsb	r4, r4, #12
 800533e:	f1c4 0220 	rsb	r2, r4, #32
 8005342:	fa20 f002 	lsr.w	r0, r0, r2
 8005346:	fa01 f304 	lsl.w	r3, r1, r4
 800534a:	ea40 0003 	orr.w	r0, r0, r3
 800534e:	4629      	mov	r1, r5
 8005350:	bd30      	pop	{r4, r5, pc}
 8005352:	fa21 f004 	lsr.w	r0, r1, r4
 8005356:	4629      	mov	r1, r5
 8005358:	bd30      	pop	{r4, r5, pc}
 800535a:	f094 0f00 	teq	r4, #0
 800535e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8005362:	bf06      	itte	eq
 8005364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8005368:	3401      	addeq	r4, #1
 800536a:	3d01      	subne	r5, #1
 800536c:	e74e      	b.n	800520c <__adddf3+0x8c>
 800536e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005372:	bf18      	it	ne
 8005374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005378:	d029      	beq.n	80053ce <__adddf3+0x24e>
 800537a:	ea94 0f05 	teq	r4, r5
 800537e:	bf08      	it	eq
 8005380:	ea90 0f02 	teqeq	r0, r2
 8005384:	d005      	beq.n	8005392 <__adddf3+0x212>
 8005386:	ea54 0c00 	orrs.w	ip, r4, r0
 800538a:	bf04      	itt	eq
 800538c:	4619      	moveq	r1, r3
 800538e:	4610      	moveq	r0, r2
 8005390:	bd30      	pop	{r4, r5, pc}
 8005392:	ea91 0f03 	teq	r1, r3
 8005396:	bf1e      	ittt	ne
 8005398:	2100      	movne	r1, #0
 800539a:	2000      	movne	r0, #0
 800539c:	bd30      	popne	{r4, r5, pc}
 800539e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80053a2:	d105      	bne.n	80053b0 <__adddf3+0x230>
 80053a4:	0040      	lsls	r0, r0, #1
 80053a6:	4149      	adcs	r1, r1
 80053a8:	bf28      	it	cs
 80053aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80053ae:	bd30      	pop	{r4, r5, pc}
 80053b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80053b4:	bf3c      	itt	cc
 80053b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80053ba:	bd30      	popcc	{r4, r5, pc}
 80053bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80053c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80053c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80053c8:	f04f 0000 	mov.w	r0, #0
 80053cc:	bd30      	pop	{r4, r5, pc}
 80053ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80053d2:	bf1a      	itte	ne
 80053d4:	4619      	movne	r1, r3
 80053d6:	4610      	movne	r0, r2
 80053d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80053dc:	bf1c      	itt	ne
 80053de:	460b      	movne	r3, r1
 80053e0:	4602      	movne	r2, r0
 80053e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80053e6:	bf06      	itte	eq
 80053e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80053ec:	ea91 0f03 	teqeq	r1, r3
 80053f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80053f4:	bd30      	pop	{r4, r5, pc}
 80053f6:	bf00      	nop

080053f8 <__aeabi_ui2d>:
 80053f8:	f090 0f00 	teq	r0, #0
 80053fc:	bf04      	itt	eq
 80053fe:	2100      	moveq	r1, #0
 8005400:	4770      	bxeq	lr
 8005402:	b530      	push	{r4, r5, lr}
 8005404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8005408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800540c:	f04f 0500 	mov.w	r5, #0
 8005410:	f04f 0100 	mov.w	r1, #0
 8005414:	e750      	b.n	80052b8 <__adddf3+0x138>
 8005416:	bf00      	nop

08005418 <__aeabi_i2d>:
 8005418:	f090 0f00 	teq	r0, #0
 800541c:	bf04      	itt	eq
 800541e:	2100      	moveq	r1, #0
 8005420:	4770      	bxeq	lr
 8005422:	b530      	push	{r4, r5, lr}
 8005424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8005428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800542c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8005430:	bf48      	it	mi
 8005432:	4240      	negmi	r0, r0
 8005434:	f04f 0100 	mov.w	r1, #0
 8005438:	e73e      	b.n	80052b8 <__adddf3+0x138>
 800543a:	bf00      	nop

0800543c <__aeabi_f2d>:
 800543c:	0042      	lsls	r2, r0, #1
 800543e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8005442:	ea4f 0131 	mov.w	r1, r1, rrx
 8005446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800544a:	bf1f      	itttt	ne
 800544c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8005450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8005454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8005458:	4770      	bxne	lr
 800545a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800545e:	bf08      	it	eq
 8005460:	4770      	bxeq	lr
 8005462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8005466:	bf04      	itt	eq
 8005468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800546c:	4770      	bxeq	lr
 800546e:	b530      	push	{r4, r5, lr}
 8005470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8005474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8005478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800547c:	e71c      	b.n	80052b8 <__adddf3+0x138>
 800547e:	bf00      	nop

08005480 <__aeabi_ul2d>:
 8005480:	ea50 0201 	orrs.w	r2, r0, r1
 8005484:	bf08      	it	eq
 8005486:	4770      	bxeq	lr
 8005488:	b530      	push	{r4, r5, lr}
 800548a:	f04f 0500 	mov.w	r5, #0
 800548e:	e00a      	b.n	80054a6 <__aeabi_l2d+0x16>

08005490 <__aeabi_l2d>:
 8005490:	ea50 0201 	orrs.w	r2, r0, r1
 8005494:	bf08      	it	eq
 8005496:	4770      	bxeq	lr
 8005498:	b530      	push	{r4, r5, lr}
 800549a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800549e:	d502      	bpl.n	80054a6 <__aeabi_l2d+0x16>
 80054a0:	4240      	negs	r0, r0
 80054a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80054a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80054aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80054ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80054b2:	f43f aed8 	beq.w	8005266 <__adddf3+0xe6>
 80054b6:	f04f 0203 	mov.w	r2, #3
 80054ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80054be:	bf18      	it	ne
 80054c0:	3203      	addne	r2, #3
 80054c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80054c6:	bf18      	it	ne
 80054c8:	3203      	addne	r2, #3
 80054ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80054ce:	f1c2 0320 	rsb	r3, r2, #32
 80054d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80054d6:	fa20 f002 	lsr.w	r0, r0, r2
 80054da:	fa01 fe03 	lsl.w	lr, r1, r3
 80054de:	ea40 000e 	orr.w	r0, r0, lr
 80054e2:	fa21 f102 	lsr.w	r1, r1, r2
 80054e6:	4414      	add	r4, r2
 80054e8:	e6bd      	b.n	8005266 <__adddf3+0xe6>
 80054ea:	bf00      	nop

080054ec <__aeabi_dmul>:
 80054ec:	b570      	push	{r4, r5, r6, lr}
 80054ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80054f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80054f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80054fa:	bf1d      	ittte	ne
 80054fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005500:	ea94 0f0c 	teqne	r4, ip
 8005504:	ea95 0f0c 	teqne	r5, ip
 8005508:	f000 f8de 	bleq	80056c8 <__aeabi_dmul+0x1dc>
 800550c:	442c      	add	r4, r5
 800550e:	ea81 0603 	eor.w	r6, r1, r3
 8005512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8005516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800551a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800551e:	bf18      	it	ne
 8005520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8005524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8005528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800552c:	d038      	beq.n	80055a0 <__aeabi_dmul+0xb4>
 800552e:	fba0 ce02 	umull	ip, lr, r0, r2
 8005532:	f04f 0500 	mov.w	r5, #0
 8005536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800553a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800553e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8005542:	f04f 0600 	mov.w	r6, #0
 8005546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800554a:	f09c 0f00 	teq	ip, #0
 800554e:	bf18      	it	ne
 8005550:	f04e 0e01 	orrne.w	lr, lr, #1
 8005554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8005558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800555c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8005560:	d204      	bcs.n	800556c <__aeabi_dmul+0x80>
 8005562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8005566:	416d      	adcs	r5, r5
 8005568:	eb46 0606 	adc.w	r6, r6, r6
 800556c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8005570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800557c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8005580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8005584:	bf88      	it	hi
 8005586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800558a:	d81e      	bhi.n	80055ca <__aeabi_dmul+0xde>
 800558c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8005590:	bf08      	it	eq
 8005592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8005596:	f150 0000 	adcs.w	r0, r0, #0
 800559a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800559e:	bd70      	pop	{r4, r5, r6, pc}
 80055a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80055a4:	ea46 0101 	orr.w	r1, r6, r1
 80055a8:	ea40 0002 	orr.w	r0, r0, r2
 80055ac:	ea81 0103 	eor.w	r1, r1, r3
 80055b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80055b4:	bfc2      	ittt	gt
 80055b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80055ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80055be:	bd70      	popgt	{r4, r5, r6, pc}
 80055c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80055c4:	f04f 0e00 	mov.w	lr, #0
 80055c8:	3c01      	subs	r4, #1
 80055ca:	f300 80ab 	bgt.w	8005724 <__aeabi_dmul+0x238>
 80055ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80055d2:	bfde      	ittt	le
 80055d4:	2000      	movle	r0, #0
 80055d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80055da:	bd70      	pople	{r4, r5, r6, pc}
 80055dc:	f1c4 0400 	rsb	r4, r4, #0
 80055e0:	3c20      	subs	r4, #32
 80055e2:	da35      	bge.n	8005650 <__aeabi_dmul+0x164>
 80055e4:	340c      	adds	r4, #12
 80055e6:	dc1b      	bgt.n	8005620 <__aeabi_dmul+0x134>
 80055e8:	f104 0414 	add.w	r4, r4, #20
 80055ec:	f1c4 0520 	rsb	r5, r4, #32
 80055f0:	fa00 f305 	lsl.w	r3, r0, r5
 80055f4:	fa20 f004 	lsr.w	r0, r0, r4
 80055f8:	fa01 f205 	lsl.w	r2, r1, r5
 80055fc:	ea40 0002 	orr.w	r0, r0, r2
 8005600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8005604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8005608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800560c:	fa21 f604 	lsr.w	r6, r1, r4
 8005610:	eb42 0106 	adc.w	r1, r2, r6
 8005614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005618:	bf08      	it	eq
 800561a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800561e:	bd70      	pop	{r4, r5, r6, pc}
 8005620:	f1c4 040c 	rsb	r4, r4, #12
 8005624:	f1c4 0520 	rsb	r5, r4, #32
 8005628:	fa00 f304 	lsl.w	r3, r0, r4
 800562c:	fa20 f005 	lsr.w	r0, r0, r5
 8005630:	fa01 f204 	lsl.w	r2, r1, r4
 8005634:	ea40 0002 	orr.w	r0, r0, r2
 8005638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800563c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005640:	f141 0100 	adc.w	r1, r1, #0
 8005644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005648:	bf08      	it	eq
 800564a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800564e:	bd70      	pop	{r4, r5, r6, pc}
 8005650:	f1c4 0520 	rsb	r5, r4, #32
 8005654:	fa00 f205 	lsl.w	r2, r0, r5
 8005658:	ea4e 0e02 	orr.w	lr, lr, r2
 800565c:	fa20 f304 	lsr.w	r3, r0, r4
 8005660:	fa01 f205 	lsl.w	r2, r1, r5
 8005664:	ea43 0302 	orr.w	r3, r3, r2
 8005668:	fa21 f004 	lsr.w	r0, r1, r4
 800566c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8005670:	fa21 f204 	lsr.w	r2, r1, r4
 8005674:	ea20 0002 	bic.w	r0, r0, r2
 8005678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800567c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005680:	bf08      	it	eq
 8005682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005686:	bd70      	pop	{r4, r5, r6, pc}
 8005688:	f094 0f00 	teq	r4, #0
 800568c:	d10f      	bne.n	80056ae <__aeabi_dmul+0x1c2>
 800568e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8005692:	0040      	lsls	r0, r0, #1
 8005694:	eb41 0101 	adc.w	r1, r1, r1
 8005698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800569c:	bf08      	it	eq
 800569e:	3c01      	subeq	r4, #1
 80056a0:	d0f7      	beq.n	8005692 <__aeabi_dmul+0x1a6>
 80056a2:	ea41 0106 	orr.w	r1, r1, r6
 80056a6:	f095 0f00 	teq	r5, #0
 80056aa:	bf18      	it	ne
 80056ac:	4770      	bxne	lr
 80056ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80056b2:	0052      	lsls	r2, r2, #1
 80056b4:	eb43 0303 	adc.w	r3, r3, r3
 80056b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80056bc:	bf08      	it	eq
 80056be:	3d01      	subeq	r5, #1
 80056c0:	d0f7      	beq.n	80056b2 <__aeabi_dmul+0x1c6>
 80056c2:	ea43 0306 	orr.w	r3, r3, r6
 80056c6:	4770      	bx	lr
 80056c8:	ea94 0f0c 	teq	r4, ip
 80056cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80056d0:	bf18      	it	ne
 80056d2:	ea95 0f0c 	teqne	r5, ip
 80056d6:	d00c      	beq.n	80056f2 <__aeabi_dmul+0x206>
 80056d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80056dc:	bf18      	it	ne
 80056de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80056e2:	d1d1      	bne.n	8005688 <__aeabi_dmul+0x19c>
 80056e4:	ea81 0103 	eor.w	r1, r1, r3
 80056e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80056ec:	f04f 0000 	mov.w	r0, #0
 80056f0:	bd70      	pop	{r4, r5, r6, pc}
 80056f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80056f6:	bf06      	itte	eq
 80056f8:	4610      	moveq	r0, r2
 80056fa:	4619      	moveq	r1, r3
 80056fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005700:	d019      	beq.n	8005736 <__aeabi_dmul+0x24a>
 8005702:	ea94 0f0c 	teq	r4, ip
 8005706:	d102      	bne.n	800570e <__aeabi_dmul+0x222>
 8005708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800570c:	d113      	bne.n	8005736 <__aeabi_dmul+0x24a>
 800570e:	ea95 0f0c 	teq	r5, ip
 8005712:	d105      	bne.n	8005720 <__aeabi_dmul+0x234>
 8005714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8005718:	bf1c      	itt	ne
 800571a:	4610      	movne	r0, r2
 800571c:	4619      	movne	r1, r3
 800571e:	d10a      	bne.n	8005736 <__aeabi_dmul+0x24a>
 8005720:	ea81 0103 	eor.w	r1, r1, r3
 8005724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8005728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800572c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005730:	f04f 0000 	mov.w	r0, #0
 8005734:	bd70      	pop	{r4, r5, r6, pc}
 8005736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800573a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800573e:	bd70      	pop	{r4, r5, r6, pc}

08005740 <__aeabi_ddiv>:
 8005740:	b570      	push	{r4, r5, r6, lr}
 8005742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8005746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800574a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800574e:	bf1d      	ittte	ne
 8005750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005754:	ea94 0f0c 	teqne	r4, ip
 8005758:	ea95 0f0c 	teqne	r5, ip
 800575c:	f000 f8a7 	bleq	80058ae <__aeabi_ddiv+0x16e>
 8005760:	eba4 0405 	sub.w	r4, r4, r5
 8005764:	ea81 0e03 	eor.w	lr, r1, r3
 8005768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800576c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005770:	f000 8088 	beq.w	8005884 <__aeabi_ddiv+0x144>
 8005774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800577c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8005780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800578c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8005790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8005798:	429d      	cmp	r5, r3
 800579a:	bf08      	it	eq
 800579c:	4296      	cmpeq	r6, r2
 800579e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80057a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80057a6:	d202      	bcs.n	80057ae <__aeabi_ddiv+0x6e>
 80057a8:	085b      	lsrs	r3, r3, #1
 80057aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80057ae:	1ab6      	subs	r6, r6, r2
 80057b0:	eb65 0503 	sbc.w	r5, r5, r3
 80057b4:	085b      	lsrs	r3, r3, #1
 80057b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80057ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80057be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80057c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80057c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80057ca:	bf22      	ittt	cs
 80057cc:	1ab6      	subcs	r6, r6, r2
 80057ce:	4675      	movcs	r5, lr
 80057d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80057d4:	085b      	lsrs	r3, r3, #1
 80057d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80057da:	ebb6 0e02 	subs.w	lr, r6, r2
 80057de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80057e2:	bf22      	ittt	cs
 80057e4:	1ab6      	subcs	r6, r6, r2
 80057e6:	4675      	movcs	r5, lr
 80057e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80057ec:	085b      	lsrs	r3, r3, #1
 80057ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80057f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80057f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80057fa:	bf22      	ittt	cs
 80057fc:	1ab6      	subcs	r6, r6, r2
 80057fe:	4675      	movcs	r5, lr
 8005800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8005804:	085b      	lsrs	r3, r3, #1
 8005806:	ea4f 0232 	mov.w	r2, r2, rrx
 800580a:	ebb6 0e02 	subs.w	lr, r6, r2
 800580e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005812:	bf22      	ittt	cs
 8005814:	1ab6      	subcs	r6, r6, r2
 8005816:	4675      	movcs	r5, lr
 8005818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800581c:	ea55 0e06 	orrs.w	lr, r5, r6
 8005820:	d018      	beq.n	8005854 <__aeabi_ddiv+0x114>
 8005822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8005826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800582a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800582e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8005836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800583a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800583e:	d1c0      	bne.n	80057c2 <__aeabi_ddiv+0x82>
 8005840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8005844:	d10b      	bne.n	800585e <__aeabi_ddiv+0x11e>
 8005846:	ea41 0100 	orr.w	r1, r1, r0
 800584a:	f04f 0000 	mov.w	r0, #0
 800584e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8005852:	e7b6      	b.n	80057c2 <__aeabi_ddiv+0x82>
 8005854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8005858:	bf04      	itt	eq
 800585a:	4301      	orreq	r1, r0
 800585c:	2000      	moveq	r0, #0
 800585e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8005862:	bf88      	it	hi
 8005864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8005868:	f63f aeaf 	bhi.w	80055ca <__aeabi_dmul+0xde>
 800586c:	ebb5 0c03 	subs.w	ip, r5, r3
 8005870:	bf04      	itt	eq
 8005872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8005876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800587a:	f150 0000 	adcs.w	r0, r0, #0
 800587e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005882:	bd70      	pop	{r4, r5, r6, pc}
 8005884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8005888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800588c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8005890:	bfc2      	ittt	gt
 8005892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800589a:	bd70      	popgt	{r4, r5, r6, pc}
 800589c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80058a0:	f04f 0e00 	mov.w	lr, #0
 80058a4:	3c01      	subs	r4, #1
 80058a6:	e690      	b.n	80055ca <__aeabi_dmul+0xde>
 80058a8:	ea45 0e06 	orr.w	lr, r5, r6
 80058ac:	e68d      	b.n	80055ca <__aeabi_dmul+0xde>
 80058ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80058b2:	ea94 0f0c 	teq	r4, ip
 80058b6:	bf08      	it	eq
 80058b8:	ea95 0f0c 	teqeq	r5, ip
 80058bc:	f43f af3b 	beq.w	8005736 <__aeabi_dmul+0x24a>
 80058c0:	ea94 0f0c 	teq	r4, ip
 80058c4:	d10a      	bne.n	80058dc <__aeabi_ddiv+0x19c>
 80058c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80058ca:	f47f af34 	bne.w	8005736 <__aeabi_dmul+0x24a>
 80058ce:	ea95 0f0c 	teq	r5, ip
 80058d2:	f47f af25 	bne.w	8005720 <__aeabi_dmul+0x234>
 80058d6:	4610      	mov	r0, r2
 80058d8:	4619      	mov	r1, r3
 80058da:	e72c      	b.n	8005736 <__aeabi_dmul+0x24a>
 80058dc:	ea95 0f0c 	teq	r5, ip
 80058e0:	d106      	bne.n	80058f0 <__aeabi_ddiv+0x1b0>
 80058e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80058e6:	f43f aefd 	beq.w	80056e4 <__aeabi_dmul+0x1f8>
 80058ea:	4610      	mov	r0, r2
 80058ec:	4619      	mov	r1, r3
 80058ee:	e722      	b.n	8005736 <__aeabi_dmul+0x24a>
 80058f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80058f4:	bf18      	it	ne
 80058f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80058fa:	f47f aec5 	bne.w	8005688 <__aeabi_dmul+0x19c>
 80058fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8005902:	f47f af0d 	bne.w	8005720 <__aeabi_dmul+0x234>
 8005906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800590a:	f47f aeeb 	bne.w	80056e4 <__aeabi_dmul+0x1f8>
 800590e:	e712      	b.n	8005736 <__aeabi_dmul+0x24a>

08005910 <__gedf2>:
 8005910:	f04f 3cff 	mov.w	ip, #4294967295
 8005914:	e006      	b.n	8005924 <__cmpdf2+0x4>
 8005916:	bf00      	nop

08005918 <__ledf2>:
 8005918:	f04f 0c01 	mov.w	ip, #1
 800591c:	e002      	b.n	8005924 <__cmpdf2+0x4>
 800591e:	bf00      	nop

08005920 <__cmpdf2>:
 8005920:	f04f 0c01 	mov.w	ip, #1
 8005924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800592c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005934:	bf18      	it	ne
 8005936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800593a:	d01b      	beq.n	8005974 <__cmpdf2+0x54>
 800593c:	b001      	add	sp, #4
 800593e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8005942:	bf0c      	ite	eq
 8005944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8005948:	ea91 0f03 	teqne	r1, r3
 800594c:	bf02      	ittt	eq
 800594e:	ea90 0f02 	teqeq	r0, r2
 8005952:	2000      	moveq	r0, #0
 8005954:	4770      	bxeq	lr
 8005956:	f110 0f00 	cmn.w	r0, #0
 800595a:	ea91 0f03 	teq	r1, r3
 800595e:	bf58      	it	pl
 8005960:	4299      	cmppl	r1, r3
 8005962:	bf08      	it	eq
 8005964:	4290      	cmpeq	r0, r2
 8005966:	bf2c      	ite	cs
 8005968:	17d8      	asrcs	r0, r3, #31
 800596a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800596e:	f040 0001 	orr.w	r0, r0, #1
 8005972:	4770      	bx	lr
 8005974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800597c:	d102      	bne.n	8005984 <__cmpdf2+0x64>
 800597e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005982:	d107      	bne.n	8005994 <__cmpdf2+0x74>
 8005984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800598c:	d1d6      	bne.n	800593c <__cmpdf2+0x1c>
 800598e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005992:	d0d3      	beq.n	800593c <__cmpdf2+0x1c>
 8005994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop

0800599c <__aeabi_cdrcmple>:
 800599c:	4684      	mov	ip, r0
 800599e:	4610      	mov	r0, r2
 80059a0:	4662      	mov	r2, ip
 80059a2:	468c      	mov	ip, r1
 80059a4:	4619      	mov	r1, r3
 80059a6:	4663      	mov	r3, ip
 80059a8:	e000      	b.n	80059ac <__aeabi_cdcmpeq>
 80059aa:	bf00      	nop

080059ac <__aeabi_cdcmpeq>:
 80059ac:	b501      	push	{r0, lr}
 80059ae:	f7ff ffb7 	bl	8005920 <__cmpdf2>
 80059b2:	2800      	cmp	r0, #0
 80059b4:	bf48      	it	mi
 80059b6:	f110 0f00 	cmnmi.w	r0, #0
 80059ba:	bd01      	pop	{r0, pc}

080059bc <__aeabi_dcmpeq>:
 80059bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80059c0:	f7ff fff4 	bl	80059ac <__aeabi_cdcmpeq>
 80059c4:	bf0c      	ite	eq
 80059c6:	2001      	moveq	r0, #1
 80059c8:	2000      	movne	r0, #0
 80059ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80059ce:	bf00      	nop

080059d0 <__aeabi_dcmplt>:
 80059d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80059d4:	f7ff ffea 	bl	80059ac <__aeabi_cdcmpeq>
 80059d8:	bf34      	ite	cc
 80059da:	2001      	movcc	r0, #1
 80059dc:	2000      	movcs	r0, #0
 80059de:	f85d fb08 	ldr.w	pc, [sp], #8
 80059e2:	bf00      	nop

080059e4 <__aeabi_dcmple>:
 80059e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80059e8:	f7ff ffe0 	bl	80059ac <__aeabi_cdcmpeq>
 80059ec:	bf94      	ite	ls
 80059ee:	2001      	movls	r0, #1
 80059f0:	2000      	movhi	r0, #0
 80059f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80059f6:	bf00      	nop

080059f8 <__aeabi_dcmpge>:
 80059f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80059fc:	f7ff ffce 	bl	800599c <__aeabi_cdrcmple>
 8005a00:	bf94      	ite	ls
 8005a02:	2001      	movls	r0, #1
 8005a04:	2000      	movhi	r0, #0
 8005a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8005a0a:	bf00      	nop

08005a0c <__aeabi_dcmpgt>:
 8005a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005a10:	f7ff ffc4 	bl	800599c <__aeabi_cdrcmple>
 8005a14:	bf34      	ite	cc
 8005a16:	2001      	movcc	r0, #1
 8005a18:	2000      	movcs	r0, #0
 8005a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8005a1e:	bf00      	nop

08005a20 <__aeabi_dcmpun>:
 8005a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005a28:	d102      	bne.n	8005a30 <__aeabi_dcmpun+0x10>
 8005a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005a2e:	d10a      	bne.n	8005a46 <__aeabi_dcmpun+0x26>
 8005a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005a38:	d102      	bne.n	8005a40 <__aeabi_dcmpun+0x20>
 8005a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005a3e:	d102      	bne.n	8005a46 <__aeabi_dcmpun+0x26>
 8005a40:	f04f 0000 	mov.w	r0, #0
 8005a44:	4770      	bx	lr
 8005a46:	f04f 0001 	mov.w	r0, #1
 8005a4a:	4770      	bx	lr

08005a4c <__aeabi_d2uiz>:
 8005a4c:	004a      	lsls	r2, r1, #1
 8005a4e:	d211      	bcs.n	8005a74 <__aeabi_d2uiz+0x28>
 8005a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8005a54:	d211      	bcs.n	8005a7a <__aeabi_d2uiz+0x2e>
 8005a56:	d50d      	bpl.n	8005a74 <__aeabi_d2uiz+0x28>
 8005a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8005a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005a60:	d40e      	bmi.n	8005a80 <__aeabi_d2uiz+0x34>
 8005a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8005a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8005a72:	4770      	bx	lr
 8005a74:	f04f 0000 	mov.w	r0, #0
 8005a78:	4770      	bx	lr
 8005a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8005a7e:	d102      	bne.n	8005a86 <__aeabi_d2uiz+0x3a>
 8005a80:	f04f 30ff 	mov.w	r0, #4294967295
 8005a84:	4770      	bx	lr
 8005a86:	f04f 0000 	mov.w	r0, #0
 8005a8a:	4770      	bx	lr

08005a8c <__aeabi_d2f>:
 8005a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8005a94:	bf24      	itt	cs
 8005a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8005a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8005a9e:	d90d      	bls.n	8005abc <__aeabi_d2f+0x30>
 8005aa0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8005aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8005aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8005aac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8005ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8005ab4:	bf08      	it	eq
 8005ab6:	f020 0001 	biceq.w	r0, r0, #1
 8005aba:	4770      	bx	lr
 8005abc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8005ac0:	d121      	bne.n	8005b06 <__aeabi_d2f+0x7a>
 8005ac2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8005ac6:	bfbc      	itt	lt
 8005ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8005acc:	4770      	bxlt	lr
 8005ace:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8005ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8005ad6:	f1c2 0218 	rsb	r2, r2, #24
 8005ada:	f1c2 0c20 	rsb	ip, r2, #32
 8005ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8005ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8005ae6:	bf18      	it	ne
 8005ae8:	f040 0001 	orrne.w	r0, r0, #1
 8005aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8005af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8005af8:	ea40 000c 	orr.w	r0, r0, ip
 8005afc:	fa23 f302 	lsr.w	r3, r3, r2
 8005b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005b04:	e7cc      	b.n	8005aa0 <__aeabi_d2f+0x14>
 8005b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8005b0a:	d107      	bne.n	8005b1c <__aeabi_d2f+0x90>
 8005b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8005b10:	bf1e      	ittt	ne
 8005b12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8005b16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8005b1a:	4770      	bxne	lr
 8005b1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8005b20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8005b24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop

08005b2c <__gesf2>:
 8005b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8005b30:	e006      	b.n	8005b40 <__cmpsf2+0x4>
 8005b32:	bf00      	nop

08005b34 <__lesf2>:
 8005b34:	f04f 0c01 	mov.w	ip, #1
 8005b38:	e002      	b.n	8005b40 <__cmpsf2+0x4>
 8005b3a:	bf00      	nop

08005b3c <__cmpsf2>:
 8005b3c:	f04f 0c01 	mov.w	ip, #1
 8005b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005b44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8005b48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8005b4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005b50:	bf18      	it	ne
 8005b52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8005b56:	d011      	beq.n	8005b7c <__cmpsf2+0x40>
 8005b58:	b001      	add	sp, #4
 8005b5a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8005b5e:	bf18      	it	ne
 8005b60:	ea90 0f01 	teqne	r0, r1
 8005b64:	bf58      	it	pl
 8005b66:	ebb2 0003 	subspl.w	r0, r2, r3
 8005b6a:	bf88      	it	hi
 8005b6c:	17c8      	asrhi	r0, r1, #31
 8005b6e:	bf38      	it	cc
 8005b70:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8005b74:	bf18      	it	ne
 8005b76:	f040 0001 	orrne.w	r0, r0, #1
 8005b7a:	4770      	bx	lr
 8005b7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005b80:	d102      	bne.n	8005b88 <__cmpsf2+0x4c>
 8005b82:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8005b86:	d105      	bne.n	8005b94 <__cmpsf2+0x58>
 8005b88:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8005b8c:	d1e4      	bne.n	8005b58 <__cmpsf2+0x1c>
 8005b8e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8005b92:	d0e1      	beq.n	8005b58 <__cmpsf2+0x1c>
 8005b94:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop

08005b9c <__aeabi_cfrcmple>:
 8005b9c:	4684      	mov	ip, r0
 8005b9e:	4608      	mov	r0, r1
 8005ba0:	4661      	mov	r1, ip
 8005ba2:	e7ff      	b.n	8005ba4 <__aeabi_cfcmpeq>

08005ba4 <__aeabi_cfcmpeq>:
 8005ba4:	b50f      	push	{r0, r1, r2, r3, lr}
 8005ba6:	f7ff ffc9 	bl	8005b3c <__cmpsf2>
 8005baa:	2800      	cmp	r0, #0
 8005bac:	bf48      	it	mi
 8005bae:	f110 0f00 	cmnmi.w	r0, #0
 8005bb2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08005bb4 <__aeabi_fcmpeq>:
 8005bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005bb8:	f7ff fff4 	bl	8005ba4 <__aeabi_cfcmpeq>
 8005bbc:	bf0c      	ite	eq
 8005bbe:	2001      	moveq	r0, #1
 8005bc0:	2000      	movne	r0, #0
 8005bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8005bc6:	bf00      	nop

08005bc8 <__aeabi_fcmplt>:
 8005bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005bcc:	f7ff ffea 	bl	8005ba4 <__aeabi_cfcmpeq>
 8005bd0:	bf34      	ite	cc
 8005bd2:	2001      	movcc	r0, #1
 8005bd4:	2000      	movcs	r0, #0
 8005bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8005bda:	bf00      	nop

08005bdc <__aeabi_fcmple>:
 8005bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005be0:	f7ff ffe0 	bl	8005ba4 <__aeabi_cfcmpeq>
 8005be4:	bf94      	ite	ls
 8005be6:	2001      	movls	r0, #1
 8005be8:	2000      	movhi	r0, #0
 8005bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8005bee:	bf00      	nop

08005bf0 <__aeabi_fcmpge>:
 8005bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005bf4:	f7ff ffd2 	bl	8005b9c <__aeabi_cfrcmple>
 8005bf8:	bf94      	ite	ls
 8005bfa:	2001      	movls	r0, #1
 8005bfc:	2000      	movhi	r0, #0
 8005bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8005c02:	bf00      	nop

08005c04 <__aeabi_fcmpgt>:
 8005c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005c08:	f7ff ffc8 	bl	8005b9c <__aeabi_cfrcmple>
 8005c0c:	bf34      	ite	cc
 8005c0e:	2001      	movcc	r0, #1
 8005c10:	2000      	movcs	r0, #0
 8005c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8005c16:	bf00      	nop

08005c18 <__aeabi_fcmpun>:
 8005c18:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8005c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8005c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005c24:	d102      	bne.n	8005c2c <__aeabi_fcmpun+0x14>
 8005c26:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8005c2a:	d108      	bne.n	8005c3e <__aeabi_fcmpun+0x26>
 8005c2c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8005c30:	d102      	bne.n	8005c38 <__aeabi_fcmpun+0x20>
 8005c32:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8005c36:	d102      	bne.n	8005c3e <__aeabi_fcmpun+0x26>
 8005c38:	f04f 0000 	mov.w	r0, #0
 8005c3c:	4770      	bx	lr
 8005c3e:	f04f 0001 	mov.w	r0, #1
 8005c42:	4770      	bx	lr

08005c44 <__aeabi_d2lz>:
 8005c44:	b538      	push	{r3, r4, r5, lr}
 8005c46:	2200      	movs	r2, #0
 8005c48:	2300      	movs	r3, #0
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	460d      	mov	r5, r1
 8005c4e:	f7ff febf 	bl	80059d0 <__aeabi_dcmplt>
 8005c52:	b928      	cbnz	r0, 8005c60 <__aeabi_d2lz+0x1c>
 8005c54:	4620      	mov	r0, r4
 8005c56:	4629      	mov	r1, r5
 8005c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c5c:	f000 b80a 	b.w	8005c74 <__aeabi_d2ulz>
 8005c60:	4620      	mov	r0, r4
 8005c62:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8005c66:	f000 f805 	bl	8005c74 <__aeabi_d2ulz>
 8005c6a:	4240      	negs	r0, r0
 8005c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005c70:	bd38      	pop	{r3, r4, r5, pc}
 8005c72:	bf00      	nop

08005c74 <__aeabi_d2ulz>:
 8005c74:	b5d0      	push	{r4, r6, r7, lr}
 8005c76:	2200      	movs	r2, #0
 8005c78:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca8 <__aeabi_d2ulz+0x34>)
 8005c7a:	4606      	mov	r6, r0
 8005c7c:	460f      	mov	r7, r1
 8005c7e:	f7ff fc35 	bl	80054ec <__aeabi_dmul>
 8005c82:	f7ff fee3 	bl	8005a4c <__aeabi_d2uiz>
 8005c86:	4604      	mov	r4, r0
 8005c88:	f7ff fbb6 	bl	80053f8 <__aeabi_ui2d>
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	4b07      	ldr	r3, [pc, #28]	@ (8005cac <__aeabi_d2ulz+0x38>)
 8005c90:	f7ff fc2c 	bl	80054ec <__aeabi_dmul>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	4630      	mov	r0, r6
 8005c9a:	4639      	mov	r1, r7
 8005c9c:	f7ff fa6e 	bl	800517c <__aeabi_dsub>
 8005ca0:	f7ff fed4 	bl	8005a4c <__aeabi_d2uiz>
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	bdd0      	pop	{r4, r6, r7, pc}
 8005ca8:	3df00000 	.word	0x3df00000
 8005cac:	41f00000 	.word	0x41f00000

08005cb0 <threadLed>:
        delay(1);
    }
}

static void threadLed(void const *argument)
{
 8005cb0:	b508      	push	{r3, lr}
    UNUSED(argument);

    while (1)
    {
        ledToggle(_DEF_LED1);
 8005cb2:	2000      	movs	r0, #0
 8005cb4:	f000 fe18 	bl	80068e8 <ledToggle>
        delay(500);
 8005cb8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005cbc:	f000 f835 	bl	8005d2a <delay>
    while (1)
 8005cc0:	e7f7      	b.n	8005cb2 <threadLed+0x2>
	...

08005cc4 <apInit>:
{
 8005cc4:	b530      	push	{r4, r5, lr}
    uartOpen(_DEF_UART1, 57600); // USB
 8005cc6:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
{
 8005cca:	b087      	sub	sp, #28
    uartOpen(_DEF_UART1, 57600); // USB
 8005ccc:	2000      	movs	r0, #0
 8005cce:	f000 fea9 	bl	8006a24 <uartOpen>
    osThreadDef(threadLed, threadLed, _HW_DEF_RTOS_THREAD_PRI_LED, 0,
 8005cd2:	4d0f      	ldr	r5, [pc, #60]	@ (8005d10 <apInit+0x4c>)
    uartOpen(_DEF_UART2, 57600); // UART
 8005cd4:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8005cd8:	2001      	movs	r0, #1
 8005cda:	f000 fea3 	bl	8006a24 <uartOpen>
    osThreadDef(threadLed, threadLed, _HW_DEF_RTOS_THREAD_PRI_LED, 0,
 8005cde:	ac01      	add	r4, sp, #4
    cliOpen(_DEF_UART1, 57600);
 8005ce0:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8005ce4:	2000      	movs	r0, #0
 8005ce6:	f000 fa5d 	bl	80061a4 <cliOpen>
    osThreadDef(threadLed, threadLed, _HW_DEF_RTOS_THREAD_PRI_LED, 0,
 8005cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cee:	682b      	ldr	r3, [r5, #0]
    if (osThreadCreate(osThread(threadLed), NULL) != NULL)
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	a801      	add	r0, sp, #4
    osThreadDef(threadLed, threadLed, _HW_DEF_RTOS_THREAD_PRI_LED, 0,
 8005cf4:	6023      	str	r3, [r4, #0]
    if (osThreadCreate(osThread(threadLed), NULL) != NULL)
 8005cf6:	f001 f80b 	bl	8006d10 <osThreadCreate>
 8005cfa:	b120      	cbz	r0, 8005d06 <apInit+0x42>
        logPrintf("threadLed \t\t: OK\r\n");
 8005cfc:	4805      	ldr	r0, [pc, #20]	@ (8005d14 <apInit+0x50>)
 8005cfe:	f006 fcbb 	bl	800c678 <puts>
}
 8005d02:	b007      	add	sp, #28
 8005d04:	bd30      	pop	{r4, r5, pc}
        logPrintf("threadLed \t\t: Fail\r\n");
 8005d06:	4804      	ldr	r0, [pc, #16]	@ (8005d18 <apInit+0x54>)
 8005d08:	f006 fcb6 	bl	800c678 <puts>
        while (1)
 8005d0c:	e7fe      	b.n	8005d0c <apInit+0x48>
 8005d0e:	bf00      	nop
 8005d10:	0800e910 	.word	0x0800e910
 8005d14:	0800e938 	.word	0x0800e938
 8005d18:	0800e94a 	.word	0x0800e94a

08005d1c <apMain>:
{
 8005d1c:	b508      	push	{r3, lr}
        cliMain();
 8005d1e:	f000 fb53 	bl	80063c8 <cliMain>
        delay(1);
 8005d22:	2001      	movs	r0, #1
 8005d24:	f000 f801 	bl	8005d2a <delay>
    while (1)
 8005d28:	e7f9      	b.n	8005d1e <apMain+0x2>

08005d2a <delay>:

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
}

void delay(uint32_t ms)
{
 8005d2a:	b510      	push	{r4, lr}
 8005d2c:	4604      	mov	r4, r0
#ifdef _USE_HW_RTOS
    if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005d2e:	f001 fb75 	bl	800741c <xTaskGetSchedulerState>
 8005d32:	2801      	cmp	r0, #1
    {
        osDelay(ms);
 8005d34:	4620      	mov	r0, r4
    if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005d36:	d003      	beq.n	8005d40 <delay+0x16>
        HAL_Delay(ms);
    }
#else
    HAL_Delay(ms);
#endif
}
 8005d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        osDelay(ms);
 8005d3c:	f001 b800 	b.w	8006d40 <osDelay>
}
 8005d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_Delay(ms);
 8005d44:	f001 bdea 	b.w	800791c <HAL_Delay>

08005d48 <millis>:

uint32_t millis(void)
{
    return HAL_GetTick();
 8005d48:	f001 bde2 	b.w	8007910 <HAL_GetTick>

08005d4c <__io_putchar>:
}

int __io_putchar(int ch)
{
 8005d4c:	b507      	push	{r0, r1, r2, lr}
    // USB로 printf 캐릭터 전송
    uartWrite(_DEF_UART2, (uint8_t *)&ch, 1);
 8005d4e:	2201      	movs	r2, #1
{
 8005d50:	9001      	str	r0, [sp, #4]
    uartWrite(_DEF_UART2, (uint8_t *)&ch, 1);
 8005d52:	a901      	add	r1, sp, #4
 8005d54:	4610      	mov	r0, r2
 8005d56:	f000 feeb 	bl	8006b30 <uartWrite>
    return 1;
}
 8005d5a:	2001      	movs	r0, #1
 8005d5c:	b003      	add	sp, #12
 8005d5e:	f85d fb04 	ldr.w	pc, [sp], #4

08005d62 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8005d62:	b510      	push	{r4, lr}
 8005d64:	b094      	sub	sp, #80	@ 0x50
    RCC_OscInitTypeDef RCC_OscInitStruct   = {0};
 8005d66:	2214      	movs	r2, #20
 8005d68:	2100      	movs	r1, #0
 8005d6a:	a80c      	add	r0, sp, #48	@ 0x30
 8005d6c:	f006 fdb6 	bl	800c8dc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct   = {0};
 8005d70:	2214      	movs	r2, #20
 8005d72:	2100      	movs	r1, #0
 8005d74:	eb0d 0002 	add.w	r0, sp, r2
 8005d78:	f006 fdb0 	bl	800c8dc <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005d7c:	2210      	movs	r2, #16
 8005d7e:	2100      	movs	r1, #0
 8005d80:	a801      	add	r0, sp, #4
 8005d82:	f006 fdab 	bl	800c8dc <memset>
        RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
    RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
    RCC_OscInitStruct.LSEState       = RCC_LSE_ON;
    RCC_OscInitStruct.HSIState       = RCC_HSI_ON;
    RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 8005d86:	2402      	movs	r4, #2
    RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 8005d88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005d8c:	2105      	movs	r1, #5
    RCC_OscInitStruct.LSEState       = RCC_LSE_ON;
 8005d8e:	2201      	movs	r2, #1
    RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 8005d90:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
    RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 8005d94:	e9cd 4311 	strd	r4, r3, [sp, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLMUL     = RCC_PLL_MUL9;
 8005d98:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005d9c:	a80a      	add	r0, sp, #40	@ 0x28
    RCC_OscInitStruct.HSIState       = RCC_HSI_ON;
 8005d9e:	e9cd 220d 	strd	r2, r2, [sp, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLMUL     = RCC_PLL_MUL9;
 8005da2:	9313      	str	r3, [sp, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005da4:	f002 ffd2 	bl	8008d4c <HAL_RCC_OscConfig>
 8005da8:	b108      	cbz	r0, 8005dae <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005daa:	b672      	cpsid	i
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state
     */
    __disable_irq();
    while (1)
 8005dac:	e7fe      	b.n	8005dac <SystemClock_Config+0x4a>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8005dae:	230f      	movs	r3, #15
    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 8005db0:	e9cd 3405 	strd	r3, r4, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005db4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8005db8:	9007      	str	r0, [sp, #28]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005dba:	e9cd 3008 	strd	r3, r0, [sp, #32]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	a805      	add	r0, sp, #20
 8005dc2:	f003 f985 	bl	80090d0 <HAL_RCC_ClockConfig>
 8005dc6:	b108      	cbz	r0, 8005dcc <SystemClock_Config+0x6a>
 8005dc8:	b672      	cpsid	i
    while (1)
 8005dca:	e7fe      	b.n	8005dca <SystemClock_Config+0x68>
    PeriphClkInit.RTCClockSelection    = RCC_RTCCLKSOURCE_LSE;
 8005dcc:	2211      	movs	r2, #17
 8005dce:	f44f 7380 	mov.w	r3, #256	@ 0x100
    PeriphClkInit.UsbClockSelection    = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8005dd2:	9004      	str	r0, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005dd4:	a801      	add	r0, sp, #4
    PeriphClkInit.RTCClockSelection    = RCC_RTCCLKSOURCE_LSE;
 8005dd6:	e9cd 2301 	strd	r2, r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005dda:	f003 fa35 	bl	8009248 <HAL_RCCEx_PeriphCLKConfig>
 8005dde:	b108      	cbz	r0, 8005de4 <SystemClock_Config+0x82>
 8005de0:	b672      	cpsid	i
    while (1)
 8005de2:	e7fe      	b.n	8005de2 <SystemClock_Config+0x80>
}
 8005de4:	b014      	add	sp, #80	@ 0x50
 8005de6:	bd10      	pop	{r4, pc}

08005de8 <bspInit>:
{
 8005de8:	b570      	push	{r4, r5, r6, lr}
 8005dea:	b088      	sub	sp, #32
    HAL_Init();
 8005dec:	f001 fd72 	bl	80078d4 <HAL_Init>
    SystemClock_Config();
 8005df0:	f7ff ffb7 	bl	8005d62 <SystemClock_Config>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005df4:	4b18      	ldr	r3, [pc, #96]	@ (8005e58 <bspInit+0x70>)
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_OD;
 8005df6:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005dfa:	699a      	ldr	r2, [r3, #24]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dfc:	2600      	movs	r6, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005dfe:	f042 0210 	orr.w	r2, r2, #16
 8005e02:	619a      	str	r2, [r3, #24]
 8005e04:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e06:	4c15      	ldr	r4, [pc, #84]	@ (8005e5c <bspInit+0x74>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e08:	f002 0210 	and.w	r2, r2, #16
 8005e0c:	9201      	str	r2, [sp, #4]
 8005e0e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e10:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e12:	4620      	mov	r0, r4
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e14:	f042 0220 	orr.w	r2, r2, #32
 8005e18:	619a      	str	r2, [r3, #24]
 8005e1a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e1c:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e1e:	f002 0220 	and.w	r2, r2, #32
 8005e22:	9202      	str	r2, [sp, #8]
 8005e24:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e26:	699a      	ldr	r2, [r3, #24]
 8005e28:	f042 0204 	orr.w	r2, r2, #4
 8005e2c:	619a      	str	r2, [r3, #24]
 8005e2e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e30:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e32:	f003 0304 	and.w	r3, r3, #4
 8005e36:	9303      	str	r3, [sp, #12]
 8005e38:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_OD;
 8005e3a:	2311      	movs	r3, #17
 8005e3c:	e9cd 5304 	strd	r5, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e40:	2302      	movs	r3, #2
 8005e42:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e44:	f001 ff84 	bl	8007d50 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8005e48:	4632      	mov	r2, r6
 8005e4a:	4629      	mov	r1, r5
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	f002 f8c5 	bl	8007fdc <HAL_GPIO_WritePin>
}
 8005e52:	b008      	add	sp, #32
 8005e54:	bd70      	pop	{r4, r5, r6, pc}
 8005e56:	bf00      	nop
 8005e58:	40021000 	.word	0x40021000
 8005e5c:	40010800 	.word	0x40010800

08005e60 <Error_Handler>:
 8005e60:	b672      	cpsid	i
    while (1)
 8005e62:	e7fe      	b.n	8005e62 <Error_Handler+0x2>

08005e64 <HAL_MspInit>:

    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_AFIO_CLK_ENABLE();
 8005e64:	4b0e      	ldr	r3, [pc, #56]	@ (8005ea0 <HAL_MspInit+0x3c>)
{
 8005e66:	b082      	sub	sp, #8
    __HAL_RCC_AFIO_CLK_ENABLE();
 8005e68:	699a      	ldr	r2, [r3, #24]
 8005e6a:	f042 0201 	orr.w	r2, r2, #1
 8005e6e:	619a      	str	r2, [r3, #24]
 8005e70:	699a      	ldr	r2, [r3, #24]
 8005e72:	f002 0201 	and.w	r2, r2, #1
 8005e76:	9200      	str	r2, [sp, #0]
 8005e78:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e7a:	69da      	ldr	r2, [r3, #28]
 8005e7c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005e80:	61da      	str	r2, [r3, #28]
 8005e82:	69db      	ldr	r3, [r3, #28]

    /* System interrupt init*/

    /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
     */
    __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005e84:	4a07      	ldr	r2, [pc, #28]	@ (8005ea4 <HAL_MspInit+0x40>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e8a:	9301      	str	r3, [sp, #4]
 8005e8c:	9b01      	ldr	r3, [sp, #4]
    __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005e8e:	6853      	ldr	r3, [r2, #4]
 8005e90:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8005e94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005e98:	6053      	str	r3, [r2, #4]

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 8005e9a:	b002      	add	sp, #8
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	40021000 	.word	0x40021000
 8005ea4:	40010000 	.word	0x40010000

08005ea8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005ea8:	e7fe      	b.n	8005ea8 <NMI_Handler>

08005eaa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005eaa:	e7fe      	b.n	8005eaa <HardFault_Handler>

08005eac <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005eac:	e7fe      	b.n	8005eac <MemManage_Handler>

08005eae <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005eae:	e7fe      	b.n	8005eae <BusFault_Handler>

08005eb0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005eb0:	e7fe      	b.n	8005eb0 <UsageFault_Handler>

08005eb2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005eb2:	4770      	bx	lr

08005eb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005eb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005eb6:	f001 fd1f 	bl	80078f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  osSystickHandler();
  /* USER CODE END SysTick_IRQn 1 */
}
 8005eba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osSystickHandler();
 8005ebe:	f000 bf47 	b.w	8006d50 <osSystickHandler>
	...

08005ec4 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005ec4:	4801      	ldr	r0, [pc, #4]	@ (8005ecc <DMA1_Channel5_IRQHandler+0x8>)
 8005ec6:	f001 beaf 	b.w	8007c28 <HAL_DMA_IRQHandler>
 8005eca:	bf00      	nop
 8005ecc:	20000938 	.word	0x20000938

08005ed0 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005ed0:	4801      	ldr	r0, [pc, #4]	@ (8005ed8 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8005ed2:	f002 b921 	b.w	8008118 <HAL_PCD_IRQHandler>
 8005ed6:	bf00      	nop
 8005ed8:	20003130 	.word	0x20003130

08005edc <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005edc:	4801      	ldr	r0, [pc, #4]	@ (8005ee4 <USART1_IRQHandler+0x8>)
 8005ede:	f003 bd4b 	b.w	8009978 <HAL_UART_IRQHandler>
 8005ee2:	bf00      	nop
 8005ee4:	2000097c 	.word	0x2000097c

08005ee8 <_getpid>:
}

int _getpid(void)
{
    return 1;
}
 8005ee8:	2001      	movs	r0, #1
 8005eea:	4770      	bx	lr

08005eec <_kill>:

int _kill(int pid, int sig)
{
 8005eec:	b508      	push	{r3, lr}
    (void)pid;
    (void)sig;
    errno = EINVAL;
 8005eee:	f006 fd81 	bl	800c9f4 <__errno>
 8005ef2:	2316      	movs	r3, #22
 8005ef4:	6003      	str	r3, [r0, #0]
    return -1;
}
 8005ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8005efa:	bd08      	pop	{r3, pc}

08005efc <_exit>:

void _exit(int status)
{
 8005efc:	b508      	push	{r3, lr}
    errno = EINVAL;
 8005efe:	f006 fd79 	bl	800c9f4 <__errno>
 8005f02:	2316      	movs	r3, #22
 8005f04:	6003      	str	r3, [r0, #0]
    _kill(status, -1);
    while (1)
 8005f06:	e7fe      	b.n	8005f06 <_exit+0xa>

08005f08 <_read>:
    {
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005f08:	b570      	push	{r4, r5, r6, lr}
 8005f0a:	460d      	mov	r5, r1
 8005f0c:	4614      	mov	r4, r2
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f0e:	460e      	mov	r6, r1
 8005f10:	1b73      	subs	r3, r6, r5
 8005f12:	429c      	cmp	r4, r3
 8005f14:	dc01      	bgt.n	8005f1a <_read+0x12>
    {
        *ptr++ = __io_getchar();
    }

    return len;
}
 8005f16:	4620      	mov	r0, r4
 8005f18:	bd70      	pop	{r4, r5, r6, pc}
        *ptr++ = __io_getchar();
 8005f1a:	f3af 8000 	nop.w
 8005f1e:	f806 0b01 	strb.w	r0, [r6], #1
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f22:	e7f5      	b.n	8005f10 <_read+0x8>

08005f24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005f24:	b570      	push	{r4, r5, r6, lr}
 8005f26:	460d      	mov	r5, r1
 8005f28:	4614      	mov	r4, r2
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f2a:	460e      	mov	r6, r1
 8005f2c:	1b73      	subs	r3, r6, r5
 8005f2e:	429c      	cmp	r4, r3
 8005f30:	dc01      	bgt.n	8005f36 <_write+0x12>
    {
        __io_putchar(*ptr++);
    }
    return len;
}
 8005f32:	4620      	mov	r0, r4
 8005f34:	bd70      	pop	{r4, r5, r6, pc}
        __io_putchar(*ptr++);
 8005f36:	f816 0b01 	ldrb.w	r0, [r6], #1
 8005f3a:	f7ff ff07 	bl	8005d4c <__io_putchar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f3e:	e7f5      	b.n	8005f2c <_write+0x8>

08005f40 <_close>:

int _close(int file)
{
    (void)file;
    return -1;
}
 8005f40:	f04f 30ff 	mov.w	r0, #4294967295
 8005f44:	4770      	bx	lr

08005f46 <_fstat>:

int _fstat(int file, struct stat *st)
{
    (void)file;
    st->st_mode = S_IFCHR;
 8005f46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    return 0;
}
 8005f4a:	2000      	movs	r0, #0
    st->st_mode = S_IFCHR;
 8005f4c:	604b      	str	r3, [r1, #4]
}
 8005f4e:	4770      	bx	lr

08005f50 <_isatty>:

int _isatty(int file)
{
    (void)file;
    return 1;
}
 8005f50:	2001      	movs	r0, #1
 8005f52:	4770      	bx	lr

08005f54 <_lseek>:
{
    (void)file;
    (void)ptr;
    (void)dir;
    return 0;
}
 8005f54:	2000      	movs	r0, #0
 8005f56:	4770      	bx	lr

08005f58 <_sbrk>:
        (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
    const uint8_t *max_heap = (uint8_t *)stack_limit;
    uint8_t *prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end)
 8005f58:	4a0b      	ldr	r2, [pc, #44]	@ (8005f88 <_sbrk+0x30>)
{
 8005f5a:	4603      	mov	r3, r0
    if (NULL == __sbrk_heap_end)
 8005f5c:	6811      	ldr	r1, [r2, #0]
{
 8005f5e:	b510      	push	{r4, lr}
    if (NULL == __sbrk_heap_end)
 8005f60:	b909      	cbnz	r1, 8005f66 <_sbrk+0xe>
    {
        __sbrk_heap_end = &_end;
 8005f62:	490a      	ldr	r1, [pc, #40]	@ (8005f8c <_sbrk+0x34>)
 8005f64:	6011      	str	r1, [r2, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap)
 8005f66:	6810      	ldr	r0, [r2, #0]
 8005f68:	4909      	ldr	r1, [pc, #36]	@ (8005f90 <_sbrk+0x38>)
 8005f6a:	4c0a      	ldr	r4, [pc, #40]	@ (8005f94 <_sbrk+0x3c>)
 8005f6c:	4403      	add	r3, r0
 8005f6e:	1b09      	subs	r1, r1, r4
 8005f70:	428b      	cmp	r3, r1
 8005f72:	d906      	bls.n	8005f82 <_sbrk+0x2a>
    {
        errno = ENOMEM;
 8005f74:	f006 fd3e 	bl	800c9f4 <__errno>
 8005f78:	230c      	movs	r3, #12
 8005f7a:	6003      	str	r3, [r0, #0]
        return (void *)-1;
 8005f7c:	f04f 30ff 	mov.w	r0, #4294967295

    prev_heap_end = __sbrk_heap_end;
    __sbrk_heap_end += incr;

    return (void *)prev_heap_end;
}
 8005f80:	bd10      	pop	{r4, pc}
    __sbrk_heap_end += incr;
 8005f82:	6013      	str	r3, [r2, #0]
    return (void *)prev_heap_end;
 8005f84:	e7fc      	b.n	8005f80 <_sbrk+0x28>
 8005f86:	bf00      	nop
 8005f88:	20000378 	.word	0x20000378
 8005f8c:	20003558 	.word	0x20003558
 8005f90:	20005000 	.word	0x20005000
 8005f94:	00000400 	.word	0x00000400

08005f98 <SystemInit>:
#endif

    /* Configure the Vector Table location
     * -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR = VECT_TAB_BASE_ADDRESS |
 8005f98:	4b01      	ldr	r3, [pc, #4]	@ (8005fa0 <SystemInit+0x8>)
 8005f9a:	4a02      	ldr	r2, [pc, #8]	@ (8005fa4 <SystemInit+0xc>)
 8005f9c:	609a      	str	r2, [r3, #8]
                VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005f9e:	4770      	bx	lr
 8005fa0:	e000ed00 	.word	0xe000ed00
 8005fa4:	08005000 	.word	0x08005000

08005fa8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005fa8:	f7ff fff6 	bl	8005f98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005fac:	480b      	ldr	r0, [pc, #44]	@ (8005fdc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005fae:	490c      	ldr	r1, [pc, #48]	@ (8005fe0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005fb0:	4a0c      	ldr	r2, [pc, #48]	@ (8005fe4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8005fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005fb4:	e002      	b.n	8005fbc <LoopCopyDataInit>

08005fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005fba:	3304      	adds	r3, #4

08005fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005fc0:	d3f9      	bcc.n	8005fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005fc2:	4a09      	ldr	r2, [pc, #36]	@ (8005fe8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005fc4:	4c09      	ldr	r4, [pc, #36]	@ (8005fec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005fc8:	e001      	b.n	8005fce <LoopFillZerobss>

08005fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005fcc:	3204      	adds	r2, #4

08005fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005fd0:	d3fb      	bcc.n	8005fca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005fd2:	f006 fd15 	bl	800ca00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005fd6:	f005 fb47 	bl	800b668 <main>
  bx lr
 8005fda:	4770      	bx	lr
  ldr r0, =_sdata
 8005fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005fe0:	2000035c 	.word	0x2000035c
  ldr r2, =_sidata
 8005fe4:	0800ef38 	.word	0x0800ef38
  ldr r2, =_sbss
 8005fe8:	2000035c 	.word	0x2000035c
  ldr r4, =_ebss
 8005fec:	20003554 	.word	0x20003554

08005ff0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005ff0:	e7fe      	b.n	8005ff0 <ADC1_2_IRQHandler>

08005ff2 <qbufferCreate>:

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
    bool ret = true;

    p_node->in    = 0;
 8005ff2:	2300      	movs	r3, #0
    p_node->out   = 0;
    p_node->len   = length;
    p_node->p_buf = p_buf;
 8005ff4:	e9c0 2102 	strd	r2, r1, [r0, #8]
    p_node->out   = 0;
 8005ff8:	e9c0 3300 	strd	r3, r3, [r0]

    return ret;
}
 8005ffc:	2001      	movs	r0, #1
 8005ffe:	4770      	bx	lr

08006000 <qbufferRead>:

    return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8006000:	b530      	push	{r4, r5, lr}
 8006002:	440a      	add	r2, r1
    bool ret = true;

    for (int i = 0; i < length; i++)
 8006004:	4291      	cmp	r1, r2
 8006006:	d101      	bne.n	800600c <qbufferRead+0xc>
    bool ret = true;
 8006008:	2001      	movs	r0, #1
            break;
        }
    }

    return ret;
}
 800600a:	bd30      	pop	{r4, r5, pc}
        if (p_node->p_buf != NULL)
 800600c:	68c3      	ldr	r3, [r0, #12]
 800600e:	b113      	cbz	r3, 8006016 <qbufferRead+0x16>
            p_data[i] = p_node->p_buf[p_node->out];
 8006010:	6844      	ldr	r4, [r0, #4]
 8006012:	5d1b      	ldrb	r3, [r3, r4]
 8006014:	700b      	strb	r3, [r1, #0]
        if (p_node->out != p_node->in)
 8006016:	6843      	ldr	r3, [r0, #4]
 8006018:	6804      	ldr	r4, [r0, #0]
 800601a:	3101      	adds	r1, #1
 800601c:	42a3      	cmp	r3, r4
 800601e:	d007      	beq.n	8006030 <qbufferRead+0x30>
            p_node->out = (p_node->out + 1) % p_node->len;
 8006020:	6884      	ldr	r4, [r0, #8]
 8006022:	3301      	adds	r3, #1
 8006024:	fbb3 f5f4 	udiv	r5, r3, r4
 8006028:	fb04 3315 	mls	r3, r4, r5, r3
 800602c:	6043      	str	r3, [r0, #4]
    for (int i = 0; i < length; i++)
 800602e:	e7e9      	b.n	8006004 <qbufferRead+0x4>
            ret = false;
 8006030:	2000      	movs	r0, #0
 8006032:	e7ea      	b.n	800600a <qbufferRead+0xa>

08006034 <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
    uint32_t ret;

    ret = (p_node->in - p_node->out) % p_node->len;
 8006034:	e9d0 3200 	ldrd	r3, r2, [r0]
 8006038:	1a9b      	subs	r3, r3, r2
 800603a:	6882      	ldr	r2, [r0, #8]
 800603c:	fbb3 f0f2 	udiv	r0, r3, r2

    return ret;
}
 8006040:	fb02 3010 	mls	r0, r2, r0, r3
 8006044:	4770      	bx	lr

08006046 <cliToUpper>:

    uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
}

void cliToUpper(char *str)
{
 8006046:	2200      	movs	r2, #0
 8006048:	b510      	push	{r4, lr}
 800604a:	1e41      	subs	r1, r0, #1
    uint16_t i;
    uint8_t str_ch;

    for (i = 0; i < CLI_CMD_NAME_MAX; i++)
    {
        str_ch = str[i];
 800604c:	f811 3f01 	ldrb.w	r3, [r1, #1]!

        if (str_ch == 0)
 8006050:	b16b      	cbz	r3, 800606e <cliToUpper+0x28>
        {
            break;
        }

        if ((str_ch >= 'a') && (str_ch <= 'z'))
 8006052:	f1a3 0461 	sub.w	r4, r3, #97	@ 0x61
 8006056:	2c19      	cmp	r4, #25
        {
            str_ch = str_ch - 'a' + 'A';
 8006058:	bf98      	it	ls
 800605a:	3b20      	subls	r3, #32
    for (i = 0; i < CLI_CMD_NAME_MAX; i++)
 800605c:	f102 0201 	add.w	r2, r2, #1
            str_ch = str_ch - 'a' + 'A';
 8006060:	bf98      	it	ls
 8006062:	b2db      	uxtbls	r3, r3
    for (i = 0; i < CLI_CMD_NAME_MAX; i++)
 8006064:	2a10      	cmp	r2, #16
        }
        str[i] = str_ch;
 8006066:	700b      	strb	r3, [r1, #0]
    for (i = 0; i < CLI_CMD_NAME_MAX; i++)
 8006068:	d1f0      	bne.n	800604c <cliToUpper+0x6>
    }

    if (i == CLI_CMD_NAME_MAX)
    {
        str[i - 1] = 0;
 800606a:	2300      	movs	r3, #0
 800606c:	73c3      	strb	r3, [r0, #15]
    }
}
 800606e:	bd10      	pop	{r4, pc}

08006070 <cliArgsGetStr>:
char *cliArgsGetStr(uint8_t index)
{
    char *ret    = NULL;
    cli_t *p_cli = &cli_node;

    if (index >= p_cli->cmd_args.argc)
 8006070:	4b05      	ldr	r3, [pc, #20]	@ (8006088 <cliArgsGetStr+0x18>)
 8006072:	f8b3 238c 	ldrh.w	r2, [r3, #908]	@ 0x38c
 8006076:	4282      	cmp	r2, r0
    {
        return 0;
    }

    ret = p_cli->cmd_args.argv[index];
 8006078:	bf86      	itte	hi
 800607a:	f8d3 3390 	ldrhi.w	r3, [r3, #912]	@ 0x390
 800607e:	f853 0020 	ldrhi.w	r0, [r3, r0, lsl #2]
        return 0;
 8006082:	2000      	movls	r0, #0

    return ret;
}
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	2000037c 	.word	0x2000037c

0800608c <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 800608c:	b508      	push	{r3, lr}
 800608e:	4603      	mov	r3, r0
    bool ret     = false;
    cli_t *p_cli = &cli_node;

    if (index >= p_cli->cmd_args.argc)
 8006090:	4a08      	ldr	r2, [pc, #32]	@ (80060b4 <cliArgsIsStr+0x28>)
{
 8006092:	4608      	mov	r0, r1
    if (index >= p_cli->cmd_args.argc)
 8006094:	f8b2 138c 	ldrh.w	r1, [r2, #908]	@ 0x38c
 8006098:	4299      	cmp	r1, r3
 800609a:	d909      	bls.n	80060b0 <cliArgsIsStr+0x24>
    {
        return 0;
    }

    if (strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 800609c:	f8d2 2390 	ldr.w	r2, [r2, #912]	@ 0x390
 80060a0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80060a4:	f7ff f854 	bl	8005150 <strcmp>
 80060a8:	fab0 f080 	clz	r0, r0
 80060ac:	0940      	lsrs	r0, r0, #5
    {
        ret = true;
    }

    return ret;
}
 80060ae:	bd08      	pop	{r3, pc}
        return 0;
 80060b0:	2000      	movs	r0, #0
 80060b2:	e7fc      	b.n	80060ae <cliArgsIsStr+0x22>
 80060b4:	2000037c 	.word	0x2000037c

080060b8 <cliArgsGetFloat>:
    if (index >= p_cli->cmd_args.argc)
 80060b8:	4b06      	ldr	r3, [pc, #24]	@ (80060d4 <cliArgsGetFloat+0x1c>)
 80060ba:	f8b3 238c 	ldrh.w	r2, [r3, #908]	@ 0x38c
 80060be:	4282      	cmp	r2, r0
 80060c0:	d906      	bls.n	80060d0 <cliArgsGetFloat+0x18>
        (float)strtof((const char *)p_cli->cmd_args.argv[index], (char **)NULL);
 80060c2:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 80060c6:	2100      	movs	r1, #0
 80060c8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80060cc:	f006 b8ec 	b.w	800c2a8 <strtof>
}
 80060d0:	2000      	movs	r0, #0
 80060d2:	4770      	bx	lr
 80060d4:	2000037c 	.word	0x2000037c

080060d8 <cliArgsGetData>:
    if (index >= p_cli->cmd_args.argc)
 80060d8:	4b07      	ldr	r3, [pc, #28]	@ (80060f8 <cliArgsGetData+0x20>)
 80060da:	f8b3 238c 	ldrh.w	r2, [r3, #908]	@ 0x38c
 80060de:	4282      	cmp	r2, r0
 80060e0:	d907      	bls.n	80060f2 <cliArgsGetData+0x1a>
    ret = (int32_t)strtoul((const char *)p_cli->cmd_args.argv[index],
 80060e2:	2200      	movs	r2, #0
 80060e4:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 80060e8:	4611      	mov	r1, r2
 80060ea:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80060ee:	f006 b9a1 	b.w	800c434 <strtoul>
}
 80060f2:	2000      	movs	r0, #0
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	2000037c 	.word	0x2000037c

080060fc <cliLineChange.constprop.0>:
void cliLineChange(cli_t *p_cli, int8_t key_up)
 80060fc:	b570      	push	{r4, r5, r6, lr}
    if (p_cli->hist_line_count == 0)
 80060fe:	4c25      	ldr	r4, [pc, #148]	@ (8006194 <cliLineChange.constprop.0+0x98>)
void cliLineChange(cli_t *p_cli, int8_t key_up)
 8006100:	4605      	mov	r5, r0
    if (p_cli->hist_line_count == 0)
 8006102:	f894 3197 	ldrb.w	r3, [r4, #407]	@ 0x197
 8006106:	2b00      	cmp	r3, #0
 8006108:	d03f      	beq.n	800618a <cliLineChange.constprop.0+0x8e>
    if (p_cli->line.cursor > 0)
 800610a:	f894 2245 	ldrb.w	r2, [r4, #581]	@ 0x245
 800610e:	b11a      	cbz	r2, 8006118 <cliLineChange.constprop.0+0x1c>
        uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8006110:	4921      	ldr	r1, [pc, #132]	@ (8006198 <cliLineChange.constprop.0+0x9c>)
 8006112:	7820      	ldrb	r0, [r4, #0]
 8006114:	f000 fd26 	bl	8006b64 <uartPrintf>
    if (p_cli->line.count > 0)
 8006118:	f894 2246 	ldrb.w	r2, [r4, #582]	@ 0x246
 800611c:	b11a      	cbz	r2, 8006126 <cliLineChange.constprop.0+0x2a>
        uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 800611e:	491f      	ldr	r1, [pc, #124]	@ (800619c <cliLineChange.constprop.0+0xa0>)
 8006120:	7820      	ldrb	r0, [r4, #0]
 8006122:	f000 fd1f 	bl	8006b64 <uartPrintf>
    if (key_up == true)
 8006126:	2d01      	cmp	r5, #1
        p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) %
 8006128:	f894 2197 	ldrb.w	r2, [r4, #407]	@ 0x197
    if (key_up == true)
 800612c:	d12e      	bne.n	800618c <cliLineChange.constprop.0+0x90>
        if (p_cli->hist_line_new == true)
 800612e:	f894 3194 	ldrb.w	r3, [r4, #404]	@ 0x194
 8006132:	b11b      	cbz	r3, 800613c <cliLineChange.constprop.0+0x40>
            p_cli->hist_line_i = p_cli->hist_line_last;
 8006134:	f894 3196 	ldrb.w	r3, [r4, #406]	@ 0x196
 8006138:	f884 3195 	strb.w	r3, [r4, #405]	@ 0x195
        p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) %
 800613c:	f994 3195 	ldrsb.w	r3, [r4, #405]	@ 0x195
 8006140:	4413      	add	r3, r2
 8006142:	3b01      	subs	r3, #1
        p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8006144:	fb93 f1f2 	sdiv	r1, r3, r2
 8006148:	fb02 3311 	mls	r3, r2, r1, r3
 800614c:	b25a      	sxtb	r2, r3
        p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) %
 800614e:	f884 2195 	strb.w	r2, [r4, #405]	@ 0x195
    p_cli->line        = p_cli->line_buf[change_i];
 8006152:	2223      	movs	r2, #35	@ 0x23
        change_i           = p_cli->hist_line_i;
 8006154:	b2db      	uxtb	r3, r3
    p_cli->line        = p_cli->line_buf[change_i];
 8006156:	fb02 4303 	mla	r3, r2, r3, r4
 800615a:	4d11      	ldr	r5, [pc, #68]	@ (80061a0 <cliLineChange.constprop.0+0xa4>)
 800615c:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 8006160:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006164:	462e      	mov	r6, r5
 8006166:	6810      	ldr	r0, [r2, #0]
 8006168:	6851      	ldr	r1, [r2, #4]
 800616a:	3208      	adds	r2, #8
 800616c:	c603      	stmia	r6!, {r0, r1}
 800616e:	429a      	cmp	r2, r3
 8006170:	4635      	mov	r5, r6
 8006172:	d1f7      	bne.n	8006164 <cliLineChange.constprop.0+0x68>
 8006174:	7893      	ldrb	r3, [r2, #2]
 8006176:	8811      	ldrh	r1, [r2, #0]
 8006178:	70b3      	strb	r3, [r6, #2]
 800617a:	8031      	strh	r1, [r6, #0]
    p_cli->line.cursor = p_cli->line.count;
 800617c:	f894 3246 	ldrb.w	r3, [r4, #582]	@ 0x246
 8006180:	f884 3245 	strb.w	r3, [r4, #581]	@ 0x245
    p_cli->hist_line_new = false;
 8006184:	2300      	movs	r3, #0
 8006186:	f884 3194 	strb.w	r3, [r4, #404]	@ 0x194
}
 800618a:	bd70      	pop	{r4, r5, r6, pc}
        p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 800618c:	f994 3195 	ldrsb.w	r3, [r4, #405]	@ 0x195
 8006190:	3301      	adds	r3, #1
 8006192:	e7d7      	b.n	8006144 <cliLineChange.constprop.0+0x48>
 8006194:	2000037c 	.word	0x2000037c
 8006198:	0800e980 	.word	0x0800e980
 800619c:	0800e986 	.word	0x0800e986
 80061a0:	200005a0 	.word	0x200005a0

080061a4 <cliOpen>:
{
 80061a4:	b510      	push	{r4, lr}
    cli_node.ch   = ch;
 80061a6:	4c03      	ldr	r4, [pc, #12]	@ (80061b4 <cliOpen+0x10>)
 80061a8:	7020      	strb	r0, [r4, #0]
    cli_node.baud = baud;
 80061aa:	6061      	str	r1, [r4, #4]
    cli_node.is_open = uartOpen(ch, baud);
 80061ac:	f000 fc3a 	bl	8006a24 <uartOpen>
 80061b0:	7220      	strb	r0, [r4, #8]
}
 80061b2:	bd10      	pop	{r4, pc}
 80061b4:	2000037c 	.word	0x2000037c

080061b8 <cliShowLog>:
{
 80061b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (cli_node.is_log == true)
 80061ba:	4b23      	ldr	r3, [pc, #140]	@ (8006248 <cliShowLog+0x90>)
{
 80061bc:	4604      	mov	r4, r0
    if (cli_node.is_log == true)
 80061be:	7a5b      	ldrb	r3, [r3, #9]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d03f      	beq.n	8006244 <cliShowLog+0x8c>
        uartPrintf(p_cli->log_ch, "Cursor  : %d\r\n", p_cli->line.cursor);
 80061c4:	f890 2245 	ldrb.w	r2, [r0, #581]	@ 0x245
 80061c8:	4920      	ldr	r1, [pc, #128]	@ (800624c <cliShowLog+0x94>)
 80061ca:	7a80      	ldrb	r0, [r0, #10]
 80061cc:	f000 fcca 	bl	8006b64 <uartPrintf>
        uartPrintf(p_cli->log_ch, "Count   : %d\r\n", p_cli->line.count);
 80061d0:	f894 2246 	ldrb.w	r2, [r4, #582]	@ 0x246
 80061d4:	491e      	ldr	r1, [pc, #120]	@ (8006250 <cliShowLog+0x98>)
 80061d6:	7aa0      	ldrb	r0, [r4, #10]
 80061d8:	f000 fcc4 	bl	8006b64 <uartPrintf>
        uartPrintf(p_cli->log_ch, "buf_len : %d\r\n", p_cli->line.buf_len);
 80061dc:	f894 2244 	ldrb.w	r2, [r4, #580]	@ 0x244
 80061e0:	491c      	ldr	r1, [pc, #112]	@ (8006254 <cliShowLog+0x9c>)
 80061e2:	7aa0      	ldrb	r0, [r4, #10]
 80061e4:	f000 fcbe 	bl	8006b64 <uartPrintf>
        uartPrintf(p_cli->log_ch, "buf     : %s\r\n", p_cli->line.buf);
 80061e8:	491b      	ldr	r1, [pc, #108]	@ (8006258 <cliShowLog+0xa0>)
 80061ea:	f504 7209 	add.w	r2, r4, #548	@ 0x224
 80061ee:	7aa0      	ldrb	r0, [r4, #10]
 80061f0:	f000 fcb8 	bl	8006b64 <uartPrintf>
        uartPrintf(p_cli->log_ch, "line_i  : %d\r\n", p_cli->hist_line_i);
 80061f4:	f994 2195 	ldrsb.w	r2, [r4, #405]	@ 0x195
 80061f8:	4918      	ldr	r1, [pc, #96]	@ (800625c <cliShowLog+0xa4>)
 80061fa:	7aa0      	ldrb	r0, [r4, #10]
 80061fc:	f000 fcb2 	bl	8006b64 <uartPrintf>
        uartPrintf(p_cli->log_ch, "line_lt : %d\r\n", p_cli->hist_line_last);
 8006200:	f894 2196 	ldrb.w	r2, [r4, #406]	@ 0x196
 8006204:	4916      	ldr	r1, [pc, #88]	@ (8006260 <cliShowLog+0xa8>)
 8006206:	7aa0      	ldrb	r0, [r4, #10]
 8006208:	f000 fcac 	bl	8006b64 <uartPrintf>
        uartPrintf(p_cli->log_ch, "line_c  : %d\r\n", p_cli->hist_line_count);
 800620c:	f894 2197 	ldrb.w	r2, [r4, #407]	@ 0x197
 8006210:	4914      	ldr	r1, [pc, #80]	@ (8006264 <cliShowLog+0xac>)
 8006212:	7aa0      	ldrb	r0, [r4, #10]
 8006214:	f000 fca6 	bl	8006b64 <uartPrintf>
        for (int i = 0; i < p_cli->hist_line_count; i++)
 8006218:	2500      	movs	r5, #0
            uartPrintf(p_cli->log_ch, "buf %d   : %s\r\n", i,
 800621a:	4f13      	ldr	r7, [pc, #76]	@ (8006268 <cliShowLog+0xb0>)
 800621c:	f504 76cc 	add.w	r6, r4, #408	@ 0x198
        for (int i = 0; i < p_cli->hist_line_count; i++)
 8006220:	f894 3197 	ldrb.w	r3, [r4, #407]	@ 0x197
            uartPrintf(p_cli->log_ch, "buf %d   : %s\r\n", i,
 8006224:	7aa0      	ldrb	r0, [r4, #10]
        for (int i = 0; i < p_cli->hist_line_count; i++)
 8006226:	429d      	cmp	r5, r3
 8006228:	db04      	blt.n	8006234 <cliShowLog+0x7c>
}
 800622a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        uartPrintf(p_cli->log_ch, "\r\n");
 800622e:	490f      	ldr	r1, [pc, #60]	@ (800626c <cliShowLog+0xb4>)
 8006230:	f000 bc98 	b.w	8006b64 <uartPrintf>
            uartPrintf(p_cli->log_ch, "buf %d   : %s\r\n", i,
 8006234:	4633      	mov	r3, r6
 8006236:	462a      	mov	r2, r5
 8006238:	4639      	mov	r1, r7
 800623a:	f000 fc93 	bl	8006b64 <uartPrintf>
        for (int i = 0; i < p_cli->hist_line_count; i++)
 800623e:	3501      	adds	r5, #1
 8006240:	3623      	adds	r6, #35	@ 0x23
 8006242:	e7ed      	b.n	8006220 <cliShowLog+0x68>
}
 8006244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006246:	bf00      	nop
 8006248:	2000037c 	.word	0x2000037c
 800624c:	0800e98c 	.word	0x0800e98c
 8006250:	0800e99b 	.word	0x0800e99b
 8006254:	0800e9aa 	.word	0x0800e9aa
 8006258:	0800e9b9 	.word	0x0800e9b9
 800625c:	0800e9c8 	.word	0x0800e9c8
 8006260:	0800e9d7 	.word	0x0800e9d7
 8006264:	0800e9e6 	.word	0x0800e9e6
 8006268:	0800e9f5 	.word	0x0800e9f5
 800626c:	0800ea22 	.word	0x0800ea22

08006270 <cliPrintf>:
{
 8006270:	b40f      	push	{r0, r1, r2, r3}
 8006272:	b513      	push	{r0, r1, r4, lr}
    len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8006274:	4c0a      	ldr	r4, [pc, #40]	@ (80062a0 <cliPrintf+0x30>)
{
 8006276:	ab04      	add	r3, sp, #16
 8006278:	f853 2b04 	ldr.w	r2, [r3], #4
    len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 800627c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006280:	4620      	mov	r0, r4
    va_start(arg, fmt);
 8006282:	9301      	str	r3, [sp, #4]
    len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8006284:	f006 fa6e 	bl	800c764 <vsniprintf>
    uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8006288:	4621      	mov	r1, r4
    len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 800628a:	4602      	mov	r2, r0
    uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 800628c:	f814 0c11 	ldrb.w	r0, [r4, #-17]
 8006290:	f000 fc4e 	bl	8006b30 <uartWrite>
}
 8006294:	b002      	add	sp, #8
 8006296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800629a:	b004      	add	sp, #16
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	2000038d 	.word	0x2000038d

080062a4 <cliShowList>:

    return ret;
}

void cliShowList(cli_args_t *args)
{
 80062a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cli_t *p_cli = &cli_node;

    cliPrintf("\r\n");
 80062a6:	480e      	ldr	r0, [pc, #56]	@ (80062e0 <cliShowList+0x3c>)
 80062a8:	f7ff ffe2 	bl	8006270 <cliPrintf>
    cliPrintf("---------- cmd list ---------\r\n");
 80062ac:	480d      	ldr	r0, [pc, #52]	@ (80062e4 <cliShowList+0x40>)
 80062ae:	f7ff ffdf 	bl	8006270 <cliPrintf>

    for (int i = 0; i < p_cli->cmd_count; i++)
 80062b2:	2500      	movs	r5, #0
 80062b4:	4c0c      	ldr	r4, [pc, #48]	@ (80062e8 <cliShowList+0x44>)
    {
        cliPrintf(p_cli->cmd_list[i].cmd_str);
        cliPrintf("\r\n");
 80062b6:	4f0a      	ldr	r7, [pc, #40]	@ (80062e0 <cliShowList+0x3c>)
    for (int i = 0; i < p_cli->cmd_count; i++)
 80062b8:	f5a4 7613 	sub.w	r6, r4, #588	@ 0x24c
 80062bc:	f8b6 3248 	ldrh.w	r3, [r6, #584]	@ 0x248
 80062c0:	42ab      	cmp	r3, r5
 80062c2:	dc04      	bgt.n	80062ce <cliShowList+0x2a>
    }

    cliPrintf("-----------------------------\r\n");
}
 80062c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    cliPrintf("-----------------------------\r\n");
 80062c8:	4808      	ldr	r0, [pc, #32]	@ (80062ec <cliShowList+0x48>)
 80062ca:	f7ff bfd1 	b.w	8006270 <cliPrintf>
        cliPrintf(p_cli->cmd_list[i].cmd_str);
 80062ce:	4620      	mov	r0, r4
 80062d0:	f7ff ffce 	bl	8006270 <cliPrintf>
        cliPrintf("\r\n");
 80062d4:	4638      	mov	r0, r7
 80062d6:	f7ff ffcb 	bl	8006270 <cliPrintf>
    for (int i = 0; i < p_cli->cmd_count; i++)
 80062da:	3501      	adds	r5, #1
 80062dc:	3414      	adds	r4, #20
 80062de:	e7ed      	b.n	80062bc <cliShowList+0x18>
 80062e0:	0800ea22 	.word	0x0800ea22
 80062e4:	0800ea05 	.word	0x0800ea05
 80062e8:	200005c8 	.word	0x200005c8
 80062ec:	0800ea25 	.word	0x0800ea25

080062f0 <cliMemoryDump>:
    unsigned int *addr;
    int idx1, i;
    unsigned int *ascptr;
    unsigned char asc[4];

    int argc    = args->argc;
 80062f0:	8803      	ldrh	r3, [r0, #0]
{
 80062f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char **argv = args->argv;
 80062f6:	6844      	ldr	r4, [r0, #4]

    if (args->argc < 1)
 80062f8:	b92b      	cbnz	r3, 8006306 <cliMemoryDump+0x16>
    {
        cliPrintf(">> md addr [size] \n");
 80062fa:	482b      	ldr	r0, [pc, #172]	@ (80063a8 <cliMemoryDump+0xb8>)
            }
            cliPrintf("|\n   ");
        }
        addr++;
    }
}
 80062fc:	b003      	add	sp, #12
 80062fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        cliPrintf(">> md addr [size] \n");
 8006302:	f7ff bfb5 	b.w	8006270 <cliPrintf>
    if (argc > 1)
 8006306:	2b01      	cmp	r3, #1
 8006308:	d015      	beq.n	8006336 <cliMemoryDump+0x46>
        size = (int)strtoul((const char *)argv[1], (char **)NULL, (int)0);
 800630a:	2200      	movs	r2, #0
 800630c:	6860      	ldr	r0, [r4, #4]
 800630e:	4611      	mov	r1, r2
 8006310:	f006 f890 	bl	800c434 <strtoul>
 8006314:	4606      	mov	r6, r0
        (unsigned int *)strtoul((const char *)argv[0], (char **)NULL, (int)0);
 8006316:	2200      	movs	r2, #0
 8006318:	6820      	ldr	r0, [r4, #0]
 800631a:	4611      	mov	r1, r2
 800631c:	f006 f88a 	bl	800c434 <strtoul>
 8006320:	4604      	mov	r4, r0
    cliPrintf("\n   ");
 8006322:	4822      	ldr	r0, [pc, #136]	@ (80063ac <cliMemoryDump+0xbc>)
 8006324:	f7ff ffa4 	bl	8006270 <cliPrintf>
    addr =
 8006328:	4627      	mov	r7, r4
    for (idx = 0; idx < size; idx++)
 800632a:	2500      	movs	r5, #0
 800632c:	42b5      	cmp	r5, r6
 800632e:	db04      	blt.n	800633a <cliMemoryDump+0x4a>
}
 8006330:	b003      	add	sp, #12
 8006332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int idx, size = 16;
 8006336:	2610      	movs	r6, #16
 8006338:	e7ed      	b.n	8006316 <cliMemoryDump+0x26>
        if ((idx % 4) == 0)
 800633a:	f015 0803 	ands.w	r8, r5, #3
 800633e:	d103      	bne.n	8006348 <cliMemoryDump+0x58>
            cliPrintf(" 0x%08X: ", (unsigned int)addr);
 8006340:	4639      	mov	r1, r7
 8006342:	481b      	ldr	r0, [pc, #108]	@ (80063b0 <cliMemoryDump+0xc0>)
 8006344:	f7ff ff94 	bl	8006270 <cliPrintf>
        cliPrintf(" 0x%08X", *(addr));
 8006348:	6839      	ldr	r1, [r7, #0]
 800634a:	481a      	ldr	r0, [pc, #104]	@ (80063b4 <cliMemoryDump+0xc4>)
 800634c:	f7ff ff90 	bl	8006270 <cliPrintf>
        if ((idx % 4) == 3)
 8006350:	f1b8 0f03 	cmp.w	r8, #3
 8006354:	d120      	bne.n	8006398 <cliMemoryDump+0xa8>
            cliPrintf("  |");
 8006356:	4818      	ldr	r0, [pc, #96]	@ (80063b8 <cliMemoryDump+0xc8>)
 8006358:	f7ff ff8a 	bl	8006270 <cliPrintf>
                        cliPrintf("%c", asc[i]);
 800635c:	f8df b05c 	ldr.w	fp, [pc, #92]	@ 80063bc <cliMemoryDump+0xcc>
 8006360:	f104 0910 	add.w	r9, r4, #16
                for (i = 0; i < 4; i++)
 8006364:	f04f 0a00 	mov.w	sl, #0
                memcpy((char *)asc, (char *)ascptr, 4);
 8006368:	6823      	ldr	r3, [r4, #0]
 800636a:	f10d 0804 	add.w	r8, sp, #4
 800636e:	9301      	str	r3, [sp, #4]
                    if (asc[i] > 0x1f && asc[i] < 0x7f)
 8006370:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006374:	f1a1 0220 	sub.w	r2, r1, #32
 8006378:	2a5e      	cmp	r2, #94	@ 0x5e
 800637a:	d810      	bhi.n	800639e <cliMemoryDump+0xae>
                        cliPrintf("%c", asc[i]);
 800637c:	4658      	mov	r0, fp
 800637e:	f7ff ff77 	bl	8006270 <cliPrintf>
                for (i = 0; i < 4; i++)
 8006382:	f10a 0a01 	add.w	sl, sl, #1
 8006386:	f1ba 0f04 	cmp.w	sl, #4
 800638a:	d1f1      	bne.n	8006370 <cliMemoryDump+0x80>
                ascptr += 1;
 800638c:	3404      	adds	r4, #4
            for (idx1 = 0; idx1 < 4; idx1++)
 800638e:	454c      	cmp	r4, r9
 8006390:	d1e8      	bne.n	8006364 <cliMemoryDump+0x74>
            cliPrintf("|\n   ");
 8006392:	480b      	ldr	r0, [pc, #44]	@ (80063c0 <cliMemoryDump+0xd0>)
 8006394:	f7ff ff6c 	bl	8006270 <cliPrintf>
        addr++;
 8006398:	3704      	adds	r7, #4
    for (idx = 0; idx < size; idx++)
 800639a:	3501      	adds	r5, #1
 800639c:	e7c6      	b.n	800632c <cliMemoryDump+0x3c>
                        cliPrintf(".");
 800639e:	4809      	ldr	r0, [pc, #36]	@ (80063c4 <cliMemoryDump+0xd4>)
 80063a0:	f7ff ff66 	bl	8006270 <cliPrintf>
 80063a4:	e7ed      	b.n	8006382 <cliMemoryDump+0x92>
 80063a6:	bf00      	nop
 80063a8:	0800ea45 	.word	0x0800ea45
 80063ac:	0800ea75 	.word	0x0800ea75
 80063b0:	0800ea59 	.word	0x0800ea59
 80063b4:	0800ea63 	.word	0x0800ea63
 80063b8:	0800ea6b 	.word	0x0800ea6b
 80063bc:	0800ea6f 	.word	0x0800ea6f
 80063c0:	0800ea74 	.word	0x0800ea74
 80063c4:	0800ea72 	.word	0x0800ea72

080063c8 <cliMain>:
{
 80063c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (cli_node.is_open != true)
 80063cc:	4ca6      	ldr	r4, [pc, #664]	@ (8006668 <cliMain+0x2a0>)
{
 80063ce:	b085      	sub	sp, #20
    if (cli_node.is_open != true)
 80063d0:	7a27      	ldrb	r7, [r4, #8]
 80063d2:	2f00      	cmp	r7, #0
 80063d4:	f000 8141 	beq.w	800665a <cliMain+0x292>
    if (uartAvailable(cli_node.ch) > 0)
 80063d8:	7820      	ldrb	r0, [r4, #0]
 80063da:	f000 fb79 	bl	8006ad0 <uartAvailable>
 80063de:	2800      	cmp	r0, #0
 80063e0:	f000 813b 	beq.w	800665a <cliMain+0x292>
        cliUpdate(&cli_node, uartRead(cli_node.ch));
 80063e4:	7820      	ldrb	r0, [r4, #0]
 80063e6:	f000 fb89 	bl	8006afc <uartRead>
    if (p_cli->state == CLI_RX_IDLE)
 80063ea:	f894 8010 	ldrb.w	r8, [r4, #16]
 80063ee:	f88d 0007 	strb.w	r0, [sp, #7]
 80063f2:	f1b8 0f00 	cmp.w	r8, #0
 80063f6:	f040 80eb 	bne.w	80065d0 <cliMain+0x208>
        switch (rx_data)
 80063fa:	281b      	cmp	r0, #27
 80063fc:	f000 8128 	beq.w	8006650 <cliMain+0x288>
 8006400:	d852      	bhi.n	80064a8 <cliMain+0xe0>
 8006402:	2808      	cmp	r0, #8
 8006404:	f000 80f8 	beq.w	80065f8 <cliMain+0x230>
 8006408:	280d      	cmp	r0, #13
 800640a:	d06a      	beq.n	80064e2 <cliMain+0x11a>
            if ((line->count + 1) < line->buf_len)
 800640c:	f894 3246 	ldrb.w	r3, [r4, #582]	@ 0x246
 8006410:	f894 2244 	ldrb.w	r2, [r4, #580]	@ 0x244
 8006414:	1c59      	adds	r1, r3, #1
 8006416:	4291      	cmp	r1, r2
 8006418:	f280 811c 	bge.w	8006654 <cliMain+0x28c>
                if (line->cursor == line->count)
 800641c:	f894 2245 	ldrb.w	r2, [r4, #581]	@ 0x245
 8006420:	429a      	cmp	r2, r3
 8006422:	d119      	bne.n	8006458 <cliMain+0x90>
                    uartWrite(p_cli->ch, &rx_data, 1);
 8006424:	2201      	movs	r2, #1
 8006426:	f10d 0107 	add.w	r1, sp, #7
 800642a:	7820      	ldrb	r0, [r4, #0]
 800642c:	f000 fb80 	bl	8006b30 <uartWrite>
                    line->buf[line->cursor] = rx_data;
 8006430:	f894 2245 	ldrb.w	r2, [r4, #581]	@ 0x245
 8006434:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8006438:	18a3      	adds	r3, r4, r2
                    line->cursor++;
 800643a:	3201      	adds	r2, #1
 800643c:	f884 2245 	strb.w	r2, [r4, #581]	@ 0x245
                    line->buf[line->count] = 0;
 8006440:	2200      	movs	r2, #0
                    line->buf[line->cursor] = rx_data;
 8006442:	f883 1224 	strb.w	r1, [r3, #548]	@ 0x224
                    line->count++;
 8006446:	f894 3246 	ldrb.w	r3, [r4, #582]	@ 0x246
 800644a:	3301      	adds	r3, #1
 800644c:	b2db      	uxtb	r3, r3
 800644e:	f884 3246 	strb.w	r3, [r4, #582]	@ 0x246
                    line->buf[line->count] = 0;
 8006452:	4423      	add	r3, r4
 8006454:	f883 2224 	strb.w	r2, [r3, #548]	@ 0x224
                if (line->cursor < line->count)
 8006458:	f894 6245 	ldrb.w	r6, [r4, #581]	@ 0x245
 800645c:	f894 5246 	ldrb.w	r5, [r4, #582]	@ 0x246
 8006460:	42ae      	cmp	r6, r5
 8006462:	f080 80b5 	bcs.w	80065d0 <cliMain+0x208>
                    mov_len = line->count - line->cursor;
 8006466:	1baa      	subs	r2, r5, r6
                        line->buf[line->count - i] =
 8006468:	b2d2      	uxtb	r2, r2
                            line->buf[line->count - i - 1];
 800646a:	f505 7109 	add.w	r1, r5, #548	@ 0x224
                        line->buf[line->count - i] =
 800646e:	f205 2025 	addw	r0, r5, #549	@ 0x225
                            line->buf[line->count - i - 1];
 8006472:	1a89      	subs	r1, r1, r2
                        line->buf[line->count - i] =
 8006474:	1a80      	subs	r0, r0, r2
 8006476:	4421      	add	r1, r4
 8006478:	4420      	add	r0, r4
 800647a:	f006 fa15 	bl	800c8a8 <memmove>
                    line->buf[line->count] = 0;
 800647e:	2100      	movs	r1, #0
                    line->buf[line->cursor] = rx_data;
 8006480:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8006484:	19a3      	adds	r3, r4, r6
 8006486:	f883 2224 	strb.w	r2, [r3, #548]	@ 0x224
                    line->count++;
 800648a:	1c6b      	adds	r3, r5, #1
 800648c:	b2db      	uxtb	r3, r3
 800648e:	f884 3246 	strb.w	r3, [r4, #582]	@ 0x246
                    line->buf[line->count] = 0;
 8006492:	4423      	add	r3, r4
                    line->cursor++;
 8006494:	3601      	adds	r6, #1
                    line->buf[line->count] = 0;
 8006496:	f883 1224 	strb.w	r1, [r3, #548]	@ 0x224
                    uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 800649a:	7820      	ldrb	r0, [r4, #0]
 800649c:	4973      	ldr	r1, [pc, #460]	@ (800666c <cliMain+0x2a4>)
                    line->cursor++;
 800649e:	f884 6245 	strb.w	r6, [r4, #581]	@ 0x245
                    uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 80064a2:	f000 fb5f 	bl	8006b64 <uartPrintf>
 80064a6:	e093      	b.n	80065d0 <cliMain+0x208>
        switch (rx_data)
 80064a8:	287f      	cmp	r0, #127	@ 0x7f
 80064aa:	d1af      	bne.n	800640c <cliMain+0x44>
            if (line->cursor < line->count)
 80064ac:	f894 0245 	ldrb.w	r0, [r4, #581]	@ 0x245
 80064b0:	f894 5246 	ldrb.w	r5, [r4, #582]	@ 0x246
 80064b4:	42a8      	cmp	r0, r5
 80064b6:	f080 80cd 	bcs.w	8006654 <cliMain+0x28c>
                mov_len = line->count - line->cursor;
 80064ba:	1a2a      	subs	r2, r5, r0
                    line->buf[line->cursor + i - 1] =
 80064bc:	f200 2125 	addw	r1, r0, #549	@ 0x225
 80064c0:	b2d2      	uxtb	r2, r2
 80064c2:	f500 7009 	add.w	r0, r0, #548	@ 0x224
                line->count--;
 80064c6:	3d01      	subs	r5, #1
                    line->buf[line->cursor + i - 1] =
 80064c8:	4421      	add	r1, r4
                line->count--;
 80064ca:	b2ed      	uxtb	r5, r5
                    line->buf[line->cursor + i - 1] =
 80064cc:	3a01      	subs	r2, #1
 80064ce:	4420      	add	r0, r4
 80064d0:	f006 f9ea 	bl	800c8a8 <memmove>
                line->count--;
 80064d4:	f884 5246 	strb.w	r5, [r4, #582]	@ 0x246
                line->buf[line->count] = 0;
 80064d8:	4425      	add	r5, r4
                uartPrintf(p_cli->ch, "\x1B[1P");
 80064da:	4965      	ldr	r1, [pc, #404]	@ (8006670 <cliMain+0x2a8>)
                line->buf[line->count] = 0;
 80064dc:	f885 8224 	strb.w	r8, [r5, #548]	@ 0x224
                uartPrintf(p_cli->ch, "\x1B[1P");
 80064e0:	e073      	b.n	80065ca <cliMain+0x202>
            if (line->count > 0)
 80064e2:	f894 3246 	ldrb.w	r3, [r4, #582]	@ 0x246
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d063      	beq.n	80065b2 <cliMain+0x1ea>
    p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 80064ea:	2323      	movs	r3, #35	@ 0x23
 80064ec:	f894 2196 	ldrb.w	r2, [r4, #406]	@ 0x196
 80064f0:	f504 7509 	add.w	r5, r4, #548	@ 0x224
 80064f4:	fb03 4302 	mla	r3, r3, r2, r4
 80064f8:	f504 7c11 	add.w	ip, r4, #580	@ 0x244
 80064fc:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8006500:	462e      	mov	r6, r5
 8006502:	ce03      	ldmia	r6!, {r0, r1}
 8006504:	4566      	cmp	r6, ip
 8006506:	6018      	str	r0, [r3, #0]
 8006508:	6059      	str	r1, [r3, #4]
 800650a:	4635      	mov	r5, r6
 800650c:	f103 0308 	add.w	r3, r3, #8
 8006510:	d1f6      	bne.n	8006500 <cliMain+0x138>
 8006512:	8830      	ldrh	r0, [r6, #0]
 8006514:	78b1      	ldrb	r1, [r6, #2]
 8006516:	8018      	strh	r0, [r3, #0]
 8006518:	7099      	strb	r1, [r3, #2]
    if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 800651a:	f894 3197 	ldrb.w	r3, [r4, #407]	@ 0x197
    p_cli->argc = 0;
 800651e:	2600      	movs	r6, #0
    if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8006520:	2b03      	cmp	r3, #3
        p_cli->hist_line_count++;
 8006522:	bf9c      	itt	ls
 8006524:	3301      	addls	r3, #1
 8006526:	f884 3197 	strbls.w	r3, [r4, #407]	@ 0x197
    p_cli->hist_line_new  = true;
 800652a:	2301      	movs	r3, #1
    p_cli->hist_line_i    = p_cli->hist_line_last;
 800652c:	f884 2195 	strb.w	r2, [r4, #405]	@ 0x195
    p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8006530:	3201      	adds	r2, #1
 8006532:	f002 0203 	and.w	r2, r2, #3
 8006536:	f884 2196 	strb.w	r2, [r4, #406]	@ 0x196
    for (tok = strtok_r(cmdline, delim, &next_ptr); tok;
 800653a:	494e      	ldr	r1, [pc, #312]	@ (8006674 <cliMain+0x2ac>)
 800653c:	484e      	ldr	r0, [pc, #312]	@ (8006678 <cliMain+0x2b0>)
 800653e:	aa02      	add	r2, sp, #8
    p_cli->hist_line_new  = true;
 8006540:	f884 3194 	strb.w	r3, [r4, #404]	@ 0x194
    p_cli->argc = 0;
 8006544:	f8a4 6112 	strh.w	r6, [r4, #274]	@ 0x112
    argv[argc] = NULL;
 8006548:	f8c4 6114 	str.w	r6, [r4, #276]	@ 0x114
    for (tok = strtok_r(cmdline, delim, &next_ptr); tok;
 800654c:	f006 fa08 	bl	800c960 <strtok_r>
 8006550:	4633      	mov	r3, r6
 8006552:	4605      	mov	r5, r0
        argv[argc++] = tok;
 8006554:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 800667c <cliMain+0x2b4>
         tok = strtok_r(NULL, delim, &next_ptr))
 8006558:	f8df 9118 	ldr.w	r9, [pc, #280]	@ 8006674 <cliMain+0x2ac>
    for (tok = strtok_r(cmdline, delim, &next_ptr); tok;
 800655c:	1c5e      	adds	r6, r3, #1
        argv[argc++] = tok;
 800655e:	b29b      	uxth	r3, r3
    for (tok = strtok_r(cmdline, delim, &next_ptr); tok;
 8006560:	2d00      	cmp	r5, #0
 8006562:	d13d      	bne.n	80065e0 <cliMain+0x218>
    p_cli->argc = argc;
 8006564:	f8a4 3112 	strh.w	r3, [r4, #274]	@ 0x112
    if (argc > 0)
 8006568:	b31b      	cbz	r3, 80065b2 <cliMain+0x1ea>
        cliPrintf("\r\n");
 800656a:	4845      	ldr	r0, [pc, #276]	@ (8006680 <cliMain+0x2b8>)
 800656c:	f7ff fe80 	bl	8006270 <cliPrintf>
        cliToUpper(p_cli->argv[0]);
 8006570:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 8006574:	f7ff fd67 	bl	8006046 <cliToUpper>
        for (int i = 0; i < p_cli->cmd_count; i++)
 8006578:	4e42      	ldr	r6, [pc, #264]	@ (8006684 <cliMain+0x2bc>)
 800657a:	f8b4 8248 	ldrh.w	r8, [r4, #584]	@ 0x248
            if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 800657e:	f8d4 9114 	ldr.w	r9, [r4, #276]	@ 0x114
        for (int i = 0; i < p_cli->cmd_count; i++)
 8006582:	4545      	cmp	r5, r8
 8006584:	da15      	bge.n	80065b2 <cliMain+0x1ea>
            if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8006586:	4631      	mov	r1, r6
 8006588:	4648      	mov	r0, r9
 800658a:	f7fe fde1 	bl	8005150 <strcmp>
 800658e:	3614      	adds	r6, #20
 8006590:	bb80      	cbnz	r0, 80065f4 <cliMain+0x22c>
                p_cli->cmd_args.argc = p_cli->argc - 1;
 8006592:	f8b4 3112 	ldrh.w	r3, [r4, #274]	@ 0x112
                p_cli->cmd_args.argv = &p_cli->argv[1];
 8006596:	483c      	ldr	r0, [pc, #240]	@ (8006688 <cliMain+0x2c0>)
                p_cli->cmd_args.argc = p_cli->argc - 1;
 8006598:	3b01      	subs	r3, #1
 800659a:	f8a4 338c 	strh.w	r3, [r4, #908]	@ 0x38c
                p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 800659e:	2314      	movs	r3, #20
 80065a0:	fb03 4305 	mla	r3, r3, r5, r4
                p_cli->cmd_args.argv = &p_cli->argv[1];
 80065a4:	f8c4 0390 	str.w	r0, [r4, #912]	@ 0x390
                p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 80065a8:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 80065ac:	f500 701d 	add.w	r0, r0, #628	@ 0x274
 80065b0:	4798      	blx	r3
            line->count  = 0;
 80065b2:	2300      	movs	r3, #0
    uartPrintf(p_cli->ch, "\n\r");
 80065b4:	4935      	ldr	r1, [pc, #212]	@ (800668c <cliMain+0x2c4>)
 80065b6:	7820      	ldrb	r0, [r4, #0]
            line->count  = 0;
 80065b8:	f884 3246 	strb.w	r3, [r4, #582]	@ 0x246
            line->cursor = 0;
 80065bc:	f884 3245 	strb.w	r3, [r4, #581]	@ 0x245
            line->buf[0] = 0;
 80065c0:	f884 3224 	strb.w	r3, [r4, #548]	@ 0x224
    uartPrintf(p_cli->ch, "\n\r");
 80065c4:	f000 face 	bl	8006b64 <uartPrintf>
    uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 80065c8:	4931      	ldr	r1, [pc, #196]	@ (8006690 <cliMain+0x2c8>)
                uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 80065ca:	7820      	ldrb	r0, [r4, #0]
 80065cc:	f000 faca 	bl	8006b64 <uartPrintf>
    switch (p_cli->state)
 80065d0:	7c23      	ldrb	r3, [r4, #16]
 80065d2:	3b01      	subs	r3, #1
 80065d4:	2b03      	cmp	r3, #3
 80065d6:	d83d      	bhi.n	8006654 <cliMain+0x28c>
 80065d8:	e8df f003 	tbb	[pc, r3]
 80065dc:	d55e433a 	.word	0xd55e433a
        argv[argc++] = tok;
 80065e0:	f848 5023 	str.w	r5, [r8, r3, lsl #2]
         tok = strtok_r(NULL, delim, &next_ptr))
 80065e4:	4649      	mov	r1, r9
 80065e6:	2000      	movs	r0, #0
 80065e8:	aa02      	add	r2, sp, #8
 80065ea:	f006 f9b9 	bl	800c960 <strtok_r>
 80065ee:	4633      	mov	r3, r6
 80065f0:	4605      	mov	r5, r0
 80065f2:	e7b3      	b.n	800655c <cliMain+0x194>
        for (int i = 0; i < p_cli->cmd_count; i++)
 80065f4:	3501      	adds	r5, #1
 80065f6:	e7c4      	b.n	8006582 <cliMain+0x1ba>
            if (line->count > 0 && line->cursor > 0)
 80065f8:	f894 3246 	ldrb.w	r3, [r4, #582]	@ 0x246
            if (line->cursor < line->count)
 80065fc:	f894 6245 	ldrb.w	r6, [r4, #581]	@ 0x245
            if (line->count > 0 && line->cursor > 0)
 8006600:	b92b      	cbnz	r3, 800660e <cliMain+0x246>
            if (line->cursor > 0)
 8006602:	b33e      	cbz	r6, 8006654 <cliMain+0x28c>
                line->cursor--;
 8006604:	1e73      	subs	r3, r6, #1
                uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8006606:	4923      	ldr	r1, [pc, #140]	@ (8006694 <cliMain+0x2cc>)
                line->cursor--;
 8006608:	f884 3245 	strb.w	r3, [r4, #581]	@ 0x245
                uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 800660c:	e7dd      	b.n	80065ca <cliMain+0x202>
            if (line->count > 0 && line->cursor > 0)
 800660e:	b30e      	cbz	r6, 8006654 <cliMain+0x28c>
                if (line->cursor == line->count)
 8006610:	42b3      	cmp	r3, r6
 8006612:	d106      	bne.n	8006622 <cliMain+0x25a>
                    line->count--;
 8006614:	1e73      	subs	r3, r6, #1
 8006616:	b2db      	uxtb	r3, r3
 8006618:	f884 3246 	strb.w	r3, [r4, #582]	@ 0x246
                    line->buf[line->count] = 0;
 800661c:	4423      	add	r3, r4
 800661e:	f883 8224 	strb.w	r8, [r3, #548]	@ 0x224
                if (line->cursor < line->count)
 8006622:	f894 5246 	ldrb.w	r5, [r4, #582]	@ 0x246
 8006626:	42b5      	cmp	r5, r6
 8006628:	d9ec      	bls.n	8006604 <cliMain+0x23c>
                    mov_len = line->count - line->cursor;
 800662a:	1baa      	subs	r2, r5, r6
                        line->buf[line->cursor + i - 1] =
 800662c:	f506 7109 	add.w	r1, r6, #548	@ 0x224
 8006630:	f206 2023 	addw	r0, r6, #547	@ 0x223
 8006634:	b2d2      	uxtb	r2, r2
 8006636:	4421      	add	r1, r4
 8006638:	4420      	add	r0, r4
 800663a:	f006 f935 	bl	800c8a8 <memmove>
                    line->buf[line->count] = 0;
 800663e:	2300      	movs	r3, #0
                    line->count--;
 8006640:	3d01      	subs	r5, #1
 8006642:	b2ed      	uxtb	r5, r5
 8006644:	f884 5246 	strb.w	r5, [r4, #582]	@ 0x246
                    line->buf[line->count] = 0;
 8006648:	4425      	add	r5, r4
 800664a:	f885 3224 	strb.w	r3, [r5, #548]	@ 0x224
            if (line->cursor > 0)
 800664e:	e7d9      	b.n	8006604 <cliMain+0x23c>
        p_cli->state = CLI_RX_SP2;
 8006650:	2302      	movs	r3, #2
        p_cli->state = CLI_RX_IDLE;
 8006652:	7423      	strb	r3, [r4, #16]
    cliShowLog(p_cli);
 8006654:	4804      	ldr	r0, [pc, #16]	@ (8006668 <cliMain+0x2a0>)
 8006656:	f7ff fdaf 	bl	80061b8 <cliShowLog>
}
 800665a:	4638      	mov	r0, r7
 800665c:	b005      	add	sp, #20
 800665e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        p_cli->state = CLI_RX_SP3;
 8006662:	2303      	movs	r3, #3
 8006664:	e7f5      	b.n	8006652 <cliMain+0x28a>
 8006666:	bf00      	nop
 8006668:	2000037c 	.word	0x2000037c
 800666c:	0800ea92 	.word	0x0800ea92
 8006670:	0800ea8d 	.word	0x0800ea8d
 8006674:	0800ea7a 	.word	0x0800ea7a
 8006678:	200005a0 	.word	0x200005a0
 800667c:	20000490 	.word	0x20000490
 8006680:	0800ea22 	.word	0x0800ea22
 8006684:	200005c8 	.word	0x200005c8
 8006688:	20000494 	.word	0x20000494
 800668c:	0800ea81 	.word	0x0800ea81
 8006690:	0800ea84 	.word	0x0800ea84
 8006694:	0800ea8a 	.word	0x0800ea8a
        p_cli->state = CLI_RX_IDLE;
 8006698:	2300      	movs	r3, #0
        if (rx_data == CLI_KEY_LEFT)
 800669a:	f89d 2007 	ldrb.w	r2, [sp, #7]
        p_cli->state = CLI_RX_IDLE;
 800669e:	7423      	strb	r3, [r4, #16]
        if (rx_data == CLI_KEY_LEFT)
 80066a0:	2a44      	cmp	r2, #68	@ 0x44
 80066a2:	d110      	bne.n	80066c6 <cliMain+0x2fe>
            if (line->cursor > 0)
 80066a4:	f894 3245 	ldrb.w	r3, [r4, #581]	@ 0x245
 80066a8:	b38b      	cbz	r3, 800670e <cliMain+0x346>
                line->cursor--;
 80066aa:	3b01      	subs	r3, #1
 80066ac:	f884 3245 	strb.w	r3, [r4, #581]	@ 0x245
                tx_buf[0] = 0x1B;
 80066b0:	f645 331b 	movw	r3, #23323	@ 0x5b1b
                tx_buf[2] = rx_data;
 80066b4:	f88d 200a 	strb.w	r2, [sp, #10]
                uartWrite(p_cli->ch, tx_buf, 3);
 80066b8:	7820      	ldrb	r0, [r4, #0]
 80066ba:	2203      	movs	r2, #3
 80066bc:	a902      	add	r1, sp, #8
                tx_buf[0] = 0x1B;
 80066be:	f8ad 3008 	strh.w	r3, [sp, #8]
                uartWrite(p_cli->ch, tx_buf, 3);
 80066c2:	f000 fa35 	bl	8006b30 <uartWrite>
        if (rx_data == CLI_KEY_RIGHT)
 80066c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80066ca:	2b43      	cmp	r3, #67	@ 0x43
 80066cc:	d114      	bne.n	80066f8 <cliMain+0x330>
            if (line->cursor < line->buf_len)
 80066ce:	f894 3245 	ldrb.w	r3, [r4, #581]	@ 0x245
 80066d2:	f894 2244 	ldrb.w	r2, [r4, #580]	@ 0x244
            uartWrite(p_cli->ch, tx_buf, 3);
 80066d6:	7820      	ldrb	r0, [r4, #0]
            if (line->cursor < line->buf_len)
 80066d8:	429a      	cmp	r2, r3
                line->cursor++;
 80066da:	bf84      	itt	hi
 80066dc:	3301      	addhi	r3, #1
 80066de:	f884 3245 	strbhi.w	r3, [r4, #581]	@ 0x245
            tx_buf[0] = 0x1B;
 80066e2:	f645 331b 	movw	r3, #23323	@ 0x5b1b
 80066e6:	f8ad 3008 	strh.w	r3, [sp, #8]
            tx_buf[2] = rx_data;
 80066ea:	2343      	movs	r3, #67	@ 0x43
            uartWrite(p_cli->ch, tx_buf, 3);
 80066ec:	2203      	movs	r2, #3
 80066ee:	a902      	add	r1, sp, #8
            tx_buf[2] = rx_data;
 80066f0:	f88d 300a 	strb.w	r3, [sp, #10]
            uartWrite(p_cli->ch, tx_buf, 3);
 80066f4:	f000 fa1c 	bl	8006b30 <uartWrite>
        if (rx_data == CLI_KEY_UP)
 80066f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80066fc:	2b41      	cmp	r3, #65	@ 0x41
 80066fe:	d106      	bne.n	800670e <cliMain+0x346>
            cliLineChange(p_cli, true);
 8006700:	2001      	movs	r0, #1
 8006702:	f7ff fcfb 	bl	80060fc <cliLineChange.constprop.0>
            uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8006706:	4921      	ldr	r1, [pc, #132]	@ (800678c <cliMain+0x3c4>)
 8006708:	7820      	ldrb	r0, [r4, #0]
 800670a:	f000 fa2b 	bl	8006b64 <uartPrintf>
        if (rx_data == CLI_KEY_DOWN)
 800670e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006712:	2b42      	cmp	r3, #66	@ 0x42
 8006714:	d106      	bne.n	8006724 <cliMain+0x35c>
            cliLineChange(p_cli, false);
 8006716:	2000      	movs	r0, #0
 8006718:	f7ff fcf0 	bl	80060fc <cliLineChange.constprop.0>
            uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800671c:	491b      	ldr	r1, [pc, #108]	@ (800678c <cliMain+0x3c4>)
 800671e:	7820      	ldrb	r0, [r4, #0]
 8006720:	f000 fa20 	bl	8006b64 <uartPrintf>
        if (rx_data == CLI_KEY_HOME)
 8006724:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006728:	2b31      	cmp	r3, #49	@ 0x31
 800672a:	d10a      	bne.n	8006742 <cliMain+0x37a>
            uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 800672c:	f894 2245 	ldrb.w	r2, [r4, #581]	@ 0x245
 8006730:	4917      	ldr	r1, [pc, #92]	@ (8006790 <cliMain+0x3c8>)
 8006732:	7820      	ldrb	r0, [r4, #0]
 8006734:	f000 fa16 	bl	8006b64 <uartPrintf>
            line->cursor = 0;
 8006738:	2300      	movs	r3, #0
 800673a:	f884 3245 	strb.w	r3, [r4, #581]	@ 0x245
            p_cli->state = CLI_RX_SP4;
 800673e:	2304      	movs	r3, #4
 8006740:	7423      	strb	r3, [r4, #16]
        if (rx_data == CLI_KEY_END)
 8006742:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006746:	2b34      	cmp	r3, #52	@ 0x34
 8006748:	d184      	bne.n	8006654 <cliMain+0x28c>
            if (line->cursor < line->count)
 800674a:	f894 3245 	ldrb.w	r3, [r4, #581]	@ 0x245
 800674e:	f894 2246 	ldrb.w	r2, [r4, #582]	@ 0x246
 8006752:	4293      	cmp	r3, r2
 8006754:	d205      	bcs.n	8006762 <cliMain+0x39a>
                mov_len = line->count - line->cursor;
 8006756:	1ad2      	subs	r2, r2, r3
                uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8006758:	490e      	ldr	r1, [pc, #56]	@ (8006794 <cliMain+0x3cc>)
 800675a:	7820      	ldrb	r0, [r4, #0]
 800675c:	b292      	uxth	r2, r2
 800675e:	f000 fa01 	bl	8006b64 <uartPrintf>
            if (line->cursor > line->count)
 8006762:	f894 2245 	ldrb.w	r2, [r4, #581]	@ 0x245
 8006766:	f894 3246 	ldrb.w	r3, [r4, #582]	@ 0x246
 800676a:	429a      	cmp	r2, r3
 800676c:	d905      	bls.n	800677a <cliMain+0x3b2>
                mov_len = line->cursor - line->count;
 800676e:	1ad2      	subs	r2, r2, r3
                uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8006770:	4907      	ldr	r1, [pc, #28]	@ (8006790 <cliMain+0x3c8>)
 8006772:	7820      	ldrb	r0, [r4, #0]
 8006774:	b292      	uxth	r2, r2
 8006776:	f000 f9f5 	bl	8006b64 <uartPrintf>
            line->cursor = line->count;
 800677a:	f894 3246 	ldrb.w	r3, [r4, #582]	@ 0x246
 800677e:	f884 3245 	strb.w	r3, [r4, #581]	@ 0x245
            p_cli->state = CLI_RX_SP4;
 8006782:	2304      	movs	r3, #4
 8006784:	e765      	b.n	8006652 <cliMain+0x28a>
        p_cli->state = CLI_RX_IDLE;
 8006786:	2300      	movs	r3, #0
 8006788:	e763      	b.n	8006652 <cliMain+0x28a>
 800678a:	bf00      	nop
 800678c:	200005a0 	.word	0x200005a0
 8006790:	0800e980 	.word	0x0800e980
 8006794:	0800ea9d 	.word	0x0800ea9d

08006798 <cliKeepLoop>:
{
 8006798:	b508      	push	{r3, lr}
    if (uartAvailable(p_cli->ch) == 0)
 800679a:	4b04      	ldr	r3, [pc, #16]	@ (80067ac <cliKeepLoop+0x14>)
 800679c:	7818      	ldrb	r0, [r3, #0]
 800679e:	f000 f997 	bl	8006ad0 <uartAvailable>
}
 80067a2:	fab0 f080 	clz	r0, r0
 80067a6:	0940      	lsrs	r0, r0, #5
 80067a8:	bd08      	pop	{r3, pc}
 80067aa:	bf00      	nop
 80067ac:	2000037c 	.word	0x2000037c

080067b0 <cliAdd>:
{
 80067b0:	b570      	push	{r4, r5, r6, lr}
    if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 80067b2:	4d0e      	ldr	r5, [pc, #56]	@ (80067ec <cliAdd+0x3c>)
{
 80067b4:	460e      	mov	r6, r1
    if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 80067b6:	f8b5 4248 	ldrh.w	r4, [r5, #584]	@ 0x248
 80067ba:	2c0f      	cmp	r4, #15
 80067bc:	d814      	bhi.n	80067e8 <cliAdd+0x38>
    strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 80067be:	2314      	movs	r3, #20
 80067c0:	435c      	muls	r4, r3
 80067c2:	f504 7313 	add.w	r3, r4, #588	@ 0x24c
 80067c6:	442b      	add	r3, r5
 80067c8:	4601      	mov	r1, r0
 80067ca:	4618      	mov	r0, r3
 80067cc:	f006 f93f 	bl	800ca4e <strcpy>
    p_cli->cmd_list[index].cmd_func = p_func;
 80067d0:	442c      	add	r4, r5
 80067d2:	f8c4 625c 	str.w	r6, [r4, #604]	@ 0x25c
    cliToUpper(p_cli->cmd_list[index].cmd_str);
 80067d6:	f7ff fc36 	bl	8006046 <cliToUpper>
    return ret;
 80067da:	2001      	movs	r0, #1
    p_cli->cmd_count++;
 80067dc:	f8b5 3248 	ldrh.w	r3, [r5, #584]	@ 0x248
 80067e0:	3301      	adds	r3, #1
 80067e2:	f8a5 3248 	strh.w	r3, [r5, #584]	@ 0x248
}
 80067e6:	bd70      	pop	{r4, r5, r6, pc}
        return false;
 80067e8:	2000      	movs	r0, #0
 80067ea:	e7fc      	b.n	80067e6 <cliAdd+0x36>
 80067ec:	2000037c 	.word	0x2000037c

080067f0 <cliInit>:
{
 80067f0:	b508      	push	{r3, lr}
    cli_node.cmd_args.getData  = cliArgsGetData;
 80067f2:	4911      	ldr	r1, [pc, #68]	@ (8006838 <cliInit+0x48>)
    cli_node.is_open = false;
 80067f4:	4b11      	ldr	r3, [pc, #68]	@ (800683c <cliInit+0x4c>)
 80067f6:	2200      	movs	r2, #0
    cli_node.cmd_args.getData  = cliArgsGetData;
 80067f8:	f8c3 1394 	str.w	r1, [r3, #916]	@ 0x394
    cli_node.cmd_args.getFloat = cliArgsGetFloat;
 80067fc:	4910      	ldr	r1, [pc, #64]	@ (8006840 <cliInit+0x50>)
    cliAdd("help", cliShowList);
 80067fe:	4811      	ldr	r0, [pc, #68]	@ (8006844 <cliInit+0x54>)
    cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8006800:	f8c3 1398 	str.w	r1, [r3, #920]	@ 0x398
    cli_node.cmd_args.getStr   = cliArgsGetStr;
 8006804:	4910      	ldr	r1, [pc, #64]	@ (8006848 <cliInit+0x58>)
    cli_node.is_open = false;
 8006806:	811a      	strh	r2, [r3, #8]
    cli_node.cmd_args.getStr   = cliArgsGetStr;
 8006808:	f8c3 139c 	str.w	r1, [r3, #924]	@ 0x39c
    cli_node.cmd_args.isStr    = cliArgsIsStr;
 800680c:	490f      	ldr	r1, [pc, #60]	@ (800684c <cliInit+0x5c>)
    cli_node.state   = CLI_RX_IDLE;
 800680e:	741a      	strb	r2, [r3, #16]
    cli_node.cmd_args.isStr    = cliArgsIsStr;
 8006810:	f8c3 13a0 	str.w	r1, [r3, #928]	@ 0x3a0
    p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8006814:	211f      	movs	r1, #31
 8006816:	f8a3 1244 	strh.w	r1, [r3, #580]	@ 0x244
    cliAdd("help", cliShowList);
 800681a:	490d      	ldr	r1, [pc, #52]	@ (8006850 <cliInit+0x60>)
    cli_node.hist_line_new   = false;
 800681c:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
    p_cli->line.count   = 0;
 8006820:	f883 2246 	strb.w	r2, [r3, #582]	@ 0x246
    p_cli->line.buf[0]  = 0;
 8006824:	f883 2224 	strb.w	r2, [r3, #548]	@ 0x224
    cliAdd("help", cliShowList);
 8006828:	f7ff ffc2 	bl	80067b0 <cliAdd>
    cliAdd("md", cliMemoryDump);
 800682c:	4909      	ldr	r1, [pc, #36]	@ (8006854 <cliInit+0x64>)
 800682e:	480a      	ldr	r0, [pc, #40]	@ (8006858 <cliInit+0x68>)
 8006830:	f7ff ffbe 	bl	80067b0 <cliAdd>
}
 8006834:	2001      	movs	r0, #1
 8006836:	bd08      	pop	{r3, pc}
 8006838:	080060d9 	.word	0x080060d9
 800683c:	2000037c 	.word	0x2000037c
 8006840:	080060b9 	.word	0x080060b9
 8006844:	0800eaa3 	.word	0x0800eaa3
 8006848:	08006071 	.word	0x08006071
 800684c:	0800608d 	.word	0x0800608d
 8006850:	080062a5 	.word	0x080062a5
 8006854:	080062f1 	.word	0x080062f1
 8006858:	0800eaa8 	.word	0x0800eaa8

0800685c <flashInit>:
static flash_tbl_t flash_tbl[FLASH_SECTOR_MAX];

static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);

bool flashInit(void)
{
 800685c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
    for (int i = 0; i < FLASH_SECTOR_MAX; i++)
    {
        flash_tbl[i].addr   = 0x8000000 + i * 1024;
        flash_tbl[i].length = 1024;
 8006860:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8006864:	4a05      	ldr	r2, [pc, #20]	@ (800687c <flashInit+0x20>)
    for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 8006866:	4906      	ldr	r1, [pc, #24]	@ (8006880 <flashInit+0x24>)
        flash_tbl[i].addr   = 0x8000000 + i * 1024;
 8006868:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 800686a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800686e:	428b      	cmp	r3, r1
        flash_tbl[i].length = 1024;
 8006870:	8090      	strh	r0, [r2, #4]
    for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 8006872:	f102 0208 	add.w	r2, r2, #8
 8006876:	d1f7      	bne.n	8006868 <flashInit+0xc>
    }
    return true;
}
 8006878:	2001      	movs	r0, #1
 800687a:	4770      	bx	lr
 800687c:	20000720 	.word	0x20000720
 8006880:	08010000 	.word	0x08010000

08006884 <ledOff.part.0>:

void ledOff(uint8_t ch)
{
    if (ch >= LED_MAX_CH)
        return;
    HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8006884:	4b02      	ldr	r3, [pc, #8]	@ (8006890 <ledOff.part.0+0xc>)
 8006886:	79da      	ldrb	r2, [r3, #7]
 8006888:	8899      	ldrh	r1, [r3, #4]
 800688a:	6818      	ldr	r0, [r3, #0]
 800688c:	f001 bba6 	b.w	8007fdc <HAL_GPIO_WritePin>
 8006890:	20000004 	.word	0x20000004

08006894 <ledInit>:
{
 8006894:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006896:	2210      	movs	r2, #16
 8006898:	2100      	movs	r1, #0
 800689a:	4668      	mov	r0, sp
 800689c:	f006 f81e 	bl	800c8dc <memset>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80068a0:	2200      	movs	r2, #0
 80068a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80068a6:	480c      	ldr	r0, [pc, #48]	@ (80068d8 <ledInit+0x44>)
 80068a8:	f001 fb98 	bl	8007fdc <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80068ac:	2401      	movs	r4, #1
 80068ae:	2300      	movs	r3, #0
 80068b0:	e9cd 4301 	strd	r4, r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068b4:	2302      	movs	r3, #2
 80068b6:	9303      	str	r3, [sp, #12]
        GPIO_InitStruct.Pin = led_tbl[i].pin;
 80068b8:	4b08      	ldr	r3, [pc, #32]	@ (80068dc <ledInit+0x48>)
        HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80068ba:	4669      	mov	r1, sp
        GPIO_InitStruct.Pin = led_tbl[i].pin;
 80068bc:	889a      	ldrh	r2, [r3, #4]
        HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80068be:	6818      	ldr	r0, [r3, #0]
        GPIO_InitStruct.Pin = led_tbl[i].pin;
 80068c0:	9200      	str	r2, [sp, #0]
        HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80068c2:	f001 fa45 	bl	8007d50 <HAL_GPIO_Init>
    if (ch >= LED_MAX_CH)
 80068c6:	f7ff ffdd 	bl	8006884 <ledOff.part.0>
    cliAdd("led", cliLed);
 80068ca:	4905      	ldr	r1, [pc, #20]	@ (80068e0 <ledInit+0x4c>)
 80068cc:	4805      	ldr	r0, [pc, #20]	@ (80068e4 <ledInit+0x50>)
 80068ce:	f7ff ff6f 	bl	80067b0 <cliAdd>
}
 80068d2:	4620      	mov	r0, r4
 80068d4:	b004      	add	sp, #16
 80068d6:	bd10      	pop	{r4, pc}
 80068d8:	40011000 	.word	0x40011000
 80068dc:	20000004 	.word	0x20000004
 80068e0:	080068fd 	.word	0x080068fd
 80068e4:	0800eaab 	.word	0x0800eaab

080068e8 <ledToggle>:
}

void ledToggle(uint8_t ch)
{
    if (ch >= LED_MAX_CH)
 80068e8:	b920      	cbnz	r0, 80068f4 <ledToggle+0xc>
        return;
    HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80068ea:	4b03      	ldr	r3, [pc, #12]	@ (80068f8 <ledToggle+0x10>)
 80068ec:	8899      	ldrh	r1, [r3, #4]
 80068ee:	6818      	ldr	r0, [r3, #0]
 80068f0:	f001 bb79 	b.w	8007fe6 <HAL_GPIO_TogglePin>
}
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	20000004 	.word	0x20000004

080068fc <cliLed>:
#ifdef _USE_HW_CLI
void cliLed(cli_args_t *args)
{
    bool ret = false;

    if (args->argc == 3 && args->isStr(0, "toggle") == true)
 80068fc:	8803      	ldrh	r3, [r0, #0]
{
 80068fe:	b570      	push	{r4, r5, r6, lr}
    if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8006900:	2b03      	cmp	r3, #3
{
 8006902:	4605      	mov	r5, r0
    if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8006904:	d122      	bne.n	800694c <cliLed+0x50>
 8006906:	6943      	ldr	r3, [r0, #20]
 8006908:	4913      	ldr	r1, [pc, #76]	@ (8006958 <cliLed+0x5c>)
 800690a:	2000      	movs	r0, #0
 800690c:	4798      	blx	r3
 800690e:	b1e8      	cbz	r0, 800694c <cliLed+0x50>
    {
        uint8_t led_ch;
        uint32_t toggle_time;
        uint32_t pre_time;

        led_ch      = (uint8_t)args->getData(1);
 8006910:	68ab      	ldr	r3, [r5, #8]
 8006912:	2001      	movs	r0, #1
 8006914:	4798      	blx	r3
        toggle_time = (uint32_t)args->getData(2);
 8006916:	68ab      	ldr	r3, [r5, #8]
        led_ch      = (uint8_t)args->getData(1);
 8006918:	b2c4      	uxtb	r4, r0
        toggle_time = (uint32_t)args->getData(2);
 800691a:	2002      	movs	r0, #2
 800691c:	4798      	blx	r3
 800691e:	4606      	mov	r6, r0

        if (led_ch > 0)
 8006920:	b10c      	cbz	r4, 8006926 <cliLed+0x2a>
        {
            led_ch--;
 8006922:	3c01      	subs	r4, #1
 8006924:	b2e4      	uxtb	r4, r4
        }

        pre_time = millis();
 8006926:	f7ff fa0f 	bl	8005d48 <millis>
 800692a:	4605      	mov	r5, r0
        while (cliKeepLoop())
 800692c:	f7ff ff34 	bl	8006798 <cliKeepLoop>
 8006930:	b900      	cbnz	r0, 8006934 <cliLed+0x38>

    if (ret != true)
    {
        cliPrintf("led toggle ch[1~%d] time_ms\r\n", LED_MAX_CH);
    }
}
 8006932:	bd70      	pop	{r4, r5, r6, pc}
            if (millis() - pre_time >= toggle_time)
 8006934:	f7ff fa08 	bl	8005d48 <millis>
 8006938:	1b40      	subs	r0, r0, r5
 800693a:	4286      	cmp	r6, r0
 800693c:	d8f6      	bhi.n	800692c <cliLed+0x30>
                pre_time = millis();
 800693e:	f7ff fa03 	bl	8005d48 <millis>
 8006942:	4605      	mov	r5, r0
                ledToggle(led_ch);
 8006944:	4620      	mov	r0, r4
 8006946:	f7ff ffcf 	bl	80068e8 <ledToggle>
 800694a:	e7ef      	b.n	800692c <cliLed+0x30>
        cliPrintf("led toggle ch[1~%d] time_ms\r\n", LED_MAX_CH);
 800694c:	2101      	movs	r1, #1
}
 800694e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        cliPrintf("led toggle ch[1~%d] time_ms\r\n", LED_MAX_CH);
 8006952:	4802      	ldr	r0, [pc, #8]	@ (800695c <cliLed+0x60>)
 8006954:	f7ff bc8c 	b.w	8006270 <cliPrintf>
 8006958:	0800eaaf 	.word	0x0800eaaf
 800695c:	0800eab6 	.word	0x0800eab6

08006960 <resetInit>:
#include "rtc.h"

static uint32_t reset_count = 0;

bool resetInit(void)
{
 8006960:	b508      	push	{r3, lr}
    bool ret = true;

    // push reset btn
    if (RCC->CSR & (1 << 26))
 8006962:	4b0d      	ldr	r3, [pc, #52]	@ (8006998 <resetInit+0x38>)
 8006964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006966:	015b      	lsls	r3, r3, #5
 8006968:	d50f      	bpl.n	800698a <resetInit+0x2a>
    {
        rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1);
 800696a:	2001      	movs	r0, #1
 800696c:	f000 f834 	bl	80069d8 <rtcBackupRegRead>
 8006970:	1c41      	adds	r1, r0, #1
 8006972:	2001      	movs	r0, #1
 8006974:	f000 f828 	bl	80069c8 <rtcBackupRegWrite>
        delay(500);
 8006978:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800697c:	f7ff f9d5 	bl	8005d2a <delay>
        reset_count = rtcBackupRegRead(1);
 8006980:	2001      	movs	r0, #1
 8006982:	f000 f829 	bl	80069d8 <rtcBackupRegRead>
 8006986:	4b05      	ldr	r3, [pc, #20]	@ (800699c <resetInit+0x3c>)
 8006988:	6018      	str	r0, [r3, #0]
    }

    rtcBackupRegWrite(1, 0);
 800698a:	2100      	movs	r1, #0
 800698c:	2001      	movs	r0, #1
 800698e:	f000 f81b 	bl	80069c8 <rtcBackupRegWrite>

    return ret;
}
 8006992:	2001      	movs	r0, #1
 8006994:	bd08      	pop	{r3, pc}
 8006996:	bf00      	nop
 8006998:	40021000 	.word	0x40021000
 800699c:	20000920 	.word	0x20000920

080069a0 <rtcInit>:
#include "rtc.h"

static RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 80069a0:	b508      	push	{r3, lr}
    bool ret = true;
//    __HAL_RCC_GPIOC_CLK_ENABLE();

    hrtc.Instance          = RTC;
    hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80069a2:	f04f 33ff 	mov.w	r3, #4294967295
    hrtc.Instance          = RTC;
 80069a6:	4806      	ldr	r0, [pc, #24]	@ (80069c0 <rtcInit+0x20>)
    hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80069a8:	4a06      	ldr	r2, [pc, #24]	@ (80069c4 <rtcInit+0x24>)
 80069aa:	e9c0 2300 	strd	r2, r3, [r0]
    hrtc.Init.OutPut       = RTC_OUTPUTSOURCE_NONE;
 80069ae:	2300      	movs	r3, #0
 80069b0:	6083      	str	r3, [r0, #8]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80069b2:	f002 fd6b 	bl	800948c <HAL_RTC_Init>
 80069b6:	b108      	cbz	r0, 80069bc <rtcInit+0x1c>
    {
        Error_Handler();
 80069b8:	f7ff fa52 	bl	8005e60 <Error_Handler>
    }

    return ret;
}
 80069bc:	2001      	movs	r0, #1
 80069be:	bd08      	pop	{r3, pc}
 80069c0:	20000924 	.word	0x20000924
 80069c4:	40002800 	.word	0x40002800

080069c8 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 80069c8:	460a      	mov	r2, r1

    HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 80069ca:	4601      	mov	r1, r0
 80069cc:	4801      	ldr	r0, [pc, #4]	@ (80069d4 <rtcBackupRegWrite+0xc>)
 80069ce:	f002 bda3 	b.w	8009518 <HAL_RTCEx_BKUPWrite>
 80069d2:	bf00      	nop
 80069d4:	20000924 	.word	0x20000924

080069d8 <rtcBackupRegRead>:
}

uint32_t rtcBackupRegRead(uint32_t index)
{
 80069d8:	4601      	mov	r1, r0
    return HAL_RTCEx_BKUPRead(&hrtc, index);
 80069da:	4801      	ldr	r0, [pc, #4]	@ (80069e0 <rtcBackupRegRead+0x8>)
 80069dc:	f002 bda4 	b.w	8009528 <HAL_RTCEx_BKUPRead>
 80069e0:	20000924 	.word	0x20000924

080069e4 <HAL_RTC_MspInit>:
}

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 80069e4:	b507      	push	{r0, r1, r2, lr}

    if (rtcHandle->Instance == RTC)
 80069e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006a14 <HAL_RTC_MspInit+0x30>)
 80069e8:	6802      	ldr	r2, [r0, #0]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d10f      	bne.n	8006a0e <HAL_RTC_MspInit+0x2a>
    {
        /* USER CODE BEGIN RTC_MspInit 0 */

        /* USER CODE END RTC_MspInit 0 */
        HAL_PWR_EnableBkUpAccess();
 80069ee:	f002 f9a7 	bl	8008d40 <HAL_PWR_EnableBkUpAccess>
        /* Enable BKP CLK enable for backup registers */
        __HAL_RCC_BKP_CLK_ENABLE();
 80069f2:	4b09      	ldr	r3, [pc, #36]	@ (8006a18 <HAL_RTC_MspInit+0x34>)
 80069f4:	69da      	ldr	r2, [r3, #28]
 80069f6:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 80069fa:	61da      	str	r2, [r3, #28]
        /* RTC clock enable */
        __HAL_RCC_RTC_ENABLE();
 80069fc:	2201      	movs	r2, #1
        __HAL_RCC_BKP_CLK_ENABLE();
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a04:	9301      	str	r3, [sp, #4]
 8006a06:	9b01      	ldr	r3, [sp, #4]
        __HAL_RCC_RTC_ENABLE();
 8006a08:	4b04      	ldr	r3, [pc, #16]	@ (8006a1c <HAL_RTC_MspInit+0x38>)
 8006a0a:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
        /* USER CODE BEGIN RTC_MspInit 1 */

        /* USER CODE END RTC_MspInit 1 */
    }
}
 8006a0e:	b003      	add	sp, #12
 8006a10:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a14:	40002800 	.word	0x40002800
 8006a18:	40021000 	.word	0x40021000
 8006a1c:	42420000 	.word	0x42420000

08006a20 <uartInit>:
    {
        is_open[i] = false;
    }

    return true;
}
 8006a20:	2001      	movs	r0, #1
 8006a22:	4770      	bx	lr

08006a24 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8006a24:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool ret = false;
    switch (ch)
 8006a26:	2800      	cmp	r0, #0
 8006a28:	d041      	beq.n	8006aae <uartOpen+0x8a>
 8006a2a:	2801      	cmp	r0, #1
 8006a2c:	d12a      	bne.n	8006a84 <uartOpen+0x60>
        is_open[ch] = true;
        ret         = true;
        break;

    case _DEF_UART2:
        huart1.Instance          = USART1;
 8006a2e:	4c21      	ldr	r4, [pc, #132]	@ (8006ab4 <uartOpen+0x90>)
 8006a30:	4b21      	ldr	r3, [pc, #132]	@ (8006ab8 <uartOpen+0x94>)
        huart1.Init.BaudRate     = baud;
        huart1.Init.WordLength   = UART_WORDLENGTH_8B;
 8006a32:	2500      	movs	r5, #0
        huart1.Init.BaudRate     = baud;
 8006a34:	e9c4 3100 	strd	r3, r1, [r4]
        huart1.Init.StopBits     = UART_STOPBITS_1;
        huart1.Init.Parity       = UART_PARITY_NONE;
        huart1.Init.Mode         = UART_MODE_TX_RX;
 8006a38:	230c      	movs	r3, #12
        huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
        huart1.Init.OverSampling = UART_OVERSAMPLING_16;

        HAL_UART_DeInit(&huart1);
 8006a3a:	4620      	mov	r0, r4
        huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8006a3c:	e9c4 3505 	strd	r3, r5, [r4, #20]
        huart1.Init.StopBits     = UART_STOPBITS_1;
 8006a40:	e9c4 5502 	strd	r5, r5, [r4, #8]
        huart1.Init.Parity       = UART_PARITY_NONE;
 8006a44:	6125      	str	r5, [r4, #16]
        huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006a46:	61e5      	str	r5, [r4, #28]
        HAL_UART_DeInit(&huart1);
 8006a48:	f002 fe3f 	bl	80096ca <HAL_UART_DeInit>

        qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8006a4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a50:	491a      	ldr	r1, [pc, #104]	@ (8006abc <uartOpen+0x98>)
 8006a52:	481b      	ldr	r0, [pc, #108]	@ (8006ac0 <uartOpen+0x9c>)
 8006a54:	f7ff facd 	bl	8005ff2 <qbufferCreate>

        __HAL_RCC_DMA1_CLK_ENABLE();
 8006a58:	4b1a      	ldr	r3, [pc, #104]	@ (8006ac4 <uartOpen+0xa0>)
        HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006a5a:	4629      	mov	r1, r5
        __HAL_RCC_DMA1_CLK_ENABLE();
 8006a5c:	695a      	ldr	r2, [r3, #20]
        HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006a5e:	200f      	movs	r0, #15
        __HAL_RCC_DMA1_CLK_ENABLE();
 8006a60:	f042 0201 	orr.w	r2, r2, #1
 8006a64:	615a      	str	r2, [r3, #20]
 8006a66:	695b      	ldr	r3, [r3, #20]
        HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006a68:	462a      	mov	r2, r5
        __HAL_RCC_DMA1_CLK_ENABLE();
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	9301      	str	r3, [sp, #4]
 8006a70:	9b01      	ldr	r3, [sp, #4]
        HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006a72:	f000 ff77 	bl	8007964 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8006a76:	200f      	movs	r0, #15
 8006a78:	f000 ffa4 	bl	80079c4 <HAL_NVIC_EnableIRQ>

        if (HAL_UART_Init(&huart1) != HAL_OK)
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f002 fdf5 	bl	800966c <HAL_UART_Init>
 8006a82:	b110      	cbz	r0, 8006a8a <uartOpen+0x66>
    bool ret = false;
 8006a84:	2000      	movs	r0, #0
            qbuffer[ch].out = qbuffer[ch].in;
        }
        break;
    }
    return ret;
}
 8006a86:	b003      	add	sp, #12
 8006a88:	bd30      	pop	{r4, r5, pc}
            if (HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) !=
 8006a8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a8e:	490b      	ldr	r1, [pc, #44]	@ (8006abc <uartOpen+0x98>)
 8006a90:	4620      	mov	r0, r4
 8006a92:	f003 f907 	bl	8009ca4 <HAL_UART_Receive_DMA>
 8006a96:	fab0 f080 	clz	r0, r0
            qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8006a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac8 <uartOpen+0xa4>)
 8006a9c:	4a0b      	ldr	r2, [pc, #44]	@ (8006acc <uartOpen+0xa8>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
            if (HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) !=
 8006aa0:	0940      	lsrs	r0, r0, #5
            qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8006aa2:	6859      	ldr	r1, [r3, #4]
 8006aa4:	6993      	ldr	r3, [r2, #24]
 8006aa6:	1a5b      	subs	r3, r3, r1
            qbuffer[ch].out = qbuffer[ch].in;
 8006aa8:	e9c2 3304 	strd	r3, r3, [r2, #16]
 8006aac:	e7eb      	b.n	8006a86 <uartOpen+0x62>
        ret         = true;
 8006aae:	2001      	movs	r0, #1
 8006ab0:	e7e9      	b.n	8006a86 <uartOpen+0x62>
 8006ab2:	bf00      	nop
 8006ab4:	2000097c 	.word	0x2000097c
 8006ab8:	40013800 	.word	0x40013800
 8006abc:	200009c4 	.word	0x200009c4
 8006ac0:	20000ad4 	.word	0x20000ad4
 8006ac4:	40021000 	.word	0x40021000
 8006ac8:	20000938 	.word	0x20000938
 8006acc:	20000ac4 	.word	0x20000ac4

08006ad0 <uartAvailable>:
uint32_t uartAvailable(uint8_t ch)
{
    uint32_t ret = 0;

    switch (ch)
 8006ad0:	b118      	cbz	r0, 8006ada <uartAvailable+0xa>
 8006ad2:	2801      	cmp	r0, #1
 8006ad4:	d003      	beq.n	8006ade <uartAvailable+0xe>
        ret            = qbufferAvailable(&qbuffer[ch]);
        break;
    }

    return ret;
}
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	4770      	bx	lr
        ret = cdcAvailable();
 8006ada:	f004 bb89 	b.w	800b1f0 <cdcAvailable>
        qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8006ade:	4b05      	ldr	r3, [pc, #20]	@ (8006af4 <uartAvailable+0x24>)
 8006ae0:	4805      	ldr	r0, [pc, #20]	@ (8006af8 <uartAvailable+0x28>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	685a      	ldr	r2, [r3, #4]
 8006ae6:	6983      	ldr	r3, [r0, #24]
 8006ae8:	1a9b      	subs	r3, r3, r2
 8006aea:	f840 3f10 	str.w	r3, [r0, #16]!
        ret            = qbufferAvailable(&qbuffer[ch]);
 8006aee:	f7ff baa1 	b.w	8006034 <qbufferAvailable>
 8006af2:	bf00      	nop
 8006af4:	20000938 	.word	0x20000938
 8006af8:	20000ac4 	.word	0x20000ac4

08006afc <uartRead>:
uint8_t uartRead(uint8_t ch)
{
    uint8_t ret = 0;
 8006afc:	2300      	movs	r3, #0
{
 8006afe:	b507      	push	{r0, r1, r2, lr}

    switch (ch)
 8006b00:	4602      	mov	r2, r0
    uint8_t ret = 0;
 8006b02:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (ch)
 8006b06:	b130      	cbz	r0, 8006b16 <uartRead+0x1a>
 8006b08:	2801      	cmp	r0, #1
 8006b0a:	d009      	beq.n	8006b20 <uartRead+0x24>
        qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
        break;
    }

    return ret;
}
 8006b0c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8006b10:	b003      	add	sp, #12
 8006b12:	f85d fb04 	ldr.w	pc, [sp], #4
        ret = cdcRead();
 8006b16:	f004 fb7d 	bl	800b214 <cdcRead>
 8006b1a:	f88d 0007 	strb.w	r0, [sp, #7]
        break;
 8006b1e:	e7f5      	b.n	8006b0c <uartRead+0x10>
        qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8006b20:	f10d 0107 	add.w	r1, sp, #7
 8006b24:	4801      	ldr	r0, [pc, #4]	@ (8006b2c <uartRead+0x30>)
 8006b26:	f7ff fa6b 	bl	8006000 <qbufferRead>
        break;
 8006b2a:	e7ef      	b.n	8006b0c <uartRead+0x10>
 8006b2c:	20000ad4 	.word	0x20000ad4

08006b30 <uartWrite>:
uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8006b30:	4603      	mov	r3, r0
 8006b32:	b510      	push	{r4, lr}
 8006b34:	4608      	mov	r0, r1
 8006b36:	4614      	mov	r4, r2
    uint8_t ret = 0;
    HAL_StatusTypeDef status;

    switch (ch)
 8006b38:	b11b      	cbz	r3, 8006b42 <uartWrite+0x12>
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d006      	beq.n	8006b4c <uartWrite+0x1c>
    uint8_t ret = 0;
 8006b3e:	2000      	movs	r0, #0
 8006b40:	e003      	b.n	8006b4a <uartWrite+0x1a>
    {
    case _DEF_UART1:
        ret = cdcWrite(p_data, length);
 8006b42:	4611      	mov	r1, r2
 8006b44:	f004 fbf0 	bl	800b328 <cdcWrite>
 8006b48:	b2c0      	uxtb	r0, r0
        }
        break;
    }

    return ret;
}
 8006b4a:	bd10      	pop	{r4, pc}
        status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8006b4c:	2364      	movs	r3, #100	@ 0x64
 8006b4e:	4804      	ldr	r0, [pc, #16]	@ (8006b60 <uartWrite+0x30>)
 8006b50:	b292      	uxth	r2, r2
 8006b52:	f002 fdd4 	bl	80096fe <HAL_UART_Transmit>
        if (status == HAL_OK)
 8006b56:	2800      	cmp	r0, #0
 8006b58:	d1f1      	bne.n	8006b3e <uartWrite+0xe>
            ret = length;
 8006b5a:	b2e0      	uxtb	r0, r4
 8006b5c:	e7f5      	b.n	8006b4a <uartWrite+0x1a>
 8006b5e:	bf00      	nop
 8006b60:	2000097c 	.word	0x2000097c

08006b64 <uartPrintf>:
uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8006b64:	b40e      	push	{r1, r2, r3}
 8006b66:	b510      	push	{r4, lr}
 8006b68:	b0c3      	sub	sp, #268	@ 0x10c
 8006b6a:	ab45      	add	r3, sp, #276	@ 0x114
 8006b6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b70:	4604      	mov	r4, r0
    va_list args;
    int len;
    uint32_t ret;

    va_start(args, fmt);
    len = vsnprintf(buf, 256, fmt, args);
 8006b72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006b76:	a802      	add	r0, sp, #8
    va_start(args, fmt);
 8006b78:	9301      	str	r3, [sp, #4]
    len = vsnprintf(buf, 256, fmt, args);
 8006b7a:	f005 fdf3 	bl	800c764 <vsniprintf>

    ret = uartWrite(ch, (uint8_t *)buf, len);
 8006b7e:	a902      	add	r1, sp, #8
    len = vsnprintf(buf, 256, fmt, args);
 8006b80:	4602      	mov	r2, r0
    ret = uartWrite(ch, (uint8_t *)buf, len);
 8006b82:	4620      	mov	r0, r4
 8006b84:	f7ff ffd4 	bl	8006b30 <uartWrite>
    va_end(args);

    return ret;
}
 8006b88:	b043      	add	sp, #268	@ 0x10c
 8006b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b8e:	b003      	add	sp, #12
 8006b90:	4770      	bx	lr

08006b92 <HAL_UART_ErrorCallback>:
        break;
    }
    return ret;
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8006b92:	4770      	bx	lr

08006b94 <HAL_UART_RxCpltCallback>:
        qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);

        HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
    }
#endif
}
 8006b94:	4770      	bx	lr
	...

08006b98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8006b98:	b570      	push	{r4, r5, r6, lr}
 8006b9a:	4606      	mov	r6, r0
 8006b9c:	b086      	sub	sp, #24

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b9e:	2210      	movs	r2, #16
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	a802      	add	r0, sp, #8
 8006ba4:	f005 fe9a 	bl	800c8dc <memset>
    if (uartHandle->Instance == USART1)
 8006ba8:	6832      	ldr	r2, [r6, #0]
 8006baa:	4b25      	ldr	r3, [pc, #148]	@ (8006c40 <HAL_UART_MspInit+0xa8>)
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d144      	bne.n	8006c3a <HAL_UART_MspInit+0xa2>
    {
        /* USER CODE BEGIN USART1_MspInit 0 */

        /* USER CODE END USART1_MspInit 0 */
        /* USART1 clock enable */
        __HAL_RCC_USART1_CLK_ENABLE();
 8006bb0:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 8006bb4:	699a      	ldr	r2, [r3, #24]
        PA10     ------> USART1_RX
        */
        GPIO_InitStruct.Pin   = GPIO_PIN_9;
        GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bb6:	4823      	ldr	r0, [pc, #140]	@ (8006c44 <HAL_UART_MspInit+0xac>)
        __HAL_RCC_USART1_CLK_ENABLE();
 8006bb8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006bbc:	619a      	str	r2, [r3, #24]
 8006bbe:	699a      	ldr	r2, [r3, #24]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bc0:	a902      	add	r1, sp, #8
        __HAL_RCC_USART1_CLK_ENABLE();
 8006bc2:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8006bc6:	9200      	str	r2, [sp, #0]
 8006bc8:	9a00      	ldr	r2, [sp, #0]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bca:	699a      	ldr	r2, [r3, #24]

        GPIO_InitStruct.Pin  = GPIO_PIN_10;
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bcc:	2500      	movs	r5, #0
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bce:	f042 0204 	orr.w	r2, r2, #4
 8006bd2:	619a      	str	r2, [r3, #24]
 8006bd4:	699b      	ldr	r3, [r3, #24]
        GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8006bd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bda:	f003 0304 	and.w	r3, r3, #4
 8006bde:	9301      	str	r3, [sp, #4]
 8006be0:	9b01      	ldr	r3, [sp, #4]
        GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8006be2:	2302      	movs	r3, #2
 8006be4:	e9cd 2302 	strd	r2, r3, [sp, #8]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006be8:	2303      	movs	r3, #3
 8006bea:	9305      	str	r3, [sp, #20]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bec:	f001 f8b0 	bl	8007d50 <HAL_GPIO_Init>
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bf0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bf4:	4813      	ldr	r0, [pc, #76]	@ (8006c44 <HAL_UART_MspInit+0xac>)
 8006bf6:	a902      	add	r1, sp, #8

        /* USART1 DMA Init */
        /* USART1_RX Init */
        hdma_usart1_rx.Instance                 = DMA1_Channel5;
 8006bf8:	4c13      	ldr	r4, [pc, #76]	@ (8006c48 <HAL_UART_MspInit+0xb0>)
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bfa:	e9cd 3502 	strd	r3, r5, [sp, #8]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bfe:	9504      	str	r5, [sp, #16]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c00:	f001 f8a6 	bl	8007d50 <HAL_GPIO_Init>
        hdma_usart1_rx.Instance                 = DMA1_Channel5;
 8006c04:	4b11      	ldr	r3, [pc, #68]	@ (8006c4c <HAL_UART_MspInit+0xb4>)
        hdma_usart1_rx.Init.MemInc              = DMA_MINC_ENABLE;
        hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
        hdma_usart1_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
        hdma_usart1_rx.Init.Mode                = DMA_CIRCULAR;
        hdma_usart1_rx.Init.Priority            = DMA_PRIORITY_LOW;
        if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006c06:	4620      	mov	r0, r4
        hdma_usart1_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8006c08:	e9c4 3500 	strd	r3, r5, [r4]
        hdma_usart1_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8006c0c:	2380      	movs	r3, #128	@ 0x80
        hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006c0e:	e9c4 3503 	strd	r3, r5, [r4, #12]
        hdma_usart1_rx.Init.Mode                = DMA_CIRCULAR;
 8006c12:	2320      	movs	r3, #32
        hdma_usart1_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8006c14:	60a5      	str	r5, [r4, #8]
        hdma_usart1_rx.Init.Priority            = DMA_PRIORITY_LOW;
 8006c16:	e9c4 3506 	strd	r3, r5, [r4, #24]
        hdma_usart1_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8006c1a:	6165      	str	r5, [r4, #20]
        if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006c1c:	f000 ff06 	bl	8007a2c <HAL_DMA_Init>
 8006c20:	b108      	cbz	r0, 8006c26 <HAL_UART_MspInit+0x8e>
        {
            Error_Handler();
 8006c22:	f7ff f91d 	bl	8005e60 <Error_Handler>
        }

        __HAL_LINKDMA(uartHandle, hdmarx, hdma_usart1_rx);

        /* USART1 interrupt Init */
        HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006c26:	2200      	movs	r2, #0
 8006c28:	2025      	movs	r0, #37	@ 0x25
 8006c2a:	4611      	mov	r1, r2
        __HAL_LINKDMA(uartHandle, hdmarx, hdma_usart1_rx);
 8006c2c:	63f4      	str	r4, [r6, #60]	@ 0x3c
 8006c2e:	6266      	str	r6, [r4, #36]	@ 0x24
        HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006c30:	f000 fe98 	bl	8007964 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006c34:	2025      	movs	r0, #37	@ 0x25
 8006c36:	f000 fec5 	bl	80079c4 <HAL_NVIC_EnableIRQ>
        /* USER CODE BEGIN USART1_MspInit 1 */

        /* USER CODE END USART1_MspInit 1 */
    }
}
 8006c3a:	b006      	add	sp, #24
 8006c3c:	bd70      	pop	{r4, r5, r6, pc}
 8006c3e:	bf00      	nop
 8006c40:	40013800 	.word	0x40013800
 8006c44:	40010800 	.word	0x40010800
 8006c48:	20000938 	.word	0x20000938
 8006c4c:	40020058 	.word	0x40020058

08006c50 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{

    if (uartHandle->Instance == USART1)
 8006c50:	6802      	ldr	r2, [r0, #0]
 8006c52:	4b0c      	ldr	r3, [pc, #48]	@ (8006c84 <HAL_UART_MspDeInit+0x34>)
{
 8006c54:	b510      	push	{r4, lr}
    if (uartHandle->Instance == USART1)
 8006c56:	429a      	cmp	r2, r3
{
 8006c58:	4604      	mov	r4, r0
    if (uartHandle->Instance == USART1)
 8006c5a:	d111      	bne.n	8006c80 <HAL_UART_MspDeInit+0x30>
    {
        /* USER CODE BEGIN USART1_MspDeInit 0 */

        /* USER CODE END USART1_MspDeInit 0 */
        /* Peripheral clock disable */
        __HAL_RCC_USART1_CLK_DISABLE();
 8006c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8006c88 <HAL_UART_MspDeInit+0x38>)

        /**USART1 GPIO Configuration
        PA9     ------> USART1_TX
        PA10     ------> USART1_RX
        */
        HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9 | GPIO_PIN_10);
 8006c5e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
        __HAL_RCC_USART1_CLK_DISABLE();
 8006c62:	6993      	ldr	r3, [r2, #24]
        HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9 | GPIO_PIN_10);
 8006c64:	4809      	ldr	r0, [pc, #36]	@ (8006c8c <HAL_UART_MspDeInit+0x3c>)
        __HAL_RCC_USART1_CLK_DISABLE();
 8006c66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c6a:	6193      	str	r3, [r2, #24]
        HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9 | GPIO_PIN_10);
 8006c6c:	f001 f948 	bl	8007f00 <HAL_GPIO_DeInit>

        /* USART1 DMA DeInit */
        HAL_DMA_DeInit(uartHandle->hdmarx);
 8006c70:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8006c72:	f000 ff0d 	bl	8007a90 <HAL_DMA_DeInit>
        HAL_NVIC_DisableIRQ(USART1_IRQn);
        /* USER CODE BEGIN USART1_MspDeInit 1 */

        /* USER CODE END USART1_MspDeInit 1 */
    }
}
 8006c76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_NVIC_DisableIRQ(USART1_IRQn);
 8006c7a:	2025      	movs	r0, #37	@ 0x25
 8006c7c:	f000 beb0 	b.w	80079e0 <HAL_NVIC_DisableIRQ>
}
 8006c80:	bd10      	pop	{r4, pc}
 8006c82:	bf00      	nop
 8006c84:	40013800 	.word	0x40013800
 8006c88:	40021000 	.word	0x40021000
 8006c8c:	40010800 	.word	0x40010800

08006c90 <usbInit>:

#include "usb.h"
#include "usb_device.h"


bool usbInit(void){
 8006c90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  bool ret = true;

  GPIO_InitTypeDef GPIO_InitStruct = {0};

      GPIO_InitStruct.Pin   = GPIO_PIN_12;
      GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_OD;
 8006c92:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8006c96:	2311      	movs	r3, #17
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c98:	2500      	movs	r5, #0
      GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_OD;
 8006c9a:	e9cd 6300 	strd	r6, r3, [sp]
      GPIO_InitStruct.Pull  = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c9e:	2302      	movs	r3, #2
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ca0:	4c0e      	ldr	r4, [pc, #56]	@ (8006cdc <usbInit+0x4c>)
 8006ca2:	4669      	mov	r1, sp
 8006ca4:	4620      	mov	r0, r4
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ca6:	9303      	str	r3, [sp, #12]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ca8:	9502      	str	r5, [sp, #8]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006caa:	f001 f851 	bl	8007d50 <HAL_GPIO_Init>

      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8006cae:	462a      	mov	r2, r5
 8006cb0:	4631      	mov	r1, r6
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f001 f992 	bl	8007fdc <HAL_GPIO_WritePin>
      delay(200);
 8006cb8:	20c8      	movs	r0, #200	@ 0xc8
 8006cba:	f7ff f836 	bl	8005d2a <delay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	4631      	mov	r1, r6
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f001 f98a 	bl	8007fdc <HAL_GPIO_WritePin>

      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cc8:	4620      	mov	r0, r4
 8006cca:	4669      	mov	r1, sp
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ccc:	9501      	str	r5, [sp, #4]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cce:	f001 f83f 	bl	8007d50 <HAL_GPIO_Init>

      MX_USB_DEVICE_Init();
 8006cd2:	f004 fa1f 	bl	800b114 <MX_USB_DEVICE_Init>

  return ret;
}
 8006cd6:	2001      	movs	r0, #1
 8006cd8:	b004      	add	sp, #16
 8006cda:	bd70      	pop	{r4, r5, r6, pc}
 8006cdc:	40010800 	.word	0x40010800

08006ce0 <hwInit>:
 */

#include "hw.h"

void hwInit(void)
{
 8006ce0:	b508      	push	{r3, lr}
    bspInit();
 8006ce2:	f7ff f881 	bl	8005de8 <bspInit>
    cliInit();
 8006ce6:	f7ff fd83 	bl	80067f0 <cliInit>
    rtcInit();
 8006cea:	f7ff fe59 	bl	80069a0 <rtcInit>
    resetInit();
 8006cee:	f7ff fe37 	bl	8006960 <resetInit>
    ledInit();
 8006cf2:	f7ff fdcf 	bl	8006894 <ledInit>
    usbInit();
 8006cf6:	f7ff ffcb 	bl	8006c90 <usbInit>
    uartInit();
 8006cfa:	f7ff fe91 	bl	8006a20 <uartInit>
    flashInit();
}
 8006cfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    flashInit();
 8006d02:	f7ff bdab 	b.w	800685c <flashInit>

08006d06 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006d06:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8006d08:	f000 f9d6 	bl	80070b8 <vTaskStartScheduler>
  
  return osOK;
}
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	bd08      	pop	{r3, pc}

08006d10 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006d10:	b530      	push	{r4, r5, lr}
 8006d12:	4604      	mov	r4, r0

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d14:	8a22      	ldrh	r2, [r4, #16]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006d16:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
{
 8006d1a:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8006d1c:	2c84      	cmp	r4, #132	@ 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006d1e:	bf0c      	ite	eq
 8006d20:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8006d22:	3403      	addne	r4, #3
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d24:	ad03      	add	r5, sp, #12
{
 8006d26:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d28:	e9d0 1000 	ldrd	r1, r0, [r0]
 8006d2c:	e9cd 4500 	strd	r4, r5, [sp]
 8006d30:	f000 f8e2 	bl	8006ef8 <xTaskCreate>
 8006d34:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
 8006d36:	bf14      	ite	ne
 8006d38:	2000      	movne	r0, #0
  }     
#endif
  
  return handle;
 8006d3a:	9803      	ldreq	r0, [sp, #12]
}
 8006d3c:	b005      	add	sp, #20
 8006d3e:	bd30      	pop	{r4, r5, pc}

08006d40 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006d40:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006d42:	2801      	cmp	r0, #1
 8006d44:	bf38      	it	cc
 8006d46:	2001      	movcc	r0, #1
 8006d48:	f000 fb0a 	bl	8007360 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006d4c:	2000      	movs	r0, #0
 8006d4e:	bd08      	pop	{r3, pc}

08006d50 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8006d50:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006d52:	f000 fb63 	bl	800741c <xTaskGetSchedulerState>
 8006d56:	2801      	cmp	r0, #1
 8006d58:	d003      	beq.n	8006d62 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8006d5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8006d5e:	f000 bc19 	b.w	8007594 <xPortSysTickHandler>
}
 8006d62:	bd08      	pop	{r3, pc}

08006d64 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d64:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d68:	f100 0308 	add.w	r3, r0, #8

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d6c:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d70:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d72:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d78:	4770      	bx	lr

08006d7a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d7e:	4770      	bx	lr

08006d80 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d80:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d82:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8006d84:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d86:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d88:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d8a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8006d8c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8006d8e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006d90:	3301      	adds	r3, #1
 8006d92:	6003      	str	r3, [r0, #0]
}
 8006d94:	4770      	bx	lr

08006d96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d96:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d98:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d9a:	1c63      	adds	r3, r4, #1
 8006d9c:	d10a      	bne.n	8006db4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d9e:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006da4:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006da6:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8006da8:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8006daa:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8006dac:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006dae:	3301      	adds	r3, #1
 8006db0:	6003      	str	r3, [r0, #0]
}
 8006db2:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006db4:	f100 0208 	add.w	r2, r0, #8
 8006db8:	4613      	mov	r3, r2
 8006dba:	6852      	ldr	r2, [r2, #4]
 8006dbc:	6815      	ldr	r5, [r2, #0]
 8006dbe:	42a5      	cmp	r5, r4
 8006dc0:	d9fa      	bls.n	8006db8 <vListInsert+0x22>
 8006dc2:	e7ed      	b.n	8006da0 <vListInsert+0xa>

08006dc4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006dc4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006dc6:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8006dca:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006dcc:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006dce:	6859      	ldr	r1, [r3, #4]
 8006dd0:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006dd2:	bf08      	it	eq
 8006dd4:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	3a01      	subs	r2, #1
 8006dde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006de0:	6818      	ldr	r0, [r3, #0]
}
 8006de2:	4770      	bx	lr

08006de4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006de6:	4b1a      	ldr	r3, [pc, #104]	@ (8006e50 <prvAddCurrentTaskToDelayedList+0x6c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006de8:	4d1a      	ldr	r5, [pc, #104]	@ (8006e54 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8006dea:	4606      	mov	r6, r0
const TickType_t xConstTickCount = xTickCount;
 8006dec:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dee:	6828      	ldr	r0, [r5, #0]
{
 8006df0:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006df2:	3004      	adds	r0, #4
 8006df4:	f7ff ffe6 	bl	8006dc4 <uxListRemove>
 8006df8:	b940      	cbnz	r0, 8006e0c <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006dfa:	682a      	ldr	r2, [r5, #0]
 8006dfc:	4916      	ldr	r1, [pc, #88]	@ (8006e58 <prvAddCurrentTaskToDelayedList+0x74>)
 8006dfe:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8006e00:	2201      	movs	r2, #1
 8006e02:	680b      	ldr	r3, [r1, #0]
 8006e04:	4082      	lsls	r2, r0
 8006e06:	ea23 0302 	bic.w	r3, r3, r2
 8006e0a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e0c:	1c73      	adds	r3, r6, #1
 8006e0e:	d107      	bne.n	8006e20 <prvAddCurrentTaskToDelayedList+0x3c>
 8006e10:	b137      	cbz	r7, 8006e20 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e12:	6829      	ldr	r1, [r5, #0]
 8006e14:	4811      	ldr	r0, [pc, #68]	@ (8006e5c <prvAddCurrentTaskToDelayedList+0x78>)
 8006e16:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e1c:	f7ff bfb0 	b.w	8006d80 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e20:	682b      	ldr	r3, [r5, #0]
 8006e22:	19a4      	adds	r4, r4, r6
 8006e24:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e26:	d307      	bcc.n	8006e38 <prvAddCurrentTaskToDelayedList+0x54>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e28:	4b0d      	ldr	r3, [pc, #52]	@ (8006e60 <prvAddCurrentTaskToDelayedList+0x7c>)
 8006e2a:	6818      	ldr	r0, [r3, #0]
 8006e2c:	6829      	ldr	r1, [r5, #0]
}
 8006e2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e32:	3104      	adds	r1, #4
 8006e34:	f7ff bfaf 	b.w	8006d96 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e38:	4b0a      	ldr	r3, [pc, #40]	@ (8006e64 <prvAddCurrentTaskToDelayedList+0x80>)
 8006e3a:	6818      	ldr	r0, [r3, #0]
 8006e3c:	6829      	ldr	r1, [r5, #0]
 8006e3e:	3104      	adds	r1, #4
 8006e40:	f7ff ffa9 	bl	8006d96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006e44:	4b08      	ldr	r3, [pc, #32]	@ (8006e68 <prvAddCurrentTaskToDelayedList+0x84>)
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8006e4a:	bf88      	it	hi
 8006e4c:	601c      	strhi	r4, [r3, #0]
}
 8006e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e50:	20000b08 	.word	0x20000b08
 8006e54:	20000c0c 	.word	0x20000c0c
 8006e58:	20000b04 	.word	0x20000b04
 8006e5c:	20000b10 	.word	0x20000b10
 8006e60:	20000b50 	.word	0x20000b50
 8006e64:	20000b54 	.word	0x20000b54
 8006e68:	20000aec 	.word	0x20000aec

08006e6c <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e6c:	4a06      	ldr	r2, [pc, #24]	@ (8006e88 <prvResetNextTaskUnblockTime+0x1c>)
 8006e6e:	6813      	ldr	r3, [r2, #0]
 8006e70:	6819      	ldr	r1, [r3, #0]
 8006e72:	4b06      	ldr	r3, [pc, #24]	@ (8006e8c <prvResetNextTaskUnblockTime+0x20>)
 8006e74:	b919      	cbnz	r1, 8006e7e <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e76:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e7a:	601a      	str	r2, [r3, #0]
}
 8006e7c:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e7e:	6812      	ldr	r2, [r2, #0]
 8006e80:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e82:	68d2      	ldr	r2, [r2, #12]
 8006e84:	6852      	ldr	r2, [r2, #4]
 8006e86:	e7f8      	b.n	8006e7a <prvResetNextTaskUnblockTime+0xe>
 8006e88:	20000b54 	.word	0x20000b54
 8006e8c:	20000aec 	.word	0x20000aec

08006e90 <prvIdleTask>:
{
 8006e90:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e92:	4c15      	ldr	r4, [pc, #84]	@ (8006ee8 <prvIdleTask+0x58>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e94:	4f15      	ldr	r7, [pc, #84]	@ (8006eec <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 8006e96:	4e16      	ldr	r6, [pc, #88]	@ (8006ef0 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e98:	6823      	ldr	r3, [r4, #0]
 8006e9a:	b973      	cbnz	r3, 8006eba <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e9c:	4b15      	ldr	r3, [pc, #84]	@ (8006ef4 <prvIdleTask+0x64>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d9f8      	bls.n	8006e96 <prvIdleTask+0x6>
				taskYIELD();
 8006ea4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006ea8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006eac:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	e7ed      	b.n	8006e96 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8006eba:	f000 fb13 	bl	80074e4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ec2:	1d28      	adds	r0, r5, #4
 8006ec4:	f7ff ff7e 	bl	8006dc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ec8:	6833      	ldr	r3, [r6, #0]
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ece:	6823      	ldr	r3, [r4, #0]
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8006ed4:	f000 fb26 	bl	8007524 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8006ed8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8006eda:	f000 fc99 	bl	8007810 <vPortFree>
			vPortFree( pxTCB );
 8006ede:	4628      	mov	r0, r5
 8006ee0:	f000 fc96 	bl	8007810 <vPortFree>
	}
 8006ee4:	e7d8      	b.n	8006e98 <prvIdleTask+0x8>
 8006ee6:	bf00      	nop
 8006ee8:	20000b24 	.word	0x20000b24
 8006eec:	20000b28 	.word	0x20000b28
 8006ef0:	20000b0c 	.word	0x20000b0c
 8006ef4:	20000b80 	.word	0x20000b80

08006ef8 <xTaskCreate>:
	{
 8006ef8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006efc:	0096      	lsls	r6, r2, #2
	{
 8006efe:	4607      	mov	r7, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f00:	4630      	mov	r0, r6
	{
 8006f02:	460d      	mov	r5, r1
 8006f04:	4698      	mov	r8, r3
 8006f06:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f0a:	f000 fbe9 	bl	80076e0 <pvPortMalloc>
			if( pxStack != NULL )
 8006f0e:	4682      	mov	sl, r0
 8006f10:	b918      	cbnz	r0, 8006f1a <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f12:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8006f16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f1a:	205c      	movs	r0, #92	@ 0x5c
 8006f1c:	f000 fbe0 	bl	80076e0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006f20:	4604      	mov	r4, r0
 8006f22:	2800      	cmp	r0, #0
 8006f24:	f000 80a9 	beq.w	800707a <xTaskCreate+0x182>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006f28:	4632      	mov	r2, r6
					pxNewTCB->pxStack = pxStack;
 8006f2a:	f8c0 a030 	str.w	sl, [r0, #48]	@ 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006f2e:	21a5      	movs	r1, #165	@ 0xa5
 8006f30:	4650      	mov	r0, sl
 8006f32:	f005 fcd3 	bl	800c8dc <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006f36:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006f38:	3e04      	subs	r6, #4
 8006f3a:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006f3c:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8006f40:	2d00      	cmp	r5, #0
 8006f42:	f000 808c 	beq.w	800705e <xTaskCreate+0x166>
 8006f46:	1e6b      	subs	r3, r5, #1
 8006f48:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8006f4c:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f4e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8006f52:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8006f56:	b109      	cbz	r1, 8006f5c <xTaskCreate+0x64>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f58:	42ab      	cmp	r3, r5
 8006f5a:	d1f8      	bne.n	8006f4e <xTaskCreate+0x56>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006f62:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
		pxNewTCB->uxMutexesHeld = 0;
 8006f64:	f04f 0b00 	mov.w	fp, #0
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006f68:	2d06      	cmp	r5, #6
 8006f6a:	bf28      	it	cs
 8006f6c:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f6e:	f104 0a04 	add.w	sl, r4, #4
 8006f72:	4650      	mov	r0, sl
	pxNewTCB->uxPriority = uxPriority;
 8006f74:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006f76:	64e5      	str	r5, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006f78:	f8c4 b050 	str.w	fp, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f7c:	f7ff fefd 	bl	8006d7a <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f80:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006f84:	f104 0018 	add.w	r0, r4, #24
 8006f88:	f7ff fef7 	bl	8006d7a <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8006f8c:	f8c4 b054 	str.w	fp, [r4, #84]	@ 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f90:	4642      	mov	r2, r8
 8006f92:	4639      	mov	r1, r7
 8006f94:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006f96:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f98:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006f9a:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f9c:	f884 b058 	strb.w	fp, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006fa0:	f000 fa7c 	bl	800749c <pxPortInitialiseStack>
 8006fa4:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8006fa6:	f1b9 0f00 	cmp.w	r9, #0
 8006faa:	d001      	beq.n	8006fb0 <xTaskCreate+0xb8>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006fac:	f8c9 4000 	str.w	r4, [r9]
	taskENTER_CRITICAL();
 8006fb0:	f000 fa98 	bl	80074e4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8006fb4:	4b33      	ldr	r3, [pc, #204]	@ (8007084 <xTaskCreate+0x18c>)
		if( pxCurrentTCB == NULL )
 8006fb6:	4f34      	ldr	r7, [pc, #208]	@ (8007088 <xTaskCreate+0x190>)
		uxCurrentNumberOfTasks++;
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	4e34      	ldr	r6, [pc, #208]	@ (800708c <xTaskCreate+0x194>)
 8006fbc:	3201      	adds	r2, #1
 8006fbe:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8006fc0:	683d      	ldr	r5, [r7, #0]
 8006fc2:	2d00      	cmp	r5, #0
 8006fc4:	d14e      	bne.n	8007064 <xTaskCreate+0x16c>
			pxCurrentTCB = pxNewTCB;
 8006fc6:	603c      	str	r4, [r7, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d11f      	bne.n	800700e <xTaskCreate+0x116>
 8006fce:	46b0      	mov	r8, r6
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006fd0:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fd2:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006fd4:	f7ff fec6 	bl	8006d64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fd8:	2d07      	cmp	r5, #7
 8006fda:	f108 0814 	add.w	r8, r8, #20
 8006fde:	d1f7      	bne.n	8006fd0 <xTaskCreate+0xd8>
	vListInitialise( &xDelayedTaskList1 );
 8006fe0:	f8df 80ac 	ldr.w	r8, [pc, #172]	@ 8007090 <xTaskCreate+0x198>
	vListInitialise( &xDelayedTaskList2 );
 8006fe4:	4d2b      	ldr	r5, [pc, #172]	@ (8007094 <xTaskCreate+0x19c>)
	vListInitialise( &xDelayedTaskList1 );
 8006fe6:	4640      	mov	r0, r8
 8006fe8:	f7ff febc 	bl	8006d64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006fec:	4628      	mov	r0, r5
 8006fee:	f7ff feb9 	bl	8006d64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ff2:	4829      	ldr	r0, [pc, #164]	@ (8007098 <xTaskCreate+0x1a0>)
 8006ff4:	f7ff feb6 	bl	8006d64 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8006ff8:	4828      	ldr	r0, [pc, #160]	@ (800709c <xTaskCreate+0x1a4>)
 8006ffa:	f7ff feb3 	bl	8006d64 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8006ffe:	4828      	ldr	r0, [pc, #160]	@ (80070a0 <xTaskCreate+0x1a8>)
 8007000:	f7ff feb0 	bl	8006d64 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8007004:	4b27      	ldr	r3, [pc, #156]	@ (80070a4 <xTaskCreate+0x1ac>)
 8007006:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800700a:	4b27      	ldr	r3, [pc, #156]	@ (80070a8 <xTaskCreate+0x1b0>)
 800700c:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800700e:	4a27      	ldr	r2, [pc, #156]	@ (80070ac <xTaskCreate+0x1b4>)
		prvAddTaskToReadyList( pxNewTCB );
 8007010:	4927      	ldr	r1, [pc, #156]	@ (80070b0 <xTaskCreate+0x1b8>)
		uxTaskNumber++;
 8007012:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007014:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8007016:	3301      	adds	r3, #1
 8007018:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800701a:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800701c:	2301      	movs	r3, #1
 800701e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8007020:	4093      	lsls	r3, r2
 8007022:	4303      	orrs	r3, r0
 8007024:	2014      	movs	r0, #20
 8007026:	600b      	str	r3, [r1, #0]
 8007028:	fb00 6002 	mla	r0, r0, r2, r6
 800702c:	4651      	mov	r1, sl
 800702e:	f7ff fea7 	bl	8006d80 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8007032:	f000 fa77 	bl	8007524 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8007036:	4b1f      	ldr	r3, [pc, #124]	@ (80070b4 <xTaskCreate+0x1bc>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	b173      	cbz	r3, 800705a <xTaskCreate+0x162>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007040:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007042:	429a      	cmp	r2, r3
 8007044:	d209      	bcs.n	800705a <xTaskCreate+0x162>
			taskYIELD_IF_USING_PREEMPTION();
 8007046:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800704a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800704e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007052:	f3bf 8f4f 	dsb	sy
 8007056:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 800705a:	2001      	movs	r0, #1
		return xReturn;
 800705c:	e75b      	b.n	8006f16 <xTaskCreate+0x1e>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800705e:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 8007062:	e77e      	b.n	8006f62 <xTaskCreate+0x6a>
			if( xSchedulerRunning == pdFALSE )
 8007064:	4b13      	ldr	r3, [pc, #76]	@ (80070b4 <xTaskCreate+0x1bc>)
 8007066:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007068:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800706a:	2a00      	cmp	r2, #0
 800706c:	d1cf      	bne.n	800700e <xTaskCreate+0x116>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007072:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8007074:	bf98      	it	ls
 8007076:	603c      	strls	r4, [r7, #0]
 8007078:	e7c9      	b.n	800700e <xTaskCreate+0x116>
					vPortFree( pxStack );
 800707a:	4650      	mov	r0, sl
 800707c:	f000 fbc8 	bl	8007810 <vPortFree>
		if( pxNewTCB != NULL )
 8007080:	e747      	b.n	8006f12 <xTaskCreate+0x1a>
 8007082:	bf00      	nop
 8007084:	20000b0c 	.word	0x20000b0c
 8007088:	20000c0c 	.word	0x20000c0c
 800708c:	20000b80 	.word	0x20000b80
 8007090:	20000b6c 	.word	0x20000b6c
 8007094:	20000b58 	.word	0x20000b58
 8007098:	20000b3c 	.word	0x20000b3c
 800709c:	20000b28 	.word	0x20000b28
 80070a0:	20000b10 	.word	0x20000b10
 80070a4:	20000b54 	.word	0x20000b54
 80070a8:	20000b50 	.word	0x20000b50
 80070ac:	20000af0 	.word	0x20000af0
 80070b0:	20000b04 	.word	0x20000b04
 80070b4:	20000b00 	.word	0x20000b00

080070b8 <vTaskStartScheduler>:
{
 80070b8:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80070ba:	2400      	movs	r4, #0
 80070bc:	4b16      	ldr	r3, [pc, #88]	@ (8007118 <vTaskStartScheduler+0x60>)
 80070be:	2280      	movs	r2, #128	@ 0x80
 80070c0:	9301      	str	r3, [sp, #4]
 80070c2:	4916      	ldr	r1, [pc, #88]	@ (800711c <vTaskStartScheduler+0x64>)
 80070c4:	4623      	mov	r3, r4
 80070c6:	4816      	ldr	r0, [pc, #88]	@ (8007120 <vTaskStartScheduler+0x68>)
 80070c8:	9400      	str	r4, [sp, #0]
 80070ca:	f7ff ff15 	bl	8006ef8 <xTaskCreate>
	if( xReturn == pdPASS )
 80070ce:	2801      	cmp	r0, #1
 80070d0:	d114      	bne.n	80070fc <vTaskStartScheduler+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80070d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d6:	f383 8811 	msr	BASEPRI, r3
 80070da:	f3bf 8f6f 	isb	sy
 80070de:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80070e2:	f04f 32ff 	mov.w	r2, #4294967295
 80070e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007124 <vTaskStartScheduler+0x6c>)
 80070e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80070ea:	4b0f      	ldr	r3, [pc, #60]	@ (8007128 <vTaskStartScheduler+0x70>)
 80070ec:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80070ee:	4b0f      	ldr	r3, [pc, #60]	@ (800712c <vTaskStartScheduler+0x74>)
 80070f0:	601c      	str	r4, [r3, #0]
}
 80070f2:	b002      	add	sp, #8
 80070f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80070f8:	f000 ba74 	b.w	80075e4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80070fc:	3001      	adds	r0, #1
 80070fe:	d108      	bne.n	8007112 <vTaskStartScheduler+0x5a>
 8007100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	e7fe      	b.n	8007110 <vTaskStartScheduler+0x58>
}
 8007112:	b002      	add	sp, #8
 8007114:	bd10      	pop	{r4, pc}
 8007116:	bf00      	nop
 8007118:	20000ae8 	.word	0x20000ae8
 800711c:	0800ead4 	.word	0x0800ead4
 8007120:	08006e91 	.word	0x08006e91
 8007124:	20000aec 	.word	0x20000aec
 8007128:	20000b00 	.word	0x20000b00
 800712c:	20000b08 	.word	0x20000b08

08007130 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007130:	4a02      	ldr	r2, [pc, #8]	@ (800713c <vTaskSuspendAll+0xc>)
 8007132:	6813      	ldr	r3, [r2, #0]
 8007134:	3301      	adds	r3, #1
 8007136:	6013      	str	r3, [r2, #0]
}
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	20000ae4 	.word	0x20000ae4

08007140 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007140:	4b41      	ldr	r3, [pc, #260]	@ (8007248 <xTaskIncrementTick+0x108>)
{
 8007142:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d176      	bne.n	800723a <xTaskIncrementTick+0xfa>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800714c:	4b3f      	ldr	r3, [pc, #252]	@ (800724c <xTaskIncrementTick+0x10c>)
 800714e:	681c      	ldr	r4, [r3, #0]
 8007150:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8007152:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007154:	b9bc      	cbnz	r4, 8007186 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8007156:	4b3e      	ldr	r3, [pc, #248]	@ (8007250 <xTaskIncrementTick+0x110>)
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	6812      	ldr	r2, [r2, #0]
 800715c:	b142      	cbz	r2, 8007170 <xTaskIncrementTick+0x30>
 800715e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	e7fe      	b.n	800716e <xTaskIncrementTick+0x2e>
 8007170:	4a38      	ldr	r2, [pc, #224]	@ (8007254 <xTaskIncrementTick+0x114>)
 8007172:	6819      	ldr	r1, [r3, #0]
 8007174:	6810      	ldr	r0, [r2, #0]
 8007176:	6018      	str	r0, [r3, #0]
 8007178:	6011      	str	r1, [r2, #0]
 800717a:	4a37      	ldr	r2, [pc, #220]	@ (8007258 <xTaskIncrementTick+0x118>)
 800717c:	6813      	ldr	r3, [r2, #0]
 800717e:	3301      	adds	r3, #1
 8007180:	6013      	str	r3, [r2, #0]
 8007182:	f7ff fe73 	bl	8006e6c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007186:	4d35      	ldr	r5, [pc, #212]	@ (800725c <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 8007188:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 800718c:	682b      	ldr	r3, [r5, #0]
 800718e:	4e34      	ldr	r6, [pc, #208]	@ (8007260 <xTaskIncrementTick+0x120>)
 8007190:	429c      	cmp	r4, r3
 8007192:	4f34      	ldr	r7, [pc, #208]	@ (8007264 <xTaskIncrementTick+0x124>)
 8007194:	d212      	bcs.n	80071bc <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007196:	2114      	movs	r1, #20
 8007198:	683a      	ldr	r2, [r7, #0]
 800719a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800719c:	434a      	muls	r2, r1
 800719e:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 80071a0:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 80071a2:	4a31      	ldr	r2, [pc, #196]	@ (8007268 <xTaskIncrementTick+0x128>)
				xSwitchRequired = pdTRUE;
 80071a4:	bf28      	it	cs
 80071a6:	f04f 0b01 	movcs.w	fp, #1
			if( xYieldPending != pdFALSE )
 80071aa:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 80071ac:	2a00      	cmp	r2, #0
 80071ae:	bf18      	it	ne
 80071b0:	f04f 0b01 	movne.w	fp, #1
}
 80071b4:	4658      	mov	r0, fp
 80071b6:	b003      	add	sp, #12
 80071b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071bc:	f8df a090 	ldr.w	sl, [pc, #144]	@ 8007250 <xTaskIncrementTick+0x110>
					prvAddTaskToReadyList( pxTCB );
 80071c0:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 800726c <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071c4:	f8da 2000 	ldr.w	r2, [sl]
 80071c8:	6812      	ldr	r2, [r2, #0]
 80071ca:	b91a      	cbnz	r2, 80071d4 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071cc:	f04f 32ff 	mov.w	r2, #4294967295
 80071d0:	602a      	str	r2, [r5, #0]
					break;
 80071d2:	e7e0      	b.n	8007196 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071d4:	f8da 2000 	ldr.w	r2, [sl]
 80071d8:	68d2      	ldr	r2, [r2, #12]
 80071da:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80071de:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 80071e2:	428c      	cmp	r4, r1
 80071e4:	d201      	bcs.n	80071ea <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 80071e6:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071e8:	e7d5      	b.n	8007196 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071ea:	f108 0304 	add.w	r3, r8, #4
 80071ee:	4618      	mov	r0, r3
 80071f0:	9301      	str	r3, [sp, #4]
 80071f2:	f7ff fde7 	bl	8006dc4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071f6:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 80071fa:	b119      	cbz	r1, 8007204 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071fc:	f108 0018 	add.w	r0, r8, #24
 8007200:	f7ff fde0 	bl	8006dc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007204:	2201      	movs	r2, #1
 8007206:	f04f 0c14 	mov.w	ip, #20
 800720a:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800720e:	f8d9 3000 	ldr.w	r3, [r9]
 8007212:	fa02 f100 	lsl.w	r1, r2, r0
 8007216:	4319      	orrs	r1, r3
 8007218:	fb0c 6000 	mla	r0, ip, r0, r6
 800721c:	f8c9 1000 	str.w	r1, [r9]
 8007220:	f108 0104 	add.w	r1, r8, #4
 8007224:	f7ff fdac 	bl	8006d80 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007228:	6838      	ldr	r0, [r7, #0]
 800722a:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800722e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8007230:	4291      	cmp	r1, r2
 8007232:	bf28      	it	cs
 8007234:	f04f 0b01 	movcs.w	fp, #1
 8007238:	e7c4      	b.n	80071c4 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800723a:	4a0d      	ldr	r2, [pc, #52]	@ (8007270 <xTaskIncrementTick+0x130>)
BaseType_t xSwitchRequired = pdFALSE;
 800723c:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 8007240:	6813      	ldr	r3, [r2, #0]
 8007242:	3301      	adds	r3, #1
 8007244:	6013      	str	r3, [r2, #0]
 8007246:	e7b5      	b.n	80071b4 <xTaskIncrementTick+0x74>
 8007248:	20000ae4 	.word	0x20000ae4
 800724c:	20000b08 	.word	0x20000b08
 8007250:	20000b54 	.word	0x20000b54
 8007254:	20000b50 	.word	0x20000b50
 8007258:	20000af4 	.word	0x20000af4
 800725c:	20000aec 	.word	0x20000aec
 8007260:	20000b80 	.word	0x20000b80
 8007264:	20000c0c 	.word	0x20000c0c
 8007268:	20000af8 	.word	0x20000af8
 800726c:	20000b04 	.word	0x20000b04
 8007270:	20000afc 	.word	0x20000afc

08007274 <xTaskResumeAll>:
{
 8007274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8007278:	4c31      	ldr	r4, [pc, #196]	@ (8007340 <xTaskResumeAll+0xcc>)
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	b943      	cbnz	r3, 8007290 <xTaskResumeAll+0x1c>
 800727e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	e7fe      	b.n	800728e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8007290:	f000 f928 	bl	80074e4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	3b01      	subs	r3, #1
 8007298:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800729a:	6824      	ldr	r4, [r4, #0]
 800729c:	b12c      	cbz	r4, 80072aa <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800729e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80072a0:	f000 f940 	bl	8007524 <vPortExitCritical>
}
 80072a4:	4620      	mov	r0, r4
 80072a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80072aa:	4b26      	ldr	r3, [pc, #152]	@ (8007344 <xTaskResumeAll+0xd0>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d0f5      	beq.n	800729e <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072b2:	4d25      	ldr	r5, [pc, #148]	@ (8007348 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 80072b4:	4e25      	ldr	r6, [pc, #148]	@ (800734c <xTaskResumeAll+0xd8>)
 80072b6:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8007350 <xTaskResumeAll+0xdc>
 80072ba:	e01f      	b.n	80072fc <xTaskResumeAll+0x88>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072bc:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxTCB );
 80072be:	2701      	movs	r7, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072c0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072c2:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072c6:	f104 0018 	add.w	r0, r4, #24
 80072ca:	f7ff fd7b 	bl	8006dc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072ce:	4648      	mov	r0, r9
 80072d0:	f7ff fd78 	bl	8006dc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80072d4:	2014      	movs	r0, #20
 80072d6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80072d8:	6831      	ldr	r1, [r6, #0]
 80072da:	fa07 f302 	lsl.w	r3, r7, r2
 80072de:	430b      	orrs	r3, r1
 80072e0:	fb00 8002 	mla	r0, r0, r2, r8
 80072e4:	4649      	mov	r1, r9
 80072e6:	6033      	str	r3, [r6, #0]
 80072e8:	f7ff fd4a 	bl	8006d80 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072ec:	4b19      	ldr	r3, [pc, #100]	@ (8007354 <xTaskResumeAll+0xe0>)
 80072ee:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d301      	bcc.n	80072fc <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 80072f8:	4b17      	ldr	r3, [pc, #92]	@ (8007358 <xTaskResumeAll+0xe4>)
 80072fa:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072fc:	682b      	ldr	r3, [r5, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1dc      	bne.n	80072bc <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8007302:	b10c      	cbz	r4, 8007308 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8007304:	f7ff fdb2 	bl	8006e6c <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007308:	4d14      	ldr	r5, [pc, #80]	@ (800735c <xTaskResumeAll+0xe8>)
 800730a:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800730c:	b144      	cbz	r4, 8007320 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 800730e:	2701      	movs	r7, #1
 8007310:	4e11      	ldr	r6, [pc, #68]	@ (8007358 <xTaskResumeAll+0xe4>)
							if( xTaskIncrementTick() != pdFALSE )
 8007312:	f7ff ff15 	bl	8007140 <xTaskIncrementTick>
 8007316:	b100      	cbz	r0, 800731a <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8007318:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800731a:	3c01      	subs	r4, #1
 800731c:	d1f9      	bne.n	8007312 <xTaskResumeAll+0x9e>
						xPendedTicks = 0;
 800731e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8007320:	4b0d      	ldr	r3, [pc, #52]	@ (8007358 <xTaskResumeAll+0xe4>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d0ba      	beq.n	800729e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8007328:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800732c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007330:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800733c:	2401      	movs	r4, #1
 800733e:	e7af      	b.n	80072a0 <xTaskResumeAll+0x2c>
 8007340:	20000ae4 	.word	0x20000ae4
 8007344:	20000b0c 	.word	0x20000b0c
 8007348:	20000b3c 	.word	0x20000b3c
 800734c:	20000b04 	.word	0x20000b04
 8007350:	20000b80 	.word	0x20000b80
 8007354:	20000c0c 	.word	0x20000c0c
 8007358:	20000af8 	.word	0x20000af8
 800735c:	20000afc 	.word	0x20000afc

08007360 <vTaskDelay>:
	{
 8007360:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007362:	b950      	cbnz	r0, 800737a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8007364:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007368:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800736c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	f3bf 8f6f 	isb	sy
	}
 8007378:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800737a:	4b0a      	ldr	r3, [pc, #40]	@ (80073a4 <vTaskDelay+0x44>)
 800737c:	6819      	ldr	r1, [r3, #0]
 800737e:	b141      	cbz	r1, 8007392 <vTaskDelay+0x32>
 8007380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007384:	f383 8811 	msr	BASEPRI, r3
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	f3bf 8f4f 	dsb	sy
 8007390:	e7fe      	b.n	8007390 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8007392:	f7ff fecd 	bl	8007130 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007396:	f7ff fd25 	bl	8006de4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800739a:	f7ff ff6b 	bl	8007274 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800739e:	2800      	cmp	r0, #0
 80073a0:	d0e0      	beq.n	8007364 <vTaskDelay+0x4>
 80073a2:	e7e9      	b.n	8007378 <vTaskDelay+0x18>
 80073a4:	20000ae4 	.word	0x20000ae4

080073a8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80073a8:	4b17      	ldr	r3, [pc, #92]	@ (8007408 <vTaskSwitchContext+0x60>)
{
 80073aa:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	4b17      	ldr	r3, [pc, #92]	@ (800740c <vTaskSwitchContext+0x64>)
 80073b0:	b112      	cbz	r2, 80073b8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80073b2:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073b4:	601a      	str	r2, [r3, #0]
}
 80073b6:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80073b8:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073ba:	4b15      	ldr	r3, [pc, #84]	@ (8007410 <vTaskSwitchContext+0x68>)
 80073bc:	681a      	ldr	r2, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80073be:	fab2 f282 	clz	r2, r2
 80073c2:	2314      	movs	r3, #20
 80073c4:	b2d2      	uxtb	r2, r2
 80073c6:	f1c2 021f 	rsb	r2, r2, #31
 80073ca:	4353      	muls	r3, r2
 80073cc:	4911      	ldr	r1, [pc, #68]	@ (8007414 <vTaskSwitchContext+0x6c>)
 80073ce:	58cc      	ldr	r4, [r1, r3]
 80073d0:	18c8      	adds	r0, r1, r3
 80073d2:	b944      	cbnz	r4, 80073e6 <vTaskSwitchContext+0x3e>
	__asm volatile
 80073d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d8:	f383 8811 	msr	BASEPRI, r3
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	e7fe      	b.n	80073e4 <vTaskSwitchContext+0x3c>
 80073e6:	6844      	ldr	r4, [r0, #4]
 80073e8:	3308      	adds	r3, #8
 80073ea:	6864      	ldr	r4, [r4, #4]
 80073ec:	440b      	add	r3, r1
 80073ee:	429c      	cmp	r4, r3
 80073f0:	bf08      	it	eq
 80073f2:	6863      	ldreq	r3, [r4, #4]
 80073f4:	6044      	str	r4, [r0, #4]
 80073f6:	bf08      	it	eq
 80073f8:	6043      	streq	r3, [r0, #4]
 80073fa:	2314      	movs	r3, #20
 80073fc:	fb03 1102 	mla	r1, r3, r2, r1
 8007400:	684b      	ldr	r3, [r1, #4]
 8007402:	68da      	ldr	r2, [r3, #12]
 8007404:	4b04      	ldr	r3, [pc, #16]	@ (8007418 <vTaskSwitchContext+0x70>)
 8007406:	e7d5      	b.n	80073b4 <vTaskSwitchContext+0xc>
 8007408:	20000ae4 	.word	0x20000ae4
 800740c:	20000af8 	.word	0x20000af8
 8007410:	20000b04 	.word	0x20000b04
 8007414:	20000b80 	.word	0x20000b80
 8007418:	20000c0c 	.word	0x20000c0c

0800741c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800741c:	4b05      	ldr	r3, [pc, #20]	@ (8007434 <xTaskGetSchedulerState+0x18>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	b133      	cbz	r3, 8007430 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007422:	4b05      	ldr	r3, [pc, #20]	@ (8007438 <xTaskGetSchedulerState+0x1c>)
 8007424:	6818      	ldr	r0, [r3, #0]
 8007426:	fab0 f080 	clz	r0, r0
 800742a:	0940      	lsrs	r0, r0, #5
 800742c:	0040      	lsls	r0, r0, #1
 800742e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007430:	2001      	movs	r0, #1
	}
 8007432:	4770      	bx	lr
 8007434:	20000b00 	.word	0x20000b00
 8007438:	20000ae4 	.word	0x20000ae4

0800743c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800743c:	4806      	ldr	r0, [pc, #24]	@ (8007458 <prvPortStartFirstTask+0x1c>)
 800743e:	6800      	ldr	r0, [r0, #0]
 8007440:	6800      	ldr	r0, [r0, #0]
 8007442:	f380 8808 	msr	MSP, r0
 8007446:	b662      	cpsie	i
 8007448:	b661      	cpsie	f
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	df00      	svc	0
 8007454:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007456:	0000      	.short	0x0000
 8007458:	e000ed08 	.word	0xe000ed08

0800745c <prvTaskExitError>:
volatile uint32_t ulDummy = 0UL;
 800745c:	2300      	movs	r3, #0
{
 800745e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8007460:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8007462:	4b0d      	ldr	r3, [pc, #52]	@ (8007498 <prvTaskExitError+0x3c>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	3301      	adds	r3, #1
 8007468:	d008      	beq.n	800747c <prvTaskExitError+0x20>
 800746a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746e:	f383 8811 	msr	BASEPRI, r3
 8007472:	f3bf 8f6f 	isb	sy
 8007476:	f3bf 8f4f 	dsb	sy
 800747a:	e7fe      	b.n	800747a <prvTaskExitError+0x1e>
 800747c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007480:	f383 8811 	msr	BASEPRI, r3
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800748c:	9b01      	ldr	r3, [sp, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d0fc      	beq.n	800748c <prvTaskExitError+0x30>
}
 8007492:	b002      	add	sp, #8
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	2000000c 	.word	0x2000000c

0800749c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800749c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80074a0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80074a4:	4b05      	ldr	r3, [pc, #20]	@ (80074bc <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80074a6:	f021 0101 	bic.w	r1, r1, #1
 80074aa:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80074ae:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80074b2:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80074b6:	3840      	subs	r0, #64	@ 0x40
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	0800745d 	.word	0x0800745d

080074c0 <SVC_Handler>:
	__asm volatile (
 80074c0:	4b07      	ldr	r3, [pc, #28]	@ (80074e0 <pxCurrentTCBConst2>)
 80074c2:	6819      	ldr	r1, [r3, #0]
 80074c4:	6808      	ldr	r0, [r1, #0]
 80074c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80074ca:	f380 8809 	msr	PSP, r0
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	f04f 0000 	mov.w	r0, #0
 80074d6:	f380 8811 	msr	BASEPRI, r0
 80074da:	f04e 0e0d 	orr.w	lr, lr, #13
 80074de:	4770      	bx	lr

080074e0 <pxCurrentTCBConst2>:
 80074e0:	20000c0c 	.word	0x20000c0c

080074e4 <vPortEnterCritical>:
 80074e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e8:	f383 8811 	msr	BASEPRI, r3
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80074f4:	4a0a      	ldr	r2, [pc, #40]	@ (8007520 <vPortEnterCritical+0x3c>)
 80074f6:	6813      	ldr	r3, [r2, #0]
 80074f8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80074fa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80074fc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80074fe:	d10e      	bne.n	800751e <vPortEnterCritical+0x3a>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007500:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007504:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8007508:	b2db      	uxtb	r3, r3
 800750a:	b143      	cbz	r3, 800751e <vPortEnterCritical+0x3a>
 800750c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007510:	f383 8811 	msr	BASEPRI, r3
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	e7fe      	b.n	800751c <vPortEnterCritical+0x38>
	}
}
 800751e:	4770      	bx	lr
 8007520:	2000000c 	.word	0x2000000c

08007524 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8007524:	4a08      	ldr	r2, [pc, #32]	@ (8007548 <vPortExitCritical+0x24>)
 8007526:	6813      	ldr	r3, [r2, #0]
 8007528:	b943      	cbnz	r3, 800753c <vPortExitCritical+0x18>
 800752a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	e7fe      	b.n	800753a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800753c:	3b01      	subs	r3, #1
 800753e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007540:	b90b      	cbnz	r3, 8007546 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007542:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007546:	4770      	bx	lr
 8007548:	2000000c 	.word	0x2000000c
 800754c:	00000000 	.word	0x00000000

08007550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007550:	f3ef 8009 	mrs	r0, PSP
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	4b0d      	ldr	r3, [pc, #52]	@ (8007590 <pxCurrentTCBConst>)
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007560:	6010      	str	r0, [r2, #0]
 8007562:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007566:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800756a:	f380 8811 	msr	BASEPRI, r0
 800756e:	f7ff ff1b 	bl	80073a8 <vTaskSwitchContext>
 8007572:	f04f 0000 	mov.w	r0, #0
 8007576:	f380 8811 	msr	BASEPRI, r0
 800757a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800757e:	6819      	ldr	r1, [r3, #0]
 8007580:	6808      	ldr	r0, [r1, #0]
 8007582:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007586:	f380 8809 	msr	PSP, r0
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	4770      	bx	lr

08007590 <pxCurrentTCBConst>:
 8007590:	20000c0c 	.word	0x20000c0c

08007594 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007594:	b508      	push	{r3, lr}
	__asm volatile
 8007596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800759a:	f383 8811 	msr	BASEPRI, r3
 800759e:	f3bf 8f6f 	isb	sy
 80075a2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80075a6:	f7ff fdcb 	bl	8007140 <xTaskIncrementTick>
 80075aa:	b128      	cbz	r0, 80075b8 <xPortSysTickHandler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80075ac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80075b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80075b8:	2300      	movs	r3, #0
 80075ba:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80075be:	bd08      	pop	{r3, pc}

080075c0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075c0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80075c4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80075c6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075ca:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075cc:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80075ce:	4b04      	ldr	r3, [pc, #16]	@ (80075e0 <vPortSetupTimerInterrupt+0x20>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80075d6:	3b01      	subs	r3, #1
 80075d8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80075da:	2307      	movs	r3, #7
 80075dc:	6113      	str	r3, [r2, #16]
}
 80075de:	4770      	bx	lr
 80075e0:	20000000 	.word	0x20000000

080075e4 <xPortStartScheduler>:
{
 80075e4:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80075e6:	4b27      	ldr	r3, [pc, #156]	@ (8007684 <xPortStartScheduler+0xa0>)
 80075e8:	781a      	ldrb	r2, [r3, #0]
 80075ea:	b2d2      	uxtb	r2, r2
 80075ec:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80075ee:	22ff      	movs	r2, #255	@ 0xff
 80075f0:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80075f2:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80075f4:	4a24      	ldr	r2, [pc, #144]	@ (8007688 <xPortStartScheduler+0xa4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80075fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007600:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007604:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007606:	2307      	movs	r3, #7
 8007608:	4a20      	ldr	r2, [pc, #128]	@ (800768c <xPortStartScheduler+0xa8>)
 800760a:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800760c:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 8007610:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007612:	0609      	lsls	r1, r1, #24
 8007614:	d40a      	bmi.n	800762c <xPortStartScheduler+0x48>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007616:	2b03      	cmp	r3, #3
 8007618:	d011      	beq.n	800763e <xPortStartScheduler+0x5a>
	__asm volatile
 800761a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761e:	f383 8811 	msr	BASEPRI, r3
 8007622:	f3bf 8f6f 	isb	sy
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	e7fe      	b.n	800762a <xPortStartScheduler+0x46>
			ulMaxPRIGROUPValue--;
 800762c:	3b01      	subs	r3, #1
 800762e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007630:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007634:	005b      	lsls	r3, r3, #1
 8007636:	b2db      	uxtb	r3, r3
 8007638:	f88d 3003 	strb.w	r3, [sp, #3]
 800763c:	e7e6      	b.n	800760c <xPortStartScheduler+0x28>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800763e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007642:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007644:	9b01      	ldr	r3, [sp, #4]
 8007646:	4a0f      	ldr	r2, [pc, #60]	@ (8007684 <xPortStartScheduler+0xa0>)
 8007648:	b2db      	uxtb	r3, r3
 800764a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800764c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 8007650:	2400      	movs	r4, #0
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007652:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 8007656:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800765a:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800765e:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 8007662:	f042 4270 	orr.w	r2, r2, #4026531840	@ 0xf0000000
 8007666:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800766a:	f7ff ffa9 	bl	80075c0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800766e:	4b08      	ldr	r3, [pc, #32]	@ (8007690 <xPortStartScheduler+0xac>)
 8007670:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8007672:	f7ff fee3 	bl	800743c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007676:	f7ff fe97 	bl	80073a8 <vTaskSwitchContext>
}
 800767a:	4620      	mov	r0, r4
	prvTaskExitError();
 800767c:	f7ff feee 	bl	800745c <prvTaskExitError>
}
 8007680:	b002      	add	sp, #8
 8007682:	bd10      	pop	{r4, pc}
 8007684:	e000e400 	.word	0xe000e400
 8007688:	20000c14 	.word	0x20000c14
 800768c:	20000c10 	.word	0x20000c10
 8007690:	2000000c 	.word	0x2000000c

08007694 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007694:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007696:	4b10      	ldr	r3, [pc, #64]	@ (80076d8 <prvInsertBlockIntoFreeList+0x44>)
 8007698:	461a      	mov	r2, r3
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4283      	cmp	r3, r0
 800769e:	d3fb      	bcc.n	8007698 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80076a0:	6854      	ldr	r4, [r2, #4]
 80076a2:	1911      	adds	r1, r2, r4
 80076a4:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076a6:	bf01      	itttt	eq
 80076a8:	6841      	ldreq	r1, [r0, #4]
 80076aa:	4610      	moveq	r0, r2
 80076ac:	1909      	addeq	r1, r1, r4
 80076ae:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076b0:	6844      	ldr	r4, [r0, #4]
 80076b2:	1901      	adds	r1, r0, r4
 80076b4:	428b      	cmp	r3, r1
 80076b6:	d10c      	bne.n	80076d2 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076b8:	4908      	ldr	r1, [pc, #32]	@ (80076dc <prvInsertBlockIntoFreeList+0x48>)
 80076ba:	6809      	ldr	r1, [r1, #0]
 80076bc:	428b      	cmp	r3, r1
 80076be:	d003      	beq.n	80076c8 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076c0:	6859      	ldr	r1, [r3, #4]
 80076c2:	4421      	add	r1, r4
 80076c4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076c6:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80076c8:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80076ca:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80076cc:	bf18      	it	ne
 80076ce:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076d0:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80076d2:	4619      	mov	r1, r3
 80076d4:	e7f8      	b.n	80076c8 <prvInsertBlockIntoFreeList+0x34>
 80076d6:	bf00      	nop
 80076d8:	20000c30 	.word	0x20000c30
 80076dc:	20000c2c 	.word	0x20000c2c

080076e0 <pvPortMalloc>:
{
 80076e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076e4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80076e6:	f7ff fd23 	bl	8007130 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80076ea:	4942      	ldr	r1, [pc, #264]	@ (80077f4 <pvPortMalloc+0x114>)
 80076ec:	4d42      	ldr	r5, [pc, #264]	@ (80077f8 <pvPortMalloc+0x118>)
 80076ee:	680b      	ldr	r3, [r1, #0]
 80076f0:	bb0b      	cbnz	r3, 8007736 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80076f2:	4a42      	ldr	r2, [pc, #264]	@ (80077fc <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80076f4:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80076f6:	bf1f      	itttt	ne
 80076f8:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076fa:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80076fe:	f502 52c0 	addne.w	r2, r2, #6144	@ 0x1800
 8007702:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007704:	bf0c      	ite	eq
 8007706:	f44f 53c0 	moveq.w	r3, #6144	@ 0x1800
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800770a:	4602      	movne	r2, r0
	xStart.xBlockSize = ( size_t ) 0;
 800770c:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800770e:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007710:	4e3b      	ldr	r6, [pc, #236]	@ (8007800 <pvPortMalloc+0x120>)
	uxAddress -= xHeapStructSize;
 8007712:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007714:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8007718:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800771a:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 800771c:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007720:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007722:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8007726:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007728:	4b36      	ldr	r3, [pc, #216]	@ (8007804 <pvPortMalloc+0x124>)
 800772a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800772c:	4b36      	ldr	r3, [pc, #216]	@ (8007808 <pvPortMalloc+0x128>)
 800772e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007730:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007734:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007736:	682e      	ldr	r6, [r5, #0]
 8007738:	4226      	tst	r6, r4
 800773a:	d155      	bne.n	80077e8 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 800773c:	2c00      	cmp	r4, #0
 800773e:	d046      	beq.n	80077ce <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 8007740:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007744:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007746:	bf1c      	itt	ne
 8007748:	f023 0307 	bicne.w	r3, r3, #7
 800774c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800774e:	2b00      	cmp	r3, #0
 8007750:	d04a      	beq.n	80077e8 <pvPortMalloc+0x108>
 8007752:	4f2d      	ldr	r7, [pc, #180]	@ (8007808 <pvPortMalloc+0x128>)
 8007754:	683c      	ldr	r4, [r7, #0]
 8007756:	429c      	cmp	r4, r3
 8007758:	d346      	bcc.n	80077e8 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 800775a:	4a29      	ldr	r2, [pc, #164]	@ (8007800 <pvPortMalloc+0x120>)
 800775c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800775e:	6868      	ldr	r0, [r5, #4]
 8007760:	4298      	cmp	r0, r3
 8007762:	d204      	bcs.n	800776e <pvPortMalloc+0x8e>
 8007764:	f8d5 c000 	ldr.w	ip, [r5]
 8007768:	f1bc 0f00 	cmp.w	ip, #0
 800776c:	d115      	bne.n	800779a <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 800776e:	6809      	ldr	r1, [r1, #0]
 8007770:	42a9      	cmp	r1, r5
 8007772:	d039      	beq.n	80077e8 <pvPortMalloc+0x108>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007774:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007776:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800777a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800777c:	1ac2      	subs	r2, r0, r3
 800777e:	2a10      	cmp	r2, #16
 8007780:	d912      	bls.n	80077a8 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007782:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007784:	0741      	lsls	r1, r0, #29
 8007786:	d00b      	beq.n	80077a0 <pvPortMalloc+0xc0>
 8007788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800778c:	f383 8811 	msr	BASEPRI, r3
 8007790:	f3bf 8f6f 	isb	sy
 8007794:	f3bf 8f4f 	dsb	sy
 8007798:	e7fe      	b.n	8007798 <pvPortMalloc+0xb8>
 800779a:	462a      	mov	r2, r5
 800779c:	4665      	mov	r5, ip
 800779e:	e7de      	b.n	800775e <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80077a0:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80077a2:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80077a4:	f7ff ff76 	bl	8007694 <prvInsertBlockIntoFreeList>
					pxBlock->pxNextFreeBlock = NULL;
 80077a8:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80077aa:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80077ac:	4915      	ldr	r1, [pc, #84]	@ (8007804 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80077ae:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80077b0:	4316      	orrs	r6, r2
					xNumberOfSuccessfulAllocations++;
 80077b2:	4a16      	ldr	r2, [pc, #88]	@ (800780c <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80077b4:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 80077b6:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 80077b8:	6813      	ldr	r3, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80077ba:	4284      	cmp	r4, r0
					xNumberOfSuccessfulAllocations++;
 80077bc:	f103 0301 	add.w	r3, r3, #1
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80077c0:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80077c2:	bf38      	it	cc
 80077c4:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80077c6:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80077c8:	f108 0408 	add.w	r4, r8, #8
					xNumberOfSuccessfulAllocations++;
 80077cc:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 80077ce:	f7ff fd51 	bl	8007274 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80077d2:	0763      	lsls	r3, r4, #29
 80077d4:	d00a      	beq.n	80077ec <pvPortMalloc+0x10c>
 80077d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077da:	f383 8811 	msr	BASEPRI, r3
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	e7fe      	b.n	80077e6 <pvPortMalloc+0x106>
void *pvReturn = NULL;
 80077e8:	2400      	movs	r4, #0
 80077ea:	e7f0      	b.n	80077ce <pvPortMalloc+0xee>
}
 80077ec:	4620      	mov	r0, r4
 80077ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077f2:	bf00      	nop
 80077f4:	20000c2c 	.word	0x20000c2c
 80077f8:	20000c18 	.word	0x20000c18
 80077fc:	20000c38 	.word	0x20000c38
 8007800:	20000c30 	.word	0x20000c30
 8007804:	20000c24 	.word	0x20000c24
 8007808:	20000c28 	.word	0x20000c28
 800780c:	20000c20 	.word	0x20000c20

08007810 <vPortFree>:
{
 8007810:	b510      	push	{r4, lr}
	if( pv != NULL )
 8007812:	4604      	mov	r4, r0
 8007814:	b390      	cbz	r0, 800787c <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007816:	4a1a      	ldr	r2, [pc, #104]	@ (8007880 <vPortFree+0x70>)
 8007818:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800781c:	6812      	ldr	r2, [r2, #0]
 800781e:	4213      	tst	r3, r2
 8007820:	d108      	bne.n	8007834 <vPortFree+0x24>
 8007822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007826:	f383 8811 	msr	BASEPRI, r3
 800782a:	f3bf 8f6f 	isb	sy
 800782e:	f3bf 8f4f 	dsb	sy
 8007832:	e7fe      	b.n	8007832 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007834:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007838:	b141      	cbz	r1, 800784c <vPortFree+0x3c>
 800783a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	e7fe      	b.n	800784a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800784c:	ea23 0302 	bic.w	r3, r3, r2
 8007850:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8007854:	f7ff fc6c 	bl	8007130 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007858:	4a0a      	ldr	r2, [pc, #40]	@ (8007884 <vPortFree+0x74>)
 800785a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800785e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007860:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007864:	440b      	add	r3, r1
 8007866:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007868:	f7ff ff14 	bl	8007694 <prvInsertBlockIntoFreeList>
}
 800786c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 8007870:	4a05      	ldr	r2, [pc, #20]	@ (8007888 <vPortFree+0x78>)
 8007872:	6813      	ldr	r3, [r2, #0]
 8007874:	3301      	adds	r3, #1
 8007876:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8007878:	f7ff bcfc 	b.w	8007274 <xTaskResumeAll>
}
 800787c:	bd10      	pop	{r4, pc}
 800787e:	bf00      	nop
 8007880:	20000c18 	.word	0x20000c18
 8007884:	20000c28 	.word	0x20000c28
 8007888:	20000c1c 	.word	0x20000c1c

0800788c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800788c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800788e:	4b0e      	ldr	r3, [pc, #56]	@ (80078c8 <HAL_InitTick+0x3c>)
{
 8007890:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007892:	781a      	ldrb	r2, [r3, #0]
 8007894:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007898:	fbb3 f3f2 	udiv	r3, r3, r2
 800789c:	4a0b      	ldr	r2, [pc, #44]	@ (80078cc <HAL_InitTick+0x40>)
 800789e:	6810      	ldr	r0, [r2, #0]
 80078a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80078a4:	f000 f8ae 	bl	8007a04 <HAL_SYSTICK_Config>
 80078a8:	4604      	mov	r4, r0
 80078aa:	b958      	cbnz	r0, 80078c4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80078ac:	2d0f      	cmp	r5, #15
 80078ae:	d809      	bhi.n	80078c4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80078b0:	4602      	mov	r2, r0
 80078b2:	4629      	mov	r1, r5
 80078b4:	f04f 30ff 	mov.w	r0, #4294967295
 80078b8:	f000 f854 	bl	8007964 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80078bc:	4620      	mov	r0, r4
 80078be:	4b04      	ldr	r3, [pc, #16]	@ (80078d0 <HAL_InitTick+0x44>)
 80078c0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80078c2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80078c4:	2001      	movs	r0, #1
 80078c6:	e7fc      	b.n	80078c2 <HAL_InitTick+0x36>
 80078c8:	20000010 	.word	0x20000010
 80078cc:	20000000 	.word	0x20000000
 80078d0:	20000014 	.word	0x20000014

080078d4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80078d4:	4a07      	ldr	r2, [pc, #28]	@ (80078f4 <HAL_Init+0x20>)
{
 80078d6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80078d8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80078da:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80078dc:	f043 0310 	orr.w	r3, r3, #16
 80078e0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80078e2:	f000 f82d 	bl	8007940 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80078e6:	200f      	movs	r0, #15
 80078e8:	f7ff ffd0 	bl	800788c <HAL_InitTick>
  HAL_MspInit();
 80078ec:	f7fe faba 	bl	8005e64 <HAL_MspInit>
}
 80078f0:	2000      	movs	r0, #0
 80078f2:	bd08      	pop	{r3, pc}
 80078f4:	40022000 	.word	0x40022000

080078f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80078f8:	4a03      	ldr	r2, [pc, #12]	@ (8007908 <HAL_IncTick+0x10>)
 80078fa:	4b04      	ldr	r3, [pc, #16]	@ (800790c <HAL_IncTick+0x14>)
 80078fc:	6811      	ldr	r1, [r2, #0]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	440b      	add	r3, r1
 8007902:	6013      	str	r3, [r2, #0]
}
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	20002438 	.word	0x20002438
 800790c:	20000010 	.word	0x20000010

08007910 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007910:	4b01      	ldr	r3, [pc, #4]	@ (8007918 <HAL_GetTick+0x8>)
 8007912:	6818      	ldr	r0, [r3, #0]
}
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	20002438 	.word	0x20002438

0800791c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800791c:	b538      	push	{r3, r4, r5, lr}
 800791e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007920:	f7ff fff6 	bl	8007910 <HAL_GetTick>
 8007924:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007926:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8007928:	bf1e      	ittt	ne
 800792a:	4b04      	ldrne	r3, [pc, #16]	@ (800793c <HAL_Delay+0x20>)
 800792c:	781b      	ldrbne	r3, [r3, #0]
 800792e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007930:	f7ff ffee 	bl	8007910 <HAL_GetTick>
 8007934:	1b43      	subs	r3, r0, r5
 8007936:	42a3      	cmp	r3, r4
 8007938:	d3fa      	bcc.n	8007930 <HAL_Delay+0x14>
  {
  }
}
 800793a:	bd38      	pop	{r3, r4, r5, pc}
 800793c:	20000010 	.word	0x20000010

08007940 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007940:	4907      	ldr	r1, [pc, #28]	@ (8007960 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007942:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007944:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007946:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800794a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800794e:	0412      	lsls	r2, r2, #16
 8007950:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007954:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007958:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800795c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800795e:	4770      	bx	lr
 8007960:	e000ed00 	.word	0xe000ed00

08007964 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007964:	4b15      	ldr	r3, [pc, #84]	@ (80079bc <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007966:	b530      	push	{r4, r5, lr}
 8007968:	68dc      	ldr	r4, [r3, #12]
 800796a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800796e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007972:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007974:	2b04      	cmp	r3, #4
 8007976:	bf28      	it	cs
 8007978:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800797a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800797c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007980:	bf94      	ite	ls
 8007982:	2400      	movls	r4, #0
 8007984:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007986:	fa05 f303 	lsl.w	r3, r5, r3
 800798a:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800798e:	40a5      	lsls	r5, r4
 8007990:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007994:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8007996:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007998:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800799c:	bfac      	ite	ge
 800799e:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079a2:	4a07      	ldrlt	r2, [pc, #28]	@ (80079c0 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079a4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	bfab      	itete	ge
 80079ac:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079b0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079b4:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079b8:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80079ba:	bd30      	pop	{r4, r5, pc}
 80079bc:	e000ed00 	.word	0xe000ed00
 80079c0:	e000ed14 	.word	0xe000ed14

080079c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80079c4:	2800      	cmp	r0, #0
 80079c6:	db07      	blt.n	80079d8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079c8:	2301      	movs	r3, #1
 80079ca:	0941      	lsrs	r1, r0, #5
 80079cc:	4a03      	ldr	r2, [pc, #12]	@ (80079dc <HAL_NVIC_EnableIRQ+0x18>)
 80079ce:	f000 001f 	and.w	r0, r0, #31
 80079d2:	4083      	lsls	r3, r0
 80079d4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	e000e100 	.word	0xe000e100

080079e0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80079e0:	2800      	cmp	r0, #0
 80079e2:	db0c      	blt.n	80079fe <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079e4:	2201      	movs	r2, #1
 80079e6:	4906      	ldr	r1, [pc, #24]	@ (8007a00 <HAL_NVIC_DisableIRQ+0x20>)
 80079e8:	0943      	lsrs	r3, r0, #5
 80079ea:	f000 001f 	and.w	r0, r0, #31
 80079ee:	4082      	lsls	r2, r0
 80079f0:	3320      	adds	r3, #32
 80079f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80079f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80079fa:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80079fe:	4770      	bx	lr
 8007a00:	e000e100 	.word	0xe000e100

08007a04 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007a04:	3801      	subs	r0, #1
 8007a06:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8007a0a:	d20b      	bcs.n	8007a24 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007a0c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a10:	21f0      	movs	r1, #240	@ 0xf0
 8007a12:	4a05      	ldr	r2, [pc, #20]	@ (8007a28 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007a14:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a16:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007a1a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a1c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007a1e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a20:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007a22:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8007a24:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8007a26:	4770      	bx	lr
 8007a28:	e000ed00 	.word	0xe000ed00

08007a2c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007a2c:	4603      	mov	r3, r0
{
 8007a2e:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8007a30:	b340      	cbz	r0, 8007a84 <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007a32:	2114      	movs	r1, #20
 8007a34:	6800      	ldr	r0, [r0, #0]
 8007a36:	4a14      	ldr	r2, [pc, #80]	@ (8007a88 <HAL_DMA_Init+0x5c>)
 8007a38:	4402      	add	r2, r0
 8007a3a:	fbb2 f2f1 	udiv	r2, r2, r1
 8007a3e:	0092      	lsls	r2, r2, #2
 8007a40:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8007a42:	4a12      	ldr	r2, [pc, #72]	@ (8007a8c <HAL_DMA_Init+0x60>)
 8007a44:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007a46:	2202      	movs	r2, #2
 8007a48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007a4c:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 8007a50:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a52:	68dc      	ldr	r4, [r3, #12]
  tmp = hdma->Instance->CCR;
 8007a54:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a56:	4322      	orrs	r2, r4
 8007a58:	691c      	ldr	r4, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007a5a:	f421 517f 	bic.w	r1, r1, #16320	@ 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a5e:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a60:	695c      	ldr	r4, [r3, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007a62:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a66:	4322      	orrs	r2, r4
 8007a68:	699c      	ldr	r4, [r3, #24]
 8007a6a:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8007a6c:	69dc      	ldr	r4, [r3, #28]
 8007a6e:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8007a70:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007a72:	6002      	str	r2, [r0, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a74:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007a76:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a78:	6398      	str	r0, [r3, #56]	@ 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007a7a:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8007a7e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
}
 8007a82:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007a84:	2001      	movs	r0, #1
 8007a86:	e7fc      	b.n	8007a82 <HAL_DMA_Init+0x56>
 8007a88:	bffdfff8 	.word	0xbffdfff8
 8007a8c:	40020000 	.word	0x40020000

08007a90 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007a90:	b510      	push	{r4, lr}
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007a92:	b308      	cbz	r0, 8007ad8 <HAL_DMA_DeInit+0x48>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8007a94:	6801      	ldr	r1, [r0, #0]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007a96:	4a11      	ldr	r2, [pc, #68]	@ (8007adc <HAL_DMA_DeInit+0x4c>)
  __HAL_DMA_DISABLE(hdma);
 8007a98:	680b      	ldr	r3, [r1, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007a9a:	440a      	add	r2, r1
  __HAL_DMA_DISABLE(hdma);
 8007a9c:	f023 0301 	bic.w	r3, r3, #1
 8007aa0:	600b      	str	r3, [r1, #0]
  hdma->Instance->CCR  = 0U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	600b      	str	r3, [r1, #0]
  hdma->Instance->CNDTR = 0U;
 8007aa6:	604b      	str	r3, [r1, #4]
  hdma->Instance->CPAR  = 0U;
 8007aa8:	608b      	str	r3, [r1, #8]
  hdma->Instance->CMAR = 0U;
 8007aaa:	60cb      	str	r3, [r1, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007aac:	2114      	movs	r1, #20
 8007aae:	fbb2 f2f1 	udiv	r2, r2, r1
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8007ab2:	2101      	movs	r1, #1
  hdma->DmaBaseAddress = DMA1;
 8007ab4:	4c0a      	ldr	r4, [pc, #40]	@ (8007ae0 <HAL_DMA_DeInit+0x50>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007ab6:	0092      	lsls	r2, r2, #2
 8007ab8:	6402      	str	r2, [r0, #64]	@ 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8007aba:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 8007abe:	63c4      	str	r4, [r0, #60]	@ 0x3c
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8007ac0:	6062      	str	r2, [r4, #4]
  hdma->XferHalfCpltCallback = NULL;
  hdma->XferErrorCallback = NULL;
  hdma->XferAbortCallback = NULL;

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ac2:	6383      	str	r3, [r0, #56]	@ 0x38
  hdma->XferHalfCpltCallback = NULL;
 8007ac4:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
  hdma->XferAbortCallback = NULL;
 8007ac8:	e9c0 330c 	strd	r3, r3, [r0, #48]	@ 0x30

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007acc:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007ad0:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8007ad4:	4618      	mov	r0, r3
}
 8007ad6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007ad8:	2001      	movs	r0, #1
 8007ada:	e7fc      	b.n	8007ad6 <HAL_DMA_DeInit+0x46>
 8007adc:	bffdfff8 	.word	0xbffdfff8
 8007ae0:	40020000 	.word	0x40020000

08007ae4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ae4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007ae6:	f890 4020 	ldrb.w	r4, [r0, #32]
 8007aea:	2c01      	cmp	r4, #1
 8007aec:	d034      	beq.n	8007b58 <HAL_DMA_Start_IT+0x74>
 8007aee:	2401      	movs	r4, #1
 8007af0:	f880 4020 	strb.w	r4, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007af4:	f890 4021 	ldrb.w	r4, [r0, #33]	@ 0x21
 8007af8:	2c01      	cmp	r4, #1
 8007afa:	b2e5      	uxtb	r5, r4
 8007afc:	f04f 0400 	mov.w	r4, #0
 8007b00:	d128      	bne.n	8007b54 <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b02:	2602      	movs	r6, #2
 8007b04:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b08:	6384      	str	r4, [r0, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007b0a:	6804      	ldr	r4, [r0, #0]
 8007b0c:	6826      	ldr	r6, [r4, #0]
 8007b0e:	f026 0601 	bic.w	r6, r6, #1
 8007b12:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007b14:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 8007b18:	40bd      	lsls	r5, r7
 8007b1a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007b1c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007b1e:	6843      	ldr	r3, [r0, #4]
 8007b20:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8007b22:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007b24:	bf0b      	itete	eq
 8007b26:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8007b28:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8007b2a:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8007b2c:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8007b2e:	b14b      	cbz	r3, 8007b44 <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b30:	6823      	ldr	r3, [r4, #0]
 8007b32:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8007b36:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007b38:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8007b3a:	6823      	ldr	r3, [r4, #0]
 8007b3c:	f043 0301 	orr.w	r3, r3, #1
 8007b40:	6023      	str	r3, [r4, #0]
}
 8007b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007b44:	6823      	ldr	r3, [r4, #0]
 8007b46:	f023 0304 	bic.w	r3, r3, #4
 8007b4a:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007b4c:	6823      	ldr	r3, [r4, #0]
 8007b4e:	f043 030a 	orr.w	r3, r3, #10
 8007b52:	e7f0      	b.n	8007b36 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8007b54:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 8007b58:	2002      	movs	r0, #2
 8007b5a:	e7f2      	b.n	8007b42 <HAL_DMA_Start_IT+0x5e>

08007b5c <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007b5c:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
{
 8007b60:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007b62:	2a02      	cmp	r2, #2
 8007b64:	d006      	beq.n	8007b74 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b66:	2204      	movs	r2, #4
 8007b68:	6382      	str	r2, [r0, #56]	@ 0x38
    return HAL_ERROR;
 8007b6a:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 2020 	strb.w	r2, [r3, #32]
}
 8007b72:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b74:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007b76:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b78:	6811      	ldr	r1, [r2, #0]
 8007b7a:	f021 010e 	bic.w	r1, r1, #14
 8007b7e:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8007b80:	6811      	ldr	r1, [r2, #0]
 8007b82:	f021 0101 	bic.w	r1, r1, #1
 8007b86:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007b88:	2101      	movs	r1, #1
 8007b8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8007b90:	6042      	str	r2, [r0, #4]
  return status; 
 8007b92:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8007b94:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  return status; 
 8007b98:	e7e8      	b.n	8007b6c <HAL_DMA_Abort+0x10>
	...

08007b9c <HAL_DMA_Abort_IT>:
{  
 8007b9c:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007b9e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d003      	beq.n	8007bae <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ba6:	2304      	movs	r3, #4
 8007ba8:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 8007baa:	2001      	movs	r0, #1
}
 8007bac:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007bae:	6803      	ldr	r3, [r0, #0]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	f022 020e 	bic.w	r2, r2, #14
 8007bb6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	f022 0201 	bic.w	r2, r2, #1
 8007bbe:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007bc0:	4a17      	ldr	r2, [pc, #92]	@ (8007c20 <HAL_DMA_Abort_IT+0x84>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d01f      	beq.n	8007c06 <HAL_DMA_Abort_IT+0x6a>
 8007bc6:	3214      	adds	r2, #20
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d01e      	beq.n	8007c0a <HAL_DMA_Abort_IT+0x6e>
 8007bcc:	3214      	adds	r2, #20
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d01d      	beq.n	8007c0e <HAL_DMA_Abort_IT+0x72>
 8007bd2:	3214      	adds	r2, #20
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d01d      	beq.n	8007c14 <HAL_DMA_Abort_IT+0x78>
 8007bd8:	3214      	adds	r2, #20
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d01d      	beq.n	8007c1a <HAL_DMA_Abort_IT+0x7e>
 8007bde:	3214      	adds	r2, #20
 8007be0:	4293      	cmp	r3, r2
 8007be2:	bf14      	ite	ne
 8007be4:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8007be8:	f44f 1380 	moveq.w	r3, #1048576	@ 0x100000
 8007bec:	4a0d      	ldr	r2, [pc, #52]	@ (8007c24 <HAL_DMA_Abort_IT+0x88>)
 8007bee:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8007bfc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007bfe:	b103      	cbz	r3, 8007c02 <HAL_DMA_Abort_IT+0x66>
      hdma->XferAbortCallback(hdma);
 8007c00:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8007c02:	2000      	movs	r0, #0
 8007c04:	e7d2      	b.n	8007bac <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007c06:	2301      	movs	r3, #1
 8007c08:	e7f0      	b.n	8007bec <HAL_DMA_Abort_IT+0x50>
 8007c0a:	2310      	movs	r3, #16
 8007c0c:	e7ee      	b.n	8007bec <HAL_DMA_Abort_IT+0x50>
 8007c0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007c12:	e7eb      	b.n	8007bec <HAL_DMA_Abort_IT+0x50>
 8007c14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007c18:	e7e8      	b.n	8007bec <HAL_DMA_Abort_IT+0x50>
 8007c1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007c1e:	e7e5      	b.n	8007bec <HAL_DMA_Abort_IT+0x50>
 8007c20:	40020008 	.word	0x40020008
 8007c24:	40020000 	.word	0x40020000

08007c28 <HAL_DMA_IRQHandler>:
{
 8007c28:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007c2a:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007c2c:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007c2e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007c30:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8007c32:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007c34:	4095      	lsls	r5, r2
 8007c36:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8007c38:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007c3a:	d032      	beq.n	8007ca2 <HAL_DMA_IRQHandler+0x7a>
 8007c3c:	074d      	lsls	r5, r1, #29
 8007c3e:	d530      	bpl.n	8007ca2 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007c44:	bf5e      	ittt	pl
 8007c46:	681a      	ldrpl	r2, [r3, #0]
 8007c48:	f022 0204 	bicpl.w	r2, r2, #4
 8007c4c:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007c4e:	4a3e      	ldr	r2, [pc, #248]	@ (8007d48 <HAL_DMA_IRQHandler+0x120>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d019      	beq.n	8007c88 <HAL_DMA_IRQHandler+0x60>
 8007c54:	3214      	adds	r2, #20
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d018      	beq.n	8007c8c <HAL_DMA_IRQHandler+0x64>
 8007c5a:	3214      	adds	r2, #20
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d017      	beq.n	8007c90 <HAL_DMA_IRQHandler+0x68>
 8007c60:	3214      	adds	r2, #20
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d017      	beq.n	8007c96 <HAL_DMA_IRQHandler+0x6e>
 8007c66:	3214      	adds	r2, #20
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d017      	beq.n	8007c9c <HAL_DMA_IRQHandler+0x74>
 8007c6c:	3214      	adds	r2, #20
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	bf14      	ite	ne
 8007c72:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 8007c76:	f44f 0380 	moveq.w	r3, #4194304	@ 0x400000
 8007c7a:	4a34      	ldr	r2, [pc, #208]	@ (8007d4c <HAL_DMA_IRQHandler+0x124>)
 8007c7c:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8007c7e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d05e      	beq.n	8007d42 <HAL_DMA_IRQHandler+0x11a>
}
 8007c84:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8007c86:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007c88:	2304      	movs	r3, #4
 8007c8a:	e7f6      	b.n	8007c7a <HAL_DMA_IRQHandler+0x52>
 8007c8c:	2340      	movs	r3, #64	@ 0x40
 8007c8e:	e7f4      	b.n	8007c7a <HAL_DMA_IRQHandler+0x52>
 8007c90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c94:	e7f1      	b.n	8007c7a <HAL_DMA_IRQHandler+0x52>
 8007c96:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007c9a:	e7ee      	b.n	8007c7a <HAL_DMA_IRQHandler+0x52>
 8007c9c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007ca0:	e7eb      	b.n	8007c7a <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8007ca2:	2502      	movs	r5, #2
 8007ca4:	4095      	lsls	r5, r2
 8007ca6:	4225      	tst	r5, r4
 8007ca8:	d035      	beq.n	8007d16 <HAL_DMA_IRQHandler+0xee>
 8007caa:	078d      	lsls	r5, r1, #30
 8007cac:	d533      	bpl.n	8007d16 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	0694      	lsls	r4, r2, #26
 8007cb2:	d406      	bmi.n	8007cc2 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	f022 020a 	bic.w	r2, r2, #10
 8007cba:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f880 2021 	strb.w	r2, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007cc2:	4a21      	ldr	r2, [pc, #132]	@ (8007d48 <HAL_DMA_IRQHandler+0x120>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d019      	beq.n	8007cfc <HAL_DMA_IRQHandler+0xd4>
 8007cc8:	3214      	adds	r2, #20
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d018      	beq.n	8007d00 <HAL_DMA_IRQHandler+0xd8>
 8007cce:	3214      	adds	r2, #20
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d017      	beq.n	8007d04 <HAL_DMA_IRQHandler+0xdc>
 8007cd4:	3214      	adds	r2, #20
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d017      	beq.n	8007d0a <HAL_DMA_IRQHandler+0xe2>
 8007cda:	3214      	adds	r2, #20
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d017      	beq.n	8007d10 <HAL_DMA_IRQHandler+0xe8>
 8007ce0:	3214      	adds	r2, #20
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	bf14      	ite	ne
 8007ce6:	f04f 7300 	movne.w	r3, #33554432	@ 0x2000000
 8007cea:	f44f 1300 	moveq.w	r3, #2097152	@ 0x200000
 8007cee:	4a17      	ldr	r2, [pc, #92]	@ (8007d4c <HAL_DMA_IRQHandler+0x124>)
 8007cf0:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8007cf8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007cfa:	e7c1      	b.n	8007c80 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007cfc:	2302      	movs	r3, #2
 8007cfe:	e7f6      	b.n	8007cee <HAL_DMA_IRQHandler+0xc6>
 8007d00:	2320      	movs	r3, #32
 8007d02:	e7f4      	b.n	8007cee <HAL_DMA_IRQHandler+0xc6>
 8007d04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d08:	e7f1      	b.n	8007cee <HAL_DMA_IRQHandler+0xc6>
 8007d0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007d0e:	e7ee      	b.n	8007cee <HAL_DMA_IRQHandler+0xc6>
 8007d10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007d14:	e7eb      	b.n	8007cee <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007d16:	2508      	movs	r5, #8
 8007d18:	4095      	lsls	r5, r2
 8007d1a:	4225      	tst	r5, r4
 8007d1c:	d011      	beq.n	8007d42 <HAL_DMA_IRQHandler+0x11a>
 8007d1e:	0709      	lsls	r1, r1, #28
 8007d20:	d50f      	bpl.n	8007d42 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d22:	6819      	ldr	r1, [r3, #0]
 8007d24:	f021 010e 	bic.w	r1, r1, #14
 8007d28:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	fa03 f202 	lsl.w	r2, r3, r2
 8007d30:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007d32:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8007d34:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8007d38:	2300      	movs	r3, #0
 8007d3a:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8007d3e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8007d40:	e79e      	b.n	8007c80 <HAL_DMA_IRQHandler+0x58>
}
 8007d42:	bc70      	pop	{r4, r5, r6}
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	40020008 	.word	0x40020008
 8007d4c:	40020000 	.word	0x40020000

08007d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007d54:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8007d56:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007d58:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8007ee4 <HAL_GPIO_Init+0x194>
 8007d5c:	4b62      	ldr	r3, [pc, #392]	@ (8007ee8 <HAL_GPIO_Init+0x198>)
      switch (GPIO_Init->Mode)
 8007d5e:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 8007eec <HAL_GPIO_Init+0x19c>
 8007d62:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8007ef0 <HAL_GPIO_Init+0x1a0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007d66:	680a      	ldr	r2, [r1, #0]
 8007d68:	fa32 f506 	lsrs.w	r5, r2, r6
 8007d6c:	d102      	bne.n	8007d74 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8007d6e:	b003      	add	sp, #12
 8007d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8007d74:	2701      	movs	r7, #1
 8007d76:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007d78:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 8007d7c:	ea37 0202 	bics.w	r2, r7, r2
 8007d80:	d17a      	bne.n	8007e78 <HAL_GPIO_Init+0x128>
      switch (GPIO_Init->Mode)
 8007d82:	684a      	ldr	r2, [r1, #4]
 8007d84:	2a03      	cmp	r2, #3
 8007d86:	d807      	bhi.n	8007d98 <HAL_GPIO_Init+0x48>
 8007d88:	3a01      	subs	r2, #1
 8007d8a:	2a02      	cmp	r2, #2
 8007d8c:	f200 8083 	bhi.w	8007e96 <HAL_GPIO_Init+0x146>
 8007d90:	e8df f002 	tbb	[pc, r2]
 8007d94:	9792      	.short	0x9792
 8007d96:	9d          	.byte	0x9d
 8007d97:	00          	.byte	0x00
 8007d98:	2a12      	cmp	r2, #18
 8007d9a:	f000 8095 	beq.w	8007ec8 <HAL_GPIO_Init+0x178>
 8007d9e:	d86d      	bhi.n	8007e7c <HAL_GPIO_Init+0x12c>
 8007da0:	2a11      	cmp	r2, #17
 8007da2:	f000 808b 	beq.w	8007ebc <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007da6:	2dff      	cmp	r5, #255	@ 0xff
 8007da8:	bf98      	it	ls
 8007daa:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007dac:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007db0:	bf88      	it	hi
 8007db2:	f100 0904 	addhi.w	r9, r0, #4
 8007db6:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007dba:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007dbe:	bf88      	it	hi
 8007dc0:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007dc2:	fa0b fa02 	lsl.w	sl, fp, r2
 8007dc6:	ea27 070a 	bic.w	r7, r7, sl
 8007dca:	fa04 f202 	lsl.w	r2, r4, r2
 8007dce:	4317      	orrs	r7, r2
 8007dd0:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007dd4:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8007dd8:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 8007ddc:	d04c      	beq.n	8007e78 <HAL_GPIO_Init+0x128>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007dde:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8007de2:	f026 0703 	bic.w	r7, r6, #3
 8007de6:	f042 0201 	orr.w	r2, r2, #1
 8007dea:	f8cc 2018 	str.w	r2, [ip, #24]
 8007dee:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8007df2:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8007df6:	f002 0201 	and.w	r2, r2, #1
 8007dfa:	9201      	str	r2, [sp, #4]
 8007dfc:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007e00:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007e04:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007e06:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8007e0a:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007e0c:	fa0b fb0a 	lsl.w	fp, fp, sl
 8007e10:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007e14:	4a37      	ldr	r2, [pc, #220]	@ (8007ef4 <HAL_GPIO_Init+0x1a4>)
 8007e16:	4290      	cmp	r0, r2
 8007e18:	d05d      	beq.n	8007ed6 <HAL_GPIO_Init+0x186>
 8007e1a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007e1e:	4290      	cmp	r0, r2
 8007e20:	d05b      	beq.n	8007eda <HAL_GPIO_Init+0x18a>
 8007e22:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007e26:	4290      	cmp	r0, r2
 8007e28:	d059      	beq.n	8007ede <HAL_GPIO_Init+0x18e>
 8007e2a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007e2e:	4290      	cmp	r0, r2
 8007e30:	bf14      	ite	ne
 8007e32:	2204      	movne	r2, #4
 8007e34:	2203      	moveq	r2, #3
 8007e36:	fa02 f20a 	lsl.w	r2, r2, sl
 8007e3a:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8007e3e:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8007e40:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007e42:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8007e46:	bf14      	ite	ne
 8007e48:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007e4a:	43aa      	biceq	r2, r5
 8007e4c:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8007e4e:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007e50:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8007e54:	bf14      	ite	ne
 8007e56:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007e58:	43aa      	biceq	r2, r5
 8007e5a:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8007e5c:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007e5e:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8007e62:	bf14      	ite	ne
 8007e64:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007e66:	43aa      	biceq	r2, r5
 8007e68:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8007e6a:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007e6c:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8007e70:	bf14      	ite	ne
 8007e72:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007e74:	43aa      	biceq	r2, r5
 8007e76:	601a      	str	r2, [r3, #0]
	position++;
 8007e78:	3601      	adds	r6, #1
 8007e7a:	e774      	b.n	8007d66 <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8007e7c:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8007ef8 <HAL_GPIO_Init+0x1a8>
 8007e80:	454a      	cmp	r2, r9
 8007e82:	d008      	beq.n	8007e96 <HAL_GPIO_Init+0x146>
 8007e84:	d810      	bhi.n	8007ea8 <HAL_GPIO_Init+0x158>
 8007e86:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8007e8a:	454a      	cmp	r2, r9
 8007e8c:	d003      	beq.n	8007e96 <HAL_GPIO_Init+0x146>
 8007e8e:	4572      	cmp	r2, lr
 8007e90:	d001      	beq.n	8007e96 <HAL_GPIO_Init+0x146>
 8007e92:	4542      	cmp	r2, r8
 8007e94:	d187      	bne.n	8007da6 <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007e96:	688a      	ldr	r2, [r1, #8]
 8007e98:	b1da      	cbz	r2, 8007ed2 <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007e9a:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007e9c:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 8007ea0:	bf0c      	ite	eq
 8007ea2:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 8007ea4:	6147      	strne	r7, [r0, #20]
 8007ea6:	e77e      	b.n	8007da6 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8007ea8:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 8007efc <HAL_GPIO_Init+0x1ac>
 8007eac:	454a      	cmp	r2, r9
 8007eae:	d0f2      	beq.n	8007e96 <HAL_GPIO_Init+0x146>
 8007eb0:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8007eb4:	454a      	cmp	r2, r9
 8007eb6:	e7ed      	b.n	8007e94 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007eb8:	68cc      	ldr	r4, [r1, #12]
          break;
 8007eba:	e774      	b.n	8007da6 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007ebc:	68cc      	ldr	r4, [r1, #12]
 8007ebe:	3404      	adds	r4, #4
          break;
 8007ec0:	e771      	b.n	8007da6 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007ec2:	68cc      	ldr	r4, [r1, #12]
 8007ec4:	3408      	adds	r4, #8
          break;
 8007ec6:	e76e      	b.n	8007da6 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007ec8:	68cc      	ldr	r4, [r1, #12]
 8007eca:	340c      	adds	r4, #12
          break;
 8007ecc:	e76b      	b.n	8007da6 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8007ece:	2400      	movs	r4, #0
 8007ed0:	e769      	b.n	8007da6 <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007ed2:	2404      	movs	r4, #4
 8007ed4:	e767      	b.n	8007da6 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	e7ad      	b.n	8007e36 <HAL_GPIO_Init+0xe6>
 8007eda:	2201      	movs	r2, #1
 8007edc:	e7ab      	b.n	8007e36 <HAL_GPIO_Init+0xe6>
 8007ede:	2202      	movs	r2, #2
 8007ee0:	e7a9      	b.n	8007e36 <HAL_GPIO_Init+0xe6>
 8007ee2:	bf00      	nop
 8007ee4:	40021000 	.word	0x40021000
 8007ee8:	40010400 	.word	0x40010400
 8007eec:	10210000 	.word	0x10210000
 8007ef0:	10110000 	.word	0x10110000
 8007ef4:	40010800 	.word	0x40010800
 8007ef8:	10220000 	.word	0x10220000
 8007efc:	10310000 	.word	0x10310000

08007f00 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007f00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8007f04:	f04f 0b04 	mov.w	fp, #4
  uint32_t position = 0x00u;
 8007f08:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007f0a:	f04f 0a01 	mov.w	sl, #1
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8007f0e:	f04f 080f 	mov.w	r8, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007f12:	eb00 030b 	add.w	r3, r0, fp
 8007f16:	9301      	str	r3, [sp, #4]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8007f18:	4b2e      	ldr	r3, [pc, #184]	@ (8007fd4 <HAL_GPIO_DeInit+0xd4>)
  while ((GPIO_Pin >> position) != 0u)
 8007f1a:	fa31 f402 	lsrs.w	r4, r1, r2
 8007f1e:	d102      	bne.n	8007f26 <HAL_GPIO_DeInit+0x26>
      CLEAR_BIT(GPIOx->ODR, iocurrent);
    }

    position++;
  }
}
 8007f20:	b003      	add	sp, #12
 8007f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007f26:	fa0a f702 	lsl.w	r7, sl, r2
    if (iocurrent)
 8007f2a:	400f      	ands	r7, r1
 8007f2c:	d049      	beq.n	8007fc2 <HAL_GPIO_DeInit+0xc2>
      tmp = AFIO->EXTICR[position >> 2u];
 8007f2e:	f022 0403 	bic.w	r4, r2, #3
 8007f32:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8007f36:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8007f3a:	f002 0c03 	and.w	ip, r2, #3
      tmp = AFIO->EXTICR[position >> 2u];
 8007f3e:	68a5      	ldr	r5, [r4, #8]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8007f40:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8007f44:	fa08 f90c 	lsl.w	r9, r8, ip
 8007f48:	ea09 0e05 	and.w	lr, r9, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007f4c:	4d22      	ldr	r5, [pc, #136]	@ (8007fd8 <HAL_GPIO_DeInit+0xd8>)
 8007f4e:	42a8      	cmp	r0, r5
 8007f50:	d039      	beq.n	8007fc6 <HAL_GPIO_DeInit+0xc6>
 8007f52:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007f56:	42a8      	cmp	r0, r5
 8007f58:	d037      	beq.n	8007fca <HAL_GPIO_DeInit+0xca>
 8007f5a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007f5e:	42a8      	cmp	r0, r5
 8007f60:	d035      	beq.n	8007fce <HAL_GPIO_DeInit+0xce>
 8007f62:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007f66:	42a8      	cmp	r0, r5
 8007f68:	bf0c      	ite	eq
 8007f6a:	2503      	moveq	r5, #3
 8007f6c:	2504      	movne	r5, #4
 8007f6e:	fa05 f50c 	lsl.w	r5, r5, ip
 8007f72:	4575      	cmp	r5, lr
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8007f74:	ea6f 0607 	mvn.w	r6, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007f78:	d10f      	bne.n	8007f9a <HAL_GPIO_DeInit+0x9a>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8007f7a:	681d      	ldr	r5, [r3, #0]
 8007f7c:	4035      	ands	r5, r6
 8007f7e:	601d      	str	r5, [r3, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8007f80:	685d      	ldr	r5, [r3, #4]
 8007f82:	4035      	ands	r5, r6
 8007f84:	605d      	str	r5, [r3, #4]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8007f86:	68dd      	ldr	r5, [r3, #12]
 8007f88:	4035      	ands	r5, r6
 8007f8a:	60dd      	str	r5, [r3, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8007f8c:	689d      	ldr	r5, [r3, #8]
 8007f8e:	4035      	ands	r5, r6
 8007f90:	609d      	str	r5, [r3, #8]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8007f92:	68a5      	ldr	r5, [r4, #8]
 8007f94:	ea25 0509 	bic.w	r5, r5, r9
 8007f98:	60a5      	str	r5, [r4, #8]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007f9a:	2fff      	cmp	r7, #255	@ 0xff
 8007f9c:	bf94      	ite	ls
 8007f9e:	4607      	movls	r7, r0
 8007fa0:	9f01      	ldrhi	r7, [sp, #4]
 8007fa2:	ea4f 0482 	mov.w	r4, r2, lsl #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8007fa6:	683d      	ldr	r5, [r7, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007fa8:	bf88      	it	hi
 8007faa:	3c20      	subhi	r4, #32
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8007fac:	fa08 fc04 	lsl.w	ip, r8, r4
 8007fb0:	ea25 050c 	bic.w	r5, r5, ip
 8007fb4:	fa0b f404 	lsl.w	r4, fp, r4
 8007fb8:	4325      	orrs	r5, r4
 8007fba:	603d      	str	r5, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8007fbc:	68c4      	ldr	r4, [r0, #12]
 8007fbe:	4034      	ands	r4, r6
 8007fc0:	60c4      	str	r4, [r0, #12]
    position++;
 8007fc2:	3201      	adds	r2, #1
 8007fc4:	e7a9      	b.n	8007f1a <HAL_GPIO_DeInit+0x1a>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007fc6:	2500      	movs	r5, #0
 8007fc8:	e7d1      	b.n	8007f6e <HAL_GPIO_DeInit+0x6e>
 8007fca:	2501      	movs	r5, #1
 8007fcc:	e7cf      	b.n	8007f6e <HAL_GPIO_DeInit+0x6e>
 8007fce:	2502      	movs	r5, #2
 8007fd0:	e7cd      	b.n	8007f6e <HAL_GPIO_DeInit+0x6e>
 8007fd2:	bf00      	nop
 8007fd4:	40010400 	.word	0x40010400
 8007fd8:	40010800 	.word	0x40010800

08007fdc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007fdc:	b10a      	cbz	r2, 8007fe2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007fde:	6101      	str	r1, [r0, #16]
  }
}
 8007fe0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007fe2:	0409      	lsls	r1, r1, #16
 8007fe4:	e7fb      	b.n	8007fde <HAL_GPIO_WritePin+0x2>

08007fe6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007fe6:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007fe8:	ea01 0203 	and.w	r2, r1, r3
 8007fec:	ea21 0103 	bic.w	r1, r1, r3
 8007ff0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ff4:	6101      	str	r1, [r0, #16]
}
 8007ff6:	4770      	bx	lr

08007ff8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	b1e0      	cbz	r0, 8008038 <HAL_PCD_Init+0x40>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007ffe:	f890 3291 	ldrb.w	r3, [r0, #657]	@ 0x291
 8008002:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008006:	b91b      	cbnz	r3, 8008010 <HAL_PCD_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008008:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800800c:	f003 fa22 	bl	800b454 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008010:	2303      	movs	r3, #3
 8008012:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8008016:	2300      	movs	r3, #0

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008018:	4625      	mov	r5, r4
  hpcd->Init.dma_enable = 0U;
 800801a:	7163      	strb	r3, [r4, #5]
  __HAL_PCD_DISABLE(hpcd);
 800801c:	f855 0b04 	ldr.w	r0, [r5], #4
 8008020:	f001 fe61 	bl	8009ce6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008024:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8008028:	6820      	ldr	r0, [r4, #0]
 800802a:	f001 fe4c 	bl	8009cc6 <USB_CoreInit>
 800802e:	4601      	mov	r1, r0
 8008030:	b128      	cbz	r0, 800803e <HAL_PCD_Init+0x46>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008032:	2302      	movs	r3, #2
 8008034:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 8008038:	2501      	movs	r5, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800803a:	4628      	mov	r0, r5
 800803c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800803e:	6820      	ldr	r0, [r4, #0]
 8008040:	f001 fe5b 	bl	8009cfa <USB_SetCurrentMode>
 8008044:	2800      	cmp	r0, #0
 8008046:	d1f4      	bne.n	8008032 <HAL_PCD_Init+0x3a>
 8008048:	4602      	mov	r2, r0
    hpcd->IN_ep[i].is_in = 1U;
 800804a:	2701      	movs	r7, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800804c:	7926      	ldrb	r6, [r4, #4]
 800804e:	f104 0310 	add.w	r3, r4, #16
 8008052:	b2c1      	uxtb	r1, r0
 8008054:	428e      	cmp	r6, r1
 8008056:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800805a:	d818      	bhi.n	800808e <HAL_PCD_Init+0x96>
 800805c:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 800805e:	460a      	mov	r2, r1
 8008060:	f504 73a8 	add.w	r3, r4, #336	@ 0x150
 8008064:	b2c8      	uxtb	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008066:	4286      	cmp	r6, r0
 8008068:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800806c:	d81b      	bhi.n	80080a6 <HAL_PCD_Init+0xae>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800806e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8008072:	6820      	ldr	r0, [r4, #0]
 8008074:	f001 fe43 	bl	8009cfe <USB_DevInit>
 8008078:	4605      	mov	r5, r0
 800807a:	2800      	cmp	r0, #0
 800807c:	d1d9      	bne.n	8008032 <HAL_PCD_Init+0x3a>
  hpcd->State = HAL_PCD_STATE_READY;
 800807e:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8008080:	7360      	strb	r0, [r4, #13]
  (void)USB_DevDisconnect(hpcd->Instance);
 8008082:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8008084:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8008088:	f002 f8ee 	bl	800a268 <USB_DevDisconnect>
  return HAL_OK;
 800808c:	e7d5      	b.n	800803a <HAL_PCD_Init+0x42>
    hpcd->IN_ep[i].xfer_buff = 0U;
 800808e:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->IN_ep[i].is_in = 1U;
 8008092:	f803 7c27 	strb.w	r7, [r3, #-39]
    hpcd->IN_ep[i].num = i;
 8008096:	f803 1c28 	strb.w	r1, [r3, #-40]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800809a:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->IN_ep[i].xfer_len = 0U;
 800809e:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80080a2:	3001      	adds	r0, #1
 80080a4:	e7d5      	b.n	8008052 <HAL_PCD_Init+0x5a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80080a6:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->OUT_ep[i].is_in = 0U;
 80080aa:	f803 2c27 	strb.w	r2, [r3, #-39]
    hpcd->OUT_ep[i].num = i;
 80080ae:	f803 0c28 	strb.w	r0, [r3, #-40]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80080b2:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80080b6:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80080ba:	3101      	adds	r1, #1
 80080bc:	e7d2      	b.n	8008064 <HAL_PCD_Init+0x6c>

080080be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80080be:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 80080c0:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
{
 80080c4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d010      	beq.n	80080ec <HAL_PCD_Start+0x2e>
 80080ca:	2501      	movs	r5, #1
 80080cc:	f880 5290 	strb.w	r5, [r0, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80080d0:	6800      	ldr	r0, [r0, #0]
 80080d2:	f001 fdff 	bl	8009cd4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80080d6:	4629      	mov	r1, r5
 80080d8:	4620      	mov	r0, r4
 80080da:	f003 fac2 	bl	800b662 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80080de:	6820      	ldr	r0, [r4, #0]
 80080e0:	f002 f8c0 	bl	800a264 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80080e4:	2000      	movs	r0, #0
 80080e6:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 80080ea:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80080ec:	2002      	movs	r0, #2
 80080ee:	e7fc      	b.n	80080ea <HAL_PCD_Start+0x2c>

080080f0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80080f0:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80080f2:	f890 2290 	ldrb.w	r2, [r0, #656]	@ 0x290
{
 80080f6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80080f8:	2a01      	cmp	r2, #1
 80080fa:	d00a      	beq.n	8008112 <HAL_PCD_SetAddress+0x22>
 80080fc:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 80080fe:	7341      	strb	r1, [r0, #13]
  __HAL_LOCK(hpcd);
 8008100:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008104:	6800      	ldr	r0, [r0, #0]
 8008106:	f002 f8a7 	bl	800a258 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800810a:	2000      	movs	r0, #0
 800810c:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 8008110:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8008112:	2002      	movs	r0, #2
 8008114:	e7fc      	b.n	8008110 <HAL_PCD_SetAddress+0x20>
	...

08008118 <HAL_PCD_IRQHandler>:
{
 8008118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800811c:	4604      	mov	r4, r0
 800811e:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8008120:	6800      	ldr	r0, [r0, #0]
 8008122:	f002 f8a3 	bl	800a26c <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8008126:	f410 4500 	ands.w	r5, r0, #32768	@ 0x8000
 800812a:	f000 844f 	beq.w	80089cc <HAL_PCD_IRQHandler+0x8b4>
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);

        if (ep->type == EP_TYPE_ISOC)
 800812e:	2528      	movs	r5, #40	@ 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008130:	4ec6      	ldr	r6, [pc, #792]	@ (800844c <HAL_PCD_IRQHandler+0x334>)
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008132:	6820      	ldr	r0, [r4, #0]
 8008134:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8008138:	041f      	lsls	r7, r3, #16
 800813a:	d402      	bmi.n	8008142 <HAL_PCD_IRQHandler+0x2a>
}
 800813c:	b005      	add	sp, #20
 800813e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8008142:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
    if (epindex == 0U)
 8008146:	f013 070f 	ands.w	r7, r3, #15
    wIstr = hpcd->Instance->ISTR;
 800814a:	b299      	uxth	r1, r3
    if (epindex == 0U)
 800814c:	f040 80c0 	bne.w	80082d0 <HAL_PCD_IRQHandler+0x1b8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8008150:	f011 0110 	ands.w	r1, r1, #16
 8008154:	d126      	bne.n	80081a4 <HAL_PCD_IRQHandler+0x8c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008156:	8803      	ldrh	r3, [r0, #0]
 8008158:	b29b      	uxth	r3, r3
 800815a:	4033      	ands	r3, r6
 800815c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008160:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008162:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8008166:	7c22      	ldrb	r2, [r4, #16]
 8008168:	b29b      	uxth	r3, r3
 800816a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800816e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008172:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
        ep->xfer_buff += ep->xfer_count;
 8008176:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008178:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 800817c:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800817e:	62e3      	str	r3, [r4, #44]	@ 0x2c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8008180:	4620      	mov	r0, r4
        ep->xfer_buff += ep->xfer_count;
 8008182:	6262      	str	r2, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8008184:	f003 f995 	bl	800b4b2 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8008188:	7b63      	ldrb	r3, [r4, #13]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d0d1      	beq.n	8008132 <HAL_PCD_IRQHandler+0x1a>
 800818e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8008190:	6821      	ldr	r1, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8008192:	2a00      	cmp	r2, #0
 8008194:	d1cd      	bne.n	8008132 <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8008196:	7b63      	ldrb	r3, [r4, #13]
 8008198:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800819c:	f8a1 304c 	strh.w	r3, [r1, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80081a0:	7362      	strb	r2, [r4, #13]
 80081a2:	e7c6      	b.n	8008132 <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80081a4:	8807      	ldrh	r7, [r0, #0]
 80081a6:	b2bb      	uxth	r3, r7
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80081a8:	f417 6700 	ands.w	r7, r7, #2048	@ 0x800
 80081ac:	d021      	beq.n	80081f2 <HAL_PCD_IRQHandler+0xda>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80081ae:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80081b2:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081bc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80081c0:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80081c4:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 80081c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80081cc:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80081d0:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 80081d4:	f002 fa95 	bl	800a702 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80081d8:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80081da:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80081dc:	8813      	ldrh	r3, [r2, #0]
 80081de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081e2:	051b      	lsls	r3, r3, #20
 80081e4:	0d1b      	lsrs	r3, r3, #20
 80081e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081ea:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80081ec:	f003 f952 	bl	800b494 <HAL_PCD_SetupStageCallback>
 80081f0:	e79f      	b.n	8008132 <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80081f2:	0419      	lsls	r1, r3, #16
 80081f4:	d59d      	bpl.n	8008132 <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80081f6:	8803      	ldrh	r3, [r0, #0]
 80081f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081fc:	051b      	lsls	r3, r3, #20
 80081fe:	0d1b      	lsrs	r3, r3, #20
 8008200:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008204:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008206:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800820a:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 800820e:	b29b      	uxth	r3, r3
 8008210:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008214:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008218:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 800821c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008220:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8008224:	b18b      	cbz	r3, 800824a <HAL_PCD_IRQHandler+0x132>
 8008226:	f8d4 1164 	ldr.w	r1, [r4, #356]	@ 0x164
 800822a:	b171      	cbz	r1, 800824a <HAL_PCD_IRQHandler+0x132>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800822c:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8008230:	f002 fa67 	bl	800a702 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8008234:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 8008238:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800823c:	4639      	mov	r1, r7
            ep->xfer_buff += ep->xfer_count;
 800823e:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8008240:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8008242:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8008246:	f003 f92b 	bl	800b4a0 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800824a:	6821      	ldr	r1, [r4, #0]
 800824c:	880a      	ldrh	r2, [r1, #0]
 800824e:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8008250:	0512      	lsls	r2, r2, #20
 8008252:	f53f af6e 	bmi.w	8008132 <HAL_PCD_IRQHandler+0x1a>
 8008256:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800825a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800825e:	f43f af68 	beq.w	8008132 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8008262:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 8008266:	f201 400c 	addw	r0, r1, #1036	@ 0x40c
 800826a:	b292      	uxth	r2, r2
 800826c:	5a83      	ldrh	r3, [r0, r2]
 800826e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008272:	5283      	strh	r3, [r0, r2]
 8008274:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
 8008278:	2b3e      	cmp	r3, #62	@ 0x3e
 800827a:	d91d      	bls.n	80082b8 <HAL_PCD_IRQHandler+0x1a0>
 800827c:	095f      	lsrs	r7, r3, #5
 800827e:	06db      	lsls	r3, r3, #27
 8008280:	5a83      	ldrh	r3, [r0, r2]
 8008282:	bf08      	it	eq
 8008284:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8008288:	b29b      	uxth	r3, r3
 800828a:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 800828e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008292:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008296:	b29b      	uxth	r3, r3
 8008298:	5283      	strh	r3, [r0, r2]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800829a:	880b      	ldrh	r3, [r1, #0]
 800829c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082a4:	041b      	lsls	r3, r3, #16
 80082a6:	0c1b      	lsrs	r3, r3, #16
 80082a8:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 80082ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082b4:	800b      	strh	r3, [r1, #0]
 80082b6:	e73c      	b.n	8008132 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80082b8:	b90b      	cbnz	r3, 80082be <HAL_PCD_IRQHandler+0x1a6>
 80082ba:	5a83      	ldrh	r3, [r0, r2]
 80082bc:	e7e7      	b.n	800828e <HAL_PCD_IRQHandler+0x176>
 80082be:	085f      	lsrs	r7, r3, #1
 80082c0:	07db      	lsls	r3, r3, #31
 80082c2:	5a83      	ldrh	r3, [r0, r2]
 80082c4:	bf48      	it	mi
 80082c6:	3701      	addmi	r7, #1
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 80082ce:	e7e2      	b.n	8008296 <HAL_PCD_IRQHandler+0x17e>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80082d0:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80082d4:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80082d6:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80082da:	f140 80f6 	bpl.w	80084ca <HAL_PCD_IRQHandler+0x3b2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80082de:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 80082e2:	fb05 4107 	mla	r1, r5, r7, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80082e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082ea:	051b      	lsls	r3, r3, #20
 80082ec:	0d1b      	lsrs	r3, r3, #20
 80082ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082f2:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 80082f6:	f891 315c 	ldrb.w	r3, [r1, #348]	@ 0x15c
 80082fa:	f500 6e80 	add.w	lr, r0, #1024	@ 0x400
 80082fe:	b9bb      	cbnz	r3, 8008330 <HAL_PCD_IRQHandler+0x218>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008300:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8008304:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
 8008308:	b29b      	uxth	r3, r3
 800830a:	3306      	adds	r3, #6
 800830c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008310:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8008314:	f3c9 0909 	ubfx	r9, r9, #0, #10
          if (count != 0U)
 8008318:	f1b9 0f00 	cmp.w	r9, #0
 800831c:	f000 80ba 	beq.w	8008494 <HAL_PCD_IRQHandler+0x37c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8008320:	464b      	mov	r3, r9
 8008322:	f8b1 2156 	ldrh.w	r2, [r1, #342]	@ 0x156
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008326:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 800832a:	f002 f9ea 	bl	800a702 <USB_ReadPMA>
 800832e:	e0b1      	b.n	8008494 <HAL_PCD_IRQHandler+0x37c>
          if (ep->type == EP_TYPE_BULK)
 8008330:	f891 3153 	ldrb.w	r3, [r1, #339]	@ 0x153

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008334:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
          if (ep->type == EP_TYPE_BULK)
 8008338:	2b02      	cmp	r3, #2
 800833a:	f040 8089 	bne.w	8008450 <HAL_PCD_IRQHandler+0x338>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800833e:	f8b0 9050 	ldrh.w	r9, [r0, #80]	@ 0x50
 8008342:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
 8008346:	fa1f f989 	uxth.w	r9, r9
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800834a:	f418 4a80 	ands.w	sl, r8, #16384	@ 0x4000

    if (ep->xfer_len >= count)
 800834e:	f8d1 3168 	ldr.w	r3, [r1, #360]	@ 0x168
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008352:	44d9      	add	r9, fp
 8008354:	f008 0c40 	and.w	ip, r8, #64	@ 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008358:	d03c      	beq.n	80083d4 <HAL_PCD_IRQHandler+0x2bc>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800835a:	f109 0902 	add.w	r9, r9, #2
 800835e:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 8008362:	f3c9 0909 	ubfx	r9, r9, #0, #10
    if (ep->xfer_len >= count)
 8008366:	4599      	cmp	r9, r3
 8008368:	d913      	bls.n	8008392 <HAL_PCD_IRQHandler+0x27a>
 800836a:	2300      	movs	r3, #0
 800836c:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008370:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008374:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008378:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800837c:	041b      	lsls	r3, r3, #16
 800837e:	0c1b      	lsrs	r3, r3, #16
 8008380:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008384:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008388:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800838c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8008390:	e005      	b.n	800839e <HAL_PCD_IRQHandler+0x286>
      ep->xfer_len -= count;
 8008392:	eba3 0309 	sub.w	r3, r3, r9
 8008396:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 800839a:	2b00      	cmp	r3, #0
 800839c:	d0e8      	beq.n	8008370 <HAL_PCD_IRQHandler+0x258>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800839e:	f1bc 0f00 	cmp.w	ip, #0
 80083a2:	d00d      	beq.n	80083c0 <HAL_PCD_IRQHandler+0x2a8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80083a4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80083a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083b0:	041b      	lsls	r3, r3, #16
 80083b2:	0c1b      	lsrs	r3, r3, #16
 80083b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80083bc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 80083c0:	f1b9 0f00 	cmp.w	r9, #0
 80083c4:	d066      	beq.n	8008494 <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80083c6:	2128      	movs	r1, #40	@ 0x28
 80083c8:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80083cc:	464b      	mov	r3, r9
 80083ce:	f8b1 2158 	ldrh.w	r2, [r1, #344]	@ 0x158
 80083d2:	e7a8      	b.n	8008326 <HAL_PCD_IRQHandler+0x20e>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80083d4:	f109 0906 	add.w	r9, r9, #6
 80083d8:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 80083dc:	f3c9 0909 	ubfx	r9, r9, #0, #10

    if (ep->xfer_len >= count)
 80083e0:	4599      	cmp	r9, r3
 80083e2:	d912      	bls.n	800840a <HAL_PCD_IRQHandler+0x2f2>
 80083e4:	f8c1 a168 	str.w	sl, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80083e8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80083ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80083f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083f4:	041b      	lsls	r3, r3, #16
 80083f6:	0c1b      	lsrs	r3, r3, #16
 80083f8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80083fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008400:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008404:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8008408:	e005      	b.n	8008416 <HAL_PCD_IRQHandler+0x2fe>
      ep->xfer_len -= count;
 800840a:	eba3 0309 	sub.w	r3, r3, r9
 800840e:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8008412:	2b00      	cmp	r3, #0
 8008414:	d0e8      	beq.n	80083e8 <HAL_PCD_IRQHandler+0x2d0>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8008416:	f1bc 0f00 	cmp.w	ip, #0
 800841a:	d10d      	bne.n	8008438 <HAL_PCD_IRQHandler+0x320>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800841c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008420:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008424:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008428:	041b      	lsls	r3, r3, #16
 800842a:	0c1b      	lsrs	r3, r3, #16
 800842c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008430:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008434:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8008438:	f1b9 0f00 	cmp.w	r9, #0
 800843c:	d02a      	beq.n	8008494 <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800843e:	2128      	movs	r1, #40	@ 0x28
 8008440:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008444:	464b      	mov	r3, r9
 8008446:	f8b1 215a 	ldrh.w	r2, [r1, #346]	@ 0x15a
 800844a:	e76c      	b.n	8008326 <HAL_PCD_IRQHandler+0x20e>
 800844c:	ffff8f0f 	.word	0xffff8f0f
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008450:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008454:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008458:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800845c:	041b      	lsls	r3, r3, #16
 800845e:	0c1b      	lsrs	r3, r3, #16
 8008460:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008464:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008468:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800846c:	f891 3150 	ldrb.w	r3, [r1, #336]	@ 0x150
 8008470:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8008474:	00db      	lsls	r3, r3, #3
 8008476:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800847a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800847e:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8008480:	d054      	beq.n	800852c <HAL_PCD_IRQHandler+0x414>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008482:	3202      	adds	r2, #2
 8008484:	4413      	add	r3, r2
 8008486:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 800848a:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 800848e:	f1b9 0f00 	cmp.w	r9, #0
 8008492:	d19b      	bne.n	80083cc <HAL_PCD_IRQHandler+0x2b4>
        ep->xfer_count += count;
 8008494:	fb05 f107 	mul.w	r1, r5, r7
 8008498:	1863      	adds	r3, r4, r1
 800849a:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 800849e:	444a      	add	r2, r9
 80084a0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        ep->xfer_buff += count;
 80084a4:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 80084a8:	444a      	add	r2, r9
 80084aa:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80084ae:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 80084b2:	b11a      	cbz	r2, 80084bc <HAL_PCD_IRQHandler+0x3a4>
 80084b4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80084b8:	4599      	cmp	r9, r3
 80084ba:	d241      	bcs.n	8008540 <HAL_PCD_IRQHandler+0x428>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80084bc:	fb05 4307 	mla	r3, r5, r7, r4
 80084c0:	4620      	mov	r0, r4
 80084c2:	f893 1150 	ldrb.w	r1, [r3, #336]	@ 0x150
 80084c6:	f002 ffeb 	bl	800b4a0 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80084ca:	f018 0f80 	tst.w	r8, #128	@ 0x80
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80084ce:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80084d0:	f43f ae2f 	beq.w	8008132 <HAL_PCD_IRQHandler+0x1a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80084d4:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 80084d8:	fb05 fc07 	mul.w	ip, r5, r7
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80084dc:	b29b      	uxth	r3, r3
 80084de:	4033      	ands	r3, r6
 80084e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084e4:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 80084e8:	eb04 030c 	add.w	r3, r4, ip
 80084ec:	7cda      	ldrb	r2, [r3, #19]
 80084ee:	2a01      	cmp	r2, #1
 80084f0:	d156      	bne.n	80085a0 <HAL_PCD_IRQHandler+0x488>
          ep->xfer_len = 0U;
 80084f2:	2100      	movs	r1, #0
 80084f4:	fb07 5205 	mla	r2, r7, r5, r5
 80084f8:	50a1      	str	r1, [r4, r2]
          if (ep->doublebuffer != 0U)
 80084fa:	7f1a      	ldrb	r2, [r3, #28]
 80084fc:	b392      	cbz	r2, 8008564 <HAL_PCD_IRQHandler+0x44c>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80084fe:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008502:	7c5a      	ldrb	r2, [r3, #17]
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008504:	d036      	beq.n	8008574 <HAL_PCD_IRQHandler+0x45c>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008506:	bb12      	cbnz	r2, 800854e <HAL_PCD_IRQHandler+0x436>
 8008508:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800850c:	7c1b      	ldrb	r3, [r3, #16]
 800850e:	b292      	uxth	r2, r2
 8008510:	011b      	lsls	r3, r3, #4
 8008512:	f200 4004 	addw	r0, r0, #1028	@ 0x404
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008516:	4410      	add	r0, r2
 8008518:	5a1a      	ldrh	r2, [r3, r0]
 800851a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800851e:	521a      	strh	r2, [r3, r0]
 8008520:	5a1a      	ldrh	r2, [r3, r0]
 8008522:	b292      	uxth	r2, r2
 8008524:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008528:	521a      	strh	r2, [r3, r0]
 800852a:	e01b      	b.n	8008564 <HAL_PCD_IRQHandler+0x44c>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800852c:	3206      	adds	r2, #6
 800852e:	4413      	add	r3, r2
 8008530:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8008534:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8008538:	f1b9 0f00 	cmp.w	r9, #0
 800853c:	d0aa      	beq.n	8008494 <HAL_PCD_IRQHandler+0x37c>
 800853e:	e781      	b.n	8008444 <HAL_PCD_IRQHandler+0x32c>
        ep = &hpcd->OUT_ep[epindex];
 8008540:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008544:	6820      	ldr	r0, [r4, #0]
 8008546:	4421      	add	r1, r4
 8008548:	f001 fea6 	bl	800a298 <USB_EPStartXfer>
 800854c:	e7bd      	b.n	80084ca <HAL_PCD_IRQHandler+0x3b2>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800854e:	2a01      	cmp	r2, #1
 8008550:	d108      	bne.n	8008564 <HAL_PCD_IRQHandler+0x44c>
 8008552:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8008556:	7c1b      	ldrb	r3, [r3, #16]
 8008558:	b292      	uxth	r2, r2
 800855a:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 800855e:	011b      	lsls	r3, r3, #4
 8008560:	4410      	add	r0, r2
 8008562:	5219      	strh	r1, [r3, r0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008564:	2328      	movs	r3, #40	@ 0x28
 8008566:	fb03 4307 	mla	r3, r3, r7, r4
 800856a:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800856c:	4620      	mov	r0, r4
 800856e:	f002 ffa0 	bl	800b4b2 <HAL_PCD_DataInStageCallback>
 8008572:	e5de      	b.n	8008132 <HAL_PCD_IRQHandler+0x1a>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008574:	b93a      	cbnz	r2, 8008586 <HAL_PCD_IRQHandler+0x46e>
 8008576:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800857a:	7c1b      	ldrb	r3, [r3, #16]
 800857c:	b292      	uxth	r2, r2
 800857e:	011b      	lsls	r3, r3, #4
 8008580:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8008584:	e7c7      	b.n	8008516 <HAL_PCD_IRQHandler+0x3fe>
 8008586:	2a01      	cmp	r2, #1
 8008588:	d1ec      	bne.n	8008564 <HAL_PCD_IRQHandler+0x44c>
 800858a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800858e:	7c1b      	ldrb	r3, [r3, #16]
 8008590:	b292      	uxth	r2, r2
 8008592:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8008596:	011b      	lsls	r3, r3, #4
 8008598:	4410      	add	r0, r2
 800859a:	f823 8000 	strh.w	r8, [r3, r0]
 800859e:	e7e1      	b.n	8008564 <HAL_PCD_IRQHandler+0x44c>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80085a0:	7c19      	ldrb	r1, [r3, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 80085a2:	f418 7e80 	ands.w	lr, r8, #256	@ 0x100
            if (ep->xfer_len > TxPctSize)
 80085a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80085a8:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 80085ac:	f500 6980 	add.w	r9, r0, #1024	@ 0x400
          if ((wEPVal & USB_EP_KIND) == 0U)
 80085b0:	d11b      	bne.n	80085ea <HAL_PCD_IRQHandler+0x4d2>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80085b2:	f8b0 7050 	ldrh.w	r7, [r0, #80]	@ 0x50
 80085b6:	b2bf      	uxth	r7, r7
 80085b8:	4457      	add	r7, sl
 80085ba:	3702      	adds	r7, #2
 80085bc:	f839 7017 	ldrh.w	r7, [r9, r7, lsl #1]
            if (ep->xfer_len > TxPctSize)
 80085c0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80085c4:	4297      	cmp	r7, r2
 80085c6:	d302      	bcc.n	80085ce <HAL_PCD_IRQHandler+0x4b6>
 80085c8:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
 80085cc:	e7ce      	b.n	800856c <HAL_PCD_IRQHandler+0x454>
              ep->xfer_len -= TxPctSize;
 80085ce:	1bd2      	subs	r2, r2, r7
 80085d0:	629a      	str	r2, [r3, #40]	@ 0x28
              ep->xfer_buff += TxPctSize;
 80085d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        ep = &hpcd->IN_ep[epindex];
 80085d4:	f10c 0110 	add.w	r1, ip, #16
              ep->xfer_buff += TxPctSize;
 80085d8:	443a      	add	r2, r7
 80085da:	625a      	str	r2, [r3, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 80085dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80085de:	4421      	add	r1, r4
              ep->xfer_count += TxPctSize;
 80085e0:	443a      	add	r2, r7
 80085e2:	62da      	str	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80085e4:	f001 fe58 	bl	800a298 <USB_EPStartXfer>
 80085e8:	e5a3      	b.n	8008132 <HAL_PCD_IRQHandler+0x1a>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80085ea:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80085ee:	f018 0e40 	ands.w	lr, r8, #64	@ 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80085f2:	fa1f fc8c 	uxth.w	ip, ip
 80085f6:	44d4      	add	ip, sl
 80085f8:	f408 4880 	and.w	r8, r8, #16384	@ 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80085fc:	f000 80f4 	beq.w	80087e8 <HAL_PCD_IRQHandler+0x6d0>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008600:	f10c 0c02 	add.w	ip, ip, #2
 8008604:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 8008608:	fa1f f888 	uxth.w	r8, r8

    if (ep->xfer_len > TxPctSize)
 800860c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008610:	4594      	cmp	ip, r2
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 8008612:	bf2c      	ite	cs
 8008614:	2200      	movcs	r2, #0
      ep->xfer_len -= TxPctSize;
 8008616:	eba2 020c 	subcc.w	r2, r2, ip
 800861a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800861c:	2a00      	cmp	r2, #0
 800861e:	d15b      	bne.n	80086d8 <HAL_PCD_IRQHandler+0x5c0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008620:	2328      	movs	r3, #40	@ 0x28
 8008622:	fb03 4307 	mla	r3, r3, r7, r4
 8008626:	7c5b      	ldrb	r3, [r3, #17]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d141      	bne.n	80086b0 <HAL_PCD_IRQHandler+0x598>
 800862c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8008630:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8008634:	b292      	uxth	r2, r2
 8008636:	010b      	lsls	r3, r1, #4
 8008638:	4494      	add	ip, r2
 800863a:	f83c 2003 	ldrh.w	r2, [ip, r3]
 800863e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008642:	f82c 2003 	strh.w	r2, [ip, r3]
 8008646:	f83c 2003 	ldrh.w	r2, [ip, r3]
 800864a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800864e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8008652:	b292      	uxth	r2, r2
 8008654:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008658:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800865c:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8008660:	b292      	uxth	r2, r2
 8008662:	4410      	add	r0, r2
 8008664:	5ac2      	ldrh	r2, [r0, r3]
 8008666:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800866a:	52c2      	strh	r2, [r0, r3]
 800866c:	5ac2      	ldrh	r2, [r0, r3]
 800866e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8008672:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8008676:	b292      	uxth	r2, r2
 8008678:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800867a:	4620      	mov	r0, r4
 800867c:	f002 ff19 	bl	800b4b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008680:	f1b8 0f00 	cmp.w	r8, #0
 8008684:	f000 80f4 	beq.w	8008870 <HAL_PCD_IRQHandler+0x758>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008688:	2328      	movs	r3, #40	@ 0x28
 800868a:	fb03 4307 	mla	r3, r3, r7, r4
 800868e:	6822      	ldr	r2, [r4, #0]
 8008690:	7c19      	ldrb	r1, [r3, #16]
 8008692:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8008696:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800869a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800869e:	041b      	lsls	r3, r3, #16
 80086a0:	0c1b      	lsrs	r3, r3, #16
 80086a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80086a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086aa:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80086ae:	e0df      	b.n	8008870 <HAL_PCD_IRQHandler+0x758>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d1e2      	bne.n	800867a <HAL_PCD_IRQHandler+0x562>
 80086b4:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 80086b8:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 80086bc:	fa1f fe8e 	uxth.w	lr, lr
 80086c0:	44f4      	add	ip, lr
 80086c2:	010b      	lsls	r3, r1, #4
 80086c4:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80086c8:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 80086cc:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 80086d0:	fa1f fc8c 	uxth.w	ip, ip
 80086d4:	4460      	add	r0, ip
 80086d6:	e7cf      	b.n	8008678 <HAL_PCD_IRQHandler+0x560>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80086d8:	f1b8 0f00 	cmp.w	r8, #0
 80086dc:	d00d      	beq.n	80086fa <HAL_PCD_IRQHandler+0x5e2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80086de:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 80086e2:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80086e6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80086ea:	0412      	lsls	r2, r2, #16
 80086ec:	0c12      	lsrs	r2, r2, #16
 80086ee:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80086f2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80086f6:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80086fa:	f04f 0828 	mov.w	r8, #40	@ 0x28
 80086fe:	fb08 4807 	mla	r8, r8, r7, r4
 8008702:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 8008706:	2a01      	cmp	r2, #1
 8008708:	f040 80b2 	bne.w	8008870 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 800870c:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 8008710:	eb02 0e0c 	add.w	lr, r2, ip
 8008714:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8008718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800871a:	4462      	add	r2, ip
 800871c:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 800871e:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8008722:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8008726:	4293      	cmp	r3, r2
 8008728:	d335      	bcc.n	8008796 <HAL_PCD_IRQHandler+0x67e>
          ep->xfer_len_db -= len;
 800872a:	1a9b      	subs	r3, r3, r2
 800872c:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008730:	2328      	movs	r3, #40	@ 0x28
 8008732:	fb03 4307 	mla	r3, r3, r7, r4
 8008736:	f893 c011 	ldrb.w	ip, [r3, #17]
 800873a:	b293      	uxth	r3, r2
 800873c:	f1bc 0f00 	cmp.w	ip, #0
 8008740:	d145      	bne.n	80087ce <HAL_PCD_IRQHandler+0x6b6>
 8008742:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 8008746:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 800874a:	fa1f f888 	uxth.w	r8, r8
 800874e:	44c4      	add	ip, r8
 8008750:	0109      	lsls	r1, r1, #4
 8008752:	f83c 8001 	ldrh.w	r8, [ip, r1]
 8008756:	2a3e      	cmp	r2, #62	@ 0x3e
 8008758:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800875c:	f82c 8001 	strh.w	r8, [ip, r1]
 8008760:	d925      	bls.n	80087ae <HAL_PCD_IRQHandler+0x696>
 8008762:	ea4f 1852 	mov.w	r8, r2, lsr #5
 8008766:	06d2      	lsls	r2, r2, #27
 8008768:	f83c 2001 	ldrh.w	r2, [ip, r1]
 800876c:	bf08      	it	eq
 800876e:	f108 38ff 	addeq.w	r8, r8, #4294967295
 8008772:	b292      	uxth	r2, r2
 8008774:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8008778:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800877c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8008780:	b292      	uxth	r2, r2
 8008782:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008786:	2228      	movs	r2, #40	@ 0x28
 8008788:	fb02 4207 	mla	r2, r2, r7, r4
 800878c:	8b12      	ldrh	r2, [r2, #24]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800878e:	4671      	mov	r1, lr
 8008790:	f001 fd72 	bl	800a278 <USB_WritePMA>
 8008794:	e06c      	b.n	8008870 <HAL_PCD_IRQHandler+0x758>
        else if (ep->xfer_len_db == 0U)
 8008796:	b91b      	cbnz	r3, 80087a0 <HAL_PCD_IRQHandler+0x688>
    if (ep->xfer_len > TxPctSize)
 8008798:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 800879a:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 800879e:	e7c7      	b.n	8008730 <HAL_PCD_IRQHandler+0x618>
          ep->xfer_fill_db = 0U;
 80087a0:	2200      	movs	r2, #0
 80087a2:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          ep->xfer_len_db = 0U;
 80087a6:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
 80087aa:	461a      	mov	r2, r3
 80087ac:	e7c0      	b.n	8008730 <HAL_PCD_IRQHandler+0x618>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80087ae:	b912      	cbnz	r2, 80087b6 <HAL_PCD_IRQHandler+0x69e>
 80087b0:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80087b4:	e7e0      	b.n	8008778 <HAL_PCD_IRQHandler+0x660>
 80087b6:	ea4f 0852 	mov.w	r8, r2, lsr #1
 80087ba:	07d2      	lsls	r2, r2, #31
 80087bc:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80087c0:	bf48      	it	mi
 80087c2:	f108 0801 	addmi.w	r8, r8, #1
 80087c6:	b292      	uxth	r2, r2
 80087c8:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 80087cc:	e7d8      	b.n	8008780 <HAL_PCD_IRQHandler+0x668>
 80087ce:	f1bc 0f01 	cmp.w	ip, #1
 80087d2:	d1d8      	bne.n	8008786 <HAL_PCD_IRQHandler+0x66e>
 80087d4:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 80087d8:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 80087dc:	fa1f fc8c 	uxth.w	ip, ip
 80087e0:	4462      	add	r2, ip
 80087e2:	0109      	lsls	r1, r1, #4
 80087e4:	5253      	strh	r3, [r2, r1]
 80087e6:	e7ce      	b.n	8008786 <HAL_PCD_IRQHandler+0x66e>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80087e8:	f10c 0c06 	add.w	ip, ip, #6
 80087ec:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 80087f0:	fa1f f888 	uxth.w	r8, r8
    if (ep->xfer_len >= TxPctSize)
 80087f4:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80087f8:	4594      	cmp	ip, r2
      ep->xfer_len = 0U;
 80087fa:	bf8c      	ite	hi
 80087fc:	4672      	movhi	r2, lr
      ep->xfer_len -= TxPctSize;
 80087fe:	eba2 020c 	subls.w	r2, r2, ip
 8008802:	629a      	str	r2, [r3, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 8008804:	2a00      	cmp	r2, #0
 8008806:	d15d      	bne.n	80088c4 <HAL_PCD_IRQHandler+0x7ac>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008808:	2328      	movs	r3, #40	@ 0x28
 800880a:	fb03 4307 	mla	r3, r3, r7, r4
 800880e:	7c5b      	ldrb	r3, [r3, #17]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d143      	bne.n	800889c <HAL_PCD_IRQHandler+0x784>
 8008814:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8008818:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 800881c:	b292      	uxth	r2, r2
 800881e:	010b      	lsls	r3, r1, #4
 8008820:	4494      	add	ip, r2
 8008822:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8008826:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800882a:	f82c 2003 	strh.w	r2, [ip, r3]
 800882e:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8008832:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8008836:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800883a:	b292      	uxth	r2, r2
 800883c:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008840:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8008844:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8008848:	b292      	uxth	r2, r2
 800884a:	4410      	add	r0, r2
 800884c:	5ac2      	ldrh	r2, [r0, r3]
 800884e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008852:	52c2      	strh	r2, [r0, r3]
 8008854:	5ac2      	ldrh	r2, [r0, r3]
 8008856:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800885a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800885e:	b292      	uxth	r2, r2
 8008860:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008862:	4620      	mov	r0, r4
 8008864:	f002 fe25 	bl	800b4b2 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008868:	f1b8 0f00 	cmp.w	r8, #0
 800886c:	f43f af0c 	beq.w	8008688 <HAL_PCD_IRQHandler+0x570>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008870:	2328      	movs	r3, #40	@ 0x28
 8008872:	fb03 4307 	mla	r3, r3, r7, r4
 8008876:	6822      	ldr	r2, [r4, #0]
 8008878:	7c19      	ldrb	r1, [r3, #16]
 800887a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800887e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008882:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008886:	041b      	lsls	r3, r3, #16
 8008888:	0c1b      	lsrs	r3, r3, #16
 800888a:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 800888e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008896:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 800889a:	e44a      	b.n	8008132 <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800889c:	2b01      	cmp	r3, #1
 800889e:	d1e0      	bne.n	8008862 <HAL_PCD_IRQHandler+0x74a>
 80088a0:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 80088a4:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 80088a8:	fa1f fe8e 	uxth.w	lr, lr
 80088ac:	44f4      	add	ip, lr
 80088ae:	010b      	lsls	r3, r1, #4
 80088b0:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80088b4:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 80088b8:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 80088bc:	fa1f fc8c 	uxth.w	ip, ip
 80088c0:	4460      	add	r0, ip
 80088c2:	e7cd      	b.n	8008860 <HAL_PCD_IRQHandler+0x748>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80088c4:	f1b8 0f00 	cmp.w	r8, #0
 80088c8:	d10d      	bne.n	80088e6 <HAL_PCD_IRQHandler+0x7ce>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80088ca:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 80088ce:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80088d2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80088d6:	0412      	lsls	r2, r2, #16
 80088d8:	0c12      	lsrs	r2, r2, #16
 80088da:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80088de:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80088e2:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80088e6:	f04f 0828 	mov.w	r8, #40	@ 0x28
 80088ea:	fb08 4807 	mla	r8, r8, r7, r4
 80088ee:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 80088f2:	2a01      	cmp	r2, #1
 80088f4:	d1bc      	bne.n	8008870 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 80088f6:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 80088fa:	eb02 0e0c 	add.w	lr, r2, ip
 80088fe:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8008902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008904:	4462      	add	r2, ip
 8008906:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8008908:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 800890c:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8008910:	4293      	cmp	r3, r2
 8008912:	d332      	bcc.n	800897a <HAL_PCD_IRQHandler+0x862>
          ep->xfer_len_db -= len;
 8008914:	1a9b      	subs	r3, r3, r2
 8008916:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800891a:	2328      	movs	r3, #40	@ 0x28
 800891c:	fb03 4307 	mla	r3, r3, r7, r4
 8008920:	f893 c011 	ldrb.w	ip, [r3, #17]
 8008924:	b293      	uxth	r3, r2
 8008926:	f1bc 0f00 	cmp.w	ip, #0
 800892a:	d142      	bne.n	80089b2 <HAL_PCD_IRQHandler+0x89a>
 800892c:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 8008930:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 8008934:	fa1f f888 	uxth.w	r8, r8
 8008938:	44c4      	add	ip, r8
 800893a:	0109      	lsls	r1, r1, #4
 800893c:	f83c 8001 	ldrh.w	r8, [ip, r1]
 8008940:	2a3e      	cmp	r2, #62	@ 0x3e
 8008942:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008946:	f82c 8001 	strh.w	r8, [ip, r1]
 800894a:	d922      	bls.n	8008992 <HAL_PCD_IRQHandler+0x87a>
 800894c:	ea4f 1852 	mov.w	r8, r2, lsr #5
 8008950:	06d2      	lsls	r2, r2, #27
 8008952:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8008956:	bf08      	it	eq
 8008958:	f108 38ff 	addeq.w	r8, r8, #4294967295
 800895c:	b292      	uxth	r2, r2
 800895e:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8008962:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8008966:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800896a:	b292      	uxth	r2, r2
 800896c:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008970:	2228      	movs	r2, #40	@ 0x28
 8008972:	fb02 4207 	mla	r2, r2, r7, r4
 8008976:	8b52      	ldrh	r2, [r2, #26]
 8008978:	e709      	b.n	800878e <HAL_PCD_IRQHandler+0x676>
        else if (ep->xfer_len_db == 0U)
 800897a:	b91b      	cbnz	r3, 8008984 <HAL_PCD_IRQHandler+0x86c>
    if (ep->xfer_len >= TxPctSize)
 800897c:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 800897e:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 8008982:	e7ca      	b.n	800891a <HAL_PCD_IRQHandler+0x802>
          ep->xfer_len_db = 0U;
 8008984:	2200      	movs	r2, #0
 8008986:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 800898a:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
 800898e:	461a      	mov	r2, r3
 8008990:	e7c3      	b.n	800891a <HAL_PCD_IRQHandler+0x802>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008992:	b912      	cbnz	r2, 800899a <HAL_PCD_IRQHandler+0x882>
 8008994:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8008998:	e7e3      	b.n	8008962 <HAL_PCD_IRQHandler+0x84a>
 800899a:	ea4f 0852 	mov.w	r8, r2, lsr #1
 800899e:	07d2      	lsls	r2, r2, #31
 80089a0:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80089a4:	bf48      	it	mi
 80089a6:	f108 0801 	addmi.w	r8, r8, #1
 80089aa:	b292      	uxth	r2, r2
 80089ac:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 80089b0:	e7db      	b.n	800896a <HAL_PCD_IRQHandler+0x852>
 80089b2:	f1bc 0f01 	cmp.w	ip, #1
 80089b6:	d1db      	bne.n	8008970 <HAL_PCD_IRQHandler+0x858>
 80089b8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80089bc:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 80089c0:	b292      	uxth	r2, r2
 80089c2:	4494      	add	ip, r2
 80089c4:	010a      	lsls	r2, r1, #4
 80089c6:	f82c 3002 	strh.w	r3, [ip, r2]
 80089ca:	e7d1      	b.n	8008970 <HAL_PCD_IRQHandler+0x858>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80089cc:	0546      	lsls	r6, r0, #21
 80089ce:	d512      	bpl.n	80089f6 <HAL_PCD_IRQHandler+0x8de>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80089d0:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80089d2:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80089d4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80089d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80089dc:	041b      	lsls	r3, r3, #16
 80089de:	0c1b      	lsrs	r3, r3, #16
 80089e0:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 80089e4:	f002 fd71 	bl	800b4ca <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80089e8:	4629      	mov	r1, r5
 80089ea:	4620      	mov	r0, r4
}
 80089ec:	b005      	add	sp, #20
 80089ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80089f2:	f7ff bb7d 	b.w	80080f0 <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80089f6:	0441      	lsls	r1, r0, #17
 80089f8:	d50a      	bpl.n	8008a10 <HAL_PCD_IRQHandler+0x8f8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80089fa:	6822      	ldr	r2, [r4, #0]
 80089fc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8008a00:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8008a04:	041b      	lsls	r3, r3, #16
 8008a06:	0c1b      	lsrs	r3, r3, #16
 8008a08:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 8008a0c:	f7ff bb96 	b.w	800813c <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8008a10:	0482      	lsls	r2, r0, #18
 8008a12:	d505      	bpl.n	8008a20 <HAL_PCD_IRQHandler+0x908>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8008a14:	6822      	ldr	r2, [r4, #0]
 8008a16:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8008a1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008a1e:	e7f1      	b.n	8008a04 <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8008a20:	04c3      	lsls	r3, r0, #19
 8008a22:	d519      	bpl.n	8008a58 <HAL_PCD_IRQHandler+0x940>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8008a24:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8008a26:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8008a28:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8008a2c:	f023 0304 	bic.w	r3, r3, #4
 8008a30:	041b      	lsls	r3, r3, #16
 8008a32:	0c1b      	lsrs	r3, r3, #16
 8008a34:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8008a38:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8008a3c:	f023 0308 	bic.w	r3, r3, #8
 8008a40:	041b      	lsls	r3, r3, #16
 8008a42:	0c1b      	lsrs	r3, r3, #16
 8008a44:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8008a48:	f002 fd62 	bl	800b510 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8008a4c:	6822      	ldr	r2, [r4, #0]
 8008a4e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8008a52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a56:	e7d5      	b.n	8008a04 <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8008a58:	0507      	lsls	r7, r0, #20
 8008a5a:	d548      	bpl.n	8008aee <HAL_PCD_IRQHandler+0x9d6>
 8008a5c:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8008a5e:	6823      	ldr	r3, [r4, #0]
 8008a60:	4606      	mov	r6, r0
 8008a62:	4619      	mov	r1, r3
 8008a64:	461a      	mov	r2, r3
 8008a66:	f103 0520 	add.w	r5, r3, #32
 8008a6a:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 8008a6e:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8008a70:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 8008a74:	d1f9      	bne.n	8008a6a <HAL_PCD_IRQHandler+0x952>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8008a76:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8008a7a:	b292      	uxth	r2, r2
 8008a7c:	f042 0201 	orr.w	r2, r2, #1
 8008a80:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8008a84:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8008a88:	f022 0201 	bic.w	r2, r2, #1
 8008a8c:	0412      	lsls	r2, r2, #16
 8008a8e:	0c12      	lsrs	r2, r2, #16
 8008a90:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8008a94:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8008a98:	0556      	lsls	r6, r2, #21
 8008a9a:	d5fb      	bpl.n	8008a94 <HAL_PCD_IRQHandler+0x97c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008a9c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8008aa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008aa4:	0412      	lsls	r2, r2, #16
 8008aa6:	0c12      	lsrs	r2, r2, #16
 8008aa8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8008aac:	f830 2b02 	ldrh.w	r2, [r0], #2
 8008ab0:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 8008ab4:	428d      	cmp	r5, r1
 8008ab6:	d1f9      	bne.n	8008aac <HAL_PCD_IRQHandler+0x994>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008ab8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8008abc:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008abe:	b292      	uxth	r2, r2
 8008ac0:	f042 0208 	orr.w	r2, r2, #8
 8008ac4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8008ac8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8008acc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008ad0:	0412      	lsls	r2, r2, #16
 8008ad2:	0c12      	lsrs	r2, r2, #16
 8008ad4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8008ad8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8008adc:	b292      	uxth	r2, r2
 8008ade:	f042 0204 	orr.w	r2, r2, #4
 8008ae2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8008ae6:	f002 fd03 	bl	800b4f0 <HAL_PCD_SuspendCallback>
    return;
 8008aea:	f7ff bb27 	b.w	800813c <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8008aee:	0582      	lsls	r2, r0, #22
 8008af0:	d50d      	bpl.n	8008b0e <HAL_PCD_IRQHandler+0x9f6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8008af2:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8008af4:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8008af6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8008afa:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008afe:	041b      	lsls	r3, r3, #16
 8008b00:	0c1b      	lsrs	r3, r3, #16
 8008b02:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 8008b06:	f002 fcdc 	bl	800b4c2 <HAL_PCD_SOFCallback>
    return;
 8008b0a:	f7ff bb17 	b.w	800813c <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8008b0e:	05c3      	lsls	r3, r0, #23
 8008b10:	f57f ab14 	bpl.w	800813c <HAL_PCD_IRQHandler+0x24>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8008b14:	6822      	ldr	r2, [r4, #0]
 8008b16:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8008b1a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b1e:	e771      	b.n	8008a04 <HAL_PCD_IRQHandler+0x8ec>

08008b20 <HAL_PCD_EP_Open>:
{
 8008b20:	b570      	push	{r4, r5, r6, lr}
 8008b22:	2428      	movs	r4, #40	@ 0x28
 8008b24:	4605      	mov	r5, r0
 8008b26:	f001 0007 	and.w	r0, r1, #7
 8008b2a:	4344      	muls	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8008b2c:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b30:	bf14      	ite	ne
 8008b32:	f104 0110 	addne.w	r1, r4, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b36:	f504 71a8 	addeq.w	r1, r4, #336	@ 0x150
 8008b3a:	eb05 0604 	add.w	r6, r5, r4
    ep->is_in = 1U;
 8008b3e:	bf15      	itete	ne
 8008b40:	2401      	movne	r4, #1
    ep->is_in = 0U;
 8008b42:	2400      	moveq	r4, #0
    ep->is_in = 1U;
 8008b44:	7474      	strbne	r4, [r6, #17]
    ep->is_in = 0U;
 8008b46:	f886 4151 	strbeq.w	r4, [r6, #337]	@ 0x151
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b4a:	bf14      	ite	ne
 8008b4c:	1949      	addne	r1, r1, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b4e:	1949      	addeq	r1, r1, r5
  if (ep_type == EP_TYPE_BULK)
 8008b50:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8008b52:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 8008b54:	bf08      	it	eq
 8008b56:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b58:	7008      	strb	r0, [r1, #0]
    ep->data_pid_start = 0U;
 8008b5a:	bf08      	it	eq
 8008b5c:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 8008b5e:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8008b60:	f895 3290 	ldrb.w	r3, [r5, #656]	@ 0x290
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d009      	beq.n	8008b7c <HAL_PCD_EP_Open+0x5c>
 8008b68:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008b6a:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8008b6c:	f885 3290 	strb.w	r3, [r5, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008b70:	f001 f8d6 	bl	8009d20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008b74:	2000      	movs	r0, #0
 8008b76:	f885 0290 	strb.w	r0, [r5, #656]	@ 0x290
}
 8008b7a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8008b7c:	2002      	movs	r0, #2
 8008b7e:	e7fc      	b.n	8008b7a <HAL_PCD_EP_Open+0x5a>

08008b80 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8008b80:	2328      	movs	r3, #40	@ 0x28
 8008b82:	f001 0207 	and.w	r2, r1, #7
 8008b86:	4353      	muls	r3, r2
 8008b88:	f011 0f80 	tst.w	r1, #128	@ 0x80
{
 8008b8c:	b510      	push	{r4, lr}
 8008b8e:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b90:	bf18      	it	ne
 8008b92:	f103 0110 	addne.w	r1, r3, #16
 8008b96:	4418      	add	r0, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b98:	bf0b      	itete	eq
 8008b9a:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
    ep->is_in = 1U;
 8008b9e:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8008ba0:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ba2:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ba4:	bf0a      	itet	eq
 8008ba6:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8008ba8:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 8008baa:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 8008bae:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8008bb0:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d009      	beq.n	8008bcc <HAL_PCD_EP_Close+0x4c>
 8008bb8:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008bba:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8008bbc:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008bc0:	f001 fa0e 	bl	8009fe0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008bc4:	2000      	movs	r0, #0
 8008bc6:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8008bca:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8008bcc:	2002      	movs	r0, #2
 8008bce:	e7fc      	b.n	8008bca <HAL_PCD_EP_Close+0x4a>

08008bd0 <HAL_PCD_EP_Receive>:
{
 8008bd0:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 8008bd2:	2428      	movs	r4, #40	@ 0x28
  ep->xfer_count = 0U;
 8008bd4:	2600      	movs	r6, #0
 8008bd6:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8008bda:	434c      	muls	r4, r1
 8008bdc:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 8008bde:	f885 1150 	strb.w	r1, [r5, #336]	@ 0x150
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008be2:	f504 71a8 	add.w	r1, r4, #336	@ 0x150
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008be6:	4401      	add	r1, r0
  ep->xfer_len = len;
 8008be8:	e9c5 2359 	strd	r2, r3, [r5, #356]	@ 0x164
  ep->xfer_count = 0U;
 8008bec:	f8c5 616c 	str.w	r6, [r5, #364]	@ 0x16c
  ep->is_in = 0U;
 8008bf0:	f885 6151 	strb.w	r6, [r5, #337]	@ 0x151
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008bf4:	6800      	ldr	r0, [r0, #0]
 8008bf6:	f001 fb4f 	bl	800a298 <USB_EPStartXfer>
}
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	bd70      	pop	{r4, r5, r6, pc}

08008bfe <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008bfe:	2328      	movs	r3, #40	@ 0x28
 8008c00:	f001 0107 	and.w	r1, r1, #7
 8008c04:	fb03 0001 	mla	r0, r3, r1, r0
}
 8008c08:	f8d0 016c 	ldr.w	r0, [r0, #364]	@ 0x16c
 8008c0c:	4770      	bx	lr

08008c0e <HAL_PCD_EP_Transmit>:
{
 8008c0e:	b570      	push	{r4, r5, r6, lr}
 8008c10:	2528      	movs	r5, #40	@ 0x28
 8008c12:	f001 0107 	and.w	r1, r1, #7
 8008c16:	434d      	muls	r5, r1
  ep->xfer_buff = pBuf;
 8008c18:	1944      	adds	r4, r0, r5
  ep->xfer_count = 0U;
 8008c1a:	2600      	movs	r6, #0
  ep->xfer_len = len;
 8008c1c:	e9c4 2309 	strd	r2, r3, [r4, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 8008c20:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c22:	7421      	strb	r1, [r4, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c24:	f105 0110 	add.w	r1, r5, #16
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008c28:	4401      	add	r1, r0
  ep->xfer_fill_db = 1U;
 8008c2a:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  ep->xfer_len_db = len;
 8008c2e:	6323      	str	r3, [r4, #48]	@ 0x30
  ep->xfer_count = 0U;
 8008c30:	62e6      	str	r6, [r4, #44]	@ 0x2c
  ep->is_in = 1U;
 8008c32:	7462      	strb	r2, [r4, #17]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008c34:	6800      	ldr	r0, [r0, #0]
 8008c36:	f001 fb2f 	bl	800a298 <USB_EPStartXfer>
}
 8008c3a:	4630      	mov	r0, r6
 8008c3c:	bd70      	pop	{r4, r5, r6, pc}

08008c3e <HAL_PCD_EP_SetStall>:
{
 8008c3e:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008c40:	7903      	ldrb	r3, [r0, #4]
 8008c42:	f001 0507 	and.w	r5, r1, #7
 8008c46:	42ab      	cmp	r3, r5
{
 8008c48:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008c4a:	d32a      	bcc.n	8008ca2 <HAL_PCD_EP_SetStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 8008c4c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8008c50:	f04f 0328 	mov.w	r3, #40	@ 0x28
 8008c54:	d01c      	beq.n	8008c90 <HAL_PCD_EP_SetStall+0x52>
    ep->is_in = 1U;
 8008c56:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c58:	436b      	muls	r3, r5
 8008c5a:	f103 0110 	add.w	r1, r3, #16
    ep->is_in = 1U;
 8008c5e:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c60:	4401      	add	r1, r0
    ep->is_in = 1U;
 8008c62:	745a      	strb	r2, [r3, #17]
  ep->is_stall = 1U;
 8008c64:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c66:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8008c68:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8008c6a:	f894 2290 	ldrb.w	r2, [r4, #656]	@ 0x290
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d019      	beq.n	8008ca6 <HAL_PCD_EP_SetStall+0x68>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008c72:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8008c74:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008c78:	f001 fa85 	bl	800a186 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008c7c:	b925      	cbnz	r5, 8008c88 <HAL_PCD_EP_SetStall+0x4a>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008c7e:	6820      	ldr	r0, [r4, #0]
 8008c80:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 8008c84:	f001 faf6 	bl	800a274 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8008c88:	2000      	movs	r0, #0
 8008c8a:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8008c8e:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8008c90:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8008c92:	434b      	muls	r3, r1
 8008c94:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
    ep->is_in = 0U;
 8008c98:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8008c9a:	4401      	add	r1, r0
    ep->is_in = 0U;
 8008c9c:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
 8008ca0:	e7e0      	b.n	8008c64 <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
 8008ca2:	2001      	movs	r0, #1
 8008ca4:	e7f3      	b.n	8008c8e <HAL_PCD_EP_SetStall+0x50>
  __HAL_LOCK(hpcd);
 8008ca6:	2002      	movs	r0, #2
 8008ca8:	e7f1      	b.n	8008c8e <HAL_PCD_EP_SetStall+0x50>

08008caa <HAL_PCD_EP_ClrStall>:
{
 8008caa:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008cac:	7902      	ldrb	r2, [r0, #4]
 8008cae:	f001 030f 	and.w	r3, r1, #15
 8008cb2:	429a      	cmp	r2, r3
{
 8008cb4:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008cb6:	d326      	bcc.n	8008d06 <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 8008cb8:	2328      	movs	r3, #40	@ 0x28
 8008cba:	f001 0207 	and.w	r2, r1, #7
 8008cbe:	4353      	muls	r3, r2
 8008cc0:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008cc4:	bf14      	ite	ne
 8008cc6:	f103 0110 	addne.w	r1, r3, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008cca:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
 8008cce:	4418      	add	r0, r3
  ep->is_stall = 0U;
 8008cd0:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8008cd4:	bf15      	itete	ne
 8008cd6:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8008cd8:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008cda:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008cdc:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8008cde:	bf14      	ite	ne
 8008ce0:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 8008ce2:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->is_stall = 0U;
 8008ce6:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008ce8:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8008cea:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d00b      	beq.n	8008d0a <HAL_PCD_EP_ClrStall+0x60>
 8008cf2:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008cf4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8008cf6:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008cfa:	f001 fa64 	bl	800a1c6 <USB_EPClearStall>
  return HAL_OK;
 8008cfe:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8008d00:	f884 5290 	strb.w	r5, [r4, #656]	@ 0x290
}
 8008d04:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008d06:	2001      	movs	r0, #1
 8008d08:	e7fc      	b.n	8008d04 <HAL_PCD_EP_ClrStall+0x5a>
  __HAL_LOCK(hpcd);
 8008d0a:	2002      	movs	r0, #2
 8008d0c:	e7fa      	b.n	8008d04 <HAL_PCD_EP_ClrStall+0x5a>

08008d0e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008d0e:	b510      	push	{r4, lr}
 8008d10:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008d12:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d16:	bf1b      	ittet	ne
 8008d18:	f001 0107 	andne.w	r1, r1, #7
 8008d1c:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008d20:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d24:	3010      	addne	r0, #16
    ep = &hpcd->OUT_ep[ep_addr];
 8008d26:	bf08      	it	eq
 8008d28:	f500 70a8 	addeq.w	r0, r0, #336	@ 0x150
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008d2c:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8008d2e:	b91a      	cbnz	r2, 8008d38 <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 8008d30:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8008d32:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8008d34:	2000      	movs	r0, #0
 8008d36:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8008d38:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008d3a:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8008d3c:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008d3e:	e7f9      	b.n	8008d34 <HAL_PCDEx_PMAConfig+0x26>

08008d40 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008d40:	2201      	movs	r2, #1
 8008d42:	4b01      	ldr	r3, [pc, #4]	@ (8008d48 <HAL_PWR_EnableBkUpAccess+0x8>)
 8008d44:	621a      	str	r2, [r3, #32]
}
 8008d46:	4770      	bx	lr
 8008d48:	420e0000 	.word	0x420e0000

08008d4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008d50:	4605      	mov	r5, r0
 8008d52:	b338      	cbz	r0, 8008da4 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d54:	6803      	ldr	r3, [r0, #0]
 8008d56:	07db      	lsls	r3, r3, #31
 8008d58:	d410      	bmi.n	8008d7c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d5a:	682b      	ldr	r3, [r5, #0]
 8008d5c:	079f      	lsls	r7, r3, #30
 8008d5e:	d45e      	bmi.n	8008e1e <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d60:	682b      	ldr	r3, [r5, #0]
 8008d62:	0719      	lsls	r1, r3, #28
 8008d64:	f100 8095 	bmi.w	8008e92 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d68:	682b      	ldr	r3, [r5, #0]
 8008d6a:	075a      	lsls	r2, r3, #29
 8008d6c:	f100 80c1 	bmi.w	8008ef2 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d70:	69eb      	ldr	r3, [r5, #28]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f040 812c 	bne.w	8008fd0 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8008d78:	2000      	movs	r0, #0
 8008d7a:	e029      	b.n	8008dd0 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008d7c:	4c90      	ldr	r4, [pc, #576]	@ (8008fc0 <HAL_RCC_OscConfig+0x274>)
 8008d7e:	6863      	ldr	r3, [r4, #4]
 8008d80:	f003 030c 	and.w	r3, r3, #12
 8008d84:	2b04      	cmp	r3, #4
 8008d86:	d007      	beq.n	8008d98 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008d88:	6863      	ldr	r3, [r4, #4]
 8008d8a:	f003 030c 	and.w	r3, r3, #12
 8008d8e:	2b08      	cmp	r3, #8
 8008d90:	d10a      	bne.n	8008da8 <HAL_RCC_OscConfig+0x5c>
 8008d92:	6863      	ldr	r3, [r4, #4]
 8008d94:	03de      	lsls	r6, r3, #15
 8008d96:	d507      	bpl.n	8008da8 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d98:	6823      	ldr	r3, [r4, #0]
 8008d9a:	039c      	lsls	r4, r3, #14
 8008d9c:	d5dd      	bpl.n	8008d5a <HAL_RCC_OscConfig+0xe>
 8008d9e:	686b      	ldr	r3, [r5, #4]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1da      	bne.n	8008d5a <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8008da4:	2001      	movs	r0, #1
 8008da6:	e013      	b.n	8008dd0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008da8:	686b      	ldr	r3, [r5, #4]
 8008daa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dae:	d112      	bne.n	8008dd6 <HAL_RCC_OscConfig+0x8a>
 8008db0:	6823      	ldr	r3, [r4, #0]
 8008db2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008db6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8008db8:	f7fe fdaa 	bl	8007910 <HAL_GetTick>
 8008dbc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008dbe:	6823      	ldr	r3, [r4, #0]
 8008dc0:	0398      	lsls	r0, r3, #14
 8008dc2:	d4ca      	bmi.n	8008d5a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008dc4:	f7fe fda4 	bl	8007910 <HAL_GetTick>
 8008dc8:	1b80      	subs	r0, r0, r6
 8008dca:	2864      	cmp	r0, #100	@ 0x64
 8008dcc:	d9f7      	bls.n	8008dbe <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8008dce:	2003      	movs	r0, #3
}
 8008dd0:	b002      	add	sp, #8
 8008dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008dd6:	b99b      	cbnz	r3, 8008e00 <HAL_RCC_OscConfig+0xb4>
 8008dd8:	6823      	ldr	r3, [r4, #0]
 8008dda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008dde:	6023      	str	r3, [r4, #0]
 8008de0:	6823      	ldr	r3, [r4, #0]
 8008de2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008de6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8008de8:	f7fe fd92 	bl	8007910 <HAL_GetTick>
 8008dec:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008dee:	6823      	ldr	r3, [r4, #0]
 8008df0:	0399      	lsls	r1, r3, #14
 8008df2:	d5b2      	bpl.n	8008d5a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008df4:	f7fe fd8c 	bl	8007910 <HAL_GetTick>
 8008df8:	1b80      	subs	r0, r0, r6
 8008dfa:	2864      	cmp	r0, #100	@ 0x64
 8008dfc:	d9f7      	bls.n	8008dee <HAL_RCC_OscConfig+0xa2>
 8008dfe:	e7e6      	b.n	8008dce <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008e04:	6823      	ldr	r3, [r4, #0]
 8008e06:	d103      	bne.n	8008e10 <HAL_RCC_OscConfig+0xc4>
 8008e08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008e0c:	6023      	str	r3, [r4, #0]
 8008e0e:	e7cf      	b.n	8008db0 <HAL_RCC_OscConfig+0x64>
 8008e10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e14:	6023      	str	r3, [r4, #0]
 8008e16:	6823      	ldr	r3, [r4, #0]
 8008e18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e1c:	e7cb      	b.n	8008db6 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008e1e:	4c68      	ldr	r4, [pc, #416]	@ (8008fc0 <HAL_RCC_OscConfig+0x274>)
 8008e20:	6863      	ldr	r3, [r4, #4]
 8008e22:	f013 0f0c 	tst.w	r3, #12
 8008e26:	d007      	beq.n	8008e38 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008e28:	6863      	ldr	r3, [r4, #4]
 8008e2a:	f003 030c 	and.w	r3, r3, #12
 8008e2e:	2b08      	cmp	r3, #8
 8008e30:	d110      	bne.n	8008e54 <HAL_RCC_OscConfig+0x108>
 8008e32:	6863      	ldr	r3, [r4, #4]
 8008e34:	03da      	lsls	r2, r3, #15
 8008e36:	d40d      	bmi.n	8008e54 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	079b      	lsls	r3, r3, #30
 8008e3c:	d502      	bpl.n	8008e44 <HAL_RCC_OscConfig+0xf8>
 8008e3e:	692b      	ldr	r3, [r5, #16]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d1af      	bne.n	8008da4 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e44:	6823      	ldr	r3, [r4, #0]
 8008e46:	696a      	ldr	r2, [r5, #20]
 8008e48:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008e4c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008e50:	6023      	str	r3, [r4, #0]
 8008e52:	e785      	b.n	8008d60 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008e54:	692a      	ldr	r2, [r5, #16]
 8008e56:	4b5b      	ldr	r3, [pc, #364]	@ (8008fc4 <HAL_RCC_OscConfig+0x278>)
 8008e58:	b16a      	cbz	r2, 8008e76 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008e5e:	f7fe fd57 	bl	8007910 <HAL_GetTick>
 8008e62:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e64:	6823      	ldr	r3, [r4, #0]
 8008e66:	079f      	lsls	r7, r3, #30
 8008e68:	d4ec      	bmi.n	8008e44 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e6a:	f7fe fd51 	bl	8007910 <HAL_GetTick>
 8008e6e:	1b80      	subs	r0, r0, r6
 8008e70:	2802      	cmp	r0, #2
 8008e72:	d9f7      	bls.n	8008e64 <HAL_RCC_OscConfig+0x118>
 8008e74:	e7ab      	b.n	8008dce <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8008e76:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008e78:	f7fe fd4a 	bl	8007910 <HAL_GetTick>
 8008e7c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e7e:	6823      	ldr	r3, [r4, #0]
 8008e80:	0798      	lsls	r0, r3, #30
 8008e82:	f57f af6d 	bpl.w	8008d60 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e86:	f7fe fd43 	bl	8007910 <HAL_GetTick>
 8008e8a:	1b80      	subs	r0, r0, r6
 8008e8c:	2802      	cmp	r0, #2
 8008e8e:	d9f6      	bls.n	8008e7e <HAL_RCC_OscConfig+0x132>
 8008e90:	e79d      	b.n	8008dce <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008e92:	69aa      	ldr	r2, [r5, #24]
 8008e94:	4e4a      	ldr	r6, [pc, #296]	@ (8008fc0 <HAL_RCC_OscConfig+0x274>)
 8008e96:	4b4b      	ldr	r3, [pc, #300]	@ (8008fc4 <HAL_RCC_OscConfig+0x278>)
 8008e98:	b1e2      	cbz	r2, 8008ed4 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8008ea0:	f7fe fd36 	bl	8007910 <HAL_GetTick>
 8008ea4:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ea6:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8008ea8:	079b      	lsls	r3, r3, #30
 8008eaa:	d50d      	bpl.n	8008ec8 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008eac:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8008eb0:	4b45      	ldr	r3, [pc, #276]	@ (8008fc8 <HAL_RCC_OscConfig+0x27c>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008eb8:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8008eba:	bf00      	nop
  }
  while (Delay --);
 8008ebc:	9b01      	ldr	r3, [sp, #4]
 8008ebe:	1e5a      	subs	r2, r3, #1
 8008ec0:	9201      	str	r2, [sp, #4]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1f9      	bne.n	8008eba <HAL_RCC_OscConfig+0x16e>
 8008ec6:	e74f      	b.n	8008d68 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ec8:	f7fe fd22 	bl	8007910 <HAL_GetTick>
 8008ecc:	1b00      	subs	r0, r0, r4
 8008ece:	2802      	cmp	r0, #2
 8008ed0:	d9e9      	bls.n	8008ea6 <HAL_RCC_OscConfig+0x15a>
 8008ed2:	e77c      	b.n	8008dce <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8008ed4:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8008ed8:	f7fe fd1a 	bl	8007910 <HAL_GetTick>
 8008edc:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ede:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8008ee0:	079f      	lsls	r7, r3, #30
 8008ee2:	f57f af41 	bpl.w	8008d68 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ee6:	f7fe fd13 	bl	8007910 <HAL_GetTick>
 8008eea:	1b00      	subs	r0, r0, r4
 8008eec:	2802      	cmp	r0, #2
 8008eee:	d9f6      	bls.n	8008ede <HAL_RCC_OscConfig+0x192>
 8008ef0:	e76d      	b.n	8008dce <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ef2:	4c33      	ldr	r4, [pc, #204]	@ (8008fc0 <HAL_RCC_OscConfig+0x274>)
 8008ef4:	69e3      	ldr	r3, [r4, #28]
 8008ef6:	00d8      	lsls	r0, r3, #3
 8008ef8:	d424      	bmi.n	8008f44 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8008efa:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8008efc:	69e3      	ldr	r3, [r4, #28]
 8008efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f02:	61e3      	str	r3, [r4, #28]
 8008f04:	69e3      	ldr	r3, [r4, #28]
 8008f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f0e:	4e2f      	ldr	r6, [pc, #188]	@ (8008fcc <HAL_RCC_OscConfig+0x280>)
 8008f10:	6833      	ldr	r3, [r6, #0]
 8008f12:	05d9      	lsls	r1, r3, #23
 8008f14:	d518      	bpl.n	8008f48 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f16:	68eb      	ldr	r3, [r5, #12]
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d126      	bne.n	8008f6a <HAL_RCC_OscConfig+0x21e>
 8008f1c:	6a23      	ldr	r3, [r4, #32]
 8008f1e:	f043 0301 	orr.w	r3, r3, #1
 8008f22:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8008f24:	f7fe fcf4 	bl	8007910 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f28:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8008f2c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f2e:	6a23      	ldr	r3, [r4, #32]
 8008f30:	079b      	lsls	r3, r3, #30
 8008f32:	d53f      	bpl.n	8008fb4 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8008f34:	2f00      	cmp	r7, #0
 8008f36:	f43f af1b 	beq.w	8008d70 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f3a:	69e3      	ldr	r3, [r4, #28]
 8008f3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f40:	61e3      	str	r3, [r4, #28]
 8008f42:	e715      	b.n	8008d70 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8008f44:	2700      	movs	r7, #0
 8008f46:	e7e2      	b.n	8008f0e <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008f48:	6833      	ldr	r3, [r6, #0]
 8008f4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f4e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8008f50:	f7fe fcde 	bl	8007910 <HAL_GetTick>
 8008f54:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f56:	6833      	ldr	r3, [r6, #0]
 8008f58:	05da      	lsls	r2, r3, #23
 8008f5a:	d4dc      	bmi.n	8008f16 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f5c:	f7fe fcd8 	bl	8007910 <HAL_GetTick>
 8008f60:	eba0 0008 	sub.w	r0, r0, r8
 8008f64:	2864      	cmp	r0, #100	@ 0x64
 8008f66:	d9f6      	bls.n	8008f56 <HAL_RCC_OscConfig+0x20a>
 8008f68:	e731      	b.n	8008dce <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f6a:	b9ab      	cbnz	r3, 8008f98 <HAL_RCC_OscConfig+0x24c>
 8008f6c:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f6e:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f72:	f023 0301 	bic.w	r3, r3, #1
 8008f76:	6223      	str	r3, [r4, #32]
 8008f78:	6a23      	ldr	r3, [r4, #32]
 8008f7a:	f023 0304 	bic.w	r3, r3, #4
 8008f7e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8008f80:	f7fe fcc6 	bl	8007910 <HAL_GetTick>
 8008f84:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f86:	6a23      	ldr	r3, [r4, #32]
 8008f88:	0798      	lsls	r0, r3, #30
 8008f8a:	d5d3      	bpl.n	8008f34 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f8c:	f7fe fcc0 	bl	8007910 <HAL_GetTick>
 8008f90:	1b80      	subs	r0, r0, r6
 8008f92:	4540      	cmp	r0, r8
 8008f94:	d9f7      	bls.n	8008f86 <HAL_RCC_OscConfig+0x23a>
 8008f96:	e71a      	b.n	8008dce <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f98:	2b05      	cmp	r3, #5
 8008f9a:	6a23      	ldr	r3, [r4, #32]
 8008f9c:	d103      	bne.n	8008fa6 <HAL_RCC_OscConfig+0x25a>
 8008f9e:	f043 0304 	orr.w	r3, r3, #4
 8008fa2:	6223      	str	r3, [r4, #32]
 8008fa4:	e7ba      	b.n	8008f1c <HAL_RCC_OscConfig+0x1d0>
 8008fa6:	f023 0301 	bic.w	r3, r3, #1
 8008faa:	6223      	str	r3, [r4, #32]
 8008fac:	6a23      	ldr	r3, [r4, #32]
 8008fae:	f023 0304 	bic.w	r3, r3, #4
 8008fb2:	e7b6      	b.n	8008f22 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fb4:	f7fe fcac 	bl	8007910 <HAL_GetTick>
 8008fb8:	1b80      	subs	r0, r0, r6
 8008fba:	4540      	cmp	r0, r8
 8008fbc:	d9b7      	bls.n	8008f2e <HAL_RCC_OscConfig+0x1e2>
 8008fbe:	e706      	b.n	8008dce <HAL_RCC_OscConfig+0x82>
 8008fc0:	40021000 	.word	0x40021000
 8008fc4:	42420000 	.word	0x42420000
 8008fc8:	20000000 	.word	0x20000000
 8008fcc:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008fd0:	4c2a      	ldr	r4, [pc, #168]	@ (800907c <HAL_RCC_OscConfig+0x330>)
 8008fd2:	6862      	ldr	r2, [r4, #4]
 8008fd4:	f002 020c 	and.w	r2, r2, #12
 8008fd8:	2a08      	cmp	r2, #8
 8008fda:	d03e      	beq.n	800905a <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	2b02      	cmp	r3, #2
 8008fe0:	4b27      	ldr	r3, [pc, #156]	@ (8009080 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 8008fe2:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008fe4:	d12c      	bne.n	8009040 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8008fe6:	f7fe fc93 	bl	8007910 <HAL_GetTick>
 8008fea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008fec:	6823      	ldr	r3, [r4, #0]
 8008fee:	0199      	lsls	r1, r3, #6
 8008ff0:	d420      	bmi.n	8009034 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008ff2:	6a2b      	ldr	r3, [r5, #32]
 8008ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ff8:	d105      	bne.n	8009006 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008ffa:	6862      	ldr	r2, [r4, #4]
 8008ffc:	68a9      	ldr	r1, [r5, #8]
 8008ffe:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8009002:	430a      	orrs	r2, r1
 8009004:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009006:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8009008:	6862      	ldr	r2, [r4, #4]
 800900a:	430b      	orrs	r3, r1
 800900c:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8009010:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8009012:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009014:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8009016:	4b1a      	ldr	r3, [pc, #104]	@ (8009080 <HAL_RCC_OscConfig+0x334>)
 8009018:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800901a:	f7fe fc79 	bl	8007910 <HAL_GetTick>
 800901e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009020:	6823      	ldr	r3, [r4, #0]
 8009022:	019a      	lsls	r2, r3, #6
 8009024:	f53f aea8 	bmi.w	8008d78 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009028:	f7fe fc72 	bl	8007910 <HAL_GetTick>
 800902c:	1b40      	subs	r0, r0, r5
 800902e:	2802      	cmp	r0, #2
 8009030:	d9f6      	bls.n	8009020 <HAL_RCC_OscConfig+0x2d4>
 8009032:	e6cc      	b.n	8008dce <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009034:	f7fe fc6c 	bl	8007910 <HAL_GetTick>
 8009038:	1b80      	subs	r0, r0, r6
 800903a:	2802      	cmp	r0, #2
 800903c:	d9d6      	bls.n	8008fec <HAL_RCC_OscConfig+0x2a0>
 800903e:	e6c6      	b.n	8008dce <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8009040:	f7fe fc66 	bl	8007910 <HAL_GetTick>
 8009044:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009046:	6823      	ldr	r3, [r4, #0]
 8009048:	019b      	lsls	r3, r3, #6
 800904a:	f57f ae95 	bpl.w	8008d78 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800904e:	f7fe fc5f 	bl	8007910 <HAL_GetTick>
 8009052:	1b40      	subs	r0, r0, r5
 8009054:	2802      	cmp	r0, #2
 8009056:	d9f6      	bls.n	8009046 <HAL_RCC_OscConfig+0x2fa>
 8009058:	e6b9      	b.n	8008dce <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800905a:	2b01      	cmp	r3, #1
 800905c:	f43f aea2 	beq.w	8008da4 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8009060:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009062:	6a2b      	ldr	r3, [r5, #32]
 8009064:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8009068:	429a      	cmp	r2, r3
 800906a:	f47f ae9b 	bne.w	8008da4 <HAL_RCC_OscConfig+0x58>
 800906e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009070:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009074:	1ac0      	subs	r0, r0, r3
 8009076:	bf18      	it	ne
 8009078:	2001      	movne	r0, #1
 800907a:	e6a9      	b.n	8008dd0 <HAL_RCC_OscConfig+0x84>
 800907c:	40021000 	.word	0x40021000
 8009080:	42420000 	.word	0x42420000

08009084 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8009084:	4a0d      	ldr	r2, [pc, #52]	@ (80090bc <HAL_RCC_GetSysClockFreq+0x38>)
 8009086:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8009088:	f003 010c 	and.w	r1, r3, #12
 800908c:	2908      	cmp	r1, #8
 800908e:	d112      	bne.n	80090b6 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009090:	480b      	ldr	r0, [pc, #44]	@ (80090c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8009092:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009096:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009098:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800909a:	d509      	bpl.n	80090b0 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800909c:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800909e:	4a09      	ldr	r2, [pc, #36]	@ (80090c4 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80090a0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80090a4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80090a6:	4a08      	ldr	r2, [pc, #32]	@ (80090c8 <HAL_RCC_GetSysClockFreq+0x44>)
 80090a8:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80090aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80090ae:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80090b0:	4b06      	ldr	r3, [pc, #24]	@ (80090cc <HAL_RCC_GetSysClockFreq+0x48>)
 80090b2:	4358      	muls	r0, r3
 80090b4:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80090b6:	4803      	ldr	r0, [pc, #12]	@ (80090c4 <HAL_RCC_GetSysClockFreq+0x40>)
}
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop
 80090bc:	40021000 	.word	0x40021000
 80090c0:	0800eadb 	.word	0x0800eadb
 80090c4:	007a1200 	.word	0x007a1200
 80090c8:	0800ead9 	.word	0x0800ead9
 80090cc:	003d0900 	.word	0x003d0900

080090d0 <HAL_RCC_ClockConfig>:
{
 80090d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090d4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80090d6:	4604      	mov	r4, r0
 80090d8:	b910      	cbnz	r0, 80090e0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80090da:	2001      	movs	r0, #1
}
 80090dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80090e0:	4a44      	ldr	r2, [pc, #272]	@ (80091f4 <HAL_RCC_ClockConfig+0x124>)
 80090e2:	6813      	ldr	r3, [r2, #0]
 80090e4:	f003 0307 	and.w	r3, r3, #7
 80090e8:	428b      	cmp	r3, r1
 80090ea:	d328      	bcc.n	800913e <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090ec:	6821      	ldr	r1, [r4, #0]
 80090ee:	078e      	lsls	r6, r1, #30
 80090f0:	d430      	bmi.n	8009154 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090f2:	07ca      	lsls	r2, r1, #31
 80090f4:	d443      	bmi.n	800917e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80090f6:	4a3f      	ldr	r2, [pc, #252]	@ (80091f4 <HAL_RCC_ClockConfig+0x124>)
 80090f8:	6813      	ldr	r3, [r2, #0]
 80090fa:	f003 0307 	and.w	r3, r3, #7
 80090fe:	42ab      	cmp	r3, r5
 8009100:	d865      	bhi.n	80091ce <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009102:	6822      	ldr	r2, [r4, #0]
 8009104:	4d3c      	ldr	r5, [pc, #240]	@ (80091f8 <HAL_RCC_ClockConfig+0x128>)
 8009106:	f012 0f04 	tst.w	r2, #4
 800910a:	d16c      	bne.n	80091e6 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800910c:	0713      	lsls	r3, r2, #28
 800910e:	d506      	bpl.n	800911e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009110:	686b      	ldr	r3, [r5, #4]
 8009112:	6922      	ldr	r2, [r4, #16]
 8009114:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8009118:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800911c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800911e:	f7ff ffb1 	bl	8009084 <HAL_RCC_GetSysClockFreq>
 8009122:	686b      	ldr	r3, [r5, #4]
 8009124:	4a35      	ldr	r2, [pc, #212]	@ (80091fc <HAL_RCC_ClockConfig+0x12c>)
 8009126:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800912a:	5cd3      	ldrb	r3, [r2, r3]
 800912c:	40d8      	lsrs	r0, r3
 800912e:	4b34      	ldr	r3, [pc, #208]	@ (8009200 <HAL_RCC_ClockConfig+0x130>)
 8009130:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8009132:	4b34      	ldr	r3, [pc, #208]	@ (8009204 <HAL_RCC_ClockConfig+0x134>)
 8009134:	6818      	ldr	r0, [r3, #0]
 8009136:	f7fe fba9 	bl	800788c <HAL_InitTick>
  return HAL_OK;
 800913a:	2000      	movs	r0, #0
 800913c:	e7ce      	b.n	80090dc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800913e:	6813      	ldr	r3, [r2, #0]
 8009140:	f023 0307 	bic.w	r3, r3, #7
 8009144:	430b      	orrs	r3, r1
 8009146:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009148:	6813      	ldr	r3, [r2, #0]
 800914a:	f003 0307 	and.w	r3, r3, #7
 800914e:	428b      	cmp	r3, r1
 8009150:	d1c3      	bne.n	80090da <HAL_RCC_ClockConfig+0xa>
 8009152:	e7cb      	b.n	80090ec <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009154:	4b28      	ldr	r3, [pc, #160]	@ (80091f8 <HAL_RCC_ClockConfig+0x128>)
 8009156:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800915a:	bf1e      	ittt	ne
 800915c:	685a      	ldrne	r2, [r3, #4]
 800915e:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8009162:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009164:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009166:	bf42      	ittt	mi
 8009168:	685a      	ldrmi	r2, [r3, #4]
 800916a:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 800916e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009170:	685a      	ldr	r2, [r3, #4]
 8009172:	68a0      	ldr	r0, [r4, #8]
 8009174:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8009178:	4302      	orrs	r2, r0
 800917a:	605a      	str	r2, [r3, #4]
 800917c:	e7b9      	b.n	80090f2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800917e:	6862      	ldr	r2, [r4, #4]
 8009180:	4e1d      	ldr	r6, [pc, #116]	@ (80091f8 <HAL_RCC_ClockConfig+0x128>)
 8009182:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009184:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009186:	d11a      	bne.n	80091be <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009188:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800918c:	d0a5      	beq.n	80090da <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800918e:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009190:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009194:	f023 0303 	bic.w	r3, r3, #3
 8009198:	4313      	orrs	r3, r2
 800919a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800919c:	f7fe fbb8 	bl	8007910 <HAL_GetTick>
 80091a0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091a2:	6873      	ldr	r3, [r6, #4]
 80091a4:	6862      	ldr	r2, [r4, #4]
 80091a6:	f003 030c 	and.w	r3, r3, #12
 80091aa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80091ae:	d0a2      	beq.n	80090f6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091b0:	f7fe fbae 	bl	8007910 <HAL_GetTick>
 80091b4:	1bc0      	subs	r0, r0, r7
 80091b6:	4540      	cmp	r0, r8
 80091b8:	d9f3      	bls.n	80091a2 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80091ba:	2003      	movs	r0, #3
 80091bc:	e78e      	b.n	80090dc <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80091be:	2a02      	cmp	r2, #2
 80091c0:	d102      	bne.n	80091c8 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091c2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80091c6:	e7e1      	b.n	800918c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091c8:	f013 0f02 	tst.w	r3, #2
 80091cc:	e7de      	b.n	800918c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091ce:	6813      	ldr	r3, [r2, #0]
 80091d0:	f023 0307 	bic.w	r3, r3, #7
 80091d4:	432b      	orrs	r3, r5
 80091d6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80091d8:	6813      	ldr	r3, [r2, #0]
 80091da:	f003 0307 	and.w	r3, r3, #7
 80091de:	42ab      	cmp	r3, r5
 80091e0:	f47f af7b 	bne.w	80090da <HAL_RCC_ClockConfig+0xa>
 80091e4:	e78d      	b.n	8009102 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80091e6:	686b      	ldr	r3, [r5, #4]
 80091e8:	68e1      	ldr	r1, [r4, #12]
 80091ea:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80091ee:	430b      	orrs	r3, r1
 80091f0:	606b      	str	r3, [r5, #4]
 80091f2:	e78b      	b.n	800910c <HAL_RCC_ClockConfig+0x3c>
 80091f4:	40022000 	.word	0x40022000
 80091f8:	40021000 	.word	0x40021000
 80091fc:	0800e970 	.word	0x0800e970
 8009200:	20000000 	.word	0x20000000
 8009204:	20000014 	.word	0x20000014

08009208 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009208:	4b04      	ldr	r3, [pc, #16]	@ (800921c <HAL_RCC_GetPCLK1Freq+0x14>)
 800920a:	4a05      	ldr	r2, [pc, #20]	@ (8009220 <HAL_RCC_GetPCLK1Freq+0x18>)
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009212:	5cd3      	ldrb	r3, [r2, r3]
 8009214:	4a03      	ldr	r2, [pc, #12]	@ (8009224 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009216:	6810      	ldr	r0, [r2, #0]
}
 8009218:	40d8      	lsrs	r0, r3
 800921a:	4770      	bx	lr
 800921c:	40021000 	.word	0x40021000
 8009220:	0800e968 	.word	0x0800e968
 8009224:	20000000 	.word	0x20000000

08009228 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009228:	4b04      	ldr	r3, [pc, #16]	@ (800923c <HAL_RCC_GetPCLK2Freq+0x14>)
 800922a:	4a05      	ldr	r2, [pc, #20]	@ (8009240 <HAL_RCC_GetPCLK2Freq+0x18>)
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8009232:	5cd3      	ldrb	r3, [r2, r3]
 8009234:	4a03      	ldr	r2, [pc, #12]	@ (8009244 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009236:	6810      	ldr	r0, [r2, #0]
}
 8009238:	40d8      	lsrs	r0, r3
 800923a:	4770      	bx	lr
 800923c:	40021000 	.word	0x40021000
 8009240:	0800e968 	.word	0x0800e968
 8009244:	20000000 	.word	0x20000000

08009248 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009248:	6803      	ldr	r3, [r0, #0]
{
 800924a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800924e:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009250:	07d8      	lsls	r0, r3, #31
 8009252:	d521      	bpl.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009254:	4c36      	ldr	r4, [pc, #216]	@ (8009330 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009256:	69e3      	ldr	r3, [r4, #28]
 8009258:	00d9      	lsls	r1, r3, #3
 800925a:	d42b      	bmi.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 800925c:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800925e:	69e3      	ldr	r3, [r4, #28]
 8009260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009264:	61e3      	str	r3, [r4, #28]
 8009266:	69e3      	ldr	r3, [r4, #28]
 8009268:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800926c:	9301      	str	r3, [sp, #4]
 800926e:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009270:	4f30      	ldr	r7, [pc, #192]	@ (8009334 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	05da      	lsls	r2, r3, #23
 8009276:	d51f      	bpl.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009278:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800927a:	686a      	ldr	r2, [r5, #4]
 800927c:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8009280:	d12e      	bne.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009282:	6a23      	ldr	r3, [r4, #32]
 8009284:	686a      	ldr	r2, [r5, #4]
 8009286:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800928a:	4313      	orrs	r3, r2
 800928c:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800928e:	b11e      	cbz	r6, 8009298 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009290:	69e3      	ldr	r3, [r4, #28]
 8009292:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009296:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009298:	682a      	ldr	r2, [r5, #0]
 800929a:	0791      	lsls	r1, r2, #30
 800929c:	d506      	bpl.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800929e:	4924      	ldr	r1, [pc, #144]	@ (8009330 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80092a0:	68a8      	ldr	r0, [r5, #8]
 80092a2:	684b      	ldr	r3, [r1, #4]
 80092a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80092a8:	4303      	orrs	r3, r0
 80092aa:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80092ac:	06d3      	lsls	r3, r2, #27
 80092ae:	d436      	bmi.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80092b0:	2000      	movs	r0, #0
 80092b2:	e012      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 80092b4:	2600      	movs	r6, #0
 80092b6:	e7db      	b.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092be:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80092c0:	f7fe fb26 	bl	8007910 <HAL_GetTick>
 80092c4:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	05db      	lsls	r3, r3, #23
 80092ca:	d4d5      	bmi.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092cc:	f7fe fb20 	bl	8007910 <HAL_GetTick>
 80092d0:	eba0 0008 	sub.w	r0, r0, r8
 80092d4:	2864      	cmp	r0, #100	@ 0x64
 80092d6:	d9f6      	bls.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 80092d8:	2003      	movs	r0, #3
}
 80092da:	b002      	add	sp, #8
 80092dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80092e0:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d0cc      	beq.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 80092e8:	2001      	movs	r0, #1
 80092ea:	4a13      	ldr	r2, [pc, #76]	@ (8009338 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80092ec:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80092ee:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80092f2:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80092f4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80092f8:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 80092fa:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 80092fe:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009300:	d5bf      	bpl.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8009302:	f7fe fb05 	bl	8007910 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009306:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800930a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800930c:	6a23      	ldr	r3, [r4, #32]
 800930e:	0798      	lsls	r0, r3, #30
 8009310:	d4b7      	bmi.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009312:	f7fe fafd 	bl	8007910 <HAL_GetTick>
 8009316:	1bc0      	subs	r0, r0, r7
 8009318:	4540      	cmp	r0, r8
 800931a:	d9f7      	bls.n	800930c <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800931c:	e7dc      	b.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800931e:	4a04      	ldr	r2, [pc, #16]	@ (8009330 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009320:	68e9      	ldr	r1, [r5, #12]
 8009322:	6853      	ldr	r3, [r2, #4]
 8009324:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8009328:	430b      	orrs	r3, r1
 800932a:	6053      	str	r3, [r2, #4]
 800932c:	e7c0      	b.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800932e:	bf00      	nop
 8009330:	40021000 	.word	0x40021000
 8009334:	40007000 	.word	0x40007000
 8009338:	42420000 	.word	0x42420000

0800933c <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800933c:	2802      	cmp	r0, #2
{
 800933e:	b508      	push	{r3, lr}
  switch (PeriphClk)
 8009340:	d044      	beq.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8009342:	2810      	cmp	r0, #16
 8009344:	d003      	beq.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8009346:	2801      	cmp	r0, #1
 8009348:	d022      	beq.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t temp_reg = 0U, frequency = 0U;
 800934a:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 800934c:	e034      	b.n	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      temp_reg = RCC->CFGR;
 800934e:	4b25      	ldr	r3, [pc, #148]	@ (80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8009350:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8009352:	6818      	ldr	r0, [r3, #0]
 8009354:	f010 7080 	ands.w	r0, r0, #16777216	@ 0x1000000
 8009358:	d02e      	beq.n	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800935a:	f3c2 4183 	ubfx	r1, r2, #18, #4
 800935e:	4822      	ldr	r0, [pc, #136]	@ (80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009360:	03d2      	lsls	r2, r2, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009362:	bf48      	it	mi
 8009364:	685a      	ldrmi	r2, [r3, #4]
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009366:	5c40      	ldrb	r0, [r0, r1]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009368:	bf41      	itttt	mi
 800936a:	4920      	ldrmi	r1, [pc, #128]	@ (80093ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800936c:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8009370:	5c89      	ldrbmi	r1, [r1, r2]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8009372:	4a1f      	ldrmi	r2, [pc, #124]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8009374:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8009376:	bf4c      	ite	mi
 8009378:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800937c:	4a1d      	ldrpl	r2, [pc, #116]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800937e:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009380:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8009384:	d418      	bmi.n	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
          frequency = (pllclk * 2) / 3;
 8009386:	2303      	movs	r3, #3
 8009388:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800938a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800938e:	e013      	b.n	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8009390:	f240 3102 	movw	r1, #770	@ 0x302
      temp_reg = RCC->BDCR;
 8009394:	4a13      	ldr	r2, [pc, #76]	@ (80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8009396:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8009398:	4019      	ands	r1, r3
 800939a:	f5b1 7f81 	cmp.w	r1, #258	@ 0x102
 800939e:	d01e      	beq.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80093a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093a8:	d107      	bne.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        frequency = LSI_VALUE;
 80093aa:	f649 4340 	movw	r3, #40000	@ 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80093ae:	6a50      	ldr	r0, [r2, #36]	@ 0x24
        frequency = LSI_VALUE;
 80093b0:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 80093b4:	bf18      	it	ne
 80093b6:	4618      	movne	r0, r3
}
 80093b8:	bd08      	pop	{r3, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80093ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80093be:	d1c4      	bne.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0xe>
 80093c0:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 80093c2:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80093c6:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 80093ca:	e7f3      	b.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80093cc:	f7ff ff2c 	bl	8009228 <HAL_RCC_GetPCLK2Freq>
 80093d0:	4b04      	ldr	r3, [pc, #16]	@ (80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80093d8:	3301      	adds	r3, #1
 80093da:	005b      	lsls	r3, r3, #1
 80093dc:	e7d5      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
        frequency = LSE_VALUE;
 80093de:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80093e2:	e7e9      	b.n	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80093e4:	40021000 	.word	0x40021000
 80093e8:	0800eaed 	.word	0x0800eaed
 80093ec:	0800eaeb 	.word	0x0800eaeb
 80093f0:	007a1200 	.word	0x007a1200
 80093f4:	003d0900 	.word	0x003d0900

080093f8 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80093f8:	b538      	push	{r3, r4, r5, lr}
 80093fa:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  tickstart = HAL_GetTick();
 80093fc:	f7fe fa88 	bl	8007910 <HAL_GetTick>
 8009400:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009402:	6823      	ldr	r3, [r4, #0]
 8009404:	685a      	ldr	r2, [r3, #4]
 8009406:	0692      	lsls	r2, r2, #26
 8009408:	d505      	bpl.n	8009416 <RTC_EnterInitMode+0x1e>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);


  return HAL_OK;
 800940a:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800940c:	685a      	ldr	r2, [r3, #4]
 800940e:	f042 0210 	orr.w	r2, r2, #16
 8009412:	605a      	str	r2, [r3, #4]
}
 8009414:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8009416:	f7fe fa7b 	bl	8007910 <HAL_GetTick>
 800941a:	1b40      	subs	r0, r0, r5
 800941c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009420:	d9ef      	bls.n	8009402 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8009422:	2003      	movs	r0, #3
 8009424:	e7f6      	b.n	8009414 <RTC_EnterInitMode+0x1c>

08009426 <RTC_ExitInitMode>:
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009426:	6802      	ldr	r2, [r0, #0]
{
 8009428:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800942a:	6853      	ldr	r3, [r2, #4]
{
 800942c:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800942e:	f023 0310 	bic.w	r3, r3, #16
 8009432:	6053      	str	r3, [r2, #4]

  tickstart = HAL_GetTick();
 8009434:	f7fe fa6c 	bl	8007910 <HAL_GetTick>
 8009438:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	069b      	lsls	r3, r3, #26
 8009440:	d501      	bpl.n	8009446 <RTC_ExitInitMode+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8009442:	2000      	movs	r0, #0
}
 8009444:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8009446:	f7fe fa63 	bl	8007910 <HAL_GetTick>
 800944a:	1b40      	subs	r0, r0, r5
 800944c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009450:	d9f3      	bls.n	800943a <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8009452:	2003      	movs	r0, #3
 8009454:	e7f6      	b.n	8009444 <RTC_ExitInitMode+0x1e>

08009456 <HAL_RTC_WaitForSynchro>:
{
 8009456:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 8009458:	4604      	mov	r4, r0
 800945a:	b1a8      	cbz	r0, 8009488 <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800945c:	6802      	ldr	r2, [r0, #0]
 800945e:	6853      	ldr	r3, [r2, #4]
 8009460:	f023 0308 	bic.w	r3, r3, #8
 8009464:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8009466:	f7fe fa53 	bl	8007910 <HAL_GetTick>
 800946a:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800946c:	6823      	ldr	r3, [r4, #0]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	071b      	lsls	r3, r3, #28
 8009472:	d501      	bpl.n	8009478 <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8009474:	2000      	movs	r0, #0
}
 8009476:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8009478:	f7fe fa4a 	bl	8007910 <HAL_GetTick>
 800947c:	1b40      	subs	r0, r0, r5
 800947e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009482:	d9f3      	bls.n	800946c <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8009484:	2003      	movs	r0, #3
 8009486:	e7f6      	b.n	8009476 <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 8009488:	2001      	movs	r0, #1
 800948a:	e7f4      	b.n	8009476 <HAL_RTC_WaitForSynchro+0x20>

0800948c <HAL_RTC_Init>:
{
 800948c:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 800948e:	4604      	mov	r4, r0
 8009490:	b170      	cbz	r0, 80094b0 <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009492:	7c43      	ldrb	r3, [r0, #17]
 8009494:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8009498:	b913      	cbnz	r3, 80094a0 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 800949a:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 800949c:	f7fd faa2 	bl	80069e4 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80094a0:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80094a2:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 80094a4:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80094a6:	f7ff ffd6 	bl	8009456 <HAL_RTC_WaitForSynchro>
 80094aa:	b118      	cbz	r0, 80094b4 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_ERROR;
 80094ac:	2304      	movs	r3, #4
 80094ae:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 80094b0:	2001      	movs	r0, #1
}
 80094b2:	bd10      	pop	{r4, pc}
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80094b4:	4620      	mov	r0, r4
 80094b6:	f7ff ff9f 	bl	80093f8 <RTC_EnterInitMode>
 80094ba:	2800      	cmp	r0, #0
 80094bc:	d1f6      	bne.n	80094ac <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80094be:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80094c0:	68a1      	ldr	r1, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80094c2:	6853      	ldr	r3, [r2, #4]
 80094c4:	f023 0307 	bic.w	r3, r3, #7
 80094c8:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80094ca:	4a12      	ldr	r2, [pc, #72]	@ (8009514 <HAL_RTC_Init+0x88>)
 80094cc:	b119      	cbz	r1, 80094d6 <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80094ce:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80094d0:	f023 0301 	bic.w	r3, r3, #1
 80094d4:	6313      	str	r3, [r2, #48]	@ 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80094d6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80094d8:	f423 7360 	bic.w	r3, r3, #896	@ 0x380
 80094dc:	430b      	orrs	r3, r1
 80094de:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80094e0:	6860      	ldr	r0, [r4, #4]
 80094e2:	1c43      	adds	r3, r0, #1
 80094e4:	d105      	bne.n	80094f2 <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80094e6:	2001      	movs	r0, #1
 80094e8:	f7ff ff28 	bl	800933c <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 80094ec:	2800      	cmp	r0, #0
 80094ee:	d0dd      	beq.n	80094ac <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 80094f0:	3801      	subs	r0, #1
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80094f2:	6823      	ldr	r3, [r4, #0]
 80094f4:	f3c0 4203 	ubfx	r2, r0, #16, #4
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80094f8:	b280      	uxth	r0, r0
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80094fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80094fc:	60d8      	str	r0, [r3, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80094fe:	4620      	mov	r0, r4
 8009500:	f7ff ff91 	bl	8009426 <RTC_ExitInitMode>
 8009504:	2800      	cmp	r0, #0
 8009506:	d1d1      	bne.n	80094ac <HAL_RTC_Init+0x20>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8009508:	2301      	movs	r3, #1
 800950a:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800950c:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 800950e:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 8009510:	e7cf      	b.n	80094b2 <HAL_RTC_Init+0x26>
 8009512:	bf00      	nop
 8009514:	40006c00 	.word	0x40006c00

08009518 <HAL_RTCEx_BKUPWrite>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
  tmp += (BackupRegister * 4U);
 8009518:	0089      	lsls	r1, r1, #2
 800951a:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800951e:	f501 41d8 	add.w	r1, r1, #27648	@ 0x6c00

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 8009522:	b292      	uxth	r2, r2
 8009524:	600a      	str	r2, [r1, #0]
}
 8009526:	4770      	bx	lr

08009528 <HAL_RTCEx_BKUPRead>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
  backupregister += (BackupRegister * 4U);
 8009528:	0089      	lsls	r1, r1, #2
 800952a:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800952e:	f501 41d8 	add.w	r1, r1, #27648	@ 0x6c00

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 8009532:	6808      	ldr	r0, [r1, #0]

  /* Read the specified register */
  return pvalue;
}
 8009534:	b280      	uxth	r0, r0
 8009536:	4770      	bx	lr

08009538 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009538:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953a:	f102 030c 	add.w	r3, r2, #12
 800953e:	e853 3f00 	ldrex	r3, [r3]
 8009542:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009546:	320c      	adds	r2, #12
 8009548:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800954c:	6802      	ldr	r2, [r0, #0]
 800954e:	2900      	cmp	r1, #0
 8009550:	d1f2      	bne.n	8009538 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009552:	f102 0314 	add.w	r3, r2, #20
 8009556:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800955a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955e:	f102 0c14 	add.w	ip, r2, #20
 8009562:	e84c 3100 	strex	r1, r3, [ip]
 8009566:	2900      	cmp	r1, #0
 8009568:	d1f3      	bne.n	8009552 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800956a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800956c:	2b01      	cmp	r3, #1
 800956e:	d10b      	bne.n	8009588 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009570:	f102 030c 	add.w	r3, r2, #12
 8009574:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009578:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957c:	f102 0c0c 	add.w	ip, r2, #12
 8009580:	e84c 3100 	strex	r1, r3, [ip]
 8009584:	2900      	cmp	r1, #0
 8009586:	d1f3      	bne.n	8009570 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009588:	2320      	movs	r3, #32
 800958a:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800958e:	2300      	movs	r3, #0
 8009590:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8009592:	4770      	bx	lr

08009594 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009594:	b510      	push	{r4, lr}
 8009596:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009598:	6803      	ldr	r3, [r0, #0]
 800959a:	68c1      	ldr	r1, [r0, #12]
 800959c:	691a      	ldr	r2, [r3, #16]
 800959e:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80095a2:	430a      	orrs	r2, r1
 80095a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80095a6:	6882      	ldr	r2, [r0, #8]
 80095a8:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80095aa:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80095ac:	4302      	orrs	r2, r0
 80095ae:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80095b0:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 80095b4:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80095b8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80095ba:	430a      	orrs	r2, r1
 80095bc:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80095be:	695a      	ldr	r2, [r3, #20]
 80095c0:	69a1      	ldr	r1, [r4, #24]
 80095c2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80095c6:	430a      	orrs	r2, r1
 80095c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80095ca:	4a0e      	ldr	r2, [pc, #56]	@ (8009604 <UART_SetConfig+0x70>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d115      	bne.n	80095fc <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80095d0:	f7ff fe2a 	bl	8009228 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80095d4:	2319      	movs	r3, #25
 80095d6:	4343      	muls	r3, r0
 80095d8:	6862      	ldr	r2, [r4, #4]
 80095da:	6820      	ldr	r0, [r4, #0]
 80095dc:	0092      	lsls	r2, r2, #2
 80095de:	fbb3 f3f2 	udiv	r3, r3, r2
 80095e2:	2264      	movs	r2, #100	@ 0x64
 80095e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80095e8:	fb02 3311 	mls	r3, r2, r1, r3
 80095ec:	011b      	lsls	r3, r3, #4
 80095ee:	3332      	adds	r3, #50	@ 0x32
 80095f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80095f4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80095f8:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80095fa:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80095fc:	f7ff fe04 	bl	8009208 <HAL_RCC_GetPCLK1Freq>
 8009600:	e7e8      	b.n	80095d4 <UART_SetConfig+0x40>
 8009602:	bf00      	nop
 8009604:	40013800 	.word	0x40013800

08009608 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8009608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800960a:	4605      	mov	r5, r0
 800960c:	460c      	mov	r4, r1
 800960e:	4617      	mov	r7, r2
 8009610:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009612:	682a      	ldr	r2, [r5, #0]
 8009614:	6813      	ldr	r3, [r2, #0]
 8009616:	ea34 0303 	bics.w	r3, r4, r3
 800961a:	d101      	bne.n	8009620 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 800961c:	2000      	movs	r0, #0
 800961e:	e021      	b.n	8009664 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8009620:	1c70      	adds	r0, r6, #1
 8009622:	d0f7      	beq.n	8009614 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009624:	f7fe f974 	bl	8007910 <HAL_GetTick>
 8009628:	1bc0      	subs	r0, r0, r7
 800962a:	4286      	cmp	r6, r0
 800962c:	d31c      	bcc.n	8009668 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
 800962e:	b1de      	cbz	r6, 8009668 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009630:	682b      	ldr	r3, [r5, #0]
 8009632:	68da      	ldr	r2, [r3, #12]
 8009634:	0751      	lsls	r1, r2, #29
 8009636:	d5ec      	bpl.n	8009612 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8009638:	2c80      	cmp	r4, #128	@ 0x80
 800963a:	d0ea      	beq.n	8009612 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 800963c:	2c40      	cmp	r4, #64	@ 0x40
 800963e:	d0e8      	beq.n	8009612 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	0712      	lsls	r2, r2, #28
 8009644:	d5e5      	bpl.n	8009612 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009646:	2400      	movs	r4, #0
 8009648:	9401      	str	r4, [sp, #4]
 800964a:	681a      	ldr	r2, [r3, #0]
          UART_EndRxTransfer(huart);
 800964c:	4628      	mov	r0, r5
          __HAL_UART_CLEAR_OREFLAG(huart);
 800964e:	9201      	str	r2, [sp, #4]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	9301      	str	r3, [sp, #4]
 8009654:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8009656:	f7ff ff6f 	bl	8009538 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800965a:	2308      	movs	r3, #8
          return HAL_ERROR;
 800965c:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800965e:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8009660:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
}
 8009664:	b003      	add	sp, #12
 8009666:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8009668:	2003      	movs	r0, #3
 800966a:	e7fb      	b.n	8009664 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>

0800966c <HAL_UART_Init>:
{
 800966c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800966e:	4604      	mov	r4, r0
 8009670:	b348      	cbz	r0, 80096c6 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8009672:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8009676:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800967a:	b91b      	cbnz	r3, 8009684 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800967c:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8009680:	f7fd fa8a 	bl	8006b98 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8009684:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8009686:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009688:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800968c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800968e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8009690:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009694:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8009696:	f7ff ff7d 	bl	8009594 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800969a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800969c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800969e:	691a      	ldr	r2, [r3, #16]
 80096a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80096a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096a6:	695a      	ldr	r2, [r3, #20]
 80096a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80096ac:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80096ae:	68da      	ldr	r2, [r3, #12]
 80096b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80096b4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80096b6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096b8:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80096ba:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80096be:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096c2:	6360      	str	r0, [r4, #52]	@ 0x34
}
 80096c4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80096c6:	2001      	movs	r0, #1
 80096c8:	e7fc      	b.n	80096c4 <HAL_UART_Init+0x58>

080096ca <HAL_UART_DeInit>:
{
 80096ca:	b510      	push	{r4, lr}
  if (huart == NULL)
 80096cc:	4604      	mov	r4, r0
 80096ce:	b1a0      	cbz	r0, 80096fa <HAL_UART_DeInit+0x30>
  huart->gState = HAL_UART_STATE_BUSY;
 80096d0:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 80096d2:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80096d4:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80096d8:	68d3      	ldr	r3, [r2, #12]
 80096da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80096de:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 80096e0:	f7fd fab6 	bl	8006c50 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096e4:	2000      	movs	r0, #0
 80096e6:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(huart);
 80096e8:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80096ec:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 80096f0:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096f4:	6320      	str	r0, [r4, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096f6:	6360      	str	r0, [r4, #52]	@ 0x34
}
 80096f8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80096fa:	2001      	movs	r0, #1
 80096fc:	e7fc      	b.n	80096f8 <HAL_UART_DeInit+0x2e>

080096fe <HAL_UART_Transmit>:
{
 80096fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009702:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8009704:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8009708:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800970a:	2b20      	cmp	r3, #32
{
 800970c:	460e      	mov	r6, r1
 800970e:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8009710:	d13f      	bne.n	8009792 <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 8009712:	2900      	cmp	r1, #0
 8009714:	d03f      	beq.n	8009796 <HAL_UART_Transmit+0x98>
 8009716:	2a00      	cmp	r2, #0
 8009718:	d03d      	beq.n	8009796 <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800971a:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800971c:	2500      	movs	r5, #0
 800971e:	6445      	str	r5, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009720:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8009724:	f7fe f8f4 	bl	8007910 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009728:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800972a:	4681      	mov	r9, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800972c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferSize = Size;
 8009730:	84a7      	strh	r7, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009732:	84e7      	strh	r7, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009734:	d103      	bne.n	800973e <HAL_UART_Transmit+0x40>
 8009736:	6923      	ldr	r3, [r4, #16]
 8009738:	b90b      	cbnz	r3, 800973e <HAL_UART_Transmit+0x40>
 800973a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800973c:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800973e:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8009740:	b29b      	uxth	r3, r3
 8009742:	b953      	cbnz	r3, 800975a <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009744:	4643      	mov	r3, r8
 8009746:	464a      	mov	r2, r9
 8009748:	2140      	movs	r1, #64	@ 0x40
 800974a:	4620      	mov	r0, r4
 800974c:	f7ff ff5c 	bl	8009608 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8009750:	2320      	movs	r3, #32
 8009752:	b950      	cbnz	r0, 800976a <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 8009754:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8009758:	e00a      	b.n	8009770 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800975a:	4643      	mov	r3, r8
 800975c:	464a      	mov	r2, r9
 800975e:	2180      	movs	r1, #128	@ 0x80
 8009760:	4620      	mov	r0, r4
 8009762:	f7ff ff51 	bl	8009608 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8009766:	b128      	cbz	r0, 8009774 <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 8009768:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800976a:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 800976c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 8009770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009774:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8009776:	b94e      	cbnz	r6, 800978c <HAL_UART_Transmit+0x8e>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009778:	f835 3b02 	ldrh.w	r3, [r5], #2
 800977c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009780:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8009782:	8ce1      	ldrh	r1, [r4, #38]	@ 0x26
 8009784:	3901      	subs	r1, #1
 8009786:	b289      	uxth	r1, r1
 8009788:	84e1      	strh	r1, [r4, #38]	@ 0x26
 800978a:	e7d8      	b.n	800973e <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800978c:	f816 3b01 	ldrb.w	r3, [r6], #1
 8009790:	e7f6      	b.n	8009780 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8009792:	2002      	movs	r0, #2
 8009794:	e7ec      	b.n	8009770 <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 8009796:	2001      	movs	r0, #1
 8009798:	e7ea      	b.n	8009770 <HAL_UART_Transmit+0x72>

0800979a <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 800979a:	4770      	bx	lr

0800979c <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 800979c:	4770      	bx	lr

0800979e <UART_DMAError>:
{
 800979e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097a0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80097a2:	6803      	ldr	r3, [r0, #0]
 80097a4:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80097a6:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 80097aa:	2921      	cmp	r1, #33	@ 0x21
 80097ac:	d112      	bne.n	80097d4 <UART_DMAError+0x36>
 80097ae:	0612      	lsls	r2, r2, #24
 80097b0:	d510      	bpl.n	80097d4 <UART_DMAError+0x36>
    huart->TxXferCount = 0x00U;
 80097b2:	2200      	movs	r2, #0
 80097b4:	84c2      	strh	r2, [r0, #38]	@ 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b6:	f103 020c 	add.w	r2, r3, #12
 80097ba:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80097be:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c2:	f103 0c0c 	add.w	ip, r3, #12
 80097c6:	e84c 2100 	strex	r1, r2, [ip]
 80097ca:	2900      	cmp	r1, #0
 80097cc:	d1f3      	bne.n	80097b6 <UART_DMAError+0x18>
  huart->gState = HAL_UART_STATE_READY;
 80097ce:	2220      	movs	r2, #32
 80097d0:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80097d4:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80097d6:	f890 2042 	ldrb.w	r2, [r0, #66]	@ 0x42
 80097da:	2a22      	cmp	r2, #34	@ 0x22
 80097dc:	d105      	bne.n	80097ea <UART_DMAError+0x4c>
 80097de:	065b      	lsls	r3, r3, #25
 80097e0:	d503      	bpl.n	80097ea <UART_DMAError+0x4c>
    huart->RxXferCount = 0x00U;
 80097e2:	2300      	movs	r3, #0
 80097e4:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80097e6:	f7ff fea7 	bl	8009538 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80097ea:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80097ec:	f043 0310 	orr.w	r3, r3, #16
 80097f0:	6443      	str	r3, [r0, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 80097f2:	f7fd f9ce 	bl	8006b92 <HAL_UART_ErrorCallback>
}
 80097f6:	bd08      	pop	{r3, pc}

080097f8 <UART_DMAAbortOnError>:
{
 80097f8:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80097fa:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097fc:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 80097fe:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009800:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 8009802:	f7fd f9c6 	bl	8006b92 <HAL_UART_ErrorCallback>
}
 8009806:	bd08      	pop	{r3, pc}

08009808 <HAL_UARTEx_RxEventCallback>:
}
 8009808:	4770      	bx	lr

0800980a <UART_DMARxHalfCplt>:
{
 800980a:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800980c:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800980e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009810:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009812:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009814:	2b01      	cmp	r3, #1
 8009816:	d104      	bne.n	8009822 <UART_DMARxHalfCplt+0x18>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009818:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800981a:	0849      	lsrs	r1, r1, #1
 800981c:	f7ff fff4 	bl	8009808 <HAL_UARTEx_RxEventCallback>
}
 8009820:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8009822:	f7ff ffbb 	bl	800979c <HAL_UART_RxHalfCpltCallback>
}
 8009826:	e7fb      	b.n	8009820 <UART_DMARxHalfCplt+0x16>

08009828 <UART_DMAReceiveCplt>:
{
 8009828:	b508      	push	{r3, lr}
 800982a:	4603      	mov	r3, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800982c:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800982e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f013 0320 	ands.w	r3, r3, #32
 8009836:	d137      	bne.n	80098a8 <UART_DMAReceiveCplt+0x80>
    huart->RxXferCount = 0U;
 8009838:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800983a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983c:	f102 030c 	add.w	r3, r2, #12
 8009840:	e853 3f00 	ldrex	r3, [r3]
 8009844:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009848:	320c      	adds	r2, #12
 800984a:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800984e:	6803      	ldr	r3, [r0, #0]
 8009850:	2900      	cmp	r1, #0
 8009852:	d1f2      	bne.n	800983a <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009854:	f103 0214 	add.w	r2, r3, #20
 8009858:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800985c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009860:	f103 0c14 	add.w	ip, r3, #20
 8009864:	e84c 2100 	strex	r1, r2, [ip]
 8009868:	2900      	cmp	r1, #0
 800986a:	d1f3      	bne.n	8009854 <UART_DMAReceiveCplt+0x2c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800986c:	f103 0214 	add.w	r2, r3, #20
 8009870:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009874:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009878:	f103 0c14 	add.w	ip, r3, #20
 800987c:	e84c 2100 	strex	r1, r2, [ip]
 8009880:	2900      	cmp	r1, #0
 8009882:	d1f3      	bne.n	800986c <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 8009884:	2220      	movs	r2, #32
 8009886:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800988a:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 800988c:	2a01      	cmp	r2, #1
 800988e:	d10b      	bne.n	80098a8 <UART_DMAReceiveCplt+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009890:	f103 020c 	add.w	r2, r3, #12
 8009894:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009898:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989c:	f103 0c0c 	add.w	ip, r3, #12
 80098a0:	e84c 2100 	strex	r1, r2, [ip]
 80098a4:	2900      	cmp	r1, #0
 80098a6:	d1f3      	bne.n	8009890 <UART_DMAReceiveCplt+0x68>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098a8:	2300      	movs	r3, #0
 80098aa:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098ac:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d103      	bne.n	80098ba <UART_DMAReceiveCplt+0x92>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098b2:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80098b4:	f7ff ffa8 	bl	8009808 <HAL_UARTEx_RxEventCallback>
}
 80098b8:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 80098ba:	f7fd f96b 	bl	8006b94 <HAL_UART_RxCpltCallback>
}
 80098be:	e7fb      	b.n	80098b8 <UART_DMAReceiveCplt+0x90>

080098c0 <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098c0:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80098c4:	b507      	push	{r0, r1, r2, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098c6:	2b22      	cmp	r3, #34	@ 0x22
 80098c8:	d142      	bne.n	8009950 <UART_Receive_IT.isra.0+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098ca:	6881      	ldr	r1, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80098cc:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098ce:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80098d2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098d4:	d13f      	bne.n	8009956 <UART_Receive_IT.isra.0+0x96>
 80098d6:	6901      	ldr	r1, [r0, #16]
 80098d8:	2900      	cmp	r1, #0
 80098da:	d13f      	bne.n	800995c <UART_Receive_IT.isra.0+0x9c>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80098dc:	6852      	ldr	r2, [r2, #4]
 80098de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098e2:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 80098e6:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 80098e8:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 80098ea:	3b01      	subs	r3, #1
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d12d      	bne.n	8009950 <UART_Receive_IT.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80098f4:	6802      	ldr	r2, [r0, #0]
 80098f6:	68d1      	ldr	r1, [r2, #12]
 80098f8:	f021 0120 	bic.w	r1, r1, #32
 80098fc:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80098fe:	68d1      	ldr	r1, [r2, #12]
 8009900:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8009904:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009906:	6951      	ldr	r1, [r2, #20]
 8009908:	f021 0101 	bic.w	r1, r1, #1
 800990c:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800990e:	2220      	movs	r2, #32
 8009910:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009914:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009916:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8009918:	2a01      	cmp	r2, #1
 800991a:	6802      	ldr	r2, [r0, #0]
 800991c:	d128      	bne.n	8009970 <UART_Receive_IT.isra.0+0xb0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800991e:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009920:	f102 030c 	add.w	r3, r2, #12
 8009924:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009928:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992c:	f102 0c0c 	add.w	ip, r2, #12
 8009930:	e84c 3100 	strex	r1, r3, [ip]
 8009934:	2900      	cmp	r1, #0
 8009936:	d1f3      	bne.n	8009920 <UART_Receive_IT.isra.0+0x60>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009938:	6813      	ldr	r3, [r2, #0]
 800993a:	06db      	lsls	r3, r3, #27
 800993c:	d505      	bpl.n	800994a <UART_Receive_IT.isra.0+0x8a>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800993e:	9101      	str	r1, [sp, #4]
 8009940:	6813      	ldr	r3, [r2, #0]
 8009942:	9301      	str	r3, [sp, #4]
 8009944:	6853      	ldr	r3, [r2, #4]
 8009946:	9301      	str	r3, [sp, #4]
 8009948:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800994a:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800994c:	f7ff ff5c 	bl	8009808 <HAL_UARTEx_RxEventCallback>
}
 8009950:	b003      	add	sp, #12
 8009952:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009956:	b939      	cbnz	r1, 8009968 <UART_Receive_IT.isra.0+0xa8>
 8009958:	6901      	ldr	r1, [r0, #16]
 800995a:	b929      	cbnz	r1, 8009968 <UART_Receive_IT.isra.0+0xa8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800995c:	6852      	ldr	r2, [r2, #4]
 800995e:	b2d2      	uxtb	r2, r2
 8009960:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8009962:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009964:	3301      	adds	r3, #1
 8009966:	e7be      	b.n	80098e6 <UART_Receive_IT.isra.0+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009968:	6852      	ldr	r2, [r2, #4]
 800996a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800996e:	e7f7      	b.n	8009960 <UART_Receive_IT.isra.0+0xa0>
        HAL_UART_RxCpltCallback(huart);
 8009970:	f7fd f910 	bl	8006b94 <HAL_UART_RxCpltCallback>
 8009974:	e7ec      	b.n	8009950 <UART_Receive_IT.isra.0+0x90>
	...

08009978 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009978:	6803      	ldr	r3, [r0, #0]
{
 800997a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800997c:	681a      	ldr	r2, [r3, #0]
{
 800997e:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8009980:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009982:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009984:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8009986:	d108      	bne.n	800999a <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009988:	0696      	lsls	r6, r2, #26
 800998a:	d568      	bpl.n	8009a5e <HAL_UART_IRQHandler+0xe6>
 800998c:	068d      	lsls	r5, r1, #26
 800998e:	d566      	bpl.n	8009a5e <HAL_UART_IRQHandler+0xe6>
}
 8009990:	b002      	add	sp, #8
 8009992:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8009996:	f7ff bf93 	b.w	80098c0 <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800999a:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800999e:	f401 7590 	and.w	r5, r1, #288	@ 0x120
 80099a2:	4305      	orrs	r5, r0
 80099a4:	d05b      	beq.n	8009a5e <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80099a6:	07d6      	lsls	r6, r2, #31
 80099a8:	d505      	bpl.n	80099b6 <HAL_UART_IRQHandler+0x3e>
 80099aa:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099ac:	bf42      	ittt	mi
 80099ae:	6c63      	ldrmi	r3, [r4, #68]	@ 0x44
 80099b0:	f043 0301 	orrmi.w	r3, r3, #1
 80099b4:	6463      	strmi	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80099b6:	0753      	lsls	r3, r2, #29
 80099b8:	d504      	bpl.n	80099c4 <HAL_UART_IRQHandler+0x4c>
 80099ba:	b118      	cbz	r0, 80099c4 <HAL_UART_IRQHandler+0x4c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099bc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80099be:	f043 0302 	orr.w	r3, r3, #2
 80099c2:	6463      	str	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80099c4:	0796      	lsls	r6, r2, #30
 80099c6:	d504      	bpl.n	80099d2 <HAL_UART_IRQHandler+0x5a>
 80099c8:	b118      	cbz	r0, 80099d2 <HAL_UART_IRQHandler+0x5a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099ca:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80099cc:	f043 0304 	orr.w	r3, r3, #4
 80099d0:	6463      	str	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80099d2:	0715      	lsls	r5, r2, #28
 80099d4:	d507      	bpl.n	80099e6 <HAL_UART_IRQHandler+0x6e>
 80099d6:	f001 0320 	and.w	r3, r1, #32
 80099da:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80099dc:	bf1e      	ittt	ne
 80099de:	6c63      	ldrne	r3, [r4, #68]	@ 0x44
 80099e0:	f043 0308 	orrne.w	r3, r3, #8
 80099e4:	6463      	strne	r3, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099e6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d032      	beq.n	8009a52 <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80099ec:	0692      	lsls	r2, r2, #26
 80099ee:	d504      	bpl.n	80099fa <HAL_UART_IRQHandler+0x82>
 80099f0:	068b      	lsls	r3, r1, #26
 80099f2:	d502      	bpl.n	80099fa <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 80099f4:	4620      	mov	r0, r4
 80099f6:	f7ff ff63 	bl	80098c0 <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80099fa:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 80099fc:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80099fe:	6973      	ldr	r3, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009a00:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009a06:	f002 0208 	and.w	r2, r2, #8
 8009a0a:	ea53 0502 	orrs.w	r5, r3, r2
 8009a0e:	d022      	beq.n	8009a56 <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 8009a10:	f7ff fd92 	bl	8009538 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a14:	6973      	ldr	r3, [r6, #20]
 8009a16:	065e      	lsls	r6, r3, #25
 8009a18:	d518      	bpl.n	8009a4c <HAL_UART_IRQHandler+0xd4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a1a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1c:	f102 0314 	add.w	r3, r2, #20
 8009a20:	e853 3f00 	ldrex	r3, [r3]
 8009a24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a28:	3214      	adds	r2, #20
 8009a2a:	e842 3100 	strex	r1, r3, [r2]
 8009a2e:	2900      	cmp	r1, #0
 8009a30:	d1f3      	bne.n	8009a1a <HAL_UART_IRQHandler+0xa2>
          if (huart->hdmarx != NULL)
 8009a32:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8009a34:	b150      	cbz	r0, 8009a4c <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009a36:	4b74      	ldr	r3, [pc, #464]	@ (8009c08 <HAL_UART_IRQHandler+0x290>)
 8009a38:	6343      	str	r3, [r0, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009a3a:	f7fe f8af 	bl	8007b9c <HAL_DMA_Abort_IT>
 8009a3e:	b140      	cbz	r0, 8009a52 <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009a40:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8009a42:	6b43      	ldr	r3, [r0, #52]	@ 0x34
}
 8009a44:	b002      	add	sp, #8
 8009a46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009a4a:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	f7fd f8a0 	bl	8006b92 <HAL_UART_ErrorCallback>
}
 8009a52:	b002      	add	sp, #8
 8009a54:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8009a56:	f7fd f89c 	bl	8006b92 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a5a:	6465      	str	r5, [r4, #68]	@ 0x44
 8009a5c:	e7f9      	b.n	8009a52 <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a5e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8009a60:	2801      	cmp	r0, #1
 8009a62:	f040 8094 	bne.w	8009b8e <HAL_UART_IRQHandler+0x216>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009a66:	06d5      	lsls	r5, r2, #27
 8009a68:	f140 8091 	bpl.w	8009b8e <HAL_UART_IRQHandler+0x216>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009a6c:	06c8      	lsls	r0, r1, #27
 8009a6e:	f140 808e 	bpl.w	8009b8e <HAL_UART_IRQHandler+0x216>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a72:	2200      	movs	r2, #0
 8009a74:	9201      	str	r2, [sp, #4]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	9201      	str	r2, [sp, #4]
 8009a7a:	685a      	ldr	r2, [r3, #4]
 8009a7c:	9201      	str	r2, [sp, #4]
 8009a7e:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a80:	695a      	ldr	r2, [r3, #20]
 8009a82:	0652      	lsls	r2, r2, #25
 8009a84:	d54d      	bpl.n	8009b22 <HAL_UART_IRQHandler+0x1aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009a86:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8009a88:	680a      	ldr	r2, [r1, #0]
 8009a8a:	6852      	ldr	r2, [r2, #4]
 8009a8c:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8009a8e:	2a00      	cmp	r2, #0
 8009a90:	d0df      	beq.n	8009a52 <HAL_UART_IRQHandler+0xda>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009a92:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
 8009a94:	4290      	cmp	r0, r2
 8009a96:	d9dc      	bls.n	8009a52 <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 8009a98:	85e2      	strh	r2, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009a9a:	698a      	ldr	r2, [r1, #24]
 8009a9c:	2a20      	cmp	r2, #32
 8009a9e:	d036      	beq.n	8009b0e <HAL_UART_IRQHandler+0x196>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa0:	f103 020c 	add.w	r2, r3, #12
 8009aa4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009aa8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aac:	f103 000c 	add.w	r0, r3, #12
 8009ab0:	e840 2100 	strex	r1, r2, [r0]
 8009ab4:	2900      	cmp	r1, #0
 8009ab6:	d1f3      	bne.n	8009aa0 <HAL_UART_IRQHandler+0x128>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab8:	f103 0214 	add.w	r2, r3, #20
 8009abc:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ac0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac4:	f103 0014 	add.w	r0, r3, #20
 8009ac8:	e840 2100 	strex	r1, r2, [r0]
 8009acc:	2900      	cmp	r1, #0
 8009ace:	d1f3      	bne.n	8009ab8 <HAL_UART_IRQHandler+0x140>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad0:	f103 0214 	add.w	r2, r3, #20
 8009ad4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ad8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009adc:	f103 0014 	add.w	r0, r3, #20
 8009ae0:	e840 2100 	strex	r1, r2, [r0]
 8009ae4:	2900      	cmp	r1, #0
 8009ae6:	d1f3      	bne.n	8009ad0 <HAL_UART_IRQHandler+0x158>
          huart->RxState = HAL_UART_STATE_READY;
 8009ae8:	2220      	movs	r2, #32
 8009aea:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aee:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af0:	f103 020c 	add.w	r2, r3, #12
 8009af4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009af8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009afc:	f103 000c 	add.w	r0, r3, #12
 8009b00:	e840 2100 	strex	r1, r2, [r0]
 8009b04:	2900      	cmp	r1, #0
 8009b06:	d1f3      	bne.n	8009af0 <HAL_UART_IRQHandler+0x178>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009b08:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8009b0a:	f7fe f827 	bl	8007b5c <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b0e:	2302      	movs	r3, #2
 8009b10:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b12:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8009b14:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8009b16:	1ac9      	subs	r1, r1, r3
 8009b18:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	f7ff fe74 	bl	8009808 <HAL_UARTEx_RxEventCallback>
 8009b20:	e797      	b.n	8009a52 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b22:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 8009b24:	8de0      	ldrh	r0, [r4, #46]	@ 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b26:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
      if ((huart->RxXferCount > 0U)
 8009b28:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b2a:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	d090      	beq.n	8009a52 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b30:	1a89      	subs	r1, r1, r2
 8009b32:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8009b34:	2900      	cmp	r1, #0
 8009b36:	d08c      	beq.n	8009a52 <HAL_UART_IRQHandler+0xda>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b38:	f103 020c 	add.w	r2, r3, #12
 8009b3c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b40:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b44:	f103 050c 	add.w	r5, r3, #12
 8009b48:	e845 2000 	strex	r0, r2, [r5]
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	d1f3      	bne.n	8009b38 <HAL_UART_IRQHandler+0x1c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b50:	f103 0214 	add.w	r2, r3, #20
 8009b54:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b58:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5c:	f103 0514 	add.w	r5, r3, #20
 8009b60:	e845 2000 	strex	r0, r2, [r5]
 8009b64:	2800      	cmp	r0, #0
 8009b66:	d1f3      	bne.n	8009b50 <HAL_UART_IRQHandler+0x1d8>
        huart->RxState = HAL_UART_STATE_READY;
 8009b68:	2220      	movs	r2, #32
 8009b6a:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b6e:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b70:	f103 020c 	add.w	r2, r3, #12
 8009b74:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b78:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b7c:	f103 050c 	add.w	r5, r3, #12
 8009b80:	e845 2000 	strex	r0, r2, [r5]
 8009b84:	2800      	cmp	r0, #0
 8009b86:	d1f3      	bne.n	8009b70 <HAL_UART_IRQHandler+0x1f8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b88:	2302      	movs	r3, #2
 8009b8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b8c:	e7c5      	b.n	8009b1a <HAL_UART_IRQHandler+0x1a2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009b8e:	0616      	lsls	r6, r2, #24
 8009b90:	d528      	bpl.n	8009be4 <HAL_UART_IRQHandler+0x26c>
 8009b92:	060d      	lsls	r5, r1, #24
 8009b94:	d526      	bpl.n	8009be4 <HAL_UART_IRQHandler+0x26c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009b96:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8009b9a:	2a21      	cmp	r2, #33	@ 0x21
 8009b9c:	f47f af59 	bne.w	8009a52 <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ba0:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009ba2:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ba4:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8009ba8:	d117      	bne.n	8009bda <HAL_UART_IRQHandler+0x262>
 8009baa:	6921      	ldr	r1, [r4, #16]
 8009bac:	b9a9      	cbnz	r1, 8009bda <HAL_UART_IRQHandler+0x262>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009bae:	f832 1b02 	ldrh.w	r1, [r2], #2
 8009bb2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8009bb6:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009bb8:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8009bba:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8009bbc:	3a01      	subs	r2, #1
 8009bbe:	b292      	uxth	r2, r2
 8009bc0:	84e2      	strh	r2, [r4, #38]	@ 0x26
 8009bc2:	2a00      	cmp	r2, #0
 8009bc4:	f47f af45 	bne.w	8009a52 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009bc8:	68da      	ldr	r2, [r3, #12]
 8009bca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009bce:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009bd0:	68da      	ldr	r2, [r3, #12]
 8009bd2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009bd6:	60da      	str	r2, [r3, #12]
 8009bd8:	e73b      	b.n	8009a52 <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009bda:	1c51      	adds	r1, r2, #1
 8009bdc:	6221      	str	r1, [r4, #32]
 8009bde:	7812      	ldrb	r2, [r2, #0]
 8009be0:	605a      	str	r2, [r3, #4]
 8009be2:	e7ea      	b.n	8009bba <HAL_UART_IRQHandler+0x242>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009be4:	0650      	lsls	r0, r2, #25
 8009be6:	f57f af34 	bpl.w	8009a52 <HAL_UART_IRQHandler+0xda>
 8009bea:	064a      	lsls	r2, r1, #25
 8009bec:	f57f af31 	bpl.w	8009a52 <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009bf0:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8009bf2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009bf4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009bf8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8009bfa:	2320      	movs	r3, #32
 8009bfc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8009c00:	f7ff fdcb 	bl	800979a <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8009c04:	e725      	b.n	8009a52 <HAL_UART_IRQHandler+0xda>
 8009c06:	bf00      	nop
 8009c08:	080097f9 	.word	0x080097f9

08009c0c <UART_Start_Receive_DMA>:
{
 8009c0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c0e:	4613      	mov	r3, r2
  huart->RxXferSize = Size;
 8009c10:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c12:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c14:	2222      	movs	r2, #34	@ 0x22
{
 8009c16:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8009c18:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c1a:	6445      	str	r5, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c1c:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009c20:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8009c22:	4a1d      	ldr	r2, [pc, #116]	@ (8009c98 <UART_Start_Receive_DMA+0x8c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009c24:	6826      	ldr	r6, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009c26:	6282      	str	r2, [r0, #40]	@ 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009c28:	4a1c      	ldr	r2, [pc, #112]	@ (8009c9c <UART_Start_Receive_DMA+0x90>)
 8009c2a:	62c2      	str	r2, [r0, #44]	@ 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8009ca0 <UART_Start_Receive_DMA+0x94>)
  huart->hdmarx->XferAbortCallback = NULL;
 8009c2e:	e9c0 250c 	strd	r2, r5, [r0, #48]	@ 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009c32:	460a      	mov	r2, r1
 8009c34:	1d31      	adds	r1, r6, #4
 8009c36:	f7fd ff55 	bl	8007ae4 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009c3a:	6823      	ldr	r3, [r4, #0]
 8009c3c:	9501      	str	r5, [sp, #4]
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	9201      	str	r2, [sp, #4]
 8009c42:	685a      	ldr	r2, [r3, #4]
 8009c44:	9201      	str	r2, [sp, #4]
 8009c46:	9a01      	ldr	r2, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009c48:	6922      	ldr	r2, [r4, #16]
 8009c4a:	b15a      	cbz	r2, 8009c64 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4c:	f103 020c 	add.w	r2, r3, #12
 8009c50:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c58:	f103 000c 	add.w	r0, r3, #12
 8009c5c:	e840 2100 	strex	r1, r2, [r0]
 8009c60:	2900      	cmp	r1, #0
 8009c62:	d1f3      	bne.n	8009c4c <UART_Start_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c64:	f103 0214 	add.w	r2, r3, #20
 8009c68:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c6c:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c70:	f103 0014 	add.w	r0, r3, #20
 8009c74:	e840 2100 	strex	r1, r2, [r0]
 8009c78:	2900      	cmp	r1, #0
 8009c7a:	d1f3      	bne.n	8009c64 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7c:	f103 0214 	add.w	r2, r3, #20
 8009c80:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c88:	f103 0114 	add.w	r1, r3, #20
 8009c8c:	e841 2000 	strex	r0, r2, [r1]
 8009c90:	2800      	cmp	r0, #0
 8009c92:	d1f3      	bne.n	8009c7c <UART_Start_Receive_DMA+0x70>
}
 8009c94:	b002      	add	sp, #8
 8009c96:	bd70      	pop	{r4, r5, r6, pc}
 8009c98:	08009829 	.word	0x08009829
 8009c9c:	0800980b 	.word	0x0800980b
 8009ca0:	0800979f 	.word	0x0800979f

08009ca4 <HAL_UART_Receive_DMA>:
{
 8009ca4:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8009ca6:	f890 6042 	ldrb.w	r6, [r0, #66]	@ 0x42
 8009caa:	2e20      	cmp	r6, #32
 8009cac:	d106      	bne.n	8009cbc <HAL_UART_Receive_DMA+0x18>
    if ((pData == NULL) || (Size == 0U))
 8009cae:	b141      	cbz	r1, 8009cc2 <HAL_UART_Receive_DMA+0x1e>
 8009cb0:	b13a      	cbz	r2, 8009cc2 <HAL_UART_Receive_DMA+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cb2:	2400      	movs	r4, #0
 8009cb4:	6304      	str	r4, [r0, #48]	@ 0x30
}
 8009cb6:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009cb8:	f7ff bfa8 	b.w	8009c0c <UART_Start_Receive_DMA>
    return HAL_BUSY;
 8009cbc:	2002      	movs	r0, #2
}
 8009cbe:	bc70      	pop	{r4, r5, r6}
 8009cc0:	4770      	bx	lr
      return HAL_ERROR;
 8009cc2:	2001      	movs	r0, #1
 8009cc4:	e7fb      	b.n	8009cbe <HAL_UART_Receive_DMA+0x1a>

08009cc6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	a804      	add	r0, sp, #16
 8009cca:	e900 000e 	stmdb	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8009cce:	2000      	movs	r0, #0
 8009cd0:	b004      	add	sp, #16
 8009cd2:	4770      	bx	lr

08009cd4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009cd4:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009cd6:	f44f 423f 	mov.w	r2, #48896	@ 0xbf00
  USBx->ISTR = 0U;
 8009cda:	2000      	movs	r0, #0
 8009cdc:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8009ce0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 8009ce4:	4770      	bx	lr

08009ce6 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009ce6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8009cea:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009cee:	045b      	lsls	r3, r3, #17
 8009cf0:	0c5b      	lsrs	r3, r3, #17
 8009cf2:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 8009cf6:	2000      	movs	r0, #0
 8009cf8:	4770      	bx	lr

08009cfa <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8009cfa:	2000      	movs	r0, #0
 8009cfc:	4770      	bx	lr

08009cfe <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009cfe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d00:	4604      	mov	r4, r0
 8009d02:	a804      	add	r0, sp, #16
 8009d04:	e900 000e 	stmdb	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009d08:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
  USBx->CNTR = 0U;
 8009d10:	f8a4 0040 	strh.w	r0, [r4, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009d14:	f8a4 0044 	strh.w	r0, [r4, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009d18:	f8a4 0050 	strh.w	r0, [r4, #80]	@ 0x50

  return HAL_OK;
}
 8009d1c:	b004      	add	sp, #16
 8009d1e:	bd10      	pop	{r4, pc}

08009d20 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009d20:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009d22:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8009d24:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009d26:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 8009d2a:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009d2c:	f424 44ec 	bic.w	r4, r4, #30208	@ 0x7600
 8009d30:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 8009d34:	0424      	lsls	r4, r4, #16
 8009d36:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 8009d38:	2d03      	cmp	r5, #3
 8009d3a:	d84b      	bhi.n	8009dd4 <USB_ActivateEndpoint+0xb4>
 8009d3c:	e8df f005 	tbb	[pc, r5]
 8009d40:	43454702 	.word	0x43454702
  HAL_StatusTypeDef ret = HAL_OK;
 8009d44:	4628      	mov	r0, r5
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009d46:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009d4a:	f248 0680 	movw	r6, #32896	@ 0x8080
 8009d4e:	4334      	orrs	r4, r6
 8009d50:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009d54:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8009d58:	4f9e      	ldr	r7, [pc, #632]	@ (8009fd4 <USB_ActivateEndpoint+0x2b4>)
 8009d5a:	b2a4      	uxth	r4, r4
 8009d5c:	403c      	ands	r4, r7
 8009d5e:	4314      	orrs	r4, r2
 8009d60:	4334      	orrs	r4, r6
 8009d62:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 8009d66:	7b0c      	ldrb	r4, [r1, #12]
 8009d68:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 8009d6c:	2c00      	cmp	r4, #0
 8009d6e:	f040 808b 	bne.w	8009e88 <USB_ActivateEndpoint+0x168>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009d72:	88cc      	ldrh	r4, [r1, #6]
    if (ep->is_in != 0U)
 8009d74:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009d76:	0864      	lsrs	r4, r4, #1
 8009d78:	0064      	lsls	r4, r4, #1
    if (ep->is_in != 0U)
 8009d7a:	b36e      	cbz	r6, 8009dd8 <USB_ActivateEndpoint+0xb8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009d7c:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8009d80:	b289      	uxth	r1, r1
 8009d82:	4461      	add	r1, ip
 8009d84:	f8a1 4400 	strh.w	r4, [r1, #1024]	@ 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d88:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009d8c:	0649      	lsls	r1, r1, #25
 8009d8e:	d509      	bpl.n	8009da4 <USB_ActivateEndpoint+0x84>
 8009d90:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009d94:	b289      	uxth	r1, r1
 8009d96:	4039      	ands	r1, r7
 8009d98:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8009d9c:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8009da0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009da4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009da8:	4c8b      	ldr	r4, [pc, #556]	@ (8009fd8 <USB_ActivateEndpoint+0x2b8>)
 8009daa:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8009dac:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009dae:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8009db2:	d001      	beq.n	8009db8 <USB_ActivateEndpoint+0x98>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009db4:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009db8:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8009dbc:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8009dc0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8009dc4:	e04a      	b.n	8009e5c <USB_ActivateEndpoint+0x13c>
      wEpRegVal |= USB_EP_INTERRUPT;
 8009dc6:	f444 64c0 	orr.w	r4, r4, #1536	@ 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8009dca:	2000      	movs	r0, #0
      break;
 8009dcc:	e7bd      	b.n	8009d4a <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009dce:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
      break;
 8009dd2:	e7fa      	b.n	8009dca <USB_ActivateEndpoint+0xaa>
  switch (ep->type)
 8009dd4:	2001      	movs	r0, #1
 8009dd6:	e7b8      	b.n	8009d4a <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009dd8:	f8b3 5050 	ldrh.w	r5, [r3, #80]	@ 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009ddc:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009dde:	b2ad      	uxth	r5, r5
 8009de0:	4465      	add	r5, ip
 8009de2:	f8a5 4408 	strh.w	r4, [r5, #1032]	@ 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009de6:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8009dea:	293e      	cmp	r1, #62	@ 0x3e
 8009dec:	b2a4      	uxth	r4, r4
 8009dee:	4464      	add	r4, ip
 8009df0:	f8b4 540c 	ldrh.w	r5, [r4, #1036]	@ 0x40c
 8009df4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009df8:	f8a4 540c 	strh.w	r5, [r4, #1036]	@ 0x40c
 8009dfc:	d92f      	bls.n	8009e5e <USB_ActivateEndpoint+0x13e>
 8009dfe:	094d      	lsrs	r5, r1, #5
 8009e00:	06ce      	lsls	r6, r1, #27
 8009e02:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8009e06:	bf08      	it	eq
 8009e08:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8009e0c:	b289      	uxth	r1, r1
 8009e0e:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8009e12:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8009e16:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8009e1a:	b289      	uxth	r1, r1
 8009e1c:	f8a4 140c 	strh.w	r1, [r4, #1036]	@ 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e20:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009e24:	044f      	lsls	r7, r1, #17
 8009e26:	d50d      	bpl.n	8009e44 <USB_ActivateEndpoint+0x124>
 8009e28:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009e2c:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8009e30:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8009e34:	0409      	lsls	r1, r1, #16
 8009e36:	0c09      	lsrs	r1, r1, #16
 8009e38:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8009e3c:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8009e40:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 8009e44:	4c65      	ldr	r4, [pc, #404]	@ (8009fdc <USB_ActivateEndpoint+0x2bc>)
 8009e46:	b9c2      	cbnz	r2, 8009e7a <USB_ActivateEndpoint+0x15a>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009e48:	881a      	ldrh	r2, [r3, #0]
 8009e4a:	b292      	uxth	r2, r2
 8009e4c:	4022      	ands	r2, r4
 8009e4e:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 8009e52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009e56:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009e5a:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8009e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009e5e:	b911      	cbnz	r1, 8009e66 <USB_ActivateEndpoint+0x146>
 8009e60:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8009e64:	e7d5      	b.n	8009e12 <USB_ActivateEndpoint+0xf2>
 8009e66:	084d      	lsrs	r5, r1, #1
 8009e68:	07c9      	lsls	r1, r1, #31
 8009e6a:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8009e6e:	bf48      	it	mi
 8009e70:	3501      	addmi	r5, #1
 8009e72:	b289      	uxth	r1, r1
 8009e74:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8009e78:	e7cf      	b.n	8009e1a <USB_ActivateEndpoint+0xfa>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009e7a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009e7e:	b289      	uxth	r1, r1
 8009e80:	4021      	ands	r1, r4
 8009e82:	f481 5100 	eor.w	r1, r1, #8192	@ 0x2000
 8009e86:	e797      	b.n	8009db8 <USB_ActivateEndpoint+0x98>
    if (ep->type == EP_TYPE_BULK)
 8009e88:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009e8a:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 8009e8e:	d15b      	bne.n	8009f48 <USB_ActivateEndpoint+0x228>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009e90:	b2a4      	uxth	r4, r4
 8009e92:	403c      	ands	r4, r7
 8009e94:	f444 4401 	orr.w	r4, r4, #33024	@ 0x8100
 8009e98:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
 8009e9c:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009ea0:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8009ea4:	890e      	ldrh	r6, [r1, #8]
 8009ea6:	b2a4      	uxth	r4, r4
 8009ea8:	0876      	lsrs	r6, r6, #1
 8009eaa:	4464      	add	r4, ip
 8009eac:	0076      	lsls	r6, r6, #1
 8009eae:	f8a4 6400 	strh.w	r6, [r4, #1024]	@ 0x400
 8009eb2:	894e      	ldrh	r6, [r1, #10]
 8009eb4:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8009eb8:	0876      	lsrs	r6, r6, #1
 8009eba:	b2a4      	uxth	r4, r4
 8009ebc:	4464      	add	r4, ip
 8009ebe:	0076      	lsls	r6, r6, #1
 8009ec0:	f8a4 6408 	strh.w	r6, [r4, #1032]	@ 0x408
    if (ep->is_in == 0U)
 8009ec4:	7849      	ldrb	r1, [r1, #1]
 8009ec6:	2900      	cmp	r1, #0
 8009ec8:	d148      	bne.n	8009f5c <USB_ActivateEndpoint+0x23c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009eca:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009ece:	044e      	lsls	r6, r1, #17
 8009ed0:	d50d      	bpl.n	8009eee <USB_ActivateEndpoint+0x1ce>
 8009ed2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009ed6:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8009eda:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8009ede:	0409      	lsls	r1, r1, #16
 8009ee0:	0c09      	lsrs	r1, r1, #16
 8009ee2:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8009ee6:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8009eea:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009eee:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009ef2:	064d      	lsls	r5, r1, #25
 8009ef4:	d50d      	bpl.n	8009f12 <USB_ActivateEndpoint+0x1f2>
 8009ef6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009efa:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8009efe:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8009f02:	0409      	lsls	r1, r1, #16
 8009f04:	0c09      	lsrs	r1, r1, #16
 8009f06:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8009f0a:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8009f0e:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009f12:	f248 0480 	movw	r4, #32896	@ 0x8080
 8009f16:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009f1a:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8009f1e:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8009f22:	0409      	lsls	r1, r1, #16
 8009f24:	0c09      	lsrs	r1, r1, #16
 8009f26:	f481 5140 	eor.w	r1, r1, #12288	@ 0x3000
 8009f2a:	4321      	orrs	r1, r4
 8009f2c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009f30:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009f34:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8009f38:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8009f3c:	0409      	lsls	r1, r1, #16
 8009f3e:	0c09      	lsrs	r1, r1, #16
 8009f40:	430c      	orrs	r4, r1
 8009f42:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 8009f46:	e789      	b.n	8009e5c <USB_ActivateEndpoint+0x13c>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009f48:	f424 44e2 	bic.w	r4, r4, #28928	@ 0x7100
 8009f4c:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 8009f50:	0424      	lsls	r4, r4, #16
 8009f52:	0c24      	lsrs	r4, r4, #16
 8009f54:	4326      	orrs	r6, r4
 8009f56:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 8009f5a:	e7a1      	b.n	8009ea0 <USB_ActivateEndpoint+0x180>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f5c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009f60:	044c      	lsls	r4, r1, #17
 8009f62:	d50d      	bpl.n	8009f80 <USB_ActivateEndpoint+0x260>
 8009f64:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009f68:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8009f6c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8009f70:	0409      	lsls	r1, r1, #16
 8009f72:	0c09      	lsrs	r1, r1, #16
 8009f74:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8009f78:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8009f7c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f80:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009f84:	0649      	lsls	r1, r1, #25
 8009f86:	d50d      	bpl.n	8009fa4 <USB_ActivateEndpoint+0x284>
 8009f88:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009f8c:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8009f90:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8009f94:	0409      	lsls	r1, r1, #16
 8009f96:	0c09      	lsrs	r1, r1, #16
 8009f98:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8009f9c:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8009fa0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009fa4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009fa8:	4c0b      	ldr	r4, [pc, #44]	@ (8009fd8 <USB_ActivateEndpoint+0x2b8>)
 8009faa:	b289      	uxth	r1, r1
 8009fac:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8009fae:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009fb0:	bf18      	it	ne
 8009fb2:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009fb6:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8009fba:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8009fbe:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009fc2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009fc6:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8009fca:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8009fce:	0409      	lsls	r1, r1, #16
 8009fd0:	0c09      	lsrs	r1, r1, #16
 8009fd2:	e6f1      	b.n	8009db8 <USB_ActivateEndpoint+0x98>
 8009fd4:	ffff8f8f 	.word	0xffff8f8f
 8009fd8:	ffff8fbf 	.word	0xffff8fbf
 8009fdc:	ffffbf8f 	.word	0xffffbf8f

08009fe0 <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 8009fe0:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009fe2:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8009fe4:	7b09      	ldrb	r1, [r1, #12]
 8009fe6:	bbd9      	cbnz	r1, 800a060 <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 8009fe8:	b30a      	cbz	r2, 800a02e <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009fea:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009fee:	0651      	lsls	r1, r2, #25
 8009ff0:	d50d      	bpl.n	800a00e <USB_DeactivateEndpoint+0x2e>
 8009ff2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009ff6:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8009ffa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009ffe:	0412      	lsls	r2, r2, #16
 800a000:	0c12      	lsrs	r2, r2, #16
 800a002:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a006:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 800a00a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a00e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800a012:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800a016:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a01a:	0412      	lsls	r2, r2, #16
 800a01c:	0c12      	lsrs	r2, r2, #16
 800a01e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a022:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a026:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800a02a:	2000      	movs	r0, #0
 800a02c:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a02e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800a032:	0452      	lsls	r2, r2, #17
 800a034:	d50d      	bpl.n	800a052 <USB_DeactivateEndpoint+0x72>
 800a036:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800a03a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800a03e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a042:	0412      	lsls	r2, r2, #16
 800a044:	0c12      	lsrs	r2, r2, #16
 800a046:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800a04a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a04e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a052:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800a056:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a05a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a05e:	e7dc      	b.n	800a01a <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 800a060:	2a00      	cmp	r2, #0
 800a062:	d14a      	bne.n	800a0fa <USB_DeactivateEndpoint+0x11a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a064:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800a068:	0451      	lsls	r1, r2, #17
 800a06a:	d50d      	bpl.n	800a088 <USB_DeactivateEndpoint+0xa8>
 800a06c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800a070:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800a074:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a078:	0412      	lsls	r2, r2, #16
 800a07a:	0c12      	lsrs	r2, r2, #16
 800a07c:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800a080:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a084:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a088:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800a08c:	0652      	lsls	r2, r2, #25
 800a08e:	d50d      	bpl.n	800a0ac <USB_DeactivateEndpoint+0xcc>
 800a090:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800a094:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800a098:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a09c:	0412      	lsls	r2, r2, #16
 800a09e:	0c12      	lsrs	r2, r2, #16
 800a0a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a0a4:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 800a0a8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a0ac:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 800a0b0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800a0b4:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800a0b8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a0bc:	0412      	lsls	r2, r2, #16
 800a0be:	0c12      	lsrs	r2, r2, #16
 800a0c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a0c4:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 800a0c8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a0cc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800a0d0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a0d4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a0d8:	0412      	lsls	r2, r2, #16
 800a0da:	0c12      	lsrs	r2, r2, #16
 800a0dc:	430a      	orrs	r2, r1
 800a0de:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a0e2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800a0e6:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800a0ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a0ee:	0412      	lsls	r2, r2, #16
 800a0f0:	0c12      	lsrs	r2, r2, #16
 800a0f2:	4311      	orrs	r1, r2
 800a0f4:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
 800a0f8:	e797      	b.n	800a02a <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a0fa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800a0fe:	0451      	lsls	r1, r2, #17
 800a100:	d50d      	bpl.n	800a11e <USB_DeactivateEndpoint+0x13e>
 800a102:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800a106:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800a10a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a10e:	0412      	lsls	r2, r2, #16
 800a110:	0c12      	lsrs	r2, r2, #16
 800a112:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800a116:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a11a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a11e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800a122:	0652      	lsls	r2, r2, #25
 800a124:	d50d      	bpl.n	800a142 <USB_DeactivateEndpoint+0x162>
 800a126:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800a12a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800a12e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a132:	0412      	lsls	r2, r2, #16
 800a134:	0c12      	lsrs	r2, r2, #16
 800a136:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a13a:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 800a13e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a142:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 800a146:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800a14a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800a14e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a152:	0412      	lsls	r2, r2, #16
 800a154:	0c12      	lsrs	r2, r2, #16
 800a156:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800a15a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a15e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a162:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800a166:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800a16a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a16e:	0412      	lsls	r2, r2, #16
 800a170:	0c12      	lsrs	r2, r2, #16
 800a172:	430a      	orrs	r2, r1
 800a174:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a178:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800a17c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a180:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a184:	e7b3      	b.n	800a0ee <USB_DeactivateEndpoint+0x10e>

0800a186 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 800a186:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a188:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 800a18a:	b18b      	cbz	r3, 800a1b0 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a18c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a190:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a194:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a198:	041b      	lsls	r3, r3, #16
 800a19a:	0c1b      	lsrs	r3, r3, #16
 800a19c:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a1a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1a8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800a1ac:	2000      	movs	r0, #0
 800a1ae:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a1b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a1b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a1b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1bc:	041b      	lsls	r3, r3, #16
 800a1be:	0c1b      	lsrs	r3, r3, #16
 800a1c0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a1c4:	e7ec      	b.n	800a1a0 <USB_EPSetStall+0x1a>

0800a1c6 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800a1c6:	7b0b      	ldrb	r3, [r1, #12]
 800a1c8:	bb3b      	cbnz	r3, 800a21a <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 800a1ca:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a1cc:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800a1ce:	b333      	cbz	r3, 800a21e <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a1d0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a1d4:	065b      	lsls	r3, r3, #25
 800a1d6:	d50d      	bpl.n	800a1f4 <USB_EPClearStall+0x2e>
 800a1d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a1dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1e4:	041b      	lsls	r3, r3, #16
 800a1e6:	0c1b      	lsrs	r3, r3, #16
 800a1e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a1f0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800a1f4:	78cb      	ldrb	r3, [r1, #3]
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d00f      	beq.n	800a21a <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a1fa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a1fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a202:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a206:	041b      	lsls	r3, r3, #16
 800a208:	0c1b      	lsrs	r3, r3, #16
 800a20a:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a20e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a216:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 800a21a:	2000      	movs	r0, #0
 800a21c:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a21e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a222:	045b      	lsls	r3, r3, #17
 800a224:	d50d      	bpl.n	800a242 <USB_EPClearStall+0x7c>
 800a226:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a22a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a22e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a232:	041b      	lsls	r3, r3, #16
 800a234:	0c1b      	lsrs	r3, r3, #16
 800a236:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a23a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a23e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a242:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800a246:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a24a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a24e:	041b      	lsls	r3, r3, #16
 800a250:	0c1b      	lsrs	r3, r3, #16
 800a252:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 800a256:	e7da      	b.n	800a20e <USB_EPClearStall+0x48>

0800a258 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800a258:	b911      	cbnz	r1, 800a260 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a25a:	2380      	movs	r3, #128	@ 0x80
 800a25c:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 800a260:	2000      	movs	r0, #0
 800a262:	4770      	bx	lr

0800a264 <USB_DevConnect>:
/**
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
 800a264:	2000      	movs	r0, #0
 800a266:	4770      	bx	lr

0800a268 <USB_DevDisconnect>:
/**
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
 800a268:	2000      	movs	r0, #0
 800a26a:	4770      	bx	lr

0800a26c <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a26c:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 800a270:	b280      	uxth	r0, r0
 800a272:	4770      	bx	lr

0800a274 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800a274:	2000      	movs	r0, #0
 800a276:	4770      	bx	lr

0800a278 <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a278:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a27c:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a27e:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a282:	085b      	lsrs	r3, r3, #1
 800a284:	eb00 0383 	add.w	r3, r0, r3, lsl #2

  for (count = n; count != 0U; count--)
 800a288:	4283      	cmp	r3, r0
 800a28a:	d100      	bne.n	800a28e <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 800a28c:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a28e:	f831 2b02 	ldrh.w	r2, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 800a292:	f820 2b04 	strh.w	r2, [r0], #4
  for (count = n; count != 0U; count--)
 800a296:	e7f7      	b.n	800a288 <USB_WritePMA+0x10>

0800a298 <USB_EPStartXfer>:
{
 800a298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 800a29c:	784b      	ldrb	r3, [r1, #1]
{
 800a29e:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 800a2a0:	2b01      	cmp	r3, #1
{
 800a2a2:	460d      	mov	r5, r1
    if (ep->doublebuffer == 0U)
 800a2a4:	7b0a      	ldrb	r2, [r1, #12]
  if (ep->is_in == 1U)
 800a2a6:	f040 8118 	bne.w	800a4da <USB_EPStartXfer+0x242>
    if (ep->xfer_len > ep->maxpacket)
 800a2aa:	f8d1 9010 	ldr.w	r9, [r1, #16]
 800a2ae:	698f      	ldr	r7, [r1, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a2b0:	6949      	ldr	r1, [r1, #20]
 800a2b2:	454f      	cmp	r7, r9
 800a2b4:	bf28      	it	cs
 800a2b6:	464f      	movcs	r7, r9
    if (ep->doublebuffer == 0U)
 800a2b8:	bb0a      	cbnz	r2, 800a2fe <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a2ba:	b2bf      	uxth	r7, r7
 800a2bc:	88ea      	ldrh	r2, [r5, #6]
 800a2be:	463b      	mov	r3, r7
 800a2c0:	f7ff ffda 	bl	800a278 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a2c4:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 800a2c8:	7829      	ldrb	r1, [r5, #0]
 800a2ca:	b280      	uxth	r0, r0
 800a2cc:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 800a2d0:	0109      	lsls	r1, r1, #4
 800a2d2:	4402      	add	r2, r0
 800a2d4:	528f      	strh	r7, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a2d6:	782a      	ldrb	r2, [r5, #0]
 800a2d8:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800a2dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a2e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2e4:	041b      	lsls	r3, r3, #16
 800a2e6:	0c1b      	lsrs	r3, r3, #16
 800a2e8:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
  return HAL_OK;
 800a2ec:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a2ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2f6:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 800a2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ep->type == EP_TYPE_BULK)
 800a2fe:	78eb      	ldrb	r3, [r5, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a300:	f895 e000 	ldrb.w	lr, [r5]
      if (ep->type == EP_TYPE_BULK)
 800a304:	2b02      	cmp	r3, #2
        if (ep->xfer_len_db > ep->maxpacket)
 800a306:	6a2e      	ldr	r6, [r5, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a308:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
      if (ep->type == EP_TYPE_BULK)
 800a30c:	f040 80d0 	bne.w	800a4b0 <USB_EPStartXfer+0x218>
        if (ep->xfer_len_db > ep->maxpacket)
 800a310:	45b1      	cmp	r9, r6
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a312:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 800a316:	f080 80b4 	bcs.w	800a482 <USB_EPStartXfer+0x1ea>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a31a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800a31e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a322:	0412      	lsls	r2, r2, #16
 800a324:	0c12      	lsrs	r2, r2, #16
 800a326:	f442 4201 	orr.w	r2, r2, #33024	@ 0x8100
 800a32a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a32e:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a332:	f830 802e 	ldrh.w	r8, [r0, lr, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a336:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
          ep->xfer_len_db -= len;
 800a33a:	1bf6      	subs	r6, r6, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a33c:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
          ep->xfer_len_db -= len;
 800a340:	622e      	str	r6, [r5, #32]
            ep->xfer_buff += len;
 800a342:	eb01 0a07 	add.w	sl, r1, r7
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a346:	b2bb      	uxth	r3, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a348:	fa1f fe8e 	uxth.w	lr, lr
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a34c:	d04e      	beq.n	800a3ec <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a34e:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 800a352:	4472      	add	r2, lr
 800a354:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a358:	896a      	ldrh	r2, [r5, #10]
 800a35a:	f7ff ff8d 	bl	800a278 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800a35e:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 800a360:	bf36      	itet	cc
 800a362:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 800a364:	2300      	movcs	r3, #0
 800a366:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a368:	786a      	ldrb	r2, [r5, #1]
 800a36a:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 800a36c:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a370:	b2b3      	uxth	r3, r6
 800a372:	bb7a      	cbnz	r2, 800a3d4 <USB_EPStartXfer+0x13c>
 800a374:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 800a378:	7828      	ldrb	r0, [r5, #0]
 800a37a:	b292      	uxth	r2, r2
 800a37c:	f204 4104 	addw	r1, r4, #1028	@ 0x404
 800a380:	0100      	lsls	r0, r0, #4
 800a382:	4411      	add	r1, r2
 800a384:	5a42      	ldrh	r2, [r0, r1]
 800a386:	2e3e      	cmp	r6, #62	@ 0x3e
 800a388:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a38c:	5242      	strh	r2, [r0, r1]
 800a38e:	d914      	bls.n	800a3ba <USB_EPStartXfer+0x122>
 800a390:	5a42      	ldrh	r2, [r0, r1]
 800a392:	0977      	lsrs	r7, r6, #5
 800a394:	06f6      	lsls	r6, r6, #27
 800a396:	bf08      	it	eq
 800a398:	f107 37ff 	addeq.w	r7, r7, #4294967295
 800a39c:	b292      	uxth	r2, r2
 800a39e:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800a3a2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800a3a6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800a3aa:	b292      	uxth	r2, r2
 800a3ac:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a3ae:	892a      	ldrh	r2, [r5, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a3b0:	4651      	mov	r1, sl
 800a3b2:	4620      	mov	r0, r4
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a3b4:	f7ff ff60 	bl	800a278 <USB_WritePMA>
 800a3b8:	e78d      	b.n	800a2d6 <USB_EPStartXfer+0x3e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a3ba:	b90e      	cbnz	r6, 800a3c0 <USB_EPStartXfer+0x128>
 800a3bc:	5a42      	ldrh	r2, [r0, r1]
 800a3be:	e7f0      	b.n	800a3a2 <USB_EPStartXfer+0x10a>
 800a3c0:	07f2      	lsls	r2, r6, #31
 800a3c2:	5a42      	ldrh	r2, [r0, r1]
 800a3c4:	ea4f 0756 	mov.w	r7, r6, lsr #1
 800a3c8:	bf48      	it	mi
 800a3ca:	3701      	addmi	r7, #1
 800a3cc:	b292      	uxth	r2, r2
 800a3ce:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800a3d2:	e7ea      	b.n	800a3aa <USB_EPStartXfer+0x112>
 800a3d4:	2a01      	cmp	r2, #1
 800a3d6:	d1ea      	bne.n	800a3ae <USB_EPStartXfer+0x116>
 800a3d8:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 800a3dc:	7829      	ldrb	r1, [r5, #0]
 800a3de:	b280      	uxth	r0, r0
 800a3e0:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 800a3e4:	0109      	lsls	r1, r1, #4
 800a3e6:	4402      	add	r2, r0
 800a3e8:	528b      	strh	r3, [r1, r2]
 800a3ea:	e7e0      	b.n	800a3ae <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a3ec:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 800a3f0:	4472      	add	r2, lr
 800a3f2:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a3f6:	892a      	ldrh	r2, [r5, #8]
 800a3f8:	f7ff ff3e 	bl	800a278 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800a3fc:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 800a3fe:	bf36      	itet	cc
 800a400:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 800a402:	4643      	movcs	r3, r8
 800a404:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a406:	786a      	ldrb	r2, [r5, #1]
 800a408:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 800a40a:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a40e:	b2b3      	uxth	r3, r6
 800a410:	bb5a      	cbnz	r2, 800a46a <USB_EPStartXfer+0x1d2>
 800a412:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 800a416:	7828      	ldrb	r0, [r5, #0]
 800a418:	b292      	uxth	r2, r2
 800a41a:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 800a41e:	0100      	lsls	r0, r0, #4
 800a420:	4411      	add	r1, r2
 800a422:	5a42      	ldrh	r2, [r0, r1]
 800a424:	2e3e      	cmp	r6, #62	@ 0x3e
 800a426:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a42a:	5242      	strh	r2, [r0, r1]
 800a42c:	d910      	bls.n	800a450 <USB_EPStartXfer+0x1b8>
 800a42e:	5a42      	ldrh	r2, [r0, r1]
 800a430:	0977      	lsrs	r7, r6, #5
 800a432:	06f6      	lsls	r6, r6, #27
 800a434:	bf08      	it	eq
 800a436:	f107 37ff 	addeq.w	r7, r7, #4294967295
 800a43a:	b292      	uxth	r2, r2
 800a43c:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800a440:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800a444:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800a448:	b292      	uxth	r2, r2
 800a44a:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a44c:	896a      	ldrh	r2, [r5, #10]
 800a44e:	e7af      	b.n	800a3b0 <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a450:	b90e      	cbnz	r6, 800a456 <USB_EPStartXfer+0x1be>
 800a452:	5a42      	ldrh	r2, [r0, r1]
 800a454:	e7f4      	b.n	800a440 <USB_EPStartXfer+0x1a8>
 800a456:	07f2      	lsls	r2, r6, #31
 800a458:	5a42      	ldrh	r2, [r0, r1]
 800a45a:	ea4f 0756 	mov.w	r7, r6, lsr #1
 800a45e:	bf48      	it	mi
 800a460:	3701      	addmi	r7, #1
 800a462:	b292      	uxth	r2, r2
 800a464:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800a468:	e7ee      	b.n	800a448 <USB_EPStartXfer+0x1b0>
 800a46a:	2a01      	cmp	r2, #1
 800a46c:	d1ee      	bne.n	800a44c <USB_EPStartXfer+0x1b4>
 800a46e:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 800a472:	7829      	ldrb	r1, [r5, #0]
 800a474:	b280      	uxth	r0, r0
 800a476:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 800a47a:	0109      	lsls	r1, r1, #4
 800a47c:	4402      	add	r2, r0
 800a47e:	528b      	strh	r3, [r1, r2]
 800a480:	e7e4      	b.n	800a44c <USB_EPStartXfer+0x1b4>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a482:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 800a486:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a48a:	0412      	lsls	r2, r2, #16
 800a48c:	0c12      	lsrs	r2, r2, #16
 800a48e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a492:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a496:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a49a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800a49e:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	441a      	add	r2, r3
 800a4a6:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a4a8:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a4ac:	892a      	ldrh	r2, [r5, #8]
 800a4ae:	e781      	b.n	800a3b4 <USB_EPStartXfer+0x11c>
        ep->xfer_len_db -= len;
 800a4b0:	1bf6      	subs	r6, r6, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a4b2:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        ep->xfer_len_db -= len;
 800a4b6:	622e      	str	r6, [r5, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a4b8:	f8b0 6050 	ldrh.w	r6, [r0, #80]	@ 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a4bc:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a4be:	0657      	lsls	r7, r2, #25
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a4c0:	b2b6      	uxth	r6, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a4c2:	d506      	bpl.n	800a4d2 <USB_EPStartXfer+0x23a>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a4c4:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 800a4c8:	4432      	add	r2, r6
 800a4ca:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a4ce:	896a      	ldrh	r2, [r5, #10]
 800a4d0:	e770      	b.n	800a3b4 <USB_EPStartXfer+0x11c>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a4d2:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 800a4d6:	4432      	add	r2, r6
 800a4d8:	e7e6      	b.n	800a4a8 <USB_EPStartXfer+0x210>
    if (ep->doublebuffer == 0U)
 800a4da:	2a00      	cmp	r2, #0
 800a4dc:	d13b      	bne.n	800a556 <USB_EPStartXfer+0x2be>
      if (ep->xfer_len > ep->maxpacket)
 800a4de:	698b      	ldr	r3, [r1, #24]
 800a4e0:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a4e2:	f8b0 0050 	ldrh.w	r0, [r0, #80]	@ 0x50
      if (ep->xfer_len > ep->maxpacket)
 800a4e6:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 800a4e8:	bf84      	itt	hi
 800a4ea:	1a5a      	subhi	r2, r3, r1
 800a4ec:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a4ee:	7829      	ldrb	r1, [r5, #0]
 800a4f0:	61aa      	str	r2, [r5, #24]
 800a4f2:	b280      	uxth	r0, r0
 800a4f4:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 800a4f8:	0109      	lsls	r1, r1, #4
 800a4fa:	4402      	add	r2, r0
 800a4fc:	5a88      	ldrh	r0, [r1, r2]
 800a4fe:	2b3e      	cmp	r3, #62	@ 0x3e
 800a500:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a504:	5288      	strh	r0, [r1, r2]
 800a506:	d91a      	bls.n	800a53e <USB_EPStartXfer+0x2a6>
 800a508:	0958      	lsrs	r0, r3, #5
 800a50a:	06de      	lsls	r6, r3, #27
 800a50c:	5a8b      	ldrh	r3, [r1, r2]
 800a50e:	bf08      	it	eq
 800a510:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800a514:	b29b      	uxth	r3, r3
 800a516:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 800a51a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a51e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a522:	b29b      	uxth	r3, r3
 800a524:	528b      	strh	r3, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a526:	782a      	ldrb	r2, [r5, #0]
 800a528:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800a52c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a530:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a534:	041b      	lsls	r3, r3, #16
 800a536:	0c1b      	lsrs	r3, r3, #16
 800a538:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 800a53c:	e6d6      	b.n	800a2ec <USB_EPStartXfer+0x54>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a53e:	b90b      	cbnz	r3, 800a544 <USB_EPStartXfer+0x2ac>
 800a540:	5a8b      	ldrh	r3, [r1, r2]
 800a542:	e7ea      	b.n	800a51a <USB_EPStartXfer+0x282>
 800a544:	0858      	lsrs	r0, r3, #1
 800a546:	07db      	lsls	r3, r3, #31
 800a548:	5a8b      	ldrh	r3, [r1, r2]
 800a54a:	bf48      	it	mi
 800a54c:	3001      	addmi	r0, #1
 800a54e:	b29b      	uxth	r3, r3
 800a550:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 800a554:	e7e5      	b.n	800a522 <USB_EPStartXfer+0x28a>
      if (ep->type == EP_TYPE_BULK)
 800a556:	78ca      	ldrb	r2, [r1, #3]
 800a558:	2a02      	cmp	r2, #2
 800a55a:	d170      	bne.n	800a63e <USB_EPStartXfer+0x3a6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d138      	bne.n	800a5d2 <USB_EPStartXfer+0x33a>
 800a560:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800a564:	780b      	ldrb	r3, [r1, #0]
 800a566:	b292      	uxth	r2, r2
 800a568:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 800a56c:	011b      	lsls	r3, r3, #4
 800a56e:	4410      	add	r0, r2
 800a570:	5ac2      	ldrh	r2, [r0, r3]
 800a572:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a576:	52c2      	strh	r2, [r0, r3]
 800a578:	690a      	ldr	r2, [r1, #16]
 800a57a:	2a3e      	cmp	r2, #62	@ 0x3e
 800a57c:	d946      	bls.n	800a60c <USB_EPStartXfer+0x374>
 800a57e:	5ac1      	ldrh	r1, [r0, r3]
 800a580:	0956      	lsrs	r6, r2, #5
 800a582:	06d7      	lsls	r7, r2, #27
 800a584:	bf08      	it	eq
 800a586:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800a58a:	b289      	uxth	r1, r1
 800a58c:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 800a590:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800a594:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800a598:	b289      	uxth	r1, r1
 800a59a:	52c1      	strh	r1, [r0, r3]
 800a59c:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 800a5a0:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 800a5a4:	b280      	uxth	r0, r0
 800a5a6:	4401      	add	r1, r0
 800a5a8:	5ac8      	ldrh	r0, [r1, r3]
 800a5aa:	2a3e      	cmp	r2, #62	@ 0x3e
 800a5ac:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a5b0:	52c8      	strh	r0, [r1, r3]
 800a5b2:	d938      	bls.n	800a626 <USB_EPStartXfer+0x38e>
 800a5b4:	0950      	lsrs	r0, r2, #5
 800a5b6:	06d7      	lsls	r7, r2, #27
 800a5b8:	5aca      	ldrh	r2, [r1, r3]
 800a5ba:	bf08      	it	eq
 800a5bc:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800a5c0:	b292      	uxth	r2, r2
 800a5c2:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800a5c6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800a5ca:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800a5ce:	b292      	uxth	r2, r2
 800a5d0:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 800a5d2:	69eb      	ldr	r3, [r5, #28]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d0a6      	beq.n	800a526 <USB_EPStartXfer+0x28e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a5d8:	f244 0340 	movw	r3, #16448	@ 0x4040
 800a5dc:	782a      	ldrb	r2, [r5, #0]
 800a5de:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a5e2:	ea03 0001 	and.w	r0, r3, r1
 800a5e6:	438b      	bics	r3, r1
 800a5e8:	d001      	beq.n	800a5ee <USB_EPStartXfer+0x356>
 800a5ea:	2800      	cmp	r0, #0
 800a5ec:	d19b      	bne.n	800a526 <USB_EPStartXfer+0x28e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a5ee:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800a5f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a5f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5fa:	041b      	lsls	r3, r3, #16
 800a5fc:	0c1b      	lsrs	r3, r3, #16
 800a5fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a602:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a606:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 800a60a:	e78c      	b.n	800a526 <USB_EPStartXfer+0x28e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a60c:	b90a      	cbnz	r2, 800a612 <USB_EPStartXfer+0x37a>
 800a60e:	5ac1      	ldrh	r1, [r0, r3]
 800a610:	e7be      	b.n	800a590 <USB_EPStartXfer+0x2f8>
 800a612:	07d1      	lsls	r1, r2, #31
 800a614:	5ac1      	ldrh	r1, [r0, r3]
 800a616:	ea4f 0652 	mov.w	r6, r2, lsr #1
 800a61a:	bf48      	it	mi
 800a61c:	3601      	addmi	r6, #1
 800a61e:	b289      	uxth	r1, r1
 800a620:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 800a624:	e7b8      	b.n	800a598 <USB_EPStartXfer+0x300>
 800a626:	b90a      	cbnz	r2, 800a62c <USB_EPStartXfer+0x394>
 800a628:	5aca      	ldrh	r2, [r1, r3]
 800a62a:	e7cc      	b.n	800a5c6 <USB_EPStartXfer+0x32e>
 800a62c:	0850      	lsrs	r0, r2, #1
 800a62e:	07d6      	lsls	r6, r2, #31
 800a630:	5aca      	ldrh	r2, [r1, r3]
 800a632:	bf48      	it	mi
 800a634:	3001      	addmi	r0, #1
 800a636:	b292      	uxth	r2, r2
 800a638:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800a63c:	e7c7      	b.n	800a5ce <USB_EPStartXfer+0x336>
      else if (ep->type == EP_TYPE_ISOC)
 800a63e:	2a01      	cmp	r2, #1
 800a640:	d15d      	bne.n	800a6fe <USB_EPStartXfer+0x466>
        if (ep->xfer_len > ep->maxpacket)
 800a642:	698a      	ldr	r2, [r1, #24]
 800a644:	6909      	ldr	r1, [r1, #16]
 800a646:	428a      	cmp	r2, r1
          ep->xfer_len = 0U;
 800a648:	bf94      	ite	ls
 800a64a:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 800a64c:	1a50      	subhi	r0, r2, r1
 800a64e:	61a8      	str	r0, [r5, #24]
 800a650:	bf88      	it	hi
 800a652:	460a      	movhi	r2, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a654:	2b00      	cmp	r3, #0
 800a656:	f47f af66 	bne.w	800a526 <USB_EPStartXfer+0x28e>
 800a65a:	f8b4 1050 	ldrh.w	r1, [r4, #80]	@ 0x50
 800a65e:	782b      	ldrb	r3, [r5, #0]
 800a660:	b289      	uxth	r1, r1
 800a662:	f204 4004 	addw	r0, r4, #1028	@ 0x404
 800a666:	011b      	lsls	r3, r3, #4
 800a668:	4408      	add	r0, r1
 800a66a:	5ac1      	ldrh	r1, [r0, r3]
 800a66c:	2a3e      	cmp	r2, #62	@ 0x3e
 800a66e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a672:	52c1      	strh	r1, [r0, r3]
 800a674:	d92b      	bls.n	800a6ce <USB_EPStartXfer+0x436>
 800a676:	06d1      	lsls	r1, r2, #27
 800a678:	5ac1      	ldrh	r1, [r0, r3]
 800a67a:	ea4f 1652 	mov.w	r6, r2, lsr #5
 800a67e:	bf08      	it	eq
 800a680:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800a684:	b289      	uxth	r1, r1
 800a686:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 800a68a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800a68e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800a692:	b289      	uxth	r1, r1
 800a694:	52c1      	strh	r1, [r0, r3]
 800a696:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 800a69a:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 800a69e:	b280      	uxth	r0, r0
 800a6a0:	4401      	add	r1, r0
 800a6a2:	5ac8      	ldrh	r0, [r1, r3]
 800a6a4:	2a3e      	cmp	r2, #62	@ 0x3e
 800a6a6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a6aa:	52c8      	strh	r0, [r1, r3]
 800a6ac:	d91b      	bls.n	800a6e6 <USB_EPStartXfer+0x44e>
 800a6ae:	0950      	lsrs	r0, r2, #5
 800a6b0:	06d6      	lsls	r6, r2, #27
 800a6b2:	5aca      	ldrh	r2, [r1, r3]
 800a6b4:	bf08      	it	eq
 800a6b6:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800a6ba:	b292      	uxth	r2, r2
 800a6bc:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800a6c0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800a6c4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800a6c8:	b292      	uxth	r2, r2
 800a6ca:	52ca      	strh	r2, [r1, r3]
 800a6cc:	e72b      	b.n	800a526 <USB_EPStartXfer+0x28e>
 800a6ce:	b90a      	cbnz	r2, 800a6d4 <USB_EPStartXfer+0x43c>
 800a6d0:	5ac1      	ldrh	r1, [r0, r3]
 800a6d2:	e7da      	b.n	800a68a <USB_EPStartXfer+0x3f2>
 800a6d4:	5ac1      	ldrh	r1, [r0, r3]
 800a6d6:	0856      	lsrs	r6, r2, #1
 800a6d8:	07d7      	lsls	r7, r2, #31
 800a6da:	bf48      	it	mi
 800a6dc:	3601      	addmi	r6, #1
 800a6de:	b289      	uxth	r1, r1
 800a6e0:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 800a6e4:	e7d5      	b.n	800a692 <USB_EPStartXfer+0x3fa>
 800a6e6:	b90a      	cbnz	r2, 800a6ec <USB_EPStartXfer+0x454>
 800a6e8:	5aca      	ldrh	r2, [r1, r3]
 800a6ea:	e7e9      	b.n	800a6c0 <USB_EPStartXfer+0x428>
 800a6ec:	0850      	lsrs	r0, r2, #1
 800a6ee:	07d2      	lsls	r2, r2, #31
 800a6f0:	5aca      	ldrh	r2, [r1, r3]
 800a6f2:	bf48      	it	mi
 800a6f4:	3001      	addmi	r0, #1
 800a6f6:	b292      	uxth	r2, r2
 800a6f8:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800a6fc:	e7e4      	b.n	800a6c8 <USB_EPStartXfer+0x430>
        return HAL_ERROR;
 800a6fe:	2001      	movs	r0, #1
 800a700:	e5fb      	b.n	800a2fa <USB_EPStartXfer+0x62>

0800a702 <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a702:	eb00 0042 	add.w	r0, r0, r2, lsl #1
{
 800a706:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a708:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a70c:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 800a70e:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a710:	4607      	mov	r7, r0
  for (count = n; count != 0U; count--)
 800a712:	462e      	mov	r6, r5
 800a714:	3402      	adds	r4, #2
 800a716:	b936      	cbnz	r6, 800a726 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a718:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 800a71a:	bf44      	itt	mi
 800a71c:	f830 3025 	ldrhmi.w	r3, [r0, r5, lsl #2]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a720:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 800a724:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 800a726:	f837 2b04 	ldrh.w	r2, [r7], #4
  for (count = n; count != 0U; count--)
 800a72a:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 800a72c:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a72e:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a732:	0a12      	lsrs	r2, r2, #8
 800a734:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (count = n; count != 0U; count--)
 800a738:	e7ec      	b.n	800a714 <USB_ReadPMA+0x12>

0800a73a <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a73a:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
{
 800a73e:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a740:	b16b      	cbz	r3, 800a75e <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a742:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a746:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 800a74a:	28ff      	cmp	r0, #255	@ 0xff
 800a74c:	d007      	beq.n	800a75e <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	4621      	mov	r1, r4
 800a752:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 800a756:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800a758:	23ff      	movs	r3, #255	@ 0xff
 800a75a:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200

  }
  return USBD_OK;
}
 800a75e:	2000      	movs	r0, #0
 800a760:	bd10      	pop	{r4, pc}
	...

0800a764 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a764:	2343      	movs	r3, #67	@ 0x43
 800a766:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800a768:	4800      	ldr	r0, [pc, #0]	@ (800a76c <USBD_CDC_GetFSCfgDesc+0x8>)
 800a76a:	4770      	bx	lr
 800a76c:	2000005c 	.word	0x2000005c

0800a770 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a770:	2343      	movs	r3, #67	@ 0x43
 800a772:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800a774:	4800      	ldr	r0, [pc, #0]	@ (800a778 <USBD_CDC_GetHSCfgDesc+0x8>)
 800a776:	4770      	bx	lr
 800a778:	200000a0 	.word	0x200000a0

0800a77c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a77c:	2343      	movs	r3, #67	@ 0x43
 800a77e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800a780:	4800      	ldr	r0, [pc, #0]	@ (800a784 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800a782:	4770      	bx	lr
 800a784:	20000018 	.word	0x20000018

0800a788 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a788:	230a      	movs	r3, #10
 800a78a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800a78c:	4800      	ldr	r0, [pc, #0]	@ (800a790 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800a78e:	4770      	bx	lr
 800a790:	2000011c 	.word	0x2000011c

0800a794 <USBD_CDC_DataOut>:
{
 800a794:	b538      	push	{r3, r4, r5, lr}
 800a796:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a798:	f8d0 52b8 	ldr.w	r5, [r0, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a79c:	f000 ff58 	bl	800b650 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 800a7a0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a7a4:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  if (pdev->pClassData != NULL)
 800a7a8:	b14b      	cbz	r3, 800a7be <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a7aa:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 800a7ae:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 800a7b8:	4798      	blx	r3
    return USBD_OK;
 800a7ba:	2000      	movs	r0, #0
}
 800a7bc:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800a7be:	2002      	movs	r0, #2
 800a7c0:	e7fc      	b.n	800a7bc <USBD_CDC_DataOut+0x28>

0800a7c2 <USBD_CDC_DataIn>:
{
 800a7c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a7c4:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  if (pdev->pClassData != NULL)
 800a7c8:	b1ce      	cbz	r6, 800a7fe <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a7ca:	2214      	movs	r2, #20
 800a7cc:	fb02 0201 	mla	r2, r2, r1, r0
 800a7d0:	69d3      	ldr	r3, [r2, #28]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a7d2:	f8d0 52c0 	ldr.w	r5, [r0, #704]	@ 0x2c0
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a7d6:	b173      	cbz	r3, 800a7f6 <USBD_CDC_DataIn+0x34>
 800a7d8:	2728      	movs	r7, #40	@ 0x28
 800a7da:	fb07 5401 	mla	r4, r7, r1, r5
 800a7de:	6a24      	ldr	r4, [r4, #32]
 800a7e0:	fbb3 f5f4 	udiv	r5, r3, r4
 800a7e4:	fb04 3315 	mls	r3, r4, r5, r3
 800a7e8:	b92b      	cbnz	r3, 800a7f6 <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 800a7ea:	61d3      	str	r3, [r2, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	f000 ff1d 	bl	800b62c <USBD_LL_Transmit>
    return USBD_OK;
 800a7f2:	2000      	movs	r0, #0
}
 800a7f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
 800a7fc:	e7f9      	b.n	800a7f2 <USBD_CDC_DataIn+0x30>
    return USBD_FAIL;
 800a7fe:	2002      	movs	r0, #2
 800a800:	e7f8      	b.n	800a7f4 <USBD_CDC_DataIn+0x32>

0800a802 <USBD_CDC_Setup>:
  uint8_t ifalt = 0U;
 800a802:	2300      	movs	r3, #0
{
 800a804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a806:	780f      	ldrb	r7, [r1, #0]
  uint8_t ifalt = 0U;
 800a808:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 800a80c:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a810:	f017 0360 	ands.w	r3, r7, #96	@ 0x60
{
 800a814:	4604      	mov	r4, r0
 800a816:	460d      	mov	r5, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a818:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a81c:	d022      	beq.n	800a864 <USBD_CDC_Setup+0x62>
 800a81e:	2b20      	cmp	r3, #32
 800a820:	d13a      	bne.n	800a898 <USBD_CDC_Setup+0x96>
      if (req->wLength)
 800a822:	88ca      	ldrh	r2, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a824:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 800a826:	b1ba      	cbz	r2, 800a858 <USBD_CDC_Setup+0x56>
        if (req->bmRequest & 0x80U)
 800a828:	0639      	lsls	r1, r7, #24
 800a82a:	d50b      	bpl.n	800a844 <USBD_CDC_Setup+0x42>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a82c:	f8d0 12bc 	ldr.w	r1, [r0, #700]	@ 0x2bc
 800a830:	4618      	mov	r0, r3
 800a832:	688f      	ldr	r7, [r1, #8]
 800a834:	4631      	mov	r1, r6
 800a836:	47b8      	blx	r7
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a838:	4631      	mov	r1, r6
 800a83a:	4620      	mov	r0, r4
 800a83c:	88ea      	ldrh	r2, [r5, #6]
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a83e:	f000 fc29 	bl	800b094 <USBD_CtlSendData>
 800a842:	e006      	b.n	800a852 <USBD_CDC_Setup+0x50>
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a844:	4631      	mov	r1, r6
          hcdc->CmdOpCode = req->bRequest;
 800a846:	f886 3200 	strb.w	r3, [r6, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a84a:	f886 2201 	strb.w	r2, [r6, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a84e:	f000 fc36 	bl	800b0be <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 800a852:	2000      	movs	r0, #0
}
 800a854:	b003      	add	sp, #12
 800a856:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a858:	f8d0 02bc 	ldr.w	r0, [r0, #700]	@ 0x2bc
 800a85c:	6884      	ldr	r4, [r0, #8]
 800a85e:	4618      	mov	r0, r3
 800a860:	47a0      	blx	r4
 800a862:	e7f6      	b.n	800a852 <USBD_CDC_Setup+0x50>
      switch (req->bRequest)
 800a864:	784b      	ldrb	r3, [r1, #1]
 800a866:	2b0a      	cmp	r3, #10
 800a868:	d00a      	beq.n	800a880 <USBD_CDC_Setup+0x7e>
 800a86a:	2b0b      	cmp	r3, #11
 800a86c:	d010      	beq.n	800a890 <USBD_CDC_Setup+0x8e>
 800a86e:	b99b      	cbnz	r3, 800a898 <USBD_CDC_Setup+0x96>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a870:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a874:	2b03      	cmp	r3, #3
 800a876:	d10f      	bne.n	800a898 <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a878:	2202      	movs	r2, #2
 800a87a:	f10d 0106 	add.w	r1, sp, #6
 800a87e:	e7de      	b.n	800a83e <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a880:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a884:	2b03      	cmp	r3, #3
 800a886:	d107      	bne.n	800a898 <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a888:	2201      	movs	r2, #1
 800a88a:	f10d 0105 	add.w	r1, sp, #5
 800a88e:	e7d6      	b.n	800a83e <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a890:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a894:	2b03      	cmp	r3, #3
 800a896:	d0dc      	beq.n	800a852 <USBD_CDC_Setup+0x50>
          USBD_CtlError(pdev, req);
 800a898:	4620      	mov	r0, r4
 800a89a:	4629      	mov	r1, r5
 800a89c:	f000 fbd3 	bl	800b046 <USBD_CtlError>
            ret = USBD_FAIL;
 800a8a0:	2002      	movs	r0, #2
 800a8a2:	e7d7      	b.n	800a854 <USBD_CDC_Setup+0x52>

0800a8a4 <USBD_CDC_DeInit>:
{
 800a8a4:	b538      	push	{r3, r4, r5, lr}
 800a8a6:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a8a8:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a8aa:	2181      	movs	r1, #129	@ 0x81
 800a8ac:	f000 fe89 	bl	800b5c2 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a8b0:	2101      	movs	r1, #1
 800a8b2:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a8b4:	62e5      	str	r5, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a8b6:	f000 fe84 	bl	800b5c2 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a8ba:	2182      	movs	r1, #130	@ 0x82
 800a8bc:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a8be:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a8c2:	f000 fe7e 	bl	800b5c2 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800a8c6:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a8ca:	6425      	str	r5, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 800a8cc:	b14b      	cbz	r3, 800a8e2 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a8ce:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a8d6:	f8d4 02b8 	ldr.w	r0, [r4, #696]	@ 0x2b8
 800a8da:	f000 fec1 	bl	800b660 <USBD_static_free>
    pdev->pClassData = NULL;
 800a8de:	f8c4 52b8 	str.w	r5, [r4, #696]	@ 0x2b8
}
 800a8e2:	2000      	movs	r0, #0
 800a8e4:	bd38      	pop	{r3, r4, r5, pc}

0800a8e6 <USBD_CDC_Init>:
{
 800a8e6:	b570      	push	{r4, r5, r6, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8e8:	7c03      	ldrb	r3, [r0, #16]
{
 800a8ea:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8ec:	bba3      	cbnz	r3, 800a958 <USBD_CDC_Init+0x72>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a8ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a8f2:	2181      	movs	r1, #129	@ 0x81
 800a8f4:	2202      	movs	r2, #2
 800a8f6:	f000 fe58 	bl	800b5aa <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a8fa:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a8fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a900:	62e1      	str	r1, [r4, #44]	@ 0x2c
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a902:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a904:	2202      	movs	r2, #2
 800a906:	4620      	mov	r0, r4
 800a908:	f000 fe4f 	bl	800b5aa <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a90c:	2308      	movs	r3, #8
 800a90e:	2203      	movs	r2, #3
 800a910:	2182      	movs	r1, #130	@ 0x82
 800a912:	4620      	mov	r0, r4
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a914:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a918:	f000 fe47 	bl	800b5aa <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a91c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a920:	6425      	str	r5, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a922:	f000 fe99 	bl	800b658 <USBD_static_malloc>
 800a926:	4606      	mov	r6, r0
 800a928:	f8c4 02b8 	str.w	r0, [r4, #696]	@ 0x2b8
  if (pdev->pClassData == NULL)
 800a92c:	b1f8      	cbz	r0, 800a96e <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a92e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4798      	blx	r3
    hcdc->TxState = 0U;
 800a936:	2300      	movs	r3, #0
 800a938:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
    hcdc->RxState = 0U;
 800a93c:	f8c6 3218 	str.w	r3, [r6, #536]	@ 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a940:	7c23      	ldrb	r3, [r4, #16]
 800a942:	b993      	cbnz	r3, 800a96a <USBD_CDC_Init+0x84>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a944:	f44f 7300 	mov.w	r3, #512	@ 0x200
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a948:	4629      	mov	r1, r5
 800a94a:	4620      	mov	r0, r4
 800a94c:	f8d6 2204 	ldr.w	r2, [r6, #516]	@ 0x204
 800a950:	f000 fe75 	bl	800b63e <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800a954:	2000      	movs	r0, #0
}
 800a956:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a958:	2340      	movs	r3, #64	@ 0x40
 800a95a:	2181      	movs	r1, #129	@ 0x81
 800a95c:	2202      	movs	r2, #2
 800a95e:	f000 fe24 	bl	800b5aa <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a962:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a964:	2340      	movs	r3, #64	@ 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a966:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a968:	e7cb      	b.n	800a902 <USBD_CDC_Init+0x1c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a96a:	2340      	movs	r3, #64	@ 0x40
 800a96c:	e7ec      	b.n	800a948 <USBD_CDC_Init+0x62>
    ret = 1U;
 800a96e:	4628      	mov	r0, r5
 800a970:	e7f1      	b.n	800a956 <USBD_CDC_Init+0x70>

0800a972 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 800a972:	b119      	cbz	r1, 800a97c <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 800a974:	f8c0 12bc 	str.w	r1, [r0, #700]	@ 0x2bc
    ret = USBD_OK;
 800a978:	2000      	movs	r0, #0
 800a97a:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800a97c:	2002      	movs	r0, #2
  }

  return ret;
}
 800a97e:	4770      	bx	lr

0800a980 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a980:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 800a984:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800a986:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a98a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
}
 800a98e:	4770      	bx	lr

0800a990 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800a990:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  return USBD_OK;
}
 800a994:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800a996:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204
}
 800a99a:	4770      	bx	lr

0800a99c <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a99c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 800a9a0:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 800a9a2:	b182      	cbz	r2, 800a9c6 <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 800a9a4:	f8d2 4214 	ldr.w	r4, [r2, #532]	@ 0x214
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	b974      	cbnz	r4, 800a9ca <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a9ac:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a9b0:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a9b4:	2181      	movs	r1, #129	@ 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a9b6:	6303      	str	r3, [r0, #48]	@ 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a9b8:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	f000 fe35 	bl	800b62c <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 800a9c2:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 800a9c4:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800a9c6:	2002      	movs	r0, #2
 800a9c8:	e7fc      	b.n	800a9c4 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	e7fa      	b.n	800a9c4 <USBD_CDC_TransmitPacket+0x28>

0800a9ce <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a9ce:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 800a9d2:	b508      	push	{r3, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a9d4:	b162      	cbz	r2, 800a9f0 <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9d6:	7c03      	ldrb	r3, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a9d8:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9dc:	b933      	cbnz	r3, 800a9ec <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 800a9de:	f44f 7300 	mov.w	r3, #512	@ 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a9e2:	2101      	movs	r1, #1
 800a9e4:	f000 fe2b 	bl	800b63e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a9e8:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 800a9ea:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 800a9ec:	2340      	movs	r3, #64	@ 0x40
 800a9ee:	e7f8      	b.n	800a9e2 <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 800a9f0:	2002      	movs	r0, #2
 800a9f2:	e7fa      	b.n	800a9ea <USBD_CDC_ReceivePacket+0x1c>

0800a9f4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a9f4:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a9f6:	b180      	cbz	r0, 800aa1a <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a9f8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a9fc:	b113      	cbz	r3, 800aa04 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	f8c0 32b4 	str.w	r3, [r0, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aa04:	b109      	cbz	r1, 800aa0a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800aa06:	f8c0 12b0 	str.w	r1, [r0, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa0a:	2301      	movs	r3, #1
  pdev->id = id;
 800aa0c:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa0e:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800aa12:	f000 fd81 	bl	800b518 <USBD_LL_Init>

  return USBD_OK;
 800aa16:	2000      	movs	r0, #0
}
 800aa18:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800aa1a:	2002      	movs	r0, #2
 800aa1c:	e7fc      	b.n	800aa18 <USBD_Init+0x24>

0800aa1e <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 800aa1e:	b119      	cbz	r1, 800aa28 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800aa20:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
    status = USBD_OK;
 800aa24:	2000      	movs	r0, #0
 800aa26:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800aa28:	2002      	movs	r0, #2
  }

  return status;
}
 800aa2a:	4770      	bx	lr

0800aa2c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aa2c:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800aa2e:	f000 fdb3 	bl	800b598 <USBD_LL_Start>

  return USBD_OK;
}
 800aa32:	2000      	movs	r0, #0
 800aa34:	bd08      	pop	{r3, pc}

0800aa36 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800aa36:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800aa38:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800aa3c:	b133      	cbz	r3, 800aa4c <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4798      	blx	r3
 800aa42:	3800      	subs	r0, #0
 800aa44:	bf18      	it	ne
 800aa46:	2001      	movne	r0, #1
 800aa48:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 800aa4a:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800aa4c:	2002      	movs	r0, #2
 800aa4e:	e7fc      	b.n	800aa4a <USBD_SetClassConfig+0x14>

0800aa50 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800aa50:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800aa52:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	4798      	blx	r3

  return USBD_OK;
}
 800aa5a:	2000      	movs	r0, #0
 800aa5c:	bd08      	pop	{r3, pc}

0800aa5e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aa5e:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aa60:	f500 752a 	add.w	r5, r0, #680	@ 0x2a8
{
 800aa64:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aa66:	4628      	mov	r0, r5
 800aa68:	f000 fae2 	bl	800b030 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aa6c:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800aa6e:	f894 12a8 	ldrb.w	r1, [r4, #680]	@ 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 800aa72:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 800aa76:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	@ 0x2ae
 800aa7a:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800aa7e:	f001 031f 	and.w	r3, r1, #31
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d008      	beq.n	800aa98 <USBD_LL_SetupStage+0x3a>
 800aa86:	2b02      	cmp	r3, #2
 800aa88:	d00b      	beq.n	800aaa2 <USBD_LL_SetupStage+0x44>
 800aa8a:	b97b      	cbnz	r3, 800aaac <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800aa8c:	4629      	mov	r1, r5
 800aa8e:	4620      	mov	r0, r4
 800aa90:	f000 f8fa 	bl	800ac88 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 800aa94:	2000      	movs	r0, #0
 800aa96:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800aa98:	4629      	mov	r1, r5
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	f000 fa1c 	bl	800aed8 <USBD_StdItfReq>
      break;
 800aaa0:	e7f8      	b.n	800aa94 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 800aaa2:	4629      	mov	r1, r5
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	f000 fa3b 	bl	800af20 <USBD_StdEPReq>
      break;
 800aaaa:	e7f3      	b.n	800aa94 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aaac:	4620      	mov	r0, r4
 800aaae:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800aab2:	f000 fd8f 	bl	800b5d4 <USBD_LL_StallEP>
      break;
 800aab6:	e7ed      	b.n	800aa94 <USBD_LL_SetupStage+0x36>

0800aab8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aab8:	b570      	push	{r4, r5, r6, lr}
 800aaba:	4604      	mov	r4, r0
 800aabc:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800aabe:	bb39      	cbnz	r1, 800ab10 <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aac0:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800aac4:	2a03      	cmp	r2, #3
 800aac6:	d11c      	bne.n	800ab02 <USBD_LL_DataOutStage+0x4a>
    {
      if (pep->rem_length > pep->maxpacket)
 800aac8:	e9d0 5258 	ldrd	r5, r2, [r0, #352]	@ 0x160
 800aacc:	4295      	cmp	r5, r2
 800aace:	d90b      	bls.n	800aae8 <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -= pep->maxpacket;
 800aad0:	1aad      	subs	r5, r5, r2

        USBD_CtlContinueRx(pdev, pdata,
 800aad2:	42aa      	cmp	r2, r5
 800aad4:	4631      	mov	r1, r6
        pep->rem_length -= pep->maxpacket;
 800aad6:	f8c0 5160 	str.w	r5, [r0, #352]	@ 0x160
        USBD_CtlContinueRx(pdev, pdata,
 800aada:	bf8c      	ite	hi
 800aadc:	b2aa      	uxthhi	r2, r5
 800aade:	b292      	uxthls	r2, r2
 800aae0:	f000 fafa 	bl	800b0d8 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800aae4:	2000      	movs	r0, #0
}
 800aae6:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800aae8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	b123      	cbz	r3, 800aafa <USBD_LL_DataOutStage+0x42>
 800aaf0:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800aaf4:	2a03      	cmp	r2, #3
 800aaf6:	d100      	bne.n	800aafa <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev);
 800aaf8:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800aafa:	4620      	mov	r0, r4
 800aafc:	f000 faf4 	bl	800b0e8 <USBD_CtlSendStatus>
 800ab00:	e7f0      	b.n	800aae4 <USBD_LL_DataOutStage+0x2c>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800ab02:	2a05      	cmp	r2, #5
 800ab04:	d1ee      	bne.n	800aae4 <USBD_LL_DataOutStage+0x2c>
        pdev->ep0_state = USBD_EP0_IDLE;
 800ab06:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800ab0a:	f000 fd63 	bl	800b5d4 <USBD_LL_StallEP>
 800ab0e:	e7e9      	b.n	800aae4 <USBD_LL_DataOutStage+0x2c>
  else if ((pdev->pClass->DataOut != NULL) &&
 800ab10:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800ab14:	699b      	ldr	r3, [r3, #24]
 800ab16:	b12b      	cbz	r3, 800ab24 <USBD_LL_DataOutStage+0x6c>
 800ab18:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800ab1c:	2a03      	cmp	r2, #3
 800ab1e:	d101      	bne.n	800ab24 <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 800ab20:	4798      	blx	r3
 800ab22:	e7df      	b.n	800aae4 <USBD_LL_DataOutStage+0x2c>
    return USBD_FAIL;
 800ab24:	2002      	movs	r0, #2
 800ab26:	e7de      	b.n	800aae6 <USBD_LL_DataOutStage+0x2e>

0800ab28 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ab28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab2a:	4604      	mov	r4, r0
 800ab2c:	4613      	mov	r3, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ab2e:	460f      	mov	r7, r1
 800ab30:	2900      	cmp	r1, #0
 800ab32:	d149      	bne.n	800abc8 <USBD_LL_DataInStage+0xa0>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ab34:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800ab38:	2a02      	cmp	r2, #2
 800ab3a:	d13a      	bne.n	800abb2 <USBD_LL_DataInStage+0x8a>
    {
      if (pep->rem_length > pep->maxpacket)
 800ab3c:	e9d0 5608 	ldrd	r5, r6, [r0, #32]
 800ab40:	42b5      	cmp	r5, r6
 800ab42:	d911      	bls.n	800ab68 <USBD_LL_DataInStage+0x40>
      {
        pep->rem_length -= pep->maxpacket;
 800ab44:	1bad      	subs	r5, r5, r6

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800ab46:	4619      	mov	r1, r3
        pep->rem_length -= pep->maxpacket;
 800ab48:	6205      	str	r5, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800ab4a:	b2aa      	uxth	r2, r5
 800ab4c:	f000 faaf 	bl	800b0ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab50:	463b      	mov	r3, r7
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab52:	461a      	mov	r2, r3
 800ab54:	4619      	mov	r1, r3
 800ab56:	4620      	mov	r0, r4
 800ab58:	f000 fd71 	bl	800b63e <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ab5c:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d02d      	beq.n	800abc0 <USBD_LL_DataInStage+0x98>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800ab64:	2000      	movs	r0, #0
}
 800ab66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ab68:	69c3      	ldr	r3, [r0, #28]
 800ab6a:	fbb3 f5f6 	udiv	r5, r3, r6
 800ab6e:	fb06 3515 	mls	r5, r6, r5, r3
 800ab72:	b965      	cbnz	r5, 800ab8e <USBD_LL_DataInStage+0x66>
 800ab74:	429e      	cmp	r6, r3
 800ab76:	d80a      	bhi.n	800ab8e <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 800ab78:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d206      	bcs.n	800ab8e <USBD_LL_DataInStage+0x66>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ab80:	462a      	mov	r2, r5
 800ab82:	f000 fa94 	bl	800b0ae <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab86:	462b      	mov	r3, r5
          pdev->ep0_data_len = 0U;
 800ab88:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab8c:	e7e1      	b.n	800ab52 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ab8e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 800ab92:	68db      	ldr	r3, [r3, #12]
 800ab94:	b12b      	cbz	r3, 800aba2 <USBD_LL_DataInStage+0x7a>
 800ab96:	f894 229c 	ldrb.w	r2, [r4, #668]	@ 0x29c
 800ab9a:	2a03      	cmp	r2, #3
 800ab9c:	d101      	bne.n	800aba2 <USBD_LL_DataInStage+0x7a>
            pdev->pClass->EP0_TxSent(pdev);
 800ab9e:	4620      	mov	r0, r4
 800aba0:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 800aba2:	2180      	movs	r1, #128	@ 0x80
 800aba4:	4620      	mov	r0, r4
 800aba6:	f000 fd15 	bl	800b5d4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800abaa:	4620      	mov	r0, r4
 800abac:	f000 faa7 	bl	800b0fe <USBD_CtlReceiveStatus>
 800abb0:	e7d4      	b.n	800ab5c <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800abb2:	f032 0304 	bics.w	r3, r2, #4
 800abb6:	d1d1      	bne.n	800ab5c <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 800abb8:	2180      	movs	r1, #128	@ 0x80
 800abba:	f000 fd0b 	bl	800b5d4 <USBD_LL_StallEP>
 800abbe:	e7cd      	b.n	800ab5c <USBD_LL_DataInStage+0x34>
      pdev->dev_test_mode = 0U;
 800abc0:	2300      	movs	r3, #0
 800abc2:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
 800abc6:	e7cd      	b.n	800ab64 <USBD_LL_DataInStage+0x3c>
  else if ((pdev->pClass->DataIn != NULL) &&
 800abc8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800abcc:	695b      	ldr	r3, [r3, #20]
 800abce:	b12b      	cbz	r3, 800abdc <USBD_LL_DataInStage+0xb4>
 800abd0:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800abd4:	2a03      	cmp	r2, #3
 800abd6:	d101      	bne.n	800abdc <USBD_LL_DataInStage+0xb4>
    pdev->pClass->DataIn(pdev, epnum);
 800abd8:	4798      	blx	r3
 800abda:	e7c3      	b.n	800ab64 <USBD_LL_DataInStage+0x3c>
    return USBD_FAIL;
 800abdc:	2002      	movs	r0, #2
 800abde:	e7c2      	b.n	800ab66 <USBD_LL_DataInStage+0x3e>

0800abe0 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800abe0:	2200      	movs	r2, #0
{
 800abe2:	b570      	push	{r4, r5, r6, lr}
 800abe4:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800abe6:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800abe8:	2640      	movs	r6, #64	@ 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800abea:	4611      	mov	r1, r2
 800abec:	2340      	movs	r3, #64	@ 0x40
 800abee:	f000 fcdc 	bl	800b5aa <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800abf2:	4633      	mov	r3, r6
 800abf4:	2180      	movs	r1, #128	@ 0x80
 800abf6:	2200      	movs	r2, #0
 800abf8:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800abfa:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800abfe:	f8c4 6164 	str.w	r6, [r4, #356]	@ 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ac02:	f000 fcd2 	bl	800b5aa <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800ac06:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800ac08:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ac0c:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac0e:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac10:	f884 529c 	strb.w	r5, [r4, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ac14:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ac18:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800ac1a:	f8c4 12a4 	str.w	r1, [r4, #676]	@ 0x2a4
  if (pdev->pClassData)
 800ac1e:	b123      	cbz	r3, 800ac2a <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ac20:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 800ac24:	4620      	mov	r0, r4
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	4798      	blx	r3
  }

  return USBD_OK;
}
 800ac2a:	2000      	movs	r0, #0
 800ac2c:	bd70      	pop	{r4, r5, r6, pc}

0800ac2e <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800ac2e:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800ac30:	2000      	movs	r0, #0
 800ac32:	4770      	bx	lr

0800ac34 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800ac34:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800ac38:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ac3c:	2304      	movs	r3, #4
 800ac3e:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 800ac42:	2000      	movs	r0, #0
 800ac44:	4770      	bx	lr

0800ac46 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ac46:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800ac4a:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800ac4c:	bf04      	itt	eq
 800ac4e:	f890 329d 	ldrbeq.w	r3, [r0, #669]	@ 0x29d
 800ac52:	f880 329c 	strbeq.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 800ac56:	2000      	movs	r0, #0
 800ac58:	4770      	bx	lr

0800ac5a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ac5a:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac5c:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800ac60:	2a03      	cmp	r2, #3
 800ac62:	d104      	bne.n	800ac6e <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 800ac64:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800ac68:	69db      	ldr	r3, [r3, #28]
 800ac6a:	b103      	cbz	r3, 800ac6e <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800ac6c:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 800ac6e:	2000      	movs	r0, #0
 800ac70:	bd08      	pop	{r3, pc}

0800ac72 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 800ac72:	b510      	push	{r4, lr}
 800ac74:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 800ac76:	2180      	movs	r1, #128	@ 0x80
 800ac78:	f000 fcac 	bl	800b5d4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ac7c:	4620      	mov	r0, r4
}
 800ac7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800ac82:	2100      	movs	r1, #0
 800ac84:	f000 bca6 	b.w	800b5d4 <USBD_LL_StallEP>

0800ac88 <USBD_StdDevReq>:
{
 800ac88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac8a:	780b      	ldrb	r3, [r1, #0]
 800ac8c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac8e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ac92:	2b20      	cmp	r3, #32
{
 800ac94:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac96:	d012      	beq.n	800acbe <USBD_StdDevReq+0x36>
 800ac98:	2b40      	cmp	r3, #64	@ 0x40
 800ac9a:	d010      	beq.n	800acbe <USBD_StdDevReq+0x36>
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d151      	bne.n	800ad44 <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 800aca0:	784b      	ldrb	r3, [r1, #1]
 800aca2:	2b09      	cmp	r3, #9
 800aca4:	d84e      	bhi.n	800ad44 <USBD_StdDevReq+0xbc>
 800aca6:	e8df f013 	tbh	[pc, r3, lsl #1]
 800acaa:	00ee      	.short	0x00ee
 800acac:	004d0109 	.word	0x004d0109
 800acb0:	004d0102 	.word	0x004d0102
 800acb4:	00130087 	.word	0x00130087
 800acb8:	00d6004d 	.word	0x00d6004d
 800acbc:	00a3      	.short	0x00a3
      pdev->pClass->Setup(pdev, req);
 800acbe:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 800acc2:	4629      	mov	r1, r5
 800acc4:	4620      	mov	r0, r4
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	4798      	blx	r3
}
 800acca:	2000      	movs	r0, #0
 800accc:	b003      	add	sp, #12
 800acce:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 800acd0:	2300      	movs	r3, #0
 800acd2:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800acd6:	884b      	ldrh	r3, [r1, #2]
 800acd8:	0a1a      	lsrs	r2, r3, #8
 800acda:	3a01      	subs	r2, #1
 800acdc:	2a06      	cmp	r2, #6
 800acde:	d831      	bhi.n	800ad44 <USBD_StdDevReq+0xbc>
 800ace0:	e8df f002 	tbb	[pc, r2]
 800ace4:	30231604 	.word	0x30231604
 800ace8:	4830      	.short	0x4830
 800acea:	52          	.byte	0x52
 800aceb:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800acec:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800acf0:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800acf2:	7c20      	ldrb	r0, [r4, #16]
 800acf4:	f10d 0106 	add.w	r1, sp, #6
 800acf8:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 800acfa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800acfe:	88eb      	ldrh	r3, [r5, #6]
 800ad00:	2a00      	cmp	r2, #0
 800ad02:	d055      	beq.n	800adb0 <USBD_StdDevReq+0x128>
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d14a      	bne.n	800ad9e <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 800ad08:	4620      	mov	r0, r4
 800ad0a:	f000 f9ed 	bl	800b0e8 <USBD_CtlSendStatus>
 800ad0e:	e7dc      	b.n	800acca <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad10:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 800ad12:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad16:	b932      	cbnz	r2, 800ad26 <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ad18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ad1a:	f10d 0006 	add.w	r0, sp, #6
 800ad1e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad20:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ad22:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800ad24:	e7e9      	b.n	800acfa <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ad26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad28:	e7f7      	b.n	800ad1a <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	2b05      	cmp	r3, #5
 800ad2e:	d809      	bhi.n	800ad44 <USBD_StdDevReq+0xbc>
 800ad30:	e8df f003 	tbb	[pc, r3]
 800ad34:	14100c03 	.word	0x14100c03
 800ad38:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ad3a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800ad3e:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d1d6      	bne.n	800acf2 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 800ad44:	4620      	mov	r0, r4
 800ad46:	f7ff ff94 	bl	800ac72 <USBD_CtlError.constprop.0>
        break;
 800ad4a:	e7be      	b.n	800acca <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ad4c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800ad50:	689b      	ldr	r3, [r3, #8]
 800ad52:	e7f5      	b.n	800ad40 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ad54:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	e7f1      	b.n	800ad40 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad5c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	e7ed      	b.n	800ad40 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ad64:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800ad68:	695b      	ldr	r3, [r3, #20]
 800ad6a:	e7e9      	b.n	800ad40 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ad6c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800ad70:	699b      	ldr	r3, [r3, #24]
 800ad72:	e7e5      	b.n	800ad40 <USBD_StdDevReq+0xb8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad74:	7c03      	ldrb	r3, [r0, #16]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d1e4      	bne.n	800ad44 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ad7a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800ad7e:	f10d 0006 	add.w	r0, sp, #6
 800ad82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad84:	4798      	blx	r3
  if (err != 0U)
 800ad86:	e7b8      	b.n	800acfa <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad88:	7c03      	ldrb	r3, [r0, #16]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d1da      	bne.n	800ad44 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ad8e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800ad92:	f10d 0006 	add.w	r0, sp, #6
 800ad96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad98:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ad9a:	2307      	movs	r3, #7
 800ad9c:	e7c1      	b.n	800ad22 <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	bf28      	it	cs
 800ada2:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ada4:	4601      	mov	r1, r0
 800ada6:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800ada8:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800adac:	f000 f972 	bl	800b094 <USBD_CtlSendData>
    if (req->wLength == 0U)
 800adb0:	88eb      	ldrh	r3, [r5, #6]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d189      	bne.n	800acca <USBD_StdDevReq+0x42>
 800adb6:	e7a7      	b.n	800ad08 <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800adb8:	888b      	ldrh	r3, [r1, #4]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d1c2      	bne.n	800ad44 <USBD_StdDevReq+0xbc>
 800adbe:	88cb      	ldrh	r3, [r1, #6]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d1bf      	bne.n	800ad44 <USBD_StdDevReq+0xbc>
 800adc4:	884d      	ldrh	r5, [r1, #2]
 800adc6:	2d7f      	cmp	r5, #127	@ 0x7f
 800adc8:	d8bc      	bhi.n	800ad44 <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adca:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800adce:	2b03      	cmp	r3, #3
 800add0:	d0b8      	beq.n	800ad44 <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800add2:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800add4:	f880 129e 	strb.w	r1, [r0, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800add8:	f000 fc1f 	bl	800b61a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800addc:	4620      	mov	r0, r4
 800adde:	f000 f983 	bl	800b0e8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800ade2:	b11d      	cbz	r5, 800adec <USBD_StdDevReq+0x164>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ade4:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ade6:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800adea:	e76e      	b.n	800acca <USBD_StdDevReq+0x42>
 800adec:	2301      	movs	r3, #1
 800adee:	e7fa      	b.n	800ade6 <USBD_StdDevReq+0x15e>
  cfgidx = (uint8_t)(req->wValue);
 800adf0:	7889      	ldrb	r1, [r1, #2]
 800adf2:	4d38      	ldr	r5, [pc, #224]	@ (800aed4 <USBD_StdDevReq+0x24c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800adf4:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800adf6:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800adf8:	d8a4      	bhi.n	800ad44 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 800adfa:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800adfe:	2b02      	cmp	r3, #2
 800ae00:	d008      	beq.n	800ae14 <USBD_StdDevReq+0x18c>
 800ae02:	2b03      	cmp	r3, #3
 800ae04:	d015      	beq.n	800ae32 <USBD_StdDevReq+0x1aa>
        USBD_CtlError(pdev, req);
 800ae06:	f7ff ff34 	bl	800ac72 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	7829      	ldrb	r1, [r5, #0]
 800ae0e:	f7ff fe1f 	bl	800aa50 <USBD_ClrClassConfig>
        break;
 800ae12:	e75a      	b.n	800acca <USBD_StdDevReq+0x42>
        if (cfgidx)
 800ae14:	2900      	cmp	r1, #0
 800ae16:	f43f af77 	beq.w	800ad08 <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 800ae1a:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ae1c:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 800ae1e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ae20:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ae24:	4620      	mov	r0, r4
 800ae26:	f7ff fe06 	bl	800aa36 <USBD_SetClassConfig>
 800ae2a:	2802      	cmp	r0, #2
 800ae2c:	f47f af6c 	bne.w	800ad08 <USBD_StdDevReq+0x80>
 800ae30:	e788      	b.n	800ad44 <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 800ae32:	b931      	cbnz	r1, 800ae42 <USBD_StdDevReq+0x1ba>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae34:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800ae36:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae38:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 800ae3c:	f7ff fe08 	bl	800aa50 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ae40:	e762      	b.n	800ad08 <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 800ae42:	6841      	ldr	r1, [r0, #4]
 800ae44:	2901      	cmp	r1, #1
 800ae46:	f43f af5f 	beq.w	800ad08 <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae4a:	b2c9      	uxtb	r1, r1
 800ae4c:	f7ff fe00 	bl	800aa50 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800ae50:	7829      	ldrb	r1, [r5, #0]
 800ae52:	6061      	str	r1, [r4, #4]
 800ae54:	e7e6      	b.n	800ae24 <USBD_StdDevReq+0x19c>
  if (req->wLength != 1U)
 800ae56:	88ca      	ldrh	r2, [r1, #6]
 800ae58:	2a01      	cmp	r2, #1
 800ae5a:	f47f af73 	bne.w	800ad44 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 800ae5e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800ae62:	2b02      	cmp	r3, #2
 800ae64:	d80a      	bhi.n	800ae7c <USBD_StdDevReq+0x1f4>
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	f43f af6c 	beq.w	800ad44 <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 800ae6c:	4601      	mov	r1, r0
 800ae6e:	2300      	movs	r3, #0
 800ae70:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ae74:	4620      	mov	r0, r4
 800ae76:	f000 f90d 	bl	800b094 <USBD_CtlSendData>
      break;
 800ae7a:	e726      	b.n	800acca <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 800ae7c:	2b03      	cmp	r3, #3
 800ae7e:	f47f af61 	bne.w	800ad44 <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ae82:	1d01      	adds	r1, r0, #4
 800ae84:	e7f6      	b.n	800ae74 <USBD_StdDevReq+0x1ec>
  switch (pdev->dev_state)
 800ae86:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	2b02      	cmp	r3, #2
 800ae8e:	f63f af59 	bhi.w	800ad44 <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 800ae92:	88ca      	ldrh	r2, [r1, #6]
 800ae94:	2a02      	cmp	r2, #2
 800ae96:	f47f af55 	bne.w	800ad44 <USBD_StdDevReq+0xbc>
      if (pdev->dev_remote_wakeup)
 800ae9a:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 800ae9e:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	bf0c      	ite	eq
 800aea4:	2301      	moveq	r3, #1
 800aea6:	2303      	movne	r3, #3
 800aea8:	f841 3f0c 	str.w	r3, [r1, #12]!
 800aeac:	e7e2      	b.n	800ae74 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aeae:	884b      	ldrh	r3, [r1, #2]
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	f47f af0a 	bne.w	800acca <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 800aeb6:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
 800aeba:	e725      	b.n	800ad08 <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 800aebc:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800aec0:	3b01      	subs	r3, #1
 800aec2:	2b02      	cmp	r3, #2
 800aec4:	f63f af3e 	bhi.w	800ad44 <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aec8:	884b      	ldrh	r3, [r1, #2]
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	f47f aefd 	bne.w	800acca <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 800aed0:	2300      	movs	r3, #0
 800aed2:	e7f0      	b.n	800aeb6 <USBD_StdDevReq+0x22e>
 800aed4:	2000243c 	.word	0x2000243c

0800aed8 <USBD_StdItfReq>:
{
 800aed8:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aeda:	780b      	ldrb	r3, [r1, #0]
{
 800aedc:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aede:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800aee2:	065b      	lsls	r3, r3, #25
{
 800aee4:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aee6:	d501      	bpl.n	800aeec <USBD_StdItfReq+0x14>
 800aee8:	2a40      	cmp	r2, #64	@ 0x40
 800aeea:	d115      	bne.n	800af18 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 800aeec:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800aef0:	3b01      	subs	r3, #1
 800aef2:	2b02      	cmp	r3, #2
 800aef4:	d810      	bhi.n	800af18 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aef6:	792b      	ldrb	r3, [r5, #4]
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d80d      	bhi.n	800af18 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aefc:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 800af00:	4629      	mov	r1, r5
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	4620      	mov	r0, r4
 800af06:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800af08:	88eb      	ldrh	r3, [r5, #6]
 800af0a:	b91b      	cbnz	r3, 800af14 <USBD_StdItfReq+0x3c>
 800af0c:	b910      	cbnz	r0, 800af14 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 800af0e:	4620      	mov	r0, r4
 800af10:	f000 f8ea 	bl	800b0e8 <USBD_CtlSendStatus>
}
 800af14:	2000      	movs	r0, #0
 800af16:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 800af18:	4620      	mov	r0, r4
 800af1a:	f7ff feaa 	bl	800ac72 <USBD_CtlError.constprop.0>
          break;
 800af1e:	e7f9      	b.n	800af14 <USBD_StdItfReq+0x3c>

0800af20 <USBD_StdEPReq>:
{
 800af20:	b538      	push	{r3, r4, r5, lr}
 800af22:	780a      	ldrb	r2, [r1, #0]
 800af24:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 800af26:	f002 0260 	and.w	r2, r2, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af2a:	2a20      	cmp	r2, #32
{
 800af2c:	460b      	mov	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 800af2e:	888d      	ldrh	r5, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af30:	d026      	beq.n	800af80 <USBD_StdEPReq+0x60>
 800af32:	2a40      	cmp	r2, #64	@ 0x40
 800af34:	d024      	beq.n	800af80 <USBD_StdEPReq+0x60>
 800af36:	bb8a      	cbnz	r2, 800af9c <USBD_StdEPReq+0x7c>
      switch (req->bRequest)
 800af38:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800af3a:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 800af3c:	2a01      	cmp	r2, #1
 800af3e:	d03d      	beq.n	800afbc <USBD_StdEPReq+0x9c>
 800af40:	2a03      	cmp	r2, #3
 800af42:	d025      	beq.n	800af90 <USBD_StdEPReq+0x70>
 800af44:	bb52      	cbnz	r2, 800af9c <USBD_StdEPReq+0x7c>
          switch (pdev->dev_state)
 800af46:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800af4a:	2b02      	cmp	r3, #2
 800af4c:	d04d      	beq.n	800afea <USBD_StdEPReq+0xca>
 800af4e:	2b03      	cmp	r3, #3
 800af50:	d124      	bne.n	800af9c <USBD_StdEPReq+0x7c>
              if ((ep_addr & 0x80U) == 0x80U)
 800af52:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800af54:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 800af58:	f015 0f80 	tst.w	r5, #128	@ 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800af5c:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 800af60:	d053      	beq.n	800b00a <USBD_StdEPReq+0xea>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800af62:	699b      	ldr	r3, [r3, #24]
 800af64:	b1d3      	cbz	r3, 800af9c <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af66:	2514      	movs	r5, #20
 800af68:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 800af6c:	fb03 5505 	mla	r5, r3, r5, r5
 800af70:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800af72:	064b      	lsls	r3, r1, #25
 800af74:	d155      	bne.n	800b022 <USBD_StdEPReq+0x102>
{
 800af76:	2300      	movs	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800af78:	2202      	movs	r2, #2
 800af7a:	4629      	mov	r1, r5
                pep->status = 0x0000U;
 800af7c:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800af7e:	e040      	b.n	800b002 <USBD_StdEPReq+0xe2>
      pdev->pClass->Setup(pdev, req);
 800af80:	f8d4 22b4 	ldr.w	r2, [r4, #692]	@ 0x2b4
 800af84:	4619      	mov	r1, r3
 800af86:	4620      	mov	r0, r4
 800af88:	6892      	ldr	r2, [r2, #8]
 800af8a:	4790      	blx	r2
}
 800af8c:	2000      	movs	r0, #0
 800af8e:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 800af90:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800af94:	2a02      	cmp	r2, #2
 800af96:	d01f      	beq.n	800afd8 <USBD_StdEPReq+0xb8>
 800af98:	2a03      	cmp	r2, #3
 800af9a:	d003      	beq.n	800afa4 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 800af9c:	4620      	mov	r0, r4
 800af9e:	f7ff fe68 	bl	800ac72 <USBD_CtlError.constprop.0>
              break;
 800afa2:	e7f3      	b.n	800af8c <USBD_StdEPReq+0x6c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800afa4:	885a      	ldrh	r2, [r3, #2]
 800afa6:	b92a      	cbnz	r2, 800afb4 <USBD_StdEPReq+0x94>
                if ((ep_addr != 0x00U) &&
 800afa8:	064a      	lsls	r2, r1, #25
 800afaa:	d003      	beq.n	800afb4 <USBD_StdEPReq+0x94>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800afac:	88db      	ldrh	r3, [r3, #6]
 800afae:	b90b      	cbnz	r3, 800afb4 <USBD_StdEPReq+0x94>
                  USBD_LL_StallEP(pdev, ep_addr);
 800afb0:	f000 fb10 	bl	800b5d4 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 800afb4:	4620      	mov	r0, r4
 800afb6:	f000 f897 	bl	800b0e8 <USBD_CtlSendStatus>
              break;
 800afba:	e7e7      	b.n	800af8c <USBD_StdEPReq+0x6c>
          switch (pdev->dev_state)
 800afbc:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800afc0:	2a02      	cmp	r2, #2
 800afc2:	d009      	beq.n	800afd8 <USBD_StdEPReq+0xb8>
 800afc4:	2a03      	cmp	r2, #3
 800afc6:	d1e9      	bne.n	800af9c <USBD_StdEPReq+0x7c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800afc8:	885b      	ldrh	r3, [r3, #2]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d1de      	bne.n	800af8c <USBD_StdEPReq+0x6c>
                if ((ep_addr & 0x7FU) != 0x00U)
 800afce:	064d      	lsls	r5, r1, #25
 800afd0:	d0f0      	beq.n	800afb4 <USBD_StdEPReq+0x94>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800afd2:	f000 fb08 	bl	800b5e6 <USBD_LL_ClearStallEP>
 800afd6:	e7ed      	b.n	800afb4 <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afd8:	064b      	lsls	r3, r1, #25
 800afda:	d0df      	beq.n	800af9c <USBD_StdEPReq+0x7c>
                USBD_LL_StallEP(pdev, ep_addr);
 800afdc:	f000 fafa 	bl	800b5d4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800afe0:	2180      	movs	r1, #128	@ 0x80
 800afe2:	4620      	mov	r0, r4
 800afe4:	f000 faf6 	bl	800b5d4 <USBD_LL_StallEP>
 800afe8:	e7d0      	b.n	800af8c <USBD_StdEPReq+0x6c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afea:	0649      	lsls	r1, r1, #25
 800afec:	d1d6      	bne.n	800af9c <USBD_StdEPReq+0x7c>
              pep->status = 0x0000U;
 800afee:	2300      	movs	r3, #0
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aff0:	062a      	lsls	r2, r5, #24
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800aff2:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aff6:	bf4c      	ite	mi
 800aff8:	f100 0114 	addmi.w	r1, r0, #20
 800affc:	f500 71aa 	addpl.w	r1, r0, #340	@ 0x154
              pep->status = 0x0000U;
 800b000:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b002:	4620      	mov	r0, r4
 800b004:	f000 f846 	bl	800b094 <USBD_CtlSendData>
              break;
 800b008:	e7c0      	b.n	800af8c <USBD_StdEPReq+0x6c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b00a:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d0c4      	beq.n	800af9c <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b012:	2314      	movs	r3, #20
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b014:	f001 057f 	and.w	r5, r1, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b018:	fb03 0505 	mla	r5, r3, r5, r0
 800b01c:	f505 75aa 	add.w	r5, r5, #340	@ 0x154
 800b020:	e7a7      	b.n	800af72 <USBD_StdEPReq+0x52>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b022:	4620      	mov	r0, r4
 800b024:	f000 fae8 	bl	800b5f8 <USBD_LL_IsStallEP>
 800b028:	2800      	cmp	r0, #0
 800b02a:	d0a4      	beq.n	800af76 <USBD_StdEPReq+0x56>
 800b02c:	2301      	movs	r3, #1
 800b02e:	e7a3      	b.n	800af78 <USBD_StdEPReq+0x58>

0800b030 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 800b030:	780b      	ldrb	r3, [r1, #0]
 800b032:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b034:	784b      	ldrb	r3, [r1, #1]
 800b036:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b038:	884b      	ldrh	r3, [r1, #2]
 800b03a:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b03c:	888b      	ldrh	r3, [r1, #4]
 800b03e:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b040:	88cb      	ldrh	r3, [r1, #6]
 800b042:	80c3      	strh	r3, [r0, #6]
}
 800b044:	4770      	bx	lr

0800b046 <USBD_CtlError>:
{
 800b046:	b510      	push	{r4, lr}
 800b048:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 800b04a:	2180      	movs	r1, #128	@ 0x80
 800b04c:	f000 fac2 	bl	800b5d4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b050:	4620      	mov	r0, r4
}
 800b052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800b056:	2100      	movs	r1, #0
 800b058:	f000 babc 	b.w	800b5d4 <USBD_LL_StallEP>

0800b05c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b05c:	b570      	push	{r4, r5, r6, lr}
 800b05e:	460d      	mov	r5, r1
 800b060:	4616      	mov	r6, r2
  uint8_t idx = 0U;

  if (desc != NULL)
 800b062:	4604      	mov	r4, r0
 800b064:	b170      	cbz	r0, 800b084 <USBD_GetString+0x28>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 800b066:	f7fa f87d 	bl	8005164 <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b06a:	b2c3      	uxtb	r3, r0
 800b06c:	3301      	adds	r3, #1
 800b06e:	005b      	lsls	r3, r3, #1
 800b070:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b072:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b074:	2303      	movs	r3, #3
      unicode[idx++] =  0U;
 800b076:	2000      	movs	r0, #0
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b078:	706b      	strb	r3, [r5, #1]
 800b07a:	2302      	movs	r3, #2
 800b07c:	3c01      	subs	r4, #1
    while (*desc != '\0')
 800b07e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800b082:	b901      	cbnz	r1, 800b086 <USBD_GetString+0x2a>
}
 800b084:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 800b086:	1c5a      	adds	r2, r3, #1
 800b088:	54e9      	strb	r1, [r5, r3]
 800b08a:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 800b08c:	3302      	adds	r3, #2
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	54a8      	strb	r0, [r5, r2]
 800b092:	e7f4      	b.n	800b07e <USBD_GetString+0x22>

0800b094 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b094:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b096:	2202      	movs	r2, #2
{
 800b098:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 800b09a:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b09e:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b0a2:	460a      	mov	r2, r1
 800b0a4:	2100      	movs	r1, #0
 800b0a6:	f000 fac1 	bl	800b62c <USBD_LL_Transmit>

  return USBD_OK;
}
 800b0aa:	2000      	movs	r0, #0
 800b0ac:	bd10      	pop	{r4, pc}

0800b0ae <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b0ae:	b508      	push	{r3, lr}
 800b0b0:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b0b2:	460a      	mov	r2, r1
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	f000 fab9 	bl	800b62c <USBD_LL_Transmit>

  return USBD_OK;
}
 800b0ba:	2000      	movs	r0, #0
 800b0bc:	bd08      	pop	{r3, pc}

0800b0be <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b0be:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b0c0:	2203      	movs	r2, #3
{
 800b0c2:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 800b0c4:	e9c0 3357 	strd	r3, r3, [r0, #348]	@ 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b0c8:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b0cc:	460a      	mov	r2, r1
 800b0ce:	2100      	movs	r1, #0
 800b0d0:	f000 fab5 	bl	800b63e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	bd10      	pop	{r4, pc}

0800b0d8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b0d8:	b508      	push	{r3, lr}
 800b0da:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b0dc:	460a      	mov	r2, r1
 800b0de:	2100      	movs	r1, #0
 800b0e0:	f000 faad 	bl	800b63e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800b0e4:	2000      	movs	r0, #0
 800b0e6:	bd08      	pop	{r3, pc}

0800b0e8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b0e8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b0ea:	2304      	movs	r3, #4
 800b0ec:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	f000 fa99 	bl	800b62c <USBD_LL_Transmit>

  return USBD_OK;
}
 800b0fa:	2000      	movs	r0, #0
 800b0fc:	bd08      	pop	{r3, pc}

0800b0fe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b0fe:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b100:	2305      	movs	r3, #5
 800b102:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b106:	2300      	movs	r3, #0
 800b108:	461a      	mov	r2, r3
 800b10a:	4619      	mov	r1, r3
 800b10c:	f000 fa97 	bl	800b63e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800b110:	2000      	movs	r0, #0
 800b112:	bd08      	pop	{r3, pc}

0800b114 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b114:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b116:	2200      	movs	r2, #0
 800b118:	490e      	ldr	r1, [pc, #56]	@ (800b154 <MX_USB_DEVICE_Init+0x40>)
 800b11a:	480f      	ldr	r0, [pc, #60]	@ (800b158 <MX_USB_DEVICE_Init+0x44>)
 800b11c:	f7ff fc6a 	bl	800a9f4 <USBD_Init>
 800b120:	b108      	cbz	r0, 800b126 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 800b122:	f7fa fe9d 	bl	8005e60 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b126:	490d      	ldr	r1, [pc, #52]	@ (800b15c <MX_USB_DEVICE_Init+0x48>)
 800b128:	480b      	ldr	r0, [pc, #44]	@ (800b158 <MX_USB_DEVICE_Init+0x44>)
 800b12a:	f7ff fc78 	bl	800aa1e <USBD_RegisterClass>
 800b12e:	b108      	cbz	r0, 800b134 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 800b130:	f7fa fe96 	bl	8005e60 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b134:	490a      	ldr	r1, [pc, #40]	@ (800b160 <MX_USB_DEVICE_Init+0x4c>)
 800b136:	4808      	ldr	r0, [pc, #32]	@ (800b158 <MX_USB_DEVICE_Init+0x44>)
 800b138:	f7ff fc1b 	bl	800a972 <USBD_CDC_RegisterInterface>
 800b13c:	b108      	cbz	r0, 800b142 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800b13e:	f7fa fe8f 	bl	8005e60 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b142:	4805      	ldr	r0, [pc, #20]	@ (800b158 <MX_USB_DEVICE_Init+0x44>)
 800b144:	f7ff fc72 	bl	800aa2c <USBD_Start>
 800b148:	b118      	cbz	r0, 800b152 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b14a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800b14e:	f7fa be87 	b.w	8005e60 <Error_Handler>
}
 800b152:	bd08      	pop	{r3, pc}
 800b154:	20000178 	.word	0x20000178
 800b158:	20002440 	.word	0x20002440
 800b15c:	200000e4 	.word	0x200000e4
 800b160:	20000128 	.word	0x20000128

0800b164 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
    /* USER CODE BEGIN 4 */
    return (USBD_OK);
    /* USER CODE END 4 */
}
 800b164:	2000      	movs	r0, #0
 800b166:	4770      	bx	lr

0800b168 <CDC_Control_FS>:
 * USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
    /* USER CODE BEGIN 5 */
    switch (cmd)
 800b168:	2820      	cmp	r0, #32
 800b16a:	d003      	beq.n	800b174 <CDC_Control_FS+0xc>
 800b16c:	2821      	cmp	r0, #33	@ 0x21
 800b16e:	d017      	beq.n	800b1a0 <CDC_Control_FS+0x38>
        break;
    }

    return (USBD_OK);
    /* USER CODE END 5 */
}
 800b170:	2000      	movs	r0, #0
 800b172:	4770      	bx	lr
        LineCoding.bitrate = (uint32_t)(pbuf[0]);
 800b174:	780b      	ldrb	r3, [r1, #0]
 800b176:	4a13      	ldr	r2, [pc, #76]	@ (800b1c4 <CDC_Control_FS+0x5c>)
 800b178:	6013      	str	r3, [r2, #0]
        LineCoding.bitrate |= (uint32_t)(pbuf[1] << 8);
 800b17a:	7848      	ldrb	r0, [r1, #1]
 800b17c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800b180:	6013      	str	r3, [r2, #0]
        LineCoding.bitrate |= (uint32_t)(pbuf[2] << 16);
 800b182:	7888      	ldrb	r0, [r1, #2]
 800b184:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b188:	6013      	str	r3, [r2, #0]
        LineCoding.bitrate |= (uint32_t)(pbuf[3] << 24);
 800b18a:	78c8      	ldrb	r0, [r1, #3]
 800b18c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800b190:	6013      	str	r3, [r2, #0]
        LineCoding.format     = pbuf[4];
 800b192:	790b      	ldrb	r3, [r1, #4]
 800b194:	7113      	strb	r3, [r2, #4]
        LineCoding.paritytype = pbuf[5];
 800b196:	794b      	ldrb	r3, [r1, #5]
 800b198:	7153      	strb	r3, [r2, #5]
        LineCoding.datatype   = pbuf[6];
 800b19a:	798b      	ldrb	r3, [r1, #6]
 800b19c:	7193      	strb	r3, [r2, #6]
        break;
 800b19e:	e7e7      	b.n	800b170 <CDC_Control_FS+0x8>
        pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800b1a0:	4b08      	ldr	r3, [pc, #32]	@ (800b1c4 <CDC_Control_FS+0x5c>)
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	700a      	strb	r2, [r1, #0]
        pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	0a12      	lsrs	r2, r2, #8
 800b1aa:	704a      	strb	r2, [r1, #1]
        pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800b1ac:	885a      	ldrh	r2, [r3, #2]
 800b1ae:	708a      	strb	r2, [r1, #2]
        pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800b1b0:	78da      	ldrb	r2, [r3, #3]
 800b1b2:	70ca      	strb	r2, [r1, #3]
        pbuf[4] = LineCoding.format;
 800b1b4:	791a      	ldrb	r2, [r3, #4]
 800b1b6:	710a      	strb	r2, [r1, #4]
        pbuf[5] = LineCoding.paritytype;
 800b1b8:	795a      	ldrb	r2, [r3, #5]
 800b1ba:	714a      	strb	r2, [r1, #5]
        pbuf[6] = LineCoding.datatype;
 800b1bc:	799b      	ldrb	r3, [r3, #6]
 800b1be:	718b      	strb	r3, [r1, #6]
        break;
 800b1c0:	e7d6      	b.n	800b170 <CDC_Control_FS+0x8>
 800b1c2:	bf00      	nop
 800b1c4:	2000013c 	.word	0x2000013c

0800b1c8 <CDC_Init_FS>:
{
 800b1c8:	b510      	push	{r4, lr}
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b1ca:	4c06      	ldr	r4, [pc, #24]	@ (800b1e4 <CDC_Init_FS+0x1c>)
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	4905      	ldr	r1, [pc, #20]	@ (800b1e8 <CDC_Init_FS+0x20>)
 800b1d2:	f7ff fbd5 	bl	800a980 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b1d6:	4620      	mov	r0, r4
 800b1d8:	4904      	ldr	r1, [pc, #16]	@ (800b1ec <CDC_Init_FS+0x24>)
 800b1da:	f7ff fbd9 	bl	800a990 <USBD_CDC_SetRxBuffer>
}
 800b1de:	2000      	movs	r0, #0
 800b1e0:	bd10      	pop	{r4, pc}
 800b1e2:	bf00      	nop
 800b1e4:	20002440 	.word	0x20002440
 800b1e8:	20002704 	.word	0x20002704
 800b1ec:	20002904 	.word	0x20002904

0800b1f0 <cdcAvailable>:
    ret = (rx_in - rx_out) % rx_len;
 800b1f0:	4b05      	ldr	r3, [pc, #20]	@ (800b208 <cdcAvailable+0x18>)
 800b1f2:	4a06      	ldr	r2, [pc, #24]	@ (800b20c <cdcAvailable+0x1c>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	6812      	ldr	r2, [r2, #0]
 800b1f8:	1a9b      	subs	r3, r3, r2
 800b1fa:	4a05      	ldr	r2, [pc, #20]	@ (800b210 <cdcAvailable+0x20>)
 800b1fc:	6812      	ldr	r2, [r2, #0]
 800b1fe:	fbb3 f0f2 	udiv	r0, r3, r2
}
 800b202:	fb02 3010 	mls	r0, r2, r0, r3
 800b206:	4770      	bx	lr
 800b208:	20002d0c 	.word	0x20002d0c
 800b20c:	20002d08 	.word	0x20002d08
 800b210:	20000138 	.word	0x20000138

0800b214 <cdcRead>:
{
 800b214:	b510      	push	{r4, lr}
    ret = rx_buf[rx_out];
 800b216:	4a08      	ldr	r2, [pc, #32]	@ (800b238 <cdcRead+0x24>)
 800b218:	4908      	ldr	r1, [pc, #32]	@ (800b23c <cdcRead+0x28>)
 800b21a:	6813      	ldr	r3, [r2, #0]
 800b21c:	5cc8      	ldrb	r0, [r1, r3]
    if (rx_out != rx_in)
 800b21e:	4908      	ldr	r1, [pc, #32]	@ (800b240 <cdcRead+0x2c>)
 800b220:	6809      	ldr	r1, [r1, #0]
 800b222:	428b      	cmp	r3, r1
 800b224:	d007      	beq.n	800b236 <cdcRead+0x22>
        rx_out = (rx_out + 1) % rx_len;
 800b226:	4907      	ldr	r1, [pc, #28]	@ (800b244 <cdcRead+0x30>)
 800b228:	3301      	adds	r3, #1
 800b22a:	6809      	ldr	r1, [r1, #0]
 800b22c:	fbb3 f4f1 	udiv	r4, r3, r1
 800b230:	fb01 3314 	mls	r3, r1, r4, r3
 800b234:	6013      	str	r3, [r2, #0]
}
 800b236:	bd10      	pop	{r4, pc}
 800b238:	20002d08 	.word	0x20002d08
 800b23c:	20002b05 	.word	0x20002b05
 800b240:	20002d0c 	.word	0x20002d0c
 800b244:	20000138 	.word	0x20000138

0800b248 <cdcDataIn>:
    rx_buf[rx_in] = rx_data;
 800b248:	4a08      	ldr	r2, [pc, #32]	@ (800b26c <cdcDataIn+0x24>)
 800b24a:	4909      	ldr	r1, [pc, #36]	@ (800b270 <cdcDataIn+0x28>)
 800b24c:	6813      	ldr	r3, [r2, #0]
 800b24e:	54c8      	strb	r0, [r1, r3]
    next_rx_in = (rx_in + 1) % rx_len;
 800b250:	4908      	ldr	r1, [pc, #32]	@ (800b274 <cdcDataIn+0x2c>)
 800b252:	3301      	adds	r3, #1
 800b254:	6809      	ldr	r1, [r1, #0]
 800b256:	fbb3 f0f1 	udiv	r0, r3, r1
 800b25a:	fb01 3310 	mls	r3, r1, r0, r3
    if (next_rx_in != rx_out)
 800b25e:	4906      	ldr	r1, [pc, #24]	@ (800b278 <cdcDataIn+0x30>)
 800b260:	6809      	ldr	r1, [r1, #0]
 800b262:	4299      	cmp	r1, r3
        rx_in = next_rx_in;
 800b264:	bf18      	it	ne
 800b266:	6013      	strne	r3, [r2, #0]
}
 800b268:	4770      	bx	lr
 800b26a:	bf00      	nop
 800b26c:	20002d0c 	.word	0x20002d0c
 800b270:	20002b05 	.word	0x20002b05
 800b274:	20000138 	.word	0x20000138
 800b278:	20002d08 	.word	0x20002d08

0800b27c <CDC_Receive_FS>:
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len)
{
 800b27c:	b570      	push	{r4, r5, r6, lr}
 800b27e:	4605      	mov	r5, r0
 800b280:	460e      	mov	r6, r1
    /* USER CODE BEGIN 6 */

    for (int i = 0; i < *Len; i++)
 800b282:	2400      	movs	r4, #0
 800b284:	6833      	ldr	r3, [r6, #0]
 800b286:	42a3      	cmp	r3, r4
 800b288:	d810      	bhi.n	800b2ac <CDC_Receive_FS+0x30>
    }

    uint32_t buf_len;

    // 수신 버퍼에서 비어있는 데이터 양
    buf_len = (rx_len - cdcAvailable()) - 1;
 800b28a:	4b0d      	ldr	r3, [pc, #52]	@ (800b2c0 <CDC_Receive_FS+0x44>)
 800b28c:	681c      	ldr	r4, [r3, #0]
 800b28e:	f7ff ffaf 	bl	800b1f0 <cdcAvailable>
 800b292:	3c01      	subs	r4, #1
 800b294:	1a24      	subs	r4, r4, r0

    if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 800b296:	2c3f      	cmp	r4, #63	@ 0x3f
 800b298:	d90d      	bls.n	800b2b6 <CDC_Receive_FS+0x3a>
    {
        // 다음 데이터도 전송
        USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b29a:	4629      	mov	r1, r5
 800b29c:	4809      	ldr	r0, [pc, #36]	@ (800b2c4 <CDC_Receive_FS+0x48>)
 800b29e:	f7ff fb77 	bl	800a990 <USBD_CDC_SetRxBuffer>
        USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b2a2:	4808      	ldr	r0, [pc, #32]	@ (800b2c4 <CDC_Receive_FS+0x48>)
 800b2a4:	f7ff fb93 	bl	800a9ce <USBD_CDC_ReceivePacket>
        rx_full = true;
    }

    return (USBD_OK);
    /* USER CODE END 6 */
}
 800b2a8:	2000      	movs	r0, #0
 800b2aa:	bd70      	pop	{r4, r5, r6, pc}
        cdcDataIn(Buf[i]);
 800b2ac:	5d28      	ldrb	r0, [r5, r4]
 800b2ae:	f7ff ffcb 	bl	800b248 <cdcDataIn>
    for (int i = 0; i < *Len; i++)
 800b2b2:	3401      	adds	r4, #1
 800b2b4:	e7e6      	b.n	800b284 <CDC_Receive_FS+0x8>
        rx_full = true;
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	4b03      	ldr	r3, [pc, #12]	@ (800b2c8 <CDC_Receive_FS+0x4c>)
 800b2ba:	701a      	strb	r2, [r3, #0]
 800b2bc:	e7f4      	b.n	800b2a8 <CDC_Receive_FS+0x2c>
 800b2be:	bf00      	nop
 800b2c0:	20000138 	.word	0x20000138
 800b2c4:	20002440 	.word	0x20002440
 800b2c8:	20002b04 	.word	0x20002b04

0800b2cc <USBD_CDC_SOF>:
{
 800b2cc:	b538      	push	{r3, r4, r5, lr}
    if (rx_full == true)
 800b2ce:	4d09      	ldr	r5, [pc, #36]	@ (800b2f4 <USBD_CDC_SOF+0x28>)
{
 800b2d0:	4604      	mov	r4, r0
    if (rx_full == true)
 800b2d2:	782b      	ldrb	r3, [r5, #0]
 800b2d4:	b163      	cbz	r3, 800b2f0 <USBD_CDC_SOF+0x24>
        buf_len = (rx_len - cdcAvailable()) - 1;
 800b2d6:	4b08      	ldr	r3, [pc, #32]	@ (800b2f8 <USBD_CDC_SOF+0x2c>)
 800b2d8:	6819      	ldr	r1, [r3, #0]
 800b2da:	f7ff ff89 	bl	800b1f0 <cdcAvailable>
 800b2de:	3901      	subs	r1, #1
 800b2e0:	1a09      	subs	r1, r1, r0
        if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 800b2e2:	293f      	cmp	r1, #63	@ 0x3f
 800b2e4:	d904      	bls.n	800b2f0 <USBD_CDC_SOF+0x24>
            USBD_CDC_ReceivePacket(pdev);
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	f7ff fb71 	bl	800a9ce <USBD_CDC_ReceivePacket>
            rx_full = false;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	702b      	strb	r3, [r5, #0]
}
 800b2f0:	2000      	movs	r0, #0
 800b2f2:	bd38      	pop	{r3, r4, r5, pc}
 800b2f4:	20002b04 	.word	0x20002b04
 800b2f8:	20000138 	.word	0x20000138

0800b2fc <CDC_Transmit_FS>:
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len)
{
 800b2fc:	b510      	push	{r4, lr}
    uint8_t result = USBD_OK;
    /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef *hcdc =
 800b2fe:	4c09      	ldr	r4, [pc, #36]	@ (800b324 <CDC_Transmit_FS+0x28>)
{
 800b300:	460a      	mov	r2, r1
    USBD_CDC_HandleTypeDef *hcdc =
 800b302:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
        (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
    if (hcdc->TxState != 0)
 800b306:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b30a:	b943      	cbnz	r3, 800b31e <CDC_Transmit_FS+0x22>
    {
        return USBD_BUSY;
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b30c:	4601      	mov	r1, r0
 800b30e:	4620      	mov	r0, r4
 800b310:	f7ff fb36 	bl	800a980 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b314:	4620      	mov	r0, r4
    /* USER CODE END 7 */
    return result;
}
 800b316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b31a:	f7ff bb3f 	b.w	800a99c <USBD_CDC_TransmitPacket>
}
 800b31e:	2001      	movs	r0, #1
 800b320:	bd10      	pop	{r4, pc}
 800b322:	bf00      	nop
 800b324:	20002440 	.word	0x20002440

0800b328 <cdcWrite>:
{
 800b328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b32a:	460c      	mov	r4, r1
 800b32c:	4606      	mov	r6, r0
    pre_time = millis();
 800b32e:	f7fa fd0b 	bl	8005d48 <millis>
 800b332:	4605      	mov	r5, r0
        ret = CDC_Transmit_FS(p_data, length);
 800b334:	b2a7      	uxth	r7, r4
 800b336:	4639      	mov	r1, r7
 800b338:	4630      	mov	r0, r6
 800b33a:	f7ff ffdf 	bl	800b2fc <CDC_Transmit_FS>
        if (ret == USBD_OK)
 800b33e:	b110      	cbz	r0, 800b346 <cdcWrite+0x1e>
        else if (ret == USBD_FAIL)
 800b340:	2802      	cmp	r0, #2
 800b342:	d102      	bne.n	800b34a <cdcWrite+0x22>
            return 0;
 800b344:	2400      	movs	r4, #0
}
 800b346:	4620      	mov	r0, r4
 800b348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (millis() - pre_time >= 100)
 800b34a:	f7fa fcfd 	bl	8005d48 <millis>
 800b34e:	1b43      	subs	r3, r0, r5
 800b350:	2b63      	cmp	r3, #99	@ 0x63
 800b352:	d9f0      	bls.n	800b336 <cdcWrite+0xe>
 800b354:	e7f6      	b.n	800b344 <cdcWrite+0x1c>
	...

0800b358 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b358:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800b35a:	4801      	ldr	r0, [pc, #4]	@ (800b360 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800b35c:	800b      	strh	r3, [r1, #0]
}
 800b35e:	4770      	bx	lr
 800b360:	20000164 	.word	0x20000164

0800b364 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b364:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800b366:	4801      	ldr	r0, [pc, #4]	@ (800b36c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800b368:	800b      	strh	r3, [r1, #0]
}
 800b36a:	4770      	bx	lr
 800b36c:	20000160 	.word	0x20000160

0800b370 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800b370:	2300      	movs	r3, #0
{
 800b372:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800b374:	461e      	mov	r6, r3
 800b376:	1c4d      	adds	r5, r1, #1
  for (idx = 0; idx < len; idx++)
 800b378:	b2dc      	uxtb	r4, r3
 800b37a:	42a2      	cmp	r2, r4
 800b37c:	d800      	bhi.n	800b380 <IntToUnicode+0x10>
  }
}
 800b37e:	bd70      	pop	{r4, r5, r6, pc}
      pbuf[2 * idx] = (value >> 28) + '0';
 800b380:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 800b382:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800b386:	bf34      	ite	cc
 800b388:	3430      	addcc	r4, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b38a:	3437      	addcs	r4, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800b38c:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    value = value << 4;
 800b390:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 800b392:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 800b396:	3301      	adds	r3, #1
 800b398:	e7ee      	b.n	800b378 <IntToUnicode+0x8>
	...

0800b39c <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800b39c:	231a      	movs	r3, #26
{
 800b39e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800b3a0:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b3a2:	4b0a      	ldr	r3, [pc, #40]	@ (800b3cc <USBD_FS_SerialStrDescriptor+0x30>)
 800b3a4:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	@ 0x7e8
  deviceserial0 += deviceserial2;
 800b3a8:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	@ 0x7f0
  if (deviceserial0 != 0)
 800b3ac:	1880      	adds	r0, r0, r2
 800b3ae:	d00a      	beq.n	800b3c6 <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b3b0:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	@ 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b3b4:	4906      	ldr	r1, [pc, #24]	@ (800b3d0 <USBD_FS_SerialStrDescriptor+0x34>)
 800b3b6:	2208      	movs	r2, #8
 800b3b8:	f7ff ffda 	bl	800b370 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b3bc:	2204      	movs	r2, #4
 800b3be:	4620      	mov	r0, r4
 800b3c0:	3110      	adds	r1, #16
 800b3c2:	f7ff ffd5 	bl	800b370 <IntToUnicode>
}
 800b3c6:	4803      	ldr	r0, [pc, #12]	@ (800b3d4 <USBD_FS_SerialStrDescriptor+0x38>)
 800b3c8:	bd10      	pop	{r4, pc}
 800b3ca:	bf00      	nop
 800b3cc:	1ffff000 	.word	0x1ffff000
 800b3d0:	20000146 	.word	0x20000146
 800b3d4:	20000144 	.word	0x20000144

0800b3d8 <USBD_FS_ManufacturerStrDescriptor>:
{
 800b3d8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b3da:	4c04      	ldr	r4, [pc, #16]	@ (800b3ec <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800b3dc:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b3de:	4804      	ldr	r0, [pc, #16]	@ (800b3f0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800b3e0:	4621      	mov	r1, r4
 800b3e2:	f7ff fe3b 	bl	800b05c <USBD_GetString>
}
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	bd10      	pop	{r4, pc}
 800b3ea:	bf00      	nop
 800b3ec:	20002d10 	.word	0x20002d10
 800b3f0:	0800eafd 	.word	0x0800eafd

0800b3f4 <USBD_FS_ProductStrDescriptor>:
{
 800b3f4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b3f6:	4c04      	ldr	r4, [pc, #16]	@ (800b408 <USBD_FS_ProductStrDescriptor+0x14>)
{
 800b3f8:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b3fa:	4804      	ldr	r0, [pc, #16]	@ (800b40c <USBD_FS_ProductStrDescriptor+0x18>)
 800b3fc:	4621      	mov	r1, r4
 800b3fe:	f7ff fe2d 	bl	800b05c <USBD_GetString>
}
 800b402:	4620      	mov	r0, r4
 800b404:	bd10      	pop	{r4, pc}
 800b406:	bf00      	nop
 800b408:	20002d10 	.word	0x20002d10
 800b40c:	0800eb10 	.word	0x0800eb10

0800b410 <USBD_FS_ConfigStrDescriptor>:
{
 800b410:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b412:	4c04      	ldr	r4, [pc, #16]	@ (800b424 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800b414:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b416:	4804      	ldr	r0, [pc, #16]	@ (800b428 <USBD_FS_ConfigStrDescriptor+0x18>)
 800b418:	4621      	mov	r1, r4
 800b41a:	f7ff fe1f 	bl	800b05c <USBD_GetString>
}
 800b41e:	4620      	mov	r0, r4
 800b420:	bd10      	pop	{r4, pc}
 800b422:	bf00      	nop
 800b424:	20002d10 	.word	0x20002d10
 800b428:	0800eb26 	.word	0x0800eb26

0800b42c <USBD_FS_InterfaceStrDescriptor>:
{
 800b42c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b42e:	4c04      	ldr	r4, [pc, #16]	@ (800b440 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 800b430:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b432:	4804      	ldr	r0, [pc, #16]	@ (800b444 <USBD_FS_InterfaceStrDescriptor+0x18>)
 800b434:	4621      	mov	r1, r4
 800b436:	f7ff fe11 	bl	800b05c <USBD_GetString>
}
 800b43a:	4620      	mov	r0, r4
 800b43c:	bd10      	pop	{r4, pc}
 800b43e:	bf00      	nop
 800b440:	20002d10 	.word	0x20002d10
 800b444:	0800eb31 	.word	0x0800eb31

0800b448 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800b448:	b118      	cbz	r0, 800b452 <USBD_Get_USB_Status+0xa>
 800b44a:	2802      	cmp	r0, #2
 800b44c:	bf0c      	ite	eq
 800b44e:	2001      	moveq	r0, #1
 800b450:	2002      	movne	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800b452:	4770      	bx	lr

0800b454 <HAL_PCD_MspInit>:
{
 800b454:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 800b456:	4b0e      	ldr	r3, [pc, #56]	@ (800b490 <HAL_PCD_MspInit+0x3c>)
 800b458:	6802      	ldr	r2, [r0, #0]
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d115      	bne.n	800b48a <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 800b45e:	f503 33da 	add.w	r3, r3, #111616	@ 0x1b400
 800b462:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b464:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 800b466:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800b46a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b46c:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800b46e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b470:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800b472:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b476:	9301      	str	r3, [sp, #4]
 800b478:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b47a:	f7fc fa73 	bl	8007964 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b47e:	2014      	movs	r0, #20
}
 800b480:	b003      	add	sp, #12
 800b482:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b486:	f7fc ba9d 	b.w	80079c4 <HAL_NVIC_EnableIRQ>
}
 800b48a:	b003      	add	sp, #12
 800b48c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b490:	40005c00 	.word	0x40005c00

0800b494 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b494:	f500 7126 	add.w	r1, r0, #664	@ 0x298
 800b498:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800b49c:	f7ff badf 	b.w	800aa5e <USBD_LL_SetupStage>

0800b4a0 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b4a0:	2328      	movs	r3, #40	@ 0x28
 800b4a2:	fb03 0301 	mla	r3, r3, r1, r0
 800b4a6:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800b4aa:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 800b4ae:	f7ff bb03 	b.w	800aab8 <USBD_LL_DataOutStage>

0800b4b2 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b4b2:	2328      	movs	r3, #40	@ 0x28
 800b4b4:	fb03 0301 	mla	r3, r3, r1, r0
 800b4b8:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800b4bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b4be:	f7ff bb33 	b.w	800ab28 <USBD_LL_DataInStage>

0800b4c2 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b4c2:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800b4c6:	f7ff bbc8 	b.w	800ac5a <USBD_LL_SOF>

0800b4ca <HAL_PCD_ResetCallback>:
{
 800b4ca:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b4cc:	7983      	ldrb	r3, [r0, #6]
{
 800b4ce:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b4d0:	2b02      	cmp	r3, #2
 800b4d2:	d001      	beq.n	800b4d8 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 800b4d4:	f7fa fcc4 	bl	8005e60 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b4d8:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
 800b4dc:	2101      	movs	r1, #1
 800b4de:	f7ff fba6 	bl	800ac2e <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b4e2:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
}
 800b4e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b4ea:	f7ff bb79 	b.w	800abe0 <USBD_LL_Reset>
	...

0800b4f0 <HAL_PCD_SuspendCallback>:
{
 800b4f0:	b510      	push	{r4, lr}
 800b4f2:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b4f4:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800b4f8:	f7ff fb9c 	bl	800ac34 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800b4fc:	7aa3      	ldrb	r3, [r4, #10]
 800b4fe:	b123      	cbz	r3, 800b50a <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b500:	4a02      	ldr	r2, [pc, #8]	@ (800b50c <HAL_PCD_SuspendCallback+0x1c>)
 800b502:	6913      	ldr	r3, [r2, #16]
 800b504:	f043 0306 	orr.w	r3, r3, #6
 800b508:	6113      	str	r3, [r2, #16]
}
 800b50a:	bd10      	pop	{r4, pc}
 800b50c:	e000ed00 	.word	0xe000ed00

0800b510 <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b510:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800b514:	f7ff bb97 	b.w	800ac46 <USBD_LL_Resume>

0800b518 <USBD_LL_Init>:
{
 800b518:	b510      	push	{r4, lr}
  hpcd_USB_FS.Instance = USB;
 800b51a:	4b1d      	ldr	r3, [pc, #116]	@ (800b590 <USBD_LL_Init+0x78>)
{
 800b51c:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800b51e:	481d      	ldr	r0, [pc, #116]	@ (800b594 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Instance = USB;
 800b520:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b522:	2308      	movs	r3, #8
 800b524:	7103      	strb	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b526:	2302      	movs	r3, #2
 800b528:	7183      	strb	r3, [r0, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b52a:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 800b52c:	f8c0 42d4 	str.w	r4, [r0, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800b530:	f8c4 02c0 	str.w	r0, [r4, #704]	@ 0x2c0
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b534:	8143      	strh	r3, [r0, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b536:	7303      	strb	r3, [r0, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b538:	f7fc fd5e 	bl	8007ff8 <HAL_PCD_Init>
 800b53c:	b108      	cbz	r0, 800b542 <USBD_LL_Init+0x2a>
    Error_Handler( );
 800b53e:	f7fa fc8f 	bl	8005e60 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b542:	2200      	movs	r2, #0
 800b544:	2318      	movs	r3, #24
 800b546:	4611      	mov	r1, r2
 800b548:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 800b54c:	f7fd fbdf 	bl	8008d0e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b550:	2358      	movs	r3, #88	@ 0x58
 800b552:	2200      	movs	r2, #0
 800b554:	2180      	movs	r1, #128	@ 0x80
 800b556:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 800b55a:	f7fd fbd8 	bl	8008d0e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b55e:	23c0      	movs	r3, #192	@ 0xc0
 800b560:	2200      	movs	r2, #0
 800b562:	2181      	movs	r1, #129	@ 0x81
 800b564:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 800b568:	f7fd fbd1 	bl	8008d0e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b56c:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800b570:	2200      	movs	r2, #0
 800b572:	2101      	movs	r1, #1
 800b574:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 800b578:	f7fd fbc9 	bl	8008d0e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b57c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b580:	2200      	movs	r2, #0
 800b582:	2182      	movs	r1, #130	@ 0x82
 800b584:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 800b588:	f7fd fbc1 	bl	8008d0e <HAL_PCDEx_PMAConfig>
}
 800b58c:	2000      	movs	r0, #0
 800b58e:	bd10      	pop	{r4, pc}
 800b590:	40005c00 	.word	0x40005c00
 800b594:	20003130 	.word	0x20003130

0800b598 <USBD_LL_Start>:
{
 800b598:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800b59a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800b59e:	f7fc fd8e 	bl	80080be <HAL_PCD_Start>
}
 800b5a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5a6:	f7ff bf4f 	b.w	800b448 <USBD_Get_USB_Status>

0800b5aa <USBD_LL_OpenEP>:
{
 800b5aa:	b510      	push	{r4, lr}
 800b5ac:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b5ae:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
{
 800b5b2:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b5b4:	4623      	mov	r3, r4
 800b5b6:	f7fd fab3 	bl	8008b20 <HAL_PCD_EP_Open>
}
 800b5ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5be:	f7ff bf43 	b.w	800b448 <USBD_Get_USB_Status>

0800b5c2 <USBD_LL_CloseEP>:
{
 800b5c2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b5c4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800b5c8:	f7fd fada 	bl	8008b80 <HAL_PCD_EP_Close>
}
 800b5cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5d0:	f7ff bf3a 	b.w	800b448 <USBD_Get_USB_Status>

0800b5d4 <USBD_LL_StallEP>:
{
 800b5d4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b5d6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800b5da:	f7fd fb30 	bl	8008c3e <HAL_PCD_EP_SetStall>
}
 800b5de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5e2:	f7ff bf31 	b.w	800b448 <USBD_Get_USB_Status>

0800b5e6 <USBD_LL_ClearStallEP>:
{
 800b5e6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b5e8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800b5ec:	f7fd fb5d 	bl	8008caa <HAL_PCD_EP_ClrStall>
}
 800b5f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5f4:	f7ff bf28 	b.w	800b448 <USBD_Get_USB_Status>

0800b5f8 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b5f8:	2228      	movs	r2, #40	@ 0x28
  if((ep_addr & 0x80) == 0x80)
 800b5fa:	f011 0f80 	tst.w	r1, #128	@ 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b5fe:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b602:	bf1b      	ittet	ne
 800b604:	f001 017f 	andne.w	r1, r1, #127	@ 0x7f
 800b608:	fb02 3301 	mlane	r3, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b60c:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b610:	7c98      	ldrbne	r0, [r3, #18]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b612:	bf08      	it	eq
 800b614:	f893 0152 	ldrbeq.w	r0, [r3, #338]	@ 0x152
}
 800b618:	4770      	bx	lr

0800b61a <USBD_LL_SetUSBAddress>:
{
 800b61a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b61c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800b620:	f7fc fd66 	bl	80080f0 <HAL_PCD_SetAddress>
}
 800b624:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b628:	f7ff bf0e 	b.w	800b448 <USBD_Get_USB_Status>

0800b62c <USBD_LL_Transmit>:
{
 800b62c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b62e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800b632:	f7fd faec 	bl	8008c0e <HAL_PCD_EP_Transmit>
}
 800b636:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b63a:	f7ff bf05 	b.w	800b448 <USBD_Get_USB_Status>

0800b63e <USBD_LL_PrepareReceive>:
{
 800b63e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b640:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800b644:	f7fd fac4 	bl	8008bd0 <HAL_PCD_EP_Receive>
}
 800b648:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b64c:	f7ff befc 	b.w	800b448 <USBD_Get_USB_Status>

0800b650 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b650:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800b654:	f7fd bad3 	b.w	8008bfe <HAL_PCD_EP_GetRxCount>

0800b658 <USBD_static_malloc>:
}
 800b658:	4800      	ldr	r0, [pc, #0]	@ (800b65c <USBD_static_malloc+0x4>)
 800b65a:	4770      	bx	lr
 800b65c:	20002f10 	.word	0x20002f10

0800b660 <USBD_static_free>:
}
 800b660:	4770      	bx	lr

0800b662 <HAL_PCDEx_SetConnectionState>:
}
 800b662:	4770      	bx	lr

0800b664 <threadMain>:

static void threadMain(void const *argument)
{
  UNUSED(argument);

  apMain();
 800b664:	f7fa bb5a 	b.w	8005d1c <apMain>

0800b668 <main>:
{
 800b668:	b530      	push	{r4, r5, lr}
    osThreadDef(threadMain, threadMain, _HW_DEF_RTOS_THREAD_PRI_MAIN, 0,
 800b66a:	4d0e      	ldr	r5, [pc, #56]	@ (800b6a4 <main+0x3c>)
{
 800b66c:	b087      	sub	sp, #28
    osThreadDef(threadMain, threadMain, _HW_DEF_RTOS_THREAD_PRI_MAIN, 0,
 800b66e:	ac01      	add	r4, sp, #4
    hwInit();
 800b670:	f7fb fb36 	bl	8006ce0 <hwInit>
    apInit();
 800b674:	f7fa fb26 	bl	8005cc4 <apInit>
    osThreadDef(threadMain, threadMain, _HW_DEF_RTOS_THREAD_PRI_MAIN, 0,
 800b678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b67a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b67c:	682b      	ldr	r3, [r5, #0]
    if (osThreadCreate(osThread(threadMain), NULL) != NULL)
 800b67e:	2100      	movs	r1, #0
 800b680:	a801      	add	r0, sp, #4
    osThreadDef(threadMain, threadMain, _HW_DEF_RTOS_THREAD_PRI_MAIN, 0,
 800b682:	6023      	str	r3, [r4, #0]
    if (osThreadCreate(osThread(threadMain), NULL) != NULL)
 800b684:	f7fb fb44 	bl	8006d10 <osThreadCreate>
 800b688:	b918      	cbnz	r0, 800b692 <main+0x2a>
        logPrintf("threadMain \t\t: Fail\r\n");
 800b68a:	4807      	ldr	r0, [pc, #28]	@ (800b6a8 <main+0x40>)
 800b68c:	f000 fff4 	bl	800c678 <puts>
        while (1);
 800b690:	e7fe      	b.n	800b690 <main+0x28>
        logPrintf("threadMain \t\t: OK\r\n");
 800b692:	4806      	ldr	r0, [pc, #24]	@ (800b6ac <main+0x44>)
 800b694:	f000 fff0 	bl	800c678 <puts>
    osKernelStart();
 800b698:	f7fb fb35 	bl	8006d06 <osKernelStart>
}
 800b69c:	2000      	movs	r0, #0
 800b69e:	b007      	add	sp, #28
 800b6a0:	bd30      	pop	{r4, r5, pc}
 800b6a2:	bf00      	nop
 800b6a4:	0800e924 	.word	0x0800e924
 800b6a8:	0800eb52 	.word	0x0800eb52
 800b6ac:	0800eb3f 	.word	0x0800eb3f

0800b6b0 <sulp>:
 800b6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6b4:	460f      	mov	r7, r1
 800b6b6:	4690      	mov	r8, r2
 800b6b8:	f002 f99e 	bl	800d9f8 <__ulp>
 800b6bc:	4604      	mov	r4, r0
 800b6be:	460d      	mov	r5, r1
 800b6c0:	f1b8 0f00 	cmp.w	r8, #0
 800b6c4:	d011      	beq.n	800b6ea <sulp+0x3a>
 800b6c6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800b6ca:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	dd0b      	ble.n	800b6ea <sulp+0x3a>
 800b6d2:	2400      	movs	r4, #0
 800b6d4:	051b      	lsls	r3, r3, #20
 800b6d6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b6da:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b6de:	4622      	mov	r2, r4
 800b6e0:	462b      	mov	r3, r5
 800b6e2:	f7f9 ff03 	bl	80054ec <__aeabi_dmul>
 800b6e6:	4604      	mov	r4, r0
 800b6e8:	460d      	mov	r5, r1
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	4629      	mov	r1, r5
 800b6ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6f2:	0000      	movs	r0, r0
 800b6f4:	0000      	movs	r0, r0
	...

0800b6f8 <_strtod_l>:
 800b6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6fc:	b09f      	sub	sp, #124	@ 0x7c
 800b6fe:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b700:	2200      	movs	r2, #0
 800b702:	460c      	mov	r4, r1
 800b704:	921a      	str	r2, [sp, #104]	@ 0x68
 800b706:	f04f 0a00 	mov.w	sl, #0
 800b70a:	f04f 0b00 	mov.w	fp, #0
 800b70e:	460a      	mov	r2, r1
 800b710:	9005      	str	r0, [sp, #20]
 800b712:	9219      	str	r2, [sp, #100]	@ 0x64
 800b714:	7811      	ldrb	r1, [r2, #0]
 800b716:	292b      	cmp	r1, #43	@ 0x2b
 800b718:	d048      	beq.n	800b7ac <_strtod_l+0xb4>
 800b71a:	d836      	bhi.n	800b78a <_strtod_l+0x92>
 800b71c:	290d      	cmp	r1, #13
 800b71e:	d830      	bhi.n	800b782 <_strtod_l+0x8a>
 800b720:	2908      	cmp	r1, #8
 800b722:	d830      	bhi.n	800b786 <_strtod_l+0x8e>
 800b724:	2900      	cmp	r1, #0
 800b726:	d039      	beq.n	800b79c <_strtod_l+0xa4>
 800b728:	2200      	movs	r2, #0
 800b72a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b72c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b72e:	782a      	ldrb	r2, [r5, #0]
 800b730:	2a30      	cmp	r2, #48	@ 0x30
 800b732:	f040 80b1 	bne.w	800b898 <_strtod_l+0x1a0>
 800b736:	786a      	ldrb	r2, [r5, #1]
 800b738:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b73c:	2a58      	cmp	r2, #88	@ 0x58
 800b73e:	d16c      	bne.n	800b81a <_strtod_l+0x122>
 800b740:	9302      	str	r3, [sp, #8]
 800b742:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b744:	4a8e      	ldr	r2, [pc, #568]	@ (800b980 <_strtod_l+0x288>)
 800b746:	9301      	str	r3, [sp, #4]
 800b748:	ab1a      	add	r3, sp, #104	@ 0x68
 800b74a:	9300      	str	r3, [sp, #0]
 800b74c:	9805      	ldr	r0, [sp, #20]
 800b74e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b750:	a919      	add	r1, sp, #100	@ 0x64
 800b752:	f001 fa4d 	bl	800cbf0 <__gethex>
 800b756:	f010 060f 	ands.w	r6, r0, #15
 800b75a:	4604      	mov	r4, r0
 800b75c:	d005      	beq.n	800b76a <_strtod_l+0x72>
 800b75e:	2e06      	cmp	r6, #6
 800b760:	d126      	bne.n	800b7b0 <_strtod_l+0xb8>
 800b762:	2300      	movs	r3, #0
 800b764:	3501      	adds	r5, #1
 800b766:	9519      	str	r5, [sp, #100]	@ 0x64
 800b768:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b76a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f040 8584 	bne.w	800c27a <_strtod_l+0xb82>
 800b772:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b774:	b1bb      	cbz	r3, 800b7a6 <_strtod_l+0xae>
 800b776:	4650      	mov	r0, sl
 800b778:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800b77c:	b01f      	add	sp, #124	@ 0x7c
 800b77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b782:	2920      	cmp	r1, #32
 800b784:	d1d0      	bne.n	800b728 <_strtod_l+0x30>
 800b786:	3201      	adds	r2, #1
 800b788:	e7c3      	b.n	800b712 <_strtod_l+0x1a>
 800b78a:	292d      	cmp	r1, #45	@ 0x2d
 800b78c:	d1cc      	bne.n	800b728 <_strtod_l+0x30>
 800b78e:	2101      	movs	r1, #1
 800b790:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b792:	1c51      	adds	r1, r2, #1
 800b794:	9119      	str	r1, [sp, #100]	@ 0x64
 800b796:	7852      	ldrb	r2, [r2, #1]
 800b798:	2a00      	cmp	r2, #0
 800b79a:	d1c7      	bne.n	800b72c <_strtod_l+0x34>
 800b79c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b79e:	9419      	str	r4, [sp, #100]	@ 0x64
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	f040 8568 	bne.w	800c276 <_strtod_l+0xb7e>
 800b7a6:	4650      	mov	r0, sl
 800b7a8:	4659      	mov	r1, fp
 800b7aa:	e7e7      	b.n	800b77c <_strtod_l+0x84>
 800b7ac:	2100      	movs	r1, #0
 800b7ae:	e7ef      	b.n	800b790 <_strtod_l+0x98>
 800b7b0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b7b2:	b13a      	cbz	r2, 800b7c4 <_strtod_l+0xcc>
 800b7b4:	2135      	movs	r1, #53	@ 0x35
 800b7b6:	a81c      	add	r0, sp, #112	@ 0x70
 800b7b8:	f002 fa0e 	bl	800dbd8 <__copybits>
 800b7bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b7be:	9805      	ldr	r0, [sp, #20]
 800b7c0:	f001 fde8 	bl	800d394 <_Bfree>
 800b7c4:	3e01      	subs	r6, #1
 800b7c6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b7c8:	2e04      	cmp	r6, #4
 800b7ca:	d806      	bhi.n	800b7da <_strtod_l+0xe2>
 800b7cc:	e8df f006 	tbb	[pc, r6]
 800b7d0:	201d0314 	.word	0x201d0314
 800b7d4:	14          	.byte	0x14
 800b7d5:	00          	.byte	0x00
 800b7d6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b7da:	05e1      	lsls	r1, r4, #23
 800b7dc:	bf48      	it	mi
 800b7de:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b7e2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b7e6:	0d1b      	lsrs	r3, r3, #20
 800b7e8:	051b      	lsls	r3, r3, #20
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d1bd      	bne.n	800b76a <_strtod_l+0x72>
 800b7ee:	f001 f901 	bl	800c9f4 <__errno>
 800b7f2:	2322      	movs	r3, #34	@ 0x22
 800b7f4:	6003      	str	r3, [r0, #0]
 800b7f6:	e7b8      	b.n	800b76a <_strtod_l+0x72>
 800b7f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b7fc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b800:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b804:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b808:	e7e7      	b.n	800b7da <_strtod_l+0xe2>
 800b80a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800b984 <_strtod_l+0x28c>
 800b80e:	e7e4      	b.n	800b7da <_strtod_l+0xe2>
 800b810:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b814:	f04f 3aff 	mov.w	sl, #4294967295
 800b818:	e7df      	b.n	800b7da <_strtod_l+0xe2>
 800b81a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b81c:	1c5a      	adds	r2, r3, #1
 800b81e:	9219      	str	r2, [sp, #100]	@ 0x64
 800b820:	785b      	ldrb	r3, [r3, #1]
 800b822:	2b30      	cmp	r3, #48	@ 0x30
 800b824:	d0f9      	beq.n	800b81a <_strtod_l+0x122>
 800b826:	2b00      	cmp	r3, #0
 800b828:	d09f      	beq.n	800b76a <_strtod_l+0x72>
 800b82a:	2301      	movs	r3, #1
 800b82c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b82e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b830:	220a      	movs	r2, #10
 800b832:	930c      	str	r3, [sp, #48]	@ 0x30
 800b834:	2300      	movs	r3, #0
 800b836:	461f      	mov	r7, r3
 800b838:	9308      	str	r3, [sp, #32]
 800b83a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b83c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b83e:	7805      	ldrb	r5, [r0, #0]
 800b840:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b844:	b2d9      	uxtb	r1, r3
 800b846:	2909      	cmp	r1, #9
 800b848:	d928      	bls.n	800b89c <_strtod_l+0x1a4>
 800b84a:	2201      	movs	r2, #1
 800b84c:	494e      	ldr	r1, [pc, #312]	@ (800b988 <_strtod_l+0x290>)
 800b84e:	f001 f84d 	bl	800c8ec <strncmp>
 800b852:	2800      	cmp	r0, #0
 800b854:	d032      	beq.n	800b8bc <_strtod_l+0x1c4>
 800b856:	2000      	movs	r0, #0
 800b858:	462a      	mov	r2, r5
 800b85a:	4681      	mov	r9, r0
 800b85c:	463d      	mov	r5, r7
 800b85e:	4603      	mov	r3, r0
 800b860:	2a65      	cmp	r2, #101	@ 0x65
 800b862:	d001      	beq.n	800b868 <_strtod_l+0x170>
 800b864:	2a45      	cmp	r2, #69	@ 0x45
 800b866:	d114      	bne.n	800b892 <_strtod_l+0x19a>
 800b868:	b91d      	cbnz	r5, 800b872 <_strtod_l+0x17a>
 800b86a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b86c:	4302      	orrs	r2, r0
 800b86e:	d095      	beq.n	800b79c <_strtod_l+0xa4>
 800b870:	2500      	movs	r5, #0
 800b872:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b874:	1c62      	adds	r2, r4, #1
 800b876:	9219      	str	r2, [sp, #100]	@ 0x64
 800b878:	7862      	ldrb	r2, [r4, #1]
 800b87a:	2a2b      	cmp	r2, #43	@ 0x2b
 800b87c:	d077      	beq.n	800b96e <_strtod_l+0x276>
 800b87e:	2a2d      	cmp	r2, #45	@ 0x2d
 800b880:	d07b      	beq.n	800b97a <_strtod_l+0x282>
 800b882:	f04f 0c00 	mov.w	ip, #0
 800b886:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b88a:	2909      	cmp	r1, #9
 800b88c:	f240 8082 	bls.w	800b994 <_strtod_l+0x29c>
 800b890:	9419      	str	r4, [sp, #100]	@ 0x64
 800b892:	f04f 0800 	mov.w	r8, #0
 800b896:	e0a2      	b.n	800b9de <_strtod_l+0x2e6>
 800b898:	2300      	movs	r3, #0
 800b89a:	e7c7      	b.n	800b82c <_strtod_l+0x134>
 800b89c:	2f08      	cmp	r7, #8
 800b89e:	bfd5      	itete	le
 800b8a0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b8a2:	9908      	ldrgt	r1, [sp, #32]
 800b8a4:	fb02 3301 	mlale	r3, r2, r1, r3
 800b8a8:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b8ac:	f100 0001 	add.w	r0, r0, #1
 800b8b0:	bfd4      	ite	le
 800b8b2:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b8b4:	9308      	strgt	r3, [sp, #32]
 800b8b6:	3701      	adds	r7, #1
 800b8b8:	9019      	str	r0, [sp, #100]	@ 0x64
 800b8ba:	e7bf      	b.n	800b83c <_strtod_l+0x144>
 800b8bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8be:	1c5a      	adds	r2, r3, #1
 800b8c0:	9219      	str	r2, [sp, #100]	@ 0x64
 800b8c2:	785a      	ldrb	r2, [r3, #1]
 800b8c4:	b37f      	cbz	r7, 800b926 <_strtod_l+0x22e>
 800b8c6:	4681      	mov	r9, r0
 800b8c8:	463d      	mov	r5, r7
 800b8ca:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b8ce:	2b09      	cmp	r3, #9
 800b8d0:	d912      	bls.n	800b8f8 <_strtod_l+0x200>
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	e7c4      	b.n	800b860 <_strtod_l+0x168>
 800b8d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8d8:	3001      	adds	r0, #1
 800b8da:	1c5a      	adds	r2, r3, #1
 800b8dc:	9219      	str	r2, [sp, #100]	@ 0x64
 800b8de:	785a      	ldrb	r2, [r3, #1]
 800b8e0:	2a30      	cmp	r2, #48	@ 0x30
 800b8e2:	d0f8      	beq.n	800b8d6 <_strtod_l+0x1de>
 800b8e4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b8e8:	2b08      	cmp	r3, #8
 800b8ea:	f200 84cb 	bhi.w	800c284 <_strtod_l+0xb8c>
 800b8ee:	4681      	mov	r9, r0
 800b8f0:	2000      	movs	r0, #0
 800b8f2:	4605      	mov	r5, r0
 800b8f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8f6:	930c      	str	r3, [sp, #48]	@ 0x30
 800b8f8:	3a30      	subs	r2, #48	@ 0x30
 800b8fa:	f100 0301 	add.w	r3, r0, #1
 800b8fe:	d02a      	beq.n	800b956 <_strtod_l+0x25e>
 800b900:	4499      	add	r9, r3
 800b902:	210a      	movs	r1, #10
 800b904:	462b      	mov	r3, r5
 800b906:	eb00 0c05 	add.w	ip, r0, r5
 800b90a:	4563      	cmp	r3, ip
 800b90c:	d10d      	bne.n	800b92a <_strtod_l+0x232>
 800b90e:	1c69      	adds	r1, r5, #1
 800b910:	4401      	add	r1, r0
 800b912:	4428      	add	r0, r5
 800b914:	2808      	cmp	r0, #8
 800b916:	dc16      	bgt.n	800b946 <_strtod_l+0x24e>
 800b918:	230a      	movs	r3, #10
 800b91a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b91c:	fb03 2300 	mla	r3, r3, r0, r2
 800b920:	930a      	str	r3, [sp, #40]	@ 0x28
 800b922:	2300      	movs	r3, #0
 800b924:	e018      	b.n	800b958 <_strtod_l+0x260>
 800b926:	4638      	mov	r0, r7
 800b928:	e7da      	b.n	800b8e0 <_strtod_l+0x1e8>
 800b92a:	2b08      	cmp	r3, #8
 800b92c:	f103 0301 	add.w	r3, r3, #1
 800b930:	dc03      	bgt.n	800b93a <_strtod_l+0x242>
 800b932:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b934:	434e      	muls	r6, r1
 800b936:	960a      	str	r6, [sp, #40]	@ 0x28
 800b938:	e7e7      	b.n	800b90a <_strtod_l+0x212>
 800b93a:	2b10      	cmp	r3, #16
 800b93c:	bfde      	ittt	le
 800b93e:	9e08      	ldrle	r6, [sp, #32]
 800b940:	434e      	mulle	r6, r1
 800b942:	9608      	strle	r6, [sp, #32]
 800b944:	e7e1      	b.n	800b90a <_strtod_l+0x212>
 800b946:	280f      	cmp	r0, #15
 800b948:	dceb      	bgt.n	800b922 <_strtod_l+0x22a>
 800b94a:	230a      	movs	r3, #10
 800b94c:	9808      	ldr	r0, [sp, #32]
 800b94e:	fb03 2300 	mla	r3, r3, r0, r2
 800b952:	9308      	str	r3, [sp, #32]
 800b954:	e7e5      	b.n	800b922 <_strtod_l+0x22a>
 800b956:	4629      	mov	r1, r5
 800b958:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b95a:	460d      	mov	r5, r1
 800b95c:	1c50      	adds	r0, r2, #1
 800b95e:	9019      	str	r0, [sp, #100]	@ 0x64
 800b960:	7852      	ldrb	r2, [r2, #1]
 800b962:	4618      	mov	r0, r3
 800b964:	e7b1      	b.n	800b8ca <_strtod_l+0x1d2>
 800b966:	f04f 0900 	mov.w	r9, #0
 800b96a:	2301      	movs	r3, #1
 800b96c:	e77d      	b.n	800b86a <_strtod_l+0x172>
 800b96e:	f04f 0c00 	mov.w	ip, #0
 800b972:	1ca2      	adds	r2, r4, #2
 800b974:	9219      	str	r2, [sp, #100]	@ 0x64
 800b976:	78a2      	ldrb	r2, [r4, #2]
 800b978:	e785      	b.n	800b886 <_strtod_l+0x18e>
 800b97a:	f04f 0c01 	mov.w	ip, #1
 800b97e:	e7f8      	b.n	800b972 <_strtod_l+0x27a>
 800b980:	0800eb94 	.word	0x0800eb94
 800b984:	7ff00000 	.word	0x7ff00000
 800b988:	0800ea72 	.word	0x0800ea72
 800b98c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b98e:	1c51      	adds	r1, r2, #1
 800b990:	9119      	str	r1, [sp, #100]	@ 0x64
 800b992:	7852      	ldrb	r2, [r2, #1]
 800b994:	2a30      	cmp	r2, #48	@ 0x30
 800b996:	d0f9      	beq.n	800b98c <_strtod_l+0x294>
 800b998:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b99c:	2908      	cmp	r1, #8
 800b99e:	f63f af78 	bhi.w	800b892 <_strtod_l+0x19a>
 800b9a2:	f04f 080a 	mov.w	r8, #10
 800b9a6:	3a30      	subs	r2, #48	@ 0x30
 800b9a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b9aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b9ac:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b9ae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b9b0:	1c56      	adds	r6, r2, #1
 800b9b2:	9619      	str	r6, [sp, #100]	@ 0x64
 800b9b4:	7852      	ldrb	r2, [r2, #1]
 800b9b6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b9ba:	f1be 0f09 	cmp.w	lr, #9
 800b9be:	d939      	bls.n	800ba34 <_strtod_l+0x33c>
 800b9c0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b9c2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b9c6:	1a76      	subs	r6, r6, r1
 800b9c8:	2e08      	cmp	r6, #8
 800b9ca:	dc03      	bgt.n	800b9d4 <_strtod_l+0x2dc>
 800b9cc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b9ce:	4588      	cmp	r8, r1
 800b9d0:	bfa8      	it	ge
 800b9d2:	4688      	movge	r8, r1
 800b9d4:	f1bc 0f00 	cmp.w	ip, #0
 800b9d8:	d001      	beq.n	800b9de <_strtod_l+0x2e6>
 800b9da:	f1c8 0800 	rsb	r8, r8, #0
 800b9de:	2d00      	cmp	r5, #0
 800b9e0:	d14e      	bne.n	800ba80 <_strtod_l+0x388>
 800b9e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b9e4:	4308      	orrs	r0, r1
 800b9e6:	f47f aec0 	bne.w	800b76a <_strtod_l+0x72>
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	f47f aed6 	bne.w	800b79c <_strtod_l+0xa4>
 800b9f0:	2a69      	cmp	r2, #105	@ 0x69
 800b9f2:	d028      	beq.n	800ba46 <_strtod_l+0x34e>
 800b9f4:	dc25      	bgt.n	800ba42 <_strtod_l+0x34a>
 800b9f6:	2a49      	cmp	r2, #73	@ 0x49
 800b9f8:	d025      	beq.n	800ba46 <_strtod_l+0x34e>
 800b9fa:	2a4e      	cmp	r2, #78	@ 0x4e
 800b9fc:	f47f aece 	bne.w	800b79c <_strtod_l+0xa4>
 800ba00:	499a      	ldr	r1, [pc, #616]	@ (800bc6c <_strtod_l+0x574>)
 800ba02:	a819      	add	r0, sp, #100	@ 0x64
 800ba04:	f001 fb16 	bl	800d034 <__match>
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	f43f aec7 	beq.w	800b79c <_strtod_l+0xa4>
 800ba0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	2b28      	cmp	r3, #40	@ 0x28
 800ba14:	d12e      	bne.n	800ba74 <_strtod_l+0x37c>
 800ba16:	4996      	ldr	r1, [pc, #600]	@ (800bc70 <_strtod_l+0x578>)
 800ba18:	aa1c      	add	r2, sp, #112	@ 0x70
 800ba1a:	a819      	add	r0, sp, #100	@ 0x64
 800ba1c:	f001 fb1e 	bl	800d05c <__hexnan>
 800ba20:	2805      	cmp	r0, #5
 800ba22:	d127      	bne.n	800ba74 <_strtod_l+0x37c>
 800ba24:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ba26:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ba2a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ba2e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ba32:	e69a      	b.n	800b76a <_strtod_l+0x72>
 800ba34:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ba36:	fb08 2101 	mla	r1, r8, r1, r2
 800ba3a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ba3e:	920e      	str	r2, [sp, #56]	@ 0x38
 800ba40:	e7b5      	b.n	800b9ae <_strtod_l+0x2b6>
 800ba42:	2a6e      	cmp	r2, #110	@ 0x6e
 800ba44:	e7da      	b.n	800b9fc <_strtod_l+0x304>
 800ba46:	498b      	ldr	r1, [pc, #556]	@ (800bc74 <_strtod_l+0x57c>)
 800ba48:	a819      	add	r0, sp, #100	@ 0x64
 800ba4a:	f001 faf3 	bl	800d034 <__match>
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	f43f aea4 	beq.w	800b79c <_strtod_l+0xa4>
 800ba54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba56:	4988      	ldr	r1, [pc, #544]	@ (800bc78 <_strtod_l+0x580>)
 800ba58:	3b01      	subs	r3, #1
 800ba5a:	a819      	add	r0, sp, #100	@ 0x64
 800ba5c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ba5e:	f001 fae9 	bl	800d034 <__match>
 800ba62:	b910      	cbnz	r0, 800ba6a <_strtod_l+0x372>
 800ba64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba66:	3301      	adds	r3, #1
 800ba68:	9319      	str	r3, [sp, #100]	@ 0x64
 800ba6a:	f04f 0a00 	mov.w	sl, #0
 800ba6e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800bc7c <_strtod_l+0x584>
 800ba72:	e67a      	b.n	800b76a <_strtod_l+0x72>
 800ba74:	4882      	ldr	r0, [pc, #520]	@ (800bc80 <_strtod_l+0x588>)
 800ba76:	f001 f801 	bl	800ca7c <nan>
 800ba7a:	4682      	mov	sl, r0
 800ba7c:	468b      	mov	fp, r1
 800ba7e:	e674      	b.n	800b76a <_strtod_l+0x72>
 800ba80:	eba8 0309 	sub.w	r3, r8, r9
 800ba84:	2f00      	cmp	r7, #0
 800ba86:	bf08      	it	eq
 800ba88:	462f      	moveq	r7, r5
 800ba8a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ba8c:	2d10      	cmp	r5, #16
 800ba8e:	462c      	mov	r4, r5
 800ba90:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba92:	bfa8      	it	ge
 800ba94:	2410      	movge	r4, #16
 800ba96:	f7f9 fcaf 	bl	80053f8 <__aeabi_ui2d>
 800ba9a:	2d09      	cmp	r5, #9
 800ba9c:	4682      	mov	sl, r0
 800ba9e:	468b      	mov	fp, r1
 800baa0:	dc11      	bgt.n	800bac6 <_strtod_l+0x3ce>
 800baa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	f43f ae60 	beq.w	800b76a <_strtod_l+0x72>
 800baaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baac:	dd76      	ble.n	800bb9c <_strtod_l+0x4a4>
 800baae:	2b16      	cmp	r3, #22
 800bab0:	dc5d      	bgt.n	800bb6e <_strtod_l+0x476>
 800bab2:	4974      	ldr	r1, [pc, #464]	@ (800bc84 <_strtod_l+0x58c>)
 800bab4:	4652      	mov	r2, sl
 800bab6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800baba:	465b      	mov	r3, fp
 800babc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bac0:	f7f9 fd14 	bl	80054ec <__aeabi_dmul>
 800bac4:	e7d9      	b.n	800ba7a <_strtod_l+0x382>
 800bac6:	4b6f      	ldr	r3, [pc, #444]	@ (800bc84 <_strtod_l+0x58c>)
 800bac8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bacc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800bad0:	f7f9 fd0c 	bl	80054ec <__aeabi_dmul>
 800bad4:	4682      	mov	sl, r0
 800bad6:	9808      	ldr	r0, [sp, #32]
 800bad8:	468b      	mov	fp, r1
 800bada:	f7f9 fc8d 	bl	80053f8 <__aeabi_ui2d>
 800bade:	4602      	mov	r2, r0
 800bae0:	460b      	mov	r3, r1
 800bae2:	4650      	mov	r0, sl
 800bae4:	4659      	mov	r1, fp
 800bae6:	f7f9 fb4b 	bl	8005180 <__adddf3>
 800baea:	2d0f      	cmp	r5, #15
 800baec:	4682      	mov	sl, r0
 800baee:	468b      	mov	fp, r1
 800baf0:	ddd7      	ble.n	800baa2 <_strtod_l+0x3aa>
 800baf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baf4:	1b2c      	subs	r4, r5, r4
 800baf6:	441c      	add	r4, r3
 800baf8:	2c00      	cmp	r4, #0
 800bafa:	f340 8096 	ble.w	800bc2a <_strtod_l+0x532>
 800bafe:	f014 030f 	ands.w	r3, r4, #15
 800bb02:	d00a      	beq.n	800bb1a <_strtod_l+0x422>
 800bb04:	495f      	ldr	r1, [pc, #380]	@ (800bc84 <_strtod_l+0x58c>)
 800bb06:	4652      	mov	r2, sl
 800bb08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bb0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb10:	465b      	mov	r3, fp
 800bb12:	f7f9 fceb 	bl	80054ec <__aeabi_dmul>
 800bb16:	4682      	mov	sl, r0
 800bb18:	468b      	mov	fp, r1
 800bb1a:	f034 040f 	bics.w	r4, r4, #15
 800bb1e:	d073      	beq.n	800bc08 <_strtod_l+0x510>
 800bb20:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800bb24:	dd48      	ble.n	800bbb8 <_strtod_l+0x4c0>
 800bb26:	2400      	movs	r4, #0
 800bb28:	46a0      	mov	r8, r4
 800bb2a:	46a1      	mov	r9, r4
 800bb2c:	940a      	str	r4, [sp, #40]	@ 0x28
 800bb2e:	2322      	movs	r3, #34	@ 0x22
 800bb30:	f04f 0a00 	mov.w	sl, #0
 800bb34:	9a05      	ldr	r2, [sp, #20]
 800bb36:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800bc7c <_strtod_l+0x584>
 800bb3a:	6013      	str	r3, [r2, #0]
 800bb3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	f43f ae13 	beq.w	800b76a <_strtod_l+0x72>
 800bb44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb46:	9805      	ldr	r0, [sp, #20]
 800bb48:	f001 fc24 	bl	800d394 <_Bfree>
 800bb4c:	4649      	mov	r1, r9
 800bb4e:	9805      	ldr	r0, [sp, #20]
 800bb50:	f001 fc20 	bl	800d394 <_Bfree>
 800bb54:	4641      	mov	r1, r8
 800bb56:	9805      	ldr	r0, [sp, #20]
 800bb58:	f001 fc1c 	bl	800d394 <_Bfree>
 800bb5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bb5e:	9805      	ldr	r0, [sp, #20]
 800bb60:	f001 fc18 	bl	800d394 <_Bfree>
 800bb64:	4621      	mov	r1, r4
 800bb66:	9805      	ldr	r0, [sp, #20]
 800bb68:	f001 fc14 	bl	800d394 <_Bfree>
 800bb6c:	e5fd      	b.n	800b76a <_strtod_l+0x72>
 800bb6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb70:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bb74:	4293      	cmp	r3, r2
 800bb76:	dbbc      	blt.n	800baf2 <_strtod_l+0x3fa>
 800bb78:	4c42      	ldr	r4, [pc, #264]	@ (800bc84 <_strtod_l+0x58c>)
 800bb7a:	f1c5 050f 	rsb	r5, r5, #15
 800bb7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bb82:	4652      	mov	r2, sl
 800bb84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb88:	465b      	mov	r3, fp
 800bb8a:	f7f9 fcaf 	bl	80054ec <__aeabi_dmul>
 800bb8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb90:	1b5d      	subs	r5, r3, r5
 800bb92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bb96:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bb9a:	e791      	b.n	800bac0 <_strtod_l+0x3c8>
 800bb9c:	3316      	adds	r3, #22
 800bb9e:	dba8      	blt.n	800baf2 <_strtod_l+0x3fa>
 800bba0:	4b38      	ldr	r3, [pc, #224]	@ (800bc84 <_strtod_l+0x58c>)
 800bba2:	eba9 0808 	sub.w	r8, r9, r8
 800bba6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bbaa:	4650      	mov	r0, sl
 800bbac:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bbb0:	4659      	mov	r1, fp
 800bbb2:	f7f9 fdc5 	bl	8005740 <__aeabi_ddiv>
 800bbb6:	e760      	b.n	800ba7a <_strtod_l+0x382>
 800bbb8:	4b33      	ldr	r3, [pc, #204]	@ (800bc88 <_strtod_l+0x590>)
 800bbba:	4650      	mov	r0, sl
 800bbbc:	9308      	str	r3, [sp, #32]
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	4659      	mov	r1, fp
 800bbc2:	461e      	mov	r6, r3
 800bbc4:	1124      	asrs	r4, r4, #4
 800bbc6:	2c01      	cmp	r4, #1
 800bbc8:	dc21      	bgt.n	800bc0e <_strtod_l+0x516>
 800bbca:	b10b      	cbz	r3, 800bbd0 <_strtod_l+0x4d8>
 800bbcc:	4682      	mov	sl, r0
 800bbce:	468b      	mov	fp, r1
 800bbd0:	492d      	ldr	r1, [pc, #180]	@ (800bc88 <_strtod_l+0x590>)
 800bbd2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bbd6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bbda:	4652      	mov	r2, sl
 800bbdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbe0:	465b      	mov	r3, fp
 800bbe2:	f7f9 fc83 	bl	80054ec <__aeabi_dmul>
 800bbe6:	4b25      	ldr	r3, [pc, #148]	@ (800bc7c <_strtod_l+0x584>)
 800bbe8:	460a      	mov	r2, r1
 800bbea:	400b      	ands	r3, r1
 800bbec:	4927      	ldr	r1, [pc, #156]	@ (800bc8c <_strtod_l+0x594>)
 800bbee:	4682      	mov	sl, r0
 800bbf0:	428b      	cmp	r3, r1
 800bbf2:	d898      	bhi.n	800bb26 <_strtod_l+0x42e>
 800bbf4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bbf8:	428b      	cmp	r3, r1
 800bbfa:	bf86      	itte	hi
 800bbfc:	f04f 3aff 	movhi.w	sl, #4294967295
 800bc00:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800bc90 <_strtod_l+0x598>
 800bc04:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800bc08:	2300      	movs	r3, #0
 800bc0a:	9308      	str	r3, [sp, #32]
 800bc0c:	e07a      	b.n	800bd04 <_strtod_l+0x60c>
 800bc0e:	07e2      	lsls	r2, r4, #31
 800bc10:	d505      	bpl.n	800bc1e <_strtod_l+0x526>
 800bc12:	9b08      	ldr	r3, [sp, #32]
 800bc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc18:	f7f9 fc68 	bl	80054ec <__aeabi_dmul>
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	9a08      	ldr	r2, [sp, #32]
 800bc20:	3601      	adds	r6, #1
 800bc22:	3208      	adds	r2, #8
 800bc24:	1064      	asrs	r4, r4, #1
 800bc26:	9208      	str	r2, [sp, #32]
 800bc28:	e7cd      	b.n	800bbc6 <_strtod_l+0x4ce>
 800bc2a:	d0ed      	beq.n	800bc08 <_strtod_l+0x510>
 800bc2c:	4264      	negs	r4, r4
 800bc2e:	f014 020f 	ands.w	r2, r4, #15
 800bc32:	d00a      	beq.n	800bc4a <_strtod_l+0x552>
 800bc34:	4b13      	ldr	r3, [pc, #76]	@ (800bc84 <_strtod_l+0x58c>)
 800bc36:	4650      	mov	r0, sl
 800bc38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc3c:	4659      	mov	r1, fp
 800bc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc42:	f7f9 fd7d 	bl	8005740 <__aeabi_ddiv>
 800bc46:	4682      	mov	sl, r0
 800bc48:	468b      	mov	fp, r1
 800bc4a:	1124      	asrs	r4, r4, #4
 800bc4c:	d0dc      	beq.n	800bc08 <_strtod_l+0x510>
 800bc4e:	2c1f      	cmp	r4, #31
 800bc50:	dd20      	ble.n	800bc94 <_strtod_l+0x59c>
 800bc52:	2400      	movs	r4, #0
 800bc54:	46a0      	mov	r8, r4
 800bc56:	46a1      	mov	r9, r4
 800bc58:	940a      	str	r4, [sp, #40]	@ 0x28
 800bc5a:	2322      	movs	r3, #34	@ 0x22
 800bc5c:	9a05      	ldr	r2, [sp, #20]
 800bc5e:	f04f 0a00 	mov.w	sl, #0
 800bc62:	f04f 0b00 	mov.w	fp, #0
 800bc66:	6013      	str	r3, [r2, #0]
 800bc68:	e768      	b.n	800bb3c <_strtod_l+0x444>
 800bc6a:	bf00      	nop
 800bc6c:	0800eb7b 	.word	0x0800eb7b
 800bc70:	0800eb80 	.word	0x0800eb80
 800bc74:	0800eb72 	.word	0x0800eb72
 800bc78:	0800eb75 	.word	0x0800eb75
 800bc7c:	7ff00000 	.word	0x7ff00000
 800bc80:	0800ea24 	.word	0x0800ea24
 800bc84:	0800edf0 	.word	0x0800edf0
 800bc88:	0800edc8 	.word	0x0800edc8
 800bc8c:	7ca00000 	.word	0x7ca00000
 800bc90:	7fefffff 	.word	0x7fefffff
 800bc94:	f014 0310 	ands.w	r3, r4, #16
 800bc98:	bf18      	it	ne
 800bc9a:	236a      	movne	r3, #106	@ 0x6a
 800bc9c:	4650      	mov	r0, sl
 800bc9e:	9308      	str	r3, [sp, #32]
 800bca0:	4659      	mov	r1, fp
 800bca2:	2300      	movs	r3, #0
 800bca4:	4ea9      	ldr	r6, [pc, #676]	@ (800bf4c <_strtod_l+0x854>)
 800bca6:	07e2      	lsls	r2, r4, #31
 800bca8:	d504      	bpl.n	800bcb4 <_strtod_l+0x5bc>
 800bcaa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bcae:	f7f9 fc1d 	bl	80054ec <__aeabi_dmul>
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	1064      	asrs	r4, r4, #1
 800bcb6:	f106 0608 	add.w	r6, r6, #8
 800bcba:	d1f4      	bne.n	800bca6 <_strtod_l+0x5ae>
 800bcbc:	b10b      	cbz	r3, 800bcc2 <_strtod_l+0x5ca>
 800bcbe:	4682      	mov	sl, r0
 800bcc0:	468b      	mov	fp, r1
 800bcc2:	9b08      	ldr	r3, [sp, #32]
 800bcc4:	b1b3      	cbz	r3, 800bcf4 <_strtod_l+0x5fc>
 800bcc6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bcca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	4659      	mov	r1, fp
 800bcd2:	dd0f      	ble.n	800bcf4 <_strtod_l+0x5fc>
 800bcd4:	2b1f      	cmp	r3, #31
 800bcd6:	dd57      	ble.n	800bd88 <_strtod_l+0x690>
 800bcd8:	2b34      	cmp	r3, #52	@ 0x34
 800bcda:	bfd8      	it	le
 800bcdc:	f04f 33ff 	movle.w	r3, #4294967295
 800bce0:	f04f 0a00 	mov.w	sl, #0
 800bce4:	bfcf      	iteee	gt
 800bce6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bcea:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bcee:	4093      	lslle	r3, r2
 800bcf0:	ea03 0b01 	andle.w	fp, r3, r1
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	4650      	mov	r0, sl
 800bcfa:	4659      	mov	r1, fp
 800bcfc:	f7f9 fe5e 	bl	80059bc <__aeabi_dcmpeq>
 800bd00:	2800      	cmp	r0, #0
 800bd02:	d1a6      	bne.n	800bc52 <_strtod_l+0x55a>
 800bd04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd06:	463a      	mov	r2, r7
 800bd08:	9300      	str	r3, [sp, #0]
 800bd0a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bd0c:	462b      	mov	r3, r5
 800bd0e:	9805      	ldr	r0, [sp, #20]
 800bd10:	f001 fba8 	bl	800d464 <__s2b>
 800bd14:	900a      	str	r0, [sp, #40]	@ 0x28
 800bd16:	2800      	cmp	r0, #0
 800bd18:	f43f af05 	beq.w	800bb26 <_strtod_l+0x42e>
 800bd1c:	2400      	movs	r4, #0
 800bd1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd20:	eba9 0308 	sub.w	r3, r9, r8
 800bd24:	2a00      	cmp	r2, #0
 800bd26:	bfa8      	it	ge
 800bd28:	2300      	movge	r3, #0
 800bd2a:	46a0      	mov	r8, r4
 800bd2c:	9312      	str	r3, [sp, #72]	@ 0x48
 800bd2e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bd32:	9316      	str	r3, [sp, #88]	@ 0x58
 800bd34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd36:	9805      	ldr	r0, [sp, #20]
 800bd38:	6859      	ldr	r1, [r3, #4]
 800bd3a:	f001 faeb 	bl	800d314 <_Balloc>
 800bd3e:	4681      	mov	r9, r0
 800bd40:	2800      	cmp	r0, #0
 800bd42:	f43f aef4 	beq.w	800bb2e <_strtod_l+0x436>
 800bd46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd48:	300c      	adds	r0, #12
 800bd4a:	691a      	ldr	r2, [r3, #16]
 800bd4c:	f103 010c 	add.w	r1, r3, #12
 800bd50:	3202      	adds	r2, #2
 800bd52:	0092      	lsls	r2, r2, #2
 800bd54:	f000 fe83 	bl	800ca5e <memcpy>
 800bd58:	ab1c      	add	r3, sp, #112	@ 0x70
 800bd5a:	9301      	str	r3, [sp, #4]
 800bd5c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800bd5e:	9300      	str	r3, [sp, #0]
 800bd60:	4652      	mov	r2, sl
 800bd62:	465b      	mov	r3, fp
 800bd64:	9805      	ldr	r0, [sp, #20]
 800bd66:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bd6a:	f001 fead 	bl	800dac8 <__d2b>
 800bd6e:	901a      	str	r0, [sp, #104]	@ 0x68
 800bd70:	2800      	cmp	r0, #0
 800bd72:	f43f aedc 	beq.w	800bb2e <_strtod_l+0x436>
 800bd76:	2101      	movs	r1, #1
 800bd78:	9805      	ldr	r0, [sp, #20]
 800bd7a:	f001 fc09 	bl	800d590 <__i2b>
 800bd7e:	4680      	mov	r8, r0
 800bd80:	b948      	cbnz	r0, 800bd96 <_strtod_l+0x69e>
 800bd82:	f04f 0800 	mov.w	r8, #0
 800bd86:	e6d2      	b.n	800bb2e <_strtod_l+0x436>
 800bd88:	f04f 32ff 	mov.w	r2, #4294967295
 800bd8c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd90:	ea03 0a0a 	and.w	sl, r3, sl
 800bd94:	e7ae      	b.n	800bcf4 <_strtod_l+0x5fc>
 800bd96:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bd98:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bd9a:	2d00      	cmp	r5, #0
 800bd9c:	bfab      	itete	ge
 800bd9e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bda0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bda2:	18ef      	addge	r7, r5, r3
 800bda4:	1b5e      	sublt	r6, r3, r5
 800bda6:	9b08      	ldr	r3, [sp, #32]
 800bda8:	bfa8      	it	ge
 800bdaa:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bdac:	eba5 0503 	sub.w	r5, r5, r3
 800bdb0:	4415      	add	r5, r2
 800bdb2:	4b67      	ldr	r3, [pc, #412]	@ (800bf50 <_strtod_l+0x858>)
 800bdb4:	f105 35ff 	add.w	r5, r5, #4294967295
 800bdb8:	bfb8      	it	lt
 800bdba:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bdbc:	429d      	cmp	r5, r3
 800bdbe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bdc2:	da50      	bge.n	800be66 <_strtod_l+0x76e>
 800bdc4:	1b5b      	subs	r3, r3, r5
 800bdc6:	2b1f      	cmp	r3, #31
 800bdc8:	f04f 0101 	mov.w	r1, #1
 800bdcc:	eba2 0203 	sub.w	r2, r2, r3
 800bdd0:	dc3d      	bgt.n	800be4e <_strtod_l+0x756>
 800bdd2:	fa01 f303 	lsl.w	r3, r1, r3
 800bdd6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bdd8:	2300      	movs	r3, #0
 800bdda:	9310      	str	r3, [sp, #64]	@ 0x40
 800bddc:	18bd      	adds	r5, r7, r2
 800bdde:	9b08      	ldr	r3, [sp, #32]
 800bde0:	42af      	cmp	r7, r5
 800bde2:	4416      	add	r6, r2
 800bde4:	441e      	add	r6, r3
 800bde6:	463b      	mov	r3, r7
 800bde8:	bfa8      	it	ge
 800bdea:	462b      	movge	r3, r5
 800bdec:	42b3      	cmp	r3, r6
 800bdee:	bfa8      	it	ge
 800bdf0:	4633      	movge	r3, r6
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	bfc2      	ittt	gt
 800bdf6:	1aed      	subgt	r5, r5, r3
 800bdf8:	1af6      	subgt	r6, r6, r3
 800bdfa:	1aff      	subgt	r7, r7, r3
 800bdfc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	dd16      	ble.n	800be30 <_strtod_l+0x738>
 800be02:	4641      	mov	r1, r8
 800be04:	461a      	mov	r2, r3
 800be06:	9805      	ldr	r0, [sp, #20]
 800be08:	f001 fc80 	bl	800d70c <__pow5mult>
 800be0c:	4680      	mov	r8, r0
 800be0e:	2800      	cmp	r0, #0
 800be10:	d0b7      	beq.n	800bd82 <_strtod_l+0x68a>
 800be12:	4601      	mov	r1, r0
 800be14:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800be16:	9805      	ldr	r0, [sp, #20]
 800be18:	f001 fbd0 	bl	800d5bc <__multiply>
 800be1c:	900e      	str	r0, [sp, #56]	@ 0x38
 800be1e:	2800      	cmp	r0, #0
 800be20:	f43f ae85 	beq.w	800bb2e <_strtod_l+0x436>
 800be24:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800be26:	9805      	ldr	r0, [sp, #20]
 800be28:	f001 fab4 	bl	800d394 <_Bfree>
 800be2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be2e:	931a      	str	r3, [sp, #104]	@ 0x68
 800be30:	2d00      	cmp	r5, #0
 800be32:	dc1d      	bgt.n	800be70 <_strtod_l+0x778>
 800be34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be36:	2b00      	cmp	r3, #0
 800be38:	dd23      	ble.n	800be82 <_strtod_l+0x78a>
 800be3a:	4649      	mov	r1, r9
 800be3c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800be3e:	9805      	ldr	r0, [sp, #20]
 800be40:	f001 fc64 	bl	800d70c <__pow5mult>
 800be44:	4681      	mov	r9, r0
 800be46:	b9e0      	cbnz	r0, 800be82 <_strtod_l+0x78a>
 800be48:	f04f 0900 	mov.w	r9, #0
 800be4c:	e66f      	b.n	800bb2e <_strtod_l+0x436>
 800be4e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800be52:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800be56:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800be5a:	35e2      	adds	r5, #226	@ 0xe2
 800be5c:	fa01 f305 	lsl.w	r3, r1, r5
 800be60:	9310      	str	r3, [sp, #64]	@ 0x40
 800be62:	9113      	str	r1, [sp, #76]	@ 0x4c
 800be64:	e7ba      	b.n	800bddc <_strtod_l+0x6e4>
 800be66:	2300      	movs	r3, #0
 800be68:	9310      	str	r3, [sp, #64]	@ 0x40
 800be6a:	2301      	movs	r3, #1
 800be6c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800be6e:	e7b5      	b.n	800bddc <_strtod_l+0x6e4>
 800be70:	462a      	mov	r2, r5
 800be72:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800be74:	9805      	ldr	r0, [sp, #20]
 800be76:	f001 fca3 	bl	800d7c0 <__lshift>
 800be7a:	901a      	str	r0, [sp, #104]	@ 0x68
 800be7c:	2800      	cmp	r0, #0
 800be7e:	d1d9      	bne.n	800be34 <_strtod_l+0x73c>
 800be80:	e655      	b.n	800bb2e <_strtod_l+0x436>
 800be82:	2e00      	cmp	r6, #0
 800be84:	dd07      	ble.n	800be96 <_strtod_l+0x79e>
 800be86:	4649      	mov	r1, r9
 800be88:	4632      	mov	r2, r6
 800be8a:	9805      	ldr	r0, [sp, #20]
 800be8c:	f001 fc98 	bl	800d7c0 <__lshift>
 800be90:	4681      	mov	r9, r0
 800be92:	2800      	cmp	r0, #0
 800be94:	d0d8      	beq.n	800be48 <_strtod_l+0x750>
 800be96:	2f00      	cmp	r7, #0
 800be98:	dd08      	ble.n	800beac <_strtod_l+0x7b4>
 800be9a:	4641      	mov	r1, r8
 800be9c:	463a      	mov	r2, r7
 800be9e:	9805      	ldr	r0, [sp, #20]
 800bea0:	f001 fc8e 	bl	800d7c0 <__lshift>
 800bea4:	4680      	mov	r8, r0
 800bea6:	2800      	cmp	r0, #0
 800bea8:	f43f ae41 	beq.w	800bb2e <_strtod_l+0x436>
 800beac:	464a      	mov	r2, r9
 800beae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800beb0:	9805      	ldr	r0, [sp, #20]
 800beb2:	f001 fd0d 	bl	800d8d0 <__mdiff>
 800beb6:	4604      	mov	r4, r0
 800beb8:	2800      	cmp	r0, #0
 800beba:	f43f ae38 	beq.w	800bb2e <_strtod_l+0x436>
 800bebe:	68c3      	ldr	r3, [r0, #12]
 800bec0:	4641      	mov	r1, r8
 800bec2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bec4:	2300      	movs	r3, #0
 800bec6:	60c3      	str	r3, [r0, #12]
 800bec8:	f001 fce6 	bl	800d898 <__mcmp>
 800becc:	2800      	cmp	r0, #0
 800bece:	da45      	bge.n	800bf5c <_strtod_l+0x864>
 800bed0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bed2:	ea53 030a 	orrs.w	r3, r3, sl
 800bed6:	d16b      	bne.n	800bfb0 <_strtod_l+0x8b8>
 800bed8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d167      	bne.n	800bfb0 <_strtod_l+0x8b8>
 800bee0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bee4:	0d1b      	lsrs	r3, r3, #20
 800bee6:	051b      	lsls	r3, r3, #20
 800bee8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800beec:	d960      	bls.n	800bfb0 <_strtod_l+0x8b8>
 800beee:	6963      	ldr	r3, [r4, #20]
 800bef0:	b913      	cbnz	r3, 800bef8 <_strtod_l+0x800>
 800bef2:	6923      	ldr	r3, [r4, #16]
 800bef4:	2b01      	cmp	r3, #1
 800bef6:	dd5b      	ble.n	800bfb0 <_strtod_l+0x8b8>
 800bef8:	4621      	mov	r1, r4
 800befa:	2201      	movs	r2, #1
 800befc:	9805      	ldr	r0, [sp, #20]
 800befe:	f001 fc5f 	bl	800d7c0 <__lshift>
 800bf02:	4641      	mov	r1, r8
 800bf04:	4604      	mov	r4, r0
 800bf06:	f001 fcc7 	bl	800d898 <__mcmp>
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	dd50      	ble.n	800bfb0 <_strtod_l+0x8b8>
 800bf0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bf12:	9a08      	ldr	r2, [sp, #32]
 800bf14:	0d1b      	lsrs	r3, r3, #20
 800bf16:	051b      	lsls	r3, r3, #20
 800bf18:	2a00      	cmp	r2, #0
 800bf1a:	d06a      	beq.n	800bff2 <_strtod_l+0x8fa>
 800bf1c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bf20:	d867      	bhi.n	800bff2 <_strtod_l+0x8fa>
 800bf22:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bf26:	f67f ae98 	bls.w	800bc5a <_strtod_l+0x562>
 800bf2a:	4650      	mov	r0, sl
 800bf2c:	4659      	mov	r1, fp
 800bf2e:	4b09      	ldr	r3, [pc, #36]	@ (800bf54 <_strtod_l+0x85c>)
 800bf30:	2200      	movs	r2, #0
 800bf32:	f7f9 fadb 	bl	80054ec <__aeabi_dmul>
 800bf36:	4b08      	ldr	r3, [pc, #32]	@ (800bf58 <_strtod_l+0x860>)
 800bf38:	4682      	mov	sl, r0
 800bf3a:	400b      	ands	r3, r1
 800bf3c:	468b      	mov	fp, r1
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	f47f ae00 	bne.w	800bb44 <_strtod_l+0x44c>
 800bf44:	2322      	movs	r3, #34	@ 0x22
 800bf46:	9a05      	ldr	r2, [sp, #20]
 800bf48:	6013      	str	r3, [r2, #0]
 800bf4a:	e5fb      	b.n	800bb44 <_strtod_l+0x44c>
 800bf4c:	0800eba8 	.word	0x0800eba8
 800bf50:	fffffc02 	.word	0xfffffc02
 800bf54:	39500000 	.word	0x39500000
 800bf58:	7ff00000 	.word	0x7ff00000
 800bf5c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bf60:	d165      	bne.n	800c02e <_strtod_l+0x936>
 800bf62:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bf64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf68:	b35a      	cbz	r2, 800bfc2 <_strtod_l+0x8ca>
 800bf6a:	4a99      	ldr	r2, [pc, #612]	@ (800c1d0 <_strtod_l+0xad8>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d12b      	bne.n	800bfc8 <_strtod_l+0x8d0>
 800bf70:	9b08      	ldr	r3, [sp, #32]
 800bf72:	4651      	mov	r1, sl
 800bf74:	b303      	cbz	r3, 800bfb8 <_strtod_l+0x8c0>
 800bf76:	465a      	mov	r2, fp
 800bf78:	4b96      	ldr	r3, [pc, #600]	@ (800c1d4 <_strtod_l+0xadc>)
 800bf7a:	4013      	ands	r3, r2
 800bf7c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bf80:	f04f 32ff 	mov.w	r2, #4294967295
 800bf84:	d81b      	bhi.n	800bfbe <_strtod_l+0x8c6>
 800bf86:	0d1b      	lsrs	r3, r3, #20
 800bf88:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bf8c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf90:	4299      	cmp	r1, r3
 800bf92:	d119      	bne.n	800bfc8 <_strtod_l+0x8d0>
 800bf94:	4b90      	ldr	r3, [pc, #576]	@ (800c1d8 <_strtod_l+0xae0>)
 800bf96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d102      	bne.n	800bfa2 <_strtod_l+0x8aa>
 800bf9c:	3101      	adds	r1, #1
 800bf9e:	f43f adc6 	beq.w	800bb2e <_strtod_l+0x436>
 800bfa2:	f04f 0a00 	mov.w	sl, #0
 800bfa6:	4b8b      	ldr	r3, [pc, #556]	@ (800c1d4 <_strtod_l+0xadc>)
 800bfa8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bfaa:	401a      	ands	r2, r3
 800bfac:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bfb0:	9b08      	ldr	r3, [sp, #32]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d1b9      	bne.n	800bf2a <_strtod_l+0x832>
 800bfb6:	e5c5      	b.n	800bb44 <_strtod_l+0x44c>
 800bfb8:	f04f 33ff 	mov.w	r3, #4294967295
 800bfbc:	e7e8      	b.n	800bf90 <_strtod_l+0x898>
 800bfbe:	4613      	mov	r3, r2
 800bfc0:	e7e6      	b.n	800bf90 <_strtod_l+0x898>
 800bfc2:	ea53 030a 	orrs.w	r3, r3, sl
 800bfc6:	d0a2      	beq.n	800bf0e <_strtod_l+0x816>
 800bfc8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bfca:	b1db      	cbz	r3, 800c004 <_strtod_l+0x90c>
 800bfcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bfce:	4213      	tst	r3, r2
 800bfd0:	d0ee      	beq.n	800bfb0 <_strtod_l+0x8b8>
 800bfd2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfd4:	4650      	mov	r0, sl
 800bfd6:	4659      	mov	r1, fp
 800bfd8:	9a08      	ldr	r2, [sp, #32]
 800bfda:	b1bb      	cbz	r3, 800c00c <_strtod_l+0x914>
 800bfdc:	f7ff fb68 	bl	800b6b0 <sulp>
 800bfe0:	4602      	mov	r2, r0
 800bfe2:	460b      	mov	r3, r1
 800bfe4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bfe8:	f7f9 f8ca 	bl	8005180 <__adddf3>
 800bfec:	4682      	mov	sl, r0
 800bfee:	468b      	mov	fp, r1
 800bff0:	e7de      	b.n	800bfb0 <_strtod_l+0x8b8>
 800bff2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bff6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bffa:	f04f 3aff 	mov.w	sl, #4294967295
 800bffe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c002:	e7d5      	b.n	800bfb0 <_strtod_l+0x8b8>
 800c004:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c006:	ea13 0f0a 	tst.w	r3, sl
 800c00a:	e7e1      	b.n	800bfd0 <_strtod_l+0x8d8>
 800c00c:	f7ff fb50 	bl	800b6b0 <sulp>
 800c010:	4602      	mov	r2, r0
 800c012:	460b      	mov	r3, r1
 800c014:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c018:	f7f9 f8b0 	bl	800517c <__aeabi_dsub>
 800c01c:	2200      	movs	r2, #0
 800c01e:	2300      	movs	r3, #0
 800c020:	4682      	mov	sl, r0
 800c022:	468b      	mov	fp, r1
 800c024:	f7f9 fcca 	bl	80059bc <__aeabi_dcmpeq>
 800c028:	2800      	cmp	r0, #0
 800c02a:	d0c1      	beq.n	800bfb0 <_strtod_l+0x8b8>
 800c02c:	e615      	b.n	800bc5a <_strtod_l+0x562>
 800c02e:	4641      	mov	r1, r8
 800c030:	4620      	mov	r0, r4
 800c032:	f001 fda1 	bl	800db78 <__ratio>
 800c036:	2200      	movs	r2, #0
 800c038:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c03c:	4606      	mov	r6, r0
 800c03e:	460f      	mov	r7, r1
 800c040:	f7f9 fcd0 	bl	80059e4 <__aeabi_dcmple>
 800c044:	2800      	cmp	r0, #0
 800c046:	d06d      	beq.n	800c124 <_strtod_l+0xa2c>
 800c048:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d178      	bne.n	800c140 <_strtod_l+0xa48>
 800c04e:	f1ba 0f00 	cmp.w	sl, #0
 800c052:	d156      	bne.n	800c102 <_strtod_l+0xa0a>
 800c054:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c056:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d158      	bne.n	800c110 <_strtod_l+0xa18>
 800c05e:	2200      	movs	r2, #0
 800c060:	4630      	mov	r0, r6
 800c062:	4639      	mov	r1, r7
 800c064:	4b5d      	ldr	r3, [pc, #372]	@ (800c1dc <_strtod_l+0xae4>)
 800c066:	f7f9 fcb3 	bl	80059d0 <__aeabi_dcmplt>
 800c06a:	2800      	cmp	r0, #0
 800c06c:	d157      	bne.n	800c11e <_strtod_l+0xa26>
 800c06e:	4630      	mov	r0, r6
 800c070:	4639      	mov	r1, r7
 800c072:	2200      	movs	r2, #0
 800c074:	4b5a      	ldr	r3, [pc, #360]	@ (800c1e0 <_strtod_l+0xae8>)
 800c076:	f7f9 fa39 	bl	80054ec <__aeabi_dmul>
 800c07a:	4606      	mov	r6, r0
 800c07c:	460f      	mov	r7, r1
 800c07e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c082:	9606      	str	r6, [sp, #24]
 800c084:	9307      	str	r3, [sp, #28]
 800c086:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c08a:	4d52      	ldr	r5, [pc, #328]	@ (800c1d4 <_strtod_l+0xadc>)
 800c08c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c090:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c092:	401d      	ands	r5, r3
 800c094:	4b53      	ldr	r3, [pc, #332]	@ (800c1e4 <_strtod_l+0xaec>)
 800c096:	429d      	cmp	r5, r3
 800c098:	f040 80aa 	bne.w	800c1f0 <_strtod_l+0xaf8>
 800c09c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c09e:	4650      	mov	r0, sl
 800c0a0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c0a4:	4659      	mov	r1, fp
 800c0a6:	f001 fca7 	bl	800d9f8 <__ulp>
 800c0aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c0ae:	f7f9 fa1d 	bl	80054ec <__aeabi_dmul>
 800c0b2:	4652      	mov	r2, sl
 800c0b4:	465b      	mov	r3, fp
 800c0b6:	f7f9 f863 	bl	8005180 <__adddf3>
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	4945      	ldr	r1, [pc, #276]	@ (800c1d4 <_strtod_l+0xadc>)
 800c0be:	4a4a      	ldr	r2, [pc, #296]	@ (800c1e8 <_strtod_l+0xaf0>)
 800c0c0:	4019      	ands	r1, r3
 800c0c2:	4291      	cmp	r1, r2
 800c0c4:	4682      	mov	sl, r0
 800c0c6:	d942      	bls.n	800c14e <_strtod_l+0xa56>
 800c0c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c0ca:	4b43      	ldr	r3, [pc, #268]	@ (800c1d8 <_strtod_l+0xae0>)
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d103      	bne.n	800c0d8 <_strtod_l+0x9e0>
 800c0d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	f43f ad2b 	beq.w	800bb2e <_strtod_l+0x436>
 800c0d8:	f04f 3aff 	mov.w	sl, #4294967295
 800c0dc:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800c1d8 <_strtod_l+0xae0>
 800c0e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c0e2:	9805      	ldr	r0, [sp, #20]
 800c0e4:	f001 f956 	bl	800d394 <_Bfree>
 800c0e8:	4649      	mov	r1, r9
 800c0ea:	9805      	ldr	r0, [sp, #20]
 800c0ec:	f001 f952 	bl	800d394 <_Bfree>
 800c0f0:	4641      	mov	r1, r8
 800c0f2:	9805      	ldr	r0, [sp, #20]
 800c0f4:	f001 f94e 	bl	800d394 <_Bfree>
 800c0f8:	4621      	mov	r1, r4
 800c0fa:	9805      	ldr	r0, [sp, #20]
 800c0fc:	f001 f94a 	bl	800d394 <_Bfree>
 800c100:	e618      	b.n	800bd34 <_strtod_l+0x63c>
 800c102:	f1ba 0f01 	cmp.w	sl, #1
 800c106:	d103      	bne.n	800c110 <_strtod_l+0xa18>
 800c108:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	f43f ada5 	beq.w	800bc5a <_strtod_l+0x562>
 800c110:	2200      	movs	r2, #0
 800c112:	4b36      	ldr	r3, [pc, #216]	@ (800c1ec <_strtod_l+0xaf4>)
 800c114:	2600      	movs	r6, #0
 800c116:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c11a:	4f30      	ldr	r7, [pc, #192]	@ (800c1dc <_strtod_l+0xae4>)
 800c11c:	e7b3      	b.n	800c086 <_strtod_l+0x98e>
 800c11e:	2600      	movs	r6, #0
 800c120:	4f2f      	ldr	r7, [pc, #188]	@ (800c1e0 <_strtod_l+0xae8>)
 800c122:	e7ac      	b.n	800c07e <_strtod_l+0x986>
 800c124:	4630      	mov	r0, r6
 800c126:	4639      	mov	r1, r7
 800c128:	4b2d      	ldr	r3, [pc, #180]	@ (800c1e0 <_strtod_l+0xae8>)
 800c12a:	2200      	movs	r2, #0
 800c12c:	f7f9 f9de 	bl	80054ec <__aeabi_dmul>
 800c130:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c132:	4606      	mov	r6, r0
 800c134:	460f      	mov	r7, r1
 800c136:	2b00      	cmp	r3, #0
 800c138:	d0a1      	beq.n	800c07e <_strtod_l+0x986>
 800c13a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c13e:	e7a2      	b.n	800c086 <_strtod_l+0x98e>
 800c140:	2200      	movs	r2, #0
 800c142:	4b26      	ldr	r3, [pc, #152]	@ (800c1dc <_strtod_l+0xae4>)
 800c144:	4616      	mov	r6, r2
 800c146:	461f      	mov	r7, r3
 800c148:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c14c:	e79b      	b.n	800c086 <_strtod_l+0x98e>
 800c14e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c152:	9b08      	ldr	r3, [sp, #32]
 800c154:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d1c1      	bne.n	800c0e0 <_strtod_l+0x9e8>
 800c15c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c160:	0d1b      	lsrs	r3, r3, #20
 800c162:	051b      	lsls	r3, r3, #20
 800c164:	429d      	cmp	r5, r3
 800c166:	d1bb      	bne.n	800c0e0 <_strtod_l+0x9e8>
 800c168:	4630      	mov	r0, r6
 800c16a:	4639      	mov	r1, r7
 800c16c:	f7f9 fd6a 	bl	8005c44 <__aeabi_d2lz>
 800c170:	f7f9 f98e 	bl	8005490 <__aeabi_l2d>
 800c174:	4602      	mov	r2, r0
 800c176:	460b      	mov	r3, r1
 800c178:	4630      	mov	r0, r6
 800c17a:	4639      	mov	r1, r7
 800c17c:	f7f8 fffe 	bl	800517c <__aeabi_dsub>
 800c180:	460b      	mov	r3, r1
 800c182:	4602      	mov	r2, r0
 800c184:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c188:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c18c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c18e:	ea46 060a 	orr.w	r6, r6, sl
 800c192:	431e      	orrs	r6, r3
 800c194:	d069      	beq.n	800c26a <_strtod_l+0xb72>
 800c196:	a30a      	add	r3, pc, #40	@ (adr r3, 800c1c0 <_strtod_l+0xac8>)
 800c198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19c:	f7f9 fc18 	bl	80059d0 <__aeabi_dcmplt>
 800c1a0:	2800      	cmp	r0, #0
 800c1a2:	f47f accf 	bne.w	800bb44 <_strtod_l+0x44c>
 800c1a6:	a308      	add	r3, pc, #32	@ (adr r3, 800c1c8 <_strtod_l+0xad0>)
 800c1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1b0:	f7f9 fc2c 	bl	8005a0c <__aeabi_dcmpgt>
 800c1b4:	2800      	cmp	r0, #0
 800c1b6:	d093      	beq.n	800c0e0 <_strtod_l+0x9e8>
 800c1b8:	e4c4      	b.n	800bb44 <_strtod_l+0x44c>
 800c1ba:	bf00      	nop
 800c1bc:	f3af 8000 	nop.w
 800c1c0:	94a03595 	.word	0x94a03595
 800c1c4:	3fdfffff 	.word	0x3fdfffff
 800c1c8:	35afe535 	.word	0x35afe535
 800c1cc:	3fe00000 	.word	0x3fe00000
 800c1d0:	000fffff 	.word	0x000fffff
 800c1d4:	7ff00000 	.word	0x7ff00000
 800c1d8:	7fefffff 	.word	0x7fefffff
 800c1dc:	3ff00000 	.word	0x3ff00000
 800c1e0:	3fe00000 	.word	0x3fe00000
 800c1e4:	7fe00000 	.word	0x7fe00000
 800c1e8:	7c9fffff 	.word	0x7c9fffff
 800c1ec:	bff00000 	.word	0xbff00000
 800c1f0:	9b08      	ldr	r3, [sp, #32]
 800c1f2:	b323      	cbz	r3, 800c23e <_strtod_l+0xb46>
 800c1f4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c1f8:	d821      	bhi.n	800c23e <_strtod_l+0xb46>
 800c1fa:	a327      	add	r3, pc, #156	@ (adr r3, 800c298 <_strtod_l+0xba0>)
 800c1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c200:	4630      	mov	r0, r6
 800c202:	4639      	mov	r1, r7
 800c204:	f7f9 fbee 	bl	80059e4 <__aeabi_dcmple>
 800c208:	b1a0      	cbz	r0, 800c234 <_strtod_l+0xb3c>
 800c20a:	4639      	mov	r1, r7
 800c20c:	4630      	mov	r0, r6
 800c20e:	f7f9 fc1d 	bl	8005a4c <__aeabi_d2uiz>
 800c212:	2801      	cmp	r0, #1
 800c214:	bf38      	it	cc
 800c216:	2001      	movcc	r0, #1
 800c218:	f7f9 f8ee 	bl	80053f8 <__aeabi_ui2d>
 800c21c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c21e:	4606      	mov	r6, r0
 800c220:	460f      	mov	r7, r1
 800c222:	b9fb      	cbnz	r3, 800c264 <_strtod_l+0xb6c>
 800c224:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c228:	9014      	str	r0, [sp, #80]	@ 0x50
 800c22a:	9315      	str	r3, [sp, #84]	@ 0x54
 800c22c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c230:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c234:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c236:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c23a:	1b5b      	subs	r3, r3, r5
 800c23c:	9311      	str	r3, [sp, #68]	@ 0x44
 800c23e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c242:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c246:	f001 fbd7 	bl	800d9f8 <__ulp>
 800c24a:	4602      	mov	r2, r0
 800c24c:	460b      	mov	r3, r1
 800c24e:	4650      	mov	r0, sl
 800c250:	4659      	mov	r1, fp
 800c252:	f7f9 f94b 	bl	80054ec <__aeabi_dmul>
 800c256:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c25a:	f7f8 ff91 	bl	8005180 <__adddf3>
 800c25e:	4682      	mov	sl, r0
 800c260:	468b      	mov	fp, r1
 800c262:	e776      	b.n	800c152 <_strtod_l+0xa5a>
 800c264:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c268:	e7e0      	b.n	800c22c <_strtod_l+0xb34>
 800c26a:	a30d      	add	r3, pc, #52	@ (adr r3, 800c2a0 <_strtod_l+0xba8>)
 800c26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c270:	f7f9 fbae 	bl	80059d0 <__aeabi_dcmplt>
 800c274:	e79e      	b.n	800c1b4 <_strtod_l+0xabc>
 800c276:	2300      	movs	r3, #0
 800c278:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c27a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c27c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c27e:	6013      	str	r3, [r2, #0]
 800c280:	f7ff ba77 	b.w	800b772 <_strtod_l+0x7a>
 800c284:	2a65      	cmp	r2, #101	@ 0x65
 800c286:	f43f ab6e 	beq.w	800b966 <_strtod_l+0x26e>
 800c28a:	2a45      	cmp	r2, #69	@ 0x45
 800c28c:	f43f ab6b 	beq.w	800b966 <_strtod_l+0x26e>
 800c290:	2301      	movs	r3, #1
 800c292:	f7ff bba6 	b.w	800b9e2 <_strtod_l+0x2ea>
 800c296:	bf00      	nop
 800c298:	ffc00000 	.word	0xffc00000
 800c29c:	41dfffff 	.word	0x41dfffff
 800c2a0:	94a03595 	.word	0x94a03595
 800c2a4:	3fcfffff 	.word	0x3fcfffff

0800c2a8 <strtof>:
 800c2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2ac:	4d24      	ldr	r5, [pc, #144]	@ (800c340 <strtof+0x98>)
 800c2ae:	460a      	mov	r2, r1
 800c2b0:	4b24      	ldr	r3, [pc, #144]	@ (800c344 <strtof+0x9c>)
 800c2b2:	4601      	mov	r1, r0
 800c2b4:	6828      	ldr	r0, [r5, #0]
 800c2b6:	f7ff fa1f 	bl	800b6f8 <_strtod_l>
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	460b      	mov	r3, r1
 800c2be:	4606      	mov	r6, r0
 800c2c0:	460f      	mov	r7, r1
 800c2c2:	f7f9 fbad 	bl	8005a20 <__aeabi_dcmpun>
 800c2c6:	b168      	cbz	r0, 800c2e4 <strtof+0x3c>
 800c2c8:	2f00      	cmp	r7, #0
 800c2ca:	481f      	ldr	r0, [pc, #124]	@ (800c348 <strtof+0xa0>)
 800c2cc:	da06      	bge.n	800c2dc <strtof+0x34>
 800c2ce:	f000 fbdb 	bl	800ca88 <nanf>
 800c2d2:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800c2d6:	4620      	mov	r0, r4
 800c2d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2dc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2e0:	f000 bbd2 	b.w	800ca88 <nanf>
 800c2e4:	4639      	mov	r1, r7
 800c2e6:	4630      	mov	r0, r6
 800c2e8:	f7f9 fbd0 	bl	8005a8c <__aeabi_d2f>
 800c2ec:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800c2f0:	4604      	mov	r4, r0
 800c2f2:	4916      	ldr	r1, [pc, #88]	@ (800c34c <strtof+0xa4>)
 800c2f4:	4640      	mov	r0, r8
 800c2f6:	f7f9 fc8f 	bl	8005c18 <__aeabi_fcmpun>
 800c2fa:	b9b0      	cbnz	r0, 800c32a <strtof+0x82>
 800c2fc:	4640      	mov	r0, r8
 800c2fe:	4913      	ldr	r1, [pc, #76]	@ (800c34c <strtof+0xa4>)
 800c300:	f7f9 fc6c 	bl	8005bdc <__aeabi_fcmple>
 800c304:	b988      	cbnz	r0, 800c32a <strtof+0x82>
 800c306:	f027 4900 	bic.w	r9, r7, #2147483648	@ 0x80000000
 800c30a:	f04f 32ff 	mov.w	r2, #4294967295
 800c30e:	4630      	mov	r0, r6
 800c310:	4649      	mov	r1, r9
 800c312:	4b0f      	ldr	r3, [pc, #60]	@ (800c350 <strtof+0xa8>)
 800c314:	f7f9 fb84 	bl	8005a20 <__aeabi_dcmpun>
 800c318:	b970      	cbnz	r0, 800c338 <strtof+0x90>
 800c31a:	f04f 32ff 	mov.w	r2, #4294967295
 800c31e:	4630      	mov	r0, r6
 800c320:	4649      	mov	r1, r9
 800c322:	4b0b      	ldr	r3, [pc, #44]	@ (800c350 <strtof+0xa8>)
 800c324:	f7f9 fb5e 	bl	80059e4 <__aeabi_dcmple>
 800c328:	b930      	cbnz	r0, 800c338 <strtof+0x90>
 800c32a:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800c32e:	d1d2      	bne.n	800c2d6 <strtof+0x2e>
 800c330:	4b08      	ldr	r3, [pc, #32]	@ (800c354 <strtof+0xac>)
 800c332:	403b      	ands	r3, r7
 800c334:	2b00      	cmp	r3, #0
 800c336:	d0ce      	beq.n	800c2d6 <strtof+0x2e>
 800c338:	2222      	movs	r2, #34	@ 0x22
 800c33a:	682b      	ldr	r3, [r5, #0]
 800c33c:	601a      	str	r2, [r3, #0]
 800c33e:	e7ca      	b.n	800c2d6 <strtof+0x2e>
 800c340:	2000030c 	.word	0x2000030c
 800c344:	200001a0 	.word	0x200001a0
 800c348:	0800ea24 	.word	0x0800ea24
 800c34c:	7f7fffff 	.word	0x7f7fffff
 800c350:	7fefffff 	.word	0x7fefffff
 800c354:	7ff00000 	.word	0x7ff00000

0800c358 <_strtoul_l.constprop.0>:
 800c358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c35c:	4686      	mov	lr, r0
 800c35e:	460d      	mov	r5, r1
 800c360:	4e33      	ldr	r6, [pc, #204]	@ (800c430 <_strtoul_l.constprop.0+0xd8>)
 800c362:	4628      	mov	r0, r5
 800c364:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c368:	5d37      	ldrb	r7, [r6, r4]
 800c36a:	f017 0708 	ands.w	r7, r7, #8
 800c36e:	d1f8      	bne.n	800c362 <_strtoul_l.constprop.0+0xa>
 800c370:	2c2d      	cmp	r4, #45	@ 0x2d
 800c372:	d12f      	bne.n	800c3d4 <_strtoul_l.constprop.0+0x7c>
 800c374:	2701      	movs	r7, #1
 800c376:	782c      	ldrb	r4, [r5, #0]
 800c378:	1c85      	adds	r5, r0, #2
 800c37a:	f033 0010 	bics.w	r0, r3, #16
 800c37e:	d109      	bne.n	800c394 <_strtoul_l.constprop.0+0x3c>
 800c380:	2c30      	cmp	r4, #48	@ 0x30
 800c382:	d12c      	bne.n	800c3de <_strtoul_l.constprop.0+0x86>
 800c384:	7828      	ldrb	r0, [r5, #0]
 800c386:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800c38a:	2858      	cmp	r0, #88	@ 0x58
 800c38c:	d127      	bne.n	800c3de <_strtoul_l.constprop.0+0x86>
 800c38e:	2310      	movs	r3, #16
 800c390:	786c      	ldrb	r4, [r5, #1]
 800c392:	3502      	adds	r5, #2
 800c394:	f04f 38ff 	mov.w	r8, #4294967295
 800c398:	fbb8 f8f3 	udiv	r8, r8, r3
 800c39c:	2600      	movs	r6, #0
 800c39e:	fb03 f908 	mul.w	r9, r3, r8
 800c3a2:	4630      	mov	r0, r6
 800c3a4:	ea6f 0909 	mvn.w	r9, r9
 800c3a8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800c3ac:	f1bc 0f09 	cmp.w	ip, #9
 800c3b0:	d81c      	bhi.n	800c3ec <_strtoul_l.constprop.0+0x94>
 800c3b2:	4664      	mov	r4, ip
 800c3b4:	42a3      	cmp	r3, r4
 800c3b6:	dd2a      	ble.n	800c40e <_strtoul_l.constprop.0+0xb6>
 800c3b8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800c3bc:	d007      	beq.n	800c3ce <_strtoul_l.constprop.0+0x76>
 800c3be:	4580      	cmp	r8, r0
 800c3c0:	d322      	bcc.n	800c408 <_strtoul_l.constprop.0+0xb0>
 800c3c2:	d101      	bne.n	800c3c8 <_strtoul_l.constprop.0+0x70>
 800c3c4:	45a1      	cmp	r9, r4
 800c3c6:	db1f      	blt.n	800c408 <_strtoul_l.constprop.0+0xb0>
 800c3c8:	2601      	movs	r6, #1
 800c3ca:	fb00 4003 	mla	r0, r0, r3, r4
 800c3ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c3d2:	e7e9      	b.n	800c3a8 <_strtoul_l.constprop.0+0x50>
 800c3d4:	2c2b      	cmp	r4, #43	@ 0x2b
 800c3d6:	bf04      	itt	eq
 800c3d8:	782c      	ldrbeq	r4, [r5, #0]
 800c3da:	1c85      	addeq	r5, r0, #2
 800c3dc:	e7cd      	b.n	800c37a <_strtoul_l.constprop.0+0x22>
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d1d8      	bne.n	800c394 <_strtoul_l.constprop.0+0x3c>
 800c3e2:	2c30      	cmp	r4, #48	@ 0x30
 800c3e4:	bf0c      	ite	eq
 800c3e6:	2308      	moveq	r3, #8
 800c3e8:	230a      	movne	r3, #10
 800c3ea:	e7d3      	b.n	800c394 <_strtoul_l.constprop.0+0x3c>
 800c3ec:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800c3f0:	f1bc 0f19 	cmp.w	ip, #25
 800c3f4:	d801      	bhi.n	800c3fa <_strtoul_l.constprop.0+0xa2>
 800c3f6:	3c37      	subs	r4, #55	@ 0x37
 800c3f8:	e7dc      	b.n	800c3b4 <_strtoul_l.constprop.0+0x5c>
 800c3fa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800c3fe:	f1bc 0f19 	cmp.w	ip, #25
 800c402:	d804      	bhi.n	800c40e <_strtoul_l.constprop.0+0xb6>
 800c404:	3c57      	subs	r4, #87	@ 0x57
 800c406:	e7d5      	b.n	800c3b4 <_strtoul_l.constprop.0+0x5c>
 800c408:	f04f 36ff 	mov.w	r6, #4294967295
 800c40c:	e7df      	b.n	800c3ce <_strtoul_l.constprop.0+0x76>
 800c40e:	1c73      	adds	r3, r6, #1
 800c410:	d106      	bne.n	800c420 <_strtoul_l.constprop.0+0xc8>
 800c412:	2322      	movs	r3, #34	@ 0x22
 800c414:	4630      	mov	r0, r6
 800c416:	f8ce 3000 	str.w	r3, [lr]
 800c41a:	b932      	cbnz	r2, 800c42a <_strtoul_l.constprop.0+0xd2>
 800c41c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c420:	b107      	cbz	r7, 800c424 <_strtoul_l.constprop.0+0xcc>
 800c422:	4240      	negs	r0, r0
 800c424:	2a00      	cmp	r2, #0
 800c426:	d0f9      	beq.n	800c41c <_strtoul_l.constprop.0+0xc4>
 800c428:	b106      	cbz	r6, 800c42c <_strtoul_l.constprop.0+0xd4>
 800c42a:	1e69      	subs	r1, r5, #1
 800c42c:	6011      	str	r1, [r2, #0]
 800c42e:	e7f5      	b.n	800c41c <_strtoul_l.constprop.0+0xc4>
 800c430:	0800ebd1 	.word	0x0800ebd1

0800c434 <strtoul>:
 800c434:	4613      	mov	r3, r2
 800c436:	460a      	mov	r2, r1
 800c438:	4601      	mov	r1, r0
 800c43a:	4802      	ldr	r0, [pc, #8]	@ (800c444 <strtoul+0x10>)
 800c43c:	6800      	ldr	r0, [r0, #0]
 800c43e:	f7ff bf8b 	b.w	800c358 <_strtoul_l.constprop.0>
 800c442:	bf00      	nop
 800c444:	2000030c 	.word	0x2000030c

0800c448 <std>:
 800c448:	2300      	movs	r3, #0
 800c44a:	b510      	push	{r4, lr}
 800c44c:	4604      	mov	r4, r0
 800c44e:	e9c0 3300 	strd	r3, r3, [r0]
 800c452:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c456:	6083      	str	r3, [r0, #8]
 800c458:	8181      	strh	r1, [r0, #12]
 800c45a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c45c:	81c2      	strh	r2, [r0, #14]
 800c45e:	6183      	str	r3, [r0, #24]
 800c460:	4619      	mov	r1, r3
 800c462:	2208      	movs	r2, #8
 800c464:	305c      	adds	r0, #92	@ 0x5c
 800c466:	f000 fa39 	bl	800c8dc <memset>
 800c46a:	4b0d      	ldr	r3, [pc, #52]	@ (800c4a0 <std+0x58>)
 800c46c:	6224      	str	r4, [r4, #32]
 800c46e:	6263      	str	r3, [r4, #36]	@ 0x24
 800c470:	4b0c      	ldr	r3, [pc, #48]	@ (800c4a4 <std+0x5c>)
 800c472:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c474:	4b0c      	ldr	r3, [pc, #48]	@ (800c4a8 <std+0x60>)
 800c476:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c478:	4b0c      	ldr	r3, [pc, #48]	@ (800c4ac <std+0x64>)
 800c47a:	6323      	str	r3, [r4, #48]	@ 0x30
 800c47c:	4b0c      	ldr	r3, [pc, #48]	@ (800c4b0 <std+0x68>)
 800c47e:	429c      	cmp	r4, r3
 800c480:	d006      	beq.n	800c490 <std+0x48>
 800c482:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c486:	4294      	cmp	r4, r2
 800c488:	d002      	beq.n	800c490 <std+0x48>
 800c48a:	33d0      	adds	r3, #208	@ 0xd0
 800c48c:	429c      	cmp	r4, r3
 800c48e:	d105      	bne.n	800c49c <std+0x54>
 800c490:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c498:	f000 bad6 	b.w	800ca48 <__retarget_lock_init_recursive>
 800c49c:	bd10      	pop	{r4, pc}
 800c49e:	bf00      	nop
 800c4a0:	0800c689 	.word	0x0800c689
 800c4a4:	0800c6ab 	.word	0x0800c6ab
 800c4a8:	0800c6e3 	.word	0x0800c6e3
 800c4ac:	0800c707 	.word	0x0800c707
 800c4b0:	20003408 	.word	0x20003408

0800c4b4 <stdio_exit_handler>:
 800c4b4:	4a02      	ldr	r2, [pc, #8]	@ (800c4c0 <stdio_exit_handler+0xc>)
 800c4b6:	4903      	ldr	r1, [pc, #12]	@ (800c4c4 <stdio_exit_handler+0x10>)
 800c4b8:	4803      	ldr	r0, [pc, #12]	@ (800c4c8 <stdio_exit_handler+0x14>)
 800c4ba:	f000 b869 	b.w	800c590 <_fwalk_sglue>
 800c4be:	bf00      	nop
 800c4c0:	20000194 	.word	0x20000194
 800c4c4:	0800e34d 	.word	0x0800e34d
 800c4c8:	20000310 	.word	0x20000310

0800c4cc <cleanup_stdio>:
 800c4cc:	6841      	ldr	r1, [r0, #4]
 800c4ce:	4b0c      	ldr	r3, [pc, #48]	@ (800c500 <cleanup_stdio+0x34>)
 800c4d0:	b510      	push	{r4, lr}
 800c4d2:	4299      	cmp	r1, r3
 800c4d4:	4604      	mov	r4, r0
 800c4d6:	d001      	beq.n	800c4dc <cleanup_stdio+0x10>
 800c4d8:	f001 ff38 	bl	800e34c <_fflush_r>
 800c4dc:	68a1      	ldr	r1, [r4, #8]
 800c4de:	4b09      	ldr	r3, [pc, #36]	@ (800c504 <cleanup_stdio+0x38>)
 800c4e0:	4299      	cmp	r1, r3
 800c4e2:	d002      	beq.n	800c4ea <cleanup_stdio+0x1e>
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	f001 ff31 	bl	800e34c <_fflush_r>
 800c4ea:	68e1      	ldr	r1, [r4, #12]
 800c4ec:	4b06      	ldr	r3, [pc, #24]	@ (800c508 <cleanup_stdio+0x3c>)
 800c4ee:	4299      	cmp	r1, r3
 800c4f0:	d004      	beq.n	800c4fc <cleanup_stdio+0x30>
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4f8:	f001 bf28 	b.w	800e34c <_fflush_r>
 800c4fc:	bd10      	pop	{r4, pc}
 800c4fe:	bf00      	nop
 800c500:	20003408 	.word	0x20003408
 800c504:	20003470 	.word	0x20003470
 800c508:	200034d8 	.word	0x200034d8

0800c50c <global_stdio_init.part.0>:
 800c50c:	b510      	push	{r4, lr}
 800c50e:	4b0b      	ldr	r3, [pc, #44]	@ (800c53c <global_stdio_init.part.0+0x30>)
 800c510:	4c0b      	ldr	r4, [pc, #44]	@ (800c540 <global_stdio_init.part.0+0x34>)
 800c512:	4a0c      	ldr	r2, [pc, #48]	@ (800c544 <global_stdio_init.part.0+0x38>)
 800c514:	4620      	mov	r0, r4
 800c516:	601a      	str	r2, [r3, #0]
 800c518:	2104      	movs	r1, #4
 800c51a:	2200      	movs	r2, #0
 800c51c:	f7ff ff94 	bl	800c448 <std>
 800c520:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c524:	2201      	movs	r2, #1
 800c526:	2109      	movs	r1, #9
 800c528:	f7ff ff8e 	bl	800c448 <std>
 800c52c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c530:	2202      	movs	r2, #2
 800c532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c536:	2112      	movs	r1, #18
 800c538:	f7ff bf86 	b.w	800c448 <std>
 800c53c:	20003540 	.word	0x20003540
 800c540:	20003408 	.word	0x20003408
 800c544:	0800c4b5 	.word	0x0800c4b5

0800c548 <__sfp_lock_acquire>:
 800c548:	4801      	ldr	r0, [pc, #4]	@ (800c550 <__sfp_lock_acquire+0x8>)
 800c54a:	f000 ba7e 	b.w	800ca4a <__retarget_lock_acquire_recursive>
 800c54e:	bf00      	nop
 800c550:	20003549 	.word	0x20003549

0800c554 <__sfp_lock_release>:
 800c554:	4801      	ldr	r0, [pc, #4]	@ (800c55c <__sfp_lock_release+0x8>)
 800c556:	f000 ba79 	b.w	800ca4c <__retarget_lock_release_recursive>
 800c55a:	bf00      	nop
 800c55c:	20003549 	.word	0x20003549

0800c560 <__sinit>:
 800c560:	b510      	push	{r4, lr}
 800c562:	4604      	mov	r4, r0
 800c564:	f7ff fff0 	bl	800c548 <__sfp_lock_acquire>
 800c568:	6a23      	ldr	r3, [r4, #32]
 800c56a:	b11b      	cbz	r3, 800c574 <__sinit+0x14>
 800c56c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c570:	f7ff bff0 	b.w	800c554 <__sfp_lock_release>
 800c574:	4b04      	ldr	r3, [pc, #16]	@ (800c588 <__sinit+0x28>)
 800c576:	6223      	str	r3, [r4, #32]
 800c578:	4b04      	ldr	r3, [pc, #16]	@ (800c58c <__sinit+0x2c>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d1f5      	bne.n	800c56c <__sinit+0xc>
 800c580:	f7ff ffc4 	bl	800c50c <global_stdio_init.part.0>
 800c584:	e7f2      	b.n	800c56c <__sinit+0xc>
 800c586:	bf00      	nop
 800c588:	0800c4cd 	.word	0x0800c4cd
 800c58c:	20003540 	.word	0x20003540

0800c590 <_fwalk_sglue>:
 800c590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c594:	4607      	mov	r7, r0
 800c596:	4688      	mov	r8, r1
 800c598:	4614      	mov	r4, r2
 800c59a:	2600      	movs	r6, #0
 800c59c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c5a0:	f1b9 0901 	subs.w	r9, r9, #1
 800c5a4:	d505      	bpl.n	800c5b2 <_fwalk_sglue+0x22>
 800c5a6:	6824      	ldr	r4, [r4, #0]
 800c5a8:	2c00      	cmp	r4, #0
 800c5aa:	d1f7      	bne.n	800c59c <_fwalk_sglue+0xc>
 800c5ac:	4630      	mov	r0, r6
 800c5ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5b2:	89ab      	ldrh	r3, [r5, #12]
 800c5b4:	2b01      	cmp	r3, #1
 800c5b6:	d907      	bls.n	800c5c8 <_fwalk_sglue+0x38>
 800c5b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c5bc:	3301      	adds	r3, #1
 800c5be:	d003      	beq.n	800c5c8 <_fwalk_sglue+0x38>
 800c5c0:	4629      	mov	r1, r5
 800c5c2:	4638      	mov	r0, r7
 800c5c4:	47c0      	blx	r8
 800c5c6:	4306      	orrs	r6, r0
 800c5c8:	3568      	adds	r5, #104	@ 0x68
 800c5ca:	e7e9      	b.n	800c5a0 <_fwalk_sglue+0x10>

0800c5cc <_puts_r>:
 800c5cc:	6a03      	ldr	r3, [r0, #32]
 800c5ce:	b570      	push	{r4, r5, r6, lr}
 800c5d0:	4605      	mov	r5, r0
 800c5d2:	460e      	mov	r6, r1
 800c5d4:	6884      	ldr	r4, [r0, #8]
 800c5d6:	b90b      	cbnz	r3, 800c5dc <_puts_r+0x10>
 800c5d8:	f7ff ffc2 	bl	800c560 <__sinit>
 800c5dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c5de:	07db      	lsls	r3, r3, #31
 800c5e0:	d405      	bmi.n	800c5ee <_puts_r+0x22>
 800c5e2:	89a3      	ldrh	r3, [r4, #12]
 800c5e4:	0598      	lsls	r0, r3, #22
 800c5e6:	d402      	bmi.n	800c5ee <_puts_r+0x22>
 800c5e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5ea:	f000 fa2e 	bl	800ca4a <__retarget_lock_acquire_recursive>
 800c5ee:	89a3      	ldrh	r3, [r4, #12]
 800c5f0:	0719      	lsls	r1, r3, #28
 800c5f2:	d502      	bpl.n	800c5fa <_puts_r+0x2e>
 800c5f4:	6923      	ldr	r3, [r4, #16]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d135      	bne.n	800c666 <_puts_r+0x9a>
 800c5fa:	4621      	mov	r1, r4
 800c5fc:	4628      	mov	r0, r5
 800c5fe:	f000 f8fd 	bl	800c7fc <__swsetup_r>
 800c602:	b380      	cbz	r0, 800c666 <_puts_r+0x9a>
 800c604:	f04f 35ff 	mov.w	r5, #4294967295
 800c608:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c60a:	07da      	lsls	r2, r3, #31
 800c60c:	d405      	bmi.n	800c61a <_puts_r+0x4e>
 800c60e:	89a3      	ldrh	r3, [r4, #12]
 800c610:	059b      	lsls	r3, r3, #22
 800c612:	d402      	bmi.n	800c61a <_puts_r+0x4e>
 800c614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c616:	f000 fa19 	bl	800ca4c <__retarget_lock_release_recursive>
 800c61a:	4628      	mov	r0, r5
 800c61c:	bd70      	pop	{r4, r5, r6, pc}
 800c61e:	2b00      	cmp	r3, #0
 800c620:	da04      	bge.n	800c62c <_puts_r+0x60>
 800c622:	69a2      	ldr	r2, [r4, #24]
 800c624:	429a      	cmp	r2, r3
 800c626:	dc17      	bgt.n	800c658 <_puts_r+0x8c>
 800c628:	290a      	cmp	r1, #10
 800c62a:	d015      	beq.n	800c658 <_puts_r+0x8c>
 800c62c:	6823      	ldr	r3, [r4, #0]
 800c62e:	1c5a      	adds	r2, r3, #1
 800c630:	6022      	str	r2, [r4, #0]
 800c632:	7019      	strb	r1, [r3, #0]
 800c634:	68a3      	ldr	r3, [r4, #8]
 800c636:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c63a:	3b01      	subs	r3, #1
 800c63c:	60a3      	str	r3, [r4, #8]
 800c63e:	2900      	cmp	r1, #0
 800c640:	d1ed      	bne.n	800c61e <_puts_r+0x52>
 800c642:	2b00      	cmp	r3, #0
 800c644:	da11      	bge.n	800c66a <_puts_r+0x9e>
 800c646:	4622      	mov	r2, r4
 800c648:	210a      	movs	r1, #10
 800c64a:	4628      	mov	r0, r5
 800c64c:	f000 f898 	bl	800c780 <__swbuf_r>
 800c650:	3001      	adds	r0, #1
 800c652:	d0d7      	beq.n	800c604 <_puts_r+0x38>
 800c654:	250a      	movs	r5, #10
 800c656:	e7d7      	b.n	800c608 <_puts_r+0x3c>
 800c658:	4622      	mov	r2, r4
 800c65a:	4628      	mov	r0, r5
 800c65c:	f000 f890 	bl	800c780 <__swbuf_r>
 800c660:	3001      	adds	r0, #1
 800c662:	d1e7      	bne.n	800c634 <_puts_r+0x68>
 800c664:	e7ce      	b.n	800c604 <_puts_r+0x38>
 800c666:	3e01      	subs	r6, #1
 800c668:	e7e4      	b.n	800c634 <_puts_r+0x68>
 800c66a:	6823      	ldr	r3, [r4, #0]
 800c66c:	1c5a      	adds	r2, r3, #1
 800c66e:	6022      	str	r2, [r4, #0]
 800c670:	220a      	movs	r2, #10
 800c672:	701a      	strb	r2, [r3, #0]
 800c674:	e7ee      	b.n	800c654 <_puts_r+0x88>
	...

0800c678 <puts>:
 800c678:	4b02      	ldr	r3, [pc, #8]	@ (800c684 <puts+0xc>)
 800c67a:	4601      	mov	r1, r0
 800c67c:	6818      	ldr	r0, [r3, #0]
 800c67e:	f7ff bfa5 	b.w	800c5cc <_puts_r>
 800c682:	bf00      	nop
 800c684:	2000030c 	.word	0x2000030c

0800c688 <__sread>:
 800c688:	b510      	push	{r4, lr}
 800c68a:	460c      	mov	r4, r1
 800c68c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c690:	f000 f98c 	bl	800c9ac <_read_r>
 800c694:	2800      	cmp	r0, #0
 800c696:	bfab      	itete	ge
 800c698:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c69a:	89a3      	ldrhlt	r3, [r4, #12]
 800c69c:	181b      	addge	r3, r3, r0
 800c69e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c6a2:	bfac      	ite	ge
 800c6a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c6a6:	81a3      	strhlt	r3, [r4, #12]
 800c6a8:	bd10      	pop	{r4, pc}

0800c6aa <__swrite>:
 800c6aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ae:	461f      	mov	r7, r3
 800c6b0:	898b      	ldrh	r3, [r1, #12]
 800c6b2:	4605      	mov	r5, r0
 800c6b4:	05db      	lsls	r3, r3, #23
 800c6b6:	460c      	mov	r4, r1
 800c6b8:	4616      	mov	r6, r2
 800c6ba:	d505      	bpl.n	800c6c8 <__swrite+0x1e>
 800c6bc:	2302      	movs	r3, #2
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6c4:	f000 f960 	bl	800c988 <_lseek_r>
 800c6c8:	89a3      	ldrh	r3, [r4, #12]
 800c6ca:	4632      	mov	r2, r6
 800c6cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c6d0:	81a3      	strh	r3, [r4, #12]
 800c6d2:	4628      	mov	r0, r5
 800c6d4:	463b      	mov	r3, r7
 800c6d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6de:	f000 b977 	b.w	800c9d0 <_write_r>

0800c6e2 <__sseek>:
 800c6e2:	b510      	push	{r4, lr}
 800c6e4:	460c      	mov	r4, r1
 800c6e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6ea:	f000 f94d 	bl	800c988 <_lseek_r>
 800c6ee:	1c43      	adds	r3, r0, #1
 800c6f0:	89a3      	ldrh	r3, [r4, #12]
 800c6f2:	bf15      	itete	ne
 800c6f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c6f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c6fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c6fe:	81a3      	strheq	r3, [r4, #12]
 800c700:	bf18      	it	ne
 800c702:	81a3      	strhne	r3, [r4, #12]
 800c704:	bd10      	pop	{r4, pc}

0800c706 <__sclose>:
 800c706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c70a:	f000 b92d 	b.w	800c968 <_close_r>

0800c70e <_vsniprintf_r>:
 800c70e:	b530      	push	{r4, r5, lr}
 800c710:	4614      	mov	r4, r2
 800c712:	2c00      	cmp	r4, #0
 800c714:	4605      	mov	r5, r0
 800c716:	461a      	mov	r2, r3
 800c718:	b09b      	sub	sp, #108	@ 0x6c
 800c71a:	da05      	bge.n	800c728 <_vsniprintf_r+0x1a>
 800c71c:	238b      	movs	r3, #139	@ 0x8b
 800c71e:	6003      	str	r3, [r0, #0]
 800c720:	f04f 30ff 	mov.w	r0, #4294967295
 800c724:	b01b      	add	sp, #108	@ 0x6c
 800c726:	bd30      	pop	{r4, r5, pc}
 800c728:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c72c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c730:	bf0c      	ite	eq
 800c732:	4623      	moveq	r3, r4
 800c734:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c738:	9302      	str	r3, [sp, #8]
 800c73a:	9305      	str	r3, [sp, #20]
 800c73c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c740:	9100      	str	r1, [sp, #0]
 800c742:	9104      	str	r1, [sp, #16]
 800c744:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c748:	4669      	mov	r1, sp
 800c74a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c74c:	f001 faf0 	bl	800dd30 <_svfiprintf_r>
 800c750:	1c43      	adds	r3, r0, #1
 800c752:	bfbc      	itt	lt
 800c754:	238b      	movlt	r3, #139	@ 0x8b
 800c756:	602b      	strlt	r3, [r5, #0]
 800c758:	2c00      	cmp	r4, #0
 800c75a:	d0e3      	beq.n	800c724 <_vsniprintf_r+0x16>
 800c75c:	2200      	movs	r2, #0
 800c75e:	9b00      	ldr	r3, [sp, #0]
 800c760:	701a      	strb	r2, [r3, #0]
 800c762:	e7df      	b.n	800c724 <_vsniprintf_r+0x16>

0800c764 <vsniprintf>:
 800c764:	b507      	push	{r0, r1, r2, lr}
 800c766:	9300      	str	r3, [sp, #0]
 800c768:	4613      	mov	r3, r2
 800c76a:	460a      	mov	r2, r1
 800c76c:	4601      	mov	r1, r0
 800c76e:	4803      	ldr	r0, [pc, #12]	@ (800c77c <vsniprintf+0x18>)
 800c770:	6800      	ldr	r0, [r0, #0]
 800c772:	f7ff ffcc 	bl	800c70e <_vsniprintf_r>
 800c776:	b003      	add	sp, #12
 800c778:	f85d fb04 	ldr.w	pc, [sp], #4
 800c77c:	2000030c 	.word	0x2000030c

0800c780 <__swbuf_r>:
 800c780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c782:	460e      	mov	r6, r1
 800c784:	4614      	mov	r4, r2
 800c786:	4605      	mov	r5, r0
 800c788:	b118      	cbz	r0, 800c792 <__swbuf_r+0x12>
 800c78a:	6a03      	ldr	r3, [r0, #32]
 800c78c:	b90b      	cbnz	r3, 800c792 <__swbuf_r+0x12>
 800c78e:	f7ff fee7 	bl	800c560 <__sinit>
 800c792:	69a3      	ldr	r3, [r4, #24]
 800c794:	60a3      	str	r3, [r4, #8]
 800c796:	89a3      	ldrh	r3, [r4, #12]
 800c798:	071a      	lsls	r2, r3, #28
 800c79a:	d501      	bpl.n	800c7a0 <__swbuf_r+0x20>
 800c79c:	6923      	ldr	r3, [r4, #16]
 800c79e:	b943      	cbnz	r3, 800c7b2 <__swbuf_r+0x32>
 800c7a0:	4621      	mov	r1, r4
 800c7a2:	4628      	mov	r0, r5
 800c7a4:	f000 f82a 	bl	800c7fc <__swsetup_r>
 800c7a8:	b118      	cbz	r0, 800c7b2 <__swbuf_r+0x32>
 800c7aa:	f04f 37ff 	mov.w	r7, #4294967295
 800c7ae:	4638      	mov	r0, r7
 800c7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7b2:	6823      	ldr	r3, [r4, #0]
 800c7b4:	6922      	ldr	r2, [r4, #16]
 800c7b6:	b2f6      	uxtb	r6, r6
 800c7b8:	1a98      	subs	r0, r3, r2
 800c7ba:	6963      	ldr	r3, [r4, #20]
 800c7bc:	4637      	mov	r7, r6
 800c7be:	4283      	cmp	r3, r0
 800c7c0:	dc05      	bgt.n	800c7ce <__swbuf_r+0x4e>
 800c7c2:	4621      	mov	r1, r4
 800c7c4:	4628      	mov	r0, r5
 800c7c6:	f001 fdc1 	bl	800e34c <_fflush_r>
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	d1ed      	bne.n	800c7aa <__swbuf_r+0x2a>
 800c7ce:	68a3      	ldr	r3, [r4, #8]
 800c7d0:	3b01      	subs	r3, #1
 800c7d2:	60a3      	str	r3, [r4, #8]
 800c7d4:	6823      	ldr	r3, [r4, #0]
 800c7d6:	1c5a      	adds	r2, r3, #1
 800c7d8:	6022      	str	r2, [r4, #0]
 800c7da:	701e      	strb	r6, [r3, #0]
 800c7dc:	6962      	ldr	r2, [r4, #20]
 800c7de:	1c43      	adds	r3, r0, #1
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d004      	beq.n	800c7ee <__swbuf_r+0x6e>
 800c7e4:	89a3      	ldrh	r3, [r4, #12]
 800c7e6:	07db      	lsls	r3, r3, #31
 800c7e8:	d5e1      	bpl.n	800c7ae <__swbuf_r+0x2e>
 800c7ea:	2e0a      	cmp	r6, #10
 800c7ec:	d1df      	bne.n	800c7ae <__swbuf_r+0x2e>
 800c7ee:	4621      	mov	r1, r4
 800c7f0:	4628      	mov	r0, r5
 800c7f2:	f001 fdab 	bl	800e34c <_fflush_r>
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	d0d9      	beq.n	800c7ae <__swbuf_r+0x2e>
 800c7fa:	e7d6      	b.n	800c7aa <__swbuf_r+0x2a>

0800c7fc <__swsetup_r>:
 800c7fc:	b538      	push	{r3, r4, r5, lr}
 800c7fe:	4b29      	ldr	r3, [pc, #164]	@ (800c8a4 <__swsetup_r+0xa8>)
 800c800:	4605      	mov	r5, r0
 800c802:	6818      	ldr	r0, [r3, #0]
 800c804:	460c      	mov	r4, r1
 800c806:	b118      	cbz	r0, 800c810 <__swsetup_r+0x14>
 800c808:	6a03      	ldr	r3, [r0, #32]
 800c80a:	b90b      	cbnz	r3, 800c810 <__swsetup_r+0x14>
 800c80c:	f7ff fea8 	bl	800c560 <__sinit>
 800c810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c814:	0719      	lsls	r1, r3, #28
 800c816:	d422      	bmi.n	800c85e <__swsetup_r+0x62>
 800c818:	06da      	lsls	r2, r3, #27
 800c81a:	d407      	bmi.n	800c82c <__swsetup_r+0x30>
 800c81c:	2209      	movs	r2, #9
 800c81e:	602a      	str	r2, [r5, #0]
 800c820:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c824:	f04f 30ff 	mov.w	r0, #4294967295
 800c828:	81a3      	strh	r3, [r4, #12]
 800c82a:	e033      	b.n	800c894 <__swsetup_r+0x98>
 800c82c:	0758      	lsls	r0, r3, #29
 800c82e:	d512      	bpl.n	800c856 <__swsetup_r+0x5a>
 800c830:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c832:	b141      	cbz	r1, 800c846 <__swsetup_r+0x4a>
 800c834:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c838:	4299      	cmp	r1, r3
 800c83a:	d002      	beq.n	800c842 <__swsetup_r+0x46>
 800c83c:	4628      	mov	r0, r5
 800c83e:	f000 f927 	bl	800ca90 <_free_r>
 800c842:	2300      	movs	r3, #0
 800c844:	6363      	str	r3, [r4, #52]	@ 0x34
 800c846:	89a3      	ldrh	r3, [r4, #12]
 800c848:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c84c:	81a3      	strh	r3, [r4, #12]
 800c84e:	2300      	movs	r3, #0
 800c850:	6063      	str	r3, [r4, #4]
 800c852:	6923      	ldr	r3, [r4, #16]
 800c854:	6023      	str	r3, [r4, #0]
 800c856:	89a3      	ldrh	r3, [r4, #12]
 800c858:	f043 0308 	orr.w	r3, r3, #8
 800c85c:	81a3      	strh	r3, [r4, #12]
 800c85e:	6923      	ldr	r3, [r4, #16]
 800c860:	b94b      	cbnz	r3, 800c876 <__swsetup_r+0x7a>
 800c862:	89a3      	ldrh	r3, [r4, #12]
 800c864:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c86c:	d003      	beq.n	800c876 <__swsetup_r+0x7a>
 800c86e:	4621      	mov	r1, r4
 800c870:	4628      	mov	r0, r5
 800c872:	f001 fdb8 	bl	800e3e6 <__smakebuf_r>
 800c876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c87a:	f013 0201 	ands.w	r2, r3, #1
 800c87e:	d00a      	beq.n	800c896 <__swsetup_r+0x9a>
 800c880:	2200      	movs	r2, #0
 800c882:	60a2      	str	r2, [r4, #8]
 800c884:	6962      	ldr	r2, [r4, #20]
 800c886:	4252      	negs	r2, r2
 800c888:	61a2      	str	r2, [r4, #24]
 800c88a:	6922      	ldr	r2, [r4, #16]
 800c88c:	b942      	cbnz	r2, 800c8a0 <__swsetup_r+0xa4>
 800c88e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c892:	d1c5      	bne.n	800c820 <__swsetup_r+0x24>
 800c894:	bd38      	pop	{r3, r4, r5, pc}
 800c896:	0799      	lsls	r1, r3, #30
 800c898:	bf58      	it	pl
 800c89a:	6962      	ldrpl	r2, [r4, #20]
 800c89c:	60a2      	str	r2, [r4, #8]
 800c89e:	e7f4      	b.n	800c88a <__swsetup_r+0x8e>
 800c8a0:	2000      	movs	r0, #0
 800c8a2:	e7f7      	b.n	800c894 <__swsetup_r+0x98>
 800c8a4:	2000030c 	.word	0x2000030c

0800c8a8 <memmove>:
 800c8a8:	4288      	cmp	r0, r1
 800c8aa:	b510      	push	{r4, lr}
 800c8ac:	eb01 0402 	add.w	r4, r1, r2
 800c8b0:	d902      	bls.n	800c8b8 <memmove+0x10>
 800c8b2:	4284      	cmp	r4, r0
 800c8b4:	4623      	mov	r3, r4
 800c8b6:	d807      	bhi.n	800c8c8 <memmove+0x20>
 800c8b8:	1e43      	subs	r3, r0, #1
 800c8ba:	42a1      	cmp	r1, r4
 800c8bc:	d008      	beq.n	800c8d0 <memmove+0x28>
 800c8be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c8c6:	e7f8      	b.n	800c8ba <memmove+0x12>
 800c8c8:	4601      	mov	r1, r0
 800c8ca:	4402      	add	r2, r0
 800c8cc:	428a      	cmp	r2, r1
 800c8ce:	d100      	bne.n	800c8d2 <memmove+0x2a>
 800c8d0:	bd10      	pop	{r4, pc}
 800c8d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c8d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c8da:	e7f7      	b.n	800c8cc <memmove+0x24>

0800c8dc <memset>:
 800c8dc:	4603      	mov	r3, r0
 800c8de:	4402      	add	r2, r0
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d100      	bne.n	800c8e6 <memset+0xa>
 800c8e4:	4770      	bx	lr
 800c8e6:	f803 1b01 	strb.w	r1, [r3], #1
 800c8ea:	e7f9      	b.n	800c8e0 <memset+0x4>

0800c8ec <strncmp>:
 800c8ec:	b510      	push	{r4, lr}
 800c8ee:	b16a      	cbz	r2, 800c90c <strncmp+0x20>
 800c8f0:	3901      	subs	r1, #1
 800c8f2:	1884      	adds	r4, r0, r2
 800c8f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8f8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d103      	bne.n	800c908 <strncmp+0x1c>
 800c900:	42a0      	cmp	r0, r4
 800c902:	d001      	beq.n	800c908 <strncmp+0x1c>
 800c904:	2a00      	cmp	r2, #0
 800c906:	d1f5      	bne.n	800c8f4 <strncmp+0x8>
 800c908:	1ad0      	subs	r0, r2, r3
 800c90a:	bd10      	pop	{r4, pc}
 800c90c:	4610      	mov	r0, r2
 800c90e:	e7fc      	b.n	800c90a <strncmp+0x1e>

0800c910 <__strtok_r>:
 800c910:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c912:	4604      	mov	r4, r0
 800c914:	b908      	cbnz	r0, 800c91a <__strtok_r+0xa>
 800c916:	6814      	ldr	r4, [r2, #0]
 800c918:	b144      	cbz	r4, 800c92c <__strtok_r+0x1c>
 800c91a:	460f      	mov	r7, r1
 800c91c:	4620      	mov	r0, r4
 800c91e:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c922:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c926:	b91e      	cbnz	r6, 800c930 <__strtok_r+0x20>
 800c928:	b965      	cbnz	r5, 800c944 <__strtok_r+0x34>
 800c92a:	6015      	str	r5, [r2, #0]
 800c92c:	2000      	movs	r0, #0
 800c92e:	e005      	b.n	800c93c <__strtok_r+0x2c>
 800c930:	42b5      	cmp	r5, r6
 800c932:	d1f6      	bne.n	800c922 <__strtok_r+0x12>
 800c934:	2b00      	cmp	r3, #0
 800c936:	d1f0      	bne.n	800c91a <__strtok_r+0xa>
 800c938:	6014      	str	r4, [r2, #0]
 800c93a:	7003      	strb	r3, [r0, #0]
 800c93c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c93e:	461c      	mov	r4, r3
 800c940:	e00c      	b.n	800c95c <__strtok_r+0x4c>
 800c942:	b915      	cbnz	r5, 800c94a <__strtok_r+0x3a>
 800c944:	460e      	mov	r6, r1
 800c946:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c94a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c94e:	42ab      	cmp	r3, r5
 800c950:	d1f7      	bne.n	800c942 <__strtok_r+0x32>
 800c952:	2b00      	cmp	r3, #0
 800c954:	d0f3      	beq.n	800c93e <__strtok_r+0x2e>
 800c956:	2300      	movs	r3, #0
 800c958:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c95c:	6014      	str	r4, [r2, #0]
 800c95e:	e7ed      	b.n	800c93c <__strtok_r+0x2c>

0800c960 <strtok_r>:
 800c960:	2301      	movs	r3, #1
 800c962:	f7ff bfd5 	b.w	800c910 <__strtok_r>
	...

0800c968 <_close_r>:
 800c968:	b538      	push	{r3, r4, r5, lr}
 800c96a:	2300      	movs	r3, #0
 800c96c:	4d05      	ldr	r5, [pc, #20]	@ (800c984 <_close_r+0x1c>)
 800c96e:	4604      	mov	r4, r0
 800c970:	4608      	mov	r0, r1
 800c972:	602b      	str	r3, [r5, #0]
 800c974:	f7f9 fae4 	bl	8005f40 <_close>
 800c978:	1c43      	adds	r3, r0, #1
 800c97a:	d102      	bne.n	800c982 <_close_r+0x1a>
 800c97c:	682b      	ldr	r3, [r5, #0]
 800c97e:	b103      	cbz	r3, 800c982 <_close_r+0x1a>
 800c980:	6023      	str	r3, [r4, #0]
 800c982:	bd38      	pop	{r3, r4, r5, pc}
 800c984:	20003544 	.word	0x20003544

0800c988 <_lseek_r>:
 800c988:	b538      	push	{r3, r4, r5, lr}
 800c98a:	4604      	mov	r4, r0
 800c98c:	4608      	mov	r0, r1
 800c98e:	4611      	mov	r1, r2
 800c990:	2200      	movs	r2, #0
 800c992:	4d05      	ldr	r5, [pc, #20]	@ (800c9a8 <_lseek_r+0x20>)
 800c994:	602a      	str	r2, [r5, #0]
 800c996:	461a      	mov	r2, r3
 800c998:	f7f9 fadc 	bl	8005f54 <_lseek>
 800c99c:	1c43      	adds	r3, r0, #1
 800c99e:	d102      	bne.n	800c9a6 <_lseek_r+0x1e>
 800c9a0:	682b      	ldr	r3, [r5, #0]
 800c9a2:	b103      	cbz	r3, 800c9a6 <_lseek_r+0x1e>
 800c9a4:	6023      	str	r3, [r4, #0]
 800c9a6:	bd38      	pop	{r3, r4, r5, pc}
 800c9a8:	20003544 	.word	0x20003544

0800c9ac <_read_r>:
 800c9ac:	b538      	push	{r3, r4, r5, lr}
 800c9ae:	4604      	mov	r4, r0
 800c9b0:	4608      	mov	r0, r1
 800c9b2:	4611      	mov	r1, r2
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	4d05      	ldr	r5, [pc, #20]	@ (800c9cc <_read_r+0x20>)
 800c9b8:	602a      	str	r2, [r5, #0]
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	f7f9 faa4 	bl	8005f08 <_read>
 800c9c0:	1c43      	adds	r3, r0, #1
 800c9c2:	d102      	bne.n	800c9ca <_read_r+0x1e>
 800c9c4:	682b      	ldr	r3, [r5, #0]
 800c9c6:	b103      	cbz	r3, 800c9ca <_read_r+0x1e>
 800c9c8:	6023      	str	r3, [r4, #0]
 800c9ca:	bd38      	pop	{r3, r4, r5, pc}
 800c9cc:	20003544 	.word	0x20003544

0800c9d0 <_write_r>:
 800c9d0:	b538      	push	{r3, r4, r5, lr}
 800c9d2:	4604      	mov	r4, r0
 800c9d4:	4608      	mov	r0, r1
 800c9d6:	4611      	mov	r1, r2
 800c9d8:	2200      	movs	r2, #0
 800c9da:	4d05      	ldr	r5, [pc, #20]	@ (800c9f0 <_write_r+0x20>)
 800c9dc:	602a      	str	r2, [r5, #0]
 800c9de:	461a      	mov	r2, r3
 800c9e0:	f7f9 faa0 	bl	8005f24 <_write>
 800c9e4:	1c43      	adds	r3, r0, #1
 800c9e6:	d102      	bne.n	800c9ee <_write_r+0x1e>
 800c9e8:	682b      	ldr	r3, [r5, #0]
 800c9ea:	b103      	cbz	r3, 800c9ee <_write_r+0x1e>
 800c9ec:	6023      	str	r3, [r4, #0]
 800c9ee:	bd38      	pop	{r3, r4, r5, pc}
 800c9f0:	20003544 	.word	0x20003544

0800c9f4 <__errno>:
 800c9f4:	4b01      	ldr	r3, [pc, #4]	@ (800c9fc <__errno+0x8>)
 800c9f6:	6818      	ldr	r0, [r3, #0]
 800c9f8:	4770      	bx	lr
 800c9fa:	bf00      	nop
 800c9fc:	2000030c 	.word	0x2000030c

0800ca00 <__libc_init_array>:
 800ca00:	b570      	push	{r4, r5, r6, lr}
 800ca02:	2600      	movs	r6, #0
 800ca04:	4d0c      	ldr	r5, [pc, #48]	@ (800ca38 <__libc_init_array+0x38>)
 800ca06:	4c0d      	ldr	r4, [pc, #52]	@ (800ca3c <__libc_init_array+0x3c>)
 800ca08:	1b64      	subs	r4, r4, r5
 800ca0a:	10a4      	asrs	r4, r4, #2
 800ca0c:	42a6      	cmp	r6, r4
 800ca0e:	d109      	bne.n	800ca24 <__libc_init_array+0x24>
 800ca10:	f001 ff72 	bl	800e8f8 <_init>
 800ca14:	2600      	movs	r6, #0
 800ca16:	4d0a      	ldr	r5, [pc, #40]	@ (800ca40 <__libc_init_array+0x40>)
 800ca18:	4c0a      	ldr	r4, [pc, #40]	@ (800ca44 <__libc_init_array+0x44>)
 800ca1a:	1b64      	subs	r4, r4, r5
 800ca1c:	10a4      	asrs	r4, r4, #2
 800ca1e:	42a6      	cmp	r6, r4
 800ca20:	d105      	bne.n	800ca2e <__libc_init_array+0x2e>
 800ca22:	bd70      	pop	{r4, r5, r6, pc}
 800ca24:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca28:	4798      	blx	r3
 800ca2a:	3601      	adds	r6, #1
 800ca2c:	e7ee      	b.n	800ca0c <__libc_init_array+0xc>
 800ca2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca32:	4798      	blx	r3
 800ca34:	3601      	adds	r6, #1
 800ca36:	e7f2      	b.n	800ca1e <__libc_init_array+0x1e>
 800ca38:	0800ef30 	.word	0x0800ef30
 800ca3c:	0800ef30 	.word	0x0800ef30
 800ca40:	0800ef30 	.word	0x0800ef30
 800ca44:	0800ef34 	.word	0x0800ef34

0800ca48 <__retarget_lock_init_recursive>:
 800ca48:	4770      	bx	lr

0800ca4a <__retarget_lock_acquire_recursive>:
 800ca4a:	4770      	bx	lr

0800ca4c <__retarget_lock_release_recursive>:
 800ca4c:	4770      	bx	lr

0800ca4e <strcpy>:
 800ca4e:	4603      	mov	r3, r0
 800ca50:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca54:	f803 2b01 	strb.w	r2, [r3], #1
 800ca58:	2a00      	cmp	r2, #0
 800ca5a:	d1f9      	bne.n	800ca50 <strcpy+0x2>
 800ca5c:	4770      	bx	lr

0800ca5e <memcpy>:
 800ca5e:	440a      	add	r2, r1
 800ca60:	4291      	cmp	r1, r2
 800ca62:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca66:	d100      	bne.n	800ca6a <memcpy+0xc>
 800ca68:	4770      	bx	lr
 800ca6a:	b510      	push	{r4, lr}
 800ca6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca70:	4291      	cmp	r1, r2
 800ca72:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca76:	d1f9      	bne.n	800ca6c <memcpy+0xe>
 800ca78:	bd10      	pop	{r4, pc}
	...

0800ca7c <nan>:
 800ca7c:	2000      	movs	r0, #0
 800ca7e:	4901      	ldr	r1, [pc, #4]	@ (800ca84 <nan+0x8>)
 800ca80:	4770      	bx	lr
 800ca82:	bf00      	nop
 800ca84:	7ff80000 	.word	0x7ff80000

0800ca88 <nanf>:
 800ca88:	4800      	ldr	r0, [pc, #0]	@ (800ca8c <nanf+0x4>)
 800ca8a:	4770      	bx	lr
 800ca8c:	7fc00000 	.word	0x7fc00000

0800ca90 <_free_r>:
 800ca90:	b538      	push	{r3, r4, r5, lr}
 800ca92:	4605      	mov	r5, r0
 800ca94:	2900      	cmp	r1, #0
 800ca96:	d040      	beq.n	800cb1a <_free_r+0x8a>
 800ca98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca9c:	1f0c      	subs	r4, r1, #4
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	bfb8      	it	lt
 800caa2:	18e4      	addlt	r4, r4, r3
 800caa4:	f000 fc2a 	bl	800d2fc <__malloc_lock>
 800caa8:	4a1c      	ldr	r2, [pc, #112]	@ (800cb1c <_free_r+0x8c>)
 800caaa:	6813      	ldr	r3, [r2, #0]
 800caac:	b933      	cbnz	r3, 800cabc <_free_r+0x2c>
 800caae:	6063      	str	r3, [r4, #4]
 800cab0:	6014      	str	r4, [r2, #0]
 800cab2:	4628      	mov	r0, r5
 800cab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cab8:	f000 bc26 	b.w	800d308 <__malloc_unlock>
 800cabc:	42a3      	cmp	r3, r4
 800cabe:	d908      	bls.n	800cad2 <_free_r+0x42>
 800cac0:	6820      	ldr	r0, [r4, #0]
 800cac2:	1821      	adds	r1, r4, r0
 800cac4:	428b      	cmp	r3, r1
 800cac6:	bf01      	itttt	eq
 800cac8:	6819      	ldreq	r1, [r3, #0]
 800caca:	685b      	ldreq	r3, [r3, #4]
 800cacc:	1809      	addeq	r1, r1, r0
 800cace:	6021      	streq	r1, [r4, #0]
 800cad0:	e7ed      	b.n	800caae <_free_r+0x1e>
 800cad2:	461a      	mov	r2, r3
 800cad4:	685b      	ldr	r3, [r3, #4]
 800cad6:	b10b      	cbz	r3, 800cadc <_free_r+0x4c>
 800cad8:	42a3      	cmp	r3, r4
 800cada:	d9fa      	bls.n	800cad2 <_free_r+0x42>
 800cadc:	6811      	ldr	r1, [r2, #0]
 800cade:	1850      	adds	r0, r2, r1
 800cae0:	42a0      	cmp	r0, r4
 800cae2:	d10b      	bne.n	800cafc <_free_r+0x6c>
 800cae4:	6820      	ldr	r0, [r4, #0]
 800cae6:	4401      	add	r1, r0
 800cae8:	1850      	adds	r0, r2, r1
 800caea:	4283      	cmp	r3, r0
 800caec:	6011      	str	r1, [r2, #0]
 800caee:	d1e0      	bne.n	800cab2 <_free_r+0x22>
 800caf0:	6818      	ldr	r0, [r3, #0]
 800caf2:	685b      	ldr	r3, [r3, #4]
 800caf4:	4408      	add	r0, r1
 800caf6:	6010      	str	r0, [r2, #0]
 800caf8:	6053      	str	r3, [r2, #4]
 800cafa:	e7da      	b.n	800cab2 <_free_r+0x22>
 800cafc:	d902      	bls.n	800cb04 <_free_r+0x74>
 800cafe:	230c      	movs	r3, #12
 800cb00:	602b      	str	r3, [r5, #0]
 800cb02:	e7d6      	b.n	800cab2 <_free_r+0x22>
 800cb04:	6820      	ldr	r0, [r4, #0]
 800cb06:	1821      	adds	r1, r4, r0
 800cb08:	428b      	cmp	r3, r1
 800cb0a:	bf01      	itttt	eq
 800cb0c:	6819      	ldreq	r1, [r3, #0]
 800cb0e:	685b      	ldreq	r3, [r3, #4]
 800cb10:	1809      	addeq	r1, r1, r0
 800cb12:	6021      	streq	r1, [r4, #0]
 800cb14:	6063      	str	r3, [r4, #4]
 800cb16:	6054      	str	r4, [r2, #4]
 800cb18:	e7cb      	b.n	800cab2 <_free_r+0x22>
 800cb1a:	bd38      	pop	{r3, r4, r5, pc}
 800cb1c:	20003550 	.word	0x20003550

0800cb20 <rshift>:
 800cb20:	6903      	ldr	r3, [r0, #16]
 800cb22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb26:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cb2a:	f100 0414 	add.w	r4, r0, #20
 800cb2e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cb32:	dd46      	ble.n	800cbc2 <rshift+0xa2>
 800cb34:	f011 011f 	ands.w	r1, r1, #31
 800cb38:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cb3c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cb40:	d10c      	bne.n	800cb5c <rshift+0x3c>
 800cb42:	4629      	mov	r1, r5
 800cb44:	f100 0710 	add.w	r7, r0, #16
 800cb48:	42b1      	cmp	r1, r6
 800cb4a:	d335      	bcc.n	800cbb8 <rshift+0x98>
 800cb4c:	1a9b      	subs	r3, r3, r2
 800cb4e:	009b      	lsls	r3, r3, #2
 800cb50:	1eea      	subs	r2, r5, #3
 800cb52:	4296      	cmp	r6, r2
 800cb54:	bf38      	it	cc
 800cb56:	2300      	movcc	r3, #0
 800cb58:	4423      	add	r3, r4
 800cb5a:	e015      	b.n	800cb88 <rshift+0x68>
 800cb5c:	46a1      	mov	r9, r4
 800cb5e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cb62:	f1c1 0820 	rsb	r8, r1, #32
 800cb66:	40cf      	lsrs	r7, r1
 800cb68:	f105 0e04 	add.w	lr, r5, #4
 800cb6c:	4576      	cmp	r6, lr
 800cb6e:	46f4      	mov	ip, lr
 800cb70:	d816      	bhi.n	800cba0 <rshift+0x80>
 800cb72:	1a9a      	subs	r2, r3, r2
 800cb74:	0092      	lsls	r2, r2, #2
 800cb76:	3a04      	subs	r2, #4
 800cb78:	3501      	adds	r5, #1
 800cb7a:	42ae      	cmp	r6, r5
 800cb7c:	bf38      	it	cc
 800cb7e:	2200      	movcc	r2, #0
 800cb80:	18a3      	adds	r3, r4, r2
 800cb82:	50a7      	str	r7, [r4, r2]
 800cb84:	b107      	cbz	r7, 800cb88 <rshift+0x68>
 800cb86:	3304      	adds	r3, #4
 800cb88:	42a3      	cmp	r3, r4
 800cb8a:	eba3 0204 	sub.w	r2, r3, r4
 800cb8e:	bf08      	it	eq
 800cb90:	2300      	moveq	r3, #0
 800cb92:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cb96:	6102      	str	r2, [r0, #16]
 800cb98:	bf08      	it	eq
 800cb9a:	6143      	streq	r3, [r0, #20]
 800cb9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cba0:	f8dc c000 	ldr.w	ip, [ip]
 800cba4:	fa0c fc08 	lsl.w	ip, ip, r8
 800cba8:	ea4c 0707 	orr.w	r7, ip, r7
 800cbac:	f849 7b04 	str.w	r7, [r9], #4
 800cbb0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cbb4:	40cf      	lsrs	r7, r1
 800cbb6:	e7d9      	b.n	800cb6c <rshift+0x4c>
 800cbb8:	f851 cb04 	ldr.w	ip, [r1], #4
 800cbbc:	f847 cf04 	str.w	ip, [r7, #4]!
 800cbc0:	e7c2      	b.n	800cb48 <rshift+0x28>
 800cbc2:	4623      	mov	r3, r4
 800cbc4:	e7e0      	b.n	800cb88 <rshift+0x68>

0800cbc6 <__hexdig_fun>:
 800cbc6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cbca:	2b09      	cmp	r3, #9
 800cbcc:	d802      	bhi.n	800cbd4 <__hexdig_fun+0xe>
 800cbce:	3820      	subs	r0, #32
 800cbd0:	b2c0      	uxtb	r0, r0
 800cbd2:	4770      	bx	lr
 800cbd4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cbd8:	2b05      	cmp	r3, #5
 800cbda:	d801      	bhi.n	800cbe0 <__hexdig_fun+0x1a>
 800cbdc:	3847      	subs	r0, #71	@ 0x47
 800cbde:	e7f7      	b.n	800cbd0 <__hexdig_fun+0xa>
 800cbe0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cbe4:	2b05      	cmp	r3, #5
 800cbe6:	d801      	bhi.n	800cbec <__hexdig_fun+0x26>
 800cbe8:	3827      	subs	r0, #39	@ 0x27
 800cbea:	e7f1      	b.n	800cbd0 <__hexdig_fun+0xa>
 800cbec:	2000      	movs	r0, #0
 800cbee:	4770      	bx	lr

0800cbf0 <__gethex>:
 800cbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbf4:	468a      	mov	sl, r1
 800cbf6:	4690      	mov	r8, r2
 800cbf8:	b085      	sub	sp, #20
 800cbfa:	9302      	str	r3, [sp, #8]
 800cbfc:	680b      	ldr	r3, [r1, #0]
 800cbfe:	9001      	str	r0, [sp, #4]
 800cc00:	1c9c      	adds	r4, r3, #2
 800cc02:	46a1      	mov	r9, r4
 800cc04:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cc08:	2830      	cmp	r0, #48	@ 0x30
 800cc0a:	d0fa      	beq.n	800cc02 <__gethex+0x12>
 800cc0c:	eba9 0303 	sub.w	r3, r9, r3
 800cc10:	f1a3 0b02 	sub.w	fp, r3, #2
 800cc14:	f7ff ffd7 	bl	800cbc6 <__hexdig_fun>
 800cc18:	4605      	mov	r5, r0
 800cc1a:	2800      	cmp	r0, #0
 800cc1c:	d168      	bne.n	800ccf0 <__gethex+0x100>
 800cc1e:	2201      	movs	r2, #1
 800cc20:	4648      	mov	r0, r9
 800cc22:	499f      	ldr	r1, [pc, #636]	@ (800cea0 <__gethex+0x2b0>)
 800cc24:	f7ff fe62 	bl	800c8ec <strncmp>
 800cc28:	4607      	mov	r7, r0
 800cc2a:	2800      	cmp	r0, #0
 800cc2c:	d167      	bne.n	800ccfe <__gethex+0x10e>
 800cc2e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cc32:	4626      	mov	r6, r4
 800cc34:	f7ff ffc7 	bl	800cbc6 <__hexdig_fun>
 800cc38:	2800      	cmp	r0, #0
 800cc3a:	d062      	beq.n	800cd02 <__gethex+0x112>
 800cc3c:	4623      	mov	r3, r4
 800cc3e:	7818      	ldrb	r0, [r3, #0]
 800cc40:	4699      	mov	r9, r3
 800cc42:	2830      	cmp	r0, #48	@ 0x30
 800cc44:	f103 0301 	add.w	r3, r3, #1
 800cc48:	d0f9      	beq.n	800cc3e <__gethex+0x4e>
 800cc4a:	f7ff ffbc 	bl	800cbc6 <__hexdig_fun>
 800cc4e:	fab0 f580 	clz	r5, r0
 800cc52:	f04f 0b01 	mov.w	fp, #1
 800cc56:	096d      	lsrs	r5, r5, #5
 800cc58:	464a      	mov	r2, r9
 800cc5a:	4616      	mov	r6, r2
 800cc5c:	7830      	ldrb	r0, [r6, #0]
 800cc5e:	3201      	adds	r2, #1
 800cc60:	f7ff ffb1 	bl	800cbc6 <__hexdig_fun>
 800cc64:	2800      	cmp	r0, #0
 800cc66:	d1f8      	bne.n	800cc5a <__gethex+0x6a>
 800cc68:	2201      	movs	r2, #1
 800cc6a:	4630      	mov	r0, r6
 800cc6c:	498c      	ldr	r1, [pc, #560]	@ (800cea0 <__gethex+0x2b0>)
 800cc6e:	f7ff fe3d 	bl	800c8ec <strncmp>
 800cc72:	2800      	cmp	r0, #0
 800cc74:	d13f      	bne.n	800ccf6 <__gethex+0x106>
 800cc76:	b944      	cbnz	r4, 800cc8a <__gethex+0x9a>
 800cc78:	1c74      	adds	r4, r6, #1
 800cc7a:	4622      	mov	r2, r4
 800cc7c:	4616      	mov	r6, r2
 800cc7e:	7830      	ldrb	r0, [r6, #0]
 800cc80:	3201      	adds	r2, #1
 800cc82:	f7ff ffa0 	bl	800cbc6 <__hexdig_fun>
 800cc86:	2800      	cmp	r0, #0
 800cc88:	d1f8      	bne.n	800cc7c <__gethex+0x8c>
 800cc8a:	1ba4      	subs	r4, r4, r6
 800cc8c:	00a7      	lsls	r7, r4, #2
 800cc8e:	7833      	ldrb	r3, [r6, #0]
 800cc90:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cc94:	2b50      	cmp	r3, #80	@ 0x50
 800cc96:	d13e      	bne.n	800cd16 <__gethex+0x126>
 800cc98:	7873      	ldrb	r3, [r6, #1]
 800cc9a:	2b2b      	cmp	r3, #43	@ 0x2b
 800cc9c:	d033      	beq.n	800cd06 <__gethex+0x116>
 800cc9e:	2b2d      	cmp	r3, #45	@ 0x2d
 800cca0:	d034      	beq.n	800cd0c <__gethex+0x11c>
 800cca2:	2400      	movs	r4, #0
 800cca4:	1c71      	adds	r1, r6, #1
 800cca6:	7808      	ldrb	r0, [r1, #0]
 800cca8:	f7ff ff8d 	bl	800cbc6 <__hexdig_fun>
 800ccac:	1e43      	subs	r3, r0, #1
 800ccae:	b2db      	uxtb	r3, r3
 800ccb0:	2b18      	cmp	r3, #24
 800ccb2:	d830      	bhi.n	800cd16 <__gethex+0x126>
 800ccb4:	f1a0 0210 	sub.w	r2, r0, #16
 800ccb8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ccbc:	f7ff ff83 	bl	800cbc6 <__hexdig_fun>
 800ccc0:	f100 3cff 	add.w	ip, r0, #4294967295
 800ccc4:	fa5f fc8c 	uxtb.w	ip, ip
 800ccc8:	f1bc 0f18 	cmp.w	ip, #24
 800cccc:	f04f 030a 	mov.w	r3, #10
 800ccd0:	d91e      	bls.n	800cd10 <__gethex+0x120>
 800ccd2:	b104      	cbz	r4, 800ccd6 <__gethex+0xe6>
 800ccd4:	4252      	negs	r2, r2
 800ccd6:	4417      	add	r7, r2
 800ccd8:	f8ca 1000 	str.w	r1, [sl]
 800ccdc:	b1ed      	cbz	r5, 800cd1a <__gethex+0x12a>
 800ccde:	f1bb 0f00 	cmp.w	fp, #0
 800cce2:	bf0c      	ite	eq
 800cce4:	2506      	moveq	r5, #6
 800cce6:	2500      	movne	r5, #0
 800cce8:	4628      	mov	r0, r5
 800ccea:	b005      	add	sp, #20
 800ccec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccf0:	2500      	movs	r5, #0
 800ccf2:	462c      	mov	r4, r5
 800ccf4:	e7b0      	b.n	800cc58 <__gethex+0x68>
 800ccf6:	2c00      	cmp	r4, #0
 800ccf8:	d1c7      	bne.n	800cc8a <__gethex+0x9a>
 800ccfa:	4627      	mov	r7, r4
 800ccfc:	e7c7      	b.n	800cc8e <__gethex+0x9e>
 800ccfe:	464e      	mov	r6, r9
 800cd00:	462f      	mov	r7, r5
 800cd02:	2501      	movs	r5, #1
 800cd04:	e7c3      	b.n	800cc8e <__gethex+0x9e>
 800cd06:	2400      	movs	r4, #0
 800cd08:	1cb1      	adds	r1, r6, #2
 800cd0a:	e7cc      	b.n	800cca6 <__gethex+0xb6>
 800cd0c:	2401      	movs	r4, #1
 800cd0e:	e7fb      	b.n	800cd08 <__gethex+0x118>
 800cd10:	fb03 0002 	mla	r0, r3, r2, r0
 800cd14:	e7ce      	b.n	800ccb4 <__gethex+0xc4>
 800cd16:	4631      	mov	r1, r6
 800cd18:	e7de      	b.n	800ccd8 <__gethex+0xe8>
 800cd1a:	4629      	mov	r1, r5
 800cd1c:	eba6 0309 	sub.w	r3, r6, r9
 800cd20:	3b01      	subs	r3, #1
 800cd22:	2b07      	cmp	r3, #7
 800cd24:	dc0a      	bgt.n	800cd3c <__gethex+0x14c>
 800cd26:	9801      	ldr	r0, [sp, #4]
 800cd28:	f000 faf4 	bl	800d314 <_Balloc>
 800cd2c:	4604      	mov	r4, r0
 800cd2e:	b940      	cbnz	r0, 800cd42 <__gethex+0x152>
 800cd30:	4602      	mov	r2, r0
 800cd32:	21e4      	movs	r1, #228	@ 0xe4
 800cd34:	4b5b      	ldr	r3, [pc, #364]	@ (800cea4 <__gethex+0x2b4>)
 800cd36:	485c      	ldr	r0, [pc, #368]	@ (800cea8 <__gethex+0x2b8>)
 800cd38:	f001 fbd2 	bl	800e4e0 <__assert_func>
 800cd3c:	3101      	adds	r1, #1
 800cd3e:	105b      	asrs	r3, r3, #1
 800cd40:	e7ef      	b.n	800cd22 <__gethex+0x132>
 800cd42:	2300      	movs	r3, #0
 800cd44:	f100 0a14 	add.w	sl, r0, #20
 800cd48:	4655      	mov	r5, sl
 800cd4a:	469b      	mov	fp, r3
 800cd4c:	45b1      	cmp	r9, r6
 800cd4e:	d337      	bcc.n	800cdc0 <__gethex+0x1d0>
 800cd50:	f845 bb04 	str.w	fp, [r5], #4
 800cd54:	eba5 050a 	sub.w	r5, r5, sl
 800cd58:	10ad      	asrs	r5, r5, #2
 800cd5a:	6125      	str	r5, [r4, #16]
 800cd5c:	4658      	mov	r0, fp
 800cd5e:	f000 fbcb 	bl	800d4f8 <__hi0bits>
 800cd62:	016d      	lsls	r5, r5, #5
 800cd64:	f8d8 6000 	ldr.w	r6, [r8]
 800cd68:	1a2d      	subs	r5, r5, r0
 800cd6a:	42b5      	cmp	r5, r6
 800cd6c:	dd54      	ble.n	800ce18 <__gethex+0x228>
 800cd6e:	1bad      	subs	r5, r5, r6
 800cd70:	4629      	mov	r1, r5
 800cd72:	4620      	mov	r0, r4
 800cd74:	f000 ff53 	bl	800dc1e <__any_on>
 800cd78:	4681      	mov	r9, r0
 800cd7a:	b178      	cbz	r0, 800cd9c <__gethex+0x1ac>
 800cd7c:	f04f 0901 	mov.w	r9, #1
 800cd80:	1e6b      	subs	r3, r5, #1
 800cd82:	1159      	asrs	r1, r3, #5
 800cd84:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cd88:	f003 021f 	and.w	r2, r3, #31
 800cd8c:	fa09 f202 	lsl.w	r2, r9, r2
 800cd90:	420a      	tst	r2, r1
 800cd92:	d003      	beq.n	800cd9c <__gethex+0x1ac>
 800cd94:	454b      	cmp	r3, r9
 800cd96:	dc36      	bgt.n	800ce06 <__gethex+0x216>
 800cd98:	f04f 0902 	mov.w	r9, #2
 800cd9c:	4629      	mov	r1, r5
 800cd9e:	4620      	mov	r0, r4
 800cda0:	f7ff febe 	bl	800cb20 <rshift>
 800cda4:	442f      	add	r7, r5
 800cda6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cdaa:	42bb      	cmp	r3, r7
 800cdac:	da42      	bge.n	800ce34 <__gethex+0x244>
 800cdae:	4621      	mov	r1, r4
 800cdb0:	9801      	ldr	r0, [sp, #4]
 800cdb2:	f000 faef 	bl	800d394 <_Bfree>
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cdba:	25a3      	movs	r5, #163	@ 0xa3
 800cdbc:	6013      	str	r3, [r2, #0]
 800cdbe:	e793      	b.n	800cce8 <__gethex+0xf8>
 800cdc0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cdc4:	2a2e      	cmp	r2, #46	@ 0x2e
 800cdc6:	d012      	beq.n	800cdee <__gethex+0x1fe>
 800cdc8:	2b20      	cmp	r3, #32
 800cdca:	d104      	bne.n	800cdd6 <__gethex+0x1e6>
 800cdcc:	f845 bb04 	str.w	fp, [r5], #4
 800cdd0:	f04f 0b00 	mov.w	fp, #0
 800cdd4:	465b      	mov	r3, fp
 800cdd6:	7830      	ldrb	r0, [r6, #0]
 800cdd8:	9303      	str	r3, [sp, #12]
 800cdda:	f7ff fef4 	bl	800cbc6 <__hexdig_fun>
 800cdde:	9b03      	ldr	r3, [sp, #12]
 800cde0:	f000 000f 	and.w	r0, r0, #15
 800cde4:	4098      	lsls	r0, r3
 800cde6:	ea4b 0b00 	orr.w	fp, fp, r0
 800cdea:	3304      	adds	r3, #4
 800cdec:	e7ae      	b.n	800cd4c <__gethex+0x15c>
 800cdee:	45b1      	cmp	r9, r6
 800cdf0:	d8ea      	bhi.n	800cdc8 <__gethex+0x1d8>
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	4630      	mov	r0, r6
 800cdf6:	492a      	ldr	r1, [pc, #168]	@ (800cea0 <__gethex+0x2b0>)
 800cdf8:	9303      	str	r3, [sp, #12]
 800cdfa:	f7ff fd77 	bl	800c8ec <strncmp>
 800cdfe:	9b03      	ldr	r3, [sp, #12]
 800ce00:	2800      	cmp	r0, #0
 800ce02:	d1e1      	bne.n	800cdc8 <__gethex+0x1d8>
 800ce04:	e7a2      	b.n	800cd4c <__gethex+0x15c>
 800ce06:	4620      	mov	r0, r4
 800ce08:	1ea9      	subs	r1, r5, #2
 800ce0a:	f000 ff08 	bl	800dc1e <__any_on>
 800ce0e:	2800      	cmp	r0, #0
 800ce10:	d0c2      	beq.n	800cd98 <__gethex+0x1a8>
 800ce12:	f04f 0903 	mov.w	r9, #3
 800ce16:	e7c1      	b.n	800cd9c <__gethex+0x1ac>
 800ce18:	da09      	bge.n	800ce2e <__gethex+0x23e>
 800ce1a:	1b75      	subs	r5, r6, r5
 800ce1c:	4621      	mov	r1, r4
 800ce1e:	462a      	mov	r2, r5
 800ce20:	9801      	ldr	r0, [sp, #4]
 800ce22:	f000 fccd 	bl	800d7c0 <__lshift>
 800ce26:	4604      	mov	r4, r0
 800ce28:	1b7f      	subs	r7, r7, r5
 800ce2a:	f100 0a14 	add.w	sl, r0, #20
 800ce2e:	f04f 0900 	mov.w	r9, #0
 800ce32:	e7b8      	b.n	800cda6 <__gethex+0x1b6>
 800ce34:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ce38:	42bd      	cmp	r5, r7
 800ce3a:	dd6f      	ble.n	800cf1c <__gethex+0x32c>
 800ce3c:	1bed      	subs	r5, r5, r7
 800ce3e:	42ae      	cmp	r6, r5
 800ce40:	dc34      	bgt.n	800ceac <__gethex+0x2bc>
 800ce42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ce46:	2b02      	cmp	r3, #2
 800ce48:	d022      	beq.n	800ce90 <__gethex+0x2a0>
 800ce4a:	2b03      	cmp	r3, #3
 800ce4c:	d024      	beq.n	800ce98 <__gethex+0x2a8>
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	d115      	bne.n	800ce7e <__gethex+0x28e>
 800ce52:	42ae      	cmp	r6, r5
 800ce54:	d113      	bne.n	800ce7e <__gethex+0x28e>
 800ce56:	2e01      	cmp	r6, #1
 800ce58:	d10b      	bne.n	800ce72 <__gethex+0x282>
 800ce5a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ce5e:	9a02      	ldr	r2, [sp, #8]
 800ce60:	2562      	movs	r5, #98	@ 0x62
 800ce62:	6013      	str	r3, [r2, #0]
 800ce64:	2301      	movs	r3, #1
 800ce66:	6123      	str	r3, [r4, #16]
 800ce68:	f8ca 3000 	str.w	r3, [sl]
 800ce6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce6e:	601c      	str	r4, [r3, #0]
 800ce70:	e73a      	b.n	800cce8 <__gethex+0xf8>
 800ce72:	4620      	mov	r0, r4
 800ce74:	1e71      	subs	r1, r6, #1
 800ce76:	f000 fed2 	bl	800dc1e <__any_on>
 800ce7a:	2800      	cmp	r0, #0
 800ce7c:	d1ed      	bne.n	800ce5a <__gethex+0x26a>
 800ce7e:	4621      	mov	r1, r4
 800ce80:	9801      	ldr	r0, [sp, #4]
 800ce82:	f000 fa87 	bl	800d394 <_Bfree>
 800ce86:	2300      	movs	r3, #0
 800ce88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ce8a:	2550      	movs	r5, #80	@ 0x50
 800ce8c:	6013      	str	r3, [r2, #0]
 800ce8e:	e72b      	b.n	800cce8 <__gethex+0xf8>
 800ce90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d1f3      	bne.n	800ce7e <__gethex+0x28e>
 800ce96:	e7e0      	b.n	800ce5a <__gethex+0x26a>
 800ce98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d1dd      	bne.n	800ce5a <__gethex+0x26a>
 800ce9e:	e7ee      	b.n	800ce7e <__gethex+0x28e>
 800cea0:	0800ea72 	.word	0x0800ea72
 800cea4:	0800ecd7 	.word	0x0800ecd7
 800cea8:	0800ece8 	.word	0x0800ece8
 800ceac:	1e6f      	subs	r7, r5, #1
 800ceae:	f1b9 0f00 	cmp.w	r9, #0
 800ceb2:	d130      	bne.n	800cf16 <__gethex+0x326>
 800ceb4:	b127      	cbz	r7, 800cec0 <__gethex+0x2d0>
 800ceb6:	4639      	mov	r1, r7
 800ceb8:	4620      	mov	r0, r4
 800ceba:	f000 feb0 	bl	800dc1e <__any_on>
 800cebe:	4681      	mov	r9, r0
 800cec0:	2301      	movs	r3, #1
 800cec2:	4629      	mov	r1, r5
 800cec4:	1b76      	subs	r6, r6, r5
 800cec6:	2502      	movs	r5, #2
 800cec8:	117a      	asrs	r2, r7, #5
 800ceca:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cece:	f007 071f 	and.w	r7, r7, #31
 800ced2:	40bb      	lsls	r3, r7
 800ced4:	4213      	tst	r3, r2
 800ced6:	4620      	mov	r0, r4
 800ced8:	bf18      	it	ne
 800ceda:	f049 0902 	orrne.w	r9, r9, #2
 800cede:	f7ff fe1f 	bl	800cb20 <rshift>
 800cee2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cee6:	f1b9 0f00 	cmp.w	r9, #0
 800ceea:	d047      	beq.n	800cf7c <__gethex+0x38c>
 800ceec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cef0:	2b02      	cmp	r3, #2
 800cef2:	d015      	beq.n	800cf20 <__gethex+0x330>
 800cef4:	2b03      	cmp	r3, #3
 800cef6:	d017      	beq.n	800cf28 <__gethex+0x338>
 800cef8:	2b01      	cmp	r3, #1
 800cefa:	d109      	bne.n	800cf10 <__gethex+0x320>
 800cefc:	f019 0f02 	tst.w	r9, #2
 800cf00:	d006      	beq.n	800cf10 <__gethex+0x320>
 800cf02:	f8da 3000 	ldr.w	r3, [sl]
 800cf06:	ea49 0903 	orr.w	r9, r9, r3
 800cf0a:	f019 0f01 	tst.w	r9, #1
 800cf0e:	d10e      	bne.n	800cf2e <__gethex+0x33e>
 800cf10:	f045 0510 	orr.w	r5, r5, #16
 800cf14:	e032      	b.n	800cf7c <__gethex+0x38c>
 800cf16:	f04f 0901 	mov.w	r9, #1
 800cf1a:	e7d1      	b.n	800cec0 <__gethex+0x2d0>
 800cf1c:	2501      	movs	r5, #1
 800cf1e:	e7e2      	b.n	800cee6 <__gethex+0x2f6>
 800cf20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf22:	f1c3 0301 	rsb	r3, r3, #1
 800cf26:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cf28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d0f0      	beq.n	800cf10 <__gethex+0x320>
 800cf2e:	f04f 0c00 	mov.w	ip, #0
 800cf32:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cf36:	f104 0314 	add.w	r3, r4, #20
 800cf3a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cf3e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cf42:	4618      	mov	r0, r3
 800cf44:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf48:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cf4c:	d01b      	beq.n	800cf86 <__gethex+0x396>
 800cf4e:	3201      	adds	r2, #1
 800cf50:	6002      	str	r2, [r0, #0]
 800cf52:	2d02      	cmp	r5, #2
 800cf54:	f104 0314 	add.w	r3, r4, #20
 800cf58:	d13c      	bne.n	800cfd4 <__gethex+0x3e4>
 800cf5a:	f8d8 2000 	ldr.w	r2, [r8]
 800cf5e:	3a01      	subs	r2, #1
 800cf60:	42b2      	cmp	r2, r6
 800cf62:	d109      	bne.n	800cf78 <__gethex+0x388>
 800cf64:	2201      	movs	r2, #1
 800cf66:	1171      	asrs	r1, r6, #5
 800cf68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cf6c:	f006 061f 	and.w	r6, r6, #31
 800cf70:	fa02 f606 	lsl.w	r6, r2, r6
 800cf74:	421e      	tst	r6, r3
 800cf76:	d13a      	bne.n	800cfee <__gethex+0x3fe>
 800cf78:	f045 0520 	orr.w	r5, r5, #32
 800cf7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf7e:	601c      	str	r4, [r3, #0]
 800cf80:	9b02      	ldr	r3, [sp, #8]
 800cf82:	601f      	str	r7, [r3, #0]
 800cf84:	e6b0      	b.n	800cce8 <__gethex+0xf8>
 800cf86:	4299      	cmp	r1, r3
 800cf88:	f843 cc04 	str.w	ip, [r3, #-4]
 800cf8c:	d8d9      	bhi.n	800cf42 <__gethex+0x352>
 800cf8e:	68a3      	ldr	r3, [r4, #8]
 800cf90:	459b      	cmp	fp, r3
 800cf92:	db17      	blt.n	800cfc4 <__gethex+0x3d4>
 800cf94:	6861      	ldr	r1, [r4, #4]
 800cf96:	9801      	ldr	r0, [sp, #4]
 800cf98:	3101      	adds	r1, #1
 800cf9a:	f000 f9bb 	bl	800d314 <_Balloc>
 800cf9e:	4681      	mov	r9, r0
 800cfa0:	b918      	cbnz	r0, 800cfaa <__gethex+0x3ba>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	2184      	movs	r1, #132	@ 0x84
 800cfa6:	4b19      	ldr	r3, [pc, #100]	@ (800d00c <__gethex+0x41c>)
 800cfa8:	e6c5      	b.n	800cd36 <__gethex+0x146>
 800cfaa:	6922      	ldr	r2, [r4, #16]
 800cfac:	f104 010c 	add.w	r1, r4, #12
 800cfb0:	3202      	adds	r2, #2
 800cfb2:	0092      	lsls	r2, r2, #2
 800cfb4:	300c      	adds	r0, #12
 800cfb6:	f7ff fd52 	bl	800ca5e <memcpy>
 800cfba:	4621      	mov	r1, r4
 800cfbc:	9801      	ldr	r0, [sp, #4]
 800cfbe:	f000 f9e9 	bl	800d394 <_Bfree>
 800cfc2:	464c      	mov	r4, r9
 800cfc4:	6923      	ldr	r3, [r4, #16]
 800cfc6:	1c5a      	adds	r2, r3, #1
 800cfc8:	6122      	str	r2, [r4, #16]
 800cfca:	2201      	movs	r2, #1
 800cfcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cfd0:	615a      	str	r2, [r3, #20]
 800cfd2:	e7be      	b.n	800cf52 <__gethex+0x362>
 800cfd4:	6922      	ldr	r2, [r4, #16]
 800cfd6:	455a      	cmp	r2, fp
 800cfd8:	dd0b      	ble.n	800cff2 <__gethex+0x402>
 800cfda:	2101      	movs	r1, #1
 800cfdc:	4620      	mov	r0, r4
 800cfde:	f7ff fd9f 	bl	800cb20 <rshift>
 800cfe2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cfe6:	3701      	adds	r7, #1
 800cfe8:	42bb      	cmp	r3, r7
 800cfea:	f6ff aee0 	blt.w	800cdae <__gethex+0x1be>
 800cfee:	2501      	movs	r5, #1
 800cff0:	e7c2      	b.n	800cf78 <__gethex+0x388>
 800cff2:	f016 061f 	ands.w	r6, r6, #31
 800cff6:	d0fa      	beq.n	800cfee <__gethex+0x3fe>
 800cff8:	4453      	add	r3, sl
 800cffa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cffe:	f000 fa7b 	bl	800d4f8 <__hi0bits>
 800d002:	f1c6 0620 	rsb	r6, r6, #32
 800d006:	42b0      	cmp	r0, r6
 800d008:	dbe7      	blt.n	800cfda <__gethex+0x3ea>
 800d00a:	e7f0      	b.n	800cfee <__gethex+0x3fe>
 800d00c:	0800ecd7 	.word	0x0800ecd7

0800d010 <L_shift>:
 800d010:	f1c2 0208 	rsb	r2, r2, #8
 800d014:	0092      	lsls	r2, r2, #2
 800d016:	b570      	push	{r4, r5, r6, lr}
 800d018:	f1c2 0620 	rsb	r6, r2, #32
 800d01c:	6843      	ldr	r3, [r0, #4]
 800d01e:	6804      	ldr	r4, [r0, #0]
 800d020:	fa03 f506 	lsl.w	r5, r3, r6
 800d024:	432c      	orrs	r4, r5
 800d026:	40d3      	lsrs	r3, r2
 800d028:	6004      	str	r4, [r0, #0]
 800d02a:	f840 3f04 	str.w	r3, [r0, #4]!
 800d02e:	4288      	cmp	r0, r1
 800d030:	d3f4      	bcc.n	800d01c <L_shift+0xc>
 800d032:	bd70      	pop	{r4, r5, r6, pc}

0800d034 <__match>:
 800d034:	b530      	push	{r4, r5, lr}
 800d036:	6803      	ldr	r3, [r0, #0]
 800d038:	3301      	adds	r3, #1
 800d03a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d03e:	b914      	cbnz	r4, 800d046 <__match+0x12>
 800d040:	6003      	str	r3, [r0, #0]
 800d042:	2001      	movs	r0, #1
 800d044:	bd30      	pop	{r4, r5, pc}
 800d046:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d04a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d04e:	2d19      	cmp	r5, #25
 800d050:	bf98      	it	ls
 800d052:	3220      	addls	r2, #32
 800d054:	42a2      	cmp	r2, r4
 800d056:	d0f0      	beq.n	800d03a <__match+0x6>
 800d058:	2000      	movs	r0, #0
 800d05a:	e7f3      	b.n	800d044 <__match+0x10>

0800d05c <__hexnan>:
 800d05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d060:	2500      	movs	r5, #0
 800d062:	680b      	ldr	r3, [r1, #0]
 800d064:	4682      	mov	sl, r0
 800d066:	115e      	asrs	r6, r3, #5
 800d068:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d06c:	f013 031f 	ands.w	r3, r3, #31
 800d070:	bf18      	it	ne
 800d072:	3604      	addne	r6, #4
 800d074:	1f37      	subs	r7, r6, #4
 800d076:	4690      	mov	r8, r2
 800d078:	46b9      	mov	r9, r7
 800d07a:	463c      	mov	r4, r7
 800d07c:	46ab      	mov	fp, r5
 800d07e:	b087      	sub	sp, #28
 800d080:	6801      	ldr	r1, [r0, #0]
 800d082:	9301      	str	r3, [sp, #4]
 800d084:	f846 5c04 	str.w	r5, [r6, #-4]
 800d088:	9502      	str	r5, [sp, #8]
 800d08a:	784a      	ldrb	r2, [r1, #1]
 800d08c:	1c4b      	adds	r3, r1, #1
 800d08e:	9303      	str	r3, [sp, #12]
 800d090:	b342      	cbz	r2, 800d0e4 <__hexnan+0x88>
 800d092:	4610      	mov	r0, r2
 800d094:	9105      	str	r1, [sp, #20]
 800d096:	9204      	str	r2, [sp, #16]
 800d098:	f7ff fd95 	bl	800cbc6 <__hexdig_fun>
 800d09c:	2800      	cmp	r0, #0
 800d09e:	d151      	bne.n	800d144 <__hexnan+0xe8>
 800d0a0:	9a04      	ldr	r2, [sp, #16]
 800d0a2:	9905      	ldr	r1, [sp, #20]
 800d0a4:	2a20      	cmp	r2, #32
 800d0a6:	d818      	bhi.n	800d0da <__hexnan+0x7e>
 800d0a8:	9b02      	ldr	r3, [sp, #8]
 800d0aa:	459b      	cmp	fp, r3
 800d0ac:	dd13      	ble.n	800d0d6 <__hexnan+0x7a>
 800d0ae:	454c      	cmp	r4, r9
 800d0b0:	d206      	bcs.n	800d0c0 <__hexnan+0x64>
 800d0b2:	2d07      	cmp	r5, #7
 800d0b4:	dc04      	bgt.n	800d0c0 <__hexnan+0x64>
 800d0b6:	462a      	mov	r2, r5
 800d0b8:	4649      	mov	r1, r9
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	f7ff ffa8 	bl	800d010 <L_shift>
 800d0c0:	4544      	cmp	r4, r8
 800d0c2:	d952      	bls.n	800d16a <__hexnan+0x10e>
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	f1a4 0904 	sub.w	r9, r4, #4
 800d0ca:	f844 3c04 	str.w	r3, [r4, #-4]
 800d0ce:	461d      	mov	r5, r3
 800d0d0:	464c      	mov	r4, r9
 800d0d2:	f8cd b008 	str.w	fp, [sp, #8]
 800d0d6:	9903      	ldr	r1, [sp, #12]
 800d0d8:	e7d7      	b.n	800d08a <__hexnan+0x2e>
 800d0da:	2a29      	cmp	r2, #41	@ 0x29
 800d0dc:	d157      	bne.n	800d18e <__hexnan+0x132>
 800d0de:	3102      	adds	r1, #2
 800d0e0:	f8ca 1000 	str.w	r1, [sl]
 800d0e4:	f1bb 0f00 	cmp.w	fp, #0
 800d0e8:	d051      	beq.n	800d18e <__hexnan+0x132>
 800d0ea:	454c      	cmp	r4, r9
 800d0ec:	d206      	bcs.n	800d0fc <__hexnan+0xa0>
 800d0ee:	2d07      	cmp	r5, #7
 800d0f0:	dc04      	bgt.n	800d0fc <__hexnan+0xa0>
 800d0f2:	462a      	mov	r2, r5
 800d0f4:	4649      	mov	r1, r9
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	f7ff ff8a 	bl	800d010 <L_shift>
 800d0fc:	4544      	cmp	r4, r8
 800d0fe:	d936      	bls.n	800d16e <__hexnan+0x112>
 800d100:	4623      	mov	r3, r4
 800d102:	f1a8 0204 	sub.w	r2, r8, #4
 800d106:	f853 1b04 	ldr.w	r1, [r3], #4
 800d10a:	429f      	cmp	r7, r3
 800d10c:	f842 1f04 	str.w	r1, [r2, #4]!
 800d110:	d2f9      	bcs.n	800d106 <__hexnan+0xaa>
 800d112:	1b3b      	subs	r3, r7, r4
 800d114:	f023 0303 	bic.w	r3, r3, #3
 800d118:	3304      	adds	r3, #4
 800d11a:	3401      	adds	r4, #1
 800d11c:	3e03      	subs	r6, #3
 800d11e:	42b4      	cmp	r4, r6
 800d120:	bf88      	it	hi
 800d122:	2304      	movhi	r3, #4
 800d124:	2200      	movs	r2, #0
 800d126:	4443      	add	r3, r8
 800d128:	f843 2b04 	str.w	r2, [r3], #4
 800d12c:	429f      	cmp	r7, r3
 800d12e:	d2fb      	bcs.n	800d128 <__hexnan+0xcc>
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	b91b      	cbnz	r3, 800d13c <__hexnan+0xe0>
 800d134:	4547      	cmp	r7, r8
 800d136:	d128      	bne.n	800d18a <__hexnan+0x12e>
 800d138:	2301      	movs	r3, #1
 800d13a:	603b      	str	r3, [r7, #0]
 800d13c:	2005      	movs	r0, #5
 800d13e:	b007      	add	sp, #28
 800d140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d144:	3501      	adds	r5, #1
 800d146:	2d08      	cmp	r5, #8
 800d148:	f10b 0b01 	add.w	fp, fp, #1
 800d14c:	dd06      	ble.n	800d15c <__hexnan+0x100>
 800d14e:	4544      	cmp	r4, r8
 800d150:	d9c1      	bls.n	800d0d6 <__hexnan+0x7a>
 800d152:	2300      	movs	r3, #0
 800d154:	2501      	movs	r5, #1
 800d156:	f844 3c04 	str.w	r3, [r4, #-4]
 800d15a:	3c04      	subs	r4, #4
 800d15c:	6822      	ldr	r2, [r4, #0]
 800d15e:	f000 000f 	and.w	r0, r0, #15
 800d162:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d166:	6020      	str	r0, [r4, #0]
 800d168:	e7b5      	b.n	800d0d6 <__hexnan+0x7a>
 800d16a:	2508      	movs	r5, #8
 800d16c:	e7b3      	b.n	800d0d6 <__hexnan+0x7a>
 800d16e:	9b01      	ldr	r3, [sp, #4]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d0dd      	beq.n	800d130 <__hexnan+0xd4>
 800d174:	f04f 32ff 	mov.w	r2, #4294967295
 800d178:	f1c3 0320 	rsb	r3, r3, #32
 800d17c:	40da      	lsrs	r2, r3
 800d17e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d182:	4013      	ands	r3, r2
 800d184:	f846 3c04 	str.w	r3, [r6, #-4]
 800d188:	e7d2      	b.n	800d130 <__hexnan+0xd4>
 800d18a:	3f04      	subs	r7, #4
 800d18c:	e7d0      	b.n	800d130 <__hexnan+0xd4>
 800d18e:	2004      	movs	r0, #4
 800d190:	e7d5      	b.n	800d13e <__hexnan+0xe2>
	...

0800d194 <sbrk_aligned>:
 800d194:	b570      	push	{r4, r5, r6, lr}
 800d196:	4e0f      	ldr	r6, [pc, #60]	@ (800d1d4 <sbrk_aligned+0x40>)
 800d198:	460c      	mov	r4, r1
 800d19a:	6831      	ldr	r1, [r6, #0]
 800d19c:	4605      	mov	r5, r0
 800d19e:	b911      	cbnz	r1, 800d1a6 <sbrk_aligned+0x12>
 800d1a0:	f001 f980 	bl	800e4a4 <_sbrk_r>
 800d1a4:	6030      	str	r0, [r6, #0]
 800d1a6:	4621      	mov	r1, r4
 800d1a8:	4628      	mov	r0, r5
 800d1aa:	f001 f97b 	bl	800e4a4 <_sbrk_r>
 800d1ae:	1c43      	adds	r3, r0, #1
 800d1b0:	d103      	bne.n	800d1ba <sbrk_aligned+0x26>
 800d1b2:	f04f 34ff 	mov.w	r4, #4294967295
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	bd70      	pop	{r4, r5, r6, pc}
 800d1ba:	1cc4      	adds	r4, r0, #3
 800d1bc:	f024 0403 	bic.w	r4, r4, #3
 800d1c0:	42a0      	cmp	r0, r4
 800d1c2:	d0f8      	beq.n	800d1b6 <sbrk_aligned+0x22>
 800d1c4:	1a21      	subs	r1, r4, r0
 800d1c6:	4628      	mov	r0, r5
 800d1c8:	f001 f96c 	bl	800e4a4 <_sbrk_r>
 800d1cc:	3001      	adds	r0, #1
 800d1ce:	d1f2      	bne.n	800d1b6 <sbrk_aligned+0x22>
 800d1d0:	e7ef      	b.n	800d1b2 <sbrk_aligned+0x1e>
 800d1d2:	bf00      	nop
 800d1d4:	2000354c 	.word	0x2000354c

0800d1d8 <_malloc_r>:
 800d1d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1dc:	1ccd      	adds	r5, r1, #3
 800d1de:	f025 0503 	bic.w	r5, r5, #3
 800d1e2:	3508      	adds	r5, #8
 800d1e4:	2d0c      	cmp	r5, #12
 800d1e6:	bf38      	it	cc
 800d1e8:	250c      	movcc	r5, #12
 800d1ea:	2d00      	cmp	r5, #0
 800d1ec:	4606      	mov	r6, r0
 800d1ee:	db01      	blt.n	800d1f4 <_malloc_r+0x1c>
 800d1f0:	42a9      	cmp	r1, r5
 800d1f2:	d904      	bls.n	800d1fe <_malloc_r+0x26>
 800d1f4:	230c      	movs	r3, #12
 800d1f6:	6033      	str	r3, [r6, #0]
 800d1f8:	2000      	movs	r0, #0
 800d1fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d2d4 <_malloc_r+0xfc>
 800d202:	f000 f87b 	bl	800d2fc <__malloc_lock>
 800d206:	f8d8 3000 	ldr.w	r3, [r8]
 800d20a:	461c      	mov	r4, r3
 800d20c:	bb44      	cbnz	r4, 800d260 <_malloc_r+0x88>
 800d20e:	4629      	mov	r1, r5
 800d210:	4630      	mov	r0, r6
 800d212:	f7ff ffbf 	bl	800d194 <sbrk_aligned>
 800d216:	1c43      	adds	r3, r0, #1
 800d218:	4604      	mov	r4, r0
 800d21a:	d158      	bne.n	800d2ce <_malloc_r+0xf6>
 800d21c:	f8d8 4000 	ldr.w	r4, [r8]
 800d220:	4627      	mov	r7, r4
 800d222:	2f00      	cmp	r7, #0
 800d224:	d143      	bne.n	800d2ae <_malloc_r+0xd6>
 800d226:	2c00      	cmp	r4, #0
 800d228:	d04b      	beq.n	800d2c2 <_malloc_r+0xea>
 800d22a:	6823      	ldr	r3, [r4, #0]
 800d22c:	4639      	mov	r1, r7
 800d22e:	4630      	mov	r0, r6
 800d230:	eb04 0903 	add.w	r9, r4, r3
 800d234:	f001 f936 	bl	800e4a4 <_sbrk_r>
 800d238:	4581      	cmp	r9, r0
 800d23a:	d142      	bne.n	800d2c2 <_malloc_r+0xea>
 800d23c:	6821      	ldr	r1, [r4, #0]
 800d23e:	4630      	mov	r0, r6
 800d240:	1a6d      	subs	r5, r5, r1
 800d242:	4629      	mov	r1, r5
 800d244:	f7ff ffa6 	bl	800d194 <sbrk_aligned>
 800d248:	3001      	adds	r0, #1
 800d24a:	d03a      	beq.n	800d2c2 <_malloc_r+0xea>
 800d24c:	6823      	ldr	r3, [r4, #0]
 800d24e:	442b      	add	r3, r5
 800d250:	6023      	str	r3, [r4, #0]
 800d252:	f8d8 3000 	ldr.w	r3, [r8]
 800d256:	685a      	ldr	r2, [r3, #4]
 800d258:	bb62      	cbnz	r2, 800d2b4 <_malloc_r+0xdc>
 800d25a:	f8c8 7000 	str.w	r7, [r8]
 800d25e:	e00f      	b.n	800d280 <_malloc_r+0xa8>
 800d260:	6822      	ldr	r2, [r4, #0]
 800d262:	1b52      	subs	r2, r2, r5
 800d264:	d420      	bmi.n	800d2a8 <_malloc_r+0xd0>
 800d266:	2a0b      	cmp	r2, #11
 800d268:	d917      	bls.n	800d29a <_malloc_r+0xc2>
 800d26a:	1961      	adds	r1, r4, r5
 800d26c:	42a3      	cmp	r3, r4
 800d26e:	6025      	str	r5, [r4, #0]
 800d270:	bf18      	it	ne
 800d272:	6059      	strne	r1, [r3, #4]
 800d274:	6863      	ldr	r3, [r4, #4]
 800d276:	bf08      	it	eq
 800d278:	f8c8 1000 	streq.w	r1, [r8]
 800d27c:	5162      	str	r2, [r4, r5]
 800d27e:	604b      	str	r3, [r1, #4]
 800d280:	4630      	mov	r0, r6
 800d282:	f000 f841 	bl	800d308 <__malloc_unlock>
 800d286:	f104 000b 	add.w	r0, r4, #11
 800d28a:	1d23      	adds	r3, r4, #4
 800d28c:	f020 0007 	bic.w	r0, r0, #7
 800d290:	1ac2      	subs	r2, r0, r3
 800d292:	bf1c      	itt	ne
 800d294:	1a1b      	subne	r3, r3, r0
 800d296:	50a3      	strne	r3, [r4, r2]
 800d298:	e7af      	b.n	800d1fa <_malloc_r+0x22>
 800d29a:	6862      	ldr	r2, [r4, #4]
 800d29c:	42a3      	cmp	r3, r4
 800d29e:	bf0c      	ite	eq
 800d2a0:	f8c8 2000 	streq.w	r2, [r8]
 800d2a4:	605a      	strne	r2, [r3, #4]
 800d2a6:	e7eb      	b.n	800d280 <_malloc_r+0xa8>
 800d2a8:	4623      	mov	r3, r4
 800d2aa:	6864      	ldr	r4, [r4, #4]
 800d2ac:	e7ae      	b.n	800d20c <_malloc_r+0x34>
 800d2ae:	463c      	mov	r4, r7
 800d2b0:	687f      	ldr	r7, [r7, #4]
 800d2b2:	e7b6      	b.n	800d222 <_malloc_r+0x4a>
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	42a3      	cmp	r3, r4
 800d2ba:	d1fb      	bne.n	800d2b4 <_malloc_r+0xdc>
 800d2bc:	2300      	movs	r3, #0
 800d2be:	6053      	str	r3, [r2, #4]
 800d2c0:	e7de      	b.n	800d280 <_malloc_r+0xa8>
 800d2c2:	230c      	movs	r3, #12
 800d2c4:	4630      	mov	r0, r6
 800d2c6:	6033      	str	r3, [r6, #0]
 800d2c8:	f000 f81e 	bl	800d308 <__malloc_unlock>
 800d2cc:	e794      	b.n	800d1f8 <_malloc_r+0x20>
 800d2ce:	6005      	str	r5, [r0, #0]
 800d2d0:	e7d6      	b.n	800d280 <_malloc_r+0xa8>
 800d2d2:	bf00      	nop
 800d2d4:	20003550 	.word	0x20003550

0800d2d8 <__ascii_mbtowc>:
 800d2d8:	b082      	sub	sp, #8
 800d2da:	b901      	cbnz	r1, 800d2de <__ascii_mbtowc+0x6>
 800d2dc:	a901      	add	r1, sp, #4
 800d2de:	b142      	cbz	r2, 800d2f2 <__ascii_mbtowc+0x1a>
 800d2e0:	b14b      	cbz	r3, 800d2f6 <__ascii_mbtowc+0x1e>
 800d2e2:	7813      	ldrb	r3, [r2, #0]
 800d2e4:	600b      	str	r3, [r1, #0]
 800d2e6:	7812      	ldrb	r2, [r2, #0]
 800d2e8:	1e10      	subs	r0, r2, #0
 800d2ea:	bf18      	it	ne
 800d2ec:	2001      	movne	r0, #1
 800d2ee:	b002      	add	sp, #8
 800d2f0:	4770      	bx	lr
 800d2f2:	4610      	mov	r0, r2
 800d2f4:	e7fb      	b.n	800d2ee <__ascii_mbtowc+0x16>
 800d2f6:	f06f 0001 	mvn.w	r0, #1
 800d2fa:	e7f8      	b.n	800d2ee <__ascii_mbtowc+0x16>

0800d2fc <__malloc_lock>:
 800d2fc:	4801      	ldr	r0, [pc, #4]	@ (800d304 <__malloc_lock+0x8>)
 800d2fe:	f7ff bba4 	b.w	800ca4a <__retarget_lock_acquire_recursive>
 800d302:	bf00      	nop
 800d304:	20003548 	.word	0x20003548

0800d308 <__malloc_unlock>:
 800d308:	4801      	ldr	r0, [pc, #4]	@ (800d310 <__malloc_unlock+0x8>)
 800d30a:	f7ff bb9f 	b.w	800ca4c <__retarget_lock_release_recursive>
 800d30e:	bf00      	nop
 800d310:	20003548 	.word	0x20003548

0800d314 <_Balloc>:
 800d314:	b570      	push	{r4, r5, r6, lr}
 800d316:	69c6      	ldr	r6, [r0, #28]
 800d318:	4604      	mov	r4, r0
 800d31a:	460d      	mov	r5, r1
 800d31c:	b976      	cbnz	r6, 800d33c <_Balloc+0x28>
 800d31e:	2010      	movs	r0, #16
 800d320:	f001 f910 	bl	800e544 <malloc>
 800d324:	4602      	mov	r2, r0
 800d326:	61e0      	str	r0, [r4, #28]
 800d328:	b920      	cbnz	r0, 800d334 <_Balloc+0x20>
 800d32a:	216b      	movs	r1, #107	@ 0x6b
 800d32c:	4b17      	ldr	r3, [pc, #92]	@ (800d38c <_Balloc+0x78>)
 800d32e:	4818      	ldr	r0, [pc, #96]	@ (800d390 <_Balloc+0x7c>)
 800d330:	f001 f8d6 	bl	800e4e0 <__assert_func>
 800d334:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d338:	6006      	str	r6, [r0, #0]
 800d33a:	60c6      	str	r6, [r0, #12]
 800d33c:	69e6      	ldr	r6, [r4, #28]
 800d33e:	68f3      	ldr	r3, [r6, #12]
 800d340:	b183      	cbz	r3, 800d364 <_Balloc+0x50>
 800d342:	69e3      	ldr	r3, [r4, #28]
 800d344:	68db      	ldr	r3, [r3, #12]
 800d346:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d34a:	b9b8      	cbnz	r0, 800d37c <_Balloc+0x68>
 800d34c:	2101      	movs	r1, #1
 800d34e:	fa01 f605 	lsl.w	r6, r1, r5
 800d352:	1d72      	adds	r2, r6, #5
 800d354:	4620      	mov	r0, r4
 800d356:	0092      	lsls	r2, r2, #2
 800d358:	f001 f8e0 	bl	800e51c <_calloc_r>
 800d35c:	b160      	cbz	r0, 800d378 <_Balloc+0x64>
 800d35e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d362:	e00e      	b.n	800d382 <_Balloc+0x6e>
 800d364:	2221      	movs	r2, #33	@ 0x21
 800d366:	2104      	movs	r1, #4
 800d368:	4620      	mov	r0, r4
 800d36a:	f001 f8d7 	bl	800e51c <_calloc_r>
 800d36e:	69e3      	ldr	r3, [r4, #28]
 800d370:	60f0      	str	r0, [r6, #12]
 800d372:	68db      	ldr	r3, [r3, #12]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d1e4      	bne.n	800d342 <_Balloc+0x2e>
 800d378:	2000      	movs	r0, #0
 800d37a:	bd70      	pop	{r4, r5, r6, pc}
 800d37c:	6802      	ldr	r2, [r0, #0]
 800d37e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d382:	2300      	movs	r3, #0
 800d384:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d388:	e7f7      	b.n	800d37a <_Balloc+0x66>
 800d38a:	bf00      	nop
 800d38c:	0800ed48 	.word	0x0800ed48
 800d390:	0800ed5f 	.word	0x0800ed5f

0800d394 <_Bfree>:
 800d394:	b570      	push	{r4, r5, r6, lr}
 800d396:	69c6      	ldr	r6, [r0, #28]
 800d398:	4605      	mov	r5, r0
 800d39a:	460c      	mov	r4, r1
 800d39c:	b976      	cbnz	r6, 800d3bc <_Bfree+0x28>
 800d39e:	2010      	movs	r0, #16
 800d3a0:	f001 f8d0 	bl	800e544 <malloc>
 800d3a4:	4602      	mov	r2, r0
 800d3a6:	61e8      	str	r0, [r5, #28]
 800d3a8:	b920      	cbnz	r0, 800d3b4 <_Bfree+0x20>
 800d3aa:	218f      	movs	r1, #143	@ 0x8f
 800d3ac:	4b08      	ldr	r3, [pc, #32]	@ (800d3d0 <_Bfree+0x3c>)
 800d3ae:	4809      	ldr	r0, [pc, #36]	@ (800d3d4 <_Bfree+0x40>)
 800d3b0:	f001 f896 	bl	800e4e0 <__assert_func>
 800d3b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3b8:	6006      	str	r6, [r0, #0]
 800d3ba:	60c6      	str	r6, [r0, #12]
 800d3bc:	b13c      	cbz	r4, 800d3ce <_Bfree+0x3a>
 800d3be:	69eb      	ldr	r3, [r5, #28]
 800d3c0:	6862      	ldr	r2, [r4, #4]
 800d3c2:	68db      	ldr	r3, [r3, #12]
 800d3c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d3c8:	6021      	str	r1, [r4, #0]
 800d3ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d3ce:	bd70      	pop	{r4, r5, r6, pc}
 800d3d0:	0800ed48 	.word	0x0800ed48
 800d3d4:	0800ed5f 	.word	0x0800ed5f

0800d3d8 <__multadd>:
 800d3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3dc:	4607      	mov	r7, r0
 800d3de:	460c      	mov	r4, r1
 800d3e0:	461e      	mov	r6, r3
 800d3e2:	2000      	movs	r0, #0
 800d3e4:	690d      	ldr	r5, [r1, #16]
 800d3e6:	f101 0c14 	add.w	ip, r1, #20
 800d3ea:	f8dc 3000 	ldr.w	r3, [ip]
 800d3ee:	3001      	adds	r0, #1
 800d3f0:	b299      	uxth	r1, r3
 800d3f2:	fb02 6101 	mla	r1, r2, r1, r6
 800d3f6:	0c1e      	lsrs	r6, r3, #16
 800d3f8:	0c0b      	lsrs	r3, r1, #16
 800d3fa:	fb02 3306 	mla	r3, r2, r6, r3
 800d3fe:	b289      	uxth	r1, r1
 800d400:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d404:	4285      	cmp	r5, r0
 800d406:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d40a:	f84c 1b04 	str.w	r1, [ip], #4
 800d40e:	dcec      	bgt.n	800d3ea <__multadd+0x12>
 800d410:	b30e      	cbz	r6, 800d456 <__multadd+0x7e>
 800d412:	68a3      	ldr	r3, [r4, #8]
 800d414:	42ab      	cmp	r3, r5
 800d416:	dc19      	bgt.n	800d44c <__multadd+0x74>
 800d418:	6861      	ldr	r1, [r4, #4]
 800d41a:	4638      	mov	r0, r7
 800d41c:	3101      	adds	r1, #1
 800d41e:	f7ff ff79 	bl	800d314 <_Balloc>
 800d422:	4680      	mov	r8, r0
 800d424:	b928      	cbnz	r0, 800d432 <__multadd+0x5a>
 800d426:	4602      	mov	r2, r0
 800d428:	21ba      	movs	r1, #186	@ 0xba
 800d42a:	4b0c      	ldr	r3, [pc, #48]	@ (800d45c <__multadd+0x84>)
 800d42c:	480c      	ldr	r0, [pc, #48]	@ (800d460 <__multadd+0x88>)
 800d42e:	f001 f857 	bl	800e4e0 <__assert_func>
 800d432:	6922      	ldr	r2, [r4, #16]
 800d434:	f104 010c 	add.w	r1, r4, #12
 800d438:	3202      	adds	r2, #2
 800d43a:	0092      	lsls	r2, r2, #2
 800d43c:	300c      	adds	r0, #12
 800d43e:	f7ff fb0e 	bl	800ca5e <memcpy>
 800d442:	4621      	mov	r1, r4
 800d444:	4638      	mov	r0, r7
 800d446:	f7ff ffa5 	bl	800d394 <_Bfree>
 800d44a:	4644      	mov	r4, r8
 800d44c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d450:	3501      	adds	r5, #1
 800d452:	615e      	str	r6, [r3, #20]
 800d454:	6125      	str	r5, [r4, #16]
 800d456:	4620      	mov	r0, r4
 800d458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d45c:	0800ecd7 	.word	0x0800ecd7
 800d460:	0800ed5f 	.word	0x0800ed5f

0800d464 <__s2b>:
 800d464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d468:	4615      	mov	r5, r2
 800d46a:	2209      	movs	r2, #9
 800d46c:	461f      	mov	r7, r3
 800d46e:	3308      	adds	r3, #8
 800d470:	460c      	mov	r4, r1
 800d472:	fb93 f3f2 	sdiv	r3, r3, r2
 800d476:	4606      	mov	r6, r0
 800d478:	2201      	movs	r2, #1
 800d47a:	2100      	movs	r1, #0
 800d47c:	429a      	cmp	r2, r3
 800d47e:	db09      	blt.n	800d494 <__s2b+0x30>
 800d480:	4630      	mov	r0, r6
 800d482:	f7ff ff47 	bl	800d314 <_Balloc>
 800d486:	b940      	cbnz	r0, 800d49a <__s2b+0x36>
 800d488:	4602      	mov	r2, r0
 800d48a:	21d3      	movs	r1, #211	@ 0xd3
 800d48c:	4b18      	ldr	r3, [pc, #96]	@ (800d4f0 <__s2b+0x8c>)
 800d48e:	4819      	ldr	r0, [pc, #100]	@ (800d4f4 <__s2b+0x90>)
 800d490:	f001 f826 	bl	800e4e0 <__assert_func>
 800d494:	0052      	lsls	r2, r2, #1
 800d496:	3101      	adds	r1, #1
 800d498:	e7f0      	b.n	800d47c <__s2b+0x18>
 800d49a:	9b08      	ldr	r3, [sp, #32]
 800d49c:	2d09      	cmp	r5, #9
 800d49e:	6143      	str	r3, [r0, #20]
 800d4a0:	f04f 0301 	mov.w	r3, #1
 800d4a4:	6103      	str	r3, [r0, #16]
 800d4a6:	dd16      	ble.n	800d4d6 <__s2b+0x72>
 800d4a8:	f104 0909 	add.w	r9, r4, #9
 800d4ac:	46c8      	mov	r8, r9
 800d4ae:	442c      	add	r4, r5
 800d4b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d4b4:	4601      	mov	r1, r0
 800d4b6:	220a      	movs	r2, #10
 800d4b8:	4630      	mov	r0, r6
 800d4ba:	3b30      	subs	r3, #48	@ 0x30
 800d4bc:	f7ff ff8c 	bl	800d3d8 <__multadd>
 800d4c0:	45a0      	cmp	r8, r4
 800d4c2:	d1f5      	bne.n	800d4b0 <__s2b+0x4c>
 800d4c4:	f1a5 0408 	sub.w	r4, r5, #8
 800d4c8:	444c      	add	r4, r9
 800d4ca:	1b2d      	subs	r5, r5, r4
 800d4cc:	1963      	adds	r3, r4, r5
 800d4ce:	42bb      	cmp	r3, r7
 800d4d0:	db04      	blt.n	800d4dc <__s2b+0x78>
 800d4d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4d6:	2509      	movs	r5, #9
 800d4d8:	340a      	adds	r4, #10
 800d4da:	e7f6      	b.n	800d4ca <__s2b+0x66>
 800d4dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d4e0:	4601      	mov	r1, r0
 800d4e2:	220a      	movs	r2, #10
 800d4e4:	4630      	mov	r0, r6
 800d4e6:	3b30      	subs	r3, #48	@ 0x30
 800d4e8:	f7ff ff76 	bl	800d3d8 <__multadd>
 800d4ec:	e7ee      	b.n	800d4cc <__s2b+0x68>
 800d4ee:	bf00      	nop
 800d4f0:	0800ecd7 	.word	0x0800ecd7
 800d4f4:	0800ed5f 	.word	0x0800ed5f

0800d4f8 <__hi0bits>:
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d4fe:	bf3a      	itte	cc
 800d500:	0403      	lslcc	r3, r0, #16
 800d502:	2010      	movcc	r0, #16
 800d504:	2000      	movcs	r0, #0
 800d506:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d50a:	bf3c      	itt	cc
 800d50c:	021b      	lslcc	r3, r3, #8
 800d50e:	3008      	addcc	r0, #8
 800d510:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d514:	bf3c      	itt	cc
 800d516:	011b      	lslcc	r3, r3, #4
 800d518:	3004      	addcc	r0, #4
 800d51a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d51e:	bf3c      	itt	cc
 800d520:	009b      	lslcc	r3, r3, #2
 800d522:	3002      	addcc	r0, #2
 800d524:	2b00      	cmp	r3, #0
 800d526:	db05      	blt.n	800d534 <__hi0bits+0x3c>
 800d528:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d52c:	f100 0001 	add.w	r0, r0, #1
 800d530:	bf08      	it	eq
 800d532:	2020      	moveq	r0, #32
 800d534:	4770      	bx	lr

0800d536 <__lo0bits>:
 800d536:	6803      	ldr	r3, [r0, #0]
 800d538:	4602      	mov	r2, r0
 800d53a:	f013 0007 	ands.w	r0, r3, #7
 800d53e:	d00b      	beq.n	800d558 <__lo0bits+0x22>
 800d540:	07d9      	lsls	r1, r3, #31
 800d542:	d421      	bmi.n	800d588 <__lo0bits+0x52>
 800d544:	0798      	lsls	r0, r3, #30
 800d546:	bf49      	itett	mi
 800d548:	085b      	lsrmi	r3, r3, #1
 800d54a:	089b      	lsrpl	r3, r3, #2
 800d54c:	2001      	movmi	r0, #1
 800d54e:	6013      	strmi	r3, [r2, #0]
 800d550:	bf5c      	itt	pl
 800d552:	2002      	movpl	r0, #2
 800d554:	6013      	strpl	r3, [r2, #0]
 800d556:	4770      	bx	lr
 800d558:	b299      	uxth	r1, r3
 800d55a:	b909      	cbnz	r1, 800d560 <__lo0bits+0x2a>
 800d55c:	2010      	movs	r0, #16
 800d55e:	0c1b      	lsrs	r3, r3, #16
 800d560:	b2d9      	uxtb	r1, r3
 800d562:	b909      	cbnz	r1, 800d568 <__lo0bits+0x32>
 800d564:	3008      	adds	r0, #8
 800d566:	0a1b      	lsrs	r3, r3, #8
 800d568:	0719      	lsls	r1, r3, #28
 800d56a:	bf04      	itt	eq
 800d56c:	091b      	lsreq	r3, r3, #4
 800d56e:	3004      	addeq	r0, #4
 800d570:	0799      	lsls	r1, r3, #30
 800d572:	bf04      	itt	eq
 800d574:	089b      	lsreq	r3, r3, #2
 800d576:	3002      	addeq	r0, #2
 800d578:	07d9      	lsls	r1, r3, #31
 800d57a:	d403      	bmi.n	800d584 <__lo0bits+0x4e>
 800d57c:	085b      	lsrs	r3, r3, #1
 800d57e:	f100 0001 	add.w	r0, r0, #1
 800d582:	d003      	beq.n	800d58c <__lo0bits+0x56>
 800d584:	6013      	str	r3, [r2, #0]
 800d586:	4770      	bx	lr
 800d588:	2000      	movs	r0, #0
 800d58a:	4770      	bx	lr
 800d58c:	2020      	movs	r0, #32
 800d58e:	4770      	bx	lr

0800d590 <__i2b>:
 800d590:	b510      	push	{r4, lr}
 800d592:	460c      	mov	r4, r1
 800d594:	2101      	movs	r1, #1
 800d596:	f7ff febd 	bl	800d314 <_Balloc>
 800d59a:	4602      	mov	r2, r0
 800d59c:	b928      	cbnz	r0, 800d5aa <__i2b+0x1a>
 800d59e:	f240 1145 	movw	r1, #325	@ 0x145
 800d5a2:	4b04      	ldr	r3, [pc, #16]	@ (800d5b4 <__i2b+0x24>)
 800d5a4:	4804      	ldr	r0, [pc, #16]	@ (800d5b8 <__i2b+0x28>)
 800d5a6:	f000 ff9b 	bl	800e4e0 <__assert_func>
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	6144      	str	r4, [r0, #20]
 800d5ae:	6103      	str	r3, [r0, #16]
 800d5b0:	bd10      	pop	{r4, pc}
 800d5b2:	bf00      	nop
 800d5b4:	0800ecd7 	.word	0x0800ecd7
 800d5b8:	0800ed5f 	.word	0x0800ed5f

0800d5bc <__multiply>:
 800d5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5c0:	4614      	mov	r4, r2
 800d5c2:	690a      	ldr	r2, [r1, #16]
 800d5c4:	6923      	ldr	r3, [r4, #16]
 800d5c6:	460f      	mov	r7, r1
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	bfa2      	ittt	ge
 800d5cc:	4623      	movge	r3, r4
 800d5ce:	460c      	movge	r4, r1
 800d5d0:	461f      	movge	r7, r3
 800d5d2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d5d6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d5da:	68a3      	ldr	r3, [r4, #8]
 800d5dc:	6861      	ldr	r1, [r4, #4]
 800d5de:	eb0a 0609 	add.w	r6, sl, r9
 800d5e2:	42b3      	cmp	r3, r6
 800d5e4:	b085      	sub	sp, #20
 800d5e6:	bfb8      	it	lt
 800d5e8:	3101      	addlt	r1, #1
 800d5ea:	f7ff fe93 	bl	800d314 <_Balloc>
 800d5ee:	b930      	cbnz	r0, 800d5fe <__multiply+0x42>
 800d5f0:	4602      	mov	r2, r0
 800d5f2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d5f6:	4b43      	ldr	r3, [pc, #268]	@ (800d704 <__multiply+0x148>)
 800d5f8:	4843      	ldr	r0, [pc, #268]	@ (800d708 <__multiply+0x14c>)
 800d5fa:	f000 ff71 	bl	800e4e0 <__assert_func>
 800d5fe:	f100 0514 	add.w	r5, r0, #20
 800d602:	462b      	mov	r3, r5
 800d604:	2200      	movs	r2, #0
 800d606:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d60a:	4543      	cmp	r3, r8
 800d60c:	d321      	bcc.n	800d652 <__multiply+0x96>
 800d60e:	f107 0114 	add.w	r1, r7, #20
 800d612:	f104 0214 	add.w	r2, r4, #20
 800d616:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d61a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d61e:	9302      	str	r3, [sp, #8]
 800d620:	1b13      	subs	r3, r2, r4
 800d622:	3b15      	subs	r3, #21
 800d624:	f023 0303 	bic.w	r3, r3, #3
 800d628:	3304      	adds	r3, #4
 800d62a:	f104 0715 	add.w	r7, r4, #21
 800d62e:	42ba      	cmp	r2, r7
 800d630:	bf38      	it	cc
 800d632:	2304      	movcc	r3, #4
 800d634:	9301      	str	r3, [sp, #4]
 800d636:	9b02      	ldr	r3, [sp, #8]
 800d638:	9103      	str	r1, [sp, #12]
 800d63a:	428b      	cmp	r3, r1
 800d63c:	d80c      	bhi.n	800d658 <__multiply+0x9c>
 800d63e:	2e00      	cmp	r6, #0
 800d640:	dd03      	ble.n	800d64a <__multiply+0x8e>
 800d642:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d646:	2b00      	cmp	r3, #0
 800d648:	d05a      	beq.n	800d700 <__multiply+0x144>
 800d64a:	6106      	str	r6, [r0, #16]
 800d64c:	b005      	add	sp, #20
 800d64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d652:	f843 2b04 	str.w	r2, [r3], #4
 800d656:	e7d8      	b.n	800d60a <__multiply+0x4e>
 800d658:	f8b1 a000 	ldrh.w	sl, [r1]
 800d65c:	f1ba 0f00 	cmp.w	sl, #0
 800d660:	d023      	beq.n	800d6aa <__multiply+0xee>
 800d662:	46a9      	mov	r9, r5
 800d664:	f04f 0c00 	mov.w	ip, #0
 800d668:	f104 0e14 	add.w	lr, r4, #20
 800d66c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d670:	f8d9 3000 	ldr.w	r3, [r9]
 800d674:	fa1f fb87 	uxth.w	fp, r7
 800d678:	b29b      	uxth	r3, r3
 800d67a:	fb0a 330b 	mla	r3, sl, fp, r3
 800d67e:	4463      	add	r3, ip
 800d680:	f8d9 c000 	ldr.w	ip, [r9]
 800d684:	0c3f      	lsrs	r7, r7, #16
 800d686:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d68a:	fb0a c707 	mla	r7, sl, r7, ip
 800d68e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d692:	b29b      	uxth	r3, r3
 800d694:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d698:	4572      	cmp	r2, lr
 800d69a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d69e:	f849 3b04 	str.w	r3, [r9], #4
 800d6a2:	d8e3      	bhi.n	800d66c <__multiply+0xb0>
 800d6a4:	9b01      	ldr	r3, [sp, #4]
 800d6a6:	f845 c003 	str.w	ip, [r5, r3]
 800d6aa:	9b03      	ldr	r3, [sp, #12]
 800d6ac:	3104      	adds	r1, #4
 800d6ae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d6b2:	f1b9 0f00 	cmp.w	r9, #0
 800d6b6:	d021      	beq.n	800d6fc <__multiply+0x140>
 800d6b8:	46ae      	mov	lr, r5
 800d6ba:	f04f 0a00 	mov.w	sl, #0
 800d6be:	682b      	ldr	r3, [r5, #0]
 800d6c0:	f104 0c14 	add.w	ip, r4, #20
 800d6c4:	f8bc b000 	ldrh.w	fp, [ip]
 800d6c8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d6cc:	b29b      	uxth	r3, r3
 800d6ce:	fb09 770b 	mla	r7, r9, fp, r7
 800d6d2:	4457      	add	r7, sl
 800d6d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d6d8:	f84e 3b04 	str.w	r3, [lr], #4
 800d6dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d6e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d6e4:	f8be 3000 	ldrh.w	r3, [lr]
 800d6e8:	4562      	cmp	r2, ip
 800d6ea:	fb09 330a 	mla	r3, r9, sl, r3
 800d6ee:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d6f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d6f6:	d8e5      	bhi.n	800d6c4 <__multiply+0x108>
 800d6f8:	9f01      	ldr	r7, [sp, #4]
 800d6fa:	51eb      	str	r3, [r5, r7]
 800d6fc:	3504      	adds	r5, #4
 800d6fe:	e79a      	b.n	800d636 <__multiply+0x7a>
 800d700:	3e01      	subs	r6, #1
 800d702:	e79c      	b.n	800d63e <__multiply+0x82>
 800d704:	0800ecd7 	.word	0x0800ecd7
 800d708:	0800ed5f 	.word	0x0800ed5f

0800d70c <__pow5mult>:
 800d70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d710:	4615      	mov	r5, r2
 800d712:	f012 0203 	ands.w	r2, r2, #3
 800d716:	4607      	mov	r7, r0
 800d718:	460e      	mov	r6, r1
 800d71a:	d007      	beq.n	800d72c <__pow5mult+0x20>
 800d71c:	4c25      	ldr	r4, [pc, #148]	@ (800d7b4 <__pow5mult+0xa8>)
 800d71e:	3a01      	subs	r2, #1
 800d720:	2300      	movs	r3, #0
 800d722:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d726:	f7ff fe57 	bl	800d3d8 <__multadd>
 800d72a:	4606      	mov	r6, r0
 800d72c:	10ad      	asrs	r5, r5, #2
 800d72e:	d03d      	beq.n	800d7ac <__pow5mult+0xa0>
 800d730:	69fc      	ldr	r4, [r7, #28]
 800d732:	b97c      	cbnz	r4, 800d754 <__pow5mult+0x48>
 800d734:	2010      	movs	r0, #16
 800d736:	f000 ff05 	bl	800e544 <malloc>
 800d73a:	4602      	mov	r2, r0
 800d73c:	61f8      	str	r0, [r7, #28]
 800d73e:	b928      	cbnz	r0, 800d74c <__pow5mult+0x40>
 800d740:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d744:	4b1c      	ldr	r3, [pc, #112]	@ (800d7b8 <__pow5mult+0xac>)
 800d746:	481d      	ldr	r0, [pc, #116]	@ (800d7bc <__pow5mult+0xb0>)
 800d748:	f000 feca 	bl	800e4e0 <__assert_func>
 800d74c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d750:	6004      	str	r4, [r0, #0]
 800d752:	60c4      	str	r4, [r0, #12]
 800d754:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d758:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d75c:	b94c      	cbnz	r4, 800d772 <__pow5mult+0x66>
 800d75e:	f240 2171 	movw	r1, #625	@ 0x271
 800d762:	4638      	mov	r0, r7
 800d764:	f7ff ff14 	bl	800d590 <__i2b>
 800d768:	2300      	movs	r3, #0
 800d76a:	4604      	mov	r4, r0
 800d76c:	f8c8 0008 	str.w	r0, [r8, #8]
 800d770:	6003      	str	r3, [r0, #0]
 800d772:	f04f 0900 	mov.w	r9, #0
 800d776:	07eb      	lsls	r3, r5, #31
 800d778:	d50a      	bpl.n	800d790 <__pow5mult+0x84>
 800d77a:	4631      	mov	r1, r6
 800d77c:	4622      	mov	r2, r4
 800d77e:	4638      	mov	r0, r7
 800d780:	f7ff ff1c 	bl	800d5bc <__multiply>
 800d784:	4680      	mov	r8, r0
 800d786:	4631      	mov	r1, r6
 800d788:	4638      	mov	r0, r7
 800d78a:	f7ff fe03 	bl	800d394 <_Bfree>
 800d78e:	4646      	mov	r6, r8
 800d790:	106d      	asrs	r5, r5, #1
 800d792:	d00b      	beq.n	800d7ac <__pow5mult+0xa0>
 800d794:	6820      	ldr	r0, [r4, #0]
 800d796:	b938      	cbnz	r0, 800d7a8 <__pow5mult+0x9c>
 800d798:	4622      	mov	r2, r4
 800d79a:	4621      	mov	r1, r4
 800d79c:	4638      	mov	r0, r7
 800d79e:	f7ff ff0d 	bl	800d5bc <__multiply>
 800d7a2:	6020      	str	r0, [r4, #0]
 800d7a4:	f8c0 9000 	str.w	r9, [r0]
 800d7a8:	4604      	mov	r4, r0
 800d7aa:	e7e4      	b.n	800d776 <__pow5mult+0x6a>
 800d7ac:	4630      	mov	r0, r6
 800d7ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7b2:	bf00      	nop
 800d7b4:	0800edb8 	.word	0x0800edb8
 800d7b8:	0800ed48 	.word	0x0800ed48
 800d7bc:	0800ed5f 	.word	0x0800ed5f

0800d7c0 <__lshift>:
 800d7c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7c4:	460c      	mov	r4, r1
 800d7c6:	4607      	mov	r7, r0
 800d7c8:	4691      	mov	r9, r2
 800d7ca:	6923      	ldr	r3, [r4, #16]
 800d7cc:	6849      	ldr	r1, [r1, #4]
 800d7ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d7d2:	68a3      	ldr	r3, [r4, #8]
 800d7d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d7d8:	f108 0601 	add.w	r6, r8, #1
 800d7dc:	42b3      	cmp	r3, r6
 800d7de:	db0b      	blt.n	800d7f8 <__lshift+0x38>
 800d7e0:	4638      	mov	r0, r7
 800d7e2:	f7ff fd97 	bl	800d314 <_Balloc>
 800d7e6:	4605      	mov	r5, r0
 800d7e8:	b948      	cbnz	r0, 800d7fe <__lshift+0x3e>
 800d7ea:	4602      	mov	r2, r0
 800d7ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d7f0:	4b27      	ldr	r3, [pc, #156]	@ (800d890 <__lshift+0xd0>)
 800d7f2:	4828      	ldr	r0, [pc, #160]	@ (800d894 <__lshift+0xd4>)
 800d7f4:	f000 fe74 	bl	800e4e0 <__assert_func>
 800d7f8:	3101      	adds	r1, #1
 800d7fa:	005b      	lsls	r3, r3, #1
 800d7fc:	e7ee      	b.n	800d7dc <__lshift+0x1c>
 800d7fe:	2300      	movs	r3, #0
 800d800:	f100 0114 	add.w	r1, r0, #20
 800d804:	f100 0210 	add.w	r2, r0, #16
 800d808:	4618      	mov	r0, r3
 800d80a:	4553      	cmp	r3, sl
 800d80c:	db33      	blt.n	800d876 <__lshift+0xb6>
 800d80e:	6920      	ldr	r0, [r4, #16]
 800d810:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d814:	f104 0314 	add.w	r3, r4, #20
 800d818:	f019 091f 	ands.w	r9, r9, #31
 800d81c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d820:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d824:	d02b      	beq.n	800d87e <__lshift+0xbe>
 800d826:	468a      	mov	sl, r1
 800d828:	2200      	movs	r2, #0
 800d82a:	f1c9 0e20 	rsb	lr, r9, #32
 800d82e:	6818      	ldr	r0, [r3, #0]
 800d830:	fa00 f009 	lsl.w	r0, r0, r9
 800d834:	4310      	orrs	r0, r2
 800d836:	f84a 0b04 	str.w	r0, [sl], #4
 800d83a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d83e:	459c      	cmp	ip, r3
 800d840:	fa22 f20e 	lsr.w	r2, r2, lr
 800d844:	d8f3      	bhi.n	800d82e <__lshift+0x6e>
 800d846:	ebac 0304 	sub.w	r3, ip, r4
 800d84a:	3b15      	subs	r3, #21
 800d84c:	f023 0303 	bic.w	r3, r3, #3
 800d850:	3304      	adds	r3, #4
 800d852:	f104 0015 	add.w	r0, r4, #21
 800d856:	4584      	cmp	ip, r0
 800d858:	bf38      	it	cc
 800d85a:	2304      	movcc	r3, #4
 800d85c:	50ca      	str	r2, [r1, r3]
 800d85e:	b10a      	cbz	r2, 800d864 <__lshift+0xa4>
 800d860:	f108 0602 	add.w	r6, r8, #2
 800d864:	3e01      	subs	r6, #1
 800d866:	4638      	mov	r0, r7
 800d868:	4621      	mov	r1, r4
 800d86a:	612e      	str	r6, [r5, #16]
 800d86c:	f7ff fd92 	bl	800d394 <_Bfree>
 800d870:	4628      	mov	r0, r5
 800d872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d876:	f842 0f04 	str.w	r0, [r2, #4]!
 800d87a:	3301      	adds	r3, #1
 800d87c:	e7c5      	b.n	800d80a <__lshift+0x4a>
 800d87e:	3904      	subs	r1, #4
 800d880:	f853 2b04 	ldr.w	r2, [r3], #4
 800d884:	459c      	cmp	ip, r3
 800d886:	f841 2f04 	str.w	r2, [r1, #4]!
 800d88a:	d8f9      	bhi.n	800d880 <__lshift+0xc0>
 800d88c:	e7ea      	b.n	800d864 <__lshift+0xa4>
 800d88e:	bf00      	nop
 800d890:	0800ecd7 	.word	0x0800ecd7
 800d894:	0800ed5f 	.word	0x0800ed5f

0800d898 <__mcmp>:
 800d898:	4603      	mov	r3, r0
 800d89a:	690a      	ldr	r2, [r1, #16]
 800d89c:	6900      	ldr	r0, [r0, #16]
 800d89e:	b530      	push	{r4, r5, lr}
 800d8a0:	1a80      	subs	r0, r0, r2
 800d8a2:	d10e      	bne.n	800d8c2 <__mcmp+0x2a>
 800d8a4:	3314      	adds	r3, #20
 800d8a6:	3114      	adds	r1, #20
 800d8a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d8ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d8b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d8b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d8b8:	4295      	cmp	r5, r2
 800d8ba:	d003      	beq.n	800d8c4 <__mcmp+0x2c>
 800d8bc:	d205      	bcs.n	800d8ca <__mcmp+0x32>
 800d8be:	f04f 30ff 	mov.w	r0, #4294967295
 800d8c2:	bd30      	pop	{r4, r5, pc}
 800d8c4:	42a3      	cmp	r3, r4
 800d8c6:	d3f3      	bcc.n	800d8b0 <__mcmp+0x18>
 800d8c8:	e7fb      	b.n	800d8c2 <__mcmp+0x2a>
 800d8ca:	2001      	movs	r0, #1
 800d8cc:	e7f9      	b.n	800d8c2 <__mcmp+0x2a>
	...

0800d8d0 <__mdiff>:
 800d8d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8d4:	4689      	mov	r9, r1
 800d8d6:	4606      	mov	r6, r0
 800d8d8:	4611      	mov	r1, r2
 800d8da:	4648      	mov	r0, r9
 800d8dc:	4614      	mov	r4, r2
 800d8de:	f7ff ffdb 	bl	800d898 <__mcmp>
 800d8e2:	1e05      	subs	r5, r0, #0
 800d8e4:	d112      	bne.n	800d90c <__mdiff+0x3c>
 800d8e6:	4629      	mov	r1, r5
 800d8e8:	4630      	mov	r0, r6
 800d8ea:	f7ff fd13 	bl	800d314 <_Balloc>
 800d8ee:	4602      	mov	r2, r0
 800d8f0:	b928      	cbnz	r0, 800d8fe <__mdiff+0x2e>
 800d8f2:	f240 2137 	movw	r1, #567	@ 0x237
 800d8f6:	4b3e      	ldr	r3, [pc, #248]	@ (800d9f0 <__mdiff+0x120>)
 800d8f8:	483e      	ldr	r0, [pc, #248]	@ (800d9f4 <__mdiff+0x124>)
 800d8fa:	f000 fdf1 	bl	800e4e0 <__assert_func>
 800d8fe:	2301      	movs	r3, #1
 800d900:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d904:	4610      	mov	r0, r2
 800d906:	b003      	add	sp, #12
 800d908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d90c:	bfbc      	itt	lt
 800d90e:	464b      	movlt	r3, r9
 800d910:	46a1      	movlt	r9, r4
 800d912:	4630      	mov	r0, r6
 800d914:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d918:	bfba      	itte	lt
 800d91a:	461c      	movlt	r4, r3
 800d91c:	2501      	movlt	r5, #1
 800d91e:	2500      	movge	r5, #0
 800d920:	f7ff fcf8 	bl	800d314 <_Balloc>
 800d924:	4602      	mov	r2, r0
 800d926:	b918      	cbnz	r0, 800d930 <__mdiff+0x60>
 800d928:	f240 2145 	movw	r1, #581	@ 0x245
 800d92c:	4b30      	ldr	r3, [pc, #192]	@ (800d9f0 <__mdiff+0x120>)
 800d92e:	e7e3      	b.n	800d8f8 <__mdiff+0x28>
 800d930:	f100 0b14 	add.w	fp, r0, #20
 800d934:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d938:	f109 0310 	add.w	r3, r9, #16
 800d93c:	60c5      	str	r5, [r0, #12]
 800d93e:	f04f 0c00 	mov.w	ip, #0
 800d942:	f109 0514 	add.w	r5, r9, #20
 800d946:	46d9      	mov	r9, fp
 800d948:	6926      	ldr	r6, [r4, #16]
 800d94a:	f104 0e14 	add.w	lr, r4, #20
 800d94e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d952:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d956:	9301      	str	r3, [sp, #4]
 800d958:	9b01      	ldr	r3, [sp, #4]
 800d95a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d95e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d962:	b281      	uxth	r1, r0
 800d964:	9301      	str	r3, [sp, #4]
 800d966:	fa1f f38a 	uxth.w	r3, sl
 800d96a:	1a5b      	subs	r3, r3, r1
 800d96c:	0c00      	lsrs	r0, r0, #16
 800d96e:	4463      	add	r3, ip
 800d970:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d974:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d978:	b29b      	uxth	r3, r3
 800d97a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d97e:	4576      	cmp	r6, lr
 800d980:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d984:	f849 3b04 	str.w	r3, [r9], #4
 800d988:	d8e6      	bhi.n	800d958 <__mdiff+0x88>
 800d98a:	1b33      	subs	r3, r6, r4
 800d98c:	3b15      	subs	r3, #21
 800d98e:	f023 0303 	bic.w	r3, r3, #3
 800d992:	3415      	adds	r4, #21
 800d994:	3304      	adds	r3, #4
 800d996:	42a6      	cmp	r6, r4
 800d998:	bf38      	it	cc
 800d99a:	2304      	movcc	r3, #4
 800d99c:	441d      	add	r5, r3
 800d99e:	445b      	add	r3, fp
 800d9a0:	461e      	mov	r6, r3
 800d9a2:	462c      	mov	r4, r5
 800d9a4:	4544      	cmp	r4, r8
 800d9a6:	d30e      	bcc.n	800d9c6 <__mdiff+0xf6>
 800d9a8:	f108 0103 	add.w	r1, r8, #3
 800d9ac:	1b49      	subs	r1, r1, r5
 800d9ae:	f021 0103 	bic.w	r1, r1, #3
 800d9b2:	3d03      	subs	r5, #3
 800d9b4:	45a8      	cmp	r8, r5
 800d9b6:	bf38      	it	cc
 800d9b8:	2100      	movcc	r1, #0
 800d9ba:	440b      	add	r3, r1
 800d9bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d9c0:	b199      	cbz	r1, 800d9ea <__mdiff+0x11a>
 800d9c2:	6117      	str	r7, [r2, #16]
 800d9c4:	e79e      	b.n	800d904 <__mdiff+0x34>
 800d9c6:	46e6      	mov	lr, ip
 800d9c8:	f854 1b04 	ldr.w	r1, [r4], #4
 800d9cc:	fa1f fc81 	uxth.w	ip, r1
 800d9d0:	44f4      	add	ip, lr
 800d9d2:	0c08      	lsrs	r0, r1, #16
 800d9d4:	4471      	add	r1, lr
 800d9d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d9da:	b289      	uxth	r1, r1
 800d9dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d9e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d9e4:	f846 1b04 	str.w	r1, [r6], #4
 800d9e8:	e7dc      	b.n	800d9a4 <__mdiff+0xd4>
 800d9ea:	3f01      	subs	r7, #1
 800d9ec:	e7e6      	b.n	800d9bc <__mdiff+0xec>
 800d9ee:	bf00      	nop
 800d9f0:	0800ecd7 	.word	0x0800ecd7
 800d9f4:	0800ed5f 	.word	0x0800ed5f

0800d9f8 <__ulp>:
 800d9f8:	4b0e      	ldr	r3, [pc, #56]	@ (800da34 <__ulp+0x3c>)
 800d9fa:	400b      	ands	r3, r1
 800d9fc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800da00:	2b00      	cmp	r3, #0
 800da02:	dc08      	bgt.n	800da16 <__ulp+0x1e>
 800da04:	425b      	negs	r3, r3
 800da06:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800da0a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800da0e:	da04      	bge.n	800da1a <__ulp+0x22>
 800da10:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800da14:	4113      	asrs	r3, r2
 800da16:	2200      	movs	r2, #0
 800da18:	e008      	b.n	800da2c <__ulp+0x34>
 800da1a:	f1a2 0314 	sub.w	r3, r2, #20
 800da1e:	2b1e      	cmp	r3, #30
 800da20:	bfd6      	itet	le
 800da22:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800da26:	2201      	movgt	r2, #1
 800da28:	40da      	lsrle	r2, r3
 800da2a:	2300      	movs	r3, #0
 800da2c:	4619      	mov	r1, r3
 800da2e:	4610      	mov	r0, r2
 800da30:	4770      	bx	lr
 800da32:	bf00      	nop
 800da34:	7ff00000 	.word	0x7ff00000

0800da38 <__b2d>:
 800da38:	6902      	ldr	r2, [r0, #16]
 800da3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da3c:	f100 0614 	add.w	r6, r0, #20
 800da40:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800da44:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800da48:	4f1e      	ldr	r7, [pc, #120]	@ (800dac4 <__b2d+0x8c>)
 800da4a:	4620      	mov	r0, r4
 800da4c:	f7ff fd54 	bl	800d4f8 <__hi0bits>
 800da50:	4603      	mov	r3, r0
 800da52:	f1c0 0020 	rsb	r0, r0, #32
 800da56:	2b0a      	cmp	r3, #10
 800da58:	f1a2 0504 	sub.w	r5, r2, #4
 800da5c:	6008      	str	r0, [r1, #0]
 800da5e:	dc12      	bgt.n	800da86 <__b2d+0x4e>
 800da60:	42ae      	cmp	r6, r5
 800da62:	bf2c      	ite	cs
 800da64:	2200      	movcs	r2, #0
 800da66:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800da6a:	f1c3 0c0b 	rsb	ip, r3, #11
 800da6e:	3315      	adds	r3, #21
 800da70:	fa24 fe0c 	lsr.w	lr, r4, ip
 800da74:	fa04 f303 	lsl.w	r3, r4, r3
 800da78:	fa22 f20c 	lsr.w	r2, r2, ip
 800da7c:	ea4e 0107 	orr.w	r1, lr, r7
 800da80:	431a      	orrs	r2, r3
 800da82:	4610      	mov	r0, r2
 800da84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da86:	42ae      	cmp	r6, r5
 800da88:	bf36      	itet	cc
 800da8a:	f1a2 0508 	subcc.w	r5, r2, #8
 800da8e:	2200      	movcs	r2, #0
 800da90:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800da94:	3b0b      	subs	r3, #11
 800da96:	d012      	beq.n	800dabe <__b2d+0x86>
 800da98:	f1c3 0720 	rsb	r7, r3, #32
 800da9c:	fa22 f107 	lsr.w	r1, r2, r7
 800daa0:	409c      	lsls	r4, r3
 800daa2:	430c      	orrs	r4, r1
 800daa4:	42b5      	cmp	r5, r6
 800daa6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800daaa:	bf94      	ite	ls
 800daac:	2400      	movls	r4, #0
 800daae:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800dab2:	409a      	lsls	r2, r3
 800dab4:	40fc      	lsrs	r4, r7
 800dab6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800daba:	4322      	orrs	r2, r4
 800dabc:	e7e1      	b.n	800da82 <__b2d+0x4a>
 800dabe:	ea44 0107 	orr.w	r1, r4, r7
 800dac2:	e7de      	b.n	800da82 <__b2d+0x4a>
 800dac4:	3ff00000 	.word	0x3ff00000

0800dac8 <__d2b>:
 800dac8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800dacc:	2101      	movs	r1, #1
 800dace:	4690      	mov	r8, r2
 800dad0:	4699      	mov	r9, r3
 800dad2:	9e08      	ldr	r6, [sp, #32]
 800dad4:	f7ff fc1e 	bl	800d314 <_Balloc>
 800dad8:	4604      	mov	r4, r0
 800dada:	b930      	cbnz	r0, 800daea <__d2b+0x22>
 800dadc:	4602      	mov	r2, r0
 800dade:	f240 310f 	movw	r1, #783	@ 0x30f
 800dae2:	4b23      	ldr	r3, [pc, #140]	@ (800db70 <__d2b+0xa8>)
 800dae4:	4823      	ldr	r0, [pc, #140]	@ (800db74 <__d2b+0xac>)
 800dae6:	f000 fcfb 	bl	800e4e0 <__assert_func>
 800daea:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800daee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800daf2:	b10d      	cbz	r5, 800daf8 <__d2b+0x30>
 800daf4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800daf8:	9301      	str	r3, [sp, #4]
 800dafa:	f1b8 0300 	subs.w	r3, r8, #0
 800dafe:	d024      	beq.n	800db4a <__d2b+0x82>
 800db00:	4668      	mov	r0, sp
 800db02:	9300      	str	r3, [sp, #0]
 800db04:	f7ff fd17 	bl	800d536 <__lo0bits>
 800db08:	e9dd 1200 	ldrd	r1, r2, [sp]
 800db0c:	b1d8      	cbz	r0, 800db46 <__d2b+0x7e>
 800db0e:	f1c0 0320 	rsb	r3, r0, #32
 800db12:	fa02 f303 	lsl.w	r3, r2, r3
 800db16:	430b      	orrs	r3, r1
 800db18:	40c2      	lsrs	r2, r0
 800db1a:	6163      	str	r3, [r4, #20]
 800db1c:	9201      	str	r2, [sp, #4]
 800db1e:	9b01      	ldr	r3, [sp, #4]
 800db20:	2b00      	cmp	r3, #0
 800db22:	bf0c      	ite	eq
 800db24:	2201      	moveq	r2, #1
 800db26:	2202      	movne	r2, #2
 800db28:	61a3      	str	r3, [r4, #24]
 800db2a:	6122      	str	r2, [r4, #16]
 800db2c:	b1ad      	cbz	r5, 800db5a <__d2b+0x92>
 800db2e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800db32:	4405      	add	r5, r0
 800db34:	6035      	str	r5, [r6, #0]
 800db36:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800db3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db3c:	6018      	str	r0, [r3, #0]
 800db3e:	4620      	mov	r0, r4
 800db40:	b002      	add	sp, #8
 800db42:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800db46:	6161      	str	r1, [r4, #20]
 800db48:	e7e9      	b.n	800db1e <__d2b+0x56>
 800db4a:	a801      	add	r0, sp, #4
 800db4c:	f7ff fcf3 	bl	800d536 <__lo0bits>
 800db50:	9b01      	ldr	r3, [sp, #4]
 800db52:	2201      	movs	r2, #1
 800db54:	6163      	str	r3, [r4, #20]
 800db56:	3020      	adds	r0, #32
 800db58:	e7e7      	b.n	800db2a <__d2b+0x62>
 800db5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800db5e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800db62:	6030      	str	r0, [r6, #0]
 800db64:	6918      	ldr	r0, [r3, #16]
 800db66:	f7ff fcc7 	bl	800d4f8 <__hi0bits>
 800db6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800db6e:	e7e4      	b.n	800db3a <__d2b+0x72>
 800db70:	0800ecd7 	.word	0x0800ecd7
 800db74:	0800ed5f 	.word	0x0800ed5f

0800db78 <__ratio>:
 800db78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db7c:	b085      	sub	sp, #20
 800db7e:	e9cd 1000 	strd	r1, r0, [sp]
 800db82:	a902      	add	r1, sp, #8
 800db84:	f7ff ff58 	bl	800da38 <__b2d>
 800db88:	468b      	mov	fp, r1
 800db8a:	4606      	mov	r6, r0
 800db8c:	460f      	mov	r7, r1
 800db8e:	9800      	ldr	r0, [sp, #0]
 800db90:	a903      	add	r1, sp, #12
 800db92:	f7ff ff51 	bl	800da38 <__b2d>
 800db96:	460d      	mov	r5, r1
 800db98:	9b01      	ldr	r3, [sp, #4]
 800db9a:	4689      	mov	r9, r1
 800db9c:	6919      	ldr	r1, [r3, #16]
 800db9e:	9b00      	ldr	r3, [sp, #0]
 800dba0:	4604      	mov	r4, r0
 800dba2:	691b      	ldr	r3, [r3, #16]
 800dba4:	4630      	mov	r0, r6
 800dba6:	1ac9      	subs	r1, r1, r3
 800dba8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800dbac:	1a9b      	subs	r3, r3, r2
 800dbae:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	bfcd      	iteet	gt
 800dbb6:	463a      	movgt	r2, r7
 800dbb8:	462a      	movle	r2, r5
 800dbba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dbbe:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800dbc2:	bfd8      	it	le
 800dbc4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800dbc8:	464b      	mov	r3, r9
 800dbca:	4622      	mov	r2, r4
 800dbcc:	4659      	mov	r1, fp
 800dbce:	f7f7 fdb7 	bl	8005740 <__aeabi_ddiv>
 800dbd2:	b005      	add	sp, #20
 800dbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dbd8 <__copybits>:
 800dbd8:	3901      	subs	r1, #1
 800dbda:	b570      	push	{r4, r5, r6, lr}
 800dbdc:	1149      	asrs	r1, r1, #5
 800dbde:	6914      	ldr	r4, [r2, #16]
 800dbe0:	3101      	adds	r1, #1
 800dbe2:	f102 0314 	add.w	r3, r2, #20
 800dbe6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dbea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dbee:	1f05      	subs	r5, r0, #4
 800dbf0:	42a3      	cmp	r3, r4
 800dbf2:	d30c      	bcc.n	800dc0e <__copybits+0x36>
 800dbf4:	1aa3      	subs	r3, r4, r2
 800dbf6:	3b11      	subs	r3, #17
 800dbf8:	f023 0303 	bic.w	r3, r3, #3
 800dbfc:	3211      	adds	r2, #17
 800dbfe:	42a2      	cmp	r2, r4
 800dc00:	bf88      	it	hi
 800dc02:	2300      	movhi	r3, #0
 800dc04:	4418      	add	r0, r3
 800dc06:	2300      	movs	r3, #0
 800dc08:	4288      	cmp	r0, r1
 800dc0a:	d305      	bcc.n	800dc18 <__copybits+0x40>
 800dc0c:	bd70      	pop	{r4, r5, r6, pc}
 800dc0e:	f853 6b04 	ldr.w	r6, [r3], #4
 800dc12:	f845 6f04 	str.w	r6, [r5, #4]!
 800dc16:	e7eb      	b.n	800dbf0 <__copybits+0x18>
 800dc18:	f840 3b04 	str.w	r3, [r0], #4
 800dc1c:	e7f4      	b.n	800dc08 <__copybits+0x30>

0800dc1e <__any_on>:
 800dc1e:	f100 0214 	add.w	r2, r0, #20
 800dc22:	6900      	ldr	r0, [r0, #16]
 800dc24:	114b      	asrs	r3, r1, #5
 800dc26:	4298      	cmp	r0, r3
 800dc28:	b510      	push	{r4, lr}
 800dc2a:	db11      	blt.n	800dc50 <__any_on+0x32>
 800dc2c:	dd0a      	ble.n	800dc44 <__any_on+0x26>
 800dc2e:	f011 011f 	ands.w	r1, r1, #31
 800dc32:	d007      	beq.n	800dc44 <__any_on+0x26>
 800dc34:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dc38:	fa24 f001 	lsr.w	r0, r4, r1
 800dc3c:	fa00 f101 	lsl.w	r1, r0, r1
 800dc40:	428c      	cmp	r4, r1
 800dc42:	d10b      	bne.n	800dc5c <__any_on+0x3e>
 800dc44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dc48:	4293      	cmp	r3, r2
 800dc4a:	d803      	bhi.n	800dc54 <__any_on+0x36>
 800dc4c:	2000      	movs	r0, #0
 800dc4e:	bd10      	pop	{r4, pc}
 800dc50:	4603      	mov	r3, r0
 800dc52:	e7f7      	b.n	800dc44 <__any_on+0x26>
 800dc54:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dc58:	2900      	cmp	r1, #0
 800dc5a:	d0f5      	beq.n	800dc48 <__any_on+0x2a>
 800dc5c:	2001      	movs	r0, #1
 800dc5e:	e7f6      	b.n	800dc4e <__any_on+0x30>

0800dc60 <__ascii_wctomb>:
 800dc60:	4603      	mov	r3, r0
 800dc62:	4608      	mov	r0, r1
 800dc64:	b141      	cbz	r1, 800dc78 <__ascii_wctomb+0x18>
 800dc66:	2aff      	cmp	r2, #255	@ 0xff
 800dc68:	d904      	bls.n	800dc74 <__ascii_wctomb+0x14>
 800dc6a:	228a      	movs	r2, #138	@ 0x8a
 800dc6c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc70:	601a      	str	r2, [r3, #0]
 800dc72:	4770      	bx	lr
 800dc74:	2001      	movs	r0, #1
 800dc76:	700a      	strb	r2, [r1, #0]
 800dc78:	4770      	bx	lr

0800dc7a <__ssputs_r>:
 800dc7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc7e:	461f      	mov	r7, r3
 800dc80:	688e      	ldr	r6, [r1, #8]
 800dc82:	4682      	mov	sl, r0
 800dc84:	42be      	cmp	r6, r7
 800dc86:	460c      	mov	r4, r1
 800dc88:	4690      	mov	r8, r2
 800dc8a:	680b      	ldr	r3, [r1, #0]
 800dc8c:	d82d      	bhi.n	800dcea <__ssputs_r+0x70>
 800dc8e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dc92:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dc96:	d026      	beq.n	800dce6 <__ssputs_r+0x6c>
 800dc98:	6965      	ldr	r5, [r4, #20]
 800dc9a:	6909      	ldr	r1, [r1, #16]
 800dc9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dca0:	eba3 0901 	sub.w	r9, r3, r1
 800dca4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dca8:	1c7b      	adds	r3, r7, #1
 800dcaa:	444b      	add	r3, r9
 800dcac:	106d      	asrs	r5, r5, #1
 800dcae:	429d      	cmp	r5, r3
 800dcb0:	bf38      	it	cc
 800dcb2:	461d      	movcc	r5, r3
 800dcb4:	0553      	lsls	r3, r2, #21
 800dcb6:	d527      	bpl.n	800dd08 <__ssputs_r+0x8e>
 800dcb8:	4629      	mov	r1, r5
 800dcba:	f7ff fa8d 	bl	800d1d8 <_malloc_r>
 800dcbe:	4606      	mov	r6, r0
 800dcc0:	b360      	cbz	r0, 800dd1c <__ssputs_r+0xa2>
 800dcc2:	464a      	mov	r2, r9
 800dcc4:	6921      	ldr	r1, [r4, #16]
 800dcc6:	f7fe feca 	bl	800ca5e <memcpy>
 800dcca:	89a3      	ldrh	r3, [r4, #12]
 800dccc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dcd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dcd4:	81a3      	strh	r3, [r4, #12]
 800dcd6:	6126      	str	r6, [r4, #16]
 800dcd8:	444e      	add	r6, r9
 800dcda:	6026      	str	r6, [r4, #0]
 800dcdc:	463e      	mov	r6, r7
 800dcde:	6165      	str	r5, [r4, #20]
 800dce0:	eba5 0509 	sub.w	r5, r5, r9
 800dce4:	60a5      	str	r5, [r4, #8]
 800dce6:	42be      	cmp	r6, r7
 800dce8:	d900      	bls.n	800dcec <__ssputs_r+0x72>
 800dcea:	463e      	mov	r6, r7
 800dcec:	4632      	mov	r2, r6
 800dcee:	4641      	mov	r1, r8
 800dcf0:	6820      	ldr	r0, [r4, #0]
 800dcf2:	f7fe fdd9 	bl	800c8a8 <memmove>
 800dcf6:	2000      	movs	r0, #0
 800dcf8:	68a3      	ldr	r3, [r4, #8]
 800dcfa:	1b9b      	subs	r3, r3, r6
 800dcfc:	60a3      	str	r3, [r4, #8]
 800dcfe:	6823      	ldr	r3, [r4, #0]
 800dd00:	4433      	add	r3, r6
 800dd02:	6023      	str	r3, [r4, #0]
 800dd04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd08:	462a      	mov	r2, r5
 800dd0a:	f000 fc23 	bl	800e554 <_realloc_r>
 800dd0e:	4606      	mov	r6, r0
 800dd10:	2800      	cmp	r0, #0
 800dd12:	d1e0      	bne.n	800dcd6 <__ssputs_r+0x5c>
 800dd14:	4650      	mov	r0, sl
 800dd16:	6921      	ldr	r1, [r4, #16]
 800dd18:	f7fe feba 	bl	800ca90 <_free_r>
 800dd1c:	230c      	movs	r3, #12
 800dd1e:	f8ca 3000 	str.w	r3, [sl]
 800dd22:	89a3      	ldrh	r3, [r4, #12]
 800dd24:	f04f 30ff 	mov.w	r0, #4294967295
 800dd28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd2c:	81a3      	strh	r3, [r4, #12]
 800dd2e:	e7e9      	b.n	800dd04 <__ssputs_r+0x8a>

0800dd30 <_svfiprintf_r>:
 800dd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd34:	4698      	mov	r8, r3
 800dd36:	898b      	ldrh	r3, [r1, #12]
 800dd38:	4607      	mov	r7, r0
 800dd3a:	061b      	lsls	r3, r3, #24
 800dd3c:	460d      	mov	r5, r1
 800dd3e:	4614      	mov	r4, r2
 800dd40:	b09d      	sub	sp, #116	@ 0x74
 800dd42:	d510      	bpl.n	800dd66 <_svfiprintf_r+0x36>
 800dd44:	690b      	ldr	r3, [r1, #16]
 800dd46:	b973      	cbnz	r3, 800dd66 <_svfiprintf_r+0x36>
 800dd48:	2140      	movs	r1, #64	@ 0x40
 800dd4a:	f7ff fa45 	bl	800d1d8 <_malloc_r>
 800dd4e:	6028      	str	r0, [r5, #0]
 800dd50:	6128      	str	r0, [r5, #16]
 800dd52:	b930      	cbnz	r0, 800dd62 <_svfiprintf_r+0x32>
 800dd54:	230c      	movs	r3, #12
 800dd56:	603b      	str	r3, [r7, #0]
 800dd58:	f04f 30ff 	mov.w	r0, #4294967295
 800dd5c:	b01d      	add	sp, #116	@ 0x74
 800dd5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd62:	2340      	movs	r3, #64	@ 0x40
 800dd64:	616b      	str	r3, [r5, #20]
 800dd66:	2300      	movs	r3, #0
 800dd68:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd6a:	2320      	movs	r3, #32
 800dd6c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dd70:	2330      	movs	r3, #48	@ 0x30
 800dd72:	f04f 0901 	mov.w	r9, #1
 800dd76:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd7a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800df14 <_svfiprintf_r+0x1e4>
 800dd7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dd82:	4623      	mov	r3, r4
 800dd84:	469a      	mov	sl, r3
 800dd86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd8a:	b10a      	cbz	r2, 800dd90 <_svfiprintf_r+0x60>
 800dd8c:	2a25      	cmp	r2, #37	@ 0x25
 800dd8e:	d1f9      	bne.n	800dd84 <_svfiprintf_r+0x54>
 800dd90:	ebba 0b04 	subs.w	fp, sl, r4
 800dd94:	d00b      	beq.n	800ddae <_svfiprintf_r+0x7e>
 800dd96:	465b      	mov	r3, fp
 800dd98:	4622      	mov	r2, r4
 800dd9a:	4629      	mov	r1, r5
 800dd9c:	4638      	mov	r0, r7
 800dd9e:	f7ff ff6c 	bl	800dc7a <__ssputs_r>
 800dda2:	3001      	adds	r0, #1
 800dda4:	f000 80a7 	beq.w	800def6 <_svfiprintf_r+0x1c6>
 800dda8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ddaa:	445a      	add	r2, fp
 800ddac:	9209      	str	r2, [sp, #36]	@ 0x24
 800ddae:	f89a 3000 	ldrb.w	r3, [sl]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	f000 809f 	beq.w	800def6 <_svfiprintf_r+0x1c6>
 800ddb8:	2300      	movs	r3, #0
 800ddba:	f04f 32ff 	mov.w	r2, #4294967295
 800ddbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ddc2:	f10a 0a01 	add.w	sl, sl, #1
 800ddc6:	9304      	str	r3, [sp, #16]
 800ddc8:	9307      	str	r3, [sp, #28]
 800ddca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ddce:	931a      	str	r3, [sp, #104]	@ 0x68
 800ddd0:	4654      	mov	r4, sl
 800ddd2:	2205      	movs	r2, #5
 800ddd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddd8:	484e      	ldr	r0, [pc, #312]	@ (800df14 <_svfiprintf_r+0x1e4>)
 800ddda:	f000 fb73 	bl	800e4c4 <memchr>
 800ddde:	9a04      	ldr	r2, [sp, #16]
 800dde0:	b9d8      	cbnz	r0, 800de1a <_svfiprintf_r+0xea>
 800dde2:	06d0      	lsls	r0, r2, #27
 800dde4:	bf44      	itt	mi
 800dde6:	2320      	movmi	r3, #32
 800dde8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ddec:	0711      	lsls	r1, r2, #28
 800ddee:	bf44      	itt	mi
 800ddf0:	232b      	movmi	r3, #43	@ 0x2b
 800ddf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ddf6:	f89a 3000 	ldrb.w	r3, [sl]
 800ddfa:	2b2a      	cmp	r3, #42	@ 0x2a
 800ddfc:	d015      	beq.n	800de2a <_svfiprintf_r+0xfa>
 800ddfe:	4654      	mov	r4, sl
 800de00:	2000      	movs	r0, #0
 800de02:	f04f 0c0a 	mov.w	ip, #10
 800de06:	9a07      	ldr	r2, [sp, #28]
 800de08:	4621      	mov	r1, r4
 800de0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de0e:	3b30      	subs	r3, #48	@ 0x30
 800de10:	2b09      	cmp	r3, #9
 800de12:	d94b      	bls.n	800deac <_svfiprintf_r+0x17c>
 800de14:	b1b0      	cbz	r0, 800de44 <_svfiprintf_r+0x114>
 800de16:	9207      	str	r2, [sp, #28]
 800de18:	e014      	b.n	800de44 <_svfiprintf_r+0x114>
 800de1a:	eba0 0308 	sub.w	r3, r0, r8
 800de1e:	fa09 f303 	lsl.w	r3, r9, r3
 800de22:	4313      	orrs	r3, r2
 800de24:	46a2      	mov	sl, r4
 800de26:	9304      	str	r3, [sp, #16]
 800de28:	e7d2      	b.n	800ddd0 <_svfiprintf_r+0xa0>
 800de2a:	9b03      	ldr	r3, [sp, #12]
 800de2c:	1d19      	adds	r1, r3, #4
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	9103      	str	r1, [sp, #12]
 800de32:	2b00      	cmp	r3, #0
 800de34:	bfbb      	ittet	lt
 800de36:	425b      	neglt	r3, r3
 800de38:	f042 0202 	orrlt.w	r2, r2, #2
 800de3c:	9307      	strge	r3, [sp, #28]
 800de3e:	9307      	strlt	r3, [sp, #28]
 800de40:	bfb8      	it	lt
 800de42:	9204      	strlt	r2, [sp, #16]
 800de44:	7823      	ldrb	r3, [r4, #0]
 800de46:	2b2e      	cmp	r3, #46	@ 0x2e
 800de48:	d10a      	bne.n	800de60 <_svfiprintf_r+0x130>
 800de4a:	7863      	ldrb	r3, [r4, #1]
 800de4c:	2b2a      	cmp	r3, #42	@ 0x2a
 800de4e:	d132      	bne.n	800deb6 <_svfiprintf_r+0x186>
 800de50:	9b03      	ldr	r3, [sp, #12]
 800de52:	3402      	adds	r4, #2
 800de54:	1d1a      	adds	r2, r3, #4
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	9203      	str	r2, [sp, #12]
 800de5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800de5e:	9305      	str	r3, [sp, #20]
 800de60:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800df18 <_svfiprintf_r+0x1e8>
 800de64:	2203      	movs	r2, #3
 800de66:	4650      	mov	r0, sl
 800de68:	7821      	ldrb	r1, [r4, #0]
 800de6a:	f000 fb2b 	bl	800e4c4 <memchr>
 800de6e:	b138      	cbz	r0, 800de80 <_svfiprintf_r+0x150>
 800de70:	2240      	movs	r2, #64	@ 0x40
 800de72:	9b04      	ldr	r3, [sp, #16]
 800de74:	eba0 000a 	sub.w	r0, r0, sl
 800de78:	4082      	lsls	r2, r0
 800de7a:	4313      	orrs	r3, r2
 800de7c:	3401      	adds	r4, #1
 800de7e:	9304      	str	r3, [sp, #16]
 800de80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de84:	2206      	movs	r2, #6
 800de86:	4825      	ldr	r0, [pc, #148]	@ (800df1c <_svfiprintf_r+0x1ec>)
 800de88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800de8c:	f000 fb1a 	bl	800e4c4 <memchr>
 800de90:	2800      	cmp	r0, #0
 800de92:	d036      	beq.n	800df02 <_svfiprintf_r+0x1d2>
 800de94:	4b22      	ldr	r3, [pc, #136]	@ (800df20 <_svfiprintf_r+0x1f0>)
 800de96:	bb1b      	cbnz	r3, 800dee0 <_svfiprintf_r+0x1b0>
 800de98:	9b03      	ldr	r3, [sp, #12]
 800de9a:	3307      	adds	r3, #7
 800de9c:	f023 0307 	bic.w	r3, r3, #7
 800dea0:	3308      	adds	r3, #8
 800dea2:	9303      	str	r3, [sp, #12]
 800dea4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dea6:	4433      	add	r3, r6
 800dea8:	9309      	str	r3, [sp, #36]	@ 0x24
 800deaa:	e76a      	b.n	800dd82 <_svfiprintf_r+0x52>
 800deac:	460c      	mov	r4, r1
 800deae:	2001      	movs	r0, #1
 800deb0:	fb0c 3202 	mla	r2, ip, r2, r3
 800deb4:	e7a8      	b.n	800de08 <_svfiprintf_r+0xd8>
 800deb6:	2300      	movs	r3, #0
 800deb8:	f04f 0c0a 	mov.w	ip, #10
 800debc:	4619      	mov	r1, r3
 800debe:	3401      	adds	r4, #1
 800dec0:	9305      	str	r3, [sp, #20]
 800dec2:	4620      	mov	r0, r4
 800dec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dec8:	3a30      	subs	r2, #48	@ 0x30
 800deca:	2a09      	cmp	r2, #9
 800decc:	d903      	bls.n	800ded6 <_svfiprintf_r+0x1a6>
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d0c6      	beq.n	800de60 <_svfiprintf_r+0x130>
 800ded2:	9105      	str	r1, [sp, #20]
 800ded4:	e7c4      	b.n	800de60 <_svfiprintf_r+0x130>
 800ded6:	4604      	mov	r4, r0
 800ded8:	2301      	movs	r3, #1
 800deda:	fb0c 2101 	mla	r1, ip, r1, r2
 800dede:	e7f0      	b.n	800dec2 <_svfiprintf_r+0x192>
 800dee0:	ab03      	add	r3, sp, #12
 800dee2:	9300      	str	r3, [sp, #0]
 800dee4:	462a      	mov	r2, r5
 800dee6:	4638      	mov	r0, r7
 800dee8:	4b0e      	ldr	r3, [pc, #56]	@ (800df24 <_svfiprintf_r+0x1f4>)
 800deea:	a904      	add	r1, sp, #16
 800deec:	f3af 8000 	nop.w
 800def0:	1c42      	adds	r2, r0, #1
 800def2:	4606      	mov	r6, r0
 800def4:	d1d6      	bne.n	800dea4 <_svfiprintf_r+0x174>
 800def6:	89ab      	ldrh	r3, [r5, #12]
 800def8:	065b      	lsls	r3, r3, #25
 800defa:	f53f af2d 	bmi.w	800dd58 <_svfiprintf_r+0x28>
 800defe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df00:	e72c      	b.n	800dd5c <_svfiprintf_r+0x2c>
 800df02:	ab03      	add	r3, sp, #12
 800df04:	9300      	str	r3, [sp, #0]
 800df06:	462a      	mov	r2, r5
 800df08:	4638      	mov	r0, r7
 800df0a:	4b06      	ldr	r3, [pc, #24]	@ (800df24 <_svfiprintf_r+0x1f4>)
 800df0c:	a904      	add	r1, sp, #16
 800df0e:	f000 f87d 	bl	800e00c <_printf_i>
 800df12:	e7ed      	b.n	800def0 <_svfiprintf_r+0x1c0>
 800df14:	0800eeb8 	.word	0x0800eeb8
 800df18:	0800eebe 	.word	0x0800eebe
 800df1c:	0800eec2 	.word	0x0800eec2
 800df20:	00000000 	.word	0x00000000
 800df24:	0800dc7b 	.word	0x0800dc7b

0800df28 <_printf_common>:
 800df28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df2c:	4616      	mov	r6, r2
 800df2e:	4698      	mov	r8, r3
 800df30:	688a      	ldr	r2, [r1, #8]
 800df32:	690b      	ldr	r3, [r1, #16]
 800df34:	4607      	mov	r7, r0
 800df36:	4293      	cmp	r3, r2
 800df38:	bfb8      	it	lt
 800df3a:	4613      	movlt	r3, r2
 800df3c:	6033      	str	r3, [r6, #0]
 800df3e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800df42:	460c      	mov	r4, r1
 800df44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800df48:	b10a      	cbz	r2, 800df4e <_printf_common+0x26>
 800df4a:	3301      	adds	r3, #1
 800df4c:	6033      	str	r3, [r6, #0]
 800df4e:	6823      	ldr	r3, [r4, #0]
 800df50:	0699      	lsls	r1, r3, #26
 800df52:	bf42      	ittt	mi
 800df54:	6833      	ldrmi	r3, [r6, #0]
 800df56:	3302      	addmi	r3, #2
 800df58:	6033      	strmi	r3, [r6, #0]
 800df5a:	6825      	ldr	r5, [r4, #0]
 800df5c:	f015 0506 	ands.w	r5, r5, #6
 800df60:	d106      	bne.n	800df70 <_printf_common+0x48>
 800df62:	f104 0a19 	add.w	sl, r4, #25
 800df66:	68e3      	ldr	r3, [r4, #12]
 800df68:	6832      	ldr	r2, [r6, #0]
 800df6a:	1a9b      	subs	r3, r3, r2
 800df6c:	42ab      	cmp	r3, r5
 800df6e:	dc2b      	bgt.n	800dfc8 <_printf_common+0xa0>
 800df70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800df74:	6822      	ldr	r2, [r4, #0]
 800df76:	3b00      	subs	r3, #0
 800df78:	bf18      	it	ne
 800df7a:	2301      	movne	r3, #1
 800df7c:	0692      	lsls	r2, r2, #26
 800df7e:	d430      	bmi.n	800dfe2 <_printf_common+0xba>
 800df80:	4641      	mov	r1, r8
 800df82:	4638      	mov	r0, r7
 800df84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800df88:	47c8      	blx	r9
 800df8a:	3001      	adds	r0, #1
 800df8c:	d023      	beq.n	800dfd6 <_printf_common+0xae>
 800df8e:	6823      	ldr	r3, [r4, #0]
 800df90:	6922      	ldr	r2, [r4, #16]
 800df92:	f003 0306 	and.w	r3, r3, #6
 800df96:	2b04      	cmp	r3, #4
 800df98:	bf14      	ite	ne
 800df9a:	2500      	movne	r5, #0
 800df9c:	6833      	ldreq	r3, [r6, #0]
 800df9e:	f04f 0600 	mov.w	r6, #0
 800dfa2:	bf08      	it	eq
 800dfa4:	68e5      	ldreq	r5, [r4, #12]
 800dfa6:	f104 041a 	add.w	r4, r4, #26
 800dfaa:	bf08      	it	eq
 800dfac:	1aed      	subeq	r5, r5, r3
 800dfae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800dfb2:	bf08      	it	eq
 800dfb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dfb8:	4293      	cmp	r3, r2
 800dfba:	bfc4      	itt	gt
 800dfbc:	1a9b      	subgt	r3, r3, r2
 800dfbe:	18ed      	addgt	r5, r5, r3
 800dfc0:	42b5      	cmp	r5, r6
 800dfc2:	d11a      	bne.n	800dffa <_printf_common+0xd2>
 800dfc4:	2000      	movs	r0, #0
 800dfc6:	e008      	b.n	800dfda <_printf_common+0xb2>
 800dfc8:	2301      	movs	r3, #1
 800dfca:	4652      	mov	r2, sl
 800dfcc:	4641      	mov	r1, r8
 800dfce:	4638      	mov	r0, r7
 800dfd0:	47c8      	blx	r9
 800dfd2:	3001      	adds	r0, #1
 800dfd4:	d103      	bne.n	800dfde <_printf_common+0xb6>
 800dfd6:	f04f 30ff 	mov.w	r0, #4294967295
 800dfda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfde:	3501      	adds	r5, #1
 800dfe0:	e7c1      	b.n	800df66 <_printf_common+0x3e>
 800dfe2:	2030      	movs	r0, #48	@ 0x30
 800dfe4:	18e1      	adds	r1, r4, r3
 800dfe6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dfea:	1c5a      	adds	r2, r3, #1
 800dfec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dff0:	4422      	add	r2, r4
 800dff2:	3302      	adds	r3, #2
 800dff4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dff8:	e7c2      	b.n	800df80 <_printf_common+0x58>
 800dffa:	2301      	movs	r3, #1
 800dffc:	4622      	mov	r2, r4
 800dffe:	4641      	mov	r1, r8
 800e000:	4638      	mov	r0, r7
 800e002:	47c8      	blx	r9
 800e004:	3001      	adds	r0, #1
 800e006:	d0e6      	beq.n	800dfd6 <_printf_common+0xae>
 800e008:	3601      	adds	r6, #1
 800e00a:	e7d9      	b.n	800dfc0 <_printf_common+0x98>

0800e00c <_printf_i>:
 800e00c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e010:	7e0f      	ldrb	r7, [r1, #24]
 800e012:	4691      	mov	r9, r2
 800e014:	2f78      	cmp	r7, #120	@ 0x78
 800e016:	4680      	mov	r8, r0
 800e018:	460c      	mov	r4, r1
 800e01a:	469a      	mov	sl, r3
 800e01c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e01e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e022:	d807      	bhi.n	800e034 <_printf_i+0x28>
 800e024:	2f62      	cmp	r7, #98	@ 0x62
 800e026:	d80a      	bhi.n	800e03e <_printf_i+0x32>
 800e028:	2f00      	cmp	r7, #0
 800e02a:	f000 80d3 	beq.w	800e1d4 <_printf_i+0x1c8>
 800e02e:	2f58      	cmp	r7, #88	@ 0x58
 800e030:	f000 80ba 	beq.w	800e1a8 <_printf_i+0x19c>
 800e034:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e038:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e03c:	e03a      	b.n	800e0b4 <_printf_i+0xa8>
 800e03e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e042:	2b15      	cmp	r3, #21
 800e044:	d8f6      	bhi.n	800e034 <_printf_i+0x28>
 800e046:	a101      	add	r1, pc, #4	@ (adr r1, 800e04c <_printf_i+0x40>)
 800e048:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e04c:	0800e0a5 	.word	0x0800e0a5
 800e050:	0800e0b9 	.word	0x0800e0b9
 800e054:	0800e035 	.word	0x0800e035
 800e058:	0800e035 	.word	0x0800e035
 800e05c:	0800e035 	.word	0x0800e035
 800e060:	0800e035 	.word	0x0800e035
 800e064:	0800e0b9 	.word	0x0800e0b9
 800e068:	0800e035 	.word	0x0800e035
 800e06c:	0800e035 	.word	0x0800e035
 800e070:	0800e035 	.word	0x0800e035
 800e074:	0800e035 	.word	0x0800e035
 800e078:	0800e1bb 	.word	0x0800e1bb
 800e07c:	0800e0e3 	.word	0x0800e0e3
 800e080:	0800e175 	.word	0x0800e175
 800e084:	0800e035 	.word	0x0800e035
 800e088:	0800e035 	.word	0x0800e035
 800e08c:	0800e1dd 	.word	0x0800e1dd
 800e090:	0800e035 	.word	0x0800e035
 800e094:	0800e0e3 	.word	0x0800e0e3
 800e098:	0800e035 	.word	0x0800e035
 800e09c:	0800e035 	.word	0x0800e035
 800e0a0:	0800e17d 	.word	0x0800e17d
 800e0a4:	6833      	ldr	r3, [r6, #0]
 800e0a6:	1d1a      	adds	r2, r3, #4
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	6032      	str	r2, [r6, #0]
 800e0ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e0b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	e09e      	b.n	800e1f6 <_printf_i+0x1ea>
 800e0b8:	6833      	ldr	r3, [r6, #0]
 800e0ba:	6820      	ldr	r0, [r4, #0]
 800e0bc:	1d19      	adds	r1, r3, #4
 800e0be:	6031      	str	r1, [r6, #0]
 800e0c0:	0606      	lsls	r6, r0, #24
 800e0c2:	d501      	bpl.n	800e0c8 <_printf_i+0xbc>
 800e0c4:	681d      	ldr	r5, [r3, #0]
 800e0c6:	e003      	b.n	800e0d0 <_printf_i+0xc4>
 800e0c8:	0645      	lsls	r5, r0, #25
 800e0ca:	d5fb      	bpl.n	800e0c4 <_printf_i+0xb8>
 800e0cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e0d0:	2d00      	cmp	r5, #0
 800e0d2:	da03      	bge.n	800e0dc <_printf_i+0xd0>
 800e0d4:	232d      	movs	r3, #45	@ 0x2d
 800e0d6:	426d      	negs	r5, r5
 800e0d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e0dc:	230a      	movs	r3, #10
 800e0de:	4859      	ldr	r0, [pc, #356]	@ (800e244 <_printf_i+0x238>)
 800e0e0:	e011      	b.n	800e106 <_printf_i+0xfa>
 800e0e2:	6821      	ldr	r1, [r4, #0]
 800e0e4:	6833      	ldr	r3, [r6, #0]
 800e0e6:	0608      	lsls	r0, r1, #24
 800e0e8:	f853 5b04 	ldr.w	r5, [r3], #4
 800e0ec:	d402      	bmi.n	800e0f4 <_printf_i+0xe8>
 800e0ee:	0649      	lsls	r1, r1, #25
 800e0f0:	bf48      	it	mi
 800e0f2:	b2ad      	uxthmi	r5, r5
 800e0f4:	2f6f      	cmp	r7, #111	@ 0x6f
 800e0f6:	6033      	str	r3, [r6, #0]
 800e0f8:	bf14      	ite	ne
 800e0fa:	230a      	movne	r3, #10
 800e0fc:	2308      	moveq	r3, #8
 800e0fe:	4851      	ldr	r0, [pc, #324]	@ (800e244 <_printf_i+0x238>)
 800e100:	2100      	movs	r1, #0
 800e102:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e106:	6866      	ldr	r6, [r4, #4]
 800e108:	2e00      	cmp	r6, #0
 800e10a:	bfa8      	it	ge
 800e10c:	6821      	ldrge	r1, [r4, #0]
 800e10e:	60a6      	str	r6, [r4, #8]
 800e110:	bfa4      	itt	ge
 800e112:	f021 0104 	bicge.w	r1, r1, #4
 800e116:	6021      	strge	r1, [r4, #0]
 800e118:	b90d      	cbnz	r5, 800e11e <_printf_i+0x112>
 800e11a:	2e00      	cmp	r6, #0
 800e11c:	d04b      	beq.n	800e1b6 <_printf_i+0x1aa>
 800e11e:	4616      	mov	r6, r2
 800e120:	fbb5 f1f3 	udiv	r1, r5, r3
 800e124:	fb03 5711 	mls	r7, r3, r1, r5
 800e128:	5dc7      	ldrb	r7, [r0, r7]
 800e12a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e12e:	462f      	mov	r7, r5
 800e130:	42bb      	cmp	r3, r7
 800e132:	460d      	mov	r5, r1
 800e134:	d9f4      	bls.n	800e120 <_printf_i+0x114>
 800e136:	2b08      	cmp	r3, #8
 800e138:	d10b      	bne.n	800e152 <_printf_i+0x146>
 800e13a:	6823      	ldr	r3, [r4, #0]
 800e13c:	07df      	lsls	r7, r3, #31
 800e13e:	d508      	bpl.n	800e152 <_printf_i+0x146>
 800e140:	6923      	ldr	r3, [r4, #16]
 800e142:	6861      	ldr	r1, [r4, #4]
 800e144:	4299      	cmp	r1, r3
 800e146:	bfde      	ittt	le
 800e148:	2330      	movle	r3, #48	@ 0x30
 800e14a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e14e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e152:	1b92      	subs	r2, r2, r6
 800e154:	6122      	str	r2, [r4, #16]
 800e156:	464b      	mov	r3, r9
 800e158:	4621      	mov	r1, r4
 800e15a:	4640      	mov	r0, r8
 800e15c:	f8cd a000 	str.w	sl, [sp]
 800e160:	aa03      	add	r2, sp, #12
 800e162:	f7ff fee1 	bl	800df28 <_printf_common>
 800e166:	3001      	adds	r0, #1
 800e168:	d14a      	bne.n	800e200 <_printf_i+0x1f4>
 800e16a:	f04f 30ff 	mov.w	r0, #4294967295
 800e16e:	b004      	add	sp, #16
 800e170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e174:	6823      	ldr	r3, [r4, #0]
 800e176:	f043 0320 	orr.w	r3, r3, #32
 800e17a:	6023      	str	r3, [r4, #0]
 800e17c:	2778      	movs	r7, #120	@ 0x78
 800e17e:	4832      	ldr	r0, [pc, #200]	@ (800e248 <_printf_i+0x23c>)
 800e180:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e184:	6823      	ldr	r3, [r4, #0]
 800e186:	6831      	ldr	r1, [r6, #0]
 800e188:	061f      	lsls	r7, r3, #24
 800e18a:	f851 5b04 	ldr.w	r5, [r1], #4
 800e18e:	d402      	bmi.n	800e196 <_printf_i+0x18a>
 800e190:	065f      	lsls	r7, r3, #25
 800e192:	bf48      	it	mi
 800e194:	b2ad      	uxthmi	r5, r5
 800e196:	6031      	str	r1, [r6, #0]
 800e198:	07d9      	lsls	r1, r3, #31
 800e19a:	bf44      	itt	mi
 800e19c:	f043 0320 	orrmi.w	r3, r3, #32
 800e1a0:	6023      	strmi	r3, [r4, #0]
 800e1a2:	b11d      	cbz	r5, 800e1ac <_printf_i+0x1a0>
 800e1a4:	2310      	movs	r3, #16
 800e1a6:	e7ab      	b.n	800e100 <_printf_i+0xf4>
 800e1a8:	4826      	ldr	r0, [pc, #152]	@ (800e244 <_printf_i+0x238>)
 800e1aa:	e7e9      	b.n	800e180 <_printf_i+0x174>
 800e1ac:	6823      	ldr	r3, [r4, #0]
 800e1ae:	f023 0320 	bic.w	r3, r3, #32
 800e1b2:	6023      	str	r3, [r4, #0]
 800e1b4:	e7f6      	b.n	800e1a4 <_printf_i+0x198>
 800e1b6:	4616      	mov	r6, r2
 800e1b8:	e7bd      	b.n	800e136 <_printf_i+0x12a>
 800e1ba:	6833      	ldr	r3, [r6, #0]
 800e1bc:	6825      	ldr	r5, [r4, #0]
 800e1be:	1d18      	adds	r0, r3, #4
 800e1c0:	6961      	ldr	r1, [r4, #20]
 800e1c2:	6030      	str	r0, [r6, #0]
 800e1c4:	062e      	lsls	r6, r5, #24
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	d501      	bpl.n	800e1ce <_printf_i+0x1c2>
 800e1ca:	6019      	str	r1, [r3, #0]
 800e1cc:	e002      	b.n	800e1d4 <_printf_i+0x1c8>
 800e1ce:	0668      	lsls	r0, r5, #25
 800e1d0:	d5fb      	bpl.n	800e1ca <_printf_i+0x1be>
 800e1d2:	8019      	strh	r1, [r3, #0]
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	4616      	mov	r6, r2
 800e1d8:	6123      	str	r3, [r4, #16]
 800e1da:	e7bc      	b.n	800e156 <_printf_i+0x14a>
 800e1dc:	6833      	ldr	r3, [r6, #0]
 800e1de:	2100      	movs	r1, #0
 800e1e0:	1d1a      	adds	r2, r3, #4
 800e1e2:	6032      	str	r2, [r6, #0]
 800e1e4:	681e      	ldr	r6, [r3, #0]
 800e1e6:	6862      	ldr	r2, [r4, #4]
 800e1e8:	4630      	mov	r0, r6
 800e1ea:	f000 f96b 	bl	800e4c4 <memchr>
 800e1ee:	b108      	cbz	r0, 800e1f4 <_printf_i+0x1e8>
 800e1f0:	1b80      	subs	r0, r0, r6
 800e1f2:	6060      	str	r0, [r4, #4]
 800e1f4:	6863      	ldr	r3, [r4, #4]
 800e1f6:	6123      	str	r3, [r4, #16]
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e1fe:	e7aa      	b.n	800e156 <_printf_i+0x14a>
 800e200:	4632      	mov	r2, r6
 800e202:	4649      	mov	r1, r9
 800e204:	4640      	mov	r0, r8
 800e206:	6923      	ldr	r3, [r4, #16]
 800e208:	47d0      	blx	sl
 800e20a:	3001      	adds	r0, #1
 800e20c:	d0ad      	beq.n	800e16a <_printf_i+0x15e>
 800e20e:	6823      	ldr	r3, [r4, #0]
 800e210:	079b      	lsls	r3, r3, #30
 800e212:	d413      	bmi.n	800e23c <_printf_i+0x230>
 800e214:	68e0      	ldr	r0, [r4, #12]
 800e216:	9b03      	ldr	r3, [sp, #12]
 800e218:	4298      	cmp	r0, r3
 800e21a:	bfb8      	it	lt
 800e21c:	4618      	movlt	r0, r3
 800e21e:	e7a6      	b.n	800e16e <_printf_i+0x162>
 800e220:	2301      	movs	r3, #1
 800e222:	4632      	mov	r2, r6
 800e224:	4649      	mov	r1, r9
 800e226:	4640      	mov	r0, r8
 800e228:	47d0      	blx	sl
 800e22a:	3001      	adds	r0, #1
 800e22c:	d09d      	beq.n	800e16a <_printf_i+0x15e>
 800e22e:	3501      	adds	r5, #1
 800e230:	68e3      	ldr	r3, [r4, #12]
 800e232:	9903      	ldr	r1, [sp, #12]
 800e234:	1a5b      	subs	r3, r3, r1
 800e236:	42ab      	cmp	r3, r5
 800e238:	dcf2      	bgt.n	800e220 <_printf_i+0x214>
 800e23a:	e7eb      	b.n	800e214 <_printf_i+0x208>
 800e23c:	2500      	movs	r5, #0
 800e23e:	f104 0619 	add.w	r6, r4, #25
 800e242:	e7f5      	b.n	800e230 <_printf_i+0x224>
 800e244:	0800eec9 	.word	0x0800eec9
 800e248:	0800eeda 	.word	0x0800eeda

0800e24c <__sflush_r>:
 800e24c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e252:	0716      	lsls	r6, r2, #28
 800e254:	4605      	mov	r5, r0
 800e256:	460c      	mov	r4, r1
 800e258:	d454      	bmi.n	800e304 <__sflush_r+0xb8>
 800e25a:	684b      	ldr	r3, [r1, #4]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	dc02      	bgt.n	800e266 <__sflush_r+0x1a>
 800e260:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e262:	2b00      	cmp	r3, #0
 800e264:	dd48      	ble.n	800e2f8 <__sflush_r+0xac>
 800e266:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e268:	2e00      	cmp	r6, #0
 800e26a:	d045      	beq.n	800e2f8 <__sflush_r+0xac>
 800e26c:	2300      	movs	r3, #0
 800e26e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e272:	682f      	ldr	r7, [r5, #0]
 800e274:	6a21      	ldr	r1, [r4, #32]
 800e276:	602b      	str	r3, [r5, #0]
 800e278:	d030      	beq.n	800e2dc <__sflush_r+0x90>
 800e27a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e27c:	89a3      	ldrh	r3, [r4, #12]
 800e27e:	0759      	lsls	r1, r3, #29
 800e280:	d505      	bpl.n	800e28e <__sflush_r+0x42>
 800e282:	6863      	ldr	r3, [r4, #4]
 800e284:	1ad2      	subs	r2, r2, r3
 800e286:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e288:	b10b      	cbz	r3, 800e28e <__sflush_r+0x42>
 800e28a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e28c:	1ad2      	subs	r2, r2, r3
 800e28e:	2300      	movs	r3, #0
 800e290:	4628      	mov	r0, r5
 800e292:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e294:	6a21      	ldr	r1, [r4, #32]
 800e296:	47b0      	blx	r6
 800e298:	1c43      	adds	r3, r0, #1
 800e29a:	89a3      	ldrh	r3, [r4, #12]
 800e29c:	d106      	bne.n	800e2ac <__sflush_r+0x60>
 800e29e:	6829      	ldr	r1, [r5, #0]
 800e2a0:	291d      	cmp	r1, #29
 800e2a2:	d82b      	bhi.n	800e2fc <__sflush_r+0xb0>
 800e2a4:	4a28      	ldr	r2, [pc, #160]	@ (800e348 <__sflush_r+0xfc>)
 800e2a6:	410a      	asrs	r2, r1
 800e2a8:	07d6      	lsls	r6, r2, #31
 800e2aa:	d427      	bmi.n	800e2fc <__sflush_r+0xb0>
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	6062      	str	r2, [r4, #4]
 800e2b0:	6922      	ldr	r2, [r4, #16]
 800e2b2:	04d9      	lsls	r1, r3, #19
 800e2b4:	6022      	str	r2, [r4, #0]
 800e2b6:	d504      	bpl.n	800e2c2 <__sflush_r+0x76>
 800e2b8:	1c42      	adds	r2, r0, #1
 800e2ba:	d101      	bne.n	800e2c0 <__sflush_r+0x74>
 800e2bc:	682b      	ldr	r3, [r5, #0]
 800e2be:	b903      	cbnz	r3, 800e2c2 <__sflush_r+0x76>
 800e2c0:	6560      	str	r0, [r4, #84]	@ 0x54
 800e2c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e2c4:	602f      	str	r7, [r5, #0]
 800e2c6:	b1b9      	cbz	r1, 800e2f8 <__sflush_r+0xac>
 800e2c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e2cc:	4299      	cmp	r1, r3
 800e2ce:	d002      	beq.n	800e2d6 <__sflush_r+0x8a>
 800e2d0:	4628      	mov	r0, r5
 800e2d2:	f7fe fbdd 	bl	800ca90 <_free_r>
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800e2da:	e00d      	b.n	800e2f8 <__sflush_r+0xac>
 800e2dc:	2301      	movs	r3, #1
 800e2de:	4628      	mov	r0, r5
 800e2e0:	47b0      	blx	r6
 800e2e2:	4602      	mov	r2, r0
 800e2e4:	1c50      	adds	r0, r2, #1
 800e2e6:	d1c9      	bne.n	800e27c <__sflush_r+0x30>
 800e2e8:	682b      	ldr	r3, [r5, #0]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d0c6      	beq.n	800e27c <__sflush_r+0x30>
 800e2ee:	2b1d      	cmp	r3, #29
 800e2f0:	d001      	beq.n	800e2f6 <__sflush_r+0xaa>
 800e2f2:	2b16      	cmp	r3, #22
 800e2f4:	d11d      	bne.n	800e332 <__sflush_r+0xe6>
 800e2f6:	602f      	str	r7, [r5, #0]
 800e2f8:	2000      	movs	r0, #0
 800e2fa:	e021      	b.n	800e340 <__sflush_r+0xf4>
 800e2fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e300:	b21b      	sxth	r3, r3
 800e302:	e01a      	b.n	800e33a <__sflush_r+0xee>
 800e304:	690f      	ldr	r7, [r1, #16]
 800e306:	2f00      	cmp	r7, #0
 800e308:	d0f6      	beq.n	800e2f8 <__sflush_r+0xac>
 800e30a:	0793      	lsls	r3, r2, #30
 800e30c:	bf18      	it	ne
 800e30e:	2300      	movne	r3, #0
 800e310:	680e      	ldr	r6, [r1, #0]
 800e312:	bf08      	it	eq
 800e314:	694b      	ldreq	r3, [r1, #20]
 800e316:	1bf6      	subs	r6, r6, r7
 800e318:	600f      	str	r7, [r1, #0]
 800e31a:	608b      	str	r3, [r1, #8]
 800e31c:	2e00      	cmp	r6, #0
 800e31e:	ddeb      	ble.n	800e2f8 <__sflush_r+0xac>
 800e320:	4633      	mov	r3, r6
 800e322:	463a      	mov	r2, r7
 800e324:	4628      	mov	r0, r5
 800e326:	6a21      	ldr	r1, [r4, #32]
 800e328:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800e32c:	47e0      	blx	ip
 800e32e:	2800      	cmp	r0, #0
 800e330:	dc07      	bgt.n	800e342 <__sflush_r+0xf6>
 800e332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e33a:	f04f 30ff 	mov.w	r0, #4294967295
 800e33e:	81a3      	strh	r3, [r4, #12]
 800e340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e342:	4407      	add	r7, r0
 800e344:	1a36      	subs	r6, r6, r0
 800e346:	e7e9      	b.n	800e31c <__sflush_r+0xd0>
 800e348:	dfbffffe 	.word	0xdfbffffe

0800e34c <_fflush_r>:
 800e34c:	b538      	push	{r3, r4, r5, lr}
 800e34e:	690b      	ldr	r3, [r1, #16]
 800e350:	4605      	mov	r5, r0
 800e352:	460c      	mov	r4, r1
 800e354:	b913      	cbnz	r3, 800e35c <_fflush_r+0x10>
 800e356:	2500      	movs	r5, #0
 800e358:	4628      	mov	r0, r5
 800e35a:	bd38      	pop	{r3, r4, r5, pc}
 800e35c:	b118      	cbz	r0, 800e366 <_fflush_r+0x1a>
 800e35e:	6a03      	ldr	r3, [r0, #32]
 800e360:	b90b      	cbnz	r3, 800e366 <_fflush_r+0x1a>
 800e362:	f7fe f8fd 	bl	800c560 <__sinit>
 800e366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d0f3      	beq.n	800e356 <_fflush_r+0xa>
 800e36e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e370:	07d0      	lsls	r0, r2, #31
 800e372:	d404      	bmi.n	800e37e <_fflush_r+0x32>
 800e374:	0599      	lsls	r1, r3, #22
 800e376:	d402      	bmi.n	800e37e <_fflush_r+0x32>
 800e378:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e37a:	f7fe fb66 	bl	800ca4a <__retarget_lock_acquire_recursive>
 800e37e:	4628      	mov	r0, r5
 800e380:	4621      	mov	r1, r4
 800e382:	f7ff ff63 	bl	800e24c <__sflush_r>
 800e386:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e388:	4605      	mov	r5, r0
 800e38a:	07da      	lsls	r2, r3, #31
 800e38c:	d4e4      	bmi.n	800e358 <_fflush_r+0xc>
 800e38e:	89a3      	ldrh	r3, [r4, #12]
 800e390:	059b      	lsls	r3, r3, #22
 800e392:	d4e1      	bmi.n	800e358 <_fflush_r+0xc>
 800e394:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e396:	f7fe fb59 	bl	800ca4c <__retarget_lock_release_recursive>
 800e39a:	e7dd      	b.n	800e358 <_fflush_r+0xc>

0800e39c <__swhatbuf_r>:
 800e39c:	b570      	push	{r4, r5, r6, lr}
 800e39e:	460c      	mov	r4, r1
 800e3a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3a4:	4615      	mov	r5, r2
 800e3a6:	2900      	cmp	r1, #0
 800e3a8:	461e      	mov	r6, r3
 800e3aa:	b096      	sub	sp, #88	@ 0x58
 800e3ac:	da0c      	bge.n	800e3c8 <__swhatbuf_r+0x2c>
 800e3ae:	89a3      	ldrh	r3, [r4, #12]
 800e3b0:	2100      	movs	r1, #0
 800e3b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e3b6:	bf14      	ite	ne
 800e3b8:	2340      	movne	r3, #64	@ 0x40
 800e3ba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e3be:	2000      	movs	r0, #0
 800e3c0:	6031      	str	r1, [r6, #0]
 800e3c2:	602b      	str	r3, [r5, #0]
 800e3c4:	b016      	add	sp, #88	@ 0x58
 800e3c6:	bd70      	pop	{r4, r5, r6, pc}
 800e3c8:	466a      	mov	r2, sp
 800e3ca:	f000 f849 	bl	800e460 <_fstat_r>
 800e3ce:	2800      	cmp	r0, #0
 800e3d0:	dbed      	blt.n	800e3ae <__swhatbuf_r+0x12>
 800e3d2:	9901      	ldr	r1, [sp, #4]
 800e3d4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e3d8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e3dc:	4259      	negs	r1, r3
 800e3de:	4159      	adcs	r1, r3
 800e3e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e3e4:	e7eb      	b.n	800e3be <__swhatbuf_r+0x22>

0800e3e6 <__smakebuf_r>:
 800e3e6:	898b      	ldrh	r3, [r1, #12]
 800e3e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e3ea:	079d      	lsls	r5, r3, #30
 800e3ec:	4606      	mov	r6, r0
 800e3ee:	460c      	mov	r4, r1
 800e3f0:	d507      	bpl.n	800e402 <__smakebuf_r+0x1c>
 800e3f2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e3f6:	6023      	str	r3, [r4, #0]
 800e3f8:	6123      	str	r3, [r4, #16]
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	6163      	str	r3, [r4, #20]
 800e3fe:	b003      	add	sp, #12
 800e400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e402:	466a      	mov	r2, sp
 800e404:	ab01      	add	r3, sp, #4
 800e406:	f7ff ffc9 	bl	800e39c <__swhatbuf_r>
 800e40a:	9f00      	ldr	r7, [sp, #0]
 800e40c:	4605      	mov	r5, r0
 800e40e:	4639      	mov	r1, r7
 800e410:	4630      	mov	r0, r6
 800e412:	f7fe fee1 	bl	800d1d8 <_malloc_r>
 800e416:	b948      	cbnz	r0, 800e42c <__smakebuf_r+0x46>
 800e418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e41c:	059a      	lsls	r2, r3, #22
 800e41e:	d4ee      	bmi.n	800e3fe <__smakebuf_r+0x18>
 800e420:	f023 0303 	bic.w	r3, r3, #3
 800e424:	f043 0302 	orr.w	r3, r3, #2
 800e428:	81a3      	strh	r3, [r4, #12]
 800e42a:	e7e2      	b.n	800e3f2 <__smakebuf_r+0xc>
 800e42c:	89a3      	ldrh	r3, [r4, #12]
 800e42e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e436:	81a3      	strh	r3, [r4, #12]
 800e438:	9b01      	ldr	r3, [sp, #4]
 800e43a:	6020      	str	r0, [r4, #0]
 800e43c:	b15b      	cbz	r3, 800e456 <__smakebuf_r+0x70>
 800e43e:	4630      	mov	r0, r6
 800e440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e444:	f000 f81e 	bl	800e484 <_isatty_r>
 800e448:	b128      	cbz	r0, 800e456 <__smakebuf_r+0x70>
 800e44a:	89a3      	ldrh	r3, [r4, #12]
 800e44c:	f023 0303 	bic.w	r3, r3, #3
 800e450:	f043 0301 	orr.w	r3, r3, #1
 800e454:	81a3      	strh	r3, [r4, #12]
 800e456:	89a3      	ldrh	r3, [r4, #12]
 800e458:	431d      	orrs	r5, r3
 800e45a:	81a5      	strh	r5, [r4, #12]
 800e45c:	e7cf      	b.n	800e3fe <__smakebuf_r+0x18>
	...

0800e460 <_fstat_r>:
 800e460:	b538      	push	{r3, r4, r5, lr}
 800e462:	2300      	movs	r3, #0
 800e464:	4d06      	ldr	r5, [pc, #24]	@ (800e480 <_fstat_r+0x20>)
 800e466:	4604      	mov	r4, r0
 800e468:	4608      	mov	r0, r1
 800e46a:	4611      	mov	r1, r2
 800e46c:	602b      	str	r3, [r5, #0]
 800e46e:	f7f7 fd6a 	bl	8005f46 <_fstat>
 800e472:	1c43      	adds	r3, r0, #1
 800e474:	d102      	bne.n	800e47c <_fstat_r+0x1c>
 800e476:	682b      	ldr	r3, [r5, #0]
 800e478:	b103      	cbz	r3, 800e47c <_fstat_r+0x1c>
 800e47a:	6023      	str	r3, [r4, #0]
 800e47c:	bd38      	pop	{r3, r4, r5, pc}
 800e47e:	bf00      	nop
 800e480:	20003544 	.word	0x20003544

0800e484 <_isatty_r>:
 800e484:	b538      	push	{r3, r4, r5, lr}
 800e486:	2300      	movs	r3, #0
 800e488:	4d05      	ldr	r5, [pc, #20]	@ (800e4a0 <_isatty_r+0x1c>)
 800e48a:	4604      	mov	r4, r0
 800e48c:	4608      	mov	r0, r1
 800e48e:	602b      	str	r3, [r5, #0]
 800e490:	f7f7 fd5e 	bl	8005f50 <_isatty>
 800e494:	1c43      	adds	r3, r0, #1
 800e496:	d102      	bne.n	800e49e <_isatty_r+0x1a>
 800e498:	682b      	ldr	r3, [r5, #0]
 800e49a:	b103      	cbz	r3, 800e49e <_isatty_r+0x1a>
 800e49c:	6023      	str	r3, [r4, #0]
 800e49e:	bd38      	pop	{r3, r4, r5, pc}
 800e4a0:	20003544 	.word	0x20003544

0800e4a4 <_sbrk_r>:
 800e4a4:	b538      	push	{r3, r4, r5, lr}
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	4d05      	ldr	r5, [pc, #20]	@ (800e4c0 <_sbrk_r+0x1c>)
 800e4aa:	4604      	mov	r4, r0
 800e4ac:	4608      	mov	r0, r1
 800e4ae:	602b      	str	r3, [r5, #0]
 800e4b0:	f7f7 fd52 	bl	8005f58 <_sbrk>
 800e4b4:	1c43      	adds	r3, r0, #1
 800e4b6:	d102      	bne.n	800e4be <_sbrk_r+0x1a>
 800e4b8:	682b      	ldr	r3, [r5, #0]
 800e4ba:	b103      	cbz	r3, 800e4be <_sbrk_r+0x1a>
 800e4bc:	6023      	str	r3, [r4, #0]
 800e4be:	bd38      	pop	{r3, r4, r5, pc}
 800e4c0:	20003544 	.word	0x20003544

0800e4c4 <memchr>:
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	b510      	push	{r4, lr}
 800e4c8:	b2c9      	uxtb	r1, r1
 800e4ca:	4402      	add	r2, r0
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	d101      	bne.n	800e4d6 <memchr+0x12>
 800e4d2:	2000      	movs	r0, #0
 800e4d4:	e003      	b.n	800e4de <memchr+0x1a>
 800e4d6:	7804      	ldrb	r4, [r0, #0]
 800e4d8:	3301      	adds	r3, #1
 800e4da:	428c      	cmp	r4, r1
 800e4dc:	d1f6      	bne.n	800e4cc <memchr+0x8>
 800e4de:	bd10      	pop	{r4, pc}

0800e4e0 <__assert_func>:
 800e4e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e4e2:	4614      	mov	r4, r2
 800e4e4:	461a      	mov	r2, r3
 800e4e6:	4b09      	ldr	r3, [pc, #36]	@ (800e50c <__assert_func+0x2c>)
 800e4e8:	4605      	mov	r5, r0
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	68d8      	ldr	r0, [r3, #12]
 800e4ee:	b954      	cbnz	r4, 800e506 <__assert_func+0x26>
 800e4f0:	4b07      	ldr	r3, [pc, #28]	@ (800e510 <__assert_func+0x30>)
 800e4f2:	461c      	mov	r4, r3
 800e4f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e4f8:	9100      	str	r1, [sp, #0]
 800e4fa:	462b      	mov	r3, r5
 800e4fc:	4905      	ldr	r1, [pc, #20]	@ (800e514 <__assert_func+0x34>)
 800e4fe:	f000 f857 	bl	800e5b0 <fiprintf>
 800e502:	f000 f867 	bl	800e5d4 <abort>
 800e506:	4b04      	ldr	r3, [pc, #16]	@ (800e518 <__assert_func+0x38>)
 800e508:	e7f4      	b.n	800e4f4 <__assert_func+0x14>
 800e50a:	bf00      	nop
 800e50c:	2000030c 	.word	0x2000030c
 800e510:	0800ea24 	.word	0x0800ea24
 800e514:	0800eef8 	.word	0x0800eef8
 800e518:	0800eeeb 	.word	0x0800eeeb

0800e51c <_calloc_r>:
 800e51c:	b570      	push	{r4, r5, r6, lr}
 800e51e:	fba1 5402 	umull	r5, r4, r1, r2
 800e522:	b93c      	cbnz	r4, 800e534 <_calloc_r+0x18>
 800e524:	4629      	mov	r1, r5
 800e526:	f7fe fe57 	bl	800d1d8 <_malloc_r>
 800e52a:	4606      	mov	r6, r0
 800e52c:	b928      	cbnz	r0, 800e53a <_calloc_r+0x1e>
 800e52e:	2600      	movs	r6, #0
 800e530:	4630      	mov	r0, r6
 800e532:	bd70      	pop	{r4, r5, r6, pc}
 800e534:	220c      	movs	r2, #12
 800e536:	6002      	str	r2, [r0, #0]
 800e538:	e7f9      	b.n	800e52e <_calloc_r+0x12>
 800e53a:	462a      	mov	r2, r5
 800e53c:	4621      	mov	r1, r4
 800e53e:	f7fe f9cd 	bl	800c8dc <memset>
 800e542:	e7f5      	b.n	800e530 <_calloc_r+0x14>

0800e544 <malloc>:
 800e544:	4b02      	ldr	r3, [pc, #8]	@ (800e550 <malloc+0xc>)
 800e546:	4601      	mov	r1, r0
 800e548:	6818      	ldr	r0, [r3, #0]
 800e54a:	f7fe be45 	b.w	800d1d8 <_malloc_r>
 800e54e:	bf00      	nop
 800e550:	2000030c 	.word	0x2000030c

0800e554 <_realloc_r>:
 800e554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e558:	4680      	mov	r8, r0
 800e55a:	4615      	mov	r5, r2
 800e55c:	460c      	mov	r4, r1
 800e55e:	b921      	cbnz	r1, 800e56a <_realloc_r+0x16>
 800e560:	4611      	mov	r1, r2
 800e562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e566:	f7fe be37 	b.w	800d1d8 <_malloc_r>
 800e56a:	b92a      	cbnz	r2, 800e578 <_realloc_r+0x24>
 800e56c:	f7fe fa90 	bl	800ca90 <_free_r>
 800e570:	2400      	movs	r4, #0
 800e572:	4620      	mov	r0, r4
 800e574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e578:	f000 f833 	bl	800e5e2 <_malloc_usable_size_r>
 800e57c:	4285      	cmp	r5, r0
 800e57e:	4606      	mov	r6, r0
 800e580:	d802      	bhi.n	800e588 <_realloc_r+0x34>
 800e582:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e586:	d8f4      	bhi.n	800e572 <_realloc_r+0x1e>
 800e588:	4629      	mov	r1, r5
 800e58a:	4640      	mov	r0, r8
 800e58c:	f7fe fe24 	bl	800d1d8 <_malloc_r>
 800e590:	4607      	mov	r7, r0
 800e592:	2800      	cmp	r0, #0
 800e594:	d0ec      	beq.n	800e570 <_realloc_r+0x1c>
 800e596:	42b5      	cmp	r5, r6
 800e598:	462a      	mov	r2, r5
 800e59a:	4621      	mov	r1, r4
 800e59c:	bf28      	it	cs
 800e59e:	4632      	movcs	r2, r6
 800e5a0:	f7fe fa5d 	bl	800ca5e <memcpy>
 800e5a4:	4621      	mov	r1, r4
 800e5a6:	4640      	mov	r0, r8
 800e5a8:	f7fe fa72 	bl	800ca90 <_free_r>
 800e5ac:	463c      	mov	r4, r7
 800e5ae:	e7e0      	b.n	800e572 <_realloc_r+0x1e>

0800e5b0 <fiprintf>:
 800e5b0:	b40e      	push	{r1, r2, r3}
 800e5b2:	b503      	push	{r0, r1, lr}
 800e5b4:	4601      	mov	r1, r0
 800e5b6:	ab03      	add	r3, sp, #12
 800e5b8:	4805      	ldr	r0, [pc, #20]	@ (800e5d0 <fiprintf+0x20>)
 800e5ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5be:	6800      	ldr	r0, [r0, #0]
 800e5c0:	9301      	str	r3, [sp, #4]
 800e5c2:	f000 f83d 	bl	800e640 <_vfiprintf_r>
 800e5c6:	b002      	add	sp, #8
 800e5c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5cc:	b003      	add	sp, #12
 800e5ce:	4770      	bx	lr
 800e5d0:	2000030c 	.word	0x2000030c

0800e5d4 <abort>:
 800e5d4:	2006      	movs	r0, #6
 800e5d6:	b508      	push	{r3, lr}
 800e5d8:	f000 f972 	bl	800e8c0 <raise>
 800e5dc:	2001      	movs	r0, #1
 800e5de:	f7f7 fc8d 	bl	8005efc <_exit>

0800e5e2 <_malloc_usable_size_r>:
 800e5e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5e6:	1f18      	subs	r0, r3, #4
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	bfbc      	itt	lt
 800e5ec:	580b      	ldrlt	r3, [r1, r0]
 800e5ee:	18c0      	addlt	r0, r0, r3
 800e5f0:	4770      	bx	lr

0800e5f2 <__sfputc_r>:
 800e5f2:	6893      	ldr	r3, [r2, #8]
 800e5f4:	b410      	push	{r4}
 800e5f6:	3b01      	subs	r3, #1
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	6093      	str	r3, [r2, #8]
 800e5fc:	da07      	bge.n	800e60e <__sfputc_r+0x1c>
 800e5fe:	6994      	ldr	r4, [r2, #24]
 800e600:	42a3      	cmp	r3, r4
 800e602:	db01      	blt.n	800e608 <__sfputc_r+0x16>
 800e604:	290a      	cmp	r1, #10
 800e606:	d102      	bne.n	800e60e <__sfputc_r+0x1c>
 800e608:	bc10      	pop	{r4}
 800e60a:	f7fe b8b9 	b.w	800c780 <__swbuf_r>
 800e60e:	6813      	ldr	r3, [r2, #0]
 800e610:	1c58      	adds	r0, r3, #1
 800e612:	6010      	str	r0, [r2, #0]
 800e614:	7019      	strb	r1, [r3, #0]
 800e616:	4608      	mov	r0, r1
 800e618:	bc10      	pop	{r4}
 800e61a:	4770      	bx	lr

0800e61c <__sfputs_r>:
 800e61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e61e:	4606      	mov	r6, r0
 800e620:	460f      	mov	r7, r1
 800e622:	4614      	mov	r4, r2
 800e624:	18d5      	adds	r5, r2, r3
 800e626:	42ac      	cmp	r4, r5
 800e628:	d101      	bne.n	800e62e <__sfputs_r+0x12>
 800e62a:	2000      	movs	r0, #0
 800e62c:	e007      	b.n	800e63e <__sfputs_r+0x22>
 800e62e:	463a      	mov	r2, r7
 800e630:	4630      	mov	r0, r6
 800e632:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e636:	f7ff ffdc 	bl	800e5f2 <__sfputc_r>
 800e63a:	1c43      	adds	r3, r0, #1
 800e63c:	d1f3      	bne.n	800e626 <__sfputs_r+0xa>
 800e63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e640 <_vfiprintf_r>:
 800e640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e644:	460d      	mov	r5, r1
 800e646:	4614      	mov	r4, r2
 800e648:	4698      	mov	r8, r3
 800e64a:	4606      	mov	r6, r0
 800e64c:	b09d      	sub	sp, #116	@ 0x74
 800e64e:	b118      	cbz	r0, 800e658 <_vfiprintf_r+0x18>
 800e650:	6a03      	ldr	r3, [r0, #32]
 800e652:	b90b      	cbnz	r3, 800e658 <_vfiprintf_r+0x18>
 800e654:	f7fd ff84 	bl	800c560 <__sinit>
 800e658:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e65a:	07d9      	lsls	r1, r3, #31
 800e65c:	d405      	bmi.n	800e66a <_vfiprintf_r+0x2a>
 800e65e:	89ab      	ldrh	r3, [r5, #12]
 800e660:	059a      	lsls	r2, r3, #22
 800e662:	d402      	bmi.n	800e66a <_vfiprintf_r+0x2a>
 800e664:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e666:	f7fe f9f0 	bl	800ca4a <__retarget_lock_acquire_recursive>
 800e66a:	89ab      	ldrh	r3, [r5, #12]
 800e66c:	071b      	lsls	r3, r3, #28
 800e66e:	d501      	bpl.n	800e674 <_vfiprintf_r+0x34>
 800e670:	692b      	ldr	r3, [r5, #16]
 800e672:	b99b      	cbnz	r3, 800e69c <_vfiprintf_r+0x5c>
 800e674:	4629      	mov	r1, r5
 800e676:	4630      	mov	r0, r6
 800e678:	f7fe f8c0 	bl	800c7fc <__swsetup_r>
 800e67c:	b170      	cbz	r0, 800e69c <_vfiprintf_r+0x5c>
 800e67e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e680:	07dc      	lsls	r4, r3, #31
 800e682:	d504      	bpl.n	800e68e <_vfiprintf_r+0x4e>
 800e684:	f04f 30ff 	mov.w	r0, #4294967295
 800e688:	b01d      	add	sp, #116	@ 0x74
 800e68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e68e:	89ab      	ldrh	r3, [r5, #12]
 800e690:	0598      	lsls	r0, r3, #22
 800e692:	d4f7      	bmi.n	800e684 <_vfiprintf_r+0x44>
 800e694:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e696:	f7fe f9d9 	bl	800ca4c <__retarget_lock_release_recursive>
 800e69a:	e7f3      	b.n	800e684 <_vfiprintf_r+0x44>
 800e69c:	2300      	movs	r3, #0
 800e69e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e6a0:	2320      	movs	r3, #32
 800e6a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e6a6:	2330      	movs	r3, #48	@ 0x30
 800e6a8:	f04f 0901 	mov.w	r9, #1
 800e6ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800e6b0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800e85c <_vfiprintf_r+0x21c>
 800e6b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e6b8:	4623      	mov	r3, r4
 800e6ba:	469a      	mov	sl, r3
 800e6bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6c0:	b10a      	cbz	r2, 800e6c6 <_vfiprintf_r+0x86>
 800e6c2:	2a25      	cmp	r2, #37	@ 0x25
 800e6c4:	d1f9      	bne.n	800e6ba <_vfiprintf_r+0x7a>
 800e6c6:	ebba 0b04 	subs.w	fp, sl, r4
 800e6ca:	d00b      	beq.n	800e6e4 <_vfiprintf_r+0xa4>
 800e6cc:	465b      	mov	r3, fp
 800e6ce:	4622      	mov	r2, r4
 800e6d0:	4629      	mov	r1, r5
 800e6d2:	4630      	mov	r0, r6
 800e6d4:	f7ff ffa2 	bl	800e61c <__sfputs_r>
 800e6d8:	3001      	adds	r0, #1
 800e6da:	f000 80a7 	beq.w	800e82c <_vfiprintf_r+0x1ec>
 800e6de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e6e0:	445a      	add	r2, fp
 800e6e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e6e4:	f89a 3000 	ldrb.w	r3, [sl]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	f000 809f 	beq.w	800e82c <_vfiprintf_r+0x1ec>
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	f04f 32ff 	mov.w	r2, #4294967295
 800e6f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e6f8:	f10a 0a01 	add.w	sl, sl, #1
 800e6fc:	9304      	str	r3, [sp, #16]
 800e6fe:	9307      	str	r3, [sp, #28]
 800e700:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e704:	931a      	str	r3, [sp, #104]	@ 0x68
 800e706:	4654      	mov	r4, sl
 800e708:	2205      	movs	r2, #5
 800e70a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e70e:	4853      	ldr	r0, [pc, #332]	@ (800e85c <_vfiprintf_r+0x21c>)
 800e710:	f7ff fed8 	bl	800e4c4 <memchr>
 800e714:	9a04      	ldr	r2, [sp, #16]
 800e716:	b9d8      	cbnz	r0, 800e750 <_vfiprintf_r+0x110>
 800e718:	06d1      	lsls	r1, r2, #27
 800e71a:	bf44      	itt	mi
 800e71c:	2320      	movmi	r3, #32
 800e71e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e722:	0713      	lsls	r3, r2, #28
 800e724:	bf44      	itt	mi
 800e726:	232b      	movmi	r3, #43	@ 0x2b
 800e728:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e72c:	f89a 3000 	ldrb.w	r3, [sl]
 800e730:	2b2a      	cmp	r3, #42	@ 0x2a
 800e732:	d015      	beq.n	800e760 <_vfiprintf_r+0x120>
 800e734:	4654      	mov	r4, sl
 800e736:	2000      	movs	r0, #0
 800e738:	f04f 0c0a 	mov.w	ip, #10
 800e73c:	9a07      	ldr	r2, [sp, #28]
 800e73e:	4621      	mov	r1, r4
 800e740:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e744:	3b30      	subs	r3, #48	@ 0x30
 800e746:	2b09      	cmp	r3, #9
 800e748:	d94b      	bls.n	800e7e2 <_vfiprintf_r+0x1a2>
 800e74a:	b1b0      	cbz	r0, 800e77a <_vfiprintf_r+0x13a>
 800e74c:	9207      	str	r2, [sp, #28]
 800e74e:	e014      	b.n	800e77a <_vfiprintf_r+0x13a>
 800e750:	eba0 0308 	sub.w	r3, r0, r8
 800e754:	fa09 f303 	lsl.w	r3, r9, r3
 800e758:	4313      	orrs	r3, r2
 800e75a:	46a2      	mov	sl, r4
 800e75c:	9304      	str	r3, [sp, #16]
 800e75e:	e7d2      	b.n	800e706 <_vfiprintf_r+0xc6>
 800e760:	9b03      	ldr	r3, [sp, #12]
 800e762:	1d19      	adds	r1, r3, #4
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	9103      	str	r1, [sp, #12]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	bfbb      	ittet	lt
 800e76c:	425b      	neglt	r3, r3
 800e76e:	f042 0202 	orrlt.w	r2, r2, #2
 800e772:	9307      	strge	r3, [sp, #28]
 800e774:	9307      	strlt	r3, [sp, #28]
 800e776:	bfb8      	it	lt
 800e778:	9204      	strlt	r2, [sp, #16]
 800e77a:	7823      	ldrb	r3, [r4, #0]
 800e77c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e77e:	d10a      	bne.n	800e796 <_vfiprintf_r+0x156>
 800e780:	7863      	ldrb	r3, [r4, #1]
 800e782:	2b2a      	cmp	r3, #42	@ 0x2a
 800e784:	d132      	bne.n	800e7ec <_vfiprintf_r+0x1ac>
 800e786:	9b03      	ldr	r3, [sp, #12]
 800e788:	3402      	adds	r4, #2
 800e78a:	1d1a      	adds	r2, r3, #4
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	9203      	str	r2, [sp, #12]
 800e790:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e794:	9305      	str	r3, [sp, #20]
 800e796:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800e860 <_vfiprintf_r+0x220>
 800e79a:	2203      	movs	r2, #3
 800e79c:	4650      	mov	r0, sl
 800e79e:	7821      	ldrb	r1, [r4, #0]
 800e7a0:	f7ff fe90 	bl	800e4c4 <memchr>
 800e7a4:	b138      	cbz	r0, 800e7b6 <_vfiprintf_r+0x176>
 800e7a6:	2240      	movs	r2, #64	@ 0x40
 800e7a8:	9b04      	ldr	r3, [sp, #16]
 800e7aa:	eba0 000a 	sub.w	r0, r0, sl
 800e7ae:	4082      	lsls	r2, r0
 800e7b0:	4313      	orrs	r3, r2
 800e7b2:	3401      	adds	r4, #1
 800e7b4:	9304      	str	r3, [sp, #16]
 800e7b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7ba:	2206      	movs	r2, #6
 800e7bc:	4829      	ldr	r0, [pc, #164]	@ (800e864 <_vfiprintf_r+0x224>)
 800e7be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e7c2:	f7ff fe7f 	bl	800e4c4 <memchr>
 800e7c6:	2800      	cmp	r0, #0
 800e7c8:	d03f      	beq.n	800e84a <_vfiprintf_r+0x20a>
 800e7ca:	4b27      	ldr	r3, [pc, #156]	@ (800e868 <_vfiprintf_r+0x228>)
 800e7cc:	bb1b      	cbnz	r3, 800e816 <_vfiprintf_r+0x1d6>
 800e7ce:	9b03      	ldr	r3, [sp, #12]
 800e7d0:	3307      	adds	r3, #7
 800e7d2:	f023 0307 	bic.w	r3, r3, #7
 800e7d6:	3308      	adds	r3, #8
 800e7d8:	9303      	str	r3, [sp, #12]
 800e7da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7dc:	443b      	add	r3, r7
 800e7de:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7e0:	e76a      	b.n	800e6b8 <_vfiprintf_r+0x78>
 800e7e2:	460c      	mov	r4, r1
 800e7e4:	2001      	movs	r0, #1
 800e7e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e7ea:	e7a8      	b.n	800e73e <_vfiprintf_r+0xfe>
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	f04f 0c0a 	mov.w	ip, #10
 800e7f2:	4619      	mov	r1, r3
 800e7f4:	3401      	adds	r4, #1
 800e7f6:	9305      	str	r3, [sp, #20]
 800e7f8:	4620      	mov	r0, r4
 800e7fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e7fe:	3a30      	subs	r2, #48	@ 0x30
 800e800:	2a09      	cmp	r2, #9
 800e802:	d903      	bls.n	800e80c <_vfiprintf_r+0x1cc>
 800e804:	2b00      	cmp	r3, #0
 800e806:	d0c6      	beq.n	800e796 <_vfiprintf_r+0x156>
 800e808:	9105      	str	r1, [sp, #20]
 800e80a:	e7c4      	b.n	800e796 <_vfiprintf_r+0x156>
 800e80c:	4604      	mov	r4, r0
 800e80e:	2301      	movs	r3, #1
 800e810:	fb0c 2101 	mla	r1, ip, r1, r2
 800e814:	e7f0      	b.n	800e7f8 <_vfiprintf_r+0x1b8>
 800e816:	ab03      	add	r3, sp, #12
 800e818:	9300      	str	r3, [sp, #0]
 800e81a:	462a      	mov	r2, r5
 800e81c:	4630      	mov	r0, r6
 800e81e:	4b13      	ldr	r3, [pc, #76]	@ (800e86c <_vfiprintf_r+0x22c>)
 800e820:	a904      	add	r1, sp, #16
 800e822:	f3af 8000 	nop.w
 800e826:	4607      	mov	r7, r0
 800e828:	1c78      	adds	r0, r7, #1
 800e82a:	d1d6      	bne.n	800e7da <_vfiprintf_r+0x19a>
 800e82c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e82e:	07d9      	lsls	r1, r3, #31
 800e830:	d405      	bmi.n	800e83e <_vfiprintf_r+0x1fe>
 800e832:	89ab      	ldrh	r3, [r5, #12]
 800e834:	059a      	lsls	r2, r3, #22
 800e836:	d402      	bmi.n	800e83e <_vfiprintf_r+0x1fe>
 800e838:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e83a:	f7fe f907 	bl	800ca4c <__retarget_lock_release_recursive>
 800e83e:	89ab      	ldrh	r3, [r5, #12]
 800e840:	065b      	lsls	r3, r3, #25
 800e842:	f53f af1f 	bmi.w	800e684 <_vfiprintf_r+0x44>
 800e846:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e848:	e71e      	b.n	800e688 <_vfiprintf_r+0x48>
 800e84a:	ab03      	add	r3, sp, #12
 800e84c:	9300      	str	r3, [sp, #0]
 800e84e:	462a      	mov	r2, r5
 800e850:	4630      	mov	r0, r6
 800e852:	4b06      	ldr	r3, [pc, #24]	@ (800e86c <_vfiprintf_r+0x22c>)
 800e854:	a904      	add	r1, sp, #16
 800e856:	f7ff fbd9 	bl	800e00c <_printf_i>
 800e85a:	e7e4      	b.n	800e826 <_vfiprintf_r+0x1e6>
 800e85c:	0800eeb8 	.word	0x0800eeb8
 800e860:	0800eebe 	.word	0x0800eebe
 800e864:	0800eec2 	.word	0x0800eec2
 800e868:	00000000 	.word	0x00000000
 800e86c:	0800e61d 	.word	0x0800e61d

0800e870 <_raise_r>:
 800e870:	291f      	cmp	r1, #31
 800e872:	b538      	push	{r3, r4, r5, lr}
 800e874:	4605      	mov	r5, r0
 800e876:	460c      	mov	r4, r1
 800e878:	d904      	bls.n	800e884 <_raise_r+0x14>
 800e87a:	2316      	movs	r3, #22
 800e87c:	6003      	str	r3, [r0, #0]
 800e87e:	f04f 30ff 	mov.w	r0, #4294967295
 800e882:	bd38      	pop	{r3, r4, r5, pc}
 800e884:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e886:	b112      	cbz	r2, 800e88e <_raise_r+0x1e>
 800e888:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e88c:	b94b      	cbnz	r3, 800e8a2 <_raise_r+0x32>
 800e88e:	4628      	mov	r0, r5
 800e890:	f000 f830 	bl	800e8f4 <_getpid_r>
 800e894:	4622      	mov	r2, r4
 800e896:	4601      	mov	r1, r0
 800e898:	4628      	mov	r0, r5
 800e89a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e89e:	f000 b817 	b.w	800e8d0 <_kill_r>
 800e8a2:	2b01      	cmp	r3, #1
 800e8a4:	d00a      	beq.n	800e8bc <_raise_r+0x4c>
 800e8a6:	1c59      	adds	r1, r3, #1
 800e8a8:	d103      	bne.n	800e8b2 <_raise_r+0x42>
 800e8aa:	2316      	movs	r3, #22
 800e8ac:	6003      	str	r3, [r0, #0]
 800e8ae:	2001      	movs	r0, #1
 800e8b0:	e7e7      	b.n	800e882 <_raise_r+0x12>
 800e8b2:	2100      	movs	r1, #0
 800e8b4:	4620      	mov	r0, r4
 800e8b6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e8ba:	4798      	blx	r3
 800e8bc:	2000      	movs	r0, #0
 800e8be:	e7e0      	b.n	800e882 <_raise_r+0x12>

0800e8c0 <raise>:
 800e8c0:	4b02      	ldr	r3, [pc, #8]	@ (800e8cc <raise+0xc>)
 800e8c2:	4601      	mov	r1, r0
 800e8c4:	6818      	ldr	r0, [r3, #0]
 800e8c6:	f7ff bfd3 	b.w	800e870 <_raise_r>
 800e8ca:	bf00      	nop
 800e8cc:	2000030c 	.word	0x2000030c

0800e8d0 <_kill_r>:
 800e8d0:	b538      	push	{r3, r4, r5, lr}
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	4d06      	ldr	r5, [pc, #24]	@ (800e8f0 <_kill_r+0x20>)
 800e8d6:	4604      	mov	r4, r0
 800e8d8:	4608      	mov	r0, r1
 800e8da:	4611      	mov	r1, r2
 800e8dc:	602b      	str	r3, [r5, #0]
 800e8de:	f7f7 fb05 	bl	8005eec <_kill>
 800e8e2:	1c43      	adds	r3, r0, #1
 800e8e4:	d102      	bne.n	800e8ec <_kill_r+0x1c>
 800e8e6:	682b      	ldr	r3, [r5, #0]
 800e8e8:	b103      	cbz	r3, 800e8ec <_kill_r+0x1c>
 800e8ea:	6023      	str	r3, [r4, #0]
 800e8ec:	bd38      	pop	{r3, r4, r5, pc}
 800e8ee:	bf00      	nop
 800e8f0:	20003544 	.word	0x20003544

0800e8f4 <_getpid_r>:
 800e8f4:	f7f7 baf8 	b.w	8005ee8 <_getpid>

0800e8f8 <_init>:
 800e8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8fa:	bf00      	nop
 800e8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8fe:	bc08      	pop	{r3}
 800e900:	469e      	mov	lr, r3
 800e902:	4770      	bx	lr

0800e904 <_fini>:
 800e904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e906:	bf00      	nop
 800e908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e90a:	bc08      	pop	{r3}
 800e90c:	469e      	mov	lr, r3
 800e90e:	4770      	bx	lr
