
baram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08005000  08005000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092cc  08005110  08005110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  0800e3e0  0800e3e0  0000a3e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea20  0800ea20  0000b358  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea20  0800ea20  0000aa20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea28  0800ea28  0000b358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea28  0800ea28  0000aa28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ea2c  0800ea2c  0000aa2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000358  20000000  0800ea30  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018c8  20000358  0800ed88  0000b358  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001c20  0800ed88  0000bc20  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c246  00000000  00000000  0000b381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000642e  00000000  00000000  000275c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000a19e  00000000  00000000  0002d9f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001360  00000000  00000000  00037b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015a6  00000000  00000000  00038ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e4b1  00000000  00000000  0003a49e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000275af  00000000  00000000  0005894f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cccd  00000000  00000000  0007fefe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010cbcb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004274  00000000  00000000  0010cc10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000042  00000000  00000000  00110e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08005110 <__do_global_dtors_aux>:
 8005110:	b510      	push	{r4, lr}
 8005112:	4c05      	ldr	r4, [pc, #20]	@ (8005128 <__do_global_dtors_aux+0x18>)
 8005114:	7823      	ldrb	r3, [r4, #0]
 8005116:	b933      	cbnz	r3, 8005126 <__do_global_dtors_aux+0x16>
 8005118:	4b04      	ldr	r3, [pc, #16]	@ (800512c <__do_global_dtors_aux+0x1c>)
 800511a:	b113      	cbz	r3, 8005122 <__do_global_dtors_aux+0x12>
 800511c:	4804      	ldr	r0, [pc, #16]	@ (8005130 <__do_global_dtors_aux+0x20>)
 800511e:	f3af 8000 	nop.w
 8005122:	2301      	movs	r3, #1
 8005124:	7023      	strb	r3, [r4, #0]
 8005126:	bd10      	pop	{r4, pc}
 8005128:	20000358 	.word	0x20000358
 800512c:	00000000 	.word	0x00000000
 8005130:	0800e3c4 	.word	0x0800e3c4

08005134 <frame_dummy>:
 8005134:	b508      	push	{r3, lr}
 8005136:	4b03      	ldr	r3, [pc, #12]	@ (8005144 <frame_dummy+0x10>)
 8005138:	b11b      	cbz	r3, 8005142 <frame_dummy+0xe>
 800513a:	4903      	ldr	r1, [pc, #12]	@ (8005148 <frame_dummy+0x14>)
 800513c:	4803      	ldr	r0, [pc, #12]	@ (800514c <frame_dummy+0x18>)
 800513e:	f3af 8000 	nop.w
 8005142:	bd08      	pop	{r3, pc}
 8005144:	00000000 	.word	0x00000000
 8005148:	2000035c 	.word	0x2000035c
 800514c:	0800e3c4 	.word	0x0800e3c4

08005150 <strcmp>:
 8005150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005158:	2a01      	cmp	r2, #1
 800515a:	bf28      	it	cs
 800515c:	429a      	cmpcs	r2, r3
 800515e:	d0f7      	beq.n	8005150 <strcmp>
 8005160:	1ad0      	subs	r0, r2, r3
 8005162:	4770      	bx	lr

08005164 <strlen>:
 8005164:	4603      	mov	r3, r0
 8005166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800516a:	2a00      	cmp	r2, #0
 800516c:	d1fb      	bne.n	8005166 <strlen+0x2>
 800516e:	1a18      	subs	r0, r3, r0
 8005170:	3801      	subs	r0, #1
 8005172:	4770      	bx	lr

08005174 <__aeabi_drsub>:
 8005174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8005178:	e002      	b.n	8005180 <__adddf3>
 800517a:	bf00      	nop

0800517c <__aeabi_dsub>:
 800517c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08005180 <__adddf3>:
 8005180:	b530      	push	{r4, r5, lr}
 8005182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800518a:	ea94 0f05 	teq	r4, r5
 800518e:	bf08      	it	eq
 8005190:	ea90 0f02 	teqeq	r0, r2
 8005194:	bf1f      	itttt	ne
 8005196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800519a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800519e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80051a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80051a6:	f000 80e2 	beq.w	800536e <__adddf3+0x1ee>
 80051aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80051ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80051b2:	bfb8      	it	lt
 80051b4:	426d      	neglt	r5, r5
 80051b6:	dd0c      	ble.n	80051d2 <__adddf3+0x52>
 80051b8:	442c      	add	r4, r5
 80051ba:	ea80 0202 	eor.w	r2, r0, r2
 80051be:	ea81 0303 	eor.w	r3, r1, r3
 80051c2:	ea82 0000 	eor.w	r0, r2, r0
 80051c6:	ea83 0101 	eor.w	r1, r3, r1
 80051ca:	ea80 0202 	eor.w	r2, r0, r2
 80051ce:	ea81 0303 	eor.w	r3, r1, r3
 80051d2:	2d36      	cmp	r5, #54	@ 0x36
 80051d4:	bf88      	it	hi
 80051d6:	bd30      	pophi	{r4, r5, pc}
 80051d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80051dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80051e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80051e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80051e8:	d002      	beq.n	80051f0 <__adddf3+0x70>
 80051ea:	4240      	negs	r0, r0
 80051ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80051f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80051f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80051f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80051fc:	d002      	beq.n	8005204 <__adddf3+0x84>
 80051fe:	4252      	negs	r2, r2
 8005200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005204:	ea94 0f05 	teq	r4, r5
 8005208:	f000 80a7 	beq.w	800535a <__adddf3+0x1da>
 800520c:	f1a4 0401 	sub.w	r4, r4, #1
 8005210:	f1d5 0e20 	rsbs	lr, r5, #32
 8005214:	db0d      	blt.n	8005232 <__adddf3+0xb2>
 8005216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800521a:	fa22 f205 	lsr.w	r2, r2, r5
 800521e:	1880      	adds	r0, r0, r2
 8005220:	f141 0100 	adc.w	r1, r1, #0
 8005224:	fa03 f20e 	lsl.w	r2, r3, lr
 8005228:	1880      	adds	r0, r0, r2
 800522a:	fa43 f305 	asr.w	r3, r3, r5
 800522e:	4159      	adcs	r1, r3
 8005230:	e00e      	b.n	8005250 <__adddf3+0xd0>
 8005232:	f1a5 0520 	sub.w	r5, r5, #32
 8005236:	f10e 0e20 	add.w	lr, lr, #32
 800523a:	2a01      	cmp	r2, #1
 800523c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005240:	bf28      	it	cs
 8005242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005246:	fa43 f305 	asr.w	r3, r3, r5
 800524a:	18c0      	adds	r0, r0, r3
 800524c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8005254:	d507      	bpl.n	8005266 <__adddf3+0xe6>
 8005256:	f04f 0e00 	mov.w	lr, #0
 800525a:	f1dc 0c00 	rsbs	ip, ip, #0
 800525e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005262:	eb6e 0101 	sbc.w	r1, lr, r1
 8005266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800526a:	d31b      	bcc.n	80052a4 <__adddf3+0x124>
 800526c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8005270:	d30c      	bcc.n	800528c <__adddf3+0x10c>
 8005272:	0849      	lsrs	r1, r1, #1
 8005274:	ea5f 0030 	movs.w	r0, r0, rrx
 8005278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800527c:	f104 0401 	add.w	r4, r4, #1
 8005280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8005288:	f080 809a 	bcs.w	80053c0 <__adddf3+0x240>
 800528c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8005290:	bf08      	it	eq
 8005292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005296:	f150 0000 	adcs.w	r0, r0, #0
 800529a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800529e:	ea41 0105 	orr.w	r1, r1, r5
 80052a2:	bd30      	pop	{r4, r5, pc}
 80052a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80052a8:	4140      	adcs	r0, r0
 80052aa:	eb41 0101 	adc.w	r1, r1, r1
 80052ae:	3c01      	subs	r4, #1
 80052b0:	bf28      	it	cs
 80052b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80052b6:	d2e9      	bcs.n	800528c <__adddf3+0x10c>
 80052b8:	f091 0f00 	teq	r1, #0
 80052bc:	bf04      	itt	eq
 80052be:	4601      	moveq	r1, r0
 80052c0:	2000      	moveq	r0, #0
 80052c2:	fab1 f381 	clz	r3, r1
 80052c6:	bf08      	it	eq
 80052c8:	3320      	addeq	r3, #32
 80052ca:	f1a3 030b 	sub.w	r3, r3, #11
 80052ce:	f1b3 0220 	subs.w	r2, r3, #32
 80052d2:	da0c      	bge.n	80052ee <__adddf3+0x16e>
 80052d4:	320c      	adds	r2, #12
 80052d6:	dd08      	ble.n	80052ea <__adddf3+0x16a>
 80052d8:	f102 0c14 	add.w	ip, r2, #20
 80052dc:	f1c2 020c 	rsb	r2, r2, #12
 80052e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80052e4:	fa21 f102 	lsr.w	r1, r1, r2
 80052e8:	e00c      	b.n	8005304 <__adddf3+0x184>
 80052ea:	f102 0214 	add.w	r2, r2, #20
 80052ee:	bfd8      	it	le
 80052f0:	f1c2 0c20 	rsble	ip, r2, #32
 80052f4:	fa01 f102 	lsl.w	r1, r1, r2
 80052f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80052fc:	bfdc      	itt	le
 80052fe:	ea41 010c 	orrle.w	r1, r1, ip
 8005302:	4090      	lslle	r0, r2
 8005304:	1ae4      	subs	r4, r4, r3
 8005306:	bfa2      	ittt	ge
 8005308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800530c:	4329      	orrge	r1, r5
 800530e:	bd30      	popge	{r4, r5, pc}
 8005310:	ea6f 0404 	mvn.w	r4, r4
 8005314:	3c1f      	subs	r4, #31
 8005316:	da1c      	bge.n	8005352 <__adddf3+0x1d2>
 8005318:	340c      	adds	r4, #12
 800531a:	dc0e      	bgt.n	800533a <__adddf3+0x1ba>
 800531c:	f104 0414 	add.w	r4, r4, #20
 8005320:	f1c4 0220 	rsb	r2, r4, #32
 8005324:	fa20 f004 	lsr.w	r0, r0, r4
 8005328:	fa01 f302 	lsl.w	r3, r1, r2
 800532c:	ea40 0003 	orr.w	r0, r0, r3
 8005330:	fa21 f304 	lsr.w	r3, r1, r4
 8005334:	ea45 0103 	orr.w	r1, r5, r3
 8005338:	bd30      	pop	{r4, r5, pc}
 800533a:	f1c4 040c 	rsb	r4, r4, #12
 800533e:	f1c4 0220 	rsb	r2, r4, #32
 8005342:	fa20 f002 	lsr.w	r0, r0, r2
 8005346:	fa01 f304 	lsl.w	r3, r1, r4
 800534a:	ea40 0003 	orr.w	r0, r0, r3
 800534e:	4629      	mov	r1, r5
 8005350:	bd30      	pop	{r4, r5, pc}
 8005352:	fa21 f004 	lsr.w	r0, r1, r4
 8005356:	4629      	mov	r1, r5
 8005358:	bd30      	pop	{r4, r5, pc}
 800535a:	f094 0f00 	teq	r4, #0
 800535e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8005362:	bf06      	itte	eq
 8005364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8005368:	3401      	addeq	r4, #1
 800536a:	3d01      	subne	r5, #1
 800536c:	e74e      	b.n	800520c <__adddf3+0x8c>
 800536e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005372:	bf18      	it	ne
 8005374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005378:	d029      	beq.n	80053ce <__adddf3+0x24e>
 800537a:	ea94 0f05 	teq	r4, r5
 800537e:	bf08      	it	eq
 8005380:	ea90 0f02 	teqeq	r0, r2
 8005384:	d005      	beq.n	8005392 <__adddf3+0x212>
 8005386:	ea54 0c00 	orrs.w	ip, r4, r0
 800538a:	bf04      	itt	eq
 800538c:	4619      	moveq	r1, r3
 800538e:	4610      	moveq	r0, r2
 8005390:	bd30      	pop	{r4, r5, pc}
 8005392:	ea91 0f03 	teq	r1, r3
 8005396:	bf1e      	ittt	ne
 8005398:	2100      	movne	r1, #0
 800539a:	2000      	movne	r0, #0
 800539c:	bd30      	popne	{r4, r5, pc}
 800539e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80053a2:	d105      	bne.n	80053b0 <__adddf3+0x230>
 80053a4:	0040      	lsls	r0, r0, #1
 80053a6:	4149      	adcs	r1, r1
 80053a8:	bf28      	it	cs
 80053aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80053ae:	bd30      	pop	{r4, r5, pc}
 80053b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80053b4:	bf3c      	itt	cc
 80053b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80053ba:	bd30      	popcc	{r4, r5, pc}
 80053bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80053c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80053c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80053c8:	f04f 0000 	mov.w	r0, #0
 80053cc:	bd30      	pop	{r4, r5, pc}
 80053ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80053d2:	bf1a      	itte	ne
 80053d4:	4619      	movne	r1, r3
 80053d6:	4610      	movne	r0, r2
 80053d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80053dc:	bf1c      	itt	ne
 80053de:	460b      	movne	r3, r1
 80053e0:	4602      	movne	r2, r0
 80053e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80053e6:	bf06      	itte	eq
 80053e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80053ec:	ea91 0f03 	teqeq	r1, r3
 80053f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80053f4:	bd30      	pop	{r4, r5, pc}
 80053f6:	bf00      	nop

080053f8 <__aeabi_ui2d>:
 80053f8:	f090 0f00 	teq	r0, #0
 80053fc:	bf04      	itt	eq
 80053fe:	2100      	moveq	r1, #0
 8005400:	4770      	bxeq	lr
 8005402:	b530      	push	{r4, r5, lr}
 8005404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8005408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800540c:	f04f 0500 	mov.w	r5, #0
 8005410:	f04f 0100 	mov.w	r1, #0
 8005414:	e750      	b.n	80052b8 <__adddf3+0x138>
 8005416:	bf00      	nop

08005418 <__aeabi_i2d>:
 8005418:	f090 0f00 	teq	r0, #0
 800541c:	bf04      	itt	eq
 800541e:	2100      	moveq	r1, #0
 8005420:	4770      	bxeq	lr
 8005422:	b530      	push	{r4, r5, lr}
 8005424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8005428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800542c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8005430:	bf48      	it	mi
 8005432:	4240      	negmi	r0, r0
 8005434:	f04f 0100 	mov.w	r1, #0
 8005438:	e73e      	b.n	80052b8 <__adddf3+0x138>
 800543a:	bf00      	nop

0800543c <__aeabi_f2d>:
 800543c:	0042      	lsls	r2, r0, #1
 800543e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8005442:	ea4f 0131 	mov.w	r1, r1, rrx
 8005446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800544a:	bf1f      	itttt	ne
 800544c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8005450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8005454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8005458:	4770      	bxne	lr
 800545a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800545e:	bf08      	it	eq
 8005460:	4770      	bxeq	lr
 8005462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8005466:	bf04      	itt	eq
 8005468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800546c:	4770      	bxeq	lr
 800546e:	b530      	push	{r4, r5, lr}
 8005470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8005474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8005478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800547c:	e71c      	b.n	80052b8 <__adddf3+0x138>
 800547e:	bf00      	nop

08005480 <__aeabi_ul2d>:
 8005480:	ea50 0201 	orrs.w	r2, r0, r1
 8005484:	bf08      	it	eq
 8005486:	4770      	bxeq	lr
 8005488:	b530      	push	{r4, r5, lr}
 800548a:	f04f 0500 	mov.w	r5, #0
 800548e:	e00a      	b.n	80054a6 <__aeabi_l2d+0x16>

08005490 <__aeabi_l2d>:
 8005490:	ea50 0201 	orrs.w	r2, r0, r1
 8005494:	bf08      	it	eq
 8005496:	4770      	bxeq	lr
 8005498:	b530      	push	{r4, r5, lr}
 800549a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800549e:	d502      	bpl.n	80054a6 <__aeabi_l2d+0x16>
 80054a0:	4240      	negs	r0, r0
 80054a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80054a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80054aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80054ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80054b2:	f43f aed8 	beq.w	8005266 <__adddf3+0xe6>
 80054b6:	f04f 0203 	mov.w	r2, #3
 80054ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80054be:	bf18      	it	ne
 80054c0:	3203      	addne	r2, #3
 80054c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80054c6:	bf18      	it	ne
 80054c8:	3203      	addne	r2, #3
 80054ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80054ce:	f1c2 0320 	rsb	r3, r2, #32
 80054d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80054d6:	fa20 f002 	lsr.w	r0, r0, r2
 80054da:	fa01 fe03 	lsl.w	lr, r1, r3
 80054de:	ea40 000e 	orr.w	r0, r0, lr
 80054e2:	fa21 f102 	lsr.w	r1, r1, r2
 80054e6:	4414      	add	r4, r2
 80054e8:	e6bd      	b.n	8005266 <__adddf3+0xe6>
 80054ea:	bf00      	nop

080054ec <__aeabi_dmul>:
 80054ec:	b570      	push	{r4, r5, r6, lr}
 80054ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80054f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80054f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80054fa:	bf1d      	ittte	ne
 80054fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005500:	ea94 0f0c 	teqne	r4, ip
 8005504:	ea95 0f0c 	teqne	r5, ip
 8005508:	f000 f8de 	bleq	80056c8 <__aeabi_dmul+0x1dc>
 800550c:	442c      	add	r4, r5
 800550e:	ea81 0603 	eor.w	r6, r1, r3
 8005512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8005516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800551a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800551e:	bf18      	it	ne
 8005520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8005524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8005528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800552c:	d038      	beq.n	80055a0 <__aeabi_dmul+0xb4>
 800552e:	fba0 ce02 	umull	ip, lr, r0, r2
 8005532:	f04f 0500 	mov.w	r5, #0
 8005536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800553a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800553e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8005542:	f04f 0600 	mov.w	r6, #0
 8005546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800554a:	f09c 0f00 	teq	ip, #0
 800554e:	bf18      	it	ne
 8005550:	f04e 0e01 	orrne.w	lr, lr, #1
 8005554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8005558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800555c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8005560:	d204      	bcs.n	800556c <__aeabi_dmul+0x80>
 8005562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8005566:	416d      	adcs	r5, r5
 8005568:	eb46 0606 	adc.w	r6, r6, r6
 800556c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8005570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800557c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8005580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8005584:	bf88      	it	hi
 8005586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800558a:	d81e      	bhi.n	80055ca <__aeabi_dmul+0xde>
 800558c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8005590:	bf08      	it	eq
 8005592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8005596:	f150 0000 	adcs.w	r0, r0, #0
 800559a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800559e:	bd70      	pop	{r4, r5, r6, pc}
 80055a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80055a4:	ea46 0101 	orr.w	r1, r6, r1
 80055a8:	ea40 0002 	orr.w	r0, r0, r2
 80055ac:	ea81 0103 	eor.w	r1, r1, r3
 80055b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80055b4:	bfc2      	ittt	gt
 80055b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80055ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80055be:	bd70      	popgt	{r4, r5, r6, pc}
 80055c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80055c4:	f04f 0e00 	mov.w	lr, #0
 80055c8:	3c01      	subs	r4, #1
 80055ca:	f300 80ab 	bgt.w	8005724 <__aeabi_dmul+0x238>
 80055ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80055d2:	bfde      	ittt	le
 80055d4:	2000      	movle	r0, #0
 80055d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80055da:	bd70      	pople	{r4, r5, r6, pc}
 80055dc:	f1c4 0400 	rsb	r4, r4, #0
 80055e0:	3c20      	subs	r4, #32
 80055e2:	da35      	bge.n	8005650 <__aeabi_dmul+0x164>
 80055e4:	340c      	adds	r4, #12
 80055e6:	dc1b      	bgt.n	8005620 <__aeabi_dmul+0x134>
 80055e8:	f104 0414 	add.w	r4, r4, #20
 80055ec:	f1c4 0520 	rsb	r5, r4, #32
 80055f0:	fa00 f305 	lsl.w	r3, r0, r5
 80055f4:	fa20 f004 	lsr.w	r0, r0, r4
 80055f8:	fa01 f205 	lsl.w	r2, r1, r5
 80055fc:	ea40 0002 	orr.w	r0, r0, r2
 8005600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8005604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8005608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800560c:	fa21 f604 	lsr.w	r6, r1, r4
 8005610:	eb42 0106 	adc.w	r1, r2, r6
 8005614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005618:	bf08      	it	eq
 800561a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800561e:	bd70      	pop	{r4, r5, r6, pc}
 8005620:	f1c4 040c 	rsb	r4, r4, #12
 8005624:	f1c4 0520 	rsb	r5, r4, #32
 8005628:	fa00 f304 	lsl.w	r3, r0, r4
 800562c:	fa20 f005 	lsr.w	r0, r0, r5
 8005630:	fa01 f204 	lsl.w	r2, r1, r4
 8005634:	ea40 0002 	orr.w	r0, r0, r2
 8005638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800563c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005640:	f141 0100 	adc.w	r1, r1, #0
 8005644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005648:	bf08      	it	eq
 800564a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800564e:	bd70      	pop	{r4, r5, r6, pc}
 8005650:	f1c4 0520 	rsb	r5, r4, #32
 8005654:	fa00 f205 	lsl.w	r2, r0, r5
 8005658:	ea4e 0e02 	orr.w	lr, lr, r2
 800565c:	fa20 f304 	lsr.w	r3, r0, r4
 8005660:	fa01 f205 	lsl.w	r2, r1, r5
 8005664:	ea43 0302 	orr.w	r3, r3, r2
 8005668:	fa21 f004 	lsr.w	r0, r1, r4
 800566c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8005670:	fa21 f204 	lsr.w	r2, r1, r4
 8005674:	ea20 0002 	bic.w	r0, r0, r2
 8005678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800567c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005680:	bf08      	it	eq
 8005682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005686:	bd70      	pop	{r4, r5, r6, pc}
 8005688:	f094 0f00 	teq	r4, #0
 800568c:	d10f      	bne.n	80056ae <__aeabi_dmul+0x1c2>
 800568e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8005692:	0040      	lsls	r0, r0, #1
 8005694:	eb41 0101 	adc.w	r1, r1, r1
 8005698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800569c:	bf08      	it	eq
 800569e:	3c01      	subeq	r4, #1
 80056a0:	d0f7      	beq.n	8005692 <__aeabi_dmul+0x1a6>
 80056a2:	ea41 0106 	orr.w	r1, r1, r6
 80056a6:	f095 0f00 	teq	r5, #0
 80056aa:	bf18      	it	ne
 80056ac:	4770      	bxne	lr
 80056ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80056b2:	0052      	lsls	r2, r2, #1
 80056b4:	eb43 0303 	adc.w	r3, r3, r3
 80056b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80056bc:	bf08      	it	eq
 80056be:	3d01      	subeq	r5, #1
 80056c0:	d0f7      	beq.n	80056b2 <__aeabi_dmul+0x1c6>
 80056c2:	ea43 0306 	orr.w	r3, r3, r6
 80056c6:	4770      	bx	lr
 80056c8:	ea94 0f0c 	teq	r4, ip
 80056cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80056d0:	bf18      	it	ne
 80056d2:	ea95 0f0c 	teqne	r5, ip
 80056d6:	d00c      	beq.n	80056f2 <__aeabi_dmul+0x206>
 80056d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80056dc:	bf18      	it	ne
 80056de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80056e2:	d1d1      	bne.n	8005688 <__aeabi_dmul+0x19c>
 80056e4:	ea81 0103 	eor.w	r1, r1, r3
 80056e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80056ec:	f04f 0000 	mov.w	r0, #0
 80056f0:	bd70      	pop	{r4, r5, r6, pc}
 80056f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80056f6:	bf06      	itte	eq
 80056f8:	4610      	moveq	r0, r2
 80056fa:	4619      	moveq	r1, r3
 80056fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005700:	d019      	beq.n	8005736 <__aeabi_dmul+0x24a>
 8005702:	ea94 0f0c 	teq	r4, ip
 8005706:	d102      	bne.n	800570e <__aeabi_dmul+0x222>
 8005708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800570c:	d113      	bne.n	8005736 <__aeabi_dmul+0x24a>
 800570e:	ea95 0f0c 	teq	r5, ip
 8005712:	d105      	bne.n	8005720 <__aeabi_dmul+0x234>
 8005714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8005718:	bf1c      	itt	ne
 800571a:	4610      	movne	r0, r2
 800571c:	4619      	movne	r1, r3
 800571e:	d10a      	bne.n	8005736 <__aeabi_dmul+0x24a>
 8005720:	ea81 0103 	eor.w	r1, r1, r3
 8005724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8005728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800572c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005730:	f04f 0000 	mov.w	r0, #0
 8005734:	bd70      	pop	{r4, r5, r6, pc}
 8005736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800573a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800573e:	bd70      	pop	{r4, r5, r6, pc}

08005740 <__aeabi_ddiv>:
 8005740:	b570      	push	{r4, r5, r6, lr}
 8005742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8005746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800574a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800574e:	bf1d      	ittte	ne
 8005750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005754:	ea94 0f0c 	teqne	r4, ip
 8005758:	ea95 0f0c 	teqne	r5, ip
 800575c:	f000 f8a7 	bleq	80058ae <__aeabi_ddiv+0x16e>
 8005760:	eba4 0405 	sub.w	r4, r4, r5
 8005764:	ea81 0e03 	eor.w	lr, r1, r3
 8005768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800576c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005770:	f000 8088 	beq.w	8005884 <__aeabi_ddiv+0x144>
 8005774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800577c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8005780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800578c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8005790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8005798:	429d      	cmp	r5, r3
 800579a:	bf08      	it	eq
 800579c:	4296      	cmpeq	r6, r2
 800579e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80057a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80057a6:	d202      	bcs.n	80057ae <__aeabi_ddiv+0x6e>
 80057a8:	085b      	lsrs	r3, r3, #1
 80057aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80057ae:	1ab6      	subs	r6, r6, r2
 80057b0:	eb65 0503 	sbc.w	r5, r5, r3
 80057b4:	085b      	lsrs	r3, r3, #1
 80057b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80057ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80057be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80057c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80057c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80057ca:	bf22      	ittt	cs
 80057cc:	1ab6      	subcs	r6, r6, r2
 80057ce:	4675      	movcs	r5, lr
 80057d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80057d4:	085b      	lsrs	r3, r3, #1
 80057d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80057da:	ebb6 0e02 	subs.w	lr, r6, r2
 80057de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80057e2:	bf22      	ittt	cs
 80057e4:	1ab6      	subcs	r6, r6, r2
 80057e6:	4675      	movcs	r5, lr
 80057e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80057ec:	085b      	lsrs	r3, r3, #1
 80057ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80057f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80057f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80057fa:	bf22      	ittt	cs
 80057fc:	1ab6      	subcs	r6, r6, r2
 80057fe:	4675      	movcs	r5, lr
 8005800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8005804:	085b      	lsrs	r3, r3, #1
 8005806:	ea4f 0232 	mov.w	r2, r2, rrx
 800580a:	ebb6 0e02 	subs.w	lr, r6, r2
 800580e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005812:	bf22      	ittt	cs
 8005814:	1ab6      	subcs	r6, r6, r2
 8005816:	4675      	movcs	r5, lr
 8005818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800581c:	ea55 0e06 	orrs.w	lr, r5, r6
 8005820:	d018      	beq.n	8005854 <__aeabi_ddiv+0x114>
 8005822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8005826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800582a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800582e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8005836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800583a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800583e:	d1c0      	bne.n	80057c2 <__aeabi_ddiv+0x82>
 8005840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8005844:	d10b      	bne.n	800585e <__aeabi_ddiv+0x11e>
 8005846:	ea41 0100 	orr.w	r1, r1, r0
 800584a:	f04f 0000 	mov.w	r0, #0
 800584e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8005852:	e7b6      	b.n	80057c2 <__aeabi_ddiv+0x82>
 8005854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8005858:	bf04      	itt	eq
 800585a:	4301      	orreq	r1, r0
 800585c:	2000      	moveq	r0, #0
 800585e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8005862:	bf88      	it	hi
 8005864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8005868:	f63f aeaf 	bhi.w	80055ca <__aeabi_dmul+0xde>
 800586c:	ebb5 0c03 	subs.w	ip, r5, r3
 8005870:	bf04      	itt	eq
 8005872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8005876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800587a:	f150 0000 	adcs.w	r0, r0, #0
 800587e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005882:	bd70      	pop	{r4, r5, r6, pc}
 8005884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8005888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800588c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8005890:	bfc2      	ittt	gt
 8005892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800589a:	bd70      	popgt	{r4, r5, r6, pc}
 800589c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80058a0:	f04f 0e00 	mov.w	lr, #0
 80058a4:	3c01      	subs	r4, #1
 80058a6:	e690      	b.n	80055ca <__aeabi_dmul+0xde>
 80058a8:	ea45 0e06 	orr.w	lr, r5, r6
 80058ac:	e68d      	b.n	80055ca <__aeabi_dmul+0xde>
 80058ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80058b2:	ea94 0f0c 	teq	r4, ip
 80058b6:	bf08      	it	eq
 80058b8:	ea95 0f0c 	teqeq	r5, ip
 80058bc:	f43f af3b 	beq.w	8005736 <__aeabi_dmul+0x24a>
 80058c0:	ea94 0f0c 	teq	r4, ip
 80058c4:	d10a      	bne.n	80058dc <__aeabi_ddiv+0x19c>
 80058c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80058ca:	f47f af34 	bne.w	8005736 <__aeabi_dmul+0x24a>
 80058ce:	ea95 0f0c 	teq	r5, ip
 80058d2:	f47f af25 	bne.w	8005720 <__aeabi_dmul+0x234>
 80058d6:	4610      	mov	r0, r2
 80058d8:	4619      	mov	r1, r3
 80058da:	e72c      	b.n	8005736 <__aeabi_dmul+0x24a>
 80058dc:	ea95 0f0c 	teq	r5, ip
 80058e0:	d106      	bne.n	80058f0 <__aeabi_ddiv+0x1b0>
 80058e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80058e6:	f43f aefd 	beq.w	80056e4 <__aeabi_dmul+0x1f8>
 80058ea:	4610      	mov	r0, r2
 80058ec:	4619      	mov	r1, r3
 80058ee:	e722      	b.n	8005736 <__aeabi_dmul+0x24a>
 80058f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80058f4:	bf18      	it	ne
 80058f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80058fa:	f47f aec5 	bne.w	8005688 <__aeabi_dmul+0x19c>
 80058fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8005902:	f47f af0d 	bne.w	8005720 <__aeabi_dmul+0x234>
 8005906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800590a:	f47f aeeb 	bne.w	80056e4 <__aeabi_dmul+0x1f8>
 800590e:	e712      	b.n	8005736 <__aeabi_dmul+0x24a>

08005910 <__gedf2>:
 8005910:	f04f 3cff 	mov.w	ip, #4294967295
 8005914:	e006      	b.n	8005924 <__cmpdf2+0x4>
 8005916:	bf00      	nop

08005918 <__ledf2>:
 8005918:	f04f 0c01 	mov.w	ip, #1
 800591c:	e002      	b.n	8005924 <__cmpdf2+0x4>
 800591e:	bf00      	nop

08005920 <__cmpdf2>:
 8005920:	f04f 0c01 	mov.w	ip, #1
 8005924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800592c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005934:	bf18      	it	ne
 8005936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800593a:	d01b      	beq.n	8005974 <__cmpdf2+0x54>
 800593c:	b001      	add	sp, #4
 800593e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8005942:	bf0c      	ite	eq
 8005944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8005948:	ea91 0f03 	teqne	r1, r3
 800594c:	bf02      	ittt	eq
 800594e:	ea90 0f02 	teqeq	r0, r2
 8005952:	2000      	moveq	r0, #0
 8005954:	4770      	bxeq	lr
 8005956:	f110 0f00 	cmn.w	r0, #0
 800595a:	ea91 0f03 	teq	r1, r3
 800595e:	bf58      	it	pl
 8005960:	4299      	cmppl	r1, r3
 8005962:	bf08      	it	eq
 8005964:	4290      	cmpeq	r0, r2
 8005966:	bf2c      	ite	cs
 8005968:	17d8      	asrcs	r0, r3, #31
 800596a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800596e:	f040 0001 	orr.w	r0, r0, #1
 8005972:	4770      	bx	lr
 8005974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800597c:	d102      	bne.n	8005984 <__cmpdf2+0x64>
 800597e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005982:	d107      	bne.n	8005994 <__cmpdf2+0x74>
 8005984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800598c:	d1d6      	bne.n	800593c <__cmpdf2+0x1c>
 800598e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005992:	d0d3      	beq.n	800593c <__cmpdf2+0x1c>
 8005994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop

0800599c <__aeabi_cdrcmple>:
 800599c:	4684      	mov	ip, r0
 800599e:	4610      	mov	r0, r2
 80059a0:	4662      	mov	r2, ip
 80059a2:	468c      	mov	ip, r1
 80059a4:	4619      	mov	r1, r3
 80059a6:	4663      	mov	r3, ip
 80059a8:	e000      	b.n	80059ac <__aeabi_cdcmpeq>
 80059aa:	bf00      	nop

080059ac <__aeabi_cdcmpeq>:
 80059ac:	b501      	push	{r0, lr}
 80059ae:	f7ff ffb7 	bl	8005920 <__cmpdf2>
 80059b2:	2800      	cmp	r0, #0
 80059b4:	bf48      	it	mi
 80059b6:	f110 0f00 	cmnmi.w	r0, #0
 80059ba:	bd01      	pop	{r0, pc}

080059bc <__aeabi_dcmpeq>:
 80059bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80059c0:	f7ff fff4 	bl	80059ac <__aeabi_cdcmpeq>
 80059c4:	bf0c      	ite	eq
 80059c6:	2001      	moveq	r0, #1
 80059c8:	2000      	movne	r0, #0
 80059ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80059ce:	bf00      	nop

080059d0 <__aeabi_dcmplt>:
 80059d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80059d4:	f7ff ffea 	bl	80059ac <__aeabi_cdcmpeq>
 80059d8:	bf34      	ite	cc
 80059da:	2001      	movcc	r0, #1
 80059dc:	2000      	movcs	r0, #0
 80059de:	f85d fb08 	ldr.w	pc, [sp], #8
 80059e2:	bf00      	nop

080059e4 <__aeabi_dcmple>:
 80059e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80059e8:	f7ff ffe0 	bl	80059ac <__aeabi_cdcmpeq>
 80059ec:	bf94      	ite	ls
 80059ee:	2001      	movls	r0, #1
 80059f0:	2000      	movhi	r0, #0
 80059f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80059f6:	bf00      	nop

080059f8 <__aeabi_dcmpge>:
 80059f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80059fc:	f7ff ffce 	bl	800599c <__aeabi_cdrcmple>
 8005a00:	bf94      	ite	ls
 8005a02:	2001      	movls	r0, #1
 8005a04:	2000      	movhi	r0, #0
 8005a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8005a0a:	bf00      	nop

08005a0c <__aeabi_dcmpgt>:
 8005a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005a10:	f7ff ffc4 	bl	800599c <__aeabi_cdrcmple>
 8005a14:	bf34      	ite	cc
 8005a16:	2001      	movcc	r0, #1
 8005a18:	2000      	movcs	r0, #0
 8005a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8005a1e:	bf00      	nop

08005a20 <__aeabi_dcmpun>:
 8005a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005a28:	d102      	bne.n	8005a30 <__aeabi_dcmpun+0x10>
 8005a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005a2e:	d10a      	bne.n	8005a46 <__aeabi_dcmpun+0x26>
 8005a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005a38:	d102      	bne.n	8005a40 <__aeabi_dcmpun+0x20>
 8005a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005a3e:	d102      	bne.n	8005a46 <__aeabi_dcmpun+0x26>
 8005a40:	f04f 0000 	mov.w	r0, #0
 8005a44:	4770      	bx	lr
 8005a46:	f04f 0001 	mov.w	r0, #1
 8005a4a:	4770      	bx	lr

08005a4c <__aeabi_d2uiz>:
 8005a4c:	004a      	lsls	r2, r1, #1
 8005a4e:	d211      	bcs.n	8005a74 <__aeabi_d2uiz+0x28>
 8005a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8005a54:	d211      	bcs.n	8005a7a <__aeabi_d2uiz+0x2e>
 8005a56:	d50d      	bpl.n	8005a74 <__aeabi_d2uiz+0x28>
 8005a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8005a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005a60:	d40e      	bmi.n	8005a80 <__aeabi_d2uiz+0x34>
 8005a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8005a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8005a72:	4770      	bx	lr
 8005a74:	f04f 0000 	mov.w	r0, #0
 8005a78:	4770      	bx	lr
 8005a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8005a7e:	d102      	bne.n	8005a86 <__aeabi_d2uiz+0x3a>
 8005a80:	f04f 30ff 	mov.w	r0, #4294967295
 8005a84:	4770      	bx	lr
 8005a86:	f04f 0000 	mov.w	r0, #0
 8005a8a:	4770      	bx	lr

08005a8c <__aeabi_d2f>:
 8005a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8005a94:	bf24      	itt	cs
 8005a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8005a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8005a9e:	d90d      	bls.n	8005abc <__aeabi_d2f+0x30>
 8005aa0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8005aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8005aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8005aac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8005ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8005ab4:	bf08      	it	eq
 8005ab6:	f020 0001 	biceq.w	r0, r0, #1
 8005aba:	4770      	bx	lr
 8005abc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8005ac0:	d121      	bne.n	8005b06 <__aeabi_d2f+0x7a>
 8005ac2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8005ac6:	bfbc      	itt	lt
 8005ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8005acc:	4770      	bxlt	lr
 8005ace:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8005ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8005ad6:	f1c2 0218 	rsb	r2, r2, #24
 8005ada:	f1c2 0c20 	rsb	ip, r2, #32
 8005ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8005ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8005ae6:	bf18      	it	ne
 8005ae8:	f040 0001 	orrne.w	r0, r0, #1
 8005aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8005af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8005af8:	ea40 000c 	orr.w	r0, r0, ip
 8005afc:	fa23 f302 	lsr.w	r3, r3, r2
 8005b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005b04:	e7cc      	b.n	8005aa0 <__aeabi_d2f+0x14>
 8005b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8005b0a:	d107      	bne.n	8005b1c <__aeabi_d2f+0x90>
 8005b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8005b10:	bf1e      	ittt	ne
 8005b12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8005b16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8005b1a:	4770      	bxne	lr
 8005b1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8005b20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8005b24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop

08005b2c <__gesf2>:
 8005b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8005b30:	e006      	b.n	8005b40 <__cmpsf2+0x4>
 8005b32:	bf00      	nop

08005b34 <__lesf2>:
 8005b34:	f04f 0c01 	mov.w	ip, #1
 8005b38:	e002      	b.n	8005b40 <__cmpsf2+0x4>
 8005b3a:	bf00      	nop

08005b3c <__cmpsf2>:
 8005b3c:	f04f 0c01 	mov.w	ip, #1
 8005b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005b44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8005b48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8005b4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005b50:	bf18      	it	ne
 8005b52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8005b56:	d011      	beq.n	8005b7c <__cmpsf2+0x40>
 8005b58:	b001      	add	sp, #4
 8005b5a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8005b5e:	bf18      	it	ne
 8005b60:	ea90 0f01 	teqne	r0, r1
 8005b64:	bf58      	it	pl
 8005b66:	ebb2 0003 	subspl.w	r0, r2, r3
 8005b6a:	bf88      	it	hi
 8005b6c:	17c8      	asrhi	r0, r1, #31
 8005b6e:	bf38      	it	cc
 8005b70:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8005b74:	bf18      	it	ne
 8005b76:	f040 0001 	orrne.w	r0, r0, #1
 8005b7a:	4770      	bx	lr
 8005b7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005b80:	d102      	bne.n	8005b88 <__cmpsf2+0x4c>
 8005b82:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8005b86:	d105      	bne.n	8005b94 <__cmpsf2+0x58>
 8005b88:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8005b8c:	d1e4      	bne.n	8005b58 <__cmpsf2+0x1c>
 8005b8e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8005b92:	d0e1      	beq.n	8005b58 <__cmpsf2+0x1c>
 8005b94:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop

08005b9c <__aeabi_cfrcmple>:
 8005b9c:	4684      	mov	ip, r0
 8005b9e:	4608      	mov	r0, r1
 8005ba0:	4661      	mov	r1, ip
 8005ba2:	e7ff      	b.n	8005ba4 <__aeabi_cfcmpeq>

08005ba4 <__aeabi_cfcmpeq>:
 8005ba4:	b50f      	push	{r0, r1, r2, r3, lr}
 8005ba6:	f7ff ffc9 	bl	8005b3c <__cmpsf2>
 8005baa:	2800      	cmp	r0, #0
 8005bac:	bf48      	it	mi
 8005bae:	f110 0f00 	cmnmi.w	r0, #0
 8005bb2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08005bb4 <__aeabi_fcmpeq>:
 8005bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005bb8:	f7ff fff4 	bl	8005ba4 <__aeabi_cfcmpeq>
 8005bbc:	bf0c      	ite	eq
 8005bbe:	2001      	moveq	r0, #1
 8005bc0:	2000      	movne	r0, #0
 8005bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8005bc6:	bf00      	nop

08005bc8 <__aeabi_fcmplt>:
 8005bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005bcc:	f7ff ffea 	bl	8005ba4 <__aeabi_cfcmpeq>
 8005bd0:	bf34      	ite	cc
 8005bd2:	2001      	movcc	r0, #1
 8005bd4:	2000      	movcs	r0, #0
 8005bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8005bda:	bf00      	nop

08005bdc <__aeabi_fcmple>:
 8005bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005be0:	f7ff ffe0 	bl	8005ba4 <__aeabi_cfcmpeq>
 8005be4:	bf94      	ite	ls
 8005be6:	2001      	movls	r0, #1
 8005be8:	2000      	movhi	r0, #0
 8005bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8005bee:	bf00      	nop

08005bf0 <__aeabi_fcmpge>:
 8005bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005bf4:	f7ff ffd2 	bl	8005b9c <__aeabi_cfrcmple>
 8005bf8:	bf94      	ite	ls
 8005bfa:	2001      	movls	r0, #1
 8005bfc:	2000      	movhi	r0, #0
 8005bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8005c02:	bf00      	nop

08005c04 <__aeabi_fcmpgt>:
 8005c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005c08:	f7ff ffc8 	bl	8005b9c <__aeabi_cfrcmple>
 8005c0c:	bf34      	ite	cc
 8005c0e:	2001      	movcc	r0, #1
 8005c10:	2000      	movcs	r0, #0
 8005c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8005c16:	bf00      	nop

08005c18 <__aeabi_fcmpun>:
 8005c18:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8005c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8005c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005c24:	d102      	bne.n	8005c2c <__aeabi_fcmpun+0x14>
 8005c26:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8005c2a:	d108      	bne.n	8005c3e <__aeabi_fcmpun+0x26>
 8005c2c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8005c30:	d102      	bne.n	8005c38 <__aeabi_fcmpun+0x20>
 8005c32:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8005c36:	d102      	bne.n	8005c3e <__aeabi_fcmpun+0x26>
 8005c38:	f04f 0000 	mov.w	r0, #0
 8005c3c:	4770      	bx	lr
 8005c3e:	f04f 0001 	mov.w	r0, #1
 8005c42:	4770      	bx	lr

08005c44 <__aeabi_d2lz>:
 8005c44:	b538      	push	{r3, r4, r5, lr}
 8005c46:	2200      	movs	r2, #0
 8005c48:	2300      	movs	r3, #0
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	460d      	mov	r5, r1
 8005c4e:	f7ff febf 	bl	80059d0 <__aeabi_dcmplt>
 8005c52:	b928      	cbnz	r0, 8005c60 <__aeabi_d2lz+0x1c>
 8005c54:	4620      	mov	r0, r4
 8005c56:	4629      	mov	r1, r5
 8005c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c5c:	f000 b80a 	b.w	8005c74 <__aeabi_d2ulz>
 8005c60:	4620      	mov	r0, r4
 8005c62:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8005c66:	f000 f805 	bl	8005c74 <__aeabi_d2ulz>
 8005c6a:	4240      	negs	r0, r0
 8005c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005c70:	bd38      	pop	{r3, r4, r5, pc}
 8005c72:	bf00      	nop

08005c74 <__aeabi_d2ulz>:
 8005c74:	b5d0      	push	{r4, r6, r7, lr}
 8005c76:	2200      	movs	r2, #0
 8005c78:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca8 <__aeabi_d2ulz+0x34>)
 8005c7a:	4606      	mov	r6, r0
 8005c7c:	460f      	mov	r7, r1
 8005c7e:	f7ff fc35 	bl	80054ec <__aeabi_dmul>
 8005c82:	f7ff fee3 	bl	8005a4c <__aeabi_d2uiz>
 8005c86:	4604      	mov	r4, r0
 8005c88:	f7ff fbb6 	bl	80053f8 <__aeabi_ui2d>
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	4b07      	ldr	r3, [pc, #28]	@ (8005cac <__aeabi_d2ulz+0x38>)
 8005c90:	f7ff fc2c 	bl	80054ec <__aeabi_dmul>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	4630      	mov	r0, r6
 8005c9a:	4639      	mov	r1, r7
 8005c9c:	f7ff fa6e 	bl	800517c <__aeabi_dsub>
 8005ca0:	f7ff fed4 	bl	8005a4c <__aeabi_d2uiz>
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	bdd0      	pop	{r4, r6, r7, pc}
 8005ca8:	3df00000 	.word	0x3df00000
 8005cac:	41f00000 	.word	0x41f00000

08005cb0 <cliModem.part.0.isra.0>:
        }
        cliMain();
    }
}

void cliModem(cli_args_t *args)
 8005cb0:	b510      	push	{r4, lr}
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	f5ad 6d99 	sub.w	sp, sp, #1224	@ 0x4c8
  if (args->argc == 2 && args->isStr(0, "down"))
  {
    uint32_t addr_offset;
    uint32_t addr;

    addr_offset = args->getData(1);
 8005cb8:	2001      	movs	r0, #1
 8005cba:	4798      	blx	r3

    keep_loop = true;

    ymodemOpen(&ymodem, _DEF_UART1);
 8005cbc:	2100      	movs	r1, #0
    addr_offset = args->getData(1);
 8005cbe:	4604      	mov	r4, r0
    ymodemOpen(&ymodem, _DEF_UART1);
 8005cc0:	4668      	mov	r0, sp
 8005cc2:	f001 f8b3 	bl	8006e2c <ymodemOpen>

    while(keep_loop)
    {
      if (ymodemReceive(&ymodem) == true)
 8005cc6:	4668      	mov	r0, sp
 8005cc8:	f001 f90a 	bl	8006ee0 <ymodemReceive>
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	d0fa      	beq.n	8005cc6 <cliModem.part.0.isra.0+0x16>
      {
        switch(ymodem.type)
 8005cd0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d011      	beq.n	8005cfc <cliModem.part.0.isra.0+0x4c>
 8005cd8:	d90b      	bls.n	8005cf2 <cliModem.part.0.isra.0+0x42>
 8005cda:	1e9a      	subs	r2, r3, #2
 8005cdc:	2a02      	cmp	r2, #2
 8005cde:	d8f2      	bhi.n	8005cc6 <cliModem.part.0.isra.0+0x16>
            break;
        }
      }
    }

    if (ymodem.type == YMODEM_TYPE_END)
 8005ce0:	2b02      	cmp	r3, #2
    {
      cliPrintf("Down OK\r\n");
 8005ce2:	bf0c      	ite	eq
 8005ce4:	4809      	ldreq	r0, [pc, #36]	@ (8005d0c <cliModem.part.0.isra.0+0x5c>)
    }
    else
    {
      cliPrintf("Down Fail\r\n");
 8005ce6:	480a      	ldrne	r0, [pc, #40]	@ (8005d10 <cliModem.part.0.isra.0+0x60>)
 8005ce8:	f000 faec 	bl	80062c4 <cliPrintf>

  if (ret != true)
  {
    cliPrintf("modem down [addr] \r\n");
  }
}
 8005cec:	f50d 6d99 	add.w	sp, sp, #1224	@ 0x4c8
 8005cf0:	bd10      	pop	{r4, pc}
            flashErase(addr_offset, ymodem.file_length);
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8005cf6:	f000 fded 	bl	80068d4 <flashErase>
            break;
 8005cfa:	e7e4      	b.n	8005cc6 <cliModem.part.0.isra.0+0x16>
            addr = addr_offset + ymodem.file_addr;
 8005cfc:	9827      	ldr	r0, [sp, #156]	@ 0x9c
            flashWrite(addr, ymodem.file_buf, ymodem.file_buf_length);
 8005cfe:	f8bd 20ac 	ldrh.w	r2, [sp, #172]	@ 0xac
 8005d02:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8005d04:	4420      	add	r0, r4
 8005d06:	f000 fe33 	bl	8006970 <flashWrite>
            break;
 8005d0a:	e7dc      	b.n	8005cc6 <cliModem.part.0.isra.0+0x16>
 8005d0c:	0800e3e0 	.word	0x0800e3e0
 8005d10:	0800e3ea 	.word	0x0800e3ea

08005d14 <cliModem>:
  if (args->argc == 2 && args->isStr(0, "down"))
 8005d14:	8803      	ldrh	r3, [r0, #0]
{
 8005d16:	b510      	push	{r4, lr}
  if (args->argc == 2 && args->isStr(0, "down"))
 8005d18:	2b02      	cmp	r3, #2
{
 8005d1a:	4604      	mov	r4, r0
  if (args->argc == 2 && args->isStr(0, "down"))
 8005d1c:	d109      	bne.n	8005d32 <cliModem+0x1e>
 8005d1e:	6943      	ldr	r3, [r0, #20]
 8005d20:	4906      	ldr	r1, [pc, #24]	@ (8005d3c <cliModem+0x28>)
 8005d22:	2000      	movs	r0, #0
 8005d24:	4798      	blx	r3
 8005d26:	b120      	cbz	r0, 8005d32 <cliModem+0x1e>
 8005d28:	68a0      	ldr	r0, [r4, #8]
}
 8005d2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d2e:	f7ff bfbf 	b.w	8005cb0 <cliModem.part.0.isra.0>
    cliPrintf("modem down [addr] \r\n");
 8005d32:	4803      	ldr	r0, [pc, #12]	@ (8005d40 <cliModem+0x2c>)
}
 8005d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cliPrintf("modem down [addr] \r\n");
 8005d38:	f000 bac4 	b.w	80062c4 <cliPrintf>
 8005d3c:	0800e3f6 	.word	0x0800e3f6
 8005d40:	0800e3fb 	.word	0x0800e3fb

08005d44 <apInit>:
{
 8005d44:	b508      	push	{r3, lr}
    uartOpen(_DEF_UART1, 57600); // USB
 8005d46:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	f000 ff04 	bl	8006b58 <uartOpen>
    uartOpen(_DEF_UART2, 57600); // UART
 8005d50:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8005d54:	2001      	movs	r0, #1
 8005d56:	f000 feff 	bl	8006b58 <uartOpen>
    cliOpen(_DEF_UART1, 57600);
 8005d5a:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8005d5e:	2000      	movs	r0, #0
 8005d60:	f000 fa4a 	bl	80061f8 <cliOpen>
}
 8005d64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    cliAdd("modem", cliModem);
 8005d68:	4901      	ldr	r1, [pc, #4]	@ (8005d70 <apInit+0x2c>)
 8005d6a:	4802      	ldr	r0, [pc, #8]	@ (8005d74 <apInit+0x30>)
 8005d6c:	f000 bd48 	b.w	8006800 <cliAdd>
 8005d70:	08005d15 	.word	0x08005d15
 8005d74:	0800e57f 	.word	0x0800e57f

08005d78 <apMain>:
{
 8005d78:	b510      	push	{r4, lr}
    pre_time = millis();
 8005d7a:	f000 f812 	bl	8005da2 <millis>
 8005d7e:	4604      	mov	r4, r0
        if (millis() - pre_time >= 500)
 8005d80:	f000 f80f 	bl	8005da2 <millis>
 8005d84:	1b00      	subs	r0, r0, r4
 8005d86:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 8005d8a:	d305      	bcc.n	8005d98 <apMain+0x20>
            pre_time = millis();
 8005d8c:	f000 f809 	bl	8005da2 <millis>
 8005d90:	4604      	mov	r4, r0
            ledToggle(_DEF_LED1);
 8005d92:	2000      	movs	r0, #0
 8005d94:	f000 fe42 	bl	8006a1c <ledToggle>
        cliMain();
 8005d98:	f000 fb40 	bl	800641c <cliMain>
        if (millis() - pre_time >= 500)
 8005d9c:	e7f0      	b.n	8005d80 <apMain+0x8>

08005d9e <delay>:
    else
    {
        HAL_Delay(ms);
    }
#else
    HAL_Delay(ms);
 8005d9e:	f001 ba79 	b.w	8007294 <HAL_Delay>

08005da2 <millis>:
#endif
}

uint32_t millis(void)
{
    return HAL_GetTick();
 8005da2:	f001 ba71 	b.w	8007288 <HAL_GetTick>

08005da6 <__io_putchar>:
}

int __io_putchar(int ch)
{
 8005da6:	b507      	push	{r0, r1, r2, lr}
    // USB로 printf 캐릭터 전송
    uartWrite(_DEF_UART2, (uint8_t *)&ch, 1);
 8005da8:	2201      	movs	r2, #1
{
 8005daa:	9001      	str	r0, [sp, #4]
    uartWrite(_DEF_UART2, (uint8_t *)&ch, 1);
 8005dac:	a901      	add	r1, sp, #4
 8005dae:	4610      	mov	r0, r2
 8005db0:	f000 ff58 	bl	8006c64 <uartWrite>
    return 1;
}
 8005db4:	2001      	movs	r0, #1
 8005db6:	b003      	add	sp, #12
 8005db8:	f85d fb04 	ldr.w	pc, [sp], #4

08005dbc <SystemClock_Config>:

void SystemClock_Config(void)
{
 8005dbc:	b510      	push	{r4, lr}
 8005dbe:	b094      	sub	sp, #80	@ 0x50
    RCC_OscInitTypeDef RCC_OscInitStruct   = {0};
 8005dc0:	2214      	movs	r2, #20
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	a80c      	add	r0, sp, #48	@ 0x30
 8005dc6:	f006 fa5b 	bl	800c280 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct   = {0};
 8005dca:	2214      	movs	r2, #20
 8005dcc:	2100      	movs	r1, #0
 8005dce:	eb0d 0002 	add.w	r0, sp, r2
 8005dd2:	f006 fa55 	bl	800c280 <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005dd6:	2210      	movs	r2, #16
 8005dd8:	2100      	movs	r1, #0
 8005dda:	a801      	add	r0, sp, #4
 8005ddc:	f006 fa50 	bl	800c280 <memset>
        RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
    RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
    RCC_OscInitStruct.LSEState       = RCC_LSE_ON;
    RCC_OscInitStruct.HSIState       = RCC_HSI_ON;
    RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 8005de0:	2402      	movs	r4, #2
    RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 8005de2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005de6:	2105      	movs	r1, #5
    RCC_OscInitStruct.LSEState       = RCC_LSE_ON;
 8005de8:	2201      	movs	r2, #1
    RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 8005dea:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
    RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 8005dee:	e9cd 4311 	strd	r4, r3, [sp, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLMUL     = RCC_PLL_MUL9;
 8005df2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005df6:	a80a      	add	r0, sp, #40	@ 0x28
    RCC_OscInitStruct.HSIState       = RCC_HSI_ON;
 8005df8:	e9cd 220d 	strd	r2, r2, [sp, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLMUL     = RCC_PLL_MUL9;
 8005dfc:	9313      	str	r3, [sp, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005dfe:	f002 fd87 	bl	8008910 <HAL_RCC_OscConfig>
 8005e02:	b108      	cbz	r0, 8005e08 <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005e04:	b672      	cpsid	i
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state
     */
    __disable_irq();
    while (1)
 8005e06:	e7fe      	b.n	8005e06 <SystemClock_Config+0x4a>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8005e08:	230f      	movs	r3, #15
    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 8005e0a:	e9cd 3405 	strd	r3, r4, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005e0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8005e12:	9007      	str	r0, [sp, #28]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005e14:	e9cd 3008 	strd	r3, r0, [sp, #32]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005e18:	4621      	mov	r1, r4
 8005e1a:	a805      	add	r0, sp, #20
 8005e1c:	f002 ff3a 	bl	8008c94 <HAL_RCC_ClockConfig>
 8005e20:	b108      	cbz	r0, 8005e26 <SystemClock_Config+0x6a>
 8005e22:	b672      	cpsid	i
    while (1)
 8005e24:	e7fe      	b.n	8005e24 <SystemClock_Config+0x68>
    PeriphClkInit.RTCClockSelection    = RCC_RTCCLKSOURCE_LSE;
 8005e26:	2211      	movs	r2, #17
 8005e28:	f44f 7380 	mov.w	r3, #256	@ 0x100
    PeriphClkInit.UsbClockSelection    = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8005e2c:	9004      	str	r0, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e2e:	a801      	add	r0, sp, #4
    PeriphClkInit.RTCClockSelection    = RCC_RTCCLKSOURCE_LSE;
 8005e30:	e9cd 2301 	strd	r2, r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e34:	f002 ffea 	bl	8008e0c <HAL_RCCEx_PeriphCLKConfig>
 8005e38:	b108      	cbz	r0, 8005e3e <SystemClock_Config+0x82>
 8005e3a:	b672      	cpsid	i
    while (1)
 8005e3c:	e7fe      	b.n	8005e3c <SystemClock_Config+0x80>
}
 8005e3e:	b014      	add	sp, #80	@ 0x50
 8005e40:	bd10      	pop	{r4, pc}
	...

08005e44 <bspInit>:
{
 8005e44:	b570      	push	{r4, r5, r6, lr}
 8005e46:	b088      	sub	sp, #32
    HAL_Init();
 8005e48:	f001 fa00 	bl	800724c <HAL_Init>
    SystemClock_Config();
 8005e4c:	f7ff ffb6 	bl	8005dbc <SystemClock_Config>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e50:	4b18      	ldr	r3, [pc, #96]	@ (8005eb4 <bspInit+0x70>)
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_OD;
 8005e52:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e56:	699a      	ldr	r2, [r3, #24]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e58:	2600      	movs	r6, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e5a:	f042 0210 	orr.w	r2, r2, #16
 8005e5e:	619a      	str	r2, [r3, #24]
 8005e60:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e62:	4c15      	ldr	r4, [pc, #84]	@ (8005eb8 <bspInit+0x74>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e64:	f002 0210 	and.w	r2, r2, #16
 8005e68:	9201      	str	r2, [sp, #4]
 8005e6a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e6c:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e6e:	4620      	mov	r0, r4
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e70:	f042 0220 	orr.w	r2, r2, #32
 8005e74:	619a      	str	r2, [r3, #24]
 8005e76:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e78:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e7a:	f002 0220 	and.w	r2, r2, #32
 8005e7e:	9202      	str	r2, [sp, #8]
 8005e80:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e82:	699a      	ldr	r2, [r3, #24]
 8005e84:	f042 0204 	orr.w	r2, r2, #4
 8005e88:	619a      	str	r2, [r3, #24]
 8005e8a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e8c:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e8e:	f003 0304 	and.w	r3, r3, #4
 8005e92:	9303      	str	r3, [sp, #12]
 8005e94:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_OD;
 8005e96:	2311      	movs	r3, #17
 8005e98:	e9cd 5304 	strd	r5, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ea0:	f001 fd38 	bl	8007914 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8005ea4:	4632      	mov	r2, r6
 8005ea6:	4629      	mov	r1, r5
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	f001 fe79 	bl	8007ba0 <HAL_GPIO_WritePin>
}
 8005eae:	b008      	add	sp, #32
 8005eb0:	bd70      	pop	{r4, r5, r6, pc}
 8005eb2:	bf00      	nop
 8005eb4:	40021000 	.word	0x40021000
 8005eb8:	40010800 	.word	0x40010800

08005ebc <Error_Handler>:
 8005ebc:	b672      	cpsid	i
    while (1)
 8005ebe:	e7fe      	b.n	8005ebe <Error_Handler+0x2>

08005ec0 <HAL_MspInit>:

    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_AFIO_CLK_ENABLE();
 8005ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8005efc <HAL_MspInit+0x3c>)
{
 8005ec2:	b082      	sub	sp, #8
    __HAL_RCC_AFIO_CLK_ENABLE();
 8005ec4:	699a      	ldr	r2, [r3, #24]
 8005ec6:	f042 0201 	orr.w	r2, r2, #1
 8005eca:	619a      	str	r2, [r3, #24]
 8005ecc:	699a      	ldr	r2, [r3, #24]
 8005ece:	f002 0201 	and.w	r2, r2, #1
 8005ed2:	9200      	str	r2, [sp, #0]
 8005ed4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ed6:	69da      	ldr	r2, [r3, #28]
 8005ed8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005edc:	61da      	str	r2, [r3, #28]
 8005ede:	69db      	ldr	r3, [r3, #28]

    /* System interrupt init*/

    /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
     */
    __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005ee0:	4a07      	ldr	r2, [pc, #28]	@ (8005f00 <HAL_MspInit+0x40>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ee6:	9301      	str	r3, [sp, #4]
 8005ee8:	9b01      	ldr	r3, [sp, #4]
    __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005eea:	6853      	ldr	r3, [r2, #4]
 8005eec:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8005ef0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005ef4:	6053      	str	r3, [r2, #4]

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 8005ef6:	b002      	add	sp, #8
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	40021000 	.word	0x40021000
 8005f00:	40010000 	.word	0x40010000

08005f04 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005f04:	e7fe      	b.n	8005f04 <NMI_Handler>

08005f06 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005f06:	e7fe      	b.n	8005f06 <HardFault_Handler>

08005f08 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005f08:	e7fe      	b.n	8005f08 <MemManage_Handler>

08005f0a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005f0a:	e7fe      	b.n	8005f0a <BusFault_Handler>

08005f0c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005f0c:	e7fe      	b.n	8005f0c <UsageFault_Handler>

08005f0e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005f0e:	4770      	bx	lr

08005f10 <DebugMon_Handler>:


/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8005f10:	4770      	bx	lr

08005f12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */

void PendSV_Handler(void)
 8005f12:	4770      	bx	lr

08005f14 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f14:	f001 b9ac 	b.w	8007270 <HAL_IncTick>

08005f18 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005f18:	4801      	ldr	r0, [pc, #4]	@ (8005f20 <DMA1_Channel5_IRQHandler+0x8>)
 8005f1a:	f001 bb41 	b.w	80075a0 <HAL_DMA_IRQHandler>
 8005f1e:	bf00      	nop
 8005f20:	20000934 	.word	0x20000934

08005f24 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005f24:	4801      	ldr	r0, [pc, #4]	@ (8005f2c <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8005f26:	f001 bed9 	b.w	8007cdc <HAL_PCD_IRQHandler>
 8005f2a:	bf00      	nop
 8005f2c:	200017fc 	.word	0x200017fc

08005f30 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005f30:	4801      	ldr	r0, [pc, #4]	@ (8005f38 <USART1_IRQHandler+0x8>)
 8005f32:	f003 bb03 	b.w	800953c <HAL_UART_IRQHandler>
 8005f36:	bf00      	nop
 8005f38:	20000978 	.word	0x20000978

08005f3c <_getpid>:
}

int _getpid(void)
{
    return 1;
}
 8005f3c:	2001      	movs	r0, #1
 8005f3e:	4770      	bx	lr

08005f40 <_kill>:

int _kill(int pid, int sig)
{
 8005f40:	b508      	push	{r3, lr}
    (void)pid;
    (void)sig;
    errno = EINVAL;
 8005f42:	f006 fa29 	bl	800c398 <__errno>
 8005f46:	2316      	movs	r3, #22
 8005f48:	6003      	str	r3, [r0, #0]
    return -1;
}
 8005f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4e:	bd08      	pop	{r3, pc}

08005f50 <_exit>:

void _exit(int status)
{
 8005f50:	b508      	push	{r3, lr}
    errno = EINVAL;
 8005f52:	f006 fa21 	bl	800c398 <__errno>
 8005f56:	2316      	movs	r3, #22
 8005f58:	6003      	str	r3, [r0, #0]
    _kill(status, -1);
    while (1)
 8005f5a:	e7fe      	b.n	8005f5a <_exit+0xa>

08005f5c <_read>:
    {
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005f5c:	b570      	push	{r4, r5, r6, lr}
 8005f5e:	460d      	mov	r5, r1
 8005f60:	4614      	mov	r4, r2
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f62:	460e      	mov	r6, r1
 8005f64:	1b73      	subs	r3, r6, r5
 8005f66:	429c      	cmp	r4, r3
 8005f68:	dc01      	bgt.n	8005f6e <_read+0x12>
    {
        *ptr++ = __io_getchar();
    }

    return len;
}
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	bd70      	pop	{r4, r5, r6, pc}
        *ptr++ = __io_getchar();
 8005f6e:	f3af 8000 	nop.w
 8005f72:	f806 0b01 	strb.w	r0, [r6], #1
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f76:	e7f5      	b.n	8005f64 <_read+0x8>

08005f78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005f78:	b570      	push	{r4, r5, r6, lr}
 8005f7a:	460d      	mov	r5, r1
 8005f7c:	4614      	mov	r4, r2
    (void)file;
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f7e:	460e      	mov	r6, r1
 8005f80:	1b73      	subs	r3, r6, r5
 8005f82:	429c      	cmp	r4, r3
 8005f84:	dc01      	bgt.n	8005f8a <_write+0x12>
    {
        __io_putchar(*ptr++);
    }
    return len;
}
 8005f86:	4620      	mov	r0, r4
 8005f88:	bd70      	pop	{r4, r5, r6, pc}
        __io_putchar(*ptr++);
 8005f8a:	f816 0b01 	ldrb.w	r0, [r6], #1
 8005f8e:	f7ff ff0a 	bl	8005da6 <__io_putchar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f92:	e7f5      	b.n	8005f80 <_write+0x8>

08005f94 <_close>:

int _close(int file)
{
    (void)file;
    return -1;
}
 8005f94:	f04f 30ff 	mov.w	r0, #4294967295
 8005f98:	4770      	bx	lr

08005f9a <_fstat>:

int _fstat(int file, struct stat *st)
{
    (void)file;
    st->st_mode = S_IFCHR;
 8005f9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    return 0;
}
 8005f9e:	2000      	movs	r0, #0
    st->st_mode = S_IFCHR;
 8005fa0:	604b      	str	r3, [r1, #4]
}
 8005fa2:	4770      	bx	lr

08005fa4 <_isatty>:

int _isatty(int file)
{
    (void)file;
    return 1;
}
 8005fa4:	2001      	movs	r0, #1
 8005fa6:	4770      	bx	lr

08005fa8 <_lseek>:
{
    (void)file;
    (void)ptr;
    (void)dir;
    return 0;
}
 8005fa8:	2000      	movs	r0, #0
 8005faa:	4770      	bx	lr

08005fac <_sbrk>:
        (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
    const uint8_t *max_heap = (uint8_t *)stack_limit;
    uint8_t *prev_heap_end;

    /* Initialize heap end at first call */
    if (NULL == __sbrk_heap_end)
 8005fac:	4a0b      	ldr	r2, [pc, #44]	@ (8005fdc <_sbrk+0x30>)
{
 8005fae:	4603      	mov	r3, r0
    if (NULL == __sbrk_heap_end)
 8005fb0:	6811      	ldr	r1, [r2, #0]
{
 8005fb2:	b510      	push	{r4, lr}
    if (NULL == __sbrk_heap_end)
 8005fb4:	b909      	cbnz	r1, 8005fba <_sbrk+0xe>
    {
        __sbrk_heap_end = &_end;
 8005fb6:	490a      	ldr	r1, [pc, #40]	@ (8005fe0 <_sbrk+0x34>)
 8005fb8:	6011      	str	r1, [r2, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if (__sbrk_heap_end + incr > max_heap)
 8005fba:	6810      	ldr	r0, [r2, #0]
 8005fbc:	4909      	ldr	r1, [pc, #36]	@ (8005fe4 <_sbrk+0x38>)
 8005fbe:	4c0a      	ldr	r4, [pc, #40]	@ (8005fe8 <_sbrk+0x3c>)
 8005fc0:	4403      	add	r3, r0
 8005fc2:	1b09      	subs	r1, r1, r4
 8005fc4:	428b      	cmp	r3, r1
 8005fc6:	d906      	bls.n	8005fd6 <_sbrk+0x2a>
    {
        errno = ENOMEM;
 8005fc8:	f006 f9e6 	bl	800c398 <__errno>
 8005fcc:	230c      	movs	r3, #12
 8005fce:	6003      	str	r3, [r0, #0]
        return (void *)-1;
 8005fd0:	f04f 30ff 	mov.w	r0, #4294967295

    prev_heap_end = __sbrk_heap_end;
    __sbrk_heap_end += incr;

    return (void *)prev_heap_end;
}
 8005fd4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end += incr;
 8005fd6:	6013      	str	r3, [r2, #0]
    return (void *)prev_heap_end;
 8005fd8:	e7fc      	b.n	8005fd4 <_sbrk+0x28>
 8005fda:	bf00      	nop
 8005fdc:	20000374 	.word	0x20000374
 8005fe0:	20001c20 	.word	0x20001c20
 8005fe4:	20005000 	.word	0x20005000
 8005fe8:	00000400 	.word	0x00000400

08005fec <SystemInit>:
#endif

    /* Configure the Vector Table location
     * -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR = VECT_TAB_BASE_ADDRESS |
 8005fec:	4b01      	ldr	r3, [pc, #4]	@ (8005ff4 <SystemInit+0x8>)
 8005fee:	4a02      	ldr	r2, [pc, #8]	@ (8005ff8 <SystemInit+0xc>)
 8005ff0:	609a      	str	r2, [r3, #8]
                VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ff2:	4770      	bx	lr
 8005ff4:	e000ed00 	.word	0xe000ed00
 8005ff8:	08005000 	.word	0x08005000

08005ffc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005ffc:	f7ff fff6 	bl	8005fec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006000:	480b      	ldr	r0, [pc, #44]	@ (8006030 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8006002:	490c      	ldr	r1, [pc, #48]	@ (8006034 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8006004:	4a0c      	ldr	r2, [pc, #48]	@ (8006038 <LoopFillZerobss+0x16>)
  movs r3, #0
 8006006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006008:	e002      	b.n	8006010 <LoopCopyDataInit>

0800600a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800600a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800600c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800600e:	3304      	adds	r3, #4

08006010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006014:	d3f9      	bcc.n	800600a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006016:	4a09      	ldr	r2, [pc, #36]	@ (800603c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006018:	4c09      	ldr	r4, [pc, #36]	@ (8006040 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800601a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800601c:	e001      	b.n	8006022 <LoopFillZerobss>

0800601e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800601e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006020:	3204      	adds	r2, #4

08006022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006024:	d3fb      	bcc.n	800601e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006026:	f006 f9bd 	bl	800c3a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800602a:	f005 f8fd 	bl	800b228 <main>
  bx lr
 800602e:	4770      	bx	lr
  ldr r0, =_sdata
 8006030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006034:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8006038:	0800ea30 	.word	0x0800ea30
  ldr r2, =_sbss
 800603c:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8006040:	20001c20 	.word	0x20001c20

08006044 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006044:	e7fe      	b.n	8006044 <ADC1_2_IRQHandler>

08006046 <qbufferCreate>:

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
    bool ret = true;

    p_node->in    = 0;
 8006046:	2300      	movs	r3, #0
    p_node->out   = 0;
    p_node->len   = length;
    p_node->p_buf = p_buf;
 8006048:	e9c0 2102 	strd	r2, r1, [r0, #8]
    p_node->out   = 0;
 800604c:	e9c0 3300 	strd	r3, r3, [r0]

    return ret;
}
 8006050:	2001      	movs	r0, #1
 8006052:	4770      	bx	lr

08006054 <qbufferRead>:

    return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8006054:	b530      	push	{r4, r5, lr}
 8006056:	440a      	add	r2, r1
    bool ret = true;

    for (int i = 0; i < length; i++)
 8006058:	4291      	cmp	r1, r2
 800605a:	d101      	bne.n	8006060 <qbufferRead+0xc>
    bool ret = true;
 800605c:	2001      	movs	r0, #1
            break;
        }
    }

    return ret;
}
 800605e:	bd30      	pop	{r4, r5, pc}
        if (p_node->p_buf != NULL)
 8006060:	68c3      	ldr	r3, [r0, #12]
 8006062:	b113      	cbz	r3, 800606a <qbufferRead+0x16>
            p_data[i] = p_node->p_buf[p_node->out];
 8006064:	6844      	ldr	r4, [r0, #4]
 8006066:	5d1b      	ldrb	r3, [r3, r4]
 8006068:	700b      	strb	r3, [r1, #0]
        if (p_node->out != p_node->in)
 800606a:	6843      	ldr	r3, [r0, #4]
 800606c:	6804      	ldr	r4, [r0, #0]
 800606e:	3101      	adds	r1, #1
 8006070:	42a3      	cmp	r3, r4
 8006072:	d007      	beq.n	8006084 <qbufferRead+0x30>
            p_node->out = (p_node->out + 1) % p_node->len;
 8006074:	6884      	ldr	r4, [r0, #8]
 8006076:	3301      	adds	r3, #1
 8006078:	fbb3 f5f4 	udiv	r5, r3, r4
 800607c:	fb04 3315 	mls	r3, r4, r5, r3
 8006080:	6043      	str	r3, [r0, #4]
    for (int i = 0; i < length; i++)
 8006082:	e7e9      	b.n	8006058 <qbufferRead+0x4>
            ret = false;
 8006084:	2000      	movs	r0, #0
 8006086:	e7ea      	b.n	800605e <qbufferRead+0xa>

08006088 <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
    uint32_t ret;

    ret = (p_node->in - p_node->out) % p_node->len;
 8006088:	e9d0 3200 	ldrd	r3, r2, [r0]
 800608c:	1a9b      	subs	r3, r3, r2
 800608e:	6882      	ldr	r2, [r0, #8]
 8006090:	fbb3 f0f2 	udiv	r0, r3, r2

    return ret;
}
 8006094:	fb02 3010 	mls	r0, r2, r0, r3
 8006098:	4770      	bx	lr

0800609a <cliToUpper>:

    uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
}

void cliToUpper(char *str)
{
 800609a:	2200      	movs	r2, #0
 800609c:	b510      	push	{r4, lr}
 800609e:	1e41      	subs	r1, r0, #1
    uint16_t i;
    uint8_t str_ch;

    for (i = 0; i < CLI_CMD_NAME_MAX; i++)
    {
        str_ch = str[i];
 80060a0:	f811 3f01 	ldrb.w	r3, [r1, #1]!

        if (str_ch == 0)
 80060a4:	b16b      	cbz	r3, 80060c2 <cliToUpper+0x28>
        {
            break;
        }

        if ((str_ch >= 'a') && (str_ch <= 'z'))
 80060a6:	f1a3 0461 	sub.w	r4, r3, #97	@ 0x61
 80060aa:	2c19      	cmp	r4, #25
        {
            str_ch = str_ch - 'a' + 'A';
 80060ac:	bf98      	it	ls
 80060ae:	3b20      	subls	r3, #32
    for (i = 0; i < CLI_CMD_NAME_MAX; i++)
 80060b0:	f102 0201 	add.w	r2, r2, #1
            str_ch = str_ch - 'a' + 'A';
 80060b4:	bf98      	it	ls
 80060b6:	b2db      	uxtbls	r3, r3
    for (i = 0; i < CLI_CMD_NAME_MAX; i++)
 80060b8:	2a10      	cmp	r2, #16
        }
        str[i] = str_ch;
 80060ba:	700b      	strb	r3, [r1, #0]
    for (i = 0; i < CLI_CMD_NAME_MAX; i++)
 80060bc:	d1f0      	bne.n	80060a0 <cliToUpper+0x6>
    }

    if (i == CLI_CMD_NAME_MAX)
    {
        str[i - 1] = 0;
 80060be:	2300      	movs	r3, #0
 80060c0:	73c3      	strb	r3, [r0, #15]
    }
}
 80060c2:	bd10      	pop	{r4, pc}

080060c4 <cliArgsGetStr>:
char *cliArgsGetStr(uint8_t index)
{
    char *ret    = NULL;
    cli_t *p_cli = &cli_node;

    if (index >= p_cli->cmd_args.argc)
 80060c4:	4b05      	ldr	r3, [pc, #20]	@ (80060dc <cliArgsGetStr+0x18>)
 80060c6:	f8b3 238c 	ldrh.w	r2, [r3, #908]	@ 0x38c
 80060ca:	4282      	cmp	r2, r0
    {
        return 0;
    }

    ret = p_cli->cmd_args.argv[index];
 80060cc:	bf86      	itte	hi
 80060ce:	f8d3 3390 	ldrhi.w	r3, [r3, #912]	@ 0x390
 80060d2:	f853 0020 	ldrhi.w	r0, [r3, r0, lsl #2]
        return 0;
 80060d6:	2000      	movls	r0, #0

    return ret;
}
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	20000378 	.word	0x20000378

080060e0 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 80060e0:	b508      	push	{r3, lr}
 80060e2:	4603      	mov	r3, r0
    bool ret     = false;
    cli_t *p_cli = &cli_node;

    if (index >= p_cli->cmd_args.argc)
 80060e4:	4a08      	ldr	r2, [pc, #32]	@ (8006108 <cliArgsIsStr+0x28>)
{
 80060e6:	4608      	mov	r0, r1
    if (index >= p_cli->cmd_args.argc)
 80060e8:	f8b2 138c 	ldrh.w	r1, [r2, #908]	@ 0x38c
 80060ec:	4299      	cmp	r1, r3
 80060ee:	d909      	bls.n	8006104 <cliArgsIsStr+0x24>
    {
        return 0;
    }

    if (strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 80060f0:	f8d2 2390 	ldr.w	r2, [r2, #912]	@ 0x390
 80060f4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80060f8:	f7ff f82a 	bl	8005150 <strcmp>
 80060fc:	fab0 f080 	clz	r0, r0
 8006100:	0940      	lsrs	r0, r0, #5
    {
        ret = true;
    }

    return ret;
}
 8006102:	bd08      	pop	{r3, pc}
        return 0;
 8006104:	2000      	movs	r0, #0
 8006106:	e7fc      	b.n	8006102 <cliArgsIsStr+0x22>
 8006108:	20000378 	.word	0x20000378

0800610c <cliArgsGetFloat>:
    if (index >= p_cli->cmd_args.argc)
 800610c:	4b06      	ldr	r3, [pc, #24]	@ (8006128 <cliArgsGetFloat+0x1c>)
 800610e:	f8b3 238c 	ldrh.w	r2, [r3, #908]	@ 0x38c
 8006112:	4282      	cmp	r2, r0
 8006114:	d906      	bls.n	8006124 <cliArgsGetFloat+0x18>
        (float)strtof((const char *)p_cli->cmd_args.argv[index], (char **)NULL);
 8006116:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 800611a:	2100      	movs	r1, #0
 800611c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006120:	f005 be86 	b.w	800be30 <strtof>
}
 8006124:	2000      	movs	r0, #0
 8006126:	4770      	bx	lr
 8006128:	20000378 	.word	0x20000378

0800612c <cliArgsGetData>:
    if (index >= p_cli->cmd_args.argc)
 800612c:	4b07      	ldr	r3, [pc, #28]	@ (800614c <cliArgsGetData+0x20>)
 800612e:	f8b3 238c 	ldrh.w	r2, [r3, #908]	@ 0x38c
 8006132:	4282      	cmp	r2, r0
 8006134:	d907      	bls.n	8006146 <cliArgsGetData+0x1a>
    ret = (int32_t)strtoul((const char *)p_cli->cmd_args.argv[index],
 8006136:	2200      	movs	r2, #0
 8006138:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 800613c:	4611      	mov	r1, r2
 800613e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006142:	f005 bf3b 	b.w	800bfbc <strtoul>
}
 8006146:	2000      	movs	r0, #0
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	20000378 	.word	0x20000378

08006150 <cliLineChange.constprop.0>:
void cliLineChange(cli_t *p_cli, int8_t key_up)
 8006150:	b570      	push	{r4, r5, r6, lr}
    if (p_cli->hist_line_count == 0)
 8006152:	4c25      	ldr	r4, [pc, #148]	@ (80061e8 <cliLineChange.constprop.0+0x98>)
void cliLineChange(cli_t *p_cli, int8_t key_up)
 8006154:	4605      	mov	r5, r0
    if (p_cli->hist_line_count == 0)
 8006156:	f894 3197 	ldrb.w	r3, [r4, #407]	@ 0x197
 800615a:	2b00      	cmp	r3, #0
 800615c:	d03f      	beq.n	80061de <cliLineChange.constprop.0+0x8e>
    if (p_cli->line.cursor > 0)
 800615e:	f894 2245 	ldrb.w	r2, [r4, #581]	@ 0x245
 8006162:	b11a      	cbz	r2, 800616c <cliLineChange.constprop.0+0x1c>
        uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8006164:	4921      	ldr	r1, [pc, #132]	@ (80061ec <cliLineChange.constprop.0+0x9c>)
 8006166:	7820      	ldrb	r0, [r4, #0]
 8006168:	f000 fd96 	bl	8006c98 <uartPrintf>
    if (p_cli->line.count > 0)
 800616c:	f894 2246 	ldrb.w	r2, [r4, #582]	@ 0x246
 8006170:	b11a      	cbz	r2, 800617a <cliLineChange.constprop.0+0x2a>
        uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8006172:	491f      	ldr	r1, [pc, #124]	@ (80061f0 <cliLineChange.constprop.0+0xa0>)
 8006174:	7820      	ldrb	r0, [r4, #0]
 8006176:	f000 fd8f 	bl	8006c98 <uartPrintf>
    if (key_up == true)
 800617a:	2d01      	cmp	r5, #1
        p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) %
 800617c:	f894 2197 	ldrb.w	r2, [r4, #407]	@ 0x197
    if (key_up == true)
 8006180:	d12e      	bne.n	80061e0 <cliLineChange.constprop.0+0x90>
        if (p_cli->hist_line_new == true)
 8006182:	f894 3194 	ldrb.w	r3, [r4, #404]	@ 0x194
 8006186:	b11b      	cbz	r3, 8006190 <cliLineChange.constprop.0+0x40>
            p_cli->hist_line_i = p_cli->hist_line_last;
 8006188:	f894 3196 	ldrb.w	r3, [r4, #406]	@ 0x196
 800618c:	f884 3195 	strb.w	r3, [r4, #405]	@ 0x195
        p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) %
 8006190:	f994 3195 	ldrsb.w	r3, [r4, #405]	@ 0x195
 8006194:	4413      	add	r3, r2
 8006196:	3b01      	subs	r3, #1
        p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8006198:	fb93 f1f2 	sdiv	r1, r3, r2
 800619c:	fb02 3311 	mls	r3, r2, r1, r3
 80061a0:	b25a      	sxtb	r2, r3
        p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) %
 80061a2:	f884 2195 	strb.w	r2, [r4, #405]	@ 0x195
    p_cli->line        = p_cli->line_buf[change_i];
 80061a6:	2223      	movs	r2, #35	@ 0x23
        change_i           = p_cli->hist_line_i;
 80061a8:	b2db      	uxtb	r3, r3
    p_cli->line        = p_cli->line_buf[change_i];
 80061aa:	fb02 4303 	mla	r3, r2, r3, r4
 80061ae:	4d11      	ldr	r5, [pc, #68]	@ (80061f4 <cliLineChange.constprop.0+0xa4>)
 80061b0:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 80061b4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80061b8:	462e      	mov	r6, r5
 80061ba:	6810      	ldr	r0, [r2, #0]
 80061bc:	6851      	ldr	r1, [r2, #4]
 80061be:	3208      	adds	r2, #8
 80061c0:	c603      	stmia	r6!, {r0, r1}
 80061c2:	429a      	cmp	r2, r3
 80061c4:	4635      	mov	r5, r6
 80061c6:	d1f7      	bne.n	80061b8 <cliLineChange.constprop.0+0x68>
 80061c8:	7893      	ldrb	r3, [r2, #2]
 80061ca:	8811      	ldrh	r1, [r2, #0]
 80061cc:	70b3      	strb	r3, [r6, #2]
 80061ce:	8031      	strh	r1, [r6, #0]
    p_cli->line.cursor = p_cli->line.count;
 80061d0:	f894 3246 	ldrb.w	r3, [r4, #582]	@ 0x246
 80061d4:	f884 3245 	strb.w	r3, [r4, #581]	@ 0x245
    p_cli->hist_line_new = false;
 80061d8:	2300      	movs	r3, #0
 80061da:	f884 3194 	strb.w	r3, [r4, #404]	@ 0x194
}
 80061de:	bd70      	pop	{r4, r5, r6, pc}
        p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 80061e0:	f994 3195 	ldrsb.w	r3, [r4, #405]	@ 0x195
 80061e4:	3301      	adds	r3, #1
 80061e6:	e7d7      	b.n	8006198 <cliLineChange.constprop.0+0x48>
 80061e8:	20000378 	.word	0x20000378
 80061ec:	0800e428 	.word	0x0800e428
 80061f0:	0800e42e 	.word	0x0800e42e
 80061f4:	2000059c 	.word	0x2000059c

080061f8 <cliOpen>:
{
 80061f8:	b510      	push	{r4, lr}
    cli_node.ch   = ch;
 80061fa:	4c03      	ldr	r4, [pc, #12]	@ (8006208 <cliOpen+0x10>)
 80061fc:	7020      	strb	r0, [r4, #0]
    cli_node.baud = baud;
 80061fe:	6061      	str	r1, [r4, #4]
    cli_node.is_open = uartOpen(ch, baud);
 8006200:	f000 fcaa 	bl	8006b58 <uartOpen>
 8006204:	7220      	strb	r0, [r4, #8]
}
 8006206:	bd10      	pop	{r4, pc}
 8006208:	20000378 	.word	0x20000378

0800620c <cliShowLog>:
{
 800620c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (cli_node.is_log == true)
 800620e:	4b23      	ldr	r3, [pc, #140]	@ (800629c <cliShowLog+0x90>)
{
 8006210:	4604      	mov	r4, r0
    if (cli_node.is_log == true)
 8006212:	7a5b      	ldrb	r3, [r3, #9]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d03f      	beq.n	8006298 <cliShowLog+0x8c>
        uartPrintf(p_cli->log_ch, "Cursor  : %d\r\n", p_cli->line.cursor);
 8006218:	f890 2245 	ldrb.w	r2, [r0, #581]	@ 0x245
 800621c:	4920      	ldr	r1, [pc, #128]	@ (80062a0 <cliShowLog+0x94>)
 800621e:	7a80      	ldrb	r0, [r0, #10]
 8006220:	f000 fd3a 	bl	8006c98 <uartPrintf>
        uartPrintf(p_cli->log_ch, "Count   : %d\r\n", p_cli->line.count);
 8006224:	f894 2246 	ldrb.w	r2, [r4, #582]	@ 0x246
 8006228:	491e      	ldr	r1, [pc, #120]	@ (80062a4 <cliShowLog+0x98>)
 800622a:	7aa0      	ldrb	r0, [r4, #10]
 800622c:	f000 fd34 	bl	8006c98 <uartPrintf>
        uartPrintf(p_cli->log_ch, "buf_len : %d\r\n", p_cli->line.buf_len);
 8006230:	f894 2244 	ldrb.w	r2, [r4, #580]	@ 0x244
 8006234:	491c      	ldr	r1, [pc, #112]	@ (80062a8 <cliShowLog+0x9c>)
 8006236:	7aa0      	ldrb	r0, [r4, #10]
 8006238:	f000 fd2e 	bl	8006c98 <uartPrintf>
        uartPrintf(p_cli->log_ch, "buf     : %s\r\n", p_cli->line.buf);
 800623c:	491b      	ldr	r1, [pc, #108]	@ (80062ac <cliShowLog+0xa0>)
 800623e:	f504 7209 	add.w	r2, r4, #548	@ 0x224
 8006242:	7aa0      	ldrb	r0, [r4, #10]
 8006244:	f000 fd28 	bl	8006c98 <uartPrintf>
        uartPrintf(p_cli->log_ch, "line_i  : %d\r\n", p_cli->hist_line_i);
 8006248:	f994 2195 	ldrsb.w	r2, [r4, #405]	@ 0x195
 800624c:	4918      	ldr	r1, [pc, #96]	@ (80062b0 <cliShowLog+0xa4>)
 800624e:	7aa0      	ldrb	r0, [r4, #10]
 8006250:	f000 fd22 	bl	8006c98 <uartPrintf>
        uartPrintf(p_cli->log_ch, "line_lt : %d\r\n", p_cli->hist_line_last);
 8006254:	f894 2196 	ldrb.w	r2, [r4, #406]	@ 0x196
 8006258:	4916      	ldr	r1, [pc, #88]	@ (80062b4 <cliShowLog+0xa8>)
 800625a:	7aa0      	ldrb	r0, [r4, #10]
 800625c:	f000 fd1c 	bl	8006c98 <uartPrintf>
        uartPrintf(p_cli->log_ch, "line_c  : %d\r\n", p_cli->hist_line_count);
 8006260:	f894 2197 	ldrb.w	r2, [r4, #407]	@ 0x197
 8006264:	4914      	ldr	r1, [pc, #80]	@ (80062b8 <cliShowLog+0xac>)
 8006266:	7aa0      	ldrb	r0, [r4, #10]
 8006268:	f000 fd16 	bl	8006c98 <uartPrintf>
        for (int i = 0; i < p_cli->hist_line_count; i++)
 800626c:	2500      	movs	r5, #0
            uartPrintf(p_cli->log_ch, "buf %d   : %s\r\n", i,
 800626e:	4f13      	ldr	r7, [pc, #76]	@ (80062bc <cliShowLog+0xb0>)
 8006270:	f504 76cc 	add.w	r6, r4, #408	@ 0x198
        for (int i = 0; i < p_cli->hist_line_count; i++)
 8006274:	f894 3197 	ldrb.w	r3, [r4, #407]	@ 0x197
            uartPrintf(p_cli->log_ch, "buf %d   : %s\r\n", i,
 8006278:	7aa0      	ldrb	r0, [r4, #10]
        for (int i = 0; i < p_cli->hist_line_count; i++)
 800627a:	429d      	cmp	r5, r3
 800627c:	db04      	blt.n	8006288 <cliShowLog+0x7c>
}
 800627e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        uartPrintf(p_cli->log_ch, "\r\n");
 8006282:	490f      	ldr	r1, [pc, #60]	@ (80062c0 <cliShowLog+0xb4>)
 8006284:	f000 bd08 	b.w	8006c98 <uartPrintf>
            uartPrintf(p_cli->log_ch, "buf %d   : %s\r\n", i,
 8006288:	4633      	mov	r3, r6
 800628a:	462a      	mov	r2, r5
 800628c:	4639      	mov	r1, r7
 800628e:	f000 fd03 	bl	8006c98 <uartPrintf>
        for (int i = 0; i < p_cli->hist_line_count; i++)
 8006292:	3501      	adds	r5, #1
 8006294:	3623      	adds	r6, #35	@ 0x23
 8006296:	e7ed      	b.n	8006274 <cliShowLog+0x68>
}
 8006298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800629a:	bf00      	nop
 800629c:	20000378 	.word	0x20000378
 80062a0:	0800e434 	.word	0x0800e434
 80062a4:	0800e443 	.word	0x0800e443
 80062a8:	0800e452 	.word	0x0800e452
 80062ac:	0800e461 	.word	0x0800e461
 80062b0:	0800e470 	.word	0x0800e470
 80062b4:	0800e47f 	.word	0x0800e47f
 80062b8:	0800e48e 	.word	0x0800e48e
 80062bc:	0800e49d 	.word	0x0800e49d
 80062c0:	0800e5cb 	.word	0x0800e5cb

080062c4 <cliPrintf>:
{
 80062c4:	b40f      	push	{r0, r1, r2, r3}
 80062c6:	b513      	push	{r0, r1, r4, lr}
    len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 80062c8:	4c0a      	ldr	r4, [pc, #40]	@ (80062f4 <cliPrintf+0x30>)
{
 80062ca:	ab04      	add	r3, sp, #16
 80062cc:	f853 2b04 	ldr.w	r2, [r3], #4
    len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 80062d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80062d4:	4620      	mov	r0, r4
    va_start(arg, fmt);
 80062d6:	9301      	str	r3, [sp, #4]
    len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 80062d8:	f005 ffaa 	bl	800c230 <vsniprintf>
    uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 80062dc:	4621      	mov	r1, r4
    len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 80062de:	4602      	mov	r2, r0
    uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 80062e0:	f814 0c11 	ldrb.w	r0, [r4, #-17]
 80062e4:	f000 fcbe 	bl	8006c64 <uartWrite>
}
 80062e8:	b002      	add	sp, #8
 80062ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062ee:	b004      	add	sp, #16
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	20000389 	.word	0x20000389

080062f8 <cliShowList>:

    return ret;
}

void cliShowList(cli_args_t *args)
{
 80062f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cli_t *p_cli = &cli_node;

    cliPrintf("\r\n");
 80062fa:	480e      	ldr	r0, [pc, #56]	@ (8006334 <cliShowList+0x3c>)
 80062fc:	f7ff ffe2 	bl	80062c4 <cliPrintf>
    cliPrintf("---------- cmd list ---------\r\n");
 8006300:	480d      	ldr	r0, [pc, #52]	@ (8006338 <cliShowList+0x40>)
 8006302:	f7ff ffdf 	bl	80062c4 <cliPrintf>

    for (int i = 0; i < p_cli->cmd_count; i++)
 8006306:	2500      	movs	r5, #0
 8006308:	4c0c      	ldr	r4, [pc, #48]	@ (800633c <cliShowList+0x44>)
    {
        cliPrintf(p_cli->cmd_list[i].cmd_str);
        cliPrintf("\r\n");
 800630a:	4f0a      	ldr	r7, [pc, #40]	@ (8006334 <cliShowList+0x3c>)
    for (int i = 0; i < p_cli->cmd_count; i++)
 800630c:	f5a4 7613 	sub.w	r6, r4, #588	@ 0x24c
 8006310:	f8b6 3248 	ldrh.w	r3, [r6, #584]	@ 0x248
 8006314:	42ab      	cmp	r3, r5
 8006316:	dc04      	bgt.n	8006322 <cliShowList+0x2a>
    }

    cliPrintf("-----------------------------\r\n");
}
 8006318:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    cliPrintf("-----------------------------\r\n");
 800631c:	4808      	ldr	r0, [pc, #32]	@ (8006340 <cliShowList+0x48>)
 800631e:	f7ff bfd1 	b.w	80062c4 <cliPrintf>
        cliPrintf(p_cli->cmd_list[i].cmd_str);
 8006322:	4620      	mov	r0, r4
 8006324:	f7ff ffce 	bl	80062c4 <cliPrintf>
        cliPrintf("\r\n");
 8006328:	4638      	mov	r0, r7
 800632a:	f7ff ffcb 	bl	80062c4 <cliPrintf>
    for (int i = 0; i < p_cli->cmd_count; i++)
 800632e:	3501      	adds	r5, #1
 8006330:	3414      	adds	r4, #20
 8006332:	e7ed      	b.n	8006310 <cliShowList+0x18>
 8006334:	0800e5cb 	.word	0x0800e5cb
 8006338:	0800e4ad 	.word	0x0800e4ad
 800633c:	200005c4 	.word	0x200005c4
 8006340:	0800e4cd 	.word	0x0800e4cd

08006344 <cliMemoryDump>:
    unsigned int *addr;
    int idx1, i;
    unsigned int *ascptr;
    unsigned char asc[4];

    int argc    = args->argc;
 8006344:	8803      	ldrh	r3, [r0, #0]
{
 8006346:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char **argv = args->argv;
 800634a:	6844      	ldr	r4, [r0, #4]

    if (args->argc < 1)
 800634c:	b92b      	cbnz	r3, 800635a <cliMemoryDump+0x16>
    {
        cliPrintf(">> md addr [size] \r\n");
 800634e:	482b      	ldr	r0, [pc, #172]	@ (80063fc <cliMemoryDump+0xb8>)
            }
            cliPrintf("|\r\n   ");
        }
        addr++;
    }
}
 8006350:	b003      	add	sp, #12
 8006352:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        cliPrintf(">> md addr [size] \r\n");
 8006356:	f7ff bfb5 	b.w	80062c4 <cliPrintf>
    if (argc > 1)
 800635a:	2b01      	cmp	r3, #1
 800635c:	d015      	beq.n	800638a <cliMemoryDump+0x46>
        size = (int)strtoul((const char *)argv[1], (char **)NULL, (int)0);
 800635e:	2200      	movs	r2, #0
 8006360:	6860      	ldr	r0, [r4, #4]
 8006362:	4611      	mov	r1, r2
 8006364:	f005 fe2a 	bl	800bfbc <strtoul>
 8006368:	4606      	mov	r6, r0
        (unsigned int *)strtoul((const char *)argv[0], (char **)NULL, (int)0);
 800636a:	2200      	movs	r2, #0
 800636c:	6820      	ldr	r0, [r4, #0]
 800636e:	4611      	mov	r1, r2
 8006370:	f005 fe24 	bl	800bfbc <strtoul>
 8006374:	4604      	mov	r4, r0
    cliPrintf("\n   ");
 8006376:	4822      	ldr	r0, [pc, #136]	@ (8006400 <cliMemoryDump+0xbc>)
 8006378:	f7ff ffa4 	bl	80062c4 <cliPrintf>
    addr =
 800637c:	4627      	mov	r7, r4
    for (idx = 0; idx < size; idx++)
 800637e:	2500      	movs	r5, #0
 8006380:	42b5      	cmp	r5, r6
 8006382:	db04      	blt.n	800638e <cliMemoryDump+0x4a>
}
 8006384:	b003      	add	sp, #12
 8006386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int idx, size = 16;
 800638a:	2610      	movs	r6, #16
 800638c:	e7ed      	b.n	800636a <cliMemoryDump+0x26>
        if ((idx % 4) == 0)
 800638e:	f015 0803 	ands.w	r8, r5, #3
 8006392:	d103      	bne.n	800639c <cliMemoryDump+0x58>
            cliPrintf(" 0x%08X: ", (unsigned int)addr);
 8006394:	4639      	mov	r1, r7
 8006396:	481b      	ldr	r0, [pc, #108]	@ (8006404 <cliMemoryDump+0xc0>)
 8006398:	f7ff ff94 	bl	80062c4 <cliPrintf>
        cliPrintf(" 0x%08X", *(addr));
 800639c:	6839      	ldr	r1, [r7, #0]
 800639e:	481a      	ldr	r0, [pc, #104]	@ (8006408 <cliMemoryDump+0xc4>)
 80063a0:	f7ff ff90 	bl	80062c4 <cliPrintf>
        if ((idx % 4) == 3)
 80063a4:	f1b8 0f03 	cmp.w	r8, #3
 80063a8:	d120      	bne.n	80063ec <cliMemoryDump+0xa8>
            cliPrintf("  |");
 80063aa:	4818      	ldr	r0, [pc, #96]	@ (800640c <cliMemoryDump+0xc8>)
 80063ac:	f7ff ff8a 	bl	80062c4 <cliPrintf>
                        cliPrintf("%c", asc[i]);
 80063b0:	f8df b05c 	ldr.w	fp, [pc, #92]	@ 8006410 <cliMemoryDump+0xcc>
 80063b4:	f104 0910 	add.w	r9, r4, #16
                for (i = 0; i < 4; i++)
 80063b8:	f04f 0a00 	mov.w	sl, #0
                memcpy((char *)asc, (char *)ascptr, 4);
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	f10d 0804 	add.w	r8, sp, #4
 80063c2:	9301      	str	r3, [sp, #4]
                    if (asc[i] > 0x1f && asc[i] < 0x7f)
 80063c4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80063c8:	f1a1 0220 	sub.w	r2, r1, #32
 80063cc:	2a5e      	cmp	r2, #94	@ 0x5e
 80063ce:	d810      	bhi.n	80063f2 <cliMemoryDump+0xae>
                        cliPrintf("%c", asc[i]);
 80063d0:	4658      	mov	r0, fp
 80063d2:	f7ff ff77 	bl	80062c4 <cliPrintf>
                for (i = 0; i < 4; i++)
 80063d6:	f10a 0a01 	add.w	sl, sl, #1
 80063da:	f1ba 0f04 	cmp.w	sl, #4
 80063de:	d1f1      	bne.n	80063c4 <cliMemoryDump+0x80>
                ascptr += 1;
 80063e0:	3404      	adds	r4, #4
            for (idx1 = 0; idx1 < 4; idx1++)
 80063e2:	454c      	cmp	r4, r9
 80063e4:	d1e8      	bne.n	80063b8 <cliMemoryDump+0x74>
            cliPrintf("|\r\n   ");
 80063e6:	480b      	ldr	r0, [pc, #44]	@ (8006414 <cliMemoryDump+0xd0>)
 80063e8:	f7ff ff6c 	bl	80062c4 <cliPrintf>
        addr++;
 80063ec:	3704      	adds	r7, #4
    for (idx = 0; idx < size; idx++)
 80063ee:	3501      	adds	r5, #1
 80063f0:	e7c6      	b.n	8006380 <cliMemoryDump+0x3c>
                        cliPrintf(".");
 80063f2:	4809      	ldr	r0, [pc, #36]	@ (8006418 <cliMemoryDump+0xd4>)
 80063f4:	f7ff ff66 	bl	80062c4 <cliPrintf>
 80063f8:	e7ed      	b.n	80063d6 <cliMemoryDump+0x92>
 80063fa:	bf00      	nop
 80063fc:	0800e4ed 	.word	0x0800e4ed
 8006400:	0800e51f 	.word	0x0800e51f
 8006404:	0800e502 	.word	0x0800e502
 8006408:	0800e50c 	.word	0x0800e50c
 800640c:	0800e514 	.word	0x0800e514
 8006410:	0800e518 	.word	0x0800e518
 8006414:	0800e51d 	.word	0x0800e51d
 8006418:	0800e51b 	.word	0x0800e51b

0800641c <cliMain>:
{
 800641c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (cli_node.is_open != true)
 8006420:	4ca6      	ldr	r4, [pc, #664]	@ (80066bc <cliMain+0x2a0>)
{
 8006422:	b085      	sub	sp, #20
    if (cli_node.is_open != true)
 8006424:	7a27      	ldrb	r7, [r4, #8]
 8006426:	2f00      	cmp	r7, #0
 8006428:	f000 8141 	beq.w	80066ae <cliMain+0x292>
    if (uartAvailable(cli_node.ch) > 0)
 800642c:	7820      	ldrb	r0, [r4, #0]
 800642e:	f000 fbe9 	bl	8006c04 <uartAvailable>
 8006432:	2800      	cmp	r0, #0
 8006434:	f000 813b 	beq.w	80066ae <cliMain+0x292>
        cliUpdate(&cli_node, uartRead(cli_node.ch));
 8006438:	7820      	ldrb	r0, [r4, #0]
 800643a:	f000 fbf9 	bl	8006c30 <uartRead>
    if (p_cli->state == CLI_RX_IDLE)
 800643e:	f894 8010 	ldrb.w	r8, [r4, #16]
 8006442:	f88d 0007 	strb.w	r0, [sp, #7]
 8006446:	f1b8 0f00 	cmp.w	r8, #0
 800644a:	f040 80eb 	bne.w	8006624 <cliMain+0x208>
        switch (rx_data)
 800644e:	281b      	cmp	r0, #27
 8006450:	f000 8128 	beq.w	80066a4 <cliMain+0x288>
 8006454:	d852      	bhi.n	80064fc <cliMain+0xe0>
 8006456:	2808      	cmp	r0, #8
 8006458:	f000 80f8 	beq.w	800664c <cliMain+0x230>
 800645c:	280d      	cmp	r0, #13
 800645e:	d06a      	beq.n	8006536 <cliMain+0x11a>
            if ((line->count + 1) < line->buf_len)
 8006460:	f894 3246 	ldrb.w	r3, [r4, #582]	@ 0x246
 8006464:	f894 2244 	ldrb.w	r2, [r4, #580]	@ 0x244
 8006468:	1c59      	adds	r1, r3, #1
 800646a:	4291      	cmp	r1, r2
 800646c:	f280 811c 	bge.w	80066a8 <cliMain+0x28c>
                if (line->cursor == line->count)
 8006470:	f894 2245 	ldrb.w	r2, [r4, #581]	@ 0x245
 8006474:	429a      	cmp	r2, r3
 8006476:	d119      	bne.n	80064ac <cliMain+0x90>
                    uartWrite(p_cli->ch, &rx_data, 1);
 8006478:	2201      	movs	r2, #1
 800647a:	f10d 0107 	add.w	r1, sp, #7
 800647e:	7820      	ldrb	r0, [r4, #0]
 8006480:	f000 fbf0 	bl	8006c64 <uartWrite>
                    line->buf[line->cursor] = rx_data;
 8006484:	f894 2245 	ldrb.w	r2, [r4, #581]	@ 0x245
 8006488:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800648c:	18a3      	adds	r3, r4, r2
                    line->cursor++;
 800648e:	3201      	adds	r2, #1
 8006490:	f884 2245 	strb.w	r2, [r4, #581]	@ 0x245
                    line->buf[line->count] = 0;
 8006494:	2200      	movs	r2, #0
                    line->buf[line->cursor] = rx_data;
 8006496:	f883 1224 	strb.w	r1, [r3, #548]	@ 0x224
                    line->count++;
 800649a:	f894 3246 	ldrb.w	r3, [r4, #582]	@ 0x246
 800649e:	3301      	adds	r3, #1
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	f884 3246 	strb.w	r3, [r4, #582]	@ 0x246
                    line->buf[line->count] = 0;
 80064a6:	4423      	add	r3, r4
 80064a8:	f883 2224 	strb.w	r2, [r3, #548]	@ 0x224
                if (line->cursor < line->count)
 80064ac:	f894 6245 	ldrb.w	r6, [r4, #581]	@ 0x245
 80064b0:	f894 5246 	ldrb.w	r5, [r4, #582]	@ 0x246
 80064b4:	42ae      	cmp	r6, r5
 80064b6:	f080 80b5 	bcs.w	8006624 <cliMain+0x208>
                    mov_len = line->count - line->cursor;
 80064ba:	1baa      	subs	r2, r5, r6
                        line->buf[line->count - i] =
 80064bc:	b2d2      	uxtb	r2, r2
                            line->buf[line->count - i - 1];
 80064be:	f505 7109 	add.w	r1, r5, #548	@ 0x224
                        line->buf[line->count - i] =
 80064c2:	f205 2025 	addw	r0, r5, #549	@ 0x225
                            line->buf[line->count - i - 1];
 80064c6:	1a89      	subs	r1, r1, r2
                        line->buf[line->count - i] =
 80064c8:	1a80      	subs	r0, r0, r2
 80064ca:	4421      	add	r1, r4
 80064cc:	4420      	add	r0, r4
 80064ce:	f005 febd 	bl	800c24c <memmove>
                    line->buf[line->count] = 0;
 80064d2:	2100      	movs	r1, #0
                    line->buf[line->cursor] = rx_data;
 80064d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80064d8:	19a3      	adds	r3, r4, r6
 80064da:	f883 2224 	strb.w	r2, [r3, #548]	@ 0x224
                    line->count++;
 80064de:	1c6b      	adds	r3, r5, #1
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	f884 3246 	strb.w	r3, [r4, #582]	@ 0x246
                    line->buf[line->count] = 0;
 80064e6:	4423      	add	r3, r4
                    line->cursor++;
 80064e8:	3601      	adds	r6, #1
                    line->buf[line->count] = 0;
 80064ea:	f883 1224 	strb.w	r1, [r3, #548]	@ 0x224
                    uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 80064ee:	7820      	ldrb	r0, [r4, #0]
 80064f0:	4973      	ldr	r1, [pc, #460]	@ (80066c0 <cliMain+0x2a4>)
                    line->cursor++;
 80064f2:	f884 6245 	strb.w	r6, [r4, #581]	@ 0x245
                    uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 80064f6:	f000 fbcf 	bl	8006c98 <uartPrintf>
 80064fa:	e093      	b.n	8006624 <cliMain+0x208>
        switch (rx_data)
 80064fc:	287f      	cmp	r0, #127	@ 0x7f
 80064fe:	d1af      	bne.n	8006460 <cliMain+0x44>
            if (line->cursor < line->count)
 8006500:	f894 0245 	ldrb.w	r0, [r4, #581]	@ 0x245
 8006504:	f894 5246 	ldrb.w	r5, [r4, #582]	@ 0x246
 8006508:	42a8      	cmp	r0, r5
 800650a:	f080 80cd 	bcs.w	80066a8 <cliMain+0x28c>
                mov_len = line->count - line->cursor;
 800650e:	1a2a      	subs	r2, r5, r0
                    line->buf[line->cursor + i - 1] =
 8006510:	f200 2125 	addw	r1, r0, #549	@ 0x225
 8006514:	b2d2      	uxtb	r2, r2
 8006516:	f500 7009 	add.w	r0, r0, #548	@ 0x224
                line->count--;
 800651a:	3d01      	subs	r5, #1
                    line->buf[line->cursor + i - 1] =
 800651c:	4421      	add	r1, r4
                line->count--;
 800651e:	b2ed      	uxtb	r5, r5
                    line->buf[line->cursor + i - 1] =
 8006520:	3a01      	subs	r2, #1
 8006522:	4420      	add	r0, r4
 8006524:	f005 fe92 	bl	800c24c <memmove>
                line->count--;
 8006528:	f884 5246 	strb.w	r5, [r4, #582]	@ 0x246
                line->buf[line->count] = 0;
 800652c:	4425      	add	r5, r4
                uartPrintf(p_cli->ch, "\x1B[1P");
 800652e:	4965      	ldr	r1, [pc, #404]	@ (80066c4 <cliMain+0x2a8>)
                line->buf[line->count] = 0;
 8006530:	f885 8224 	strb.w	r8, [r5, #548]	@ 0x224
                uartPrintf(p_cli->ch, "\x1B[1P");
 8006534:	e073      	b.n	800661e <cliMain+0x202>
            if (line->count > 0)
 8006536:	f894 3246 	ldrb.w	r3, [r4, #582]	@ 0x246
 800653a:	2b00      	cmp	r3, #0
 800653c:	d063      	beq.n	8006606 <cliMain+0x1ea>
    p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 800653e:	2323      	movs	r3, #35	@ 0x23
 8006540:	f894 2196 	ldrb.w	r2, [r4, #406]	@ 0x196
 8006544:	f504 7509 	add.w	r5, r4, #548	@ 0x224
 8006548:	fb03 4302 	mla	r3, r3, r2, r4
 800654c:	f504 7c11 	add.w	ip, r4, #580	@ 0x244
 8006550:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8006554:	462e      	mov	r6, r5
 8006556:	ce03      	ldmia	r6!, {r0, r1}
 8006558:	4566      	cmp	r6, ip
 800655a:	6018      	str	r0, [r3, #0]
 800655c:	6059      	str	r1, [r3, #4]
 800655e:	4635      	mov	r5, r6
 8006560:	f103 0308 	add.w	r3, r3, #8
 8006564:	d1f6      	bne.n	8006554 <cliMain+0x138>
 8006566:	8830      	ldrh	r0, [r6, #0]
 8006568:	78b1      	ldrb	r1, [r6, #2]
 800656a:	8018      	strh	r0, [r3, #0]
 800656c:	7099      	strb	r1, [r3, #2]
    if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 800656e:	f894 3197 	ldrb.w	r3, [r4, #407]	@ 0x197
    p_cli->argc = 0;
 8006572:	2600      	movs	r6, #0
    if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8006574:	2b03      	cmp	r3, #3
        p_cli->hist_line_count++;
 8006576:	bf9c      	itt	ls
 8006578:	3301      	addls	r3, #1
 800657a:	f884 3197 	strbls.w	r3, [r4, #407]	@ 0x197
    p_cli->hist_line_new  = true;
 800657e:	2301      	movs	r3, #1
    p_cli->hist_line_i    = p_cli->hist_line_last;
 8006580:	f884 2195 	strb.w	r2, [r4, #405]	@ 0x195
    p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8006584:	3201      	adds	r2, #1
 8006586:	f002 0203 	and.w	r2, r2, #3
 800658a:	f884 2196 	strb.w	r2, [r4, #406]	@ 0x196
    for (tok = strtok_r(cmdline, delim, &next_ptr); tok;
 800658e:	494e      	ldr	r1, [pc, #312]	@ (80066c8 <cliMain+0x2ac>)
 8006590:	484e      	ldr	r0, [pc, #312]	@ (80066cc <cliMain+0x2b0>)
 8006592:	aa02      	add	r2, sp, #8
    p_cli->hist_line_new  = true;
 8006594:	f884 3194 	strb.w	r3, [r4, #404]	@ 0x194
    p_cli->argc = 0;
 8006598:	f8a4 6112 	strh.w	r6, [r4, #274]	@ 0x112
    argv[argc] = NULL;
 800659c:	f8c4 6114 	str.w	r6, [r4, #276]	@ 0x114
    for (tok = strtok_r(cmdline, delim, &next_ptr); tok;
 80065a0:	f005 feb0 	bl	800c304 <strtok_r>
 80065a4:	4633      	mov	r3, r6
 80065a6:	4605      	mov	r5, r0
        argv[argc++] = tok;
 80065a8:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 80066d0 <cliMain+0x2b4>
         tok = strtok_r(NULL, delim, &next_ptr))
 80065ac:	f8df 9118 	ldr.w	r9, [pc, #280]	@ 80066c8 <cliMain+0x2ac>
    for (tok = strtok_r(cmdline, delim, &next_ptr); tok;
 80065b0:	1c5e      	adds	r6, r3, #1
        argv[argc++] = tok;
 80065b2:	b29b      	uxth	r3, r3
    for (tok = strtok_r(cmdline, delim, &next_ptr); tok;
 80065b4:	2d00      	cmp	r5, #0
 80065b6:	d13d      	bne.n	8006634 <cliMain+0x218>
    p_cli->argc = argc;
 80065b8:	f8a4 3112 	strh.w	r3, [r4, #274]	@ 0x112
    if (argc > 0)
 80065bc:	b31b      	cbz	r3, 8006606 <cliMain+0x1ea>
        cliPrintf("\r\n");
 80065be:	4845      	ldr	r0, [pc, #276]	@ (80066d4 <cliMain+0x2b8>)
 80065c0:	f7ff fe80 	bl	80062c4 <cliPrintf>
        cliToUpper(p_cli->argv[0]);
 80065c4:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 80065c8:	f7ff fd67 	bl	800609a <cliToUpper>
        for (int i = 0; i < p_cli->cmd_count; i++)
 80065cc:	4e42      	ldr	r6, [pc, #264]	@ (80066d8 <cliMain+0x2bc>)
 80065ce:	f8b4 8248 	ldrh.w	r8, [r4, #584]	@ 0x248
            if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 80065d2:	f8d4 9114 	ldr.w	r9, [r4, #276]	@ 0x114
        for (int i = 0; i < p_cli->cmd_count; i++)
 80065d6:	4545      	cmp	r5, r8
 80065d8:	da15      	bge.n	8006606 <cliMain+0x1ea>
            if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 80065da:	4631      	mov	r1, r6
 80065dc:	4648      	mov	r0, r9
 80065de:	f7fe fdb7 	bl	8005150 <strcmp>
 80065e2:	3614      	adds	r6, #20
 80065e4:	bb80      	cbnz	r0, 8006648 <cliMain+0x22c>
                p_cli->cmd_args.argc = p_cli->argc - 1;
 80065e6:	f8b4 3112 	ldrh.w	r3, [r4, #274]	@ 0x112
                p_cli->cmd_args.argv = &p_cli->argv[1];
 80065ea:	483c      	ldr	r0, [pc, #240]	@ (80066dc <cliMain+0x2c0>)
                p_cli->cmd_args.argc = p_cli->argc - 1;
 80065ec:	3b01      	subs	r3, #1
 80065ee:	f8a4 338c 	strh.w	r3, [r4, #908]	@ 0x38c
                p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 80065f2:	2314      	movs	r3, #20
 80065f4:	fb03 4305 	mla	r3, r3, r5, r4
                p_cli->cmd_args.argv = &p_cli->argv[1];
 80065f8:	f8c4 0390 	str.w	r0, [r4, #912]	@ 0x390
                p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 80065fc:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 8006600:	f500 701d 	add.w	r0, r0, #628	@ 0x274
 8006604:	4798      	blx	r3
            line->count  = 0;
 8006606:	2300      	movs	r3, #0
    uartPrintf(p_cli->ch, "\n\r");
 8006608:	4935      	ldr	r1, [pc, #212]	@ (80066e0 <cliMain+0x2c4>)
 800660a:	7820      	ldrb	r0, [r4, #0]
            line->count  = 0;
 800660c:	f884 3246 	strb.w	r3, [r4, #582]	@ 0x246
            line->cursor = 0;
 8006610:	f884 3245 	strb.w	r3, [r4, #581]	@ 0x245
            line->buf[0] = 0;
 8006614:	f884 3224 	strb.w	r3, [r4, #548]	@ 0x224
    uartPrintf(p_cli->ch, "\n\r");
 8006618:	f000 fb3e 	bl	8006c98 <uartPrintf>
    uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 800661c:	4931      	ldr	r1, [pc, #196]	@ (80066e4 <cliMain+0x2c8>)
                uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 800661e:	7820      	ldrb	r0, [r4, #0]
 8006620:	f000 fb3a 	bl	8006c98 <uartPrintf>
    switch (p_cli->state)
 8006624:	7c23      	ldrb	r3, [r4, #16]
 8006626:	3b01      	subs	r3, #1
 8006628:	2b03      	cmp	r3, #3
 800662a:	d83d      	bhi.n	80066a8 <cliMain+0x28c>
 800662c:	e8df f003 	tbb	[pc, r3]
 8006630:	d45e433a 	.word	0xd45e433a
        argv[argc++] = tok;
 8006634:	f848 5023 	str.w	r5, [r8, r3, lsl #2]
         tok = strtok_r(NULL, delim, &next_ptr))
 8006638:	4649      	mov	r1, r9
 800663a:	2000      	movs	r0, #0
 800663c:	aa02      	add	r2, sp, #8
 800663e:	f005 fe61 	bl	800c304 <strtok_r>
 8006642:	4633      	mov	r3, r6
 8006644:	4605      	mov	r5, r0
 8006646:	e7b3      	b.n	80065b0 <cliMain+0x194>
        for (int i = 0; i < p_cli->cmd_count; i++)
 8006648:	3501      	adds	r5, #1
 800664a:	e7c4      	b.n	80065d6 <cliMain+0x1ba>
            if (line->count > 0 && line->cursor > 0)
 800664c:	f894 3246 	ldrb.w	r3, [r4, #582]	@ 0x246
            if (line->cursor < line->count)
 8006650:	f894 6245 	ldrb.w	r6, [r4, #581]	@ 0x245
            if (line->count > 0 && line->cursor > 0)
 8006654:	b92b      	cbnz	r3, 8006662 <cliMain+0x246>
            if (line->cursor > 0)
 8006656:	b33e      	cbz	r6, 80066a8 <cliMain+0x28c>
                line->cursor--;
 8006658:	1e73      	subs	r3, r6, #1
                uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 800665a:	4923      	ldr	r1, [pc, #140]	@ (80066e8 <cliMain+0x2cc>)
                line->cursor--;
 800665c:	f884 3245 	strb.w	r3, [r4, #581]	@ 0x245
                uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8006660:	e7dd      	b.n	800661e <cliMain+0x202>
            if (line->count > 0 && line->cursor > 0)
 8006662:	b30e      	cbz	r6, 80066a8 <cliMain+0x28c>
                if (line->cursor == line->count)
 8006664:	42b3      	cmp	r3, r6
 8006666:	d106      	bne.n	8006676 <cliMain+0x25a>
                    line->count--;
 8006668:	1e73      	subs	r3, r6, #1
 800666a:	b2db      	uxtb	r3, r3
 800666c:	f884 3246 	strb.w	r3, [r4, #582]	@ 0x246
                    line->buf[line->count] = 0;
 8006670:	4423      	add	r3, r4
 8006672:	f883 8224 	strb.w	r8, [r3, #548]	@ 0x224
                if (line->cursor < line->count)
 8006676:	f894 5246 	ldrb.w	r5, [r4, #582]	@ 0x246
 800667a:	42b5      	cmp	r5, r6
 800667c:	d9ec      	bls.n	8006658 <cliMain+0x23c>
                    mov_len = line->count - line->cursor;
 800667e:	1baa      	subs	r2, r5, r6
                        line->buf[line->cursor + i - 1] =
 8006680:	f506 7109 	add.w	r1, r6, #548	@ 0x224
 8006684:	f206 2023 	addw	r0, r6, #547	@ 0x223
 8006688:	b2d2      	uxtb	r2, r2
 800668a:	4421      	add	r1, r4
 800668c:	4420      	add	r0, r4
 800668e:	f005 fddd 	bl	800c24c <memmove>
                    line->buf[line->count] = 0;
 8006692:	2300      	movs	r3, #0
                    line->count--;
 8006694:	3d01      	subs	r5, #1
 8006696:	b2ed      	uxtb	r5, r5
 8006698:	f884 5246 	strb.w	r5, [r4, #582]	@ 0x246
                    line->buf[line->count] = 0;
 800669c:	4425      	add	r5, r4
 800669e:	f885 3224 	strb.w	r3, [r5, #548]	@ 0x224
            if (line->cursor > 0)
 80066a2:	e7d9      	b.n	8006658 <cliMain+0x23c>
        p_cli->state = CLI_RX_SP2;
 80066a4:	2302      	movs	r3, #2
        p_cli->state = CLI_RX_IDLE;
 80066a6:	7423      	strb	r3, [r4, #16]
    cliShowLog(p_cli);
 80066a8:	4804      	ldr	r0, [pc, #16]	@ (80066bc <cliMain+0x2a0>)
 80066aa:	f7ff fdaf 	bl	800620c <cliShowLog>
}
 80066ae:	4638      	mov	r0, r7
 80066b0:	b005      	add	sp, #20
 80066b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        p_cli->state = CLI_RX_SP3;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e7f5      	b.n	80066a6 <cliMain+0x28a>
 80066ba:	bf00      	nop
 80066bc:	20000378 	.word	0x20000378
 80066c0:	0800e53c 	.word	0x0800e53c
 80066c4:	0800e537 	.word	0x0800e537
 80066c8:	0800e524 	.word	0x0800e524
 80066cc:	2000059c 	.word	0x2000059c
 80066d0:	2000048c 	.word	0x2000048c
 80066d4:	0800e5cb 	.word	0x0800e5cb
 80066d8:	200005c4 	.word	0x200005c4
 80066dc:	20000490 	.word	0x20000490
 80066e0:	0800e52b 	.word	0x0800e52b
 80066e4:	0800e52e 	.word	0x0800e52e
 80066e8:	0800e534 	.word	0x0800e534
        p_cli->state = CLI_RX_IDLE;
 80066ec:	2300      	movs	r3, #0
        if (rx_data == CLI_KEY_LEFT)
 80066ee:	f89d 2007 	ldrb.w	r2, [sp, #7]
        p_cli->state = CLI_RX_IDLE;
 80066f2:	7423      	strb	r3, [r4, #16]
        if (rx_data == CLI_KEY_LEFT)
 80066f4:	2a44      	cmp	r2, #68	@ 0x44
 80066f6:	d110      	bne.n	800671a <cliMain+0x2fe>
            if (line->cursor > 0)
 80066f8:	f894 3245 	ldrb.w	r3, [r4, #581]	@ 0x245
 80066fc:	b383      	cbz	r3, 8006760 <cliMain+0x344>
                line->cursor--;
 80066fe:	3b01      	subs	r3, #1
 8006700:	f884 3245 	strb.w	r3, [r4, #581]	@ 0x245
                tx_buf[0] = 0x1B;
 8006704:	f645 331b 	movw	r3, #23323	@ 0x5b1b
                tx_buf[2] = rx_data;
 8006708:	f88d 200a 	strb.w	r2, [sp, #10]
                uartWrite(p_cli->ch, tx_buf, 3);
 800670c:	7820      	ldrb	r0, [r4, #0]
 800670e:	2203      	movs	r2, #3
 8006710:	a902      	add	r1, sp, #8
                tx_buf[0] = 0x1B;
 8006712:	f8ad 3008 	strh.w	r3, [sp, #8]
                uartWrite(p_cli->ch, tx_buf, 3);
 8006716:	f000 faa5 	bl	8006c64 <uartWrite>
        if (rx_data == CLI_KEY_RIGHT)
 800671a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800671e:	2a43      	cmp	r2, #67	@ 0x43
 8006720:	d113      	bne.n	800674a <cliMain+0x32e>
            if (line->cursor < line->count)
 8006722:	f894 3245 	ldrb.w	r3, [r4, #581]	@ 0x245
 8006726:	f894 1246 	ldrb.w	r1, [r4, #582]	@ 0x246
 800672a:	4299      	cmp	r1, r3
 800672c:	d923      	bls.n	8006776 <cliMain+0x35a>
                line->cursor++;
 800672e:	3301      	adds	r3, #1
 8006730:	f884 3245 	strb.w	r3, [r4, #581]	@ 0x245
                tx_buf[0] = 0x1B;
 8006734:	f645 331b 	movw	r3, #23323	@ 0x5b1b
                tx_buf[2] = rx_data;
 8006738:	f88d 200a 	strb.w	r2, [sp, #10]
                uartWrite(p_cli->ch, tx_buf, 3);
 800673c:	7820      	ldrb	r0, [r4, #0]
 800673e:	2203      	movs	r2, #3
 8006740:	a902      	add	r1, sp, #8
                tx_buf[0] = 0x1B;
 8006742:	f8ad 3008 	strh.w	r3, [sp, #8]
                uartWrite(p_cli->ch, tx_buf, 3);
 8006746:	f000 fa8d 	bl	8006c64 <uartWrite>
        if (rx_data == CLI_KEY_UP)
 800674a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800674e:	2b41      	cmp	r3, #65	@ 0x41
 8006750:	d106      	bne.n	8006760 <cliMain+0x344>
            cliLineChange(p_cli, true);
 8006752:	2001      	movs	r0, #1
 8006754:	f7ff fcfc 	bl	8006150 <cliLineChange.constprop.0>
            uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8006758:	4920      	ldr	r1, [pc, #128]	@ (80067dc <cliMain+0x3c0>)
 800675a:	7820      	ldrb	r0, [r4, #0]
 800675c:	f000 fa9c 	bl	8006c98 <uartPrintf>
        if (rx_data == CLI_KEY_DOWN)
 8006760:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006764:	2b42      	cmp	r3, #66	@ 0x42
 8006766:	d106      	bne.n	8006776 <cliMain+0x35a>
            cliLineChange(p_cli, false);
 8006768:	2000      	movs	r0, #0
 800676a:	f7ff fcf1 	bl	8006150 <cliLineChange.constprop.0>
            uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800676e:	491b      	ldr	r1, [pc, #108]	@ (80067dc <cliMain+0x3c0>)
 8006770:	7820      	ldrb	r0, [r4, #0]
 8006772:	f000 fa91 	bl	8006c98 <uartPrintf>
        if (rx_data == CLI_KEY_HOME)
 8006776:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800677a:	2b31      	cmp	r3, #49	@ 0x31
 800677c:	d10a      	bne.n	8006794 <cliMain+0x378>
            uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 800677e:	f894 2245 	ldrb.w	r2, [r4, #581]	@ 0x245
 8006782:	4917      	ldr	r1, [pc, #92]	@ (80067e0 <cliMain+0x3c4>)
 8006784:	7820      	ldrb	r0, [r4, #0]
 8006786:	f000 fa87 	bl	8006c98 <uartPrintf>
            line->cursor = 0;
 800678a:	2300      	movs	r3, #0
 800678c:	f884 3245 	strb.w	r3, [r4, #581]	@ 0x245
            p_cli->state = CLI_RX_SP4;
 8006790:	2304      	movs	r3, #4
 8006792:	7423      	strb	r3, [r4, #16]
        if (rx_data == CLI_KEY_END)
 8006794:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006798:	2b34      	cmp	r3, #52	@ 0x34
 800679a:	d185      	bne.n	80066a8 <cliMain+0x28c>
            if (line->cursor < line->count)
 800679c:	f894 3245 	ldrb.w	r3, [r4, #581]	@ 0x245
 80067a0:	f894 2246 	ldrb.w	r2, [r4, #582]	@ 0x246
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d205      	bcs.n	80067b4 <cliMain+0x398>
                mov_len = line->count - line->cursor;
 80067a8:	1ad2      	subs	r2, r2, r3
                uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 80067aa:	490e      	ldr	r1, [pc, #56]	@ (80067e4 <cliMain+0x3c8>)
 80067ac:	7820      	ldrb	r0, [r4, #0]
 80067ae:	b292      	uxth	r2, r2
 80067b0:	f000 fa72 	bl	8006c98 <uartPrintf>
            if (line->cursor > line->count)
 80067b4:	f894 2245 	ldrb.w	r2, [r4, #581]	@ 0x245
 80067b8:	f894 3246 	ldrb.w	r3, [r4, #582]	@ 0x246
 80067bc:	429a      	cmp	r2, r3
 80067be:	d905      	bls.n	80067cc <cliMain+0x3b0>
                mov_len = line->cursor - line->count;
 80067c0:	1ad2      	subs	r2, r2, r3
                uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 80067c2:	4907      	ldr	r1, [pc, #28]	@ (80067e0 <cliMain+0x3c4>)
 80067c4:	7820      	ldrb	r0, [r4, #0]
 80067c6:	b292      	uxth	r2, r2
 80067c8:	f000 fa66 	bl	8006c98 <uartPrintf>
            line->cursor = line->count;
 80067cc:	f894 3246 	ldrb.w	r3, [r4, #582]	@ 0x246
 80067d0:	f884 3245 	strb.w	r3, [r4, #581]	@ 0x245
            p_cli->state = CLI_RX_SP4;
 80067d4:	2304      	movs	r3, #4
 80067d6:	e766      	b.n	80066a6 <cliMain+0x28a>
        p_cli->state = CLI_RX_IDLE;
 80067d8:	2300      	movs	r3, #0
 80067da:	e764      	b.n	80066a6 <cliMain+0x28a>
 80067dc:	2000059c 	.word	0x2000059c
 80067e0:	0800e428 	.word	0x0800e428
 80067e4:	0800e547 	.word	0x0800e547

080067e8 <cliKeepLoop>:
{
 80067e8:	b508      	push	{r3, lr}
    if (uartAvailable(p_cli->ch) == 0)
 80067ea:	4b04      	ldr	r3, [pc, #16]	@ (80067fc <cliKeepLoop+0x14>)
 80067ec:	7818      	ldrb	r0, [r3, #0]
 80067ee:	f000 fa09 	bl	8006c04 <uartAvailable>
}
 80067f2:	fab0 f080 	clz	r0, r0
 80067f6:	0940      	lsrs	r0, r0, #5
 80067f8:	bd08      	pop	{r3, pc}
 80067fa:	bf00      	nop
 80067fc:	20000378 	.word	0x20000378

08006800 <cliAdd>:
{
 8006800:	b570      	push	{r4, r5, r6, lr}
    if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8006802:	4d0e      	ldr	r5, [pc, #56]	@ (800683c <cliAdd+0x3c>)
{
 8006804:	460e      	mov	r6, r1
    if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8006806:	f8b5 4248 	ldrh.w	r4, [r5, #584]	@ 0x248
 800680a:	2c0f      	cmp	r4, #15
 800680c:	d814      	bhi.n	8006838 <cliAdd+0x38>
    strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 800680e:	2314      	movs	r3, #20
 8006810:	435c      	muls	r4, r3
 8006812:	f504 7313 	add.w	r3, r4, #588	@ 0x24c
 8006816:	442b      	add	r3, r5
 8006818:	4601      	mov	r1, r0
 800681a:	4618      	mov	r0, r3
 800681c:	f005 fde9 	bl	800c3f2 <strcpy>
    p_cli->cmd_list[index].cmd_func = p_func;
 8006820:	442c      	add	r4, r5
 8006822:	f8c4 625c 	str.w	r6, [r4, #604]	@ 0x25c
    cliToUpper(p_cli->cmd_list[index].cmd_str);
 8006826:	f7ff fc38 	bl	800609a <cliToUpper>
    return ret;
 800682a:	2001      	movs	r0, #1
    p_cli->cmd_count++;
 800682c:	f8b5 3248 	ldrh.w	r3, [r5, #584]	@ 0x248
 8006830:	3301      	adds	r3, #1
 8006832:	f8a5 3248 	strh.w	r3, [r5, #584]	@ 0x248
}
 8006836:	bd70      	pop	{r4, r5, r6, pc}
        return false;
 8006838:	2000      	movs	r0, #0
 800683a:	e7fc      	b.n	8006836 <cliAdd+0x36>
 800683c:	20000378 	.word	0x20000378

08006840 <cliInit>:
{
 8006840:	b508      	push	{r3, lr}
    cli_node.cmd_args.getData  = cliArgsGetData;
 8006842:	4911      	ldr	r1, [pc, #68]	@ (8006888 <cliInit+0x48>)
    cli_node.is_open = false;
 8006844:	4b11      	ldr	r3, [pc, #68]	@ (800688c <cliInit+0x4c>)
 8006846:	2200      	movs	r2, #0
    cli_node.cmd_args.getData  = cliArgsGetData;
 8006848:	f8c3 1394 	str.w	r1, [r3, #916]	@ 0x394
    cli_node.cmd_args.getFloat = cliArgsGetFloat;
 800684c:	4910      	ldr	r1, [pc, #64]	@ (8006890 <cliInit+0x50>)
    cliAdd("help", cliShowList);
 800684e:	4811      	ldr	r0, [pc, #68]	@ (8006894 <cliInit+0x54>)
    cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8006850:	f8c3 1398 	str.w	r1, [r3, #920]	@ 0x398
    cli_node.cmd_args.getStr   = cliArgsGetStr;
 8006854:	4910      	ldr	r1, [pc, #64]	@ (8006898 <cliInit+0x58>)
    cli_node.is_open = false;
 8006856:	811a      	strh	r2, [r3, #8]
    cli_node.cmd_args.getStr   = cliArgsGetStr;
 8006858:	f8c3 139c 	str.w	r1, [r3, #924]	@ 0x39c
    cli_node.cmd_args.isStr    = cliArgsIsStr;
 800685c:	490f      	ldr	r1, [pc, #60]	@ (800689c <cliInit+0x5c>)
    cli_node.state   = CLI_RX_IDLE;
 800685e:	741a      	strb	r2, [r3, #16]
    cli_node.cmd_args.isStr    = cliArgsIsStr;
 8006860:	f8c3 13a0 	str.w	r1, [r3, #928]	@ 0x3a0
    p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8006864:	211f      	movs	r1, #31
 8006866:	f8a3 1244 	strh.w	r1, [r3, #580]	@ 0x244
    cliAdd("help", cliShowList);
 800686a:	490d      	ldr	r1, [pc, #52]	@ (80068a0 <cliInit+0x60>)
    cli_node.hist_line_new   = false;
 800686c:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
    p_cli->line.count   = 0;
 8006870:	f883 2246 	strb.w	r2, [r3, #582]	@ 0x246
    p_cli->line.buf[0]  = 0;
 8006874:	f883 2224 	strb.w	r2, [r3, #548]	@ 0x224
    cliAdd("help", cliShowList);
 8006878:	f7ff ffc2 	bl	8006800 <cliAdd>
    cliAdd("md", cliMemoryDump);
 800687c:	4909      	ldr	r1, [pc, #36]	@ (80068a4 <cliInit+0x64>)
 800687e:	480a      	ldr	r0, [pc, #40]	@ (80068a8 <cliInit+0x68>)
 8006880:	f7ff ffbe 	bl	8006800 <cliAdd>
}
 8006884:	2001      	movs	r0, #1
 8006886:	bd08      	pop	{r3, pc}
 8006888:	0800612d 	.word	0x0800612d
 800688c:	20000378 	.word	0x20000378
 8006890:	0800610d 	.word	0x0800610d
 8006894:	0800e54d 	.word	0x0800e54d
 8006898:	080060c5 	.word	0x080060c5
 800689c:	080060e1 	.word	0x080060e1
 80068a0:	080062f9 	.word	0x080062f9
 80068a4:	08006345 	.word	0x08006345
 80068a8:	0800e552 	.word	0x0800e552

080068ac <flashInit>:
static flash_tbl_t flash_tbl[FLASH_SECTOR_MAX];

static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);

bool flashInit(void)
{
 80068ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
    for (int i = 0; i < FLASH_SECTOR_MAX; i++)
    {
        flash_tbl[i].addr   = 0x8000000 + i * 1024;
        flash_tbl[i].length = 1024;
 80068b0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80068b4:	4a05      	ldr	r2, [pc, #20]	@ (80068cc <flashInit+0x20>)
    for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 80068b6:	4906      	ldr	r1, [pc, #24]	@ (80068d0 <flashInit+0x24>)
        flash_tbl[i].addr   = 0x8000000 + i * 1024;
 80068b8:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 80068ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068be:	428b      	cmp	r3, r1
        flash_tbl[i].length = 1024;
 80068c0:	8090      	strh	r0, [r2, #4]
    for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 80068c2:	f102 0208 	add.w	r2, r2, #8
 80068c6:	d1f7      	bne.n	80068b8 <flashInit+0xc>
    }
    return true;
}
 80068c8:	2001      	movs	r0, #1
 80068ca:	4770      	bx	lr
 80068cc:	2000071c 	.word	0x2000071c
 80068d0:	08010000 	.word	0x08010000

080068d4 <flashErase>:
    uint32_t page_error;

    int16_t start_sector_num = -1;
    uint32_t sector_count    = 0;

    for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 80068d4:	2300      	movs	r3, #0
{
 80068d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068d8:	4a24      	ldr	r2, [pc, #144]	@ (800696c <flashErase+0x98>)
    int16_t start_sector_num = -1;
 80068da:	f04f 36ff 	mov.w	r6, #4294967295
    uint32_t sector_count    = 0;
 80068de:	461c      	mov	r4, r3
 80068e0:	4617      	mov	r7, r2
    uint32_t flash_end;

    sector_start = flash_tbl[sector_num].addr;
    sector_end  = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
    flash_start = addr;
    flash_end   = addr + length - 1;
 80068e2:	4431      	add	r1, r6
{
 80068e4:	b087      	sub	sp, #28
    flash_end   = addr + length - 1;
 80068e6:	4401      	add	r1, r0
    sector_start = flash_tbl[sector_num].addr;
 80068e8:	f8d2 c000 	ldr.w	ip, [r2]
    sector_end  = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 80068ec:	f8b2 e004 	ldrh.w	lr, [r2, #4]
 80068f0:	f10c 35ff 	add.w	r5, ip, #4294967295

    if (sector_start >= flash_start && sector_start <= flash_end)
 80068f4:	4560      	cmp	r0, ip
    sector_end  = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 80068f6:	4475      	add	r5, lr
    if (sector_start >= flash_start && sector_start <= flash_end)
 80068f8:	d834      	bhi.n	8006964 <flashErase+0x90>
 80068fa:	458c      	cmp	ip, r1
 80068fc:	bf8c      	ite	hi
 80068fe:	f04f 0e00 	movhi.w	lr, #0
 8006902:	f04f 0e01 	movls.w	lr, #1
    {
        ret = true;
    }
    if (sector_end >= flash_start && sector_end <= flash_end)
 8006906:	42a8      	cmp	r0, r5
 8006908:	d805      	bhi.n	8006916 <flashErase+0x42>
    {
        ret = true;
 800690a:	428d      	cmp	r5, r1
 800690c:	bf98      	it	ls
 800690e:	f04f 0e01 	movls.w	lr, #1
    }
    if (flash_start >= sector_start && flash_start <= sector_end)
 8006912:	4560      	cmp	r0, ip
 8006914:	d206      	bcs.n	8006924 <flashErase+0x50>
    {
        ret = true;
    }
    if (flash_end >= sector_start && flash_end <= sector_end)
 8006916:	458c      	cmp	ip, r1
 8006918:	d801      	bhi.n	800691e <flashErase+0x4a>
 800691a:	428d      	cmp	r5, r1
 800691c:	d202      	bcs.n	8006924 <flashErase+0x50>
        if (flashInSector(i, addr, length) == true)
 800691e:	f1be 0f00 	cmp.w	lr, #0
 8006922:	d003      	beq.n	800692c <flashErase+0x58>
            if (start_sector_num < 0)
 8006924:	1c75      	adds	r5, r6, #1
                start_sector_num = i;
 8006926:	bf08      	it	eq
 8006928:	b21e      	sxtheq	r6, r3
            sector_count++;
 800692a:	3401      	adds	r4, #1
    for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 800692c:	3301      	adds	r3, #1
 800692e:	2b40      	cmp	r3, #64	@ 0x40
 8006930:	f102 0208 	add.w	r2, r2, #8
 8006934:	d1d8      	bne.n	80068e8 <flashErase+0x14>
    if (sector_count > 0)
 8006936:	b194      	cbz	r4, 800695e <flashErase+0x8a>
        HAL_FLASH_Unlock();
 8006938:	f000 feee 	bl	8007718 <HAL_FLASH_Unlock>
        init.Banks       = FLASH_BANK_1;
 800693c:	2200      	movs	r2, #0
 800693e:	2301      	movs	r3, #1
 8006940:	e9cd 2302 	strd	r2, r3, [sp, #8]
        init.PageAddress = flash_tbl[start_sector_num].addr;
 8006944:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
        status = HAL_FLASHEx_Erase(&init, &page_error);
 8006948:	a901      	add	r1, sp, #4
 800694a:	a802      	add	r0, sp, #8
        init.NbPages     = sector_count;
 800694c:	e9cd 3404 	strd	r3, r4, [sp, #16]
        status = HAL_FLASHEx_Erase(&init, &page_error);
 8006950:	f000 ff8c 	bl	800786c <HAL_FLASHEx_Erase>
        if (status == HAL_OK)
 8006954:	fab0 f480 	clz	r4, r0
 8006958:	0964      	lsrs	r4, r4, #5
        HAL_FLASH_Lock();
 800695a:	f000 feef 	bl	800773c <HAL_FLASH_Lock>
}
 800695e:	4620      	mov	r0, r4
 8006960:	b007      	add	sp, #28
 8006962:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bool ret = false;
 8006964:	f04f 0e00 	mov.w	lr, #0
 8006968:	e7cd      	b.n	8006906 <flashErase+0x32>
 800696a:	bf00      	nop
 800696c:	2000071c 	.word	0x2000071c

08006970 <flashWrite>:
{
 8006970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (addr % 2 != 0)
 8006972:	f010 0501 	ands.w	r5, r0, #1
{
 8006976:	4606      	mov	r6, r0
 8006978:	460c      	mov	r4, r1
 800697a:	4617      	mov	r7, r2
    if (addr % 2 != 0)
 800697c:	d119      	bne.n	80069b2 <flashWrite+0x42>
    HAL_FLASH_Unlock();
 800697e:	f000 fecb 	bl	8007718 <HAL_FLASH_Unlock>
    for (int i = 0; i < length; i += 2)
 8006982:	3401      	adds	r4, #1
 8006984:	42af      	cmp	r7, r5
 8006986:	d804      	bhi.n	8006992 <flashWrite+0x22>
    bool ret = true;
 8006988:	2401      	movs	r4, #1
    HAL_FLASH_Lock();
 800698a:	f000 fed7 	bl	800773c <HAL_FLASH_Lock>
}
 800698e:	4620      	mov	r0, r4
 8006990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        data = p_data[i + 0] << 0;
 8006992:	f814 3c01 	ldrb.w	r3, [r4, #-1]
        data |= p_data[i + 1] << 8;
 8006996:	f814 2b02 	ldrb.w	r2, [r4], #2
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + i,
 800699a:	2001      	movs	r0, #1
 800699c:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80069a0:	1971      	adds	r1, r6, r5
 80069a2:	2300      	movs	r3, #0
 80069a4:	f000 fefe 	bl	80077a4 <HAL_FLASH_Program>
        if (status != HAL_OK)
 80069a8:	b908      	cbnz	r0, 80069ae <flashWrite+0x3e>
    for (int i = 0; i < length; i += 2)
 80069aa:	3502      	adds	r5, #2
 80069ac:	e7ea      	b.n	8006984 <flashWrite+0x14>
            ret = false;
 80069ae:	2400      	movs	r4, #0
 80069b0:	e7eb      	b.n	800698a <flashWrite+0x1a>
        return false;
 80069b2:	2400      	movs	r4, #0
 80069b4:	e7eb      	b.n	800698e <flashWrite+0x1e>
	...

080069b8 <ledOff.part.0>:

void ledOff(uint8_t ch)
{
    if (ch >= LED_MAX_CH)
        return;
    HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80069b8:	4b02      	ldr	r3, [pc, #8]	@ (80069c4 <ledOff.part.0+0xc>)
 80069ba:	79da      	ldrb	r2, [r3, #7]
 80069bc:	8899      	ldrh	r1, [r3, #4]
 80069be:	6818      	ldr	r0, [r3, #0]
 80069c0:	f001 b8ee 	b.w	8007ba0 <HAL_GPIO_WritePin>
 80069c4:	20000004 	.word	0x20000004

080069c8 <ledInit>:
{
 80069c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069ca:	2210      	movs	r2, #16
 80069cc:	2100      	movs	r1, #0
 80069ce:	4668      	mov	r0, sp
 80069d0:	f005 fc56 	bl	800c280 <memset>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80069d4:	2200      	movs	r2, #0
 80069d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80069da:	480c      	ldr	r0, [pc, #48]	@ (8006a0c <ledInit+0x44>)
 80069dc:	f001 f8e0 	bl	8007ba0 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80069e0:	2401      	movs	r4, #1
 80069e2:	2300      	movs	r3, #0
 80069e4:	e9cd 4301 	strd	r4, r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069e8:	2302      	movs	r3, #2
 80069ea:	9303      	str	r3, [sp, #12]
        GPIO_InitStruct.Pin = led_tbl[i].pin;
 80069ec:	4b08      	ldr	r3, [pc, #32]	@ (8006a10 <ledInit+0x48>)
        HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80069ee:	4669      	mov	r1, sp
        GPIO_InitStruct.Pin = led_tbl[i].pin;
 80069f0:	889a      	ldrh	r2, [r3, #4]
        HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80069f2:	6818      	ldr	r0, [r3, #0]
        GPIO_InitStruct.Pin = led_tbl[i].pin;
 80069f4:	9200      	str	r2, [sp, #0]
        HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80069f6:	f000 ff8d 	bl	8007914 <HAL_GPIO_Init>
    if (ch >= LED_MAX_CH)
 80069fa:	f7ff ffdd 	bl	80069b8 <ledOff.part.0>
    cliAdd("led", cliLed);
 80069fe:	4905      	ldr	r1, [pc, #20]	@ (8006a14 <ledInit+0x4c>)
 8006a00:	4805      	ldr	r0, [pc, #20]	@ (8006a18 <ledInit+0x50>)
 8006a02:	f7ff fefd 	bl	8006800 <cliAdd>
}
 8006a06:	4620      	mov	r0, r4
 8006a08:	b004      	add	sp, #16
 8006a0a:	bd10      	pop	{r4, pc}
 8006a0c:	40011000 	.word	0x40011000
 8006a10:	20000004 	.word	0x20000004
 8006a14:	08006a31 	.word	0x08006a31
 8006a18:	0800e555 	.word	0x0800e555

08006a1c <ledToggle>:
}

void ledToggle(uint8_t ch)
{
    if (ch >= LED_MAX_CH)
 8006a1c:	b920      	cbnz	r0, 8006a28 <ledToggle+0xc>
        return;
    HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8006a1e:	4b03      	ldr	r3, [pc, #12]	@ (8006a2c <ledToggle+0x10>)
 8006a20:	8899      	ldrh	r1, [r3, #4]
 8006a22:	6818      	ldr	r0, [r3, #0]
 8006a24:	f001 b8c1 	b.w	8007baa <HAL_GPIO_TogglePin>
}
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	20000004 	.word	0x20000004

08006a30 <cliLed>:
#ifdef _USE_HW_CLI
void cliLed(cli_args_t *args)
{
    bool ret = false;

    if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8006a30:	8803      	ldrh	r3, [r0, #0]
{
 8006a32:	b570      	push	{r4, r5, r6, lr}
    if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8006a34:	2b03      	cmp	r3, #3
{
 8006a36:	4605      	mov	r5, r0
    if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8006a38:	d122      	bne.n	8006a80 <cliLed+0x50>
 8006a3a:	6943      	ldr	r3, [r0, #20]
 8006a3c:	4913      	ldr	r1, [pc, #76]	@ (8006a8c <cliLed+0x5c>)
 8006a3e:	2000      	movs	r0, #0
 8006a40:	4798      	blx	r3
 8006a42:	b1e8      	cbz	r0, 8006a80 <cliLed+0x50>
    {
        uint8_t led_ch;
        uint32_t toggle_time;
        uint32_t pre_time;

        led_ch      = (uint8_t)args->getData(1);
 8006a44:	68ab      	ldr	r3, [r5, #8]
 8006a46:	2001      	movs	r0, #1
 8006a48:	4798      	blx	r3
        toggle_time = (uint32_t)args->getData(2);
 8006a4a:	68ab      	ldr	r3, [r5, #8]
        led_ch      = (uint8_t)args->getData(1);
 8006a4c:	b2c4      	uxtb	r4, r0
        toggle_time = (uint32_t)args->getData(2);
 8006a4e:	2002      	movs	r0, #2
 8006a50:	4798      	blx	r3
 8006a52:	4606      	mov	r6, r0

        if (led_ch > 0)
 8006a54:	b10c      	cbz	r4, 8006a5a <cliLed+0x2a>
        {
            led_ch--;
 8006a56:	3c01      	subs	r4, #1
 8006a58:	b2e4      	uxtb	r4, r4
        }

        pre_time = millis();
 8006a5a:	f7ff f9a2 	bl	8005da2 <millis>
 8006a5e:	4605      	mov	r5, r0
        while (cliKeepLoop())
 8006a60:	f7ff fec2 	bl	80067e8 <cliKeepLoop>
 8006a64:	b900      	cbnz	r0, 8006a68 <cliLed+0x38>

    if (ret != true)
    {
        cliPrintf("led toggle ch[1~%d] time_ms\r\n", LED_MAX_CH);
    }
}
 8006a66:	bd70      	pop	{r4, r5, r6, pc}
            if (millis() - pre_time >= toggle_time)
 8006a68:	f7ff f99b 	bl	8005da2 <millis>
 8006a6c:	1b40      	subs	r0, r0, r5
 8006a6e:	4286      	cmp	r6, r0
 8006a70:	d8f6      	bhi.n	8006a60 <cliLed+0x30>
                pre_time = millis();
 8006a72:	f7ff f996 	bl	8005da2 <millis>
 8006a76:	4605      	mov	r5, r0
                ledToggle(led_ch);
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f7ff ffcf 	bl	8006a1c <ledToggle>
 8006a7e:	e7ef      	b.n	8006a60 <cliLed+0x30>
        cliPrintf("led toggle ch[1~%d] time_ms\r\n", LED_MAX_CH);
 8006a80:	2101      	movs	r1, #1
}
 8006a82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        cliPrintf("led toggle ch[1~%d] time_ms\r\n", LED_MAX_CH);
 8006a86:	4802      	ldr	r0, [pc, #8]	@ (8006a90 <cliLed+0x60>)
 8006a88:	f7ff bc1c 	b.w	80062c4 <cliPrintf>
 8006a8c:	0800e559 	.word	0x0800e559
 8006a90:	0800e560 	.word	0x0800e560

08006a94 <resetInit>:
#ifdef _USE_HW_RESET

static uint32_t reset_count = 0;

bool resetInit(void)
{
 8006a94:	b508      	push	{r3, lr}
    bool ret = true;

    // push reset btn
    if (RCC->CSR & (1 << 26))
 8006a96:	4b0d      	ldr	r3, [pc, #52]	@ (8006acc <resetInit+0x38>)
 8006a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9a:	015b      	lsls	r3, r3, #5
 8006a9c:	d50f      	bpl.n	8006abe <resetInit+0x2a>
    {
        rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1);
 8006a9e:	2001      	movs	r0, #1
 8006aa0:	f000 f834 	bl	8006b0c <rtcBackupRegRead>
 8006aa4:	1c41      	adds	r1, r0, #1
 8006aa6:	2001      	movs	r0, #1
 8006aa8:	f000 f828 	bl	8006afc <rtcBackupRegWrite>
        delay(500);
 8006aac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006ab0:	f7ff f975 	bl	8005d9e <delay>
        reset_count = rtcBackupRegRead(1);
 8006ab4:	2001      	movs	r0, #1
 8006ab6:	f000 f829 	bl	8006b0c <rtcBackupRegRead>
 8006aba:	4b05      	ldr	r3, [pc, #20]	@ (8006ad0 <resetInit+0x3c>)
 8006abc:	6018      	str	r0, [r3, #0]
    }

    rtcBackupRegWrite(1, 0);
 8006abe:	2100      	movs	r1, #0
 8006ac0:	2001      	movs	r0, #1
 8006ac2:	f000 f81b 	bl	8006afc <rtcBackupRegWrite>

    return ret;
}
 8006ac6:	2001      	movs	r0, #1
 8006ac8:	bd08      	pop	{r3, pc}
 8006aca:	bf00      	nop
 8006acc:	40021000 	.word	0x40021000
 8006ad0:	2000091c 	.word	0x2000091c

08006ad4 <rtcInit>:
#ifdef _USE_HW_RTC

static RTC_HandleTypeDef hrtc;

bool rtcInit(void)
{
 8006ad4:	b508      	push	{r3, lr}
    bool ret = true;
//    __HAL_RCC_GPIOC_CLK_ENABLE();

    hrtc.Instance          = RTC;
    hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8006ad6:	f04f 33ff 	mov.w	r3, #4294967295
    hrtc.Instance          = RTC;
 8006ada:	4806      	ldr	r0, [pc, #24]	@ (8006af4 <rtcInit+0x20>)
    hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8006adc:	4a06      	ldr	r2, [pc, #24]	@ (8006af8 <rtcInit+0x24>)
 8006ade:	e9c0 2300 	strd	r2, r3, [r0]
    hrtc.Init.OutPut       = RTC_OUTPUTSOURCE_NONE;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	6083      	str	r3, [r0, #8]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006ae6:	f002 fab3 	bl	8009050 <HAL_RTC_Init>
 8006aea:	b108      	cbz	r0, 8006af0 <rtcInit+0x1c>
    {
        Error_Handler();
 8006aec:	f7ff f9e6 	bl	8005ebc <Error_Handler>
    }

    return ret;
}
 8006af0:	2001      	movs	r0, #1
 8006af2:	bd08      	pop	{r3, pc}
 8006af4:	20000920 	.word	0x20000920
 8006af8:	40002800 	.word	0x40002800

08006afc <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8006afc:	460a      	mov	r2, r1

    HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8006afe:	4601      	mov	r1, r0
 8006b00:	4801      	ldr	r0, [pc, #4]	@ (8006b08 <rtcBackupRegWrite+0xc>)
 8006b02:	f002 baeb 	b.w	80090dc <HAL_RTCEx_BKUPWrite>
 8006b06:	bf00      	nop
 8006b08:	20000920 	.word	0x20000920

08006b0c <rtcBackupRegRead>:
}

uint32_t rtcBackupRegRead(uint32_t index)
{
 8006b0c:	4601      	mov	r1, r0
    return HAL_RTCEx_BKUPRead(&hrtc, index);
 8006b0e:	4801      	ldr	r0, [pc, #4]	@ (8006b14 <rtcBackupRegRead+0x8>)
 8006b10:	f002 baec 	b.w	80090ec <HAL_RTCEx_BKUPRead>
 8006b14:	20000920 	.word	0x20000920

08006b18 <HAL_RTC_MspInit>:
}

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 8006b18:	b507      	push	{r0, r1, r2, lr}

    if (rtcHandle->Instance == RTC)
 8006b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b48 <HAL_RTC_MspInit+0x30>)
 8006b1c:	6802      	ldr	r2, [r0, #0]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d10f      	bne.n	8006b42 <HAL_RTC_MspInit+0x2a>
    {
        /* USER CODE BEGIN RTC_MspInit 0 */

        /* USER CODE END RTC_MspInit 0 */
        HAL_PWR_EnableBkUpAccess();
 8006b22:	f001 feef 	bl	8008904 <HAL_PWR_EnableBkUpAccess>
        /* Enable BKP CLK enable for backup registers */
        __HAL_RCC_BKP_CLK_ENABLE();
 8006b26:	4b09      	ldr	r3, [pc, #36]	@ (8006b4c <HAL_RTC_MspInit+0x34>)
 8006b28:	69da      	ldr	r2, [r3, #28]
 8006b2a:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8006b2e:	61da      	str	r2, [r3, #28]
        /* RTC clock enable */
        __HAL_RCC_RTC_ENABLE();
 8006b30:	2201      	movs	r2, #1
        __HAL_RCC_BKP_CLK_ENABLE();
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b38:	9301      	str	r3, [sp, #4]
 8006b3a:	9b01      	ldr	r3, [sp, #4]
        __HAL_RCC_RTC_ENABLE();
 8006b3c:	4b04      	ldr	r3, [pc, #16]	@ (8006b50 <HAL_RTC_MspInit+0x38>)
 8006b3e:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
        /* USER CODE BEGIN RTC_MspInit 1 */

        /* USER CODE END RTC_MspInit 1 */
    }
}
 8006b42:	b003      	add	sp, #12
 8006b44:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b48:	40002800 	.word	0x40002800
 8006b4c:	40021000 	.word	0x40021000
 8006b50:	42420000 	.word	0x42420000

08006b54 <uartInit>:
    {
        is_open[i] = false;
    }

    return true;
}
 8006b54:	2001      	movs	r0, #1
 8006b56:	4770      	bx	lr

08006b58 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8006b58:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool ret = false;
    switch (ch)
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	d041      	beq.n	8006be2 <uartOpen+0x8a>
 8006b5e:	2801      	cmp	r0, #1
 8006b60:	d12a      	bne.n	8006bb8 <uartOpen+0x60>
        is_open[ch] = true;
        ret         = true;
        break;

    case _DEF_UART2:
        huart1.Instance          = USART1;
 8006b62:	4c21      	ldr	r4, [pc, #132]	@ (8006be8 <uartOpen+0x90>)
 8006b64:	4b21      	ldr	r3, [pc, #132]	@ (8006bec <uartOpen+0x94>)
        huart1.Init.BaudRate     = baud;
        huart1.Init.WordLength   = UART_WORDLENGTH_8B;
 8006b66:	2500      	movs	r5, #0
        huart1.Init.BaudRate     = baud;
 8006b68:	e9c4 3100 	strd	r3, r1, [r4]
        huart1.Init.StopBits     = UART_STOPBITS_1;
        huart1.Init.Parity       = UART_PARITY_NONE;
        huart1.Init.Mode         = UART_MODE_TX_RX;
 8006b6c:	230c      	movs	r3, #12
        huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
        huart1.Init.OverSampling = UART_OVERSAMPLING_16;

        HAL_UART_DeInit(&huart1);
 8006b6e:	4620      	mov	r0, r4
        huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8006b70:	e9c4 3505 	strd	r3, r5, [r4, #20]
        huart1.Init.StopBits     = UART_STOPBITS_1;
 8006b74:	e9c4 5502 	strd	r5, r5, [r4, #8]
        huart1.Init.Parity       = UART_PARITY_NONE;
 8006b78:	6125      	str	r5, [r4, #16]
        huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006b7a:	61e5      	str	r5, [r4, #28]
        HAL_UART_DeInit(&huart1);
 8006b7c:	f002 fb87 	bl	800928e <HAL_UART_DeInit>

        qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8006b80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b84:	491a      	ldr	r1, [pc, #104]	@ (8006bf0 <uartOpen+0x98>)
 8006b86:	481b      	ldr	r0, [pc, #108]	@ (8006bf4 <uartOpen+0x9c>)
 8006b88:	f7ff fa5d 	bl	8006046 <qbufferCreate>

        __HAL_RCC_DMA1_CLK_ENABLE();
 8006b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8006bf8 <uartOpen+0xa0>)
        HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006b8e:	4629      	mov	r1, r5
        __HAL_RCC_DMA1_CLK_ENABLE();
 8006b90:	695a      	ldr	r2, [r3, #20]
        HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006b92:	200f      	movs	r0, #15
        __HAL_RCC_DMA1_CLK_ENABLE();
 8006b94:	f042 0201 	orr.w	r2, r2, #1
 8006b98:	615a      	str	r2, [r3, #20]
 8006b9a:	695b      	ldr	r3, [r3, #20]
        HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006b9c:	462a      	mov	r2, r5
        __HAL_RCC_DMA1_CLK_ENABLE();
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	9301      	str	r3, [sp, #4]
 8006ba4:	9b01      	ldr	r3, [sp, #4]
        HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8006ba6:	f000 fb99 	bl	80072dc <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8006baa:	200f      	movs	r0, #15
 8006bac:	f000 fbc6 	bl	800733c <HAL_NVIC_EnableIRQ>

        if (HAL_UART_Init(&huart1) != HAL_OK)
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f002 fb3d 	bl	8009230 <HAL_UART_Init>
 8006bb6:	b110      	cbz	r0, 8006bbe <uartOpen+0x66>
    bool ret = false;
 8006bb8:	2000      	movs	r0, #0
            qbuffer[ch].out = qbuffer[ch].in;
        }
        break;
    }
    return ret;
}
 8006bba:	b003      	add	sp, #12
 8006bbc:	bd30      	pop	{r4, r5, pc}
            if (HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) !=
 8006bbe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006bc2:	490b      	ldr	r1, [pc, #44]	@ (8006bf0 <uartOpen+0x98>)
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f002 fe4f 	bl	8009868 <HAL_UART_Receive_DMA>
 8006bca:	fab0 f080 	clz	r0, r0
            qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8006bce:	4b0b      	ldr	r3, [pc, #44]	@ (8006bfc <uartOpen+0xa4>)
 8006bd0:	4a0b      	ldr	r2, [pc, #44]	@ (8006c00 <uartOpen+0xa8>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
            if (HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) !=
 8006bd4:	0940      	lsrs	r0, r0, #5
            qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8006bd6:	6859      	ldr	r1, [r3, #4]
 8006bd8:	6993      	ldr	r3, [r2, #24]
 8006bda:	1a5b      	subs	r3, r3, r1
            qbuffer[ch].out = qbuffer[ch].in;
 8006bdc:	e9c2 3304 	strd	r3, r3, [r2, #16]
 8006be0:	e7eb      	b.n	8006bba <uartOpen+0x62>
        ret         = true;
 8006be2:	2001      	movs	r0, #1
 8006be4:	e7e9      	b.n	8006bba <uartOpen+0x62>
 8006be6:	bf00      	nop
 8006be8:	20000978 	.word	0x20000978
 8006bec:	40013800 	.word	0x40013800
 8006bf0:	200009c0 	.word	0x200009c0
 8006bf4:	20000ad0 	.word	0x20000ad0
 8006bf8:	40021000 	.word	0x40021000
 8006bfc:	20000934 	.word	0x20000934
 8006c00:	20000ac0 	.word	0x20000ac0

08006c04 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
    uint32_t ret = 0;

    switch (ch)
 8006c04:	b118      	cbz	r0, 8006c0e <uartAvailable+0xa>
 8006c06:	2801      	cmp	r0, #1
 8006c08:	d003      	beq.n	8006c12 <uartAvailable+0xe>
        ret            = qbufferAvailable(&qbuffer[ch]);
        break;
    }

    return ret;
}
 8006c0a:	2000      	movs	r0, #0
 8006c0c:	4770      	bx	lr
        ret = cdcAvailable();
 8006c0e:	f004 b8d1 	b.w	800adb4 <cdcAvailable>
        qbuffer[ch].in = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8006c12:	4b05      	ldr	r3, [pc, #20]	@ (8006c28 <uartAvailable+0x24>)
 8006c14:	4805      	ldr	r0, [pc, #20]	@ (8006c2c <uartAvailable+0x28>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	685a      	ldr	r2, [r3, #4]
 8006c1a:	6983      	ldr	r3, [r0, #24]
 8006c1c:	1a9b      	subs	r3, r3, r2
 8006c1e:	f840 3f10 	str.w	r3, [r0, #16]!
        ret            = qbufferAvailable(&qbuffer[ch]);
 8006c22:	f7ff ba31 	b.w	8006088 <qbufferAvailable>
 8006c26:	bf00      	nop
 8006c28:	20000934 	.word	0x20000934
 8006c2c:	20000ac0 	.word	0x20000ac0

08006c30 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
    uint8_t ret = 0;
 8006c30:	2300      	movs	r3, #0
{
 8006c32:	b507      	push	{r0, r1, r2, lr}

    switch (ch)
 8006c34:	4602      	mov	r2, r0
    uint8_t ret = 0;
 8006c36:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (ch)
 8006c3a:	b130      	cbz	r0, 8006c4a <uartRead+0x1a>
 8006c3c:	2801      	cmp	r0, #1
 8006c3e:	d009      	beq.n	8006c54 <uartRead+0x24>
        qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
        break;
    }

    return ret;
}
 8006c40:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8006c44:	b003      	add	sp, #12
 8006c46:	f85d fb04 	ldr.w	pc, [sp], #4
        ret = cdcRead();
 8006c4a:	f004 f8c5 	bl	800add8 <cdcRead>
 8006c4e:	f88d 0007 	strb.w	r0, [sp, #7]
        break;
 8006c52:	e7f5      	b.n	8006c40 <uartRead+0x10>
        qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8006c54:	f10d 0107 	add.w	r1, sp, #7
 8006c58:	4801      	ldr	r0, [pc, #4]	@ (8006c60 <uartRead+0x30>)
 8006c5a:	f7ff f9fb 	bl	8006054 <qbufferRead>
        break;
 8006c5e:	e7ef      	b.n	8006c40 <uartRead+0x10>
 8006c60:	20000ad0 	.word	0x20000ad0

08006c64 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8006c64:	4603      	mov	r3, r0
 8006c66:	b510      	push	{r4, lr}
 8006c68:	4608      	mov	r0, r1
 8006c6a:	4614      	mov	r4, r2
    uint8_t ret = 0;
    HAL_StatusTypeDef status;

    switch (ch)
 8006c6c:	b11b      	cbz	r3, 8006c76 <uartWrite+0x12>
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d006      	beq.n	8006c80 <uartWrite+0x1c>
    uint8_t ret = 0;
 8006c72:	2000      	movs	r0, #0
 8006c74:	e003      	b.n	8006c7e <uartWrite+0x1a>
    {
    case _DEF_UART1:
        ret = cdcWrite(p_data, length);
 8006c76:	4611      	mov	r1, r2
 8006c78:	f004 f938 	bl	800aeec <cdcWrite>
 8006c7c:	b2c0      	uxtb	r0, r0
        }
        break;
    }

    return ret;
}
 8006c7e:	bd10      	pop	{r4, pc}
        status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8006c80:	2364      	movs	r3, #100	@ 0x64
 8006c82:	4804      	ldr	r0, [pc, #16]	@ (8006c94 <uartWrite+0x30>)
 8006c84:	b292      	uxth	r2, r2
 8006c86:	f002 fb1c 	bl	80092c2 <HAL_UART_Transmit>
        if (status == HAL_OK)
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	d1f1      	bne.n	8006c72 <uartWrite+0xe>
            ret = length;
 8006c8e:	b2e0      	uxtb	r0, r4
 8006c90:	e7f5      	b.n	8006c7e <uartWrite+0x1a>
 8006c92:	bf00      	nop
 8006c94:	20000978 	.word	0x20000978

08006c98 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8006c98:	b40e      	push	{r1, r2, r3}
 8006c9a:	b510      	push	{r4, lr}
 8006c9c:	b0c3      	sub	sp, #268	@ 0x10c
 8006c9e:	ab45      	add	r3, sp, #276	@ 0x114
 8006ca0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ca4:	4604      	mov	r4, r0
    va_list args;
    int len;
    uint32_t ret;

    va_start(args, fmt);
    len = vsnprintf(buf, 256, fmt, args);
 8006ca6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006caa:	a802      	add	r0, sp, #8
    va_start(args, fmt);
 8006cac:	9301      	str	r3, [sp, #4]
    len = vsnprintf(buf, 256, fmt, args);
 8006cae:	f005 fabf 	bl	800c230 <vsniprintf>

    ret = uartWrite(ch, (uint8_t *)buf, len);
 8006cb2:	a902      	add	r1, sp, #8
    len = vsnprintf(buf, 256, fmt, args);
 8006cb4:	4602      	mov	r2, r0
    ret = uartWrite(ch, (uint8_t *)buf, len);
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f7ff ffd4 	bl	8006c64 <uartWrite>
    va_end(args);

    return ret;
}
 8006cbc:	b043      	add	sp, #268	@ 0x10c
 8006cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cc2:	b003      	add	sp, #12
 8006cc4:	4770      	bx	lr

08006cc6 <HAL_UART_ErrorCallback>:
        break;
    }
    return ret;
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_UART_RxCpltCallback>:
        qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);

        HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
    }
#endif
}
 8006cc8:	4770      	bx	lr
	...

08006ccc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8006ccc:	b570      	push	{r4, r5, r6, lr}
 8006cce:	4606      	mov	r6, r0
 8006cd0:	b086      	sub	sp, #24

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cd2:	2210      	movs	r2, #16
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	a802      	add	r0, sp, #8
 8006cd8:	f005 fad2 	bl	800c280 <memset>
    if (uartHandle->Instance == USART1)
 8006cdc:	6832      	ldr	r2, [r6, #0]
 8006cde:	4b25      	ldr	r3, [pc, #148]	@ (8006d74 <HAL_UART_MspInit+0xa8>)
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d144      	bne.n	8006d6e <HAL_UART_MspInit+0xa2>
    {
        /* USER CODE BEGIN USART1_MspInit 0 */

        /* USER CODE END USART1_MspInit 0 */
        /* USART1 clock enable */
        __HAL_RCC_USART1_CLK_ENABLE();
 8006ce4:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 8006ce8:	699a      	ldr	r2, [r3, #24]
        PA10     ------> USART1_RX
        */
        GPIO_InitStruct.Pin   = GPIO_PIN_9;
        GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cea:	4823      	ldr	r0, [pc, #140]	@ (8006d78 <HAL_UART_MspInit+0xac>)
        __HAL_RCC_USART1_CLK_ENABLE();
 8006cec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006cf0:	619a      	str	r2, [r3, #24]
 8006cf2:	699a      	ldr	r2, [r3, #24]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cf4:	a902      	add	r1, sp, #8
        __HAL_RCC_USART1_CLK_ENABLE();
 8006cf6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8006cfa:	9200      	str	r2, [sp, #0]
 8006cfc:	9a00      	ldr	r2, [sp, #0]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cfe:	699a      	ldr	r2, [r3, #24]

        GPIO_InitStruct.Pin  = GPIO_PIN_10;
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d00:	2500      	movs	r5, #0
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d02:	f042 0204 	orr.w	r2, r2, #4
 8006d06:	619a      	str	r2, [r3, #24]
 8006d08:	699b      	ldr	r3, [r3, #24]
        GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8006d0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d0e:	f003 0304 	and.w	r3, r3, #4
 8006d12:	9301      	str	r3, [sp, #4]
 8006d14:	9b01      	ldr	r3, [sp, #4]
        GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8006d16:	2302      	movs	r3, #2
 8006d18:	e9cd 2302 	strd	r2, r3, [sp, #8]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	9305      	str	r3, [sp, #20]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d20:	f000 fdf8 	bl	8007914 <HAL_GPIO_Init>
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d28:	4813      	ldr	r0, [pc, #76]	@ (8006d78 <HAL_UART_MspInit+0xac>)
 8006d2a:	a902      	add	r1, sp, #8

        /* USART1 DMA Init */
        /* USART1_RX Init */
        hdma_usart1_rx.Instance                 = DMA1_Channel5;
 8006d2c:	4c13      	ldr	r4, [pc, #76]	@ (8006d7c <HAL_UART_MspInit+0xb0>)
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d2e:	e9cd 3502 	strd	r3, r5, [sp, #8]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d32:	9504      	str	r5, [sp, #16]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d34:	f000 fdee 	bl	8007914 <HAL_GPIO_Init>
        hdma_usart1_rx.Instance                 = DMA1_Channel5;
 8006d38:	4b11      	ldr	r3, [pc, #68]	@ (8006d80 <HAL_UART_MspInit+0xb4>)
        hdma_usart1_rx.Init.MemInc              = DMA_MINC_ENABLE;
        hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
        hdma_usart1_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
        hdma_usart1_rx.Init.Mode                = DMA_CIRCULAR;
        hdma_usart1_rx.Init.Priority            = DMA_PRIORITY_LOW;
        if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006d3a:	4620      	mov	r0, r4
        hdma_usart1_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8006d3c:	e9c4 3500 	strd	r3, r5, [r4]
        hdma_usart1_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8006d40:	2380      	movs	r3, #128	@ 0x80
        hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d42:	e9c4 3503 	strd	r3, r5, [r4, #12]
        hdma_usart1_rx.Init.Mode                = DMA_CIRCULAR;
 8006d46:	2320      	movs	r3, #32
        hdma_usart1_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8006d48:	60a5      	str	r5, [r4, #8]
        hdma_usart1_rx.Init.Priority            = DMA_PRIORITY_LOW;
 8006d4a:	e9c4 3506 	strd	r3, r5, [r4, #24]
        hdma_usart1_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8006d4e:	6165      	str	r5, [r4, #20]
        if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006d50:	f000 fb28 	bl	80073a4 <HAL_DMA_Init>
 8006d54:	b108      	cbz	r0, 8006d5a <HAL_UART_MspInit+0x8e>
        {
            Error_Handler();
 8006d56:	f7ff f8b1 	bl	8005ebc <Error_Handler>
        }

        __HAL_LINKDMA(uartHandle, hdmarx, hdma_usart1_rx);

        /* USART1 interrupt Init */
        HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	2025      	movs	r0, #37	@ 0x25
 8006d5e:	4611      	mov	r1, r2
        __HAL_LINKDMA(uartHandle, hdmarx, hdma_usart1_rx);
 8006d60:	63f4      	str	r4, [r6, #60]	@ 0x3c
 8006d62:	6266      	str	r6, [r4, #36]	@ 0x24
        HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006d64:	f000 faba 	bl	80072dc <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006d68:	2025      	movs	r0, #37	@ 0x25
 8006d6a:	f000 fae7 	bl	800733c <HAL_NVIC_EnableIRQ>
        /* USER CODE BEGIN USART1_MspInit 1 */

        /* USER CODE END USART1_MspInit 1 */
    }
}
 8006d6e:	b006      	add	sp, #24
 8006d70:	bd70      	pop	{r4, r5, r6, pc}
 8006d72:	bf00      	nop
 8006d74:	40013800 	.word	0x40013800
 8006d78:	40010800 	.word	0x40010800
 8006d7c:	20000934 	.word	0x20000934
 8006d80:	40020058 	.word	0x40020058

08006d84 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{

    if (uartHandle->Instance == USART1)
 8006d84:	6802      	ldr	r2, [r0, #0]
 8006d86:	4b0c      	ldr	r3, [pc, #48]	@ (8006db8 <HAL_UART_MspDeInit+0x34>)
{
 8006d88:	b510      	push	{r4, lr}
    if (uartHandle->Instance == USART1)
 8006d8a:	429a      	cmp	r2, r3
{
 8006d8c:	4604      	mov	r4, r0
    if (uartHandle->Instance == USART1)
 8006d8e:	d111      	bne.n	8006db4 <HAL_UART_MspDeInit+0x30>
    {
        /* USER CODE BEGIN USART1_MspDeInit 0 */

        /* USER CODE END USART1_MspDeInit 0 */
        /* Peripheral clock disable */
        __HAL_RCC_USART1_CLK_DISABLE();
 8006d90:	4a0a      	ldr	r2, [pc, #40]	@ (8006dbc <HAL_UART_MspDeInit+0x38>)

        /**USART1 GPIO Configuration
        PA9     ------> USART1_TX
        PA10     ------> USART1_RX
        */
        HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9 | GPIO_PIN_10);
 8006d92:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
        __HAL_RCC_USART1_CLK_DISABLE();
 8006d96:	6993      	ldr	r3, [r2, #24]
        HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9 | GPIO_PIN_10);
 8006d98:	4809      	ldr	r0, [pc, #36]	@ (8006dc0 <HAL_UART_MspDeInit+0x3c>)
        __HAL_RCC_USART1_CLK_DISABLE();
 8006d9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d9e:	6193      	str	r3, [r2, #24]
        HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9 | GPIO_PIN_10);
 8006da0:	f000 fe90 	bl	8007ac4 <HAL_GPIO_DeInit>

        /* USART1 DMA DeInit */
        HAL_DMA_DeInit(uartHandle->hdmarx);
 8006da4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8006da6:	f000 fb2f 	bl	8007408 <HAL_DMA_DeInit>
        HAL_NVIC_DisableIRQ(USART1_IRQn);
        /* USER CODE BEGIN USART1_MspDeInit 1 */

        /* USER CODE END USART1_MspDeInit 1 */
    }
}
 8006daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_NVIC_DisableIRQ(USART1_IRQn);
 8006dae:	2025      	movs	r0, #37	@ 0x25
 8006db0:	f000 bad2 	b.w	8007358 <HAL_NVIC_DisableIRQ>
}
 8006db4:	bd10      	pop	{r4, pc}
 8006db6:	bf00      	nop
 8006db8:	40013800 	.word	0x40013800
 8006dbc:	40021000 	.word	0x40021000
 8006dc0:	40010800 	.word	0x40010800

08006dc4 <usbInit>:

#ifdef _USE_HW_USB

#include "usb_device.h"

bool usbInit(void){
 8006dc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  bool ret = true;

  GPIO_InitTypeDef GPIO_InitStruct = {0};

      GPIO_InitStruct.Pin   = GPIO_PIN_12;
      GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_OD;
 8006dc6:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8006dca:	2311      	movs	r3, #17
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dcc:	2500      	movs	r5, #0
      GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_OD;
 8006dce:	e9cd 6300 	strd	r6, r3, [sp]
      GPIO_InitStruct.Pull  = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dd2:	2302      	movs	r3, #2
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006dd4:	4c0e      	ldr	r4, [pc, #56]	@ (8006e10 <usbInit+0x4c>)
 8006dd6:	4669      	mov	r1, sp
 8006dd8:	4620      	mov	r0, r4
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dda:	9303      	str	r3, [sp, #12]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ddc:	9502      	str	r5, [sp, #8]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006dde:	f000 fd99 	bl	8007914 <HAL_GPIO_Init>

      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8006de2:	462a      	mov	r2, r5
 8006de4:	4631      	mov	r1, r6
 8006de6:	4620      	mov	r0, r4
 8006de8:	f000 feda 	bl	8007ba0 <HAL_GPIO_WritePin>
      delay(200);
 8006dec:	20c8      	movs	r0, #200	@ 0xc8
 8006dee:	f7fe ffd6 	bl	8005d9e <delay>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8006df2:	2201      	movs	r2, #1
 8006df4:	4631      	mov	r1, r6
 8006df6:	4620      	mov	r0, r4
 8006df8:	f000 fed2 	bl	8007ba0 <HAL_GPIO_WritePin>

      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	4669      	mov	r1, sp
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e00:	9501      	str	r5, [sp, #4]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e02:	f000 fd87 	bl	8007914 <HAL_GPIO_Init>

      MX_USB_DEVICE_Init();
 8006e06:	f003 ff67 	bl	800acd8 <MX_USB_DEVICE_Init>

  return ret;
}
 8006e0a:	2001      	movs	r0, #1
 8006e0c:	b004      	add	sp, #16
 8006e0e:	bd70      	pop	{r4, r5, r6, pc}
 8006e10:	40010800 	.word	0x40010800

08006e14 <ymodemInit>:

static uint16_t crc16(uint8_t *data, uint16_t size);
static bool ymodemReceivePacket(ymodem_packet_t *p_packet, uint8_t data_in);

bool ymodemInit(void)
{
 8006e14:	b508      	push	{r3, lr}
#ifdef _USE_HW_CLI
    cliAdd("ymodem", cliYmodem);
 8006e16:	4903      	ldr	r1, [pc, #12]	@ (8006e24 <ymodemInit+0x10>)
 8006e18:	4803      	ldr	r0, [pc, #12]	@ (8006e28 <ymodemInit+0x14>)
 8006e1a:	f7ff fcf1 	bl	8006800 <cliAdd>
#endif

    return true;
}
 8006e1e:	2001      	movs	r0, #1
 8006e20:	bd08      	pop	{r3, pc}
 8006e22:	bf00      	nop
 8006e24:	080071ad 	.word	0x080071ad
 8006e28:	0800e57e 	.word	0x0800e57e

08006e2c <ymodemOpen>:

bool ymodemOpen(ymodem_t *p_modem, uint8_t ch)
{
 8006e2c:	b570      	push	{r4, r5, r6, lr}
    bool ret = true;

    p_modem->ch      = ch;
    p_modem->is_init = true;

    p_modem->state           = YMODEM_STATE_WAIT_HEAD;
 8006e2e:	2300      	movs	r3, #0
    p_modem->is_init = true;
 8006e30:	2501      	movs	r5, #1
    p_modem->rx_packet.state = YMODEM_PACKET_WAIT_FIRST;
    p_modem->file_buf        = &p_modem->rx_packet.buffer[3];
 8006e32:	f100 06c5 	add.w	r6, r0, #197	@ 0xc5
    p_modem->ch      = ch;
 8006e36:	7001      	strb	r1, [r0, #0]
    p_modem->is_init = true;
 8006e38:	7045      	strb	r5, [r0, #1]
    p_modem->state           = YMODEM_STATE_WAIT_HEAD;
 8006e3a:	7283      	strb	r3, [r0, #10]
    p_modem->rx_packet.state = YMODEM_PACKET_WAIT_FIRST;
 8006e3c:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
    p_modem->file_buf        = &p_modem->rx_packet.buffer[3];
 8006e40:	f8c0 60a8 	str.w	r6, [r0, #168]	@ 0xa8
    p_modem->file_buf_length = 0;
 8006e44:	f8a0 30ac 	strh.w	r3, [r0, #172]	@ 0xac
{
 8006e48:	4604      	mov	r4, r0
    p_modem->pre_time        = millis();
 8006e4a:	f7fe ffaa 	bl	8005da2 <millis>
    p_modem->start_time      = 3000;
 8006e4e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
    p_modem->pre_time        = millis();
 8006e52:	60e0      	str	r0, [r4, #12]
    p_modem->start_time      = 3000;
 8006e54:	6123      	str	r3, [r4, #16]

    p_modem->rx_packet.data = &p_modem->rx_packet.buffer[3];

    return ret;
}
 8006e56:	4628      	mov	r0, r5
    p_modem->rx_packet.data = &p_modem->rx_packet.buffer[3];
 8006e58:	f8c4 60b8 	str.w	r6, [r4, #184]	@ 0xb8
}
 8006e5c:	bd70      	pop	{r4, r5, r6, pc}

08006e5e <ymodemPutch>:

bool ymodemPutch(ymodem_t *p_modem, uint8_t data)
{
 8006e5e:	b507      	push	{r0, r1, r2, lr}
    bool ret = true;

    ret = uartWrite(p_modem->ch, &data, 1);
 8006e60:	2201      	movs	r2, #1
{
 8006e62:	f88d 1007 	strb.w	r1, [sp, #7]
    ret = uartWrite(p_modem->ch, &data, 1);
 8006e66:	7800      	ldrb	r0, [r0, #0]
 8006e68:	f10d 0107 	add.w	r1, sp, #7
 8006e6c:	f7ff fefa 	bl	8006c64 <uartWrite>

    return ret;
}
 8006e70:	3800      	subs	r0, #0
 8006e72:	bf18      	it	ne
 8006e74:	2001      	movne	r0, #1
 8006e76:	b003      	add	sp, #12
 8006e78:	f85d fb04 	ldr.w	pc, [sp], #4

08006e7c <ymodemGetFileInfo>:

bool ymodemGetFileInfo(ymodem_t *p_modem)
{
 8006e7c:	b538      	push	{r3, r4, r5, lr}
 8006e7e:	4604      	mov	r4, r0
    bool ret = true;
    bool valid;
    uint16_t size_i;

    valid = false;
    for (int i = 0; i < 128; i++)
 8006e80:	2300      	movs	r3, #0
    {
        p_modem->file_name[i] = p_modem->rx_packet.data[i];
 8006e82:	f8d0 20b8 	ldr.w	r2, [r0, #184]	@ 0xb8
 8006e86:	f100 0118 	add.w	r1, r0, #24
 8006e8a:	5cd0      	ldrb	r0, [r2, r3]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	f801 0f01 	strb.w	r0, [r1, #1]!
        if (p_modem->file_name[i] == 0x00)
 8006e92:	b9a8      	cbnz	r0, 8006ec0 <ymodemGetFileInfo+0x44>
        }
    }

    if (valid == true)
    {
        for (int i = size_i; i < 128; i++)
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	18d1      	adds	r1, r2, r3
 8006e98:	3280      	adds	r2, #128	@ 0x80
 8006e9a:	4291      	cmp	r1, r2
 8006e9c:	d006      	beq.n	8006eac <ymodemGetFileInfo+0x30>
        {
            if (p_modem->rx_packet.data[i] == 0x20)
 8006e9e:	4608      	mov	r0, r1
 8006ea0:	7805      	ldrb	r5, [r0, #0]
 8006ea2:	3101      	adds	r1, #1
 8006ea4:	2d20      	cmp	r5, #32
 8006ea6:	d1f8      	bne.n	8006e9a <ymodemGetFileInfo+0x1e>
            {
                p_modem->rx_packet.data[i] = 0x00;
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	7002      	strb	r2, [r0, #0]
                break;
            }
        }

        p_modem->file_length =
            (uint32_t)strtoul((const char *)&p_modem->rx_packet.data[size_i],
 8006eac:	2200      	movs	r2, #0
 8006eae:	f8d4 00b8 	ldr.w	r0, [r4, #184]	@ 0xb8
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	4418      	add	r0, r3
 8006eb6:	f005 f881 	bl	800bfbc <strtoul>
        p_modem->file_length =
 8006eba:	f8c4 00a0 	str.w	r0, [r4, #160]	@ 0xa0
 8006ebe:	e001      	b.n	8006ec4 <ymodemGetFileInfo+0x48>
    for (int i = 0; i < 128; i++)
 8006ec0:	2b80      	cmp	r3, #128	@ 0x80
 8006ec2:	d1e2      	bne.n	8006e8a <ymodemGetFileInfo+0xe>
                              (char **)NULL, (int)0);
    }

    return ret;
}
 8006ec4:	2001      	movs	r0, #1
 8006ec6:	bd38      	pop	{r3, r4, r5, pc}

08006ec8 <crc_update>:

#define CRC_POLY 0x1021

uint16_t crc_update(uint16_t crc_in, int incr)
{
    uint16_t xor = crc_in >> 15;
 8006ec8:	0bc3      	lsrs	r3, r0, #15
    uint16_t out = crc_in << 1;
 8006eca:	0040      	lsls	r0, r0, #1
 8006ecc:	b280      	uxth	r0, r0

    if (incr)
 8006ece:	b109      	cbz	r1, 8006ed4 <crc_update+0xc>
    {
        out++;
 8006ed0:	3001      	adds	r0, #1
 8006ed2:	b280      	uxth	r0, r0
    }

    if (xor)
 8006ed4:	b11b      	cbz	r3, 8006ede <crc_update+0x16>
    {
        out ^= CRC_POLY;
 8006ed6:	f480 5081 	eor.w	r0, r0, #4128	@ 0x1020
 8006eda:	f080 0001 	eor.w	r0, r0, #1
    }

    return out;
}
 8006ede:	4770      	bx	lr

08006ee0 <ymodemReceive>:
{
 8006ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (p_modem->is_init != true)
 8006ee4:	7843      	ldrb	r3, [r0, #1]
{
 8006ee6:	4604      	mov	r4, r0
    if (p_modem->is_init != true)
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f000 811e 	beq.w	800712a <ymodemReceive+0x24a>
    if (uartAvailable(p_modem->ch) > 0)
 8006eee:	7800      	ldrb	r0, [r0, #0]
 8006ef0:	f7ff fe88 	bl	8006c04 <uartAvailable>
 8006ef4:	b1a8      	cbz	r0, 8006f22 <ymodemReceive+0x42>
        p_modem->rx_data = uartRead(p_modem->ch);
 8006ef6:	7820      	ldrb	r0, [r4, #0]
 8006ef8:	f7ff fe9a 	bl	8006c30 <uartRead>
    switch (p_packet->state)
 8006efc:	f894 30b0 	ldrb.w	r3, [r4, #176]	@ 0xb0
        p_modem->rx_data = uartRead(p_modem->ch);
 8006f00:	7260      	strb	r0, [r4, #9]
    switch (p_packet->state)
 8006f02:	2b05      	cmp	r3, #5
 8006f04:	d80d      	bhi.n	8006f22 <ymodemReceive+0x42>
 8006f06:	e8df f003 	tbb	[pc, r3]
 8006f0a:	4503      	.short	0x4503
 8006f0c:	6d685749 	.word	0x6d685749
        if (data_in == YMODEM_SOH)
 8006f10:	2801      	cmp	r0, #1
 8006f12:	d11b      	bne.n	8006f4c <ymodemReceive+0x6c>
            p_packet->length = 128;
 8006f14:	2380      	movs	r3, #128	@ 0x80
            p_packet->stx    = data_in;
 8006f16:	f884 00b4 	strb.w	r0, [r4, #180]	@ 0xb4
            p_packet->length = 128;
 8006f1a:	f8a4 30bc 	strh.w	r3, [r4, #188]	@ 0xbc
            p_packet->state  = YMODEM_PACKET_WAIT_SEQ1;
 8006f1e:	f884 00b0 	strb.w	r0, [r4, #176]	@ 0xb0
        if (p_modem->rx_packet.state == YMODEM_PACKET_WAIT_FIRST)
 8006f22:	f894 30b0 	ldrb.w	r3, [r4, #176]	@ 0xb0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f040 80a4 	bne.w	8007074 <ymodemReceive+0x194>
            if (millis() - p_modem->pre_time >= p_modem->start_time)
 8006f2c:	f7fe ff39 	bl	8005da2 <millis>
 8006f30:	68e3      	ldr	r3, [r4, #12]
 8006f32:	1ac0      	subs	r0, r0, r3
 8006f34:	6923      	ldr	r3, [r4, #16]
 8006f36:	4298      	cmp	r0, r3
 8006f38:	f0c0 809c 	bcc.w	8007074 <ymodemReceive+0x194>
                p_modem->pre_time = millis();
 8006f3c:	f7fe ff31 	bl	8005da2 <millis>
                ymodemPutch(p_modem, YMODEM_C);
 8006f40:	2143      	movs	r1, #67	@ 0x43
                p_modem->pre_time = millis();
 8006f42:	60e0      	str	r0, [r4, #12]
                ymodemPutch(p_modem, YMODEM_C);
 8006f44:	4620      	mov	r0, r4
 8006f46:	f7ff ff8a 	bl	8006e5e <ymodemPutch>
 8006f4a:	e093      	b.n	8007074 <ymodemReceive+0x194>
        if (data_in == YMODEM_STX)
 8006f4c:	2802      	cmp	r0, #2
 8006f4e:	d109      	bne.n	8006f64 <ymodemReceive+0x84>
            p_packet->length = 1024;
 8006f50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f54:	f8a4 30bc 	strh.w	r3, [r4, #188]	@ 0xbc
            p_packet->state  = YMODEM_PACKET_WAIT_SEQ1;
 8006f58:	2301      	movs	r3, #1
            p_packet->stx    = data_in;
 8006f5a:	f884 00b4 	strb.w	r0, [r4, #180]	@ 0xb4
        p_packet->state  = YMODEM_PACKET_WAIT_SEQ2;
 8006f5e:	f884 30b0 	strb.w	r3, [r4, #176]	@ 0xb0
    return ret;
 8006f62:	e7de      	b.n	8006f22 <ymodemReceive+0x42>
        if (data_in == YMODEM_EOT)
 8006f64:	2804      	cmp	r0, #4
 8006f66:	d112      	bne.n	8006f8e <ymodemReceive+0xae>
            p_packet->stx = data_in;
 8006f68:	f884 00b4 	strb.w	r0, [r4, #180]	@ 0xb4
        if (p_modem->state != YMODEM_STATE_WAIT_HEAD)
 8006f6c:	7aa3      	ldrb	r3, [r4, #10]
            if (p_modem->rx_packet.stx == YMODEM_CAN)
 8006f6e:	f894 20b4 	ldrb.w	r2, [r4, #180]	@ 0xb4
        if (p_modem->state != YMODEM_STATE_WAIT_HEAD)
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d072      	beq.n	800705c <ymodemReceive+0x17c>
            if (p_modem->rx_packet.stx == YMODEM_CAN)
 8006f76:	2a18      	cmp	r2, #24
 8006f78:	d160      	bne.n	800703c <ymodemReceive+0x15c>
                p_modem->state = YMODEM_STATE_WAIT_CANCEL;
 8006f7a:	2305      	movs	r3, #5
 8006f7c:	72a3      	strb	r3, [r4, #10]
            ymodemPutch(p_modem, YMODEM_ACK);
 8006f7e:	2106      	movs	r1, #6
 8006f80:	4620      	mov	r0, r4
 8006f82:	f7ff ff6c 	bl	8006e5e <ymodemPutch>
            p_modem->state = YMODEM_STATE_WAIT_HEAD;
 8006f86:	2300      	movs	r3, #0
            break;
 8006f88:	2503      	movs	r5, #3
            p_modem->state = YMODEM_STATE_WAIT_HEAD;
 8006f8a:	72a3      	strb	r3, [r4, #10]
            break;
 8006f8c:	e084      	b.n	8007098 <ymodemReceive+0x1b8>
        if (data_in == YMODEM_CAN)
 8006f8e:	2818      	cmp	r0, #24
 8006f90:	d0ea      	beq.n	8006f68 <ymodemReceive+0x88>
 8006f92:	e7c6      	b.n	8006f22 <ymodemReceive+0x42>
        p_packet->state  = YMODEM_PACKET_WAIT_SEQ2;
 8006f94:	2302      	movs	r3, #2
        p_packet->seq[0] = data_in;
 8006f96:	f884 00b5 	strb.w	r0, [r4, #181]	@ 0xb5
        p_packet->state  = YMODEM_PACKET_WAIT_SEQ2;
 8006f9a:	e7e0      	b.n	8006f5e <ymodemReceive+0x7e>
        p_packet->seq[1] = data_in;
 8006f9c:	f884 00b6 	strb.w	r0, [r4, #182]	@ 0xb6
        if (p_packet->seq[0] == (uint8_t)(~data_in))
 8006fa0:	43c0      	mvns	r0, r0
 8006fa2:	f894 30b5 	ldrb.w	r3, [r4, #181]	@ 0xb5
 8006fa6:	b2c0      	uxtb	r0, r0
 8006fa8:	4283      	cmp	r3, r0
 8006faa:	f04f 0300 	mov.w	r3, #0
 8006fae:	d1d6      	bne.n	8006f5e <ymodemReceive+0x7e>
            p_packet->index = 0;
 8006fb0:	f8a4 30b2 	strh.w	r3, [r4, #178]	@ 0xb2
            p_packet->state = YMODEM_PACKET_WAIT_DATA;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	e7d2      	b.n	8006f5e <ymodemReceive+0x7e>
        p_packet->data[p_packet->index] = data_in;
 8006fb8:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 8006fbc:	f8d4 20b8 	ldr.w	r2, [r4, #184]	@ 0xb8
 8006fc0:	54d0      	strb	r0, [r2, r3]
        p_packet->index++;
 8006fc2:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
        if (p_packet->index >= p_packet->length)
 8006fc6:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	@ 0xbc
        p_packet->index++;
 8006fca:	3301      	adds	r3, #1
 8006fcc:	b29b      	uxth	r3, r3
        if (p_packet->index >= p_packet->length)
 8006fce:	429a      	cmp	r2, r3
        p_packet->index++;
 8006fd0:	f8a4 30b2 	strh.w	r3, [r4, #178]	@ 0xb2
        if (p_packet->index >= p_packet->length)
 8006fd4:	d8a5      	bhi.n	8006f22 <ymodemReceive+0x42>
            p_packet->state = YMODEM_PACKET_WAIT_CRCH;
 8006fd6:	2304      	movs	r3, #4
 8006fd8:	e7c1      	b.n	8006f5e <ymodemReceive+0x7e>
        p_packet->crc_recv = (data_in << 8);
 8006fda:	0200      	lsls	r0, r0, #8
        p_packet->state    = YMODEM_PACKET_WAIT_CRCL;
 8006fdc:	2305      	movs	r3, #5
        p_packet->crc_recv = (data_in << 8);
 8006fde:	f8a4 00c0 	strh.w	r0, [r4, #192]	@ 0xc0
        p_packet->state    = YMODEM_PACKET_WAIT_CRCL;
 8006fe2:	e7bc      	b.n	8006f5e <ymodemReceive+0x7e>
        p_packet->crc_recv |= (data_in << 0);
 8006fe4:	f8b4 30c0 	ldrh.w	r3, [r4, #192]	@ 0xc0
        p_packet->crc = crc16(p_packet->data, p_packet->length);
 8006fe8:	f8b4 50bc 	ldrh.w	r5, [r4, #188]	@ 0xbc
        p_packet->crc_recv |= (data_in << 0);
 8006fec:	ea40 0203 	orr.w	r2, r0, r3
        p_packet->state = YMODEM_PACKET_WAIT_FIRST;
 8006ff0:	2000      	movs	r0, #0
 8006ff2:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
        p_packet->crc_recv |= (data_in << 0);
 8006ff6:	f8a4 20c0 	strh.w	r2, [r4, #192]	@ 0xc0
        p_packet->state = YMODEM_PACKET_WAIT_FIRST;
 8006ffa:	f884 00b0 	strb.w	r0, [r4, #176]	@ 0xb0

uint16_t crc16(uint8_t *data, uint16_t size)
{
    uint16_t crc, i;

    for (crc = 0; size > 0; size--, data++)
 8006ffe:	f103 38ff 	add.w	r8, r3, #4294967295
 8007002:	b965      	cbnz	r5, 800701e <ymodemReceive+0x13e>
 8007004:	2510      	movs	r5, #16
        {
            crc = crc_update(crc, *data & i);
        }
    }

    for (i = 0; i < 16; i++)
 8007006:	3d01      	subs	r5, #1
    {
        crc = crc_update(crc, 0);
 8007008:	2100      	movs	r1, #0
    for (i = 0; i < 16; i++)
 800700a:	b2ad      	uxth	r5, r5
        crc = crc_update(crc, 0);
 800700c:	f7ff ff5c 	bl	8006ec8 <crc_update>
    for (i = 0; i < 16; i++)
 8007010:	2d00      	cmp	r5, #0
 8007012:	d1f8      	bne.n	8007006 <ymodemReceive+0x126>
        if (p_packet->crc == p_packet->crc_recv)
 8007014:	4282      	cmp	r2, r0
        p_packet->crc = crc16(p_packet->data, p_packet->length);
 8007016:	f8a4 00be 	strh.w	r0, [r4, #190]	@ 0xbe
        if (p_packet->crc == p_packet->crc_recv)
 800701a:	d182      	bne.n	8006f22 <ymodemReceive+0x42>
 800701c:	e7a6      	b.n	8006f6c <ymodemReceive+0x8c>
            crc = crc_update(crc, *data & i);
 800701e:	2608      	movs	r6, #8
        for (i = 0x80; i; i >>= 1)
 8007020:	2780      	movs	r7, #128	@ 0x80
            crc = crc_update(crc, *data & i);
 8007022:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 8007026:	ea07 0109 	and.w	r1, r7, r9
 800702a:	f7ff ff4d 	bl	8006ec8 <crc_update>
        for (i = 0x80; i; i >>= 1)
 800702e:	3e01      	subs	r6, #1
 8007030:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8007034:	d1f7      	bne.n	8007026 <ymodemReceive+0x146>
    for (crc = 0; size > 0; size--, data++)
 8007036:	3d01      	subs	r5, #1
 8007038:	b2ad      	uxth	r5, r5
 800703a:	e7e2      	b.n	8007002 <ymodemReceive+0x122>
        switch (p_modem->state)
 800703c:	3b01      	subs	r3, #1
 800703e:	2b04      	cmp	r3, #4
 8007040:	d818      	bhi.n	8007074 <ymodemReceive+0x194>
 8007042:	a101      	add	r1, pc, #4	@ (adr r1, 8007048 <ymodemReceive+0x168>)
 8007044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007048:	0800709f 	.word	0x0800709f
 800704c:	080070d3 	.word	0x080070d3
 8007050:	08007107 	.word	0x08007107
 8007054:	0800711b 	.word	0x0800711b
 8007058:	08006f7f 	.word	0x08006f7f
            if (p_modem->rx_packet.stx == YMODEM_EOT)
 800705c:	2a04      	cmp	r2, #4
 800705e:	d106      	bne.n	800706e <ymodemReceive+0x18e>
                ymodemPutch(p_modem, YMODEM_NACK);
 8007060:	2115      	movs	r1, #21
 8007062:	4620      	mov	r0, r4
 8007064:	f7ff fefb 	bl	8006e5e <ymodemPutch>
                p_modem->state = YMODEM_STATE_WAIT_LAST;
 8007068:	2303      	movs	r3, #3
            p_modem->state = YMODEM_STATE_WAIT_END;
 800706a:	72a3      	strb	r3, [r4, #10]
            break;
 800706c:	e002      	b.n	8007074 <ymodemReceive+0x194>
            else if (p_modem->rx_packet.seq[0] == 0x00)
 800706e:	f894 50b5 	ldrb.w	r5, [r4, #181]	@ 0xb5
 8007072:	b115      	cbz	r5, 800707a <ymodemReceive+0x19a>
    bool ret    = false;
 8007074:	2000      	movs	r0, #0
}
 8007076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                ymodemGetFileInfo(p_modem);
 800707a:	4620      	mov	r0, r4
                p_modem->file_addr = 0;
 800707c:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
                ymodemGetFileInfo(p_modem);
 8007080:	f7ff fefc 	bl	8006e7c <ymodemGetFileInfo>
                ymodemPutch(p_modem, YMODEM_ACK);
 8007084:	2106      	movs	r1, #6
 8007086:	4620      	mov	r0, r4
 8007088:	f7ff fee9 	bl	8006e5e <ymodemPutch>
                ymodemPutch(p_modem, YMODEM_C);
 800708c:	2143      	movs	r1, #67	@ 0x43
 800708e:	4620      	mov	r0, r4
 8007090:	f7ff fee5 	bl	8006e5e <ymodemPutch>
                p_modem->state = YMODEM_STATE_WAIT_FIRST;
 8007094:	2301      	movs	r3, #1
                p_modem->state = YMODEM_STATE_WAIT_DATA;
 8007096:	72a3      	strb	r3, [r4, #10]
        return true;
 8007098:	2001      	movs	r0, #1
                p_modem->type = YMODEM_TYPE_DATA;
 800709a:	7225      	strb	r5, [r4, #8]
 800709c:	e7eb      	b.n	8007076 <ymodemReceive+0x196>
            if (p_modem->rx_packet.stx == YMODEM_EOT)
 800709e:	2a04      	cmp	r2, #4
 80070a0:	d0de      	beq.n	8007060 <ymodemReceive+0x180>
            else if (p_modem->rx_packet.seq[0] == 0x01)
 80070a2:	f894 50b5 	ldrb.w	r5, [r4, #181]	@ 0xb5
 80070a6:	2d01      	cmp	r5, #1
 80070a8:	d1e4      	bne.n	8007074 <ymodemReceive+0x194>
                p_modem->file_addr     = 0;
 80070aa:	2300      	movs	r3, #0
 80070ac:	f8d4 20a0 	ldr.w	r2, [r4, #160]	@ 0xa0
 80070b0:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
                if (buf_length > p_modem->rx_packet.length)
 80070b4:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	@ 0xbc
                ymodemPutch(p_modem, YMODEM_ACK);
 80070b8:	2106      	movs	r1, #6
 80070ba:	4293      	cmp	r3, r2
 80070bc:	bf28      	it	cs
 80070be:	4613      	movcs	r3, r2
 80070c0:	4620      	mov	r0, r4
                p_modem->file_buf_length = buf_length;
 80070c2:	f8a4 30ac 	strh.w	r3, [r4, #172]	@ 0xac
                p_modem->file_received += buf_length;
 80070c6:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
                ymodemPutch(p_modem, YMODEM_ACK);
 80070ca:	f7ff fec8 	bl	8006e5e <ymodemPutch>
                p_modem->state = YMODEM_STATE_WAIT_DATA;
 80070ce:	2302      	movs	r3, #2
 80070d0:	e7e1      	b.n	8007096 <ymodemReceive+0x1b6>
            if (p_modem->rx_packet.stx == YMODEM_EOT)
 80070d2:	2a04      	cmp	r2, #4
 80070d4:	d0c4      	beq.n	8007060 <ymodemReceive+0x180>
                buf_length = (p_modem->file_length - p_modem->file_addr);
 80070d6:	e9d4 2327 	ldrd	r2, r3, [r4, #156]	@ 0x9c
                if (buf_length > p_modem->rx_packet.length)
 80070da:	f8b4 10bc 	ldrh.w	r1, [r4, #188]	@ 0xbc
                buf_length = (p_modem->file_length - p_modem->file_addr);
 80070de:	1a9b      	subs	r3, r3, r2
 80070e0:	428b      	cmp	r3, r1
 80070e2:	bf28      	it	cs
 80070e4:	460b      	movcs	r3, r1
                p_modem->file_addr += buf_length;
 80070e6:	441a      	add	r2, r3
 80070e8:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
                p_modem->file_received += buf_length;
 80070ec:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
                ymodemPutch(p_modem, YMODEM_ACK);
 80070f0:	2106      	movs	r1, #6
                p_modem->file_received += buf_length;
 80070f2:	441a      	add	r2, r3
                ymodemPutch(p_modem, YMODEM_ACK);
 80070f4:	4620      	mov	r0, r4
                p_modem->file_buf_length = buf_length;
 80070f6:	f8a4 30ac 	strh.w	r3, [r4, #172]	@ 0xac
                p_modem->file_received += buf_length;
 80070fa:	f8c4 20a4 	str.w	r2, [r4, #164]	@ 0xa4
                ymodemPutch(p_modem, YMODEM_ACK);
 80070fe:	f7ff feae 	bl	8006e5e <ymodemPutch>
 8007102:	2501      	movs	r5, #1
 8007104:	e7c8      	b.n	8007098 <ymodemReceive+0x1b8>
            ymodemPutch(p_modem, YMODEM_ACK);
 8007106:	2106      	movs	r1, #6
 8007108:	4620      	mov	r0, r4
 800710a:	f7ff fea8 	bl	8006e5e <ymodemPutch>
            ymodemPutch(p_modem, YMODEM_C);
 800710e:	2143      	movs	r1, #67	@ 0x43
 8007110:	4620      	mov	r0, r4
 8007112:	f7ff fea4 	bl	8006e5e <ymodemPutch>
            p_modem->state = YMODEM_STATE_WAIT_END;
 8007116:	2304      	movs	r3, #4
 8007118:	e7a7      	b.n	800706a <ymodemReceive+0x18a>
            ymodemPutch(p_modem, YMODEM_ACK);
 800711a:	2106      	movs	r1, #6
 800711c:	4620      	mov	r0, r4
 800711e:	f7ff fe9e 	bl	8006e5e <ymodemPutch>
            p_modem->state = YMODEM_STATE_WAIT_HEAD;
 8007122:	2300      	movs	r3, #0
            break;
 8007124:	2502      	movs	r5, #2
            p_modem->state = YMODEM_STATE_WAIT_HEAD;
 8007126:	72a3      	strb	r3, [r4, #10]
            break;
 8007128:	e7b6      	b.n	8007098 <ymodemReceive+0x1b8>
 800712a:	2504      	movs	r5, #4
 800712c:	e7b4      	b.n	8007098 <ymodemReceive+0x1b8>
 800712e:	bf00      	nop

08007130 <cliYmodem.part.0>:

    return crc;
}

#ifdef _USE_HW_CLI
void cliYmodem(cli_args_t *args)
 8007130:	b500      	push	{lr}
 8007132:	f2ad 4dcc 	subw	sp, sp, #1228	@ 0x4cc
    bool keep_loop;
    uint8_t log_ch = _DEF_UART2;

    if (args->argc == 1 && args->isStr(0, "down"))
    {
        ymodemOpen(&ymodem, _DEF_UART1);
 8007136:	2100      	movs	r1, #0
 8007138:	4668      	mov	r0, sp
 800713a:	f7ff fe77 	bl	8006e2c <ymodemOpen>

        keep_loop = true;

        while (keep_loop)
        {
            if (ymodemReceive(&ymodem) == true)
 800713e:	4668      	mov	r0, sp
 8007140:	f7ff fece 	bl	8006ee0 <ymodemReceive>
 8007144:	2800      	cmp	r0, #0
 8007146:	d0fa      	beq.n	800713e <cliYmodem.part.0+0xe>
            {
                switch (ymodem.type)
 8007148:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800714c:	2b04      	cmp	r3, #4
 800714e:	d8f6      	bhi.n	800713e <cliYmodem.part.0+0xe>
 8007150:	e8df f003 	tbb	[pc, r3]
 8007154:	1d150b03 	.word	0x1d150b03
 8007158:	1f          	.byte	0x1f
 8007159:	00          	.byte	0x00
                {
                case YMODEM_TYPE_START:
                    uartPrintf(log_ch, "YMODEM_TYPE_START %s %d\r\n",
 800715a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800715c:	490e      	ldr	r1, [pc, #56]	@ (8007198 <cliYmodem.part.0+0x68>)
 800715e:	f10d 0219 	add.w	r2, sp, #25
                               ymodem.file_name, ymodem.file_length);
                    break;

                case YMODEM_TYPE_DATA:
                    uartPrintf(log_ch, "YMODEM_TYPE_DATA %d %d %%\r\n",
 8007162:	2001      	movs	r0, #1
 8007164:	f7ff fd98 	bl	8006c98 <uartPrintf>
                               ymodem.rx_packet.seq[0],
                               ymodem.file_received * 100 / ymodem.file_length);
                    break;
 8007168:	e7e9      	b.n	800713e <cliYmodem.part.0+0xe>
                               ymodem.file_received * 100 / ymodem.file_length);
 800716a:	2264      	movs	r2, #100	@ 0x64
 800716c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
                    uartPrintf(log_ch, "YMODEM_TYPE_DATA %d %d %%\r\n",
 800716e:	490b      	ldr	r1, [pc, #44]	@ (800719c <cliYmodem.part.0+0x6c>)
                               ymodem.file_received * 100 / ymodem.file_length);
 8007170:	4353      	muls	r3, r2
                    uartPrintf(log_ch, "YMODEM_TYPE_DATA %d %d %%\r\n",
 8007172:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8007174:	fbb3 f3f2 	udiv	r3, r3, r2
 8007178:	f89d 20b5 	ldrb.w	r2, [sp, #181]	@ 0xb5
 800717c:	e7f1      	b.n	8007162 <cliYmodem.part.0+0x32>

                case YMODEM_TYPE_END:
                    uartPrintf(log_ch, "YMODEM_TYPE_END \r\n");
 800717e:	4908      	ldr	r1, [pc, #32]	@ (80071a0 <cliYmodem.part.0+0x70>)
                    uartPrintf(log_ch, "YMODEM_TYPE_CANCEL \n");
                    keep_loop = false;
                    break;

                case YMODEM_TYPE_ERROR:
                    uartPrintf(log_ch, "YMODEM_TYPE_ERROR \r\n");
 8007180:	2001      	movs	r0, #1
 8007182:	f7ff fd89 	bl	8006c98 <uartPrintf>

    if (ret != true)
    {
        cliPrintf("ymodem down\r\n");
    }
}
 8007186:	f20d 4dcc 	addw	sp, sp, #1228	@ 0x4cc
 800718a:	f85d fb04 	ldr.w	pc, [sp], #4
                    uartPrintf(log_ch, "YMODEM_TYPE_CANCEL \n");
 800718e:	4905      	ldr	r1, [pc, #20]	@ (80071a4 <cliYmodem.part.0+0x74>)
 8007190:	e7f6      	b.n	8007180 <cliYmodem.part.0+0x50>
                    uartPrintf(log_ch, "YMODEM_TYPE_ERROR \r\n");
 8007192:	4905      	ldr	r1, [pc, #20]	@ (80071a8 <cliYmodem.part.0+0x78>)
 8007194:	e7f4      	b.n	8007180 <cliYmodem.part.0+0x50>
 8007196:	bf00      	nop
 8007198:	0800e585 	.word	0x0800e585
 800719c:	0800e59f 	.word	0x0800e59f
 80071a0:	0800e5bb 	.word	0x0800e5bb
 80071a4:	0800e5ce 	.word	0x0800e5ce
 80071a8:	0800e5e3 	.word	0x0800e5e3

080071ac <cliYmodem>:
{
 80071ac:	b508      	push	{r3, lr}
    if (args->argc == 1 && args->isStr(0, "down"))
 80071ae:	8803      	ldrh	r3, [r0, #0]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d108      	bne.n	80071c6 <cliYmodem+0x1a>
 80071b4:	6943      	ldr	r3, [r0, #20]
 80071b6:	4906      	ldr	r1, [pc, #24]	@ (80071d0 <cliYmodem+0x24>)
 80071b8:	2000      	movs	r0, #0
 80071ba:	4798      	blx	r3
 80071bc:	b118      	cbz	r0, 80071c6 <cliYmodem+0x1a>
}
 80071be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80071c2:	f7ff bfb5 	b.w	8007130 <cliYmodem.part.0>
        cliPrintf("ymodem down\r\n");
 80071c6:	4803      	ldr	r0, [pc, #12]	@ (80071d4 <cliYmodem+0x28>)
}
 80071c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        cliPrintf("ymodem down\r\n");
 80071cc:	f7ff b87a 	b.w	80062c4 <cliPrintf>
 80071d0:	0800e3f6 	.word	0x0800e3f6
 80071d4:	0800e5f8 	.word	0x0800e5f8

080071d8 <hwInit>:
 */

#include "hw.h"

void hwInit(void)
{
 80071d8:	b508      	push	{r3, lr}
    bspInit();
 80071da:	f7fe fe33 	bl	8005e44 <bspInit>
    cliInit();
 80071de:	f7ff fb2f 	bl	8006840 <cliInit>
    rtcInit();
 80071e2:	f7ff fc77 	bl	8006ad4 <rtcInit>
    resetInit();
 80071e6:	f7ff fc55 	bl	8006a94 <resetInit>
    ledInit();
 80071ea:	f7ff fbed 	bl	80069c8 <ledInit>
    usbInit();
 80071ee:	f7ff fde9 	bl	8006dc4 <usbInit>
    uartInit();
 80071f2:	f7ff fcaf 	bl	8006b54 <uartInit>
    flashInit();
 80071f6:	f7ff fb59 	bl	80068ac <flashInit>
    ymodemInit();
}
 80071fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ymodemInit();
 80071fe:	f7ff be09 	b.w	8006e14 <ymodemInit>
	...

08007204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007204:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007206:	4b0e      	ldr	r3, [pc, #56]	@ (8007240 <HAL_InitTick+0x3c>)
{
 8007208:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800720a:	781a      	ldrb	r2, [r3, #0]
 800720c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007210:	fbb3 f3f2 	udiv	r3, r3, r2
 8007214:	4a0b      	ldr	r2, [pc, #44]	@ (8007244 <HAL_InitTick+0x40>)
 8007216:	6810      	ldr	r0, [r2, #0]
 8007218:	fbb0 f0f3 	udiv	r0, r0, r3
 800721c:	f000 f8ae 	bl	800737c <HAL_SYSTICK_Config>
 8007220:	4604      	mov	r4, r0
 8007222:	b958      	cbnz	r0, 800723c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007224:	2d0f      	cmp	r5, #15
 8007226:	d809      	bhi.n	800723c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007228:	4602      	mov	r2, r0
 800722a:	4629      	mov	r1, r5
 800722c:	f04f 30ff 	mov.w	r0, #4294967295
 8007230:	f000 f854 	bl	80072dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007234:	4620      	mov	r0, r4
 8007236:	4b04      	ldr	r3, [pc, #16]	@ (8007248 <HAL_InitTick+0x44>)
 8007238:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800723a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800723c:	2001      	movs	r0, #1
 800723e:	e7fc      	b.n	800723a <HAL_InitTick+0x36>
 8007240:	2000000c 	.word	0x2000000c
 8007244:	20000000 	.word	0x20000000
 8007248:	20000010 	.word	0x20000010

0800724c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800724c:	4a07      	ldr	r2, [pc, #28]	@ (800726c <HAL_Init+0x20>)
{
 800724e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007250:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007252:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007254:	f043 0310 	orr.w	r3, r3, #16
 8007258:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800725a:	f000 f82d 	bl	80072b8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800725e:	200f      	movs	r0, #15
 8007260:	f7ff ffd0 	bl	8007204 <HAL_InitTick>
  HAL_MspInit();
 8007264:	f7fe fe2c 	bl	8005ec0 <HAL_MspInit>
}
 8007268:	2000      	movs	r0, #0
 800726a:	bd08      	pop	{r3, pc}
 800726c:	40022000 	.word	0x40022000

08007270 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8007270:	4a03      	ldr	r2, [pc, #12]	@ (8007280 <HAL_IncTick+0x10>)
 8007272:	4b04      	ldr	r3, [pc, #16]	@ (8007284 <HAL_IncTick+0x14>)
 8007274:	6811      	ldr	r1, [r2, #0]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	440b      	add	r3, r1
 800727a:	6013      	str	r3, [r2, #0]
}
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	20000ae0 	.word	0x20000ae0
 8007284:	2000000c 	.word	0x2000000c

08007288 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007288:	4b01      	ldr	r3, [pc, #4]	@ (8007290 <HAL_GetTick+0x8>)
 800728a:	6818      	ldr	r0, [r3, #0]
}
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	20000ae0 	.word	0x20000ae0

08007294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007294:	b538      	push	{r3, r4, r5, lr}
 8007296:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007298:	f7ff fff6 	bl	8007288 <HAL_GetTick>
 800729c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800729e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80072a0:	bf1e      	ittt	ne
 80072a2:	4b04      	ldrne	r3, [pc, #16]	@ (80072b4 <HAL_Delay+0x20>)
 80072a4:	781b      	ldrbne	r3, [r3, #0]
 80072a6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80072a8:	f7ff ffee 	bl	8007288 <HAL_GetTick>
 80072ac:	1b43      	subs	r3, r0, r5
 80072ae:	42a3      	cmp	r3, r4
 80072b0:	d3fa      	bcc.n	80072a8 <HAL_Delay+0x14>
  {
  }
}
 80072b2:	bd38      	pop	{r3, r4, r5, pc}
 80072b4:	2000000c 	.word	0x2000000c

080072b8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80072b8:	4907      	ldr	r1, [pc, #28]	@ (80072d8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80072ba:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80072bc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80072be:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80072c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80072c6:	0412      	lsls	r2, r2, #16
 80072c8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80072ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80072cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80072d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80072d4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80072d6:	4770      	bx	lr
 80072d8:	e000ed00 	.word	0xe000ed00

080072dc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80072dc:	4b15      	ldr	r3, [pc, #84]	@ (8007334 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80072de:	b530      	push	{r4, r5, lr}
 80072e0:	68dc      	ldr	r4, [r3, #12]
 80072e2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80072e6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80072ea:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80072ec:	2b04      	cmp	r3, #4
 80072ee:	bf28      	it	cs
 80072f0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80072f2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072f4:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80072f8:	bf94      	ite	ls
 80072fa:	2400      	movls	r4, #0
 80072fc:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072fe:	fa05 f303 	lsl.w	r3, r5, r3
 8007302:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007306:	40a5      	lsls	r5, r4
 8007308:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800730c:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800730e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007310:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007314:	bfac      	ite	ge
 8007316:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800731a:	4a07      	ldrlt	r2, [pc, #28]	@ (8007338 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800731c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8007320:	b2db      	uxtb	r3, r3
 8007322:	bfab      	itete	ge
 8007324:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007328:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800732c:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007330:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8007332:	bd30      	pop	{r4, r5, pc}
 8007334:	e000ed00 	.word	0xe000ed00
 8007338:	e000ed14 	.word	0xe000ed14

0800733c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800733c:	2800      	cmp	r0, #0
 800733e:	db07      	blt.n	8007350 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007340:	2301      	movs	r3, #1
 8007342:	0941      	lsrs	r1, r0, #5
 8007344:	4a03      	ldr	r2, [pc, #12]	@ (8007354 <HAL_NVIC_EnableIRQ+0x18>)
 8007346:	f000 001f 	and.w	r0, r0, #31
 800734a:	4083      	lsls	r3, r0
 800734c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	e000e100 	.word	0xe000e100

08007358 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007358:	2800      	cmp	r0, #0
 800735a:	db0c      	blt.n	8007376 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800735c:	2201      	movs	r2, #1
 800735e:	4906      	ldr	r1, [pc, #24]	@ (8007378 <HAL_NVIC_DisableIRQ+0x20>)
 8007360:	0943      	lsrs	r3, r0, #5
 8007362:	f000 001f 	and.w	r0, r0, #31
 8007366:	4082      	lsls	r2, r0
 8007368:	3320      	adds	r3, #32
 800736a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800736e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007372:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8007376:	4770      	bx	lr
 8007378:	e000e100 	.word	0xe000e100

0800737c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800737c:	3801      	subs	r0, #1
 800737e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8007382:	d20b      	bcs.n	800739c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007384:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007388:	21f0      	movs	r1, #240	@ 0xf0
 800738a:	4a05      	ldr	r2, [pc, #20]	@ (80073a0 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800738c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800738e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007392:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007394:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007396:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007398:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800739a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800739c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800739e:	4770      	bx	lr
 80073a0:	e000ed00 	.word	0xe000ed00

080073a4 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80073a4:	4603      	mov	r3, r0
{
 80073a6:	b510      	push	{r4, lr}
  if(hdma == NULL)
 80073a8:	b340      	cbz	r0, 80073fc <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80073aa:	2114      	movs	r1, #20
 80073ac:	6800      	ldr	r0, [r0, #0]
 80073ae:	4a14      	ldr	r2, [pc, #80]	@ (8007400 <HAL_DMA_Init+0x5c>)
 80073b0:	4402      	add	r2, r0
 80073b2:	fbb2 f2f1 	udiv	r2, r2, r1
 80073b6:	0092      	lsls	r2, r2, #2
 80073b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80073ba:	4a12      	ldr	r2, [pc, #72]	@ (8007404 <HAL_DMA_Init+0x60>)
 80073bc:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80073be:	2202      	movs	r2, #2
 80073c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80073c4:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 80073c8:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073ca:	68dc      	ldr	r4, [r3, #12]
  tmp = hdma->Instance->CCR;
 80073cc:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073ce:	4322      	orrs	r2, r4
 80073d0:	691c      	ldr	r4, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80073d2:	f421 517f 	bic.w	r1, r1, #16320	@ 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073d6:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073d8:	695c      	ldr	r4, [r3, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80073da:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073de:	4322      	orrs	r2, r4
 80073e0:	699c      	ldr	r4, [r3, #24]
 80073e2:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80073e4:	69dc      	ldr	r4, [r3, #28]
 80073e6:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 80073e8:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80073ea:	6002      	str	r2, [r0, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073ec:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80073ee:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073f0:	6398      	str	r0, [r3, #56]	@ 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80073f2:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 80073f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
}
 80073fa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80073fc:	2001      	movs	r0, #1
 80073fe:	e7fc      	b.n	80073fa <HAL_DMA_Init+0x56>
 8007400:	bffdfff8 	.word	0xbffdfff8
 8007404:	40020000 	.word	0x40020000

08007408 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007408:	b510      	push	{r4, lr}
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800740a:	b308      	cbz	r0, 8007450 <HAL_DMA_DeInit+0x48>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800740c:	6801      	ldr	r1, [r0, #0]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800740e:	4a11      	ldr	r2, [pc, #68]	@ (8007454 <HAL_DMA_DeInit+0x4c>)
  __HAL_DMA_DISABLE(hdma);
 8007410:	680b      	ldr	r3, [r1, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007412:	440a      	add	r2, r1
  __HAL_DMA_DISABLE(hdma);
 8007414:	f023 0301 	bic.w	r3, r3, #1
 8007418:	600b      	str	r3, [r1, #0]
  hdma->Instance->CCR  = 0U;
 800741a:	2300      	movs	r3, #0
 800741c:	600b      	str	r3, [r1, #0]
  hdma->Instance->CNDTR = 0U;
 800741e:	604b      	str	r3, [r1, #4]
  hdma->Instance->CPAR  = 0U;
 8007420:	608b      	str	r3, [r1, #8]
  hdma->Instance->CMAR = 0U;
 8007422:	60cb      	str	r3, [r1, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007424:	2114      	movs	r1, #20
 8007426:	fbb2 f2f1 	udiv	r2, r2, r1
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 800742a:	2101      	movs	r1, #1
  hdma->DmaBaseAddress = DMA1;
 800742c:	4c0a      	ldr	r4, [pc, #40]	@ (8007458 <HAL_DMA_DeInit+0x50>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800742e:	0092      	lsls	r2, r2, #2
 8007430:	6402      	str	r2, [r0, #64]	@ 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8007432:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 8007436:	63c4      	str	r4, [r0, #60]	@ 0x3c
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8007438:	6062      	str	r2, [r4, #4]
  hdma->XferHalfCpltCallback = NULL;
  hdma->XferErrorCallback = NULL;
  hdma->XferAbortCallback = NULL;

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800743a:	6383      	str	r3, [r0, #56]	@ 0x38
  hdma->XferHalfCpltCallback = NULL;
 800743c:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
  hdma->XferAbortCallback = NULL;
 8007440:	e9c0 330c 	strd	r3, r3, [r0, #48]	@ 0x30

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007444:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007448:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 800744c:	4618      	mov	r0, r3
}
 800744e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007450:	2001      	movs	r0, #1
 8007452:	e7fc      	b.n	800744e <HAL_DMA_DeInit+0x46>
 8007454:	bffdfff8 	.word	0xbffdfff8
 8007458:	40020000 	.word	0x40020000

0800745c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800745c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800745e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8007462:	2c01      	cmp	r4, #1
 8007464:	d034      	beq.n	80074d0 <HAL_DMA_Start_IT+0x74>
 8007466:	2401      	movs	r4, #1
 8007468:	f880 4020 	strb.w	r4, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800746c:	f890 4021 	ldrb.w	r4, [r0, #33]	@ 0x21
 8007470:	2c01      	cmp	r4, #1
 8007472:	b2e5      	uxtb	r5, r4
 8007474:	f04f 0400 	mov.w	r4, #0
 8007478:	d128      	bne.n	80074cc <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800747a:	2602      	movs	r6, #2
 800747c:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007480:	6384      	str	r4, [r0, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007482:	6804      	ldr	r4, [r0, #0]
 8007484:	6826      	ldr	r6, [r4, #0]
 8007486:	f026 0601 	bic.w	r6, r6, #1
 800748a:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800748c:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 8007490:	40bd      	lsls	r5, r7
 8007492:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007494:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007496:	6843      	ldr	r3, [r0, #4]
 8007498:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 800749a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800749c:	bf0b      	itete	eq
 800749e:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80074a0:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80074a2:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80074a4:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80074a6:	b14b      	cbz	r3, 80074bc <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074a8:	6823      	ldr	r3, [r4, #0]
 80074aa:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 80074ae:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80074b0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80074b2:	6823      	ldr	r3, [r4, #0]
 80074b4:	f043 0301 	orr.w	r3, r3, #1
 80074b8:	6023      	str	r3, [r4, #0]
}
 80074ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80074bc:	6823      	ldr	r3, [r4, #0]
 80074be:	f023 0304 	bic.w	r3, r3, #4
 80074c2:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80074c4:	6823      	ldr	r3, [r4, #0]
 80074c6:	f043 030a 	orr.w	r3, r3, #10
 80074ca:	e7f0      	b.n	80074ae <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 80074cc:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 80074d0:	2002      	movs	r0, #2
 80074d2:	e7f2      	b.n	80074ba <HAL_DMA_Start_IT+0x5e>

080074d4 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80074d4:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
{
 80074d8:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80074da:	2a02      	cmp	r2, #2
 80074dc:	d006      	beq.n	80074ec <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80074de:	2204      	movs	r2, #4
 80074e0:	6382      	str	r2, [r0, #56]	@ 0x38
    return HAL_ERROR;
 80074e2:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 2020 	strb.w	r2, [r3, #32]
}
 80074ea:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074ec:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80074ee:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074f0:	6811      	ldr	r1, [r2, #0]
 80074f2:	f021 010e 	bic.w	r1, r1, #14
 80074f6:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80074f8:	6811      	ldr	r1, [r2, #0]
 80074fa:	f021 0101 	bic.w	r1, r1, #1
 80074fe:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007500:	2101      	movs	r1, #1
 8007502:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007504:	fa01 f202 	lsl.w	r2, r1, r2
 8007508:	6042      	str	r2, [r0, #4]
  return status; 
 800750a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800750c:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  return status; 
 8007510:	e7e8      	b.n	80074e4 <HAL_DMA_Abort+0x10>
	...

08007514 <HAL_DMA_Abort_IT>:
{  
 8007514:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007516:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800751a:	2b02      	cmp	r3, #2
 800751c:	d003      	beq.n	8007526 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800751e:	2304      	movs	r3, #4
 8007520:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 8007522:	2001      	movs	r0, #1
}
 8007524:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007526:	6803      	ldr	r3, [r0, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	f022 020e 	bic.w	r2, r2, #14
 800752e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	f022 0201 	bic.w	r2, r2, #1
 8007536:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007538:	4a17      	ldr	r2, [pc, #92]	@ (8007598 <HAL_DMA_Abort_IT+0x84>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d01f      	beq.n	800757e <HAL_DMA_Abort_IT+0x6a>
 800753e:	3214      	adds	r2, #20
 8007540:	4293      	cmp	r3, r2
 8007542:	d01e      	beq.n	8007582 <HAL_DMA_Abort_IT+0x6e>
 8007544:	3214      	adds	r2, #20
 8007546:	4293      	cmp	r3, r2
 8007548:	d01d      	beq.n	8007586 <HAL_DMA_Abort_IT+0x72>
 800754a:	3214      	adds	r2, #20
 800754c:	4293      	cmp	r3, r2
 800754e:	d01d      	beq.n	800758c <HAL_DMA_Abort_IT+0x78>
 8007550:	3214      	adds	r2, #20
 8007552:	4293      	cmp	r3, r2
 8007554:	d01d      	beq.n	8007592 <HAL_DMA_Abort_IT+0x7e>
 8007556:	3214      	adds	r2, #20
 8007558:	4293      	cmp	r3, r2
 800755a:	bf14      	ite	ne
 800755c:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8007560:	f44f 1380 	moveq.w	r3, #1048576	@ 0x100000
 8007564:	4a0d      	ldr	r2, [pc, #52]	@ (800759c <HAL_DMA_Abort_IT+0x88>)
 8007566:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8007568:	2301      	movs	r3, #1
 800756a:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 800756e:	2300      	movs	r3, #0
 8007570:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8007574:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007576:	b103      	cbz	r3, 800757a <HAL_DMA_Abort_IT+0x66>
      hdma->XferAbortCallback(hdma);
 8007578:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800757a:	2000      	movs	r0, #0
 800757c:	e7d2      	b.n	8007524 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800757e:	2301      	movs	r3, #1
 8007580:	e7f0      	b.n	8007564 <HAL_DMA_Abort_IT+0x50>
 8007582:	2310      	movs	r3, #16
 8007584:	e7ee      	b.n	8007564 <HAL_DMA_Abort_IT+0x50>
 8007586:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800758a:	e7eb      	b.n	8007564 <HAL_DMA_Abort_IT+0x50>
 800758c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007590:	e7e8      	b.n	8007564 <HAL_DMA_Abort_IT+0x50>
 8007592:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007596:	e7e5      	b.n	8007564 <HAL_DMA_Abort_IT+0x50>
 8007598:	40020008 	.word	0x40020008
 800759c:	40020000 	.word	0x40020000

080075a0 <HAL_DMA_IRQHandler>:
{
 80075a0:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80075a2:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80075a4:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80075a6:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80075a8:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80075aa:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80075ac:	4095      	lsls	r5, r2
 80075ae:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80075b0:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80075b2:	d032      	beq.n	800761a <HAL_DMA_IRQHandler+0x7a>
 80075b4:	074d      	lsls	r5, r1, #29
 80075b6:	d530      	bpl.n	800761a <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80075bc:	bf5e      	ittt	pl
 80075be:	681a      	ldrpl	r2, [r3, #0]
 80075c0:	f022 0204 	bicpl.w	r2, r2, #4
 80075c4:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80075c6:	4a3e      	ldr	r2, [pc, #248]	@ (80076c0 <HAL_DMA_IRQHandler+0x120>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d019      	beq.n	8007600 <HAL_DMA_IRQHandler+0x60>
 80075cc:	3214      	adds	r2, #20
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d018      	beq.n	8007604 <HAL_DMA_IRQHandler+0x64>
 80075d2:	3214      	adds	r2, #20
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d017      	beq.n	8007608 <HAL_DMA_IRQHandler+0x68>
 80075d8:	3214      	adds	r2, #20
 80075da:	4293      	cmp	r3, r2
 80075dc:	d017      	beq.n	800760e <HAL_DMA_IRQHandler+0x6e>
 80075de:	3214      	adds	r2, #20
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d017      	beq.n	8007614 <HAL_DMA_IRQHandler+0x74>
 80075e4:	3214      	adds	r2, #20
 80075e6:	4293      	cmp	r3, r2
 80075e8:	bf14      	ite	ne
 80075ea:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 80075ee:	f44f 0380 	moveq.w	r3, #4194304	@ 0x400000
 80075f2:	4a34      	ldr	r2, [pc, #208]	@ (80076c4 <HAL_DMA_IRQHandler+0x124>)
 80075f4:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80075f6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d05e      	beq.n	80076ba <HAL_DMA_IRQHandler+0x11a>
}
 80075fc:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80075fe:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007600:	2304      	movs	r3, #4
 8007602:	e7f6      	b.n	80075f2 <HAL_DMA_IRQHandler+0x52>
 8007604:	2340      	movs	r3, #64	@ 0x40
 8007606:	e7f4      	b.n	80075f2 <HAL_DMA_IRQHandler+0x52>
 8007608:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800760c:	e7f1      	b.n	80075f2 <HAL_DMA_IRQHandler+0x52>
 800760e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007612:	e7ee      	b.n	80075f2 <HAL_DMA_IRQHandler+0x52>
 8007614:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007618:	e7eb      	b.n	80075f2 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800761a:	2502      	movs	r5, #2
 800761c:	4095      	lsls	r5, r2
 800761e:	4225      	tst	r5, r4
 8007620:	d035      	beq.n	800768e <HAL_DMA_IRQHandler+0xee>
 8007622:	078d      	lsls	r5, r1, #30
 8007624:	d533      	bpl.n	800768e <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	0694      	lsls	r4, r2, #26
 800762a:	d406      	bmi.n	800763a <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	f022 020a 	bic.w	r2, r2, #10
 8007632:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8007634:	2201      	movs	r2, #1
 8007636:	f880 2021 	strb.w	r2, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800763a:	4a21      	ldr	r2, [pc, #132]	@ (80076c0 <HAL_DMA_IRQHandler+0x120>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d019      	beq.n	8007674 <HAL_DMA_IRQHandler+0xd4>
 8007640:	3214      	adds	r2, #20
 8007642:	4293      	cmp	r3, r2
 8007644:	d018      	beq.n	8007678 <HAL_DMA_IRQHandler+0xd8>
 8007646:	3214      	adds	r2, #20
 8007648:	4293      	cmp	r3, r2
 800764a:	d017      	beq.n	800767c <HAL_DMA_IRQHandler+0xdc>
 800764c:	3214      	adds	r2, #20
 800764e:	4293      	cmp	r3, r2
 8007650:	d017      	beq.n	8007682 <HAL_DMA_IRQHandler+0xe2>
 8007652:	3214      	adds	r2, #20
 8007654:	4293      	cmp	r3, r2
 8007656:	d017      	beq.n	8007688 <HAL_DMA_IRQHandler+0xe8>
 8007658:	3214      	adds	r2, #20
 800765a:	4293      	cmp	r3, r2
 800765c:	bf14      	ite	ne
 800765e:	f04f 7300 	movne.w	r3, #33554432	@ 0x2000000
 8007662:	f44f 1300 	moveq.w	r3, #2097152	@ 0x200000
 8007666:	4a17      	ldr	r2, [pc, #92]	@ (80076c4 <HAL_DMA_IRQHandler+0x124>)
 8007668:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800766a:	2300      	movs	r3, #0
 800766c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8007670:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007672:	e7c1      	b.n	80075f8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007674:	2302      	movs	r3, #2
 8007676:	e7f6      	b.n	8007666 <HAL_DMA_IRQHandler+0xc6>
 8007678:	2320      	movs	r3, #32
 800767a:	e7f4      	b.n	8007666 <HAL_DMA_IRQHandler+0xc6>
 800767c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007680:	e7f1      	b.n	8007666 <HAL_DMA_IRQHandler+0xc6>
 8007682:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007686:	e7ee      	b.n	8007666 <HAL_DMA_IRQHandler+0xc6>
 8007688:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800768c:	e7eb      	b.n	8007666 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800768e:	2508      	movs	r5, #8
 8007690:	4095      	lsls	r5, r2
 8007692:	4225      	tst	r5, r4
 8007694:	d011      	beq.n	80076ba <HAL_DMA_IRQHandler+0x11a>
 8007696:	0709      	lsls	r1, r1, #28
 8007698:	d50f      	bpl.n	80076ba <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800769a:	6819      	ldr	r1, [r3, #0]
 800769c:	f021 010e 	bic.w	r1, r1, #14
 80076a0:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80076a2:	2301      	movs	r3, #1
 80076a4:	fa03 f202 	lsl.w	r2, r3, r2
 80076a8:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80076aa:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80076ac:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 80076b0:	2300      	movs	r3, #0
 80076b2:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80076b6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80076b8:	e79e      	b.n	80075f8 <HAL_DMA_IRQHandler+0x58>
}
 80076ba:	bc70      	pop	{r4, r5, r6}
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	40020008 	.word	0x40020008
 80076c4:	40020000 	.word	0x40020000

080076c8 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80076c8:	4a11      	ldr	r2, [pc, #68]	@ (8007710 <FLASH_SetErrorCode+0x48>)
 80076ca:	68d3      	ldr	r3, [r2, #12]
 80076cc:	f013 0310 	ands.w	r3, r3, #16
 80076d0:	d005      	beq.n	80076de <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80076d2:	4910      	ldr	r1, [pc, #64]	@ (8007714 <FLASH_SetErrorCode+0x4c>)
 80076d4:	69cb      	ldr	r3, [r1, #28]
 80076d6:	f043 0302 	orr.w	r3, r3, #2
 80076da:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80076dc:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80076de:	68d2      	ldr	r2, [r2, #12]
 80076e0:	0750      	lsls	r0, r2, #29
 80076e2:	d506      	bpl.n	80076f2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80076e4:	490b      	ldr	r1, [pc, #44]	@ (8007714 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80076e6:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80076ea:	69ca      	ldr	r2, [r1, #28]
 80076ec:	f042 0201 	orr.w	r2, r2, #1
 80076f0:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80076f2:	4a07      	ldr	r2, [pc, #28]	@ (8007710 <FLASH_SetErrorCode+0x48>)
 80076f4:	69d1      	ldr	r1, [r2, #28]
 80076f6:	07c9      	lsls	r1, r1, #31
 80076f8:	d508      	bpl.n	800770c <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80076fa:	4806      	ldr	r0, [pc, #24]	@ (8007714 <FLASH_SetErrorCode+0x4c>)
 80076fc:	69c1      	ldr	r1, [r0, #28]
 80076fe:	f041 0104 	orr.w	r1, r1, #4
 8007702:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8007704:	69d1      	ldr	r1, [r2, #28]
 8007706:	f021 0101 	bic.w	r1, r1, #1
 800770a:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800770c:	60d3      	str	r3, [r2, #12]
}  
 800770e:	4770      	bx	lr
 8007710:	40022000 	.word	0x40022000
 8007714:	20000ae8 	.word	0x20000ae8

08007718 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007718:	4b06      	ldr	r3, [pc, #24]	@ (8007734 <HAL_FLASH_Unlock+0x1c>)
 800771a:	6918      	ldr	r0, [r3, #16]
 800771c:	f010 0080 	ands.w	r0, r0, #128	@ 0x80
 8007720:	d007      	beq.n	8007732 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007722:	4a05      	ldr	r2, [pc, #20]	@ (8007738 <HAL_FLASH_Unlock+0x20>)
 8007724:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007726:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 800772a:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800772c:	6918      	ldr	r0, [r3, #16]
 800772e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8007732:	4770      	bx	lr
 8007734:	40022000 	.word	0x40022000
 8007738:	45670123 	.word	0x45670123

0800773c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800773c:	4a03      	ldr	r2, [pc, #12]	@ (800774c <HAL_FLASH_Lock+0x10>)
}
 800773e:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007740:	6913      	ldr	r3, [r2, #16]
 8007742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007746:	6113      	str	r3, [r2, #16]
}
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	40022000 	.word	0x40022000

08007750 <FLASH_WaitForLastOperation>:
{
 8007750:	b570      	push	{r4, r5, r6, lr}
 8007752:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8007754:	f7ff fd98 	bl	8007288 <HAL_GetTick>
 8007758:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800775a:	4c11      	ldr	r4, [pc, #68]	@ (80077a0 <FLASH_WaitForLastOperation+0x50>)
 800775c:	68e3      	ldr	r3, [r4, #12]
 800775e:	07d8      	lsls	r0, r3, #31
 8007760:	d412      	bmi.n	8007788 <FLASH_WaitForLastOperation+0x38>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007762:	68e3      	ldr	r3, [r4, #12]
 8007764:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007766:	bf44      	itt	mi
 8007768:	2320      	movmi	r3, #32
 800776a:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800776c:	68e3      	ldr	r3, [r4, #12]
 800776e:	06da      	lsls	r2, r3, #27
 8007770:	d406      	bmi.n	8007780 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8007772:	69e3      	ldr	r3, [r4, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007774:	07db      	lsls	r3, r3, #31
 8007776:	d403      	bmi.n	8007780 <FLASH_WaitForLastOperation+0x30>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007778:	68e0      	ldr	r0, [r4, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800777a:	f010 0004 	ands.w	r0, r0, #4
 800777e:	d007      	beq.n	8007790 <FLASH_WaitForLastOperation+0x40>
    FLASH_SetErrorCode();
 8007780:	f7ff ffa2 	bl	80076c8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007784:	2001      	movs	r0, #1
 8007786:	e003      	b.n	8007790 <FLASH_WaitForLastOperation+0x40>
    if (Timeout != HAL_MAX_DELAY)
 8007788:	1c6b      	adds	r3, r5, #1
 800778a:	d0e7      	beq.n	800775c <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800778c:	b90d      	cbnz	r5, 8007792 <FLASH_WaitForLastOperation+0x42>
        return HAL_TIMEOUT;
 800778e:	2003      	movs	r0, #3
}
 8007790:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8007792:	f7ff fd79 	bl	8007288 <HAL_GetTick>
 8007796:	1b80      	subs	r0, r0, r6
 8007798:	42a8      	cmp	r0, r5
 800779a:	d9df      	bls.n	800775c <FLASH_WaitForLastOperation+0xc>
 800779c:	e7f7      	b.n	800778e <FLASH_WaitForLastOperation+0x3e>
 800779e:	bf00      	nop
 80077a0:	40022000 	.word	0x40022000

080077a4 <HAL_FLASH_Program>:
{
 80077a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 80077a8:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8007840 <HAL_FLASH_Program+0x9c>
{
 80077ac:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 80077ae:	f89a 3018 	ldrb.w	r3, [sl, #24]
{
 80077b2:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 80077b4:	2b01      	cmp	r3, #1
{
 80077b6:	4688      	mov	r8, r1
 80077b8:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 80077ba:	d03f      	beq.n	800783c <HAL_FLASH_Program+0x98>
 80077bc:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80077be:	f24c 3050 	movw	r0, #50000	@ 0xc350
  __HAL_LOCK(&pFlash);
 80077c2:	f88a 3018 	strb.w	r3, [sl, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80077c6:	f7ff ffc3 	bl	8007750 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80077ca:	bb90      	cbnz	r0, 8007832 <HAL_FLASH_Program+0x8e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80077cc:	2d01      	cmp	r5, #1
 80077ce:	d003      	beq.n	80077d8 <HAL_FLASH_Program+0x34>
      nbiterations = 2U;
 80077d0:	2d02      	cmp	r5, #2
 80077d2:	bf14      	ite	ne
 80077d4:	2504      	movne	r5, #4
 80077d6:	2502      	moveq	r5, #2
      nbiterations = 4U;
 80077d8:	2600      	movs	r6, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80077da:	4633      	mov	r3, r6
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80077dc:	f8df b064 	ldr.w	fp, [pc, #100]	@ 8007844 <HAL_FLASH_Program+0xa0>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80077e0:	0134      	lsls	r4, r6, #4
 80077e2:	f1c4 0120 	rsb	r1, r4, #32
 80077e6:	f1a4 0220 	sub.w	r2, r4, #32
 80077ea:	fa07 f101 	lsl.w	r1, r7, r1
 80077ee:	fa29 f404 	lsr.w	r4, r9, r4
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80077f2:	f8ca 301c 	str.w	r3, [sl, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80077f6:	430c      	orrs	r4, r1
 80077f8:	fa27 f202 	lsr.w	r2, r7, r2
 80077fc:	4314      	orrs	r4, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80077fe:	f8db 2010 	ldr.w	r2, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8007802:	b2a4      	uxth	r4, r4
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007804:	f042 0201 	orr.w	r2, r2, #1
 8007808:	f8cb 2010 	str.w	r2, [fp, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800780c:	f24c 3050 	movw	r0, #50000	@ 0xc350
  *(__IO uint16_t*)Address = Data;
 8007810:	f828 4016 	strh.w	r4, [r8, r6, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007814:	f7ff ff9c 	bl	8007750 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007818:	f8db 2010 	ldr.w	r2, [fp, #16]
 800781c:	f022 0201 	bic.w	r2, r2, #1
 8007820:	f8cb 2010 	str.w	r2, [fp, #16]
      if (status != HAL_OK)
 8007824:	b928      	cbnz	r0, 8007832 <HAL_FLASH_Program+0x8e>
    for (index = 0U; index < nbiterations; index++)
 8007826:	3601      	adds	r6, #1
 8007828:	b2f2      	uxtb	r2, r6
 800782a:	4295      	cmp	r5, r2
 800782c:	f04f 0300 	mov.w	r3, #0
 8007830:	d8d6      	bhi.n	80077e0 <HAL_FLASH_Program+0x3c>
  __HAL_UNLOCK(&pFlash);
 8007832:	2300      	movs	r3, #0
 8007834:	f88a 3018 	strb.w	r3, [sl, #24]
}
 8007838:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 800783c:	2002      	movs	r0, #2
 800783e:	e7fb      	b.n	8007838 <HAL_FLASH_Program+0x94>
 8007840:	20000ae8 	.word	0x20000ae8
 8007844:	40022000 	.word	0x40022000

08007848 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007848:	2200      	movs	r2, #0
 800784a:	4b06      	ldr	r3, [pc, #24]	@ (8007864 <FLASH_PageErase+0x1c>)
 800784c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800784e:	4b06      	ldr	r3, [pc, #24]	@ (8007868 <FLASH_PageErase+0x20>)
 8007850:	691a      	ldr	r2, [r3, #16]
 8007852:	f042 0202 	orr.w	r2, r2, #2
 8007856:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8007858:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800785a:	691a      	ldr	r2, [r3, #16]
 800785c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007860:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8007862:	4770      	bx	lr
 8007864:	20000ae8 	.word	0x20000ae8
 8007868:	40022000 	.word	0x40022000

0800786c <HAL_FLASHEx_Erase>:
{
 800786c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8007870:	4f26      	ldr	r7, [pc, #152]	@ (800790c <HAL_FLASHEx_Erase+0xa0>)
{
 8007872:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8007874:	7e3b      	ldrb	r3, [r7, #24]
{
 8007876:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8007878:	2b01      	cmp	r3, #1
 800787a:	d044      	beq.n	8007906 <HAL_FLASHEx_Erase+0x9a>
 800787c:	2401      	movs	r4, #1
 800787e:	763c      	strb	r4, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007880:	6803      	ldr	r3, [r0, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8007882:	f24c 3050 	movw	r0, #50000	@ 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007886:	2b02      	cmp	r3, #2
 8007888:	d11a      	bne.n	80078c0 <HAL_FLASHEx_Erase+0x54>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800788a:	f7ff ff61 	bl	8007750 <FLASH_WaitForLastOperation>
 800788e:	b120      	cbz	r0, 800789a <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8007890:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8007892:	2300      	movs	r3, #0
 8007894:	763b      	strb	r3, [r7, #24]
}
 8007896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800789a:	4c1d      	ldr	r4, [pc, #116]	@ (8007910 <HAL_FLASHEx_Erase+0xa4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800789c:	61f8      	str	r0, [r7, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800789e:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80078a0:	f24c 3050 	movw	r0, #50000	@ 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80078a4:	f043 0304 	orr.w	r3, r3, #4
 80078a8:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80078aa:	6923      	ldr	r3, [r4, #16]
 80078ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078b0:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80078b2:	f7ff ff4d 	bl	8007750 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80078b6:	6923      	ldr	r3, [r4, #16]
 80078b8:	f023 0304 	bic.w	r3, r3, #4
 80078bc:	6123      	str	r3, [r4, #16]
 80078be:	e7e8      	b.n	8007892 <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80078c0:	f7ff ff46 	bl	8007750 <FLASH_WaitForLastOperation>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	d1e3      	bne.n	8007890 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 80078c8:	f04f 33ff 	mov.w	r3, #4294967295
 80078cc:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 80078d0:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 80078d2:	68ae      	ldr	r6, [r5, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80078d4:	4c0e      	ldr	r4, [pc, #56]	@ (8007910 <HAL_FLASHEx_Erase+0xa4>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80078d6:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80078da:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 80078de:	42b3      	cmp	r3, r6
 80078e0:	d9d7      	bls.n	8007892 <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 80078e2:	4630      	mov	r0, r6
 80078e4:	f7ff ffb0 	bl	8007848 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80078e8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80078ec:	f7ff ff30 	bl	8007750 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80078f0:	6923      	ldr	r3, [r4, #16]
 80078f2:	f023 0302 	bic.w	r3, r3, #2
 80078f6:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 80078f8:	b110      	cbz	r0, 8007900 <HAL_FLASHEx_Erase+0x94>
            *PageError = address;
 80078fa:	f8c8 6000 	str.w	r6, [r8]
            break;
 80078fe:	e7c8      	b.n	8007892 <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8007900:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8007904:	e7e7      	b.n	80078d6 <HAL_FLASHEx_Erase+0x6a>
  __HAL_LOCK(&pFlash);
 8007906:	2002      	movs	r0, #2
 8007908:	e7c5      	b.n	8007896 <HAL_FLASHEx_Erase+0x2a>
 800790a:	bf00      	nop
 800790c:	20000ae8 	.word	0x20000ae8
 8007910:	40022000 	.word	0x40022000

08007914 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007914:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007918:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800791a:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800791c:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8007aa8 <HAL_GPIO_Init+0x194>
 8007920:	4b62      	ldr	r3, [pc, #392]	@ (8007aac <HAL_GPIO_Init+0x198>)
      switch (GPIO_Init->Mode)
 8007922:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 8007ab0 <HAL_GPIO_Init+0x19c>
 8007926:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8007ab4 <HAL_GPIO_Init+0x1a0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800792a:	680a      	ldr	r2, [r1, #0]
 800792c:	fa32 f506 	lsrs.w	r5, r2, r6
 8007930:	d102      	bne.n	8007938 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8007932:	b003      	add	sp, #12
 8007934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8007938:	2701      	movs	r7, #1
 800793a:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800793c:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 8007940:	ea37 0202 	bics.w	r2, r7, r2
 8007944:	d17a      	bne.n	8007a3c <HAL_GPIO_Init+0x128>
      switch (GPIO_Init->Mode)
 8007946:	684a      	ldr	r2, [r1, #4]
 8007948:	2a03      	cmp	r2, #3
 800794a:	d807      	bhi.n	800795c <HAL_GPIO_Init+0x48>
 800794c:	3a01      	subs	r2, #1
 800794e:	2a02      	cmp	r2, #2
 8007950:	f200 8083 	bhi.w	8007a5a <HAL_GPIO_Init+0x146>
 8007954:	e8df f002 	tbb	[pc, r2]
 8007958:	9792      	.short	0x9792
 800795a:	9d          	.byte	0x9d
 800795b:	00          	.byte	0x00
 800795c:	2a12      	cmp	r2, #18
 800795e:	f000 8095 	beq.w	8007a8c <HAL_GPIO_Init+0x178>
 8007962:	d86d      	bhi.n	8007a40 <HAL_GPIO_Init+0x12c>
 8007964:	2a11      	cmp	r2, #17
 8007966:	f000 808b 	beq.w	8007a80 <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800796a:	2dff      	cmp	r5, #255	@ 0xff
 800796c:	bf98      	it	ls
 800796e:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007970:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007974:	bf88      	it	hi
 8007976:	f100 0904 	addhi.w	r9, r0, #4
 800797a:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800797e:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007982:	bf88      	it	hi
 8007984:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007986:	fa0b fa02 	lsl.w	sl, fp, r2
 800798a:	ea27 070a 	bic.w	r7, r7, sl
 800798e:	fa04 f202 	lsl.w	r2, r4, r2
 8007992:	4317      	orrs	r7, r2
 8007994:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007998:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800799c:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 80079a0:	d04c      	beq.n	8007a3c <HAL_GPIO_Init+0x128>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80079a2:	f8dc 2018 	ldr.w	r2, [ip, #24]
 80079a6:	f026 0703 	bic.w	r7, r6, #3
 80079aa:	f042 0201 	orr.w	r2, r2, #1
 80079ae:	f8cc 2018 	str.w	r2, [ip, #24]
 80079b2:	f8dc 2018 	ldr.w	r2, [ip, #24]
 80079b6:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80079ba:	f002 0201 	and.w	r2, r2, #1
 80079be:	9201      	str	r2, [sp, #4]
 80079c0:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80079c4:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80079c8:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80079ca:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80079ce:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80079d0:	fa0b fb0a 	lsl.w	fp, fp, sl
 80079d4:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80079d8:	4a37      	ldr	r2, [pc, #220]	@ (8007ab8 <HAL_GPIO_Init+0x1a4>)
 80079da:	4290      	cmp	r0, r2
 80079dc:	d05d      	beq.n	8007a9a <HAL_GPIO_Init+0x186>
 80079de:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80079e2:	4290      	cmp	r0, r2
 80079e4:	d05b      	beq.n	8007a9e <HAL_GPIO_Init+0x18a>
 80079e6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80079ea:	4290      	cmp	r0, r2
 80079ec:	d059      	beq.n	8007aa2 <HAL_GPIO_Init+0x18e>
 80079ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80079f2:	4290      	cmp	r0, r2
 80079f4:	bf14      	ite	ne
 80079f6:	2204      	movne	r2, #4
 80079f8:	2203      	moveq	r2, #3
 80079fa:	fa02 f20a 	lsl.w	r2, r2, sl
 80079fe:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8007a02:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8007a04:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007a06:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8007a0a:	bf14      	ite	ne
 8007a0c:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007a0e:	43aa      	biceq	r2, r5
 8007a10:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8007a12:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007a14:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8007a18:	bf14      	ite	ne
 8007a1a:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007a1c:	43aa      	biceq	r2, r5
 8007a1e:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8007a20:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007a22:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8007a26:	bf14      	ite	ne
 8007a28:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007a2a:	43aa      	biceq	r2, r5
 8007a2c:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8007a2e:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007a30:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8007a34:	bf14      	ite	ne
 8007a36:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007a38:	43aa      	biceq	r2, r5
 8007a3a:	601a      	str	r2, [r3, #0]
	position++;
 8007a3c:	3601      	adds	r6, #1
 8007a3e:	e774      	b.n	800792a <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8007a40:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8007abc <HAL_GPIO_Init+0x1a8>
 8007a44:	454a      	cmp	r2, r9
 8007a46:	d008      	beq.n	8007a5a <HAL_GPIO_Init+0x146>
 8007a48:	d810      	bhi.n	8007a6c <HAL_GPIO_Init+0x158>
 8007a4a:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8007a4e:	454a      	cmp	r2, r9
 8007a50:	d003      	beq.n	8007a5a <HAL_GPIO_Init+0x146>
 8007a52:	4572      	cmp	r2, lr
 8007a54:	d001      	beq.n	8007a5a <HAL_GPIO_Init+0x146>
 8007a56:	4542      	cmp	r2, r8
 8007a58:	d187      	bne.n	800796a <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007a5a:	688a      	ldr	r2, [r1, #8]
 8007a5c:	b1da      	cbz	r2, 8007a96 <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007a5e:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007a60:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 8007a64:	bf0c      	ite	eq
 8007a66:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 8007a68:	6147      	strne	r7, [r0, #20]
 8007a6a:	e77e      	b.n	800796a <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8007a6c:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 8007ac0 <HAL_GPIO_Init+0x1ac>
 8007a70:	454a      	cmp	r2, r9
 8007a72:	d0f2      	beq.n	8007a5a <HAL_GPIO_Init+0x146>
 8007a74:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8007a78:	454a      	cmp	r2, r9
 8007a7a:	e7ed      	b.n	8007a58 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007a7c:	68cc      	ldr	r4, [r1, #12]
          break;
 8007a7e:	e774      	b.n	800796a <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007a80:	68cc      	ldr	r4, [r1, #12]
 8007a82:	3404      	adds	r4, #4
          break;
 8007a84:	e771      	b.n	800796a <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007a86:	68cc      	ldr	r4, [r1, #12]
 8007a88:	3408      	adds	r4, #8
          break;
 8007a8a:	e76e      	b.n	800796a <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007a8c:	68cc      	ldr	r4, [r1, #12]
 8007a8e:	340c      	adds	r4, #12
          break;
 8007a90:	e76b      	b.n	800796a <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8007a92:	2400      	movs	r4, #0
 8007a94:	e769      	b.n	800796a <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007a96:	2404      	movs	r4, #4
 8007a98:	e767      	b.n	800796a <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	e7ad      	b.n	80079fa <HAL_GPIO_Init+0xe6>
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	e7ab      	b.n	80079fa <HAL_GPIO_Init+0xe6>
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	e7a9      	b.n	80079fa <HAL_GPIO_Init+0xe6>
 8007aa6:	bf00      	nop
 8007aa8:	40021000 	.word	0x40021000
 8007aac:	40010400 	.word	0x40010400
 8007ab0:	10210000 	.word	0x10210000
 8007ab4:	10110000 	.word	0x10110000
 8007ab8:	40010800 	.word	0x40010800
 8007abc:	10220000 	.word	0x10220000
 8007ac0:	10310000 	.word	0x10310000

08007ac4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007ac4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8007ac8:	f04f 0b04 	mov.w	fp, #4
  uint32_t position = 0x00u;
 8007acc:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007ace:	f04f 0a01 	mov.w	sl, #1
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8007ad2:	f04f 080f 	mov.w	r8, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007ad6:	eb00 030b 	add.w	r3, r0, fp
 8007ada:	9301      	str	r3, [sp, #4]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8007adc:	4b2e      	ldr	r3, [pc, #184]	@ (8007b98 <HAL_GPIO_DeInit+0xd4>)
  while ((GPIO_Pin >> position) != 0u)
 8007ade:	fa31 f402 	lsrs.w	r4, r1, r2
 8007ae2:	d102      	bne.n	8007aea <HAL_GPIO_DeInit+0x26>
      CLEAR_BIT(GPIOx->ODR, iocurrent);
    }

    position++;
  }
}
 8007ae4:	b003      	add	sp, #12
 8007ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007aea:	fa0a f702 	lsl.w	r7, sl, r2
    if (iocurrent)
 8007aee:	400f      	ands	r7, r1
 8007af0:	d049      	beq.n	8007b86 <HAL_GPIO_DeInit+0xc2>
      tmp = AFIO->EXTICR[position >> 2u];
 8007af2:	f022 0403 	bic.w	r4, r2, #3
 8007af6:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8007afa:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8007afe:	f002 0c03 	and.w	ip, r2, #3
      tmp = AFIO->EXTICR[position >> 2u];
 8007b02:	68a5      	ldr	r5, [r4, #8]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8007b04:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8007b08:	fa08 f90c 	lsl.w	r9, r8, ip
 8007b0c:	ea09 0e05 	and.w	lr, r9, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007b10:	4d22      	ldr	r5, [pc, #136]	@ (8007b9c <HAL_GPIO_DeInit+0xd8>)
 8007b12:	42a8      	cmp	r0, r5
 8007b14:	d039      	beq.n	8007b8a <HAL_GPIO_DeInit+0xc6>
 8007b16:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007b1a:	42a8      	cmp	r0, r5
 8007b1c:	d037      	beq.n	8007b8e <HAL_GPIO_DeInit+0xca>
 8007b1e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007b22:	42a8      	cmp	r0, r5
 8007b24:	d035      	beq.n	8007b92 <HAL_GPIO_DeInit+0xce>
 8007b26:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007b2a:	42a8      	cmp	r0, r5
 8007b2c:	bf0c      	ite	eq
 8007b2e:	2503      	moveq	r5, #3
 8007b30:	2504      	movne	r5, #4
 8007b32:	fa05 f50c 	lsl.w	r5, r5, ip
 8007b36:	4575      	cmp	r5, lr
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8007b38:	ea6f 0607 	mvn.w	r6, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007b3c:	d10f      	bne.n	8007b5e <HAL_GPIO_DeInit+0x9a>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8007b3e:	681d      	ldr	r5, [r3, #0]
 8007b40:	4035      	ands	r5, r6
 8007b42:	601d      	str	r5, [r3, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8007b44:	685d      	ldr	r5, [r3, #4]
 8007b46:	4035      	ands	r5, r6
 8007b48:	605d      	str	r5, [r3, #4]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8007b4a:	68dd      	ldr	r5, [r3, #12]
 8007b4c:	4035      	ands	r5, r6
 8007b4e:	60dd      	str	r5, [r3, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8007b50:	689d      	ldr	r5, [r3, #8]
 8007b52:	4035      	ands	r5, r6
 8007b54:	609d      	str	r5, [r3, #8]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8007b56:	68a5      	ldr	r5, [r4, #8]
 8007b58:	ea25 0509 	bic.w	r5, r5, r9
 8007b5c:	60a5      	str	r5, [r4, #8]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007b5e:	2fff      	cmp	r7, #255	@ 0xff
 8007b60:	bf94      	ite	ls
 8007b62:	4607      	movls	r7, r0
 8007b64:	9f01      	ldrhi	r7, [sp, #4]
 8007b66:	ea4f 0482 	mov.w	r4, r2, lsl #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8007b6a:	683d      	ldr	r5, [r7, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007b6c:	bf88      	it	hi
 8007b6e:	3c20      	subhi	r4, #32
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8007b70:	fa08 fc04 	lsl.w	ip, r8, r4
 8007b74:	ea25 050c 	bic.w	r5, r5, ip
 8007b78:	fa0b f404 	lsl.w	r4, fp, r4
 8007b7c:	4325      	orrs	r5, r4
 8007b7e:	603d      	str	r5, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8007b80:	68c4      	ldr	r4, [r0, #12]
 8007b82:	4034      	ands	r4, r6
 8007b84:	60c4      	str	r4, [r0, #12]
    position++;
 8007b86:	3201      	adds	r2, #1
 8007b88:	e7a9      	b.n	8007ade <HAL_GPIO_DeInit+0x1a>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007b8a:	2500      	movs	r5, #0
 8007b8c:	e7d1      	b.n	8007b32 <HAL_GPIO_DeInit+0x6e>
 8007b8e:	2501      	movs	r5, #1
 8007b90:	e7cf      	b.n	8007b32 <HAL_GPIO_DeInit+0x6e>
 8007b92:	2502      	movs	r5, #2
 8007b94:	e7cd      	b.n	8007b32 <HAL_GPIO_DeInit+0x6e>
 8007b96:	bf00      	nop
 8007b98:	40010400 	.word	0x40010400
 8007b9c:	40010800 	.word	0x40010800

08007ba0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007ba0:	b10a      	cbz	r2, 8007ba6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007ba2:	6101      	str	r1, [r0, #16]
  }
}
 8007ba4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007ba6:	0409      	lsls	r1, r1, #16
 8007ba8:	e7fb      	b.n	8007ba2 <HAL_GPIO_WritePin+0x2>

08007baa <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007baa:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007bac:	ea01 0203 	and.w	r2, r1, r3
 8007bb0:	ea21 0103 	bic.w	r1, r1, r3
 8007bb4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007bb8:	6101      	str	r1, [r0, #16]
}
 8007bba:	4770      	bx	lr

08007bbc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	b1e0      	cbz	r0, 8007bfc <HAL_PCD_Init+0x40>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007bc2:	f890 3291 	ldrb.w	r3, [r0, #657]	@ 0x291
 8007bc6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007bca:	b91b      	cbnz	r3, 8007bd4 <HAL_PCD_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007bcc:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007bd0:	f003 fa22 	bl	800b018 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8007bda:	2300      	movs	r3, #0

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007bdc:	4625      	mov	r5, r4
  hpcd->Init.dma_enable = 0U;
 8007bde:	7163      	strb	r3, [r4, #5]
  __HAL_PCD_DISABLE(hpcd);
 8007be0:	f855 0b04 	ldr.w	r0, [r5], #4
 8007be4:	f001 fe61 	bl	80098aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007be8:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8007bec:	6820      	ldr	r0, [r4, #0]
 8007bee:	f001 fe4c 	bl	800988a <USB_CoreInit>
 8007bf2:	4601      	mov	r1, r0
 8007bf4:	b128      	cbz	r0, 8007c02 <HAL_PCD_Init+0x46>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 8007bfc:	2501      	movs	r5, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8007bfe:	4628      	mov	r0, r5
 8007c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007c02:	6820      	ldr	r0, [r4, #0]
 8007c04:	f001 fe5b 	bl	80098be <USB_SetCurrentMode>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	d1f4      	bne.n	8007bf6 <HAL_PCD_Init+0x3a>
 8007c0c:	4602      	mov	r2, r0
    hpcd->IN_ep[i].is_in = 1U;
 8007c0e:	2701      	movs	r7, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c10:	7926      	ldrb	r6, [r4, #4]
 8007c12:	f104 0310 	add.w	r3, r4, #16
 8007c16:	b2c1      	uxtb	r1, r0
 8007c18:	428e      	cmp	r6, r1
 8007c1a:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8007c1e:	d818      	bhi.n	8007c52 <HAL_PCD_Init+0x96>
 8007c20:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8007c22:	460a      	mov	r2, r1
 8007c24:	f504 73a8 	add.w	r3, r4, #336	@ 0x150
 8007c28:	b2c8      	uxtb	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c2a:	4286      	cmp	r6, r0
 8007c2c:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8007c30:	d81b      	bhi.n	8007c6a <HAL_PCD_Init+0xae>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007c32:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8007c36:	6820      	ldr	r0, [r4, #0]
 8007c38:	f001 fe43 	bl	80098c2 <USB_DevInit>
 8007c3c:	4605      	mov	r5, r0
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	d1d9      	bne.n	8007bf6 <HAL_PCD_Init+0x3a>
  hpcd->State = HAL_PCD_STATE_READY;
 8007c42:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8007c44:	7360      	strb	r0, [r4, #13]
  (void)USB_DevDisconnect(hpcd->Instance);
 8007c46:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8007c48:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8007c4c:	f002 f8ee 	bl	8009e2c <USB_DevDisconnect>
  return HAL_OK;
 8007c50:	e7d5      	b.n	8007bfe <HAL_PCD_Init+0x42>
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007c52:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->IN_ep[i].is_in = 1U;
 8007c56:	f803 7c27 	strb.w	r7, [r3, #-39]
    hpcd->IN_ep[i].num = i;
 8007c5a:	f803 1c28 	strb.w	r1, [r3, #-40]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007c5e:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007c62:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c66:	3001      	adds	r0, #1
 8007c68:	e7d5      	b.n	8007c16 <HAL_PCD_Init+0x5a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007c6a:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->OUT_ep[i].is_in = 0U;
 8007c6e:	f803 2c27 	strb.w	r2, [r3, #-39]
    hpcd->OUT_ep[i].num = i;
 8007c72:	f803 0c28 	strb.w	r0, [r3, #-40]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007c76:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007c7a:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c7e:	3101      	adds	r1, #1
 8007c80:	e7d2      	b.n	8007c28 <HAL_PCD_Init+0x6c>

08007c82 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007c82:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8007c84:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
{
 8007c88:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d010      	beq.n	8007cb0 <HAL_PCD_Start+0x2e>
 8007c8e:	2501      	movs	r5, #1
 8007c90:	f880 5290 	strb.w	r5, [r0, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8007c94:	6800      	ldr	r0, [r0, #0]
 8007c96:	f001 fdff 	bl	8009898 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8007c9a:	4629      	mov	r1, r5
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	f003 fac2 	bl	800b226 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8007ca2:	6820      	ldr	r0, [r4, #0]
 8007ca4:	f002 f8c0 	bl	8009e28 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007ca8:	2000      	movs	r0, #0
 8007caa:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 8007cae:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8007cb0:	2002      	movs	r0, #2
 8007cb2:	e7fc      	b.n	8007cae <HAL_PCD_Start+0x2c>

08007cb4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007cb4:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8007cb6:	f890 2290 	ldrb.w	r2, [r0, #656]	@ 0x290
{
 8007cba:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8007cbc:	2a01      	cmp	r2, #1
 8007cbe:	d00a      	beq.n	8007cd6 <HAL_PCD_SetAddress+0x22>
 8007cc0:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8007cc2:	7341      	strb	r1, [r0, #13]
  __HAL_LOCK(hpcd);
 8007cc4:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007cc8:	6800      	ldr	r0, [r0, #0]
 8007cca:	f002 f8a7 	bl	8009e1c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007cce:	2000      	movs	r0, #0
 8007cd0:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 8007cd4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8007cd6:	2002      	movs	r0, #2
 8007cd8:	e7fc      	b.n	8007cd4 <HAL_PCD_SetAddress+0x20>
	...

08007cdc <HAL_PCD_IRQHandler>:
{
 8007cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce0:	4604      	mov	r4, r0
 8007ce2:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8007ce4:	6800      	ldr	r0, [r0, #0]
 8007ce6:	f002 f8a3 	bl	8009e30 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8007cea:	f410 4500 	ands.w	r5, r0, #32768	@ 0x8000
 8007cee:	f000 844f 	beq.w	8008590 <HAL_PCD_IRQHandler+0x8b4>
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);

        if (ep->type == EP_TYPE_ISOC)
 8007cf2:	2528      	movs	r5, #40	@ 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007cf4:	4ec6      	ldr	r6, [pc, #792]	@ (8008010 <HAL_PCD_IRQHandler+0x334>)
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007cf6:	6820      	ldr	r0, [r4, #0]
 8007cf8:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8007cfc:	041f      	lsls	r7, r3, #16
 8007cfe:	d402      	bmi.n	8007d06 <HAL_PCD_IRQHandler+0x2a>
}
 8007d00:	b005      	add	sp, #20
 8007d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8007d06:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
    if (epindex == 0U)
 8007d0a:	f013 070f 	ands.w	r7, r3, #15
    wIstr = hpcd->Instance->ISTR;
 8007d0e:	b299      	uxth	r1, r3
    if (epindex == 0U)
 8007d10:	f040 80c0 	bne.w	8007e94 <HAL_PCD_IRQHandler+0x1b8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007d14:	f011 0110 	ands.w	r1, r1, #16
 8007d18:	d126      	bne.n	8007d68 <HAL_PCD_IRQHandler+0x8c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007d1a:	8803      	ldrh	r3, [r0, #0]
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	4033      	ands	r3, r6
 8007d20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d24:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007d26:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8007d2a:	7c22      	ldrb	r2, [r4, #16]
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d32:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8007d36:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
        ep->xfer_buff += ep->xfer_count;
 8007d3a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007d3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8007d40:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007d42:	62e3      	str	r3, [r4, #44]	@ 0x2c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007d44:	4620      	mov	r0, r4
        ep->xfer_buff += ep->xfer_count;
 8007d46:	6262      	str	r2, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007d48:	f003 f995 	bl	800b076 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007d4c:	7b63      	ldrb	r3, [r4, #13]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d0d1      	beq.n	8007cf6 <HAL_PCD_IRQHandler+0x1a>
 8007d52:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007d54:	6821      	ldr	r1, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007d56:	2a00      	cmp	r2, #0
 8007d58:	d1cd      	bne.n	8007cf6 <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007d5a:	7b63      	ldrb	r3, [r4, #13]
 8007d5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d60:	f8a1 304c 	strh.w	r3, [r1, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8007d64:	7362      	strb	r2, [r4, #13]
 8007d66:	e7c6      	b.n	8007cf6 <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007d68:	8807      	ldrh	r7, [r0, #0]
 8007d6a:	b2bb      	uxth	r3, r7
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007d6c:	f417 6700 	ands.w	r7, r7, #2048	@ 0x800
 8007d70:	d021      	beq.n	8007db6 <HAL_PCD_IRQHandler+0xda>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007d72:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8007d76:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d80:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8007d84:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007d88:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8007d8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007d90:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007d94:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 8007d98:	f002 fa95 	bl	800a2c6 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007d9c:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8007d9e:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007da0:	8813      	ldrh	r3, [r2, #0]
 8007da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007da6:	051b      	lsls	r3, r3, #20
 8007da8:	0d1b      	lsrs	r3, r3, #20
 8007daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dae:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8007db0:	f003 f952 	bl	800b058 <HAL_PCD_SetupStageCallback>
 8007db4:	e79f      	b.n	8007cf6 <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007db6:	0419      	lsls	r1, r3, #16
 8007db8:	d59d      	bpl.n	8007cf6 <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007dba:	8803      	ldrh	r3, [r0, #0]
 8007dbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dc0:	051b      	lsls	r3, r3, #20
 8007dc2:	0d1b      	lsrs	r3, r3, #20
 8007dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dc8:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007dca:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8007dce:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dd8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8007ddc:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 8007de0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007de4:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007de8:	b18b      	cbz	r3, 8007e0e <HAL_PCD_IRQHandler+0x132>
 8007dea:	f8d4 1164 	ldr.w	r1, [r4, #356]	@ 0x164
 8007dee:	b171      	cbz	r1, 8007e0e <HAL_PCD_IRQHandler+0x132>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007df0:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8007df4:	f002 fa67 	bl	800a2c6 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8007df8:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 8007dfc:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007e00:	4639      	mov	r1, r7
            ep->xfer_buff += ep->xfer_count;
 8007e02:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007e04:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8007e06:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007e0a:	f003 f92b 	bl	800b064 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007e0e:	6821      	ldr	r1, [r4, #0]
 8007e10:	880a      	ldrh	r2, [r1, #0]
 8007e12:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007e14:	0512      	lsls	r2, r2, #20
 8007e16:	f53f af6e 	bmi.w	8007cf6 <HAL_PCD_IRQHandler+0x1a>
 8007e1a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007e1e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007e22:	f43f af68 	beq.w	8007cf6 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007e26:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 8007e2a:	f201 400c 	addw	r0, r1, #1036	@ 0x40c
 8007e2e:	b292      	uxth	r2, r2
 8007e30:	5a83      	ldrh	r3, [r0, r2]
 8007e32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e36:	5283      	strh	r3, [r0, r2]
 8007e38:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
 8007e3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e3e:	d91d      	bls.n	8007e7c <HAL_PCD_IRQHandler+0x1a0>
 8007e40:	095f      	lsrs	r7, r3, #5
 8007e42:	06db      	lsls	r3, r3, #27
 8007e44:	5a83      	ldrh	r3, [r0, r2]
 8007e46:	bf08      	it	eq
 8007e48:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8007e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	5283      	strh	r3, [r0, r2]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007e5e:	880b      	ldrh	r3, [r1, #0]
 8007e60:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e68:	041b      	lsls	r3, r3, #16
 8007e6a:	0c1b      	lsrs	r3, r3, #16
 8007e6c:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8007e70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e78:	800b      	strh	r3, [r1, #0]
 8007e7a:	e73c      	b.n	8007cf6 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007e7c:	b90b      	cbnz	r3, 8007e82 <HAL_PCD_IRQHandler+0x1a6>
 8007e7e:	5a83      	ldrh	r3, [r0, r2]
 8007e80:	e7e7      	b.n	8007e52 <HAL_PCD_IRQHandler+0x176>
 8007e82:	085f      	lsrs	r7, r3, #1
 8007e84:	07db      	lsls	r3, r3, #31
 8007e86:	5a83      	ldrh	r3, [r0, r2]
 8007e88:	bf48      	it	mi
 8007e8a:	3701      	addmi	r7, #1
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8007e92:	e7e2      	b.n	8007e5a <HAL_PCD_IRQHandler+0x17e>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007e94:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007e98:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007e9a:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007e9e:	f140 80f6 	bpl.w	800808e <HAL_PCD_IRQHandler+0x3b2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007ea2:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 8007ea6:	fb05 4107 	mla	r1, r5, r7, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eae:	051b      	lsls	r3, r3, #20
 8007eb0:	0d1b      	lsrs	r3, r3, #20
 8007eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eb6:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 8007eba:	f891 315c 	ldrb.w	r3, [r1, #348]	@ 0x15c
 8007ebe:	f500 6e80 	add.w	lr, r0, #1024	@ 0x400
 8007ec2:	b9bb      	cbnz	r3, 8007ef4 <HAL_PCD_IRQHandler+0x218>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007ec4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8007ec8:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	3306      	adds	r3, #6
 8007ed0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ed4:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8007ed8:	f3c9 0909 	ubfx	r9, r9, #0, #10
          if (count != 0U)
 8007edc:	f1b9 0f00 	cmp.w	r9, #0
 8007ee0:	f000 80ba 	beq.w	8008058 <HAL_PCD_IRQHandler+0x37c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007ee4:	464b      	mov	r3, r9
 8007ee6:	f8b1 2156 	ldrh.w	r2, [r1, #342]	@ 0x156
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007eea:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8007eee:	f002 f9ea 	bl	800a2c6 <USB_ReadPMA>
 8007ef2:	e0b1      	b.n	8008058 <HAL_PCD_IRQHandler+0x37c>
          if (ep->type == EP_TYPE_BULK)
 8007ef4:	f891 3153 	ldrb.w	r3, [r1, #339]	@ 0x153

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007ef8:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
          if (ep->type == EP_TYPE_BULK)
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	f040 8089 	bne.w	8008014 <HAL_PCD_IRQHandler+0x338>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007f02:	f8b0 9050 	ldrh.w	r9, [r0, #80]	@ 0x50
 8007f06:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
 8007f0a:	fa1f f989 	uxth.w	r9, r9
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007f0e:	f418 4a80 	ands.w	sl, r8, #16384	@ 0x4000

    if (ep->xfer_len >= count)
 8007f12:	f8d1 3168 	ldr.w	r3, [r1, #360]	@ 0x168
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007f16:	44d9      	add	r9, fp
 8007f18:	f008 0c40 	and.w	ip, r8, #64	@ 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007f1c:	d03c      	beq.n	8007f98 <HAL_PCD_IRQHandler+0x2bc>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007f1e:	f109 0902 	add.w	r9, r9, #2
 8007f22:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 8007f26:	f3c9 0909 	ubfx	r9, r9, #0, #10
    if (ep->xfer_len >= count)
 8007f2a:	4599      	cmp	r9, r3
 8007f2c:	d913      	bls.n	8007f56 <HAL_PCD_IRQHandler+0x27a>
 8007f2e:	2300      	movs	r3, #0
 8007f30:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007f34:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007f38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f40:	041b      	lsls	r3, r3, #16
 8007f42:	0c1b      	lsrs	r3, r3, #16
 8007f44:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007f48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f50:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8007f54:	e005      	b.n	8007f62 <HAL_PCD_IRQHandler+0x286>
      ep->xfer_len -= count;
 8007f56:	eba3 0309 	sub.w	r3, r3, r9
 8007f5a:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d0e8      	beq.n	8007f34 <HAL_PCD_IRQHandler+0x258>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007f62:	f1bc 0f00 	cmp.w	ip, #0
 8007f66:	d00d      	beq.n	8007f84 <HAL_PCD_IRQHandler+0x2a8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007f68:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007f6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f74:	041b      	lsls	r3, r3, #16
 8007f76:	0c1b      	lsrs	r3, r3, #16
 8007f78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f7c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007f80:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8007f84:	f1b9 0f00 	cmp.w	r9, #0
 8007f88:	d066      	beq.n	8008058 <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007f8a:	2128      	movs	r1, #40	@ 0x28
 8007f8c:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007f90:	464b      	mov	r3, r9
 8007f92:	f8b1 2158 	ldrh.w	r2, [r1, #344]	@ 0x158
 8007f96:	e7a8      	b.n	8007eea <HAL_PCD_IRQHandler+0x20e>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007f98:	f109 0906 	add.w	r9, r9, #6
 8007f9c:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 8007fa0:	f3c9 0909 	ubfx	r9, r9, #0, #10

    if (ep->xfer_len >= count)
 8007fa4:	4599      	cmp	r9, r3
 8007fa6:	d912      	bls.n	8007fce <HAL_PCD_IRQHandler+0x2f2>
 8007fa8:	f8c1 a168 	str.w	sl, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007fac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007fb0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007fb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fb8:	041b      	lsls	r3, r3, #16
 8007fba:	0c1b      	lsrs	r3, r3, #16
 8007fbc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007fc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fc8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8007fcc:	e005      	b.n	8007fda <HAL_PCD_IRQHandler+0x2fe>
      ep->xfer_len -= count;
 8007fce:	eba3 0309 	sub.w	r3, r3, r9
 8007fd2:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d0e8      	beq.n	8007fac <HAL_PCD_IRQHandler+0x2d0>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007fda:	f1bc 0f00 	cmp.w	ip, #0
 8007fde:	d10d      	bne.n	8007ffc <HAL_PCD_IRQHandler+0x320>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007fe0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007fe4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fe8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fec:	041b      	lsls	r3, r3, #16
 8007fee:	0c1b      	lsrs	r3, r3, #16
 8007ff0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ff4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ff8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8007ffc:	f1b9 0f00 	cmp.w	r9, #0
 8008000:	d02a      	beq.n	8008058 <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008002:	2128      	movs	r1, #40	@ 0x28
 8008004:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008008:	464b      	mov	r3, r9
 800800a:	f8b1 215a 	ldrh.w	r2, [r1, #346]	@ 0x15a
 800800e:	e76c      	b.n	8007eea <HAL_PCD_IRQHandler+0x20e>
 8008010:	ffff8f0f 	.word	0xffff8f0f
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008014:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8008018:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800801c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008020:	041b      	lsls	r3, r3, #16
 8008022:	0c1b      	lsrs	r3, r3, #16
 8008024:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008028:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800802c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8008030:	f891 3150 	ldrb.w	r3, [r1, #336]	@ 0x150
 8008034:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8008038:	00db      	lsls	r3, r3, #3
 800803a:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800803e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8008042:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8008044:	d054      	beq.n	80080f0 <HAL_PCD_IRQHandler+0x414>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008046:	3202      	adds	r2, #2
 8008048:	4413      	add	r3, r2
 800804a:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 800804e:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8008052:	f1b9 0f00 	cmp.w	r9, #0
 8008056:	d19b      	bne.n	8007f90 <HAL_PCD_IRQHandler+0x2b4>
        ep->xfer_count += count;
 8008058:	fb05 f107 	mul.w	r1, r5, r7
 800805c:	1863      	adds	r3, r4, r1
 800805e:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8008062:	444a      	add	r2, r9
 8008064:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        ep->xfer_buff += count;
 8008068:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 800806c:	444a      	add	r2, r9
 800806e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8008072:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 8008076:	b11a      	cbz	r2, 8008080 <HAL_PCD_IRQHandler+0x3a4>
 8008078:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 800807c:	4599      	cmp	r9, r3
 800807e:	d241      	bcs.n	8008104 <HAL_PCD_IRQHandler+0x428>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8008080:	fb05 4307 	mla	r3, r5, r7, r4
 8008084:	4620      	mov	r0, r4
 8008086:	f893 1150 	ldrb.w	r1, [r3, #336]	@ 0x150
 800808a:	f002 ffeb 	bl	800b064 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800808e:	f018 0f80 	tst.w	r8, #128	@ 0x80
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008092:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8008094:	f43f ae2f 	beq.w	8007cf6 <HAL_PCD_IRQHandler+0x1a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008098:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 800809c:	fb05 fc07 	mul.w	ip, r5, r7
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	4033      	ands	r3, r6
 80080a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080a8:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 80080ac:	eb04 030c 	add.w	r3, r4, ip
 80080b0:	7cda      	ldrb	r2, [r3, #19]
 80080b2:	2a01      	cmp	r2, #1
 80080b4:	d156      	bne.n	8008164 <HAL_PCD_IRQHandler+0x488>
          ep->xfer_len = 0U;
 80080b6:	2100      	movs	r1, #0
 80080b8:	fb07 5205 	mla	r2, r7, r5, r5
 80080bc:	50a1      	str	r1, [r4, r2]
          if (ep->doublebuffer != 0U)
 80080be:	7f1a      	ldrb	r2, [r3, #28]
 80080c0:	b392      	cbz	r2, 8008128 <HAL_PCD_IRQHandler+0x44c>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80080c2:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80080c6:	7c5a      	ldrb	r2, [r3, #17]
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80080c8:	d036      	beq.n	8008138 <HAL_PCD_IRQHandler+0x45c>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80080ca:	bb12      	cbnz	r2, 8008112 <HAL_PCD_IRQHandler+0x436>
 80080cc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80080d0:	7c1b      	ldrb	r3, [r3, #16]
 80080d2:	b292      	uxth	r2, r2
 80080d4:	011b      	lsls	r3, r3, #4
 80080d6:	f200 4004 	addw	r0, r0, #1028	@ 0x404
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80080da:	4410      	add	r0, r2
 80080dc:	5a1a      	ldrh	r2, [r3, r0]
 80080de:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80080e2:	521a      	strh	r2, [r3, r0]
 80080e4:	5a1a      	ldrh	r2, [r3, r0]
 80080e6:	b292      	uxth	r2, r2
 80080e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80080ec:	521a      	strh	r2, [r3, r0]
 80080ee:	e01b      	b.n	8008128 <HAL_PCD_IRQHandler+0x44c>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80080f0:	3206      	adds	r2, #6
 80080f2:	4413      	add	r3, r2
 80080f4:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 80080f8:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 80080fc:	f1b9 0f00 	cmp.w	r9, #0
 8008100:	d0aa      	beq.n	8008058 <HAL_PCD_IRQHandler+0x37c>
 8008102:	e781      	b.n	8008008 <HAL_PCD_IRQHandler+0x32c>
        ep = &hpcd->OUT_ep[epindex];
 8008104:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008108:	6820      	ldr	r0, [r4, #0]
 800810a:	4421      	add	r1, r4
 800810c:	f001 fea6 	bl	8009e5c <USB_EPStartXfer>
 8008110:	e7bd      	b.n	800808e <HAL_PCD_IRQHandler+0x3b2>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008112:	2a01      	cmp	r2, #1
 8008114:	d108      	bne.n	8008128 <HAL_PCD_IRQHandler+0x44c>
 8008116:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800811a:	7c1b      	ldrb	r3, [r3, #16]
 800811c:	b292      	uxth	r2, r2
 800811e:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 8008122:	011b      	lsls	r3, r3, #4
 8008124:	4410      	add	r0, r2
 8008126:	5219      	strh	r1, [r3, r0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008128:	2328      	movs	r3, #40	@ 0x28
 800812a:	fb03 4307 	mla	r3, r3, r7, r4
 800812e:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008130:	4620      	mov	r0, r4
 8008132:	f002 ffa0 	bl	800b076 <HAL_PCD_DataInStageCallback>
 8008136:	e5de      	b.n	8007cf6 <HAL_PCD_IRQHandler+0x1a>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008138:	b93a      	cbnz	r2, 800814a <HAL_PCD_IRQHandler+0x46e>
 800813a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800813e:	7c1b      	ldrb	r3, [r3, #16]
 8008140:	b292      	uxth	r2, r2
 8008142:	011b      	lsls	r3, r3, #4
 8008144:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8008148:	e7c7      	b.n	80080da <HAL_PCD_IRQHandler+0x3fe>
 800814a:	2a01      	cmp	r2, #1
 800814c:	d1ec      	bne.n	8008128 <HAL_PCD_IRQHandler+0x44c>
 800814e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8008152:	7c1b      	ldrb	r3, [r3, #16]
 8008154:	b292      	uxth	r2, r2
 8008156:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 800815a:	011b      	lsls	r3, r3, #4
 800815c:	4410      	add	r0, r2
 800815e:	f823 8000 	strh.w	r8, [r3, r0]
 8008162:	e7e1      	b.n	8008128 <HAL_PCD_IRQHandler+0x44c>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008164:	7c19      	ldrb	r1, [r3, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 8008166:	f418 7e80 	ands.w	lr, r8, #256	@ 0x100
            if (ep->xfer_len > TxPctSize)
 800816a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800816c:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8008170:	f500 6980 	add.w	r9, r0, #1024	@ 0x400
          if ((wEPVal & USB_EP_KIND) == 0U)
 8008174:	d11b      	bne.n	80081ae <HAL_PCD_IRQHandler+0x4d2>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008176:	f8b0 7050 	ldrh.w	r7, [r0, #80]	@ 0x50
 800817a:	b2bf      	uxth	r7, r7
 800817c:	4457      	add	r7, sl
 800817e:	3702      	adds	r7, #2
 8008180:	f839 7017 	ldrh.w	r7, [r9, r7, lsl #1]
            if (ep->xfer_len > TxPctSize)
 8008184:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008188:	4297      	cmp	r7, r2
 800818a:	d302      	bcc.n	8008192 <HAL_PCD_IRQHandler+0x4b6>
 800818c:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
 8008190:	e7ce      	b.n	8008130 <HAL_PCD_IRQHandler+0x454>
              ep->xfer_len -= TxPctSize;
 8008192:	1bd2      	subs	r2, r2, r7
 8008194:	629a      	str	r2, [r3, #40]	@ 0x28
              ep->xfer_buff += TxPctSize;
 8008196:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        ep = &hpcd->IN_ep[epindex];
 8008198:	f10c 0110 	add.w	r1, ip, #16
              ep->xfer_buff += TxPctSize;
 800819c:	443a      	add	r2, r7
 800819e:	625a      	str	r2, [r3, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 80081a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80081a2:	4421      	add	r1, r4
              ep->xfer_count += TxPctSize;
 80081a4:	443a      	add	r2, r7
 80081a6:	62da      	str	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80081a8:	f001 fe58 	bl	8009e5c <USB_EPStartXfer>
 80081ac:	e5a3      	b.n	8007cf6 <HAL_PCD_IRQHandler+0x1a>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80081ae:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80081b2:	f018 0e40 	ands.w	lr, r8, #64	@ 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80081b6:	fa1f fc8c 	uxth.w	ip, ip
 80081ba:	44d4      	add	ip, sl
 80081bc:	f408 4880 	and.w	r8, r8, #16384	@ 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80081c0:	f000 80f4 	beq.w	80083ac <HAL_PCD_IRQHandler+0x6d0>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80081c4:	f10c 0c02 	add.w	ip, ip, #2
 80081c8:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 80081cc:	fa1f f888 	uxth.w	r8, r8

    if (ep->xfer_len > TxPctSize)
 80081d0:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80081d4:	4594      	cmp	ip, r2
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 80081d6:	bf2c      	ite	cs
 80081d8:	2200      	movcs	r2, #0
      ep->xfer_len -= TxPctSize;
 80081da:	eba2 020c 	subcc.w	r2, r2, ip
 80081de:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80081e0:	2a00      	cmp	r2, #0
 80081e2:	d15b      	bne.n	800829c <HAL_PCD_IRQHandler+0x5c0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80081e4:	2328      	movs	r3, #40	@ 0x28
 80081e6:	fb03 4307 	mla	r3, r3, r7, r4
 80081ea:	7c5b      	ldrb	r3, [r3, #17]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d141      	bne.n	8008274 <HAL_PCD_IRQHandler+0x598>
 80081f0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80081f4:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 80081f8:	b292      	uxth	r2, r2
 80081fa:	010b      	lsls	r3, r1, #4
 80081fc:	4494      	add	ip, r2
 80081fe:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8008202:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008206:	f82c 2003 	strh.w	r2, [ip, r3]
 800820a:	f83c 2003 	ldrh.w	r2, [ip, r3]
 800820e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8008212:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8008216:	b292      	uxth	r2, r2
 8008218:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800821c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8008220:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8008224:	b292      	uxth	r2, r2
 8008226:	4410      	add	r0, r2
 8008228:	5ac2      	ldrh	r2, [r0, r3]
 800822a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800822e:	52c2      	strh	r2, [r0, r3]
 8008230:	5ac2      	ldrh	r2, [r0, r3]
 8008232:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8008236:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800823a:	b292      	uxth	r2, r2
 800823c:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800823e:	4620      	mov	r0, r4
 8008240:	f002 ff19 	bl	800b076 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008244:	f1b8 0f00 	cmp.w	r8, #0
 8008248:	f000 80f4 	beq.w	8008434 <HAL_PCD_IRQHandler+0x758>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800824c:	2328      	movs	r3, #40	@ 0x28
 800824e:	fb03 4307 	mla	r3, r3, r7, r4
 8008252:	6822      	ldr	r2, [r4, #0]
 8008254:	7c19      	ldrb	r1, [r3, #16]
 8008256:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800825a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800825e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008262:	041b      	lsls	r3, r3, #16
 8008264:	0c1b      	lsrs	r3, r3, #16
 8008266:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800826a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800826e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8008272:	e0df      	b.n	8008434 <HAL_PCD_IRQHandler+0x758>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008274:	2b01      	cmp	r3, #1
 8008276:	d1e2      	bne.n	800823e <HAL_PCD_IRQHandler+0x562>
 8008278:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 800827c:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8008280:	fa1f fe8e 	uxth.w	lr, lr
 8008284:	44f4      	add	ip, lr
 8008286:	010b      	lsls	r3, r1, #4
 8008288:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800828c:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8008290:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8008294:	fa1f fc8c 	uxth.w	ip, ip
 8008298:	4460      	add	r0, ip
 800829a:	e7cf      	b.n	800823c <HAL_PCD_IRQHandler+0x560>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800829c:	f1b8 0f00 	cmp.w	r8, #0
 80082a0:	d00d      	beq.n	80082be <HAL_PCD_IRQHandler+0x5e2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80082a2:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 80082a6:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80082aa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80082ae:	0412      	lsls	r2, r2, #16
 80082b0:	0c12      	lsrs	r2, r2, #16
 80082b2:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80082b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80082ba:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80082be:	f04f 0828 	mov.w	r8, #40	@ 0x28
 80082c2:	fb08 4807 	mla	r8, r8, r7, r4
 80082c6:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 80082ca:	2a01      	cmp	r2, #1
 80082cc:	f040 80b2 	bne.w	8008434 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 80082d0:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 80082d4:	eb02 0e0c 	add.w	lr, r2, ip
 80082d8:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 80082dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082de:	4462      	add	r2, ip
 80082e0:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 80082e2:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 80082e6:	f8d8 2020 	ldr.w	r2, [r8, #32]
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d335      	bcc.n	800835a <HAL_PCD_IRQHandler+0x67e>
          ep->xfer_len_db -= len;
 80082ee:	1a9b      	subs	r3, r3, r2
 80082f0:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80082f4:	2328      	movs	r3, #40	@ 0x28
 80082f6:	fb03 4307 	mla	r3, r3, r7, r4
 80082fa:	f893 c011 	ldrb.w	ip, [r3, #17]
 80082fe:	b293      	uxth	r3, r2
 8008300:	f1bc 0f00 	cmp.w	ip, #0
 8008304:	d145      	bne.n	8008392 <HAL_PCD_IRQHandler+0x6b6>
 8008306:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 800830a:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 800830e:	fa1f f888 	uxth.w	r8, r8
 8008312:	44c4      	add	ip, r8
 8008314:	0109      	lsls	r1, r1, #4
 8008316:	f83c 8001 	ldrh.w	r8, [ip, r1]
 800831a:	2a3e      	cmp	r2, #62	@ 0x3e
 800831c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008320:	f82c 8001 	strh.w	r8, [ip, r1]
 8008324:	d925      	bls.n	8008372 <HAL_PCD_IRQHandler+0x696>
 8008326:	ea4f 1852 	mov.w	r8, r2, lsr #5
 800832a:	06d2      	lsls	r2, r2, #27
 800832c:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8008330:	bf08      	it	eq
 8008332:	f108 38ff 	addeq.w	r8, r8, #4294967295
 8008336:	b292      	uxth	r2, r2
 8008338:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 800833c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8008340:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8008344:	b292      	uxth	r2, r2
 8008346:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800834a:	2228      	movs	r2, #40	@ 0x28
 800834c:	fb02 4207 	mla	r2, r2, r7, r4
 8008350:	8b12      	ldrh	r2, [r2, #24]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008352:	4671      	mov	r1, lr
 8008354:	f001 fd72 	bl	8009e3c <USB_WritePMA>
 8008358:	e06c      	b.n	8008434 <HAL_PCD_IRQHandler+0x758>
        else if (ep->xfer_len_db == 0U)
 800835a:	b91b      	cbnz	r3, 8008364 <HAL_PCD_IRQHandler+0x688>
    if (ep->xfer_len > TxPctSize)
 800835c:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 800835e:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 8008362:	e7c7      	b.n	80082f4 <HAL_PCD_IRQHandler+0x618>
          ep->xfer_fill_db = 0U;
 8008364:	2200      	movs	r2, #0
 8008366:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          ep->xfer_len_db = 0U;
 800836a:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
 800836e:	461a      	mov	r2, r3
 8008370:	e7c0      	b.n	80082f4 <HAL_PCD_IRQHandler+0x618>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008372:	b912      	cbnz	r2, 800837a <HAL_PCD_IRQHandler+0x69e>
 8008374:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8008378:	e7e0      	b.n	800833c <HAL_PCD_IRQHandler+0x660>
 800837a:	ea4f 0852 	mov.w	r8, r2, lsr #1
 800837e:	07d2      	lsls	r2, r2, #31
 8008380:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8008384:	bf48      	it	mi
 8008386:	f108 0801 	addmi.w	r8, r8, #1
 800838a:	b292      	uxth	r2, r2
 800838c:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8008390:	e7d8      	b.n	8008344 <HAL_PCD_IRQHandler+0x668>
 8008392:	f1bc 0f01 	cmp.w	ip, #1
 8008396:	d1d8      	bne.n	800834a <HAL_PCD_IRQHandler+0x66e>
 8008398:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 800839c:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 80083a0:	fa1f fc8c 	uxth.w	ip, ip
 80083a4:	4462      	add	r2, ip
 80083a6:	0109      	lsls	r1, r1, #4
 80083a8:	5253      	strh	r3, [r2, r1]
 80083aa:	e7ce      	b.n	800834a <HAL_PCD_IRQHandler+0x66e>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80083ac:	f10c 0c06 	add.w	ip, ip, #6
 80083b0:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 80083b4:	fa1f f888 	uxth.w	r8, r8
    if (ep->xfer_len >= TxPctSize)
 80083b8:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80083bc:	4594      	cmp	ip, r2
      ep->xfer_len = 0U;
 80083be:	bf8c      	ite	hi
 80083c0:	4672      	movhi	r2, lr
      ep->xfer_len -= TxPctSize;
 80083c2:	eba2 020c 	subls.w	r2, r2, ip
 80083c6:	629a      	str	r2, [r3, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 80083c8:	2a00      	cmp	r2, #0
 80083ca:	d15d      	bne.n	8008488 <HAL_PCD_IRQHandler+0x7ac>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80083cc:	2328      	movs	r3, #40	@ 0x28
 80083ce:	fb03 4307 	mla	r3, r3, r7, r4
 80083d2:	7c5b      	ldrb	r3, [r3, #17]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d143      	bne.n	8008460 <HAL_PCD_IRQHandler+0x784>
 80083d8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80083dc:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 80083e0:	b292      	uxth	r2, r2
 80083e2:	010b      	lsls	r3, r1, #4
 80083e4:	4494      	add	ip, r2
 80083e6:	f83c 2003 	ldrh.w	r2, [ip, r3]
 80083ea:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80083ee:	f82c 2003 	strh.w	r2, [ip, r3]
 80083f2:	f83c 2003 	ldrh.w	r2, [ip, r3]
 80083f6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80083fa:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80083fe:	b292      	uxth	r2, r2
 8008400:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008404:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8008408:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 800840c:	b292      	uxth	r2, r2
 800840e:	4410      	add	r0, r2
 8008410:	5ac2      	ldrh	r2, [r0, r3]
 8008412:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008416:	52c2      	strh	r2, [r0, r3]
 8008418:	5ac2      	ldrh	r2, [r0, r3]
 800841a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800841e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8008422:	b292      	uxth	r2, r2
 8008424:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008426:	4620      	mov	r0, r4
 8008428:	f002 fe25 	bl	800b076 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800842c:	f1b8 0f00 	cmp.w	r8, #0
 8008430:	f43f af0c 	beq.w	800824c <HAL_PCD_IRQHandler+0x570>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008434:	2328      	movs	r3, #40	@ 0x28
 8008436:	fb03 4307 	mla	r3, r3, r7, r4
 800843a:	6822      	ldr	r2, [r4, #0]
 800843c:	7c19      	ldrb	r1, [r3, #16]
 800843e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8008442:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008446:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800844a:	041b      	lsls	r3, r3, #16
 800844c:	0c1b      	lsrs	r3, r3, #16
 800844e:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 8008452:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800845a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 800845e:	e44a      	b.n	8007cf6 <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008460:	2b01      	cmp	r3, #1
 8008462:	d1e0      	bne.n	8008426 <HAL_PCD_IRQHandler+0x74a>
 8008464:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 8008468:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 800846c:	fa1f fe8e 	uxth.w	lr, lr
 8008470:	44f4      	add	ip, lr
 8008472:	010b      	lsls	r3, r1, #4
 8008474:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008478:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 800847c:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8008480:	fa1f fc8c 	uxth.w	ip, ip
 8008484:	4460      	add	r0, ip
 8008486:	e7cd      	b.n	8008424 <HAL_PCD_IRQHandler+0x748>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008488:	f1b8 0f00 	cmp.w	r8, #0
 800848c:	d10d      	bne.n	80084aa <HAL_PCD_IRQHandler+0x7ce>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800848e:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8008492:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8008496:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800849a:	0412      	lsls	r2, r2, #16
 800849c:	0c12      	lsrs	r2, r2, #16
 800849e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80084a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80084a6:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80084aa:	f04f 0828 	mov.w	r8, #40	@ 0x28
 80084ae:	fb08 4807 	mla	r8, r8, r7, r4
 80084b2:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 80084b6:	2a01      	cmp	r2, #1
 80084b8:	d1bc      	bne.n	8008434 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 80084ba:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 80084be:	eb02 0e0c 	add.w	lr, r2, ip
 80084c2:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 80084c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084c8:	4462      	add	r2, ip
 80084ca:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 80084cc:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 80084d0:	f8d8 2020 	ldr.w	r2, [r8, #32]
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d332      	bcc.n	800853e <HAL_PCD_IRQHandler+0x862>
          ep->xfer_len_db -= len;
 80084d8:	1a9b      	subs	r3, r3, r2
 80084da:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80084de:	2328      	movs	r3, #40	@ 0x28
 80084e0:	fb03 4307 	mla	r3, r3, r7, r4
 80084e4:	f893 c011 	ldrb.w	ip, [r3, #17]
 80084e8:	b293      	uxth	r3, r2
 80084ea:	f1bc 0f00 	cmp.w	ip, #0
 80084ee:	d142      	bne.n	8008576 <HAL_PCD_IRQHandler+0x89a>
 80084f0:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 80084f4:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 80084f8:	fa1f f888 	uxth.w	r8, r8
 80084fc:	44c4      	add	ip, r8
 80084fe:	0109      	lsls	r1, r1, #4
 8008500:	f83c 8001 	ldrh.w	r8, [ip, r1]
 8008504:	2a3e      	cmp	r2, #62	@ 0x3e
 8008506:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800850a:	f82c 8001 	strh.w	r8, [ip, r1]
 800850e:	d922      	bls.n	8008556 <HAL_PCD_IRQHandler+0x87a>
 8008510:	ea4f 1852 	mov.w	r8, r2, lsr #5
 8008514:	06d2      	lsls	r2, r2, #27
 8008516:	f83c 2001 	ldrh.w	r2, [ip, r1]
 800851a:	bf08      	it	eq
 800851c:	f108 38ff 	addeq.w	r8, r8, #4294967295
 8008520:	b292      	uxth	r2, r2
 8008522:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8008526:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800852a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800852e:	b292      	uxth	r2, r2
 8008530:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008534:	2228      	movs	r2, #40	@ 0x28
 8008536:	fb02 4207 	mla	r2, r2, r7, r4
 800853a:	8b52      	ldrh	r2, [r2, #26]
 800853c:	e709      	b.n	8008352 <HAL_PCD_IRQHandler+0x676>
        else if (ep->xfer_len_db == 0U)
 800853e:	b91b      	cbnz	r3, 8008548 <HAL_PCD_IRQHandler+0x86c>
    if (ep->xfer_len >= TxPctSize)
 8008540:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 8008542:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 8008546:	e7ca      	b.n	80084de <HAL_PCD_IRQHandler+0x802>
          ep->xfer_len_db = 0U;
 8008548:	2200      	movs	r2, #0
 800854a:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 800854e:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
 8008552:	461a      	mov	r2, r3
 8008554:	e7c3      	b.n	80084de <HAL_PCD_IRQHandler+0x802>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008556:	b912      	cbnz	r2, 800855e <HAL_PCD_IRQHandler+0x882>
 8008558:	f83c 2001 	ldrh.w	r2, [ip, r1]
 800855c:	e7e3      	b.n	8008526 <HAL_PCD_IRQHandler+0x84a>
 800855e:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8008562:	07d2      	lsls	r2, r2, #31
 8008564:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8008568:	bf48      	it	mi
 800856a:	f108 0801 	addmi.w	r8, r8, #1
 800856e:	b292      	uxth	r2, r2
 8008570:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8008574:	e7db      	b.n	800852e <HAL_PCD_IRQHandler+0x852>
 8008576:	f1bc 0f01 	cmp.w	ip, #1
 800857a:	d1db      	bne.n	8008534 <HAL_PCD_IRQHandler+0x858>
 800857c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8008580:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 8008584:	b292      	uxth	r2, r2
 8008586:	4494      	add	ip, r2
 8008588:	010a      	lsls	r2, r1, #4
 800858a:	f82c 3002 	strh.w	r3, [ip, r2]
 800858e:	e7d1      	b.n	8008534 <HAL_PCD_IRQHandler+0x858>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8008590:	0546      	lsls	r6, r0, #21
 8008592:	d512      	bpl.n	80085ba <HAL_PCD_IRQHandler+0x8de>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008594:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8008596:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008598:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800859c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80085a0:	041b      	lsls	r3, r3, #16
 80085a2:	0c1b      	lsrs	r3, r3, #16
 80085a4:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 80085a8:	f002 fd71 	bl	800b08e <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80085ac:	4629      	mov	r1, r5
 80085ae:	4620      	mov	r0, r4
}
 80085b0:	b005      	add	sp, #20
 80085b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80085b6:	f7ff bb7d 	b.w	8007cb4 <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80085ba:	0441      	lsls	r1, r0, #17
 80085bc:	d50a      	bpl.n	80085d4 <HAL_PCD_IRQHandler+0x8f8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80085be:	6822      	ldr	r2, [r4, #0]
 80085c0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80085c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80085c8:	041b      	lsls	r3, r3, #16
 80085ca:	0c1b      	lsrs	r3, r3, #16
 80085cc:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 80085d0:	f7ff bb96 	b.w	8007d00 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80085d4:	0482      	lsls	r2, r0, #18
 80085d6:	d505      	bpl.n	80085e4 <HAL_PCD_IRQHandler+0x908>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80085d8:	6822      	ldr	r2, [r4, #0]
 80085da:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80085de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80085e2:	e7f1      	b.n	80085c8 <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80085e4:	04c3      	lsls	r3, r0, #19
 80085e6:	d519      	bpl.n	800861c <HAL_PCD_IRQHandler+0x940>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80085e8:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 80085ea:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80085ec:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 80085f0:	f023 0304 	bic.w	r3, r3, #4
 80085f4:	041b      	lsls	r3, r3, #16
 80085f6:	0c1b      	lsrs	r3, r3, #16
 80085f8:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80085fc:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8008600:	f023 0308 	bic.w	r3, r3, #8
 8008604:	041b      	lsls	r3, r3, #16
 8008606:	0c1b      	lsrs	r3, r3, #16
 8008608:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_ResumeCallback(hpcd);
 800860c:	f002 fd62 	bl	800b0d4 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8008610:	6822      	ldr	r2, [r4, #0]
 8008612:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8008616:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800861a:	e7d5      	b.n	80085c8 <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800861c:	0507      	lsls	r7, r0, #20
 800861e:	d548      	bpl.n	80086b2 <HAL_PCD_IRQHandler+0x9d6>
 8008620:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8008622:	6823      	ldr	r3, [r4, #0]
 8008624:	4606      	mov	r6, r0
 8008626:	4619      	mov	r1, r3
 8008628:	461a      	mov	r2, r3
 800862a:	f103 0520 	add.w	r5, r3, #32
 800862e:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 8008632:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8008634:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 8008638:	d1f9      	bne.n	800862e <HAL_PCD_IRQHandler+0x952>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800863a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800863e:	b292      	uxth	r2, r2
 8008640:	f042 0201 	orr.w	r2, r2, #1
 8008644:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8008648:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800864c:	f022 0201 	bic.w	r2, r2, #1
 8008650:	0412      	lsls	r2, r2, #16
 8008652:	0c12      	lsrs	r2, r2, #16
 8008654:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8008658:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800865c:	0556      	lsls	r6, r2, #21
 800865e:	d5fb      	bpl.n	8008658 <HAL_PCD_IRQHandler+0x97c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008660:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8008664:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008668:	0412      	lsls	r2, r2, #16
 800866a:	0c12      	lsrs	r2, r2, #16
 800866c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8008670:	f830 2b02 	ldrh.w	r2, [r0], #2
 8008674:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 8008678:	428d      	cmp	r5, r1
 800867a:	d1f9      	bne.n	8008670 <HAL_PCD_IRQHandler+0x994>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800867c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8008680:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008682:	b292      	uxth	r2, r2
 8008684:	f042 0208 	orr.w	r2, r2, #8
 8008688:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800868c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8008690:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008694:	0412      	lsls	r2, r2, #16
 8008696:	0c12      	lsrs	r2, r2, #16
 8008698:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800869c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80086a0:	b292      	uxth	r2, r2
 80086a2:	f042 0204 	orr.w	r2, r2, #4
 80086a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80086aa:	f002 fd03 	bl	800b0b4 <HAL_PCD_SuspendCallback>
    return;
 80086ae:	f7ff bb27 	b.w	8007d00 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80086b2:	0582      	lsls	r2, r0, #22
 80086b4:	d50d      	bpl.n	80086d2 <HAL_PCD_IRQHandler+0x9f6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80086b6:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80086b8:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80086ba:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80086be:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80086c2:	041b      	lsls	r3, r3, #16
 80086c4:	0c1b      	lsrs	r3, r3, #16
 80086c6:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 80086ca:	f002 fcdc 	bl	800b086 <HAL_PCD_SOFCallback>
    return;
 80086ce:	f7ff bb17 	b.w	8007d00 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80086d2:	05c3      	lsls	r3, r0, #23
 80086d4:	f57f ab14 	bpl.w	8007d00 <HAL_PCD_IRQHandler+0x24>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80086d8:	6822      	ldr	r2, [r4, #0]
 80086da:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80086de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086e2:	e771      	b.n	80085c8 <HAL_PCD_IRQHandler+0x8ec>

080086e4 <HAL_PCD_EP_Open>:
{
 80086e4:	b570      	push	{r4, r5, r6, lr}
 80086e6:	2428      	movs	r4, #40	@ 0x28
 80086e8:	4605      	mov	r5, r0
 80086ea:	f001 0007 	and.w	r0, r1, #7
 80086ee:	4344      	muls	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80086f0:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80086f4:	bf14      	ite	ne
 80086f6:	f104 0110 	addne.w	r1, r4, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80086fa:	f504 71a8 	addeq.w	r1, r4, #336	@ 0x150
 80086fe:	eb05 0604 	add.w	r6, r5, r4
    ep->is_in = 1U;
 8008702:	bf15      	itete	ne
 8008704:	2401      	movne	r4, #1
    ep->is_in = 0U;
 8008706:	2400      	moveq	r4, #0
    ep->is_in = 1U;
 8008708:	7474      	strbne	r4, [r6, #17]
    ep->is_in = 0U;
 800870a:	f886 4151 	strbeq.w	r4, [r6, #337]	@ 0x151
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800870e:	bf14      	ite	ne
 8008710:	1949      	addne	r1, r1, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008712:	1949      	addeq	r1, r1, r5
  if (ep_type == EP_TYPE_BULK)
 8008714:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8008716:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 8008718:	bf08      	it	eq
 800871a:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 800871c:	7008      	strb	r0, [r1, #0]
    ep->data_pid_start = 0U;
 800871e:	bf08      	it	eq
 8008720:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 8008722:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8008724:	f895 3290 	ldrb.w	r3, [r5, #656]	@ 0x290
 8008728:	2b01      	cmp	r3, #1
 800872a:	d009      	beq.n	8008740 <HAL_PCD_EP_Open+0x5c>
 800872c:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800872e:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8008730:	f885 3290 	strb.w	r3, [r5, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008734:	f001 f8d6 	bl	80098e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008738:	2000      	movs	r0, #0
 800873a:	f885 0290 	strb.w	r0, [r5, #656]	@ 0x290
}
 800873e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8008740:	2002      	movs	r0, #2
 8008742:	e7fc      	b.n	800873e <HAL_PCD_EP_Open+0x5a>

08008744 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8008744:	2328      	movs	r3, #40	@ 0x28
 8008746:	f001 0207 	and.w	r2, r1, #7
 800874a:	4353      	muls	r3, r2
 800874c:	f011 0f80 	tst.w	r1, #128	@ 0x80
{
 8008750:	b510      	push	{r4, lr}
 8008752:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008754:	bf18      	it	ne
 8008756:	f103 0110 	addne.w	r1, r3, #16
 800875a:	4418      	add	r0, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800875c:	bf0b      	itete	eq
 800875e:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
    ep->is_in = 1U;
 8008762:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8008764:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008766:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008768:	bf0a      	itet	eq
 800876a:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 800876c:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 800876e:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 8008772:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8008774:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 8008778:	2b01      	cmp	r3, #1
 800877a:	d009      	beq.n	8008790 <HAL_PCD_EP_Close+0x4c>
 800877c:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800877e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8008780:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008784:	f001 fa0e 	bl	8009ba4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008788:	2000      	movs	r0, #0
 800878a:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 800878e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8008790:	2002      	movs	r0, #2
 8008792:	e7fc      	b.n	800878e <HAL_PCD_EP_Close+0x4a>

08008794 <HAL_PCD_EP_Receive>:
{
 8008794:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 8008796:	2428      	movs	r4, #40	@ 0x28
  ep->xfer_count = 0U;
 8008798:	2600      	movs	r6, #0
 800879a:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 800879e:	434c      	muls	r4, r1
 80087a0:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 80087a2:	f885 1150 	strb.w	r1, [r5, #336]	@ 0x150
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80087a6:	f504 71a8 	add.w	r1, r4, #336	@ 0x150
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80087aa:	4401      	add	r1, r0
  ep->xfer_len = len;
 80087ac:	e9c5 2359 	strd	r2, r3, [r5, #356]	@ 0x164
  ep->xfer_count = 0U;
 80087b0:	f8c5 616c 	str.w	r6, [r5, #364]	@ 0x16c
  ep->is_in = 0U;
 80087b4:	f885 6151 	strb.w	r6, [r5, #337]	@ 0x151
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80087b8:	6800      	ldr	r0, [r0, #0]
 80087ba:	f001 fb4f 	bl	8009e5c <USB_EPStartXfer>
}
 80087be:	4630      	mov	r0, r6
 80087c0:	bd70      	pop	{r4, r5, r6, pc}

080087c2 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80087c2:	2328      	movs	r3, #40	@ 0x28
 80087c4:	f001 0107 	and.w	r1, r1, #7
 80087c8:	fb03 0001 	mla	r0, r3, r1, r0
}
 80087cc:	f8d0 016c 	ldr.w	r0, [r0, #364]	@ 0x16c
 80087d0:	4770      	bx	lr

080087d2 <HAL_PCD_EP_Transmit>:
{
 80087d2:	b570      	push	{r4, r5, r6, lr}
 80087d4:	2528      	movs	r5, #40	@ 0x28
 80087d6:	f001 0107 	and.w	r1, r1, #7
 80087da:	434d      	muls	r5, r1
  ep->xfer_buff = pBuf;
 80087dc:	1944      	adds	r4, r0, r5
  ep->xfer_count = 0U;
 80087de:	2600      	movs	r6, #0
  ep->xfer_len = len;
 80087e0:	e9c4 2309 	strd	r2, r3, [r4, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 80087e4:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80087e6:	7421      	strb	r1, [r4, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80087e8:	f105 0110 	add.w	r1, r5, #16
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80087ec:	4401      	add	r1, r0
  ep->xfer_fill_db = 1U;
 80087ee:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  ep->xfer_len_db = len;
 80087f2:	6323      	str	r3, [r4, #48]	@ 0x30
  ep->xfer_count = 0U;
 80087f4:	62e6      	str	r6, [r4, #44]	@ 0x2c
  ep->is_in = 1U;
 80087f6:	7462      	strb	r2, [r4, #17]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80087f8:	6800      	ldr	r0, [r0, #0]
 80087fa:	f001 fb2f 	bl	8009e5c <USB_EPStartXfer>
}
 80087fe:	4630      	mov	r0, r6
 8008800:	bd70      	pop	{r4, r5, r6, pc}

08008802 <HAL_PCD_EP_SetStall>:
{
 8008802:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008804:	7903      	ldrb	r3, [r0, #4]
 8008806:	f001 0507 	and.w	r5, r1, #7
 800880a:	42ab      	cmp	r3, r5
{
 800880c:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800880e:	d32a      	bcc.n	8008866 <HAL_PCD_EP_SetStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 8008810:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8008814:	f04f 0328 	mov.w	r3, #40	@ 0x28
 8008818:	d01c      	beq.n	8008854 <HAL_PCD_EP_SetStall+0x52>
    ep->is_in = 1U;
 800881a:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800881c:	436b      	muls	r3, r5
 800881e:	f103 0110 	add.w	r1, r3, #16
    ep->is_in = 1U;
 8008822:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008824:	4401      	add	r1, r0
    ep->is_in = 1U;
 8008826:	745a      	strb	r2, [r3, #17]
  ep->is_stall = 1U;
 8008828:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800882a:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800882c:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800882e:	f894 2290 	ldrb.w	r2, [r4, #656]	@ 0x290
 8008832:	429a      	cmp	r2, r3
 8008834:	d019      	beq.n	800886a <HAL_PCD_EP_SetStall+0x68>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008836:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8008838:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800883c:	f001 fa85 	bl	8009d4a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008840:	b925      	cbnz	r5, 800884c <HAL_PCD_EP_SetStall+0x4a>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008842:	6820      	ldr	r0, [r4, #0]
 8008844:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 8008848:	f001 faf6 	bl	8009e38 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 800884c:	2000      	movs	r0, #0
 800884e:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8008852:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8008854:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8008856:	434b      	muls	r3, r1
 8008858:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
    ep->is_in = 0U;
 800885c:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 800885e:	4401      	add	r1, r0
    ep->is_in = 0U;
 8008860:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
 8008864:	e7e0      	b.n	8008828 <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
 8008866:	2001      	movs	r0, #1
 8008868:	e7f3      	b.n	8008852 <HAL_PCD_EP_SetStall+0x50>
  __HAL_LOCK(hpcd);
 800886a:	2002      	movs	r0, #2
 800886c:	e7f1      	b.n	8008852 <HAL_PCD_EP_SetStall+0x50>

0800886e <HAL_PCD_EP_ClrStall>:
{
 800886e:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008870:	7902      	ldrb	r2, [r0, #4]
 8008872:	f001 030f 	and.w	r3, r1, #15
 8008876:	429a      	cmp	r2, r3
{
 8008878:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800887a:	d326      	bcc.n	80088ca <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 800887c:	2328      	movs	r3, #40	@ 0x28
 800887e:	f001 0207 	and.w	r2, r1, #7
 8008882:	4353      	muls	r3, r2
 8008884:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008888:	bf14      	ite	ne
 800888a:	f103 0110 	addne.w	r1, r3, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800888e:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
 8008892:	4418      	add	r0, r3
  ep->is_stall = 0U;
 8008894:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8008898:	bf15      	itete	ne
 800889a:	2301      	movne	r3, #1
    ep->is_in = 0U;
 800889c:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800889e:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80088a0:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 80088a2:	bf14      	ite	ne
 80088a4:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 80088a6:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->is_stall = 0U;
 80088aa:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80088ac:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80088ae:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d00b      	beq.n	80088ce <HAL_PCD_EP_ClrStall+0x60>
 80088b6:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80088b8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80088ba:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80088be:	f001 fa64 	bl	8009d8a <USB_EPClearStall>
  return HAL_OK;
 80088c2:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 80088c4:	f884 5290 	strb.w	r5, [r4, #656]	@ 0x290
}
 80088c8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80088ca:	2001      	movs	r0, #1
 80088cc:	e7fc      	b.n	80088c8 <HAL_PCD_EP_ClrStall+0x5a>
  __HAL_LOCK(hpcd);
 80088ce:	2002      	movs	r0, #2
 80088d0:	e7fa      	b.n	80088c8 <HAL_PCD_EP_ClrStall+0x5a>

080088d2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80088d2:	b510      	push	{r4, lr}
 80088d4:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80088d6:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80088da:	bf1b      	ittet	ne
 80088dc:	f001 0107 	andne.w	r1, r1, #7
 80088e0:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80088e4:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80088e8:	3010      	addne	r0, #16
    ep = &hpcd->OUT_ep[ep_addr];
 80088ea:	bf08      	it	eq
 80088ec:	f500 70a8 	addeq.w	r0, r0, #336	@ 0x150
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80088f0:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 80088f2:	b91a      	cbnz	r2, 80088fc <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 80088f4:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 80088f6:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80088f8:	2000      	movs	r0, #0
 80088fa:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 80088fc:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80088fe:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8008900:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008902:	e7f9      	b.n	80088f8 <HAL_PCDEx_PMAConfig+0x26>

08008904 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008904:	2201      	movs	r2, #1
 8008906:	4b01      	ldr	r3, [pc, #4]	@ (800890c <HAL_PWR_EnableBkUpAccess+0x8>)
 8008908:	621a      	str	r2, [r3, #32]
}
 800890a:	4770      	bx	lr
 800890c:	420e0000 	.word	0x420e0000

08008910 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008910:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008914:	4605      	mov	r5, r0
 8008916:	b338      	cbz	r0, 8008968 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008918:	6803      	ldr	r3, [r0, #0]
 800891a:	07db      	lsls	r3, r3, #31
 800891c:	d410      	bmi.n	8008940 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800891e:	682b      	ldr	r3, [r5, #0]
 8008920:	079f      	lsls	r7, r3, #30
 8008922:	d45e      	bmi.n	80089e2 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008924:	682b      	ldr	r3, [r5, #0]
 8008926:	0719      	lsls	r1, r3, #28
 8008928:	f100 8095 	bmi.w	8008a56 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800892c:	682b      	ldr	r3, [r5, #0]
 800892e:	075a      	lsls	r2, r3, #29
 8008930:	f100 80c1 	bmi.w	8008ab6 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008934:	69eb      	ldr	r3, [r5, #28]
 8008936:	2b00      	cmp	r3, #0
 8008938:	f040 812c 	bne.w	8008b94 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 800893c:	2000      	movs	r0, #0
 800893e:	e029      	b.n	8008994 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008940:	4c90      	ldr	r4, [pc, #576]	@ (8008b84 <HAL_RCC_OscConfig+0x274>)
 8008942:	6863      	ldr	r3, [r4, #4]
 8008944:	f003 030c 	and.w	r3, r3, #12
 8008948:	2b04      	cmp	r3, #4
 800894a:	d007      	beq.n	800895c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800894c:	6863      	ldr	r3, [r4, #4]
 800894e:	f003 030c 	and.w	r3, r3, #12
 8008952:	2b08      	cmp	r3, #8
 8008954:	d10a      	bne.n	800896c <HAL_RCC_OscConfig+0x5c>
 8008956:	6863      	ldr	r3, [r4, #4]
 8008958:	03de      	lsls	r6, r3, #15
 800895a:	d507      	bpl.n	800896c <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800895c:	6823      	ldr	r3, [r4, #0]
 800895e:	039c      	lsls	r4, r3, #14
 8008960:	d5dd      	bpl.n	800891e <HAL_RCC_OscConfig+0xe>
 8008962:	686b      	ldr	r3, [r5, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1da      	bne.n	800891e <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8008968:	2001      	movs	r0, #1
 800896a:	e013      	b.n	8008994 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800896c:	686b      	ldr	r3, [r5, #4]
 800896e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008972:	d112      	bne.n	800899a <HAL_RCC_OscConfig+0x8a>
 8008974:	6823      	ldr	r3, [r4, #0]
 8008976:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800897a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800897c:	f7fe fc84 	bl	8007288 <HAL_GetTick>
 8008980:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008982:	6823      	ldr	r3, [r4, #0]
 8008984:	0398      	lsls	r0, r3, #14
 8008986:	d4ca      	bmi.n	800891e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008988:	f7fe fc7e 	bl	8007288 <HAL_GetTick>
 800898c:	1b80      	subs	r0, r0, r6
 800898e:	2864      	cmp	r0, #100	@ 0x64
 8008990:	d9f7      	bls.n	8008982 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8008992:	2003      	movs	r0, #3
}
 8008994:	b002      	add	sp, #8
 8008996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800899a:	b99b      	cbnz	r3, 80089c4 <HAL_RCC_OscConfig+0xb4>
 800899c:	6823      	ldr	r3, [r4, #0]
 800899e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089a2:	6023      	str	r3, [r4, #0]
 80089a4:	6823      	ldr	r3, [r4, #0]
 80089a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80089aa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80089ac:	f7fe fc6c 	bl	8007288 <HAL_GetTick>
 80089b0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	0399      	lsls	r1, r3, #14
 80089b6:	d5b2      	bpl.n	800891e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089b8:	f7fe fc66 	bl	8007288 <HAL_GetTick>
 80089bc:	1b80      	subs	r0, r0, r6
 80089be:	2864      	cmp	r0, #100	@ 0x64
 80089c0:	d9f7      	bls.n	80089b2 <HAL_RCC_OscConfig+0xa2>
 80089c2:	e7e6      	b.n	8008992 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80089c8:	6823      	ldr	r3, [r4, #0]
 80089ca:	d103      	bne.n	80089d4 <HAL_RCC_OscConfig+0xc4>
 80089cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80089d0:	6023      	str	r3, [r4, #0]
 80089d2:	e7cf      	b.n	8008974 <HAL_RCC_OscConfig+0x64>
 80089d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089d8:	6023      	str	r3, [r4, #0]
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80089e0:	e7cb      	b.n	800897a <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80089e2:	4c68      	ldr	r4, [pc, #416]	@ (8008b84 <HAL_RCC_OscConfig+0x274>)
 80089e4:	6863      	ldr	r3, [r4, #4]
 80089e6:	f013 0f0c 	tst.w	r3, #12
 80089ea:	d007      	beq.n	80089fc <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80089ec:	6863      	ldr	r3, [r4, #4]
 80089ee:	f003 030c 	and.w	r3, r3, #12
 80089f2:	2b08      	cmp	r3, #8
 80089f4:	d110      	bne.n	8008a18 <HAL_RCC_OscConfig+0x108>
 80089f6:	6863      	ldr	r3, [r4, #4]
 80089f8:	03da      	lsls	r2, r3, #15
 80089fa:	d40d      	bmi.n	8008a18 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80089fc:	6823      	ldr	r3, [r4, #0]
 80089fe:	079b      	lsls	r3, r3, #30
 8008a00:	d502      	bpl.n	8008a08 <HAL_RCC_OscConfig+0xf8>
 8008a02:	692b      	ldr	r3, [r5, #16]
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d1af      	bne.n	8008968 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a08:	6823      	ldr	r3, [r4, #0]
 8008a0a:	696a      	ldr	r2, [r5, #20]
 8008a0c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008a10:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008a14:	6023      	str	r3, [r4, #0]
 8008a16:	e785      	b.n	8008924 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008a18:	692a      	ldr	r2, [r5, #16]
 8008a1a:	4b5b      	ldr	r3, [pc, #364]	@ (8008b88 <HAL_RCC_OscConfig+0x278>)
 8008a1c:	b16a      	cbz	r2, 8008a3a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8008a1e:	2201      	movs	r2, #1
 8008a20:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008a22:	f7fe fc31 	bl	8007288 <HAL_GetTick>
 8008a26:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a28:	6823      	ldr	r3, [r4, #0]
 8008a2a:	079f      	lsls	r7, r3, #30
 8008a2c:	d4ec      	bmi.n	8008a08 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a2e:	f7fe fc2b 	bl	8007288 <HAL_GetTick>
 8008a32:	1b80      	subs	r0, r0, r6
 8008a34:	2802      	cmp	r0, #2
 8008a36:	d9f7      	bls.n	8008a28 <HAL_RCC_OscConfig+0x118>
 8008a38:	e7ab      	b.n	8008992 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8008a3a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008a3c:	f7fe fc24 	bl	8007288 <HAL_GetTick>
 8008a40:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a42:	6823      	ldr	r3, [r4, #0]
 8008a44:	0798      	lsls	r0, r3, #30
 8008a46:	f57f af6d 	bpl.w	8008924 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a4a:	f7fe fc1d 	bl	8007288 <HAL_GetTick>
 8008a4e:	1b80      	subs	r0, r0, r6
 8008a50:	2802      	cmp	r0, #2
 8008a52:	d9f6      	bls.n	8008a42 <HAL_RCC_OscConfig+0x132>
 8008a54:	e79d      	b.n	8008992 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008a56:	69aa      	ldr	r2, [r5, #24]
 8008a58:	4e4a      	ldr	r6, [pc, #296]	@ (8008b84 <HAL_RCC_OscConfig+0x274>)
 8008a5a:	4b4b      	ldr	r3, [pc, #300]	@ (8008b88 <HAL_RCC_OscConfig+0x278>)
 8008a5c:	b1e2      	cbz	r2, 8008a98 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8008a64:	f7fe fc10 	bl	8007288 <HAL_GetTick>
 8008a68:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a6a:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8008a6c:	079b      	lsls	r3, r3, #30
 8008a6e:	d50d      	bpl.n	8008a8c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008a70:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8008a74:	4b45      	ldr	r3, [pc, #276]	@ (8008b8c <HAL_RCC_OscConfig+0x27c>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a7c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8008a7e:	bf00      	nop
  }
  while (Delay --);
 8008a80:	9b01      	ldr	r3, [sp, #4]
 8008a82:	1e5a      	subs	r2, r3, #1
 8008a84:	9201      	str	r2, [sp, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1f9      	bne.n	8008a7e <HAL_RCC_OscConfig+0x16e>
 8008a8a:	e74f      	b.n	800892c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a8c:	f7fe fbfc 	bl	8007288 <HAL_GetTick>
 8008a90:	1b00      	subs	r0, r0, r4
 8008a92:	2802      	cmp	r0, #2
 8008a94:	d9e9      	bls.n	8008a6a <HAL_RCC_OscConfig+0x15a>
 8008a96:	e77c      	b.n	8008992 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8008a98:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8008a9c:	f7fe fbf4 	bl	8007288 <HAL_GetTick>
 8008aa0:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008aa2:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8008aa4:	079f      	lsls	r7, r3, #30
 8008aa6:	f57f af41 	bpl.w	800892c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008aaa:	f7fe fbed 	bl	8007288 <HAL_GetTick>
 8008aae:	1b00      	subs	r0, r0, r4
 8008ab0:	2802      	cmp	r0, #2
 8008ab2:	d9f6      	bls.n	8008aa2 <HAL_RCC_OscConfig+0x192>
 8008ab4:	e76d      	b.n	8008992 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ab6:	4c33      	ldr	r4, [pc, #204]	@ (8008b84 <HAL_RCC_OscConfig+0x274>)
 8008ab8:	69e3      	ldr	r3, [r4, #28]
 8008aba:	00d8      	lsls	r0, r3, #3
 8008abc:	d424      	bmi.n	8008b08 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8008abe:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ac0:	69e3      	ldr	r3, [r4, #28]
 8008ac2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ac6:	61e3      	str	r3, [r4, #28]
 8008ac8:	69e3      	ldr	r3, [r4, #28]
 8008aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ad2:	4e2f      	ldr	r6, [pc, #188]	@ (8008b90 <HAL_RCC_OscConfig+0x280>)
 8008ad4:	6833      	ldr	r3, [r6, #0]
 8008ad6:	05d9      	lsls	r1, r3, #23
 8008ad8:	d518      	bpl.n	8008b0c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ada:	68eb      	ldr	r3, [r5, #12]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d126      	bne.n	8008b2e <HAL_RCC_OscConfig+0x21e>
 8008ae0:	6a23      	ldr	r3, [r4, #32]
 8008ae2:	f043 0301 	orr.w	r3, r3, #1
 8008ae6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8008ae8:	f7fe fbce 	bl	8007288 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008aec:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8008af0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008af2:	6a23      	ldr	r3, [r4, #32]
 8008af4:	079b      	lsls	r3, r3, #30
 8008af6:	d53f      	bpl.n	8008b78 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8008af8:	2f00      	cmp	r7, #0
 8008afa:	f43f af1b 	beq.w	8008934 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008afe:	69e3      	ldr	r3, [r4, #28]
 8008b00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b04:	61e3      	str	r3, [r4, #28]
 8008b06:	e715      	b.n	8008934 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8008b08:	2700      	movs	r7, #0
 8008b0a:	e7e2      	b.n	8008ad2 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008b0c:	6833      	ldr	r3, [r6, #0]
 8008b0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b12:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8008b14:	f7fe fbb8 	bl	8007288 <HAL_GetTick>
 8008b18:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b1a:	6833      	ldr	r3, [r6, #0]
 8008b1c:	05da      	lsls	r2, r3, #23
 8008b1e:	d4dc      	bmi.n	8008ada <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b20:	f7fe fbb2 	bl	8007288 <HAL_GetTick>
 8008b24:	eba0 0008 	sub.w	r0, r0, r8
 8008b28:	2864      	cmp	r0, #100	@ 0x64
 8008b2a:	d9f6      	bls.n	8008b1a <HAL_RCC_OscConfig+0x20a>
 8008b2c:	e731      	b.n	8008992 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b2e:	b9ab      	cbnz	r3, 8008b5c <HAL_RCC_OscConfig+0x24c>
 8008b30:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b32:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b36:	f023 0301 	bic.w	r3, r3, #1
 8008b3a:	6223      	str	r3, [r4, #32]
 8008b3c:	6a23      	ldr	r3, [r4, #32]
 8008b3e:	f023 0304 	bic.w	r3, r3, #4
 8008b42:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8008b44:	f7fe fba0 	bl	8007288 <HAL_GetTick>
 8008b48:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b4a:	6a23      	ldr	r3, [r4, #32]
 8008b4c:	0798      	lsls	r0, r3, #30
 8008b4e:	d5d3      	bpl.n	8008af8 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b50:	f7fe fb9a 	bl	8007288 <HAL_GetTick>
 8008b54:	1b80      	subs	r0, r0, r6
 8008b56:	4540      	cmp	r0, r8
 8008b58:	d9f7      	bls.n	8008b4a <HAL_RCC_OscConfig+0x23a>
 8008b5a:	e71a      	b.n	8008992 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b5c:	2b05      	cmp	r3, #5
 8008b5e:	6a23      	ldr	r3, [r4, #32]
 8008b60:	d103      	bne.n	8008b6a <HAL_RCC_OscConfig+0x25a>
 8008b62:	f043 0304 	orr.w	r3, r3, #4
 8008b66:	6223      	str	r3, [r4, #32]
 8008b68:	e7ba      	b.n	8008ae0 <HAL_RCC_OscConfig+0x1d0>
 8008b6a:	f023 0301 	bic.w	r3, r3, #1
 8008b6e:	6223      	str	r3, [r4, #32]
 8008b70:	6a23      	ldr	r3, [r4, #32]
 8008b72:	f023 0304 	bic.w	r3, r3, #4
 8008b76:	e7b6      	b.n	8008ae6 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b78:	f7fe fb86 	bl	8007288 <HAL_GetTick>
 8008b7c:	1b80      	subs	r0, r0, r6
 8008b7e:	4540      	cmp	r0, r8
 8008b80:	d9b7      	bls.n	8008af2 <HAL_RCC_OscConfig+0x1e2>
 8008b82:	e706      	b.n	8008992 <HAL_RCC_OscConfig+0x82>
 8008b84:	40021000 	.word	0x40021000
 8008b88:	42420000 	.word	0x42420000
 8008b8c:	20000000 	.word	0x20000000
 8008b90:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b94:	4c2a      	ldr	r4, [pc, #168]	@ (8008c40 <HAL_RCC_OscConfig+0x330>)
 8008b96:	6862      	ldr	r2, [r4, #4]
 8008b98:	f002 020c 	and.w	r2, r2, #12
 8008b9c:	2a08      	cmp	r2, #8
 8008b9e:	d03e      	beq.n	8008c1e <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	4b27      	ldr	r3, [pc, #156]	@ (8008c44 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 8008ba6:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ba8:	d12c      	bne.n	8008c04 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8008baa:	f7fe fb6d 	bl	8007288 <HAL_GetTick>
 8008bae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008bb0:	6823      	ldr	r3, [r4, #0]
 8008bb2:	0199      	lsls	r1, r3, #6
 8008bb4:	d420      	bmi.n	8008bf8 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008bb6:	6a2b      	ldr	r3, [r5, #32]
 8008bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bbc:	d105      	bne.n	8008bca <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008bbe:	6862      	ldr	r2, [r4, #4]
 8008bc0:	68a9      	ldr	r1, [r5, #8]
 8008bc2:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008bc6:	430a      	orrs	r2, r1
 8008bc8:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008bca:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8008bcc:	6862      	ldr	r2, [r4, #4]
 8008bce:	430b      	orrs	r3, r1
 8008bd0:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8008bd4:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8008bd6:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008bd8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8008bda:	4b1a      	ldr	r3, [pc, #104]	@ (8008c44 <HAL_RCC_OscConfig+0x334>)
 8008bdc:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8008bde:	f7fe fb53 	bl	8007288 <HAL_GetTick>
 8008be2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008be4:	6823      	ldr	r3, [r4, #0]
 8008be6:	019a      	lsls	r2, r3, #6
 8008be8:	f53f aea8 	bmi.w	800893c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bec:	f7fe fb4c 	bl	8007288 <HAL_GetTick>
 8008bf0:	1b40      	subs	r0, r0, r5
 8008bf2:	2802      	cmp	r0, #2
 8008bf4:	d9f6      	bls.n	8008be4 <HAL_RCC_OscConfig+0x2d4>
 8008bf6:	e6cc      	b.n	8008992 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bf8:	f7fe fb46 	bl	8007288 <HAL_GetTick>
 8008bfc:	1b80      	subs	r0, r0, r6
 8008bfe:	2802      	cmp	r0, #2
 8008c00:	d9d6      	bls.n	8008bb0 <HAL_RCC_OscConfig+0x2a0>
 8008c02:	e6c6      	b.n	8008992 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8008c04:	f7fe fb40 	bl	8007288 <HAL_GetTick>
 8008c08:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008c0a:	6823      	ldr	r3, [r4, #0]
 8008c0c:	019b      	lsls	r3, r3, #6
 8008c0e:	f57f ae95 	bpl.w	800893c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c12:	f7fe fb39 	bl	8007288 <HAL_GetTick>
 8008c16:	1b40      	subs	r0, r0, r5
 8008c18:	2802      	cmp	r0, #2
 8008c1a:	d9f6      	bls.n	8008c0a <HAL_RCC_OscConfig+0x2fa>
 8008c1c:	e6b9      	b.n	8008992 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	f43f aea2 	beq.w	8008968 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8008c24:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c26:	6a2b      	ldr	r3, [r5, #32]
 8008c28:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	f47f ae9b 	bne.w	8008968 <HAL_RCC_OscConfig+0x58>
 8008c32:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008c34:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c38:	1ac0      	subs	r0, r0, r3
 8008c3a:	bf18      	it	ne
 8008c3c:	2001      	movne	r0, #1
 8008c3e:	e6a9      	b.n	8008994 <HAL_RCC_OscConfig+0x84>
 8008c40:	40021000 	.word	0x40021000
 8008c44:	42420000 	.word	0x42420000

08008c48 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8008c48:	4a0d      	ldr	r2, [pc, #52]	@ (8008c80 <HAL_RCC_GetSysClockFreq+0x38>)
 8008c4a:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8008c4c:	f003 010c 	and.w	r1, r3, #12
 8008c50:	2908      	cmp	r1, #8
 8008c52:	d112      	bne.n	8008c7a <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008c54:	480b      	ldr	r0, [pc, #44]	@ (8008c84 <HAL_RCC_GetSysClockFreq+0x3c>)
 8008c56:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008c5a:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008c5c:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008c5e:	d509      	bpl.n	8008c74 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008c60:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008c62:	4a09      	ldr	r2, [pc, #36]	@ (8008c88 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008c64:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008c68:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008c6a:	4a08      	ldr	r2, [pc, #32]	@ (8008c8c <HAL_RCC_GetSysClockFreq+0x44>)
 8008c6c:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008c6e:	fbb0 f0f3 	udiv	r0, r0, r3
 8008c72:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008c74:	4b06      	ldr	r3, [pc, #24]	@ (8008c90 <HAL_RCC_GetSysClockFreq+0x48>)
 8008c76:	4358      	muls	r0, r3
 8008c78:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8008c7a:	4803      	ldr	r0, [pc, #12]	@ (8008c88 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	40021000 	.word	0x40021000
 8008c84:	0800e608 	.word	0x0800e608
 8008c88:	007a1200 	.word	0x007a1200
 8008c8c:	0800e606 	.word	0x0800e606
 8008c90:	003d0900 	.word	0x003d0900

08008c94 <HAL_RCC_ClockConfig>:
{
 8008c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c98:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	b910      	cbnz	r0, 8008ca4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8008c9e:	2001      	movs	r0, #1
}
 8008ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ca4:	4a44      	ldr	r2, [pc, #272]	@ (8008db8 <HAL_RCC_ClockConfig+0x124>)
 8008ca6:	6813      	ldr	r3, [r2, #0]
 8008ca8:	f003 0307 	and.w	r3, r3, #7
 8008cac:	428b      	cmp	r3, r1
 8008cae:	d328      	bcc.n	8008d02 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cb0:	6821      	ldr	r1, [r4, #0]
 8008cb2:	078e      	lsls	r6, r1, #30
 8008cb4:	d430      	bmi.n	8008d18 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cb6:	07ca      	lsls	r2, r1, #31
 8008cb8:	d443      	bmi.n	8008d42 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008cba:	4a3f      	ldr	r2, [pc, #252]	@ (8008db8 <HAL_RCC_ClockConfig+0x124>)
 8008cbc:	6813      	ldr	r3, [r2, #0]
 8008cbe:	f003 0307 	and.w	r3, r3, #7
 8008cc2:	42ab      	cmp	r3, r5
 8008cc4:	d865      	bhi.n	8008d92 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cc6:	6822      	ldr	r2, [r4, #0]
 8008cc8:	4d3c      	ldr	r5, [pc, #240]	@ (8008dbc <HAL_RCC_ClockConfig+0x128>)
 8008cca:	f012 0f04 	tst.w	r2, #4
 8008cce:	d16c      	bne.n	8008daa <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cd0:	0713      	lsls	r3, r2, #28
 8008cd2:	d506      	bpl.n	8008ce2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008cd4:	686b      	ldr	r3, [r5, #4]
 8008cd6:	6922      	ldr	r2, [r4, #16]
 8008cd8:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8008cdc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008ce0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008ce2:	f7ff ffb1 	bl	8008c48 <HAL_RCC_GetSysClockFreq>
 8008ce6:	686b      	ldr	r3, [r5, #4]
 8008ce8:	4a35      	ldr	r2, [pc, #212]	@ (8008dc0 <HAL_RCC_ClockConfig+0x12c>)
 8008cea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008cee:	5cd3      	ldrb	r3, [r2, r3]
 8008cf0:	40d8      	lsrs	r0, r3
 8008cf2:	4b34      	ldr	r3, [pc, #208]	@ (8008dc4 <HAL_RCC_ClockConfig+0x130>)
 8008cf4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8008cf6:	4b34      	ldr	r3, [pc, #208]	@ (8008dc8 <HAL_RCC_ClockConfig+0x134>)
 8008cf8:	6818      	ldr	r0, [r3, #0]
 8008cfa:	f7fe fa83 	bl	8007204 <HAL_InitTick>
  return HAL_OK;
 8008cfe:	2000      	movs	r0, #0
 8008d00:	e7ce      	b.n	8008ca0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d02:	6813      	ldr	r3, [r2, #0]
 8008d04:	f023 0307 	bic.w	r3, r3, #7
 8008d08:	430b      	orrs	r3, r1
 8008d0a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d0c:	6813      	ldr	r3, [r2, #0]
 8008d0e:	f003 0307 	and.w	r3, r3, #7
 8008d12:	428b      	cmp	r3, r1
 8008d14:	d1c3      	bne.n	8008c9e <HAL_RCC_ClockConfig+0xa>
 8008d16:	e7cb      	b.n	8008cb0 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d18:	4b28      	ldr	r3, [pc, #160]	@ (8008dbc <HAL_RCC_ClockConfig+0x128>)
 8008d1a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008d1e:	bf1e      	ittt	ne
 8008d20:	685a      	ldrne	r2, [r3, #4]
 8008d22:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8008d26:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d28:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d2a:	bf42      	ittt	mi
 8008d2c:	685a      	ldrmi	r2, [r3, #4]
 8008d2e:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8008d32:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d34:	685a      	ldr	r2, [r3, #4]
 8008d36:	68a0      	ldr	r0, [r4, #8]
 8008d38:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8008d3c:	4302      	orrs	r2, r0
 8008d3e:	605a      	str	r2, [r3, #4]
 8008d40:	e7b9      	b.n	8008cb6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d42:	6862      	ldr	r2, [r4, #4]
 8008d44:	4e1d      	ldr	r6, [pc, #116]	@ (8008dbc <HAL_RCC_ClockConfig+0x128>)
 8008d46:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d48:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d4a:	d11a      	bne.n	8008d82 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d4c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d50:	d0a5      	beq.n	8008c9e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d52:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d54:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d58:	f023 0303 	bic.w	r3, r3, #3
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8008d60:	f7fe fa92 	bl	8007288 <HAL_GetTick>
 8008d64:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d66:	6873      	ldr	r3, [r6, #4]
 8008d68:	6862      	ldr	r2, [r4, #4]
 8008d6a:	f003 030c 	and.w	r3, r3, #12
 8008d6e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008d72:	d0a2      	beq.n	8008cba <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d74:	f7fe fa88 	bl	8007288 <HAL_GetTick>
 8008d78:	1bc0      	subs	r0, r0, r7
 8008d7a:	4540      	cmp	r0, r8
 8008d7c:	d9f3      	bls.n	8008d66 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8008d7e:	2003      	movs	r0, #3
 8008d80:	e78e      	b.n	8008ca0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d82:	2a02      	cmp	r2, #2
 8008d84:	d102      	bne.n	8008d8c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d86:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8008d8a:	e7e1      	b.n	8008d50 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d8c:	f013 0f02 	tst.w	r3, #2
 8008d90:	e7de      	b.n	8008d50 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d92:	6813      	ldr	r3, [r2, #0]
 8008d94:	f023 0307 	bic.w	r3, r3, #7
 8008d98:	432b      	orrs	r3, r5
 8008d9a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d9c:	6813      	ldr	r3, [r2, #0]
 8008d9e:	f003 0307 	and.w	r3, r3, #7
 8008da2:	42ab      	cmp	r3, r5
 8008da4:	f47f af7b 	bne.w	8008c9e <HAL_RCC_ClockConfig+0xa>
 8008da8:	e78d      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008daa:	686b      	ldr	r3, [r5, #4]
 8008dac:	68e1      	ldr	r1, [r4, #12]
 8008dae:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008db2:	430b      	orrs	r3, r1
 8008db4:	606b      	str	r3, [r5, #4]
 8008db6:	e78b      	b.n	8008cd0 <HAL_RCC_ClockConfig+0x3c>
 8008db8:	40022000 	.word	0x40022000
 8008dbc:	40021000 	.word	0x40021000
 8008dc0:	0800e418 	.word	0x0800e418
 8008dc4:	20000000 	.word	0x20000000
 8008dc8:	20000010 	.word	0x20000010

08008dcc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008dcc:	4b04      	ldr	r3, [pc, #16]	@ (8008de0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8008dce:	4a05      	ldr	r2, [pc, #20]	@ (8008de4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008dd6:	5cd3      	ldrb	r3, [r2, r3]
 8008dd8:	4a03      	ldr	r2, [pc, #12]	@ (8008de8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008dda:	6810      	ldr	r0, [r2, #0]
}
 8008ddc:	40d8      	lsrs	r0, r3
 8008dde:	4770      	bx	lr
 8008de0:	40021000 	.word	0x40021000
 8008de4:	0800e410 	.word	0x0800e410
 8008de8:	20000000 	.word	0x20000000

08008dec <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008dec:	4b04      	ldr	r3, [pc, #16]	@ (8008e00 <HAL_RCC_GetPCLK2Freq+0x14>)
 8008dee:	4a05      	ldr	r2, [pc, #20]	@ (8008e04 <HAL_RCC_GetPCLK2Freq+0x18>)
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8008df6:	5cd3      	ldrb	r3, [r2, r3]
 8008df8:	4a03      	ldr	r2, [pc, #12]	@ (8008e08 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8008dfa:	6810      	ldr	r0, [r2, #0]
}
 8008dfc:	40d8      	lsrs	r0, r3
 8008dfe:	4770      	bx	lr
 8008e00:	40021000 	.word	0x40021000
 8008e04:	0800e410 	.word	0x0800e410
 8008e08:	20000000 	.word	0x20000000

08008e0c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008e0c:	6803      	ldr	r3, [r0, #0]
{
 8008e0e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008e12:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008e14:	07d8      	lsls	r0, r3, #31
 8008e16:	d521      	bpl.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e18:	4c36      	ldr	r4, [pc, #216]	@ (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008e1a:	69e3      	ldr	r3, [r4, #28]
 8008e1c:	00d9      	lsls	r1, r3, #3
 8008e1e:	d42b      	bmi.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8008e20:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e22:	69e3      	ldr	r3, [r4, #28]
 8008e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e28:	61e3      	str	r3, [r4, #28]
 8008e2a:	69e3      	ldr	r3, [r4, #28]
 8008e2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e30:	9301      	str	r3, [sp, #4]
 8008e32:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e34:	4f30      	ldr	r7, [pc, #192]	@ (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	05da      	lsls	r2, r3, #23
 8008e3a:	d51f      	bpl.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008e3c:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008e3e:	686a      	ldr	r2, [r5, #4]
 8008e40:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8008e44:	d12e      	bne.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e46:	6a23      	ldr	r3, [r4, #32]
 8008e48:	686a      	ldr	r2, [r5, #4]
 8008e4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008e52:	b11e      	cbz	r6, 8008e5c <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e54:	69e3      	ldr	r3, [r4, #28]
 8008e56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e5a:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008e5c:	682a      	ldr	r2, [r5, #0]
 8008e5e:	0791      	lsls	r1, r2, #30
 8008e60:	d506      	bpl.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008e62:	4924      	ldr	r1, [pc, #144]	@ (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008e64:	68a8      	ldr	r0, [r5, #8]
 8008e66:	684b      	ldr	r3, [r1, #4]
 8008e68:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8008e6c:	4303      	orrs	r3, r0
 8008e6e:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008e70:	06d3      	lsls	r3, r2, #27
 8008e72:	d436      	bmi.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008e74:	2000      	movs	r0, #0
 8008e76:	e012      	b.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 8008e78:	2600      	movs	r6, #0
 8008e7a:	e7db      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e82:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8008e84:	f7fe fa00 	bl	8007288 <HAL_GetTick>
 8008e88:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	05db      	lsls	r3, r3, #23
 8008e8e:	d4d5      	bmi.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e90:	f7fe f9fa 	bl	8007288 <HAL_GetTick>
 8008e94:	eba0 0008 	sub.w	r0, r0, r8
 8008e98:	2864      	cmp	r0, #100	@ 0x64
 8008e9a:	d9f6      	bls.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 8008e9c:	2003      	movs	r0, #3
}
 8008e9e:	b002      	add	sp, #8
 8008ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008ea4:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d0cc      	beq.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8008eac:	2001      	movs	r0, #1
 8008eae:	4a13      	ldr	r2, [pc, #76]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008eb0:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8008eb2:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008eb6:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008eb8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008ebc:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008ebe:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 8008ec2:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008ec4:	d5bf      	bpl.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8008ec6:	f7fe f9df 	bl	8007288 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008eca:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8008ece:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ed0:	6a23      	ldr	r3, [r4, #32]
 8008ed2:	0798      	lsls	r0, r3, #30
 8008ed4:	d4b7      	bmi.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ed6:	f7fe f9d7 	bl	8007288 <HAL_GetTick>
 8008eda:	1bc0      	subs	r0, r0, r7
 8008edc:	4540      	cmp	r0, r8
 8008ede:	d9f7      	bls.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8008ee0:	e7dc      	b.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008ee2:	4a04      	ldr	r2, [pc, #16]	@ (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008ee4:	68e9      	ldr	r1, [r5, #12]
 8008ee6:	6853      	ldr	r3, [r2, #4]
 8008ee8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8008eec:	430b      	orrs	r3, r1
 8008eee:	6053      	str	r3, [r2, #4]
 8008ef0:	e7c0      	b.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8008ef2:	bf00      	nop
 8008ef4:	40021000 	.word	0x40021000
 8008ef8:	40007000 	.word	0x40007000
 8008efc:	42420000 	.word	0x42420000

08008f00 <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8008f00:	2802      	cmp	r0, #2
{
 8008f02:	b508      	push	{r3, lr}
  switch (PeriphClk)
 8008f04:	d044      	beq.n	8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8008f06:	2810      	cmp	r0, #16
 8008f08:	d003      	beq.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8008f0a:	2801      	cmp	r0, #1
 8008f0c:	d022      	beq.n	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t temp_reg = 0U, frequency = 0U;
 8008f0e:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8008f10:	e034      	b.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      temp_reg = RCC->CFGR;
 8008f12:	4b25      	ldr	r3, [pc, #148]	@ (8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8008f14:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8008f16:	6818      	ldr	r0, [r3, #0]
 8008f18:	f010 7080 	ands.w	r0, r0, #16777216	@ 0x1000000
 8008f1c:	d02e      	beq.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008f1e:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8008f22:	4822      	ldr	r0, [pc, #136]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008f24:	03d2      	lsls	r2, r2, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008f26:	bf48      	it	mi
 8008f28:	685a      	ldrmi	r2, [r3, #4]
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008f2a:	5c40      	ldrb	r0, [r0, r1]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008f2c:	bf41      	itttt	mi
 8008f2e:	4920      	ldrmi	r1, [pc, #128]	@ (8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008f30:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8008f34:	5c89      	ldrbmi	r1, [r1, r2]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8008f36:	4a1f      	ldrmi	r2, [pc, #124]	@ (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008f38:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8008f3a:	bf4c      	ite	mi
 8008f3c:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008f40:	4a1d      	ldrpl	r2, [pc, #116]	@ (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008f42:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008f44:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008f48:	d418      	bmi.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
          frequency = (pllclk * 2) / 3;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008f4e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8008f52:	e013      	b.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008f54:	f240 3102 	movw	r1, #770	@ 0x302
      temp_reg = RCC->BDCR;
 8008f58:	4a13      	ldr	r2, [pc, #76]	@ (8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8008f5a:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008f5c:	4019      	ands	r1, r3
 8008f5e:	f5b1 7f81 	cmp.w	r1, #258	@ 0x102
 8008f62:	d01e      	beq.n	8008fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008f64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f6c:	d107      	bne.n	8008f7e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        frequency = LSI_VALUE;
 8008f6e:	f649 4340 	movw	r3, #40000	@ 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008f72:	6a50      	ldr	r0, [r2, #36]	@ 0x24
        frequency = LSI_VALUE;
 8008f74:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 8008f78:	bf18      	it	ne
 8008f7a:	4618      	movne	r0, r3
}
 8008f7c:	bd08      	pop	{r3, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8008f7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f82:	d1c4      	bne.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0xe>
 8008f84:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8008f86:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8008f8a:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8008f8e:	e7f3      	b.n	8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008f90:	f7ff ff2c 	bl	8008dec <HAL_RCC_GetPCLK2Freq>
 8008f94:	4b04      	ldr	r3, [pc, #16]	@ (8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	005b      	lsls	r3, r3, #1
 8008fa0:	e7d5      	b.n	8008f4e <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
        frequency = LSE_VALUE;
 8008fa2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008fa6:	e7e9      	b.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8008fa8:	40021000 	.word	0x40021000
 8008fac:	0800e61a 	.word	0x0800e61a
 8008fb0:	0800e618 	.word	0x0800e618
 8008fb4:	007a1200 	.word	0x007a1200
 8008fb8:	003d0900 	.word	0x003d0900

08008fbc <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008fbc:	b538      	push	{r3, r4, r5, lr}
 8008fbe:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  tickstart = HAL_GetTick();
 8008fc0:	f7fe f962 	bl	8007288 <HAL_GetTick>
 8008fc4:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008fc6:	6823      	ldr	r3, [r4, #0]
 8008fc8:	685a      	ldr	r2, [r3, #4]
 8008fca:	0692      	lsls	r2, r2, #26
 8008fcc:	d505      	bpl.n	8008fda <RTC_EnterInitMode+0x1e>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);


  return HAL_OK;
 8008fce:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008fd0:	685a      	ldr	r2, [r3, #4]
 8008fd2:	f042 0210 	orr.w	r2, r2, #16
 8008fd6:	605a      	str	r2, [r3, #4]
}
 8008fd8:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008fda:	f7fe f955 	bl	8007288 <HAL_GetTick>
 8008fde:	1b40      	subs	r0, r0, r5
 8008fe0:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008fe4:	d9ef      	bls.n	8008fc6 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8008fe6:	2003      	movs	r0, #3
 8008fe8:	e7f6      	b.n	8008fd8 <RTC_EnterInitMode+0x1c>

08008fea <RTC_ExitInitMode>:
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fea:	6802      	ldr	r2, [r0, #0]
{
 8008fec:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fee:	6853      	ldr	r3, [r2, #4]
{
 8008ff0:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ff2:	f023 0310 	bic.w	r3, r3, #16
 8008ff6:	6053      	str	r3, [r2, #4]

  tickstart = HAL_GetTick();
 8008ff8:	f7fe f946 	bl	8007288 <HAL_GetTick>
 8008ffc:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	069b      	lsls	r3, r3, #26
 8009004:	d501      	bpl.n	800900a <RTC_ExitInitMode+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8009006:	2000      	movs	r0, #0
}
 8009008:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800900a:	f7fe f93d 	bl	8007288 <HAL_GetTick>
 800900e:	1b40      	subs	r0, r0, r5
 8009010:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009014:	d9f3      	bls.n	8008ffe <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8009016:	2003      	movs	r0, #3
 8009018:	e7f6      	b.n	8009008 <RTC_ExitInitMode+0x1e>

0800901a <HAL_RTC_WaitForSynchro>:
{
 800901a:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 800901c:	4604      	mov	r4, r0
 800901e:	b1a8      	cbz	r0, 800904c <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8009020:	6802      	ldr	r2, [r0, #0]
 8009022:	6853      	ldr	r3, [r2, #4]
 8009024:	f023 0308 	bic.w	r3, r3, #8
 8009028:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 800902a:	f7fe f92d 	bl	8007288 <HAL_GetTick>
 800902e:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	071b      	lsls	r3, r3, #28
 8009036:	d501      	bpl.n	800903c <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8009038:	2000      	movs	r0, #0
}
 800903a:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800903c:	f7fe f924 	bl	8007288 <HAL_GetTick>
 8009040:	1b40      	subs	r0, r0, r5
 8009042:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009046:	d9f3      	bls.n	8009030 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8009048:	2003      	movs	r0, #3
 800904a:	e7f6      	b.n	800903a <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 800904c:	2001      	movs	r0, #1
 800904e:	e7f4      	b.n	800903a <HAL_RTC_WaitForSynchro+0x20>

08009050 <HAL_RTC_Init>:
{
 8009050:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8009052:	4604      	mov	r4, r0
 8009054:	b170      	cbz	r0, 8009074 <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009056:	7c43      	ldrb	r3, [r0, #17]
 8009058:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800905c:	b913      	cbnz	r3, 8009064 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 800905e:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8009060:	f7fd fd5a 	bl	8006b18 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009064:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009066:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009068:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800906a:	f7ff ffd6 	bl	800901a <HAL_RTC_WaitForSynchro>
 800906e:	b118      	cbz	r0, 8009078 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009070:	2304      	movs	r3, #4
 8009072:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8009074:	2001      	movs	r0, #1
}
 8009076:	bd10      	pop	{r4, pc}
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009078:	4620      	mov	r0, r4
 800907a:	f7ff ff9f 	bl	8008fbc <RTC_EnterInitMode>
 800907e:	2800      	cmp	r0, #0
 8009080:	d1f6      	bne.n	8009070 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8009082:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8009084:	68a1      	ldr	r1, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8009086:	6853      	ldr	r3, [r2, #4]
 8009088:	f023 0307 	bic.w	r3, r3, #7
 800908c:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800908e:	4a12      	ldr	r2, [pc, #72]	@ (80090d8 <HAL_RTC_Init+0x88>)
 8009090:	b119      	cbz	r1, 800909a <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8009092:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8009094:	f023 0301 	bic.w	r3, r3, #1
 8009098:	6313      	str	r3, [r2, #48]	@ 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800909a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800909c:	f423 7360 	bic.w	r3, r3, #896	@ 0x380
 80090a0:	430b      	orrs	r3, r1
 80090a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80090a4:	6860      	ldr	r0, [r4, #4]
 80090a6:	1c43      	adds	r3, r0, #1
 80090a8:	d105      	bne.n	80090b6 <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80090aa:	2001      	movs	r0, #1
 80090ac:	f7ff ff28 	bl	8008f00 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 80090b0:	2800      	cmp	r0, #0
 80090b2:	d0dd      	beq.n	8009070 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 80090b4:	3801      	subs	r0, #1
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80090b6:	6823      	ldr	r3, [r4, #0]
 80090b8:	f3c0 4203 	ubfx	r2, r0, #16, #4
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80090bc:	b280      	uxth	r0, r0
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80090be:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80090c0:	60d8      	str	r0, [r3, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80090c2:	4620      	mov	r0, r4
 80090c4:	f7ff ff91 	bl	8008fea <RTC_ExitInitMode>
 80090c8:	2800      	cmp	r0, #0
 80090ca:	d1d1      	bne.n	8009070 <HAL_RTC_Init+0x20>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80090cc:	2301      	movs	r3, #1
 80090ce:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80090d0:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 80090d2:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 80090d4:	e7cf      	b.n	8009076 <HAL_RTC_Init+0x26>
 80090d6:	bf00      	nop
 80090d8:	40006c00 	.word	0x40006c00

080090dc <HAL_RTCEx_BKUPWrite>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
  tmp += (BackupRegister * 4U);
 80090dc:	0089      	lsls	r1, r1, #2
 80090de:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80090e2:	f501 41d8 	add.w	r1, r1, #27648	@ 0x6c00

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 80090e6:	b292      	uxth	r2, r2
 80090e8:	600a      	str	r2, [r1, #0]
}
 80090ea:	4770      	bx	lr

080090ec <HAL_RTCEx_BKUPRead>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
  backupregister += (BackupRegister * 4U);
 80090ec:	0089      	lsls	r1, r1, #2
 80090ee:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80090f2:	f501 41d8 	add.w	r1, r1, #27648	@ 0x6c00

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 80090f6:	6808      	ldr	r0, [r1, #0]

  /* Read the specified register */
  return pvalue;
}
 80090f8:	b280      	uxth	r0, r0
 80090fa:	4770      	bx	lr

080090fc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090fc:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fe:	f102 030c 	add.w	r3, r2, #12
 8009102:	e853 3f00 	ldrex	r3, [r3]
 8009106:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800910a:	320c      	adds	r2, #12
 800910c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8009110:	6802      	ldr	r2, [r0, #0]
 8009112:	2900      	cmp	r1, #0
 8009114:	d1f2      	bne.n	80090fc <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009116:	f102 0314 	add.w	r3, r2, #20
 800911a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800911e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009122:	f102 0c14 	add.w	ip, r2, #20
 8009126:	e84c 3100 	strex	r1, r3, [ip]
 800912a:	2900      	cmp	r1, #0
 800912c:	d1f3      	bne.n	8009116 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800912e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009130:	2b01      	cmp	r3, #1
 8009132:	d10b      	bne.n	800914c <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009134:	f102 030c 	add.w	r3, r2, #12
 8009138:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800913c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009140:	f102 0c0c 	add.w	ip, r2, #12
 8009144:	e84c 3100 	strex	r1, r3, [ip]
 8009148:	2900      	cmp	r1, #0
 800914a:	d1f3      	bne.n	8009134 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800914c:	2320      	movs	r3, #32
 800914e:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009152:	2300      	movs	r3, #0
 8009154:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8009156:	4770      	bx	lr

08009158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009158:	b510      	push	{r4, lr}
 800915a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800915c:	6803      	ldr	r3, [r0, #0]
 800915e:	68c1      	ldr	r1, [r0, #12]
 8009160:	691a      	ldr	r2, [r3, #16]
 8009162:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8009166:	430a      	orrs	r2, r1
 8009168:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800916a:	6882      	ldr	r2, [r0, #8]
 800916c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800916e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009170:	4302      	orrs	r2, r0
 8009172:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8009174:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 8009178:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800917c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800917e:	430a      	orrs	r2, r1
 8009180:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009182:	695a      	ldr	r2, [r3, #20]
 8009184:	69a1      	ldr	r1, [r4, #24]
 8009186:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800918a:	430a      	orrs	r2, r1
 800918c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800918e:	4a0e      	ldr	r2, [pc, #56]	@ (80091c8 <UART_SetConfig+0x70>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d115      	bne.n	80091c0 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009194:	f7ff fe2a 	bl	8008dec <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009198:	2319      	movs	r3, #25
 800919a:	4343      	muls	r3, r0
 800919c:	6862      	ldr	r2, [r4, #4]
 800919e:	6820      	ldr	r0, [r4, #0]
 80091a0:	0092      	lsls	r2, r2, #2
 80091a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80091a6:	2264      	movs	r2, #100	@ 0x64
 80091a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80091ac:	fb02 3311 	mls	r3, r2, r1, r3
 80091b0:	011b      	lsls	r3, r3, #4
 80091b2:	3332      	adds	r3, #50	@ 0x32
 80091b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80091b8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80091bc:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80091be:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80091c0:	f7ff fe04 	bl	8008dcc <HAL_RCC_GetPCLK1Freq>
 80091c4:	e7e8      	b.n	8009198 <UART_SetConfig+0x40>
 80091c6:	bf00      	nop
 80091c8:	40013800 	.word	0x40013800

080091cc <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 80091cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091ce:	4605      	mov	r5, r0
 80091d0:	460c      	mov	r4, r1
 80091d2:	4617      	mov	r7, r2
 80091d4:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091d6:	682a      	ldr	r2, [r5, #0]
 80091d8:	6813      	ldr	r3, [r2, #0]
 80091da:	ea34 0303 	bics.w	r3, r4, r3
 80091de:	d101      	bne.n	80091e4 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 80091e0:	2000      	movs	r0, #0
 80091e2:	e021      	b.n	8009228 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80091e4:	1c70      	adds	r0, r6, #1
 80091e6:	d0f7      	beq.n	80091d8 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091e8:	f7fe f84e 	bl	8007288 <HAL_GetTick>
 80091ec:	1bc0      	subs	r0, r0, r7
 80091ee:	4286      	cmp	r6, r0
 80091f0:	d31c      	bcc.n	800922c <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
 80091f2:	b1de      	cbz	r6, 800922c <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80091f4:	682b      	ldr	r3, [r5, #0]
 80091f6:	68da      	ldr	r2, [r3, #12]
 80091f8:	0751      	lsls	r1, r2, #29
 80091fa:	d5ec      	bpl.n	80091d6 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 80091fc:	2c80      	cmp	r4, #128	@ 0x80
 80091fe:	d0ea      	beq.n	80091d6 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8009200:	2c40      	cmp	r4, #64	@ 0x40
 8009202:	d0e8      	beq.n	80091d6 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	0712      	lsls	r2, r2, #28
 8009208:	d5e5      	bpl.n	80091d6 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
          __HAL_UART_CLEAR_OREFLAG(huart);
 800920a:	2400      	movs	r4, #0
 800920c:	9401      	str	r4, [sp, #4]
 800920e:	681a      	ldr	r2, [r3, #0]
          UART_EndRxTransfer(huart);
 8009210:	4628      	mov	r0, r5
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009212:	9201      	str	r2, [sp, #4]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	9301      	str	r3, [sp, #4]
 8009218:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 800921a:	f7ff ff6f 	bl	80090fc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800921e:	2308      	movs	r3, #8
          return HAL_ERROR;
 8009220:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009222:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8009224:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
}
 8009228:	b003      	add	sp, #12
 800922a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800922c:	2003      	movs	r0, #3
 800922e:	e7fb      	b.n	8009228 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>

08009230 <HAL_UART_Init>:
{
 8009230:	b510      	push	{r4, lr}
  if (huart == NULL)
 8009232:	4604      	mov	r4, r0
 8009234:	b348      	cbz	r0, 800928a <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8009236:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800923a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800923e:	b91b      	cbnz	r3, 8009248 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8009240:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8009244:	f7fd fd42 	bl	8006ccc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8009248:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800924a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800924c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8009250:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8009252:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8009254:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009258:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800925a:	f7ff ff7d 	bl	8009158 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800925e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009260:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009262:	691a      	ldr	r2, [r3, #16]
 8009264:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009268:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800926a:	695a      	ldr	r2, [r3, #20]
 800926c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009270:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8009272:	68da      	ldr	r2, [r3, #12]
 8009274:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009278:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800927a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800927c:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800927e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009282:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009286:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8009288:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800928a:	2001      	movs	r0, #1
 800928c:	e7fc      	b.n	8009288 <HAL_UART_Init+0x58>

0800928e <HAL_UART_DeInit>:
{
 800928e:	b510      	push	{r4, lr}
  if (huart == NULL)
 8009290:	4604      	mov	r4, r0
 8009292:	b1a0      	cbz	r0, 80092be <HAL_UART_DeInit+0x30>
  huart->gState = HAL_UART_STATE_BUSY;
 8009294:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8009296:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009298:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800929c:	68d3      	ldr	r3, [r2, #12]
 800929e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80092a2:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 80092a4:	f7fd fd6e 	bl	8006d84 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092a8:	2000      	movs	r0, #0
 80092aa:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(huart);
 80092ac:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80092b0:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 80092b4:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092b8:	6320      	str	r0, [r4, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092ba:	6360      	str	r0, [r4, #52]	@ 0x34
}
 80092bc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80092be:	2001      	movs	r0, #1
 80092c0:	e7fc      	b.n	80092bc <HAL_UART_DeInit+0x2e>

080092c2 <HAL_UART_Transmit>:
{
 80092c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092c6:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80092c8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80092cc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80092ce:	2b20      	cmp	r3, #32
{
 80092d0:	460e      	mov	r6, r1
 80092d2:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80092d4:	d13f      	bne.n	8009356 <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 80092d6:	2900      	cmp	r1, #0
 80092d8:	d03f      	beq.n	800935a <HAL_UART_Transmit+0x98>
 80092da:	2a00      	cmp	r2, #0
 80092dc:	d03d      	beq.n	800935a <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092de:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092e0:	2500      	movs	r5, #0
 80092e2:	6445      	str	r5, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092e4:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 80092e8:	f7fd ffce 	bl	8007288 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092ec:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80092ee:	4681      	mov	r9, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferSize = Size;
 80092f4:	84a7      	strh	r7, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 80092f6:	84e7      	strh	r7, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092f8:	d103      	bne.n	8009302 <HAL_UART_Transmit+0x40>
 80092fa:	6923      	ldr	r3, [r4, #16]
 80092fc:	b90b      	cbnz	r3, 8009302 <HAL_UART_Transmit+0x40>
 80092fe:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8009300:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8009302:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8009304:	b29b      	uxth	r3, r3
 8009306:	b953      	cbnz	r3, 800931e <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009308:	4643      	mov	r3, r8
 800930a:	464a      	mov	r2, r9
 800930c:	2140      	movs	r1, #64	@ 0x40
 800930e:	4620      	mov	r0, r4
 8009310:	f7ff ff5c 	bl	80091cc <UART_WaitOnFlagUntilTimeout.constprop.0>
 8009314:	2320      	movs	r3, #32
 8009316:	b950      	cbnz	r0, 800932e <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 8009318:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 800931c:	e00a      	b.n	8009334 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800931e:	4643      	mov	r3, r8
 8009320:	464a      	mov	r2, r9
 8009322:	2180      	movs	r1, #128	@ 0x80
 8009324:	4620      	mov	r0, r4
 8009326:	f7ff ff51 	bl	80091cc <UART_WaitOnFlagUntilTimeout.constprop.0>
 800932a:	b128      	cbz	r0, 8009338 <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 800932c:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800932e:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8009330:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 8009334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009338:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800933a:	b94e      	cbnz	r6, 8009350 <HAL_UART_Transmit+0x8e>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800933c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8009340:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009344:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8009346:	8ce1      	ldrh	r1, [r4, #38]	@ 0x26
 8009348:	3901      	subs	r1, #1
 800934a:	b289      	uxth	r1, r1
 800934c:	84e1      	strh	r1, [r4, #38]	@ 0x26
 800934e:	e7d8      	b.n	8009302 <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009350:	f816 3b01 	ldrb.w	r3, [r6], #1
 8009354:	e7f6      	b.n	8009344 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8009356:	2002      	movs	r0, #2
 8009358:	e7ec      	b.n	8009334 <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 800935a:	2001      	movs	r0, #1
 800935c:	e7ea      	b.n	8009334 <HAL_UART_Transmit+0x72>

0800935e <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 800935e:	4770      	bx	lr

08009360 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8009360:	4770      	bx	lr

08009362 <UART_DMAError>:
{
 8009362:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009364:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009366:	6803      	ldr	r3, [r0, #0]
 8009368:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800936a:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 800936e:	2921      	cmp	r1, #33	@ 0x21
 8009370:	d112      	bne.n	8009398 <UART_DMAError+0x36>
 8009372:	0612      	lsls	r2, r2, #24
 8009374:	d510      	bpl.n	8009398 <UART_DMAError+0x36>
    huart->TxXferCount = 0x00U;
 8009376:	2200      	movs	r2, #0
 8009378:	84c2      	strh	r2, [r0, #38]	@ 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937a:	f103 020c 	add.w	r2, r3, #12
 800937e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009382:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009386:	f103 0c0c 	add.w	ip, r3, #12
 800938a:	e84c 2100 	strex	r1, r2, [ip]
 800938e:	2900      	cmp	r1, #0
 8009390:	d1f3      	bne.n	800937a <UART_DMAError+0x18>
  huart->gState = HAL_UART_STATE_READY;
 8009392:	2220      	movs	r2, #32
 8009394:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009398:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800939a:	f890 2042 	ldrb.w	r2, [r0, #66]	@ 0x42
 800939e:	2a22      	cmp	r2, #34	@ 0x22
 80093a0:	d105      	bne.n	80093ae <UART_DMAError+0x4c>
 80093a2:	065b      	lsls	r3, r3, #25
 80093a4:	d503      	bpl.n	80093ae <UART_DMAError+0x4c>
    huart->RxXferCount = 0x00U;
 80093a6:	2300      	movs	r3, #0
 80093a8:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80093aa:	f7ff fea7 	bl	80090fc <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80093ae:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80093b0:	f043 0310 	orr.w	r3, r3, #16
 80093b4:	6443      	str	r3, [r0, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 80093b6:	f7fd fc86 	bl	8006cc6 <HAL_UART_ErrorCallback>
}
 80093ba:	bd08      	pop	{r3, pc}

080093bc <UART_DMAAbortOnError>:
{
 80093bc:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80093be:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093c0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 80093c2:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80093c4:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 80093c6:	f7fd fc7e 	bl	8006cc6 <HAL_UART_ErrorCallback>
}
 80093ca:	bd08      	pop	{r3, pc}

080093cc <HAL_UARTEx_RxEventCallback>:
}
 80093cc:	4770      	bx	lr

080093ce <UART_DMARxHalfCplt>:
{
 80093ce:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80093d0:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093d2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80093d4:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093d6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d104      	bne.n	80093e6 <UART_DMARxHalfCplt+0x18>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80093dc:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80093de:	0849      	lsrs	r1, r1, #1
 80093e0:	f7ff fff4 	bl	80093cc <HAL_UARTEx_RxEventCallback>
}
 80093e4:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 80093e6:	f7ff ffbb 	bl	8009360 <HAL_UART_RxHalfCpltCallback>
}
 80093ea:	e7fb      	b.n	80093e4 <UART_DMARxHalfCplt+0x16>

080093ec <UART_DMAReceiveCplt>:
{
 80093ec:	b508      	push	{r3, lr}
 80093ee:	4603      	mov	r3, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80093f0:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093f2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f013 0320 	ands.w	r3, r3, #32
 80093fa:	d137      	bne.n	800946c <UART_DMAReceiveCplt+0x80>
    huart->RxXferCount = 0U;
 80093fc:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093fe:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009400:	f102 030c 	add.w	r3, r2, #12
 8009404:	e853 3f00 	ldrex	r3, [r3]
 8009408:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940c:	320c      	adds	r2, #12
 800940e:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8009412:	6803      	ldr	r3, [r0, #0]
 8009414:	2900      	cmp	r1, #0
 8009416:	d1f2      	bne.n	80093fe <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009418:	f103 0214 	add.w	r2, r3, #20
 800941c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009420:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009424:	f103 0c14 	add.w	ip, r3, #20
 8009428:	e84c 2100 	strex	r1, r2, [ip]
 800942c:	2900      	cmp	r1, #0
 800942e:	d1f3      	bne.n	8009418 <UART_DMAReceiveCplt+0x2c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009430:	f103 0214 	add.w	r2, r3, #20
 8009434:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009438:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943c:	f103 0c14 	add.w	ip, r3, #20
 8009440:	e84c 2100 	strex	r1, r2, [ip]
 8009444:	2900      	cmp	r1, #0
 8009446:	d1f3      	bne.n	8009430 <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 8009448:	2220      	movs	r2, #32
 800944a:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800944e:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8009450:	2a01      	cmp	r2, #1
 8009452:	d10b      	bne.n	800946c <UART_DMAReceiveCplt+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009454:	f103 020c 	add.w	r2, r3, #12
 8009458:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800945c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009460:	f103 0c0c 	add.w	ip, r3, #12
 8009464:	e84c 2100 	strex	r1, r2, [ip]
 8009468:	2900      	cmp	r1, #0
 800946a:	d1f3      	bne.n	8009454 <UART_DMAReceiveCplt+0x68>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800946c:	2300      	movs	r3, #0
 800946e:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009470:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009472:	2b01      	cmp	r3, #1
 8009474:	d103      	bne.n	800947e <UART_DMAReceiveCplt+0x92>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009476:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8009478:	f7ff ffa8 	bl	80093cc <HAL_UARTEx_RxEventCallback>
}
 800947c:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 800947e:	f7fd fc23 	bl	8006cc8 <HAL_UART_RxCpltCallback>
}
 8009482:	e7fb      	b.n	800947c <UART_DMAReceiveCplt+0x90>

08009484 <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009484:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8009488:	b507      	push	{r0, r1, r2, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800948a:	2b22      	cmp	r3, #34	@ 0x22
 800948c:	d142      	bne.n	8009514 <UART_Receive_IT.isra.0+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800948e:	6881      	ldr	r1, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009490:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009492:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009496:	6a83      	ldr	r3, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009498:	d13f      	bne.n	800951a <UART_Receive_IT.isra.0+0x96>
 800949a:	6901      	ldr	r1, [r0, #16]
 800949c:	2900      	cmp	r1, #0
 800949e:	d13f      	bne.n	8009520 <UART_Receive_IT.isra.0+0x9c>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80094a0:	6852      	ldr	r2, [r2, #4]
 80094a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094a6:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 80094aa:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 80094ac:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 80094ae:	3b01      	subs	r3, #1
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d12d      	bne.n	8009514 <UART_Receive_IT.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80094b8:	6802      	ldr	r2, [r0, #0]
 80094ba:	68d1      	ldr	r1, [r2, #12]
 80094bc:	f021 0120 	bic.w	r1, r1, #32
 80094c0:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80094c2:	68d1      	ldr	r1, [r2, #12]
 80094c4:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 80094c8:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80094ca:	6951      	ldr	r1, [r2, #20]
 80094cc:	f021 0101 	bic.w	r1, r1, #1
 80094d0:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80094d2:	2220      	movs	r2, #32
 80094d4:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094d8:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094da:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80094dc:	2a01      	cmp	r2, #1
 80094de:	6802      	ldr	r2, [r0, #0]
 80094e0:	d128      	bne.n	8009534 <UART_Receive_IT.isra.0+0xb0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094e2:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e4:	f102 030c 	add.w	r3, r2, #12
 80094e8:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094ec:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f0:	f102 0c0c 	add.w	ip, r2, #12
 80094f4:	e84c 3100 	strex	r1, r3, [ip]
 80094f8:	2900      	cmp	r1, #0
 80094fa:	d1f3      	bne.n	80094e4 <UART_Receive_IT.isra.0+0x60>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80094fc:	6813      	ldr	r3, [r2, #0]
 80094fe:	06db      	lsls	r3, r3, #27
 8009500:	d505      	bpl.n	800950e <UART_Receive_IT.isra.0+0x8a>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009502:	9101      	str	r1, [sp, #4]
 8009504:	6813      	ldr	r3, [r2, #0]
 8009506:	9301      	str	r3, [sp, #4]
 8009508:	6853      	ldr	r3, [r2, #4]
 800950a:	9301      	str	r3, [sp, #4]
 800950c:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800950e:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8009510:	f7ff ff5c 	bl	80093cc <HAL_UARTEx_RxEventCallback>
}
 8009514:	b003      	add	sp, #12
 8009516:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800951a:	b939      	cbnz	r1, 800952c <UART_Receive_IT.isra.0+0xa8>
 800951c:	6901      	ldr	r1, [r0, #16]
 800951e:	b929      	cbnz	r1, 800952c <UART_Receive_IT.isra.0+0xa8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009520:	6852      	ldr	r2, [r2, #4]
 8009522:	b2d2      	uxtb	r2, r2
 8009524:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8009526:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009528:	3301      	adds	r3, #1
 800952a:	e7be      	b.n	80094aa <UART_Receive_IT.isra.0+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800952c:	6852      	ldr	r2, [r2, #4]
 800952e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009532:	e7f7      	b.n	8009524 <UART_Receive_IT.isra.0+0xa0>
        HAL_UART_RxCpltCallback(huart);
 8009534:	f7fd fbc8 	bl	8006cc8 <HAL_UART_RxCpltCallback>
 8009538:	e7ec      	b.n	8009514 <UART_Receive_IT.isra.0+0x90>
	...

0800953c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800953c:	6803      	ldr	r3, [r0, #0]
{
 800953e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009540:	681a      	ldr	r2, [r3, #0]
{
 8009542:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8009544:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009546:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009548:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800954a:	d108      	bne.n	800955e <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800954c:	0696      	lsls	r6, r2, #26
 800954e:	d568      	bpl.n	8009622 <HAL_UART_IRQHandler+0xe6>
 8009550:	068d      	lsls	r5, r1, #26
 8009552:	d566      	bpl.n	8009622 <HAL_UART_IRQHandler+0xe6>
}
 8009554:	b002      	add	sp, #8
 8009556:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800955a:	f7ff bf93 	b.w	8009484 <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800955e:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009562:	f401 7590 	and.w	r5, r1, #288	@ 0x120
 8009566:	4305      	orrs	r5, r0
 8009568:	d05b      	beq.n	8009622 <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800956a:	07d6      	lsls	r6, r2, #31
 800956c:	d505      	bpl.n	800957a <HAL_UART_IRQHandler+0x3e>
 800956e:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009570:	bf42      	ittt	mi
 8009572:	6c63      	ldrmi	r3, [r4, #68]	@ 0x44
 8009574:	f043 0301 	orrmi.w	r3, r3, #1
 8009578:	6463      	strmi	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800957a:	0753      	lsls	r3, r2, #29
 800957c:	d504      	bpl.n	8009588 <HAL_UART_IRQHandler+0x4c>
 800957e:	b118      	cbz	r0, 8009588 <HAL_UART_IRQHandler+0x4c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009580:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009582:	f043 0302 	orr.w	r3, r3, #2
 8009586:	6463      	str	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009588:	0796      	lsls	r6, r2, #30
 800958a:	d504      	bpl.n	8009596 <HAL_UART_IRQHandler+0x5a>
 800958c:	b118      	cbz	r0, 8009596 <HAL_UART_IRQHandler+0x5a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800958e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009590:	f043 0304 	orr.w	r3, r3, #4
 8009594:	6463      	str	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009596:	0715      	lsls	r5, r2, #28
 8009598:	d507      	bpl.n	80095aa <HAL_UART_IRQHandler+0x6e>
 800959a:	f001 0320 	and.w	r3, r1, #32
 800959e:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80095a0:	bf1e      	ittt	ne
 80095a2:	6c63      	ldrne	r3, [r4, #68]	@ 0x44
 80095a4:	f043 0308 	orrne.w	r3, r3, #8
 80095a8:	6463      	strne	r3, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095aa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d032      	beq.n	8009616 <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80095b0:	0692      	lsls	r2, r2, #26
 80095b2:	d504      	bpl.n	80095be <HAL_UART_IRQHandler+0x82>
 80095b4:	068b      	lsls	r3, r1, #26
 80095b6:	d502      	bpl.n	80095be <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 80095b8:	4620      	mov	r0, r4
 80095ba:	f7ff ff63 	bl	8009484 <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80095be:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 80095c0:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80095c2:	6973      	ldr	r3, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80095c4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80095c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80095ca:	f002 0208 	and.w	r2, r2, #8
 80095ce:	ea53 0502 	orrs.w	r5, r3, r2
 80095d2:	d022      	beq.n	800961a <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 80095d4:	f7ff fd92 	bl	80090fc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095d8:	6973      	ldr	r3, [r6, #20]
 80095da:	065e      	lsls	r6, r3, #25
 80095dc:	d518      	bpl.n	8009610 <HAL_UART_IRQHandler+0xd4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095de:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e0:	f102 0314 	add.w	r3, r2, #20
 80095e4:	e853 3f00 	ldrex	r3, [r3]
 80095e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ec:	3214      	adds	r2, #20
 80095ee:	e842 3100 	strex	r1, r3, [r2]
 80095f2:	2900      	cmp	r1, #0
 80095f4:	d1f3      	bne.n	80095de <HAL_UART_IRQHandler+0xa2>
          if (huart->hdmarx != NULL)
 80095f6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80095f8:	b150      	cbz	r0, 8009610 <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80095fa:	4b74      	ldr	r3, [pc, #464]	@ (80097cc <HAL_UART_IRQHandler+0x290>)
 80095fc:	6343      	str	r3, [r0, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80095fe:	f7fd ff89 	bl	8007514 <HAL_DMA_Abort_IT>
 8009602:	b140      	cbz	r0, 8009616 <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009604:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8009606:	6b43      	ldr	r3, [r0, #52]	@ 0x34
}
 8009608:	b002      	add	sp, #8
 800960a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800960e:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8009610:	4620      	mov	r0, r4
 8009612:	f7fd fb58 	bl	8006cc6 <HAL_UART_ErrorCallback>
}
 8009616:	b002      	add	sp, #8
 8009618:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800961a:	f7fd fb54 	bl	8006cc6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800961e:	6465      	str	r5, [r4, #68]	@ 0x44
 8009620:	e7f9      	b.n	8009616 <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009622:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8009624:	2801      	cmp	r0, #1
 8009626:	f040 8094 	bne.w	8009752 <HAL_UART_IRQHandler+0x216>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800962a:	06d5      	lsls	r5, r2, #27
 800962c:	f140 8091 	bpl.w	8009752 <HAL_UART_IRQHandler+0x216>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009630:	06c8      	lsls	r0, r1, #27
 8009632:	f140 808e 	bpl.w	8009752 <HAL_UART_IRQHandler+0x216>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009636:	2200      	movs	r2, #0
 8009638:	9201      	str	r2, [sp, #4]
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	9201      	str	r2, [sp, #4]
 800963e:	685a      	ldr	r2, [r3, #4]
 8009640:	9201      	str	r2, [sp, #4]
 8009642:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009644:	695a      	ldr	r2, [r3, #20]
 8009646:	0652      	lsls	r2, r2, #25
 8009648:	d54d      	bpl.n	80096e6 <HAL_UART_IRQHandler+0x1aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800964a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800964c:	680a      	ldr	r2, [r1, #0]
 800964e:	6852      	ldr	r2, [r2, #4]
 8009650:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8009652:	2a00      	cmp	r2, #0
 8009654:	d0df      	beq.n	8009616 <HAL_UART_IRQHandler+0xda>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009656:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
 8009658:	4290      	cmp	r0, r2
 800965a:	d9dc      	bls.n	8009616 <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 800965c:	85e2      	strh	r2, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800965e:	698a      	ldr	r2, [r1, #24]
 8009660:	2a20      	cmp	r2, #32
 8009662:	d036      	beq.n	80096d2 <HAL_UART_IRQHandler+0x196>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009664:	f103 020c 	add.w	r2, r3, #12
 8009668:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800966c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009670:	f103 000c 	add.w	r0, r3, #12
 8009674:	e840 2100 	strex	r1, r2, [r0]
 8009678:	2900      	cmp	r1, #0
 800967a:	d1f3      	bne.n	8009664 <HAL_UART_IRQHandler+0x128>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967c:	f103 0214 	add.w	r2, r3, #20
 8009680:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009684:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009688:	f103 0014 	add.w	r0, r3, #20
 800968c:	e840 2100 	strex	r1, r2, [r0]
 8009690:	2900      	cmp	r1, #0
 8009692:	d1f3      	bne.n	800967c <HAL_UART_IRQHandler+0x140>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009694:	f103 0214 	add.w	r2, r3, #20
 8009698:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800969c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a0:	f103 0014 	add.w	r0, r3, #20
 80096a4:	e840 2100 	strex	r1, r2, [r0]
 80096a8:	2900      	cmp	r1, #0
 80096aa:	d1f3      	bne.n	8009694 <HAL_UART_IRQHandler+0x158>
          huart->RxState = HAL_UART_STATE_READY;
 80096ac:	2220      	movs	r2, #32
 80096ae:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096b2:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b4:	f103 020c 	add.w	r2, r3, #12
 80096b8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096bc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c0:	f103 000c 	add.w	r0, r3, #12
 80096c4:	e840 2100 	strex	r1, r2, [r0]
 80096c8:	2900      	cmp	r1, #0
 80096ca:	d1f3      	bne.n	80096b4 <HAL_UART_IRQHandler+0x178>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80096cc:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80096ce:	f7fd ff01 	bl	80074d4 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80096d2:	2302      	movs	r3, #2
 80096d4:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80096d6:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80096d8:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80096da:	1ac9      	subs	r1, r1, r3
 80096dc:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80096de:	4620      	mov	r0, r4
 80096e0:	f7ff fe74 	bl	80093cc <HAL_UARTEx_RxEventCallback>
 80096e4:	e797      	b.n	8009616 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80096e6:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 80096e8:	8de0      	ldrh	r0, [r4, #46]	@ 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80096ea:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
      if ((huart->RxXferCount > 0U)
 80096ec:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80096ee:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 80096f0:	2800      	cmp	r0, #0
 80096f2:	d090      	beq.n	8009616 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80096f4:	1a89      	subs	r1, r1, r2
 80096f6:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80096f8:	2900      	cmp	r1, #0
 80096fa:	d08c      	beq.n	8009616 <HAL_UART_IRQHandler+0xda>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fc:	f103 020c 	add.w	r2, r3, #12
 8009700:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009704:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009708:	f103 050c 	add.w	r5, r3, #12
 800970c:	e845 2000 	strex	r0, r2, [r5]
 8009710:	2800      	cmp	r0, #0
 8009712:	d1f3      	bne.n	80096fc <HAL_UART_IRQHandler+0x1c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009714:	f103 0214 	add.w	r2, r3, #20
 8009718:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800971c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009720:	f103 0514 	add.w	r5, r3, #20
 8009724:	e845 2000 	strex	r0, r2, [r5]
 8009728:	2800      	cmp	r0, #0
 800972a:	d1f3      	bne.n	8009714 <HAL_UART_IRQHandler+0x1d8>
        huart->RxState = HAL_UART_STATE_READY;
 800972c:	2220      	movs	r2, #32
 800972e:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009732:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009734:	f103 020c 	add.w	r2, r3, #12
 8009738:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800973c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009740:	f103 050c 	add.w	r5, r3, #12
 8009744:	e845 2000 	strex	r0, r2, [r5]
 8009748:	2800      	cmp	r0, #0
 800974a:	d1f3      	bne.n	8009734 <HAL_UART_IRQHandler+0x1f8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800974c:	2302      	movs	r3, #2
 800974e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009750:	e7c5      	b.n	80096de <HAL_UART_IRQHandler+0x1a2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009752:	0616      	lsls	r6, r2, #24
 8009754:	d528      	bpl.n	80097a8 <HAL_UART_IRQHandler+0x26c>
 8009756:	060d      	lsls	r5, r1, #24
 8009758:	d526      	bpl.n	80097a8 <HAL_UART_IRQHandler+0x26c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800975a:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800975e:	2a21      	cmp	r2, #33	@ 0x21
 8009760:	f47f af59 	bne.w	8009616 <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009764:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009766:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009768:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800976c:	d117      	bne.n	800979e <HAL_UART_IRQHandler+0x262>
 800976e:	6921      	ldr	r1, [r4, #16]
 8009770:	b9a9      	cbnz	r1, 800979e <HAL_UART_IRQHandler+0x262>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009772:	f832 1b02 	ldrh.w	r1, [r2], #2
 8009776:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800977a:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800977c:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 800977e:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8009780:	3a01      	subs	r2, #1
 8009782:	b292      	uxth	r2, r2
 8009784:	84e2      	strh	r2, [r4, #38]	@ 0x26
 8009786:	2a00      	cmp	r2, #0
 8009788:	f47f af45 	bne.w	8009616 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800978c:	68da      	ldr	r2, [r3, #12]
 800978e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009792:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009794:	68da      	ldr	r2, [r3, #12]
 8009796:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800979a:	60da      	str	r2, [r3, #12]
 800979c:	e73b      	b.n	8009616 <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800979e:	1c51      	adds	r1, r2, #1
 80097a0:	6221      	str	r1, [r4, #32]
 80097a2:	7812      	ldrb	r2, [r2, #0]
 80097a4:	605a      	str	r2, [r3, #4]
 80097a6:	e7ea      	b.n	800977e <HAL_UART_IRQHandler+0x242>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80097a8:	0650      	lsls	r0, r2, #25
 80097aa:	f57f af34 	bpl.w	8009616 <HAL_UART_IRQHandler+0xda>
 80097ae:	064a      	lsls	r2, r1, #25
 80097b0:	f57f af31 	bpl.w	8009616 <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80097b4:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80097b6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80097b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80097bc:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80097be:	2320      	movs	r3, #32
 80097c0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 80097c4:	f7ff fdcb 	bl	800935e <HAL_UART_TxCpltCallback>
  return HAL_OK;
 80097c8:	e725      	b.n	8009616 <HAL_UART_IRQHandler+0xda>
 80097ca:	bf00      	nop
 80097cc:	080093bd 	.word	0x080093bd

080097d0 <UART_Start_Receive_DMA>:
{
 80097d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097d2:	4613      	mov	r3, r2
  huart->RxXferSize = Size;
 80097d4:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097d6:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097d8:	2222      	movs	r2, #34	@ 0x22
{
 80097da:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 80097dc:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097de:	6445      	str	r5, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097e0:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80097e4:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 80097e6:	4a1d      	ldr	r2, [pc, #116]	@ (800985c <UART_Start_Receive_DMA+0x8c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80097e8:	6826      	ldr	r6, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80097ea:	6282      	str	r2, [r0, #40]	@ 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80097ec:	4a1c      	ldr	r2, [pc, #112]	@ (8009860 <UART_Start_Receive_DMA+0x90>)
 80097ee:	62c2      	str	r2, [r0, #44]	@ 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80097f0:	4a1c      	ldr	r2, [pc, #112]	@ (8009864 <UART_Start_Receive_DMA+0x94>)
  huart->hdmarx->XferAbortCallback = NULL;
 80097f2:	e9c0 250c 	strd	r2, r5, [r0, #48]	@ 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80097f6:	460a      	mov	r2, r1
 80097f8:	1d31      	adds	r1, r6, #4
 80097fa:	f7fd fe2f 	bl	800745c <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 80097fe:	6823      	ldr	r3, [r4, #0]
 8009800:	9501      	str	r5, [sp, #4]
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	9201      	str	r2, [sp, #4]
 8009806:	685a      	ldr	r2, [r3, #4]
 8009808:	9201      	str	r2, [sp, #4]
 800980a:	9a01      	ldr	r2, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 800980c:	6922      	ldr	r2, [r4, #16]
 800980e:	b15a      	cbz	r2, 8009828 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009810:	f103 020c 	add.w	r2, r3, #12
 8009814:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009818:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981c:	f103 000c 	add.w	r0, r3, #12
 8009820:	e840 2100 	strex	r1, r2, [r0]
 8009824:	2900      	cmp	r1, #0
 8009826:	d1f3      	bne.n	8009810 <UART_Start_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009828:	f103 0214 	add.w	r2, r3, #20
 800982c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009830:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009834:	f103 0014 	add.w	r0, r3, #20
 8009838:	e840 2100 	strex	r1, r2, [r0]
 800983c:	2900      	cmp	r1, #0
 800983e:	d1f3      	bne.n	8009828 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009840:	f103 0214 	add.w	r2, r3, #20
 8009844:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009848:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984c:	f103 0114 	add.w	r1, r3, #20
 8009850:	e841 2000 	strex	r0, r2, [r1]
 8009854:	2800      	cmp	r0, #0
 8009856:	d1f3      	bne.n	8009840 <UART_Start_Receive_DMA+0x70>
}
 8009858:	b002      	add	sp, #8
 800985a:	bd70      	pop	{r4, r5, r6, pc}
 800985c:	080093ed 	.word	0x080093ed
 8009860:	080093cf 	.word	0x080093cf
 8009864:	08009363 	.word	0x08009363

08009868 <HAL_UART_Receive_DMA>:
{
 8009868:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 800986a:	f890 6042 	ldrb.w	r6, [r0, #66]	@ 0x42
 800986e:	2e20      	cmp	r6, #32
 8009870:	d106      	bne.n	8009880 <HAL_UART_Receive_DMA+0x18>
    if ((pData == NULL) || (Size == 0U))
 8009872:	b141      	cbz	r1, 8009886 <HAL_UART_Receive_DMA+0x1e>
 8009874:	b13a      	cbz	r2, 8009886 <HAL_UART_Receive_DMA+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009876:	2400      	movs	r4, #0
 8009878:	6304      	str	r4, [r0, #48]	@ 0x30
}
 800987a:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 800987c:	f7ff bfa8 	b.w	80097d0 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 8009880:	2002      	movs	r0, #2
}
 8009882:	bc70      	pop	{r4, r5, r6}
 8009884:	4770      	bx	lr
      return HAL_ERROR;
 8009886:	2001      	movs	r0, #1
 8009888:	e7fb      	b.n	8009882 <HAL_UART_Receive_DMA+0x1a>

0800988a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800988a:	b084      	sub	sp, #16
 800988c:	a804      	add	r0, sp, #16
 800988e:	e900 000e 	stmdb	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8009892:	2000      	movs	r0, #0
 8009894:	b004      	add	sp, #16
 8009896:	4770      	bx	lr

08009898 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009898:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800989a:	f44f 423f 	mov.w	r2, #48896	@ 0xbf00
  USBx->ISTR = 0U;
 800989e:	2000      	movs	r0, #0
 80098a0:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 80098a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 80098a8:	4770      	bx	lr

080098aa <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80098aa:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 80098ae:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80098b2:	045b      	lsls	r3, r3, #17
 80098b4:	0c5b      	lsrs	r3, r3, #17
 80098b6:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 80098ba:	2000      	movs	r0, #0
 80098bc:	4770      	bx	lr

080098be <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80098be:	2000      	movs	r0, #0
 80098c0:	4770      	bx	lr

080098c2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80098c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098c4:	4604      	mov	r4, r0
 80098c6:	a804      	add	r0, sp, #16
 80098c8:	e900 000e 	stmdb	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80098cc:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80098ce:	2301      	movs	r3, #1
 80098d0:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
  USBx->CNTR = 0U;
 80098d4:	f8a4 0040 	strh.w	r0, [r4, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80098d8:	f8a4 0044 	strh.w	r0, [r4, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80098dc:	f8a4 0050 	strh.w	r0, [r4, #80]	@ 0x50

  return HAL_OK;
}
 80098e0:	b004      	add	sp, #16
 80098e2:	bd10      	pop	{r4, pc}

080098e4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80098e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80098e6:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80098e8:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80098ea:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 80098ee:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80098f0:	f424 44ec 	bic.w	r4, r4, #30208	@ 0x7600
 80098f4:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 80098f8:	0424      	lsls	r4, r4, #16
 80098fa:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 80098fc:	2d03      	cmp	r5, #3
 80098fe:	d84b      	bhi.n	8009998 <USB_ActivateEndpoint+0xb4>
 8009900:	e8df f005 	tbb	[pc, r5]
 8009904:	43454702 	.word	0x43454702
  HAL_StatusTypeDef ret = HAL_OK;
 8009908:	4628      	mov	r0, r5
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800990a:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800990e:	f248 0680 	movw	r6, #32896	@ 0x8080
 8009912:	4334      	orrs	r4, r6
 8009914:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009918:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800991c:	4f9e      	ldr	r7, [pc, #632]	@ (8009b98 <USB_ActivateEndpoint+0x2b4>)
 800991e:	b2a4      	uxth	r4, r4
 8009920:	403c      	ands	r4, r7
 8009922:	4314      	orrs	r4, r2
 8009924:	4334      	orrs	r4, r6
 8009926:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 800992a:	7b0c      	ldrb	r4, [r1, #12]
 800992c:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 8009930:	2c00      	cmp	r4, #0
 8009932:	f040 808b 	bne.w	8009a4c <USB_ActivateEndpoint+0x168>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009936:	88cc      	ldrh	r4, [r1, #6]
    if (ep->is_in != 0U)
 8009938:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800993a:	0864      	lsrs	r4, r4, #1
 800993c:	0064      	lsls	r4, r4, #1
    if (ep->is_in != 0U)
 800993e:	b36e      	cbz	r6, 800999c <USB_ActivateEndpoint+0xb8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009940:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8009944:	b289      	uxth	r1, r1
 8009946:	4461      	add	r1, ip
 8009948:	f8a1 4400 	strh.w	r4, [r1, #1024]	@ 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800994c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009950:	0649      	lsls	r1, r1, #25
 8009952:	d509      	bpl.n	8009968 <USB_ActivateEndpoint+0x84>
 8009954:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009958:	b289      	uxth	r1, r1
 800995a:	4039      	ands	r1, r7
 800995c:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8009960:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8009964:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009968:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800996c:	4c8b      	ldr	r4, [pc, #556]	@ (8009b9c <USB_ActivateEndpoint+0x2b8>)
 800996e:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8009970:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009972:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8009976:	d001      	beq.n	800997c <USB_ActivateEndpoint+0x98>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009978:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800997c:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8009980:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8009984:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8009988:	e04a      	b.n	8009a20 <USB_ActivateEndpoint+0x13c>
      wEpRegVal |= USB_EP_INTERRUPT;
 800998a:	f444 64c0 	orr.w	r4, r4, #1536	@ 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800998e:	2000      	movs	r0, #0
      break;
 8009990:	e7bd      	b.n	800990e <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009992:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
      break;
 8009996:	e7fa      	b.n	800998e <USB_ActivateEndpoint+0xaa>
  switch (ep->type)
 8009998:	2001      	movs	r0, #1
 800999a:	e7b8      	b.n	800990e <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800999c:	f8b3 5050 	ldrh.w	r5, [r3, #80]	@ 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80099a0:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80099a2:	b2ad      	uxth	r5, r5
 80099a4:	4465      	add	r5, ip
 80099a6:	f8a5 4408 	strh.w	r4, [r5, #1032]	@ 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80099aa:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 80099ae:	293e      	cmp	r1, #62	@ 0x3e
 80099b0:	b2a4      	uxth	r4, r4
 80099b2:	4464      	add	r4, ip
 80099b4:	f8b4 540c 	ldrh.w	r5, [r4, #1036]	@ 0x40c
 80099b8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80099bc:	f8a4 540c 	strh.w	r5, [r4, #1036]	@ 0x40c
 80099c0:	d92f      	bls.n	8009a22 <USB_ActivateEndpoint+0x13e>
 80099c2:	094d      	lsrs	r5, r1, #5
 80099c4:	06ce      	lsls	r6, r1, #27
 80099c6:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 80099ca:	bf08      	it	eq
 80099cc:	f105 35ff 	addeq.w	r5, r5, #4294967295
 80099d0:	b289      	uxth	r1, r1
 80099d2:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 80099d6:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80099da:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80099de:	b289      	uxth	r1, r1
 80099e0:	f8a4 140c 	strh.w	r1, [r4, #1036]	@ 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80099e4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80099e8:	044f      	lsls	r7, r1, #17
 80099ea:	d50d      	bpl.n	8009a08 <USB_ActivateEndpoint+0x124>
 80099ec:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80099f0:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80099f4:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80099f8:	0409      	lsls	r1, r1, #16
 80099fa:	0c09      	lsrs	r1, r1, #16
 80099fc:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8009a00:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8009a04:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 8009a08:	4c65      	ldr	r4, [pc, #404]	@ (8009ba0 <USB_ActivateEndpoint+0x2bc>)
 8009a0a:	b9c2      	cbnz	r2, 8009a3e <USB_ActivateEndpoint+0x15a>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009a0c:	881a      	ldrh	r2, [r3, #0]
 8009a0e:	b292      	uxth	r2, r2
 8009a10:	4022      	ands	r2, r4
 8009a12:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 8009a16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009a1a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009a1e:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8009a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009a22:	b911      	cbnz	r1, 8009a2a <USB_ActivateEndpoint+0x146>
 8009a24:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8009a28:	e7d5      	b.n	80099d6 <USB_ActivateEndpoint+0xf2>
 8009a2a:	084d      	lsrs	r5, r1, #1
 8009a2c:	07c9      	lsls	r1, r1, #31
 8009a2e:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8009a32:	bf48      	it	mi
 8009a34:	3501      	addmi	r5, #1
 8009a36:	b289      	uxth	r1, r1
 8009a38:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8009a3c:	e7cf      	b.n	80099de <USB_ActivateEndpoint+0xfa>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009a3e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009a42:	b289      	uxth	r1, r1
 8009a44:	4021      	ands	r1, r4
 8009a46:	f481 5100 	eor.w	r1, r1, #8192	@ 0x2000
 8009a4a:	e797      	b.n	800997c <USB_ActivateEndpoint+0x98>
    if (ep->type == EP_TYPE_BULK)
 8009a4c:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009a4e:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 8009a52:	d15b      	bne.n	8009b0c <USB_ActivateEndpoint+0x228>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009a54:	b2a4      	uxth	r4, r4
 8009a56:	403c      	ands	r4, r7
 8009a58:	f444 4401 	orr.w	r4, r4, #33024	@ 0x8100
 8009a5c:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
 8009a60:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009a64:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8009a68:	890e      	ldrh	r6, [r1, #8]
 8009a6a:	b2a4      	uxth	r4, r4
 8009a6c:	0876      	lsrs	r6, r6, #1
 8009a6e:	4464      	add	r4, ip
 8009a70:	0076      	lsls	r6, r6, #1
 8009a72:	f8a4 6400 	strh.w	r6, [r4, #1024]	@ 0x400
 8009a76:	894e      	ldrh	r6, [r1, #10]
 8009a78:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8009a7c:	0876      	lsrs	r6, r6, #1
 8009a7e:	b2a4      	uxth	r4, r4
 8009a80:	4464      	add	r4, ip
 8009a82:	0076      	lsls	r6, r6, #1
 8009a84:	f8a4 6408 	strh.w	r6, [r4, #1032]	@ 0x408
    if (ep->is_in == 0U)
 8009a88:	7849      	ldrb	r1, [r1, #1]
 8009a8a:	2900      	cmp	r1, #0
 8009a8c:	d148      	bne.n	8009b20 <USB_ActivateEndpoint+0x23c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a8e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009a92:	044e      	lsls	r6, r1, #17
 8009a94:	d50d      	bpl.n	8009ab2 <USB_ActivateEndpoint+0x1ce>
 8009a96:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009a9a:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8009a9e:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8009aa2:	0409      	lsls	r1, r1, #16
 8009aa4:	0c09      	lsrs	r1, r1, #16
 8009aa6:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8009aaa:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8009aae:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ab2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009ab6:	064d      	lsls	r5, r1, #25
 8009ab8:	d50d      	bpl.n	8009ad6 <USB_ActivateEndpoint+0x1f2>
 8009aba:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009abe:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8009ac2:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8009ac6:	0409      	lsls	r1, r1, #16
 8009ac8:	0c09      	lsrs	r1, r1, #16
 8009aca:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8009ace:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8009ad2:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009ad6:	f248 0480 	movw	r4, #32896	@ 0x8080
 8009ada:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009ade:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8009ae2:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8009ae6:	0409      	lsls	r1, r1, #16
 8009ae8:	0c09      	lsrs	r1, r1, #16
 8009aea:	f481 5140 	eor.w	r1, r1, #12288	@ 0x3000
 8009aee:	4321      	orrs	r1, r4
 8009af0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009af4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009af8:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8009afc:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8009b00:	0409      	lsls	r1, r1, #16
 8009b02:	0c09      	lsrs	r1, r1, #16
 8009b04:	430c      	orrs	r4, r1
 8009b06:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 8009b0a:	e789      	b.n	8009a20 <USB_ActivateEndpoint+0x13c>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009b0c:	f424 44e2 	bic.w	r4, r4, #28928	@ 0x7100
 8009b10:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 8009b14:	0424      	lsls	r4, r4, #16
 8009b16:	0c24      	lsrs	r4, r4, #16
 8009b18:	4326      	orrs	r6, r4
 8009b1a:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 8009b1e:	e7a1      	b.n	8009a64 <USB_ActivateEndpoint+0x180>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b20:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009b24:	044c      	lsls	r4, r1, #17
 8009b26:	d50d      	bpl.n	8009b44 <USB_ActivateEndpoint+0x260>
 8009b28:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009b2c:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8009b30:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8009b34:	0409      	lsls	r1, r1, #16
 8009b36:	0c09      	lsrs	r1, r1, #16
 8009b38:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8009b3c:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8009b40:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b44:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009b48:	0649      	lsls	r1, r1, #25
 8009b4a:	d50d      	bpl.n	8009b68 <USB_ActivateEndpoint+0x284>
 8009b4c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009b50:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8009b54:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8009b58:	0409      	lsls	r1, r1, #16
 8009b5a:	0c09      	lsrs	r1, r1, #16
 8009b5c:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8009b60:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8009b64:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009b68:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009b6c:	4c0b      	ldr	r4, [pc, #44]	@ (8009b9c <USB_ActivateEndpoint+0x2b8>)
 8009b6e:	b289      	uxth	r1, r1
 8009b70:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8009b72:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009b74:	bf18      	it	ne
 8009b76:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009b7a:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8009b7e:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8009b82:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009b86:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8009b8a:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8009b8e:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8009b92:	0409      	lsls	r1, r1, #16
 8009b94:	0c09      	lsrs	r1, r1, #16
 8009b96:	e6f1      	b.n	800997c <USB_ActivateEndpoint+0x98>
 8009b98:	ffff8f8f 	.word	0xffff8f8f
 8009b9c:	ffff8fbf 	.word	0xffff8fbf
 8009ba0:	ffffbf8f 	.word	0xffffbf8f

08009ba4 <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 8009ba4:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ba6:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8009ba8:	7b09      	ldrb	r1, [r1, #12]
 8009baa:	bbd9      	cbnz	r1, 8009c24 <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 8009bac:	b30a      	cbz	r2, 8009bf2 <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009bae:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009bb2:	0651      	lsls	r1, r2, #25
 8009bb4:	d50d      	bpl.n	8009bd2 <USB_DeactivateEndpoint+0x2e>
 8009bb6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009bba:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8009bbe:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009bc2:	0412      	lsls	r2, r2, #16
 8009bc4:	0c12      	lsrs	r2, r2, #16
 8009bc6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009bca:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8009bce:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009bd2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009bd6:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8009bda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009bde:	0412      	lsls	r2, r2, #16
 8009be0:	0c12      	lsrs	r2, r2, #16
 8009be2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009be6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009bea:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8009bee:	2000      	movs	r0, #0
 8009bf0:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009bf2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009bf6:	0452      	lsls	r2, r2, #17
 8009bf8:	d50d      	bpl.n	8009c16 <USB_DeactivateEndpoint+0x72>
 8009bfa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009bfe:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8009c02:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009c06:	0412      	lsls	r2, r2, #16
 8009c08:	0c12      	lsrs	r2, r2, #16
 8009c0a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8009c0e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009c12:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009c16:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009c1a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009c1e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009c22:	e7dc      	b.n	8009bde <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8009c24:	2a00      	cmp	r2, #0
 8009c26:	d14a      	bne.n	8009cbe <USB_DeactivateEndpoint+0x11a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c28:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009c2c:	0451      	lsls	r1, r2, #17
 8009c2e:	d50d      	bpl.n	8009c4c <USB_DeactivateEndpoint+0xa8>
 8009c30:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009c34:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8009c38:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009c3c:	0412      	lsls	r2, r2, #16
 8009c3e:	0c12      	lsrs	r2, r2, #16
 8009c40:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8009c44:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009c48:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c4c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009c50:	0652      	lsls	r2, r2, #25
 8009c52:	d50d      	bpl.n	8009c70 <USB_DeactivateEndpoint+0xcc>
 8009c54:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009c58:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8009c5c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009c60:	0412      	lsls	r2, r2, #16
 8009c62:	0c12      	lsrs	r2, r2, #16
 8009c64:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009c68:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8009c6c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009c70:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8009c74:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009c78:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8009c7c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009c80:	0412      	lsls	r2, r2, #16
 8009c82:	0c12      	lsrs	r2, r2, #16
 8009c84:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009c88:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8009c8c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009c90:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009c94:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009c98:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009c9c:	0412      	lsls	r2, r2, #16
 8009c9e:	0c12      	lsrs	r2, r2, #16
 8009ca0:	430a      	orrs	r2, r1
 8009ca2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009ca6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009caa:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8009cae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009cb2:	0412      	lsls	r2, r2, #16
 8009cb4:	0c12      	lsrs	r2, r2, #16
 8009cb6:	4311      	orrs	r1, r2
 8009cb8:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
 8009cbc:	e797      	b.n	8009bee <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009cbe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009cc2:	0451      	lsls	r1, r2, #17
 8009cc4:	d50d      	bpl.n	8009ce2 <USB_DeactivateEndpoint+0x13e>
 8009cc6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009cca:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8009cce:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009cd2:	0412      	lsls	r2, r2, #16
 8009cd4:	0c12      	lsrs	r2, r2, #16
 8009cd6:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8009cda:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009cde:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ce2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009ce6:	0652      	lsls	r2, r2, #25
 8009ce8:	d50d      	bpl.n	8009d06 <USB_DeactivateEndpoint+0x162>
 8009cea:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009cee:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8009cf2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009cf6:	0412      	lsls	r2, r2, #16
 8009cf8:	0c12      	lsrs	r2, r2, #16
 8009cfa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009cfe:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8009d02:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009d06:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8009d0a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009d0e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8009d12:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009d16:	0412      	lsls	r2, r2, #16
 8009d18:	0c12      	lsrs	r2, r2, #16
 8009d1a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8009d1e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009d22:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009d26:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009d2a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8009d2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009d32:	0412      	lsls	r2, r2, #16
 8009d34:	0c12      	lsrs	r2, r2, #16
 8009d36:	430a      	orrs	r2, r1
 8009d38:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009d3c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8009d40:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009d44:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009d48:	e7b3      	b.n	8009cb2 <USB_DeactivateEndpoint+0x10e>

08009d4a <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8009d4a:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009d4c:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8009d4e:	b18b      	cbz	r3, 8009d74 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009d50:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009d54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d5c:	041b      	lsls	r3, r3, #16
 8009d5e:	0c1b      	lsrs	r3, r3, #16
 8009d60:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009d64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d6c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8009d70:	2000      	movs	r0, #0
 8009d72:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009d74:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009d78:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d80:	041b      	lsls	r3, r3, #16
 8009d82:	0c1b      	lsrs	r3, r3, #16
 8009d84:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009d88:	e7ec      	b.n	8009d64 <USB_EPSetStall+0x1a>

08009d8a <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8009d8a:	7b0b      	ldrb	r3, [r1, #12]
 8009d8c:	bb3b      	cbnz	r3, 8009dde <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 8009d8e:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d90:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8009d92:	b333      	cbz	r3, 8009de2 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d94:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009d98:	065b      	lsls	r3, r3, #25
 8009d9a:	d50d      	bpl.n	8009db8 <USB_EPClearStall+0x2e>
 8009d9c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009da0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009da4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009da8:	041b      	lsls	r3, r3, #16
 8009daa:	0c1b      	lsrs	r3, r3, #16
 8009dac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009db0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009db4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8009db8:	78cb      	ldrb	r3, [r1, #3]
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d00f      	beq.n	8009dde <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009dbe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009dc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009dc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009dca:	041b      	lsls	r3, r3, #16
 8009dcc:	0c1b      	lsrs	r3, r3, #16
 8009dce:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009dd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009dd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dda:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8009dde:	2000      	movs	r0, #0
 8009de0:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009de2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009de6:	045b      	lsls	r3, r3, #17
 8009de8:	d50d      	bpl.n	8009e06 <USB_EPClearStall+0x7c>
 8009dea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009dee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009df6:	041b      	lsls	r3, r3, #16
 8009df8:	0c1b      	lsrs	r3, r3, #16
 8009dfa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e02:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009e06:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8009e0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009e0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e12:	041b      	lsls	r3, r3, #16
 8009e14:	0c1b      	lsrs	r3, r3, #16
 8009e16:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8009e1a:	e7da      	b.n	8009dd2 <USB_EPClearStall+0x48>

08009e1c <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8009e1c:	b911      	cbnz	r1, 8009e24 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009e1e:	2380      	movs	r3, #128	@ 0x80
 8009e20:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 8009e24:	2000      	movs	r0, #0
 8009e26:	4770      	bx	lr

08009e28 <USB_DevConnect>:
/**
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
 8009e28:	2000      	movs	r0, #0
 8009e2a:	4770      	bx	lr

08009e2c <USB_DevDisconnect>:
/**
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
 8009e2c:	2000      	movs	r0, #0
 8009e2e:	4770      	bx	lr

08009e30 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009e30:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 8009e34:	b280      	uxth	r0, r0
 8009e36:	4770      	bx	lr

08009e38 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8009e38:	2000      	movs	r0, #0
 8009e3a:	4770      	bx	lr

08009e3c <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009e3c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009e40:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009e42:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009e46:	085b      	lsrs	r3, r3, #1
 8009e48:	eb00 0383 	add.w	r3, r0, r3, lsl #2

  for (count = n; count != 0U; count--)
 8009e4c:	4283      	cmp	r3, r0
 8009e4e:	d100      	bne.n	8009e52 <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8009e50:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009e52:	f831 2b02 	ldrh.w	r2, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 8009e56:	f820 2b04 	strh.w	r2, [r0], #4
  for (count = n; count != 0U; count--)
 8009e5a:	e7f7      	b.n	8009e4c <USB_WritePMA+0x10>

08009e5c <USB_EPStartXfer>:
{
 8009e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 8009e60:	784b      	ldrb	r3, [r1, #1]
{
 8009e62:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8009e64:	2b01      	cmp	r3, #1
{
 8009e66:	460d      	mov	r5, r1
    if (ep->doublebuffer == 0U)
 8009e68:	7b0a      	ldrb	r2, [r1, #12]
  if (ep->is_in == 1U)
 8009e6a:	f040 8118 	bne.w	800a09e <USB_EPStartXfer+0x242>
    if (ep->xfer_len > ep->maxpacket)
 8009e6e:	f8d1 9010 	ldr.w	r9, [r1, #16]
 8009e72:	698f      	ldr	r7, [r1, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009e74:	6949      	ldr	r1, [r1, #20]
 8009e76:	454f      	cmp	r7, r9
 8009e78:	bf28      	it	cs
 8009e7a:	464f      	movcs	r7, r9
    if (ep->doublebuffer == 0U)
 8009e7c:	bb0a      	cbnz	r2, 8009ec2 <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009e7e:	b2bf      	uxth	r7, r7
 8009e80:	88ea      	ldrh	r2, [r5, #6]
 8009e82:	463b      	mov	r3, r7
 8009e84:	f7ff ffda 	bl	8009e3c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009e88:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8009e8c:	7829      	ldrb	r1, [r5, #0]
 8009e8e:	b280      	uxth	r0, r0
 8009e90:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 8009e94:	0109      	lsls	r1, r1, #4
 8009e96:	4402      	add	r2, r0
 8009e98:	528f      	strh	r7, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009e9a:	782a      	ldrb	r2, [r5, #0]
 8009e9c:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8009ea0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ea4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ea8:	041b      	lsls	r3, r3, #16
 8009eaa:	0c1b      	lsrs	r3, r3, #16
 8009eac:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
  return HAL_OK;
 8009eb0:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009eb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009eba:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8009ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ep->type == EP_TYPE_BULK)
 8009ec2:	78eb      	ldrb	r3, [r5, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009ec4:	f895 e000 	ldrb.w	lr, [r5]
      if (ep->type == EP_TYPE_BULK)
 8009ec8:	2b02      	cmp	r3, #2
        if (ep->xfer_len_db > ep->maxpacket)
 8009eca:	6a2e      	ldr	r6, [r5, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009ecc:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
      if (ep->type == EP_TYPE_BULK)
 8009ed0:	f040 80d0 	bne.w	800a074 <USB_EPStartXfer+0x218>
        if (ep->xfer_len_db > ep->maxpacket)
 8009ed4:	45b1      	cmp	r9, r6
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009ed6:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 8009eda:	f080 80b4 	bcs.w	800a046 <USB_EPStartXfer+0x1ea>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009ede:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8009ee2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009ee6:	0412      	lsls	r2, r2, #16
 8009ee8:	0c12      	lsrs	r2, r2, #16
 8009eea:	f442 4201 	orr.w	r2, r2, #33024	@ 0x8100
 8009eee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009ef2:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009ef6:	f830 802e 	ldrh.w	r8, [r0, lr, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009efa:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
          ep->xfer_len_db -= len;
 8009efe:	1bf6      	subs	r6, r6, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009f00:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
          ep->xfer_len_db -= len;
 8009f04:	622e      	str	r6, [r5, #32]
            ep->xfer_buff += len;
 8009f06:	eb01 0a07 	add.w	sl, r1, r7
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009f0a:	b2bb      	uxth	r3, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009f0c:	fa1f fe8e 	uxth.w	lr, lr
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009f10:	d04e      	beq.n	8009fb0 <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009f12:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 8009f16:	4472      	add	r2, lr
 8009f18:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f1c:	896a      	ldrh	r2, [r5, #10]
 8009f1e:	f7ff ff8d 	bl	8009e3c <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8009f22:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 8009f24:	bf36      	itet	cc
 8009f26:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 8009f28:	2300      	movcs	r3, #0
 8009f2a:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009f2c:	786a      	ldrb	r2, [r5, #1]
 8009f2e:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 8009f30:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009f34:	b2b3      	uxth	r3, r6
 8009f36:	bb7a      	cbnz	r2, 8009f98 <USB_EPStartXfer+0x13c>
 8009f38:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 8009f3c:	7828      	ldrb	r0, [r5, #0]
 8009f3e:	b292      	uxth	r2, r2
 8009f40:	f204 4104 	addw	r1, r4, #1028	@ 0x404
 8009f44:	0100      	lsls	r0, r0, #4
 8009f46:	4411      	add	r1, r2
 8009f48:	5a42      	ldrh	r2, [r0, r1]
 8009f4a:	2e3e      	cmp	r6, #62	@ 0x3e
 8009f4c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009f50:	5242      	strh	r2, [r0, r1]
 8009f52:	d914      	bls.n	8009f7e <USB_EPStartXfer+0x122>
 8009f54:	5a42      	ldrh	r2, [r0, r1]
 8009f56:	0977      	lsrs	r7, r6, #5
 8009f58:	06f6      	lsls	r6, r6, #27
 8009f5a:	bf08      	it	eq
 8009f5c:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8009f60:	b292      	uxth	r2, r2
 8009f62:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8009f66:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8009f6a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8009f6e:	b292      	uxth	r2, r2
 8009f70:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f72:	892a      	ldrh	r2, [r5, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f74:	4651      	mov	r1, sl
 8009f76:	4620      	mov	r0, r4
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f78:	f7ff ff60 	bl	8009e3c <USB_WritePMA>
 8009f7c:	e78d      	b.n	8009e9a <USB_EPStartXfer+0x3e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009f7e:	b90e      	cbnz	r6, 8009f84 <USB_EPStartXfer+0x128>
 8009f80:	5a42      	ldrh	r2, [r0, r1]
 8009f82:	e7f0      	b.n	8009f66 <USB_EPStartXfer+0x10a>
 8009f84:	07f2      	lsls	r2, r6, #31
 8009f86:	5a42      	ldrh	r2, [r0, r1]
 8009f88:	ea4f 0756 	mov.w	r7, r6, lsr #1
 8009f8c:	bf48      	it	mi
 8009f8e:	3701      	addmi	r7, #1
 8009f90:	b292      	uxth	r2, r2
 8009f92:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8009f96:	e7ea      	b.n	8009f6e <USB_EPStartXfer+0x112>
 8009f98:	2a01      	cmp	r2, #1
 8009f9a:	d1ea      	bne.n	8009f72 <USB_EPStartXfer+0x116>
 8009f9c:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8009fa0:	7829      	ldrb	r1, [r5, #0]
 8009fa2:	b280      	uxth	r0, r0
 8009fa4:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 8009fa8:	0109      	lsls	r1, r1, #4
 8009faa:	4402      	add	r2, r0
 8009fac:	528b      	strh	r3, [r1, r2]
 8009fae:	e7e0      	b.n	8009f72 <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009fb0:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8009fb4:	4472      	add	r2, lr
 8009fb6:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009fba:	892a      	ldrh	r2, [r5, #8]
 8009fbc:	f7ff ff3e 	bl	8009e3c <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8009fc0:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 8009fc2:	bf36      	itet	cc
 8009fc4:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 8009fc6:	4643      	movcs	r3, r8
 8009fc8:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009fca:	786a      	ldrb	r2, [r5, #1]
 8009fcc:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 8009fce:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009fd2:	b2b3      	uxth	r3, r6
 8009fd4:	bb5a      	cbnz	r2, 800a02e <USB_EPStartXfer+0x1d2>
 8009fd6:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 8009fda:	7828      	ldrb	r0, [r5, #0]
 8009fdc:	b292      	uxth	r2, r2
 8009fde:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 8009fe2:	0100      	lsls	r0, r0, #4
 8009fe4:	4411      	add	r1, r2
 8009fe6:	5a42      	ldrh	r2, [r0, r1]
 8009fe8:	2e3e      	cmp	r6, #62	@ 0x3e
 8009fea:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009fee:	5242      	strh	r2, [r0, r1]
 8009ff0:	d910      	bls.n	800a014 <USB_EPStartXfer+0x1b8>
 8009ff2:	5a42      	ldrh	r2, [r0, r1]
 8009ff4:	0977      	lsrs	r7, r6, #5
 8009ff6:	06f6      	lsls	r6, r6, #27
 8009ff8:	bf08      	it	eq
 8009ffa:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8009ffe:	b292      	uxth	r2, r2
 800a000:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800a004:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800a008:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800a00c:	b292      	uxth	r2, r2
 800a00e:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a010:	896a      	ldrh	r2, [r5, #10]
 800a012:	e7af      	b.n	8009f74 <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a014:	b90e      	cbnz	r6, 800a01a <USB_EPStartXfer+0x1be>
 800a016:	5a42      	ldrh	r2, [r0, r1]
 800a018:	e7f4      	b.n	800a004 <USB_EPStartXfer+0x1a8>
 800a01a:	07f2      	lsls	r2, r6, #31
 800a01c:	5a42      	ldrh	r2, [r0, r1]
 800a01e:	ea4f 0756 	mov.w	r7, r6, lsr #1
 800a022:	bf48      	it	mi
 800a024:	3701      	addmi	r7, #1
 800a026:	b292      	uxth	r2, r2
 800a028:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800a02c:	e7ee      	b.n	800a00c <USB_EPStartXfer+0x1b0>
 800a02e:	2a01      	cmp	r2, #1
 800a030:	d1ee      	bne.n	800a010 <USB_EPStartXfer+0x1b4>
 800a032:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 800a036:	7829      	ldrb	r1, [r5, #0]
 800a038:	b280      	uxth	r0, r0
 800a03a:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 800a03e:	0109      	lsls	r1, r1, #4
 800a040:	4402      	add	r2, r0
 800a042:	528b      	strh	r3, [r1, r2]
 800a044:	e7e4      	b.n	800a010 <USB_EPStartXfer+0x1b4>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a046:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 800a04a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a04e:	0412      	lsls	r2, r2, #16
 800a050:	0c12      	lsrs	r2, r2, #16
 800a052:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a056:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a05a:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a05e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800a062:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 800a066:	b29b      	uxth	r3, r3
 800a068:	441a      	add	r2, r3
 800a06a:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a06c:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a070:	892a      	ldrh	r2, [r5, #8]
 800a072:	e781      	b.n	8009f78 <USB_EPStartXfer+0x11c>
        ep->xfer_len_db -= len;
 800a074:	1bf6      	subs	r6, r6, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a076:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        ep->xfer_len_db -= len;
 800a07a:	622e      	str	r6, [r5, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a07c:	f8b0 6050 	ldrh.w	r6, [r0, #80]	@ 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a080:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a082:	0657      	lsls	r7, r2, #25
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a084:	b2b6      	uxth	r6, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a086:	d506      	bpl.n	800a096 <USB_EPStartXfer+0x23a>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a088:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 800a08c:	4432      	add	r2, r6
 800a08e:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a092:	896a      	ldrh	r2, [r5, #10]
 800a094:	e770      	b.n	8009f78 <USB_EPStartXfer+0x11c>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a096:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 800a09a:	4432      	add	r2, r6
 800a09c:	e7e6      	b.n	800a06c <USB_EPStartXfer+0x210>
    if (ep->doublebuffer == 0U)
 800a09e:	2a00      	cmp	r2, #0
 800a0a0:	d13b      	bne.n	800a11a <USB_EPStartXfer+0x2be>
      if (ep->xfer_len > ep->maxpacket)
 800a0a2:	698b      	ldr	r3, [r1, #24]
 800a0a4:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a0a6:	f8b0 0050 	ldrh.w	r0, [r0, #80]	@ 0x50
      if (ep->xfer_len > ep->maxpacket)
 800a0aa:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 800a0ac:	bf84      	itt	hi
 800a0ae:	1a5a      	subhi	r2, r3, r1
 800a0b0:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a0b2:	7829      	ldrb	r1, [r5, #0]
 800a0b4:	61aa      	str	r2, [r5, #24]
 800a0b6:	b280      	uxth	r0, r0
 800a0b8:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 800a0bc:	0109      	lsls	r1, r1, #4
 800a0be:	4402      	add	r2, r0
 800a0c0:	5a88      	ldrh	r0, [r1, r2]
 800a0c2:	2b3e      	cmp	r3, #62	@ 0x3e
 800a0c4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a0c8:	5288      	strh	r0, [r1, r2]
 800a0ca:	d91a      	bls.n	800a102 <USB_EPStartXfer+0x2a6>
 800a0cc:	0958      	lsrs	r0, r3, #5
 800a0ce:	06de      	lsls	r6, r3, #27
 800a0d0:	5a8b      	ldrh	r3, [r1, r2]
 800a0d2:	bf08      	it	eq
 800a0d4:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 800a0de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	528b      	strh	r3, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a0ea:	782a      	ldrb	r2, [r5, #0]
 800a0ec:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800a0f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a0f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0f8:	041b      	lsls	r3, r3, #16
 800a0fa:	0c1b      	lsrs	r3, r3, #16
 800a0fc:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 800a100:	e6d6      	b.n	8009eb0 <USB_EPStartXfer+0x54>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a102:	b90b      	cbnz	r3, 800a108 <USB_EPStartXfer+0x2ac>
 800a104:	5a8b      	ldrh	r3, [r1, r2]
 800a106:	e7ea      	b.n	800a0de <USB_EPStartXfer+0x282>
 800a108:	0858      	lsrs	r0, r3, #1
 800a10a:	07db      	lsls	r3, r3, #31
 800a10c:	5a8b      	ldrh	r3, [r1, r2]
 800a10e:	bf48      	it	mi
 800a110:	3001      	addmi	r0, #1
 800a112:	b29b      	uxth	r3, r3
 800a114:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 800a118:	e7e5      	b.n	800a0e6 <USB_EPStartXfer+0x28a>
      if (ep->type == EP_TYPE_BULK)
 800a11a:	78ca      	ldrb	r2, [r1, #3]
 800a11c:	2a02      	cmp	r2, #2
 800a11e:	d170      	bne.n	800a202 <USB_EPStartXfer+0x3a6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a120:	2b00      	cmp	r3, #0
 800a122:	d138      	bne.n	800a196 <USB_EPStartXfer+0x33a>
 800a124:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800a128:	780b      	ldrb	r3, [r1, #0]
 800a12a:	b292      	uxth	r2, r2
 800a12c:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 800a130:	011b      	lsls	r3, r3, #4
 800a132:	4410      	add	r0, r2
 800a134:	5ac2      	ldrh	r2, [r0, r3]
 800a136:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a13a:	52c2      	strh	r2, [r0, r3]
 800a13c:	690a      	ldr	r2, [r1, #16]
 800a13e:	2a3e      	cmp	r2, #62	@ 0x3e
 800a140:	d946      	bls.n	800a1d0 <USB_EPStartXfer+0x374>
 800a142:	5ac1      	ldrh	r1, [r0, r3]
 800a144:	0956      	lsrs	r6, r2, #5
 800a146:	06d7      	lsls	r7, r2, #27
 800a148:	bf08      	it	eq
 800a14a:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800a14e:	b289      	uxth	r1, r1
 800a150:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 800a154:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800a158:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800a15c:	b289      	uxth	r1, r1
 800a15e:	52c1      	strh	r1, [r0, r3]
 800a160:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 800a164:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 800a168:	b280      	uxth	r0, r0
 800a16a:	4401      	add	r1, r0
 800a16c:	5ac8      	ldrh	r0, [r1, r3]
 800a16e:	2a3e      	cmp	r2, #62	@ 0x3e
 800a170:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a174:	52c8      	strh	r0, [r1, r3]
 800a176:	d938      	bls.n	800a1ea <USB_EPStartXfer+0x38e>
 800a178:	0950      	lsrs	r0, r2, #5
 800a17a:	06d7      	lsls	r7, r2, #27
 800a17c:	5aca      	ldrh	r2, [r1, r3]
 800a17e:	bf08      	it	eq
 800a180:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800a184:	b292      	uxth	r2, r2
 800a186:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800a18a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800a18e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800a192:	b292      	uxth	r2, r2
 800a194:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 800a196:	69eb      	ldr	r3, [r5, #28]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d0a6      	beq.n	800a0ea <USB_EPStartXfer+0x28e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a19c:	f244 0340 	movw	r3, #16448	@ 0x4040
 800a1a0:	782a      	ldrb	r2, [r5, #0]
 800a1a2:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a1a6:	ea03 0001 	and.w	r0, r3, r1
 800a1aa:	438b      	bics	r3, r1
 800a1ac:	d001      	beq.n	800a1b2 <USB_EPStartXfer+0x356>
 800a1ae:	2800      	cmp	r0, #0
 800a1b0:	d19b      	bne.n	800a0ea <USB_EPStartXfer+0x28e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a1b2:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800a1b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1be:	041b      	lsls	r3, r3, #16
 800a1c0:	0c1b      	lsrs	r3, r3, #16
 800a1c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1c6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a1ca:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 800a1ce:	e78c      	b.n	800a0ea <USB_EPStartXfer+0x28e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a1d0:	b90a      	cbnz	r2, 800a1d6 <USB_EPStartXfer+0x37a>
 800a1d2:	5ac1      	ldrh	r1, [r0, r3]
 800a1d4:	e7be      	b.n	800a154 <USB_EPStartXfer+0x2f8>
 800a1d6:	07d1      	lsls	r1, r2, #31
 800a1d8:	5ac1      	ldrh	r1, [r0, r3]
 800a1da:	ea4f 0652 	mov.w	r6, r2, lsr #1
 800a1de:	bf48      	it	mi
 800a1e0:	3601      	addmi	r6, #1
 800a1e2:	b289      	uxth	r1, r1
 800a1e4:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 800a1e8:	e7b8      	b.n	800a15c <USB_EPStartXfer+0x300>
 800a1ea:	b90a      	cbnz	r2, 800a1f0 <USB_EPStartXfer+0x394>
 800a1ec:	5aca      	ldrh	r2, [r1, r3]
 800a1ee:	e7cc      	b.n	800a18a <USB_EPStartXfer+0x32e>
 800a1f0:	0850      	lsrs	r0, r2, #1
 800a1f2:	07d6      	lsls	r6, r2, #31
 800a1f4:	5aca      	ldrh	r2, [r1, r3]
 800a1f6:	bf48      	it	mi
 800a1f8:	3001      	addmi	r0, #1
 800a1fa:	b292      	uxth	r2, r2
 800a1fc:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800a200:	e7c7      	b.n	800a192 <USB_EPStartXfer+0x336>
      else if (ep->type == EP_TYPE_ISOC)
 800a202:	2a01      	cmp	r2, #1
 800a204:	d15d      	bne.n	800a2c2 <USB_EPStartXfer+0x466>
        if (ep->xfer_len > ep->maxpacket)
 800a206:	698a      	ldr	r2, [r1, #24]
 800a208:	6909      	ldr	r1, [r1, #16]
 800a20a:	428a      	cmp	r2, r1
          ep->xfer_len = 0U;
 800a20c:	bf94      	ite	ls
 800a20e:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 800a210:	1a50      	subhi	r0, r2, r1
 800a212:	61a8      	str	r0, [r5, #24]
 800a214:	bf88      	it	hi
 800a216:	460a      	movhi	r2, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f47f af66 	bne.w	800a0ea <USB_EPStartXfer+0x28e>
 800a21e:	f8b4 1050 	ldrh.w	r1, [r4, #80]	@ 0x50
 800a222:	782b      	ldrb	r3, [r5, #0]
 800a224:	b289      	uxth	r1, r1
 800a226:	f204 4004 	addw	r0, r4, #1028	@ 0x404
 800a22a:	011b      	lsls	r3, r3, #4
 800a22c:	4408      	add	r0, r1
 800a22e:	5ac1      	ldrh	r1, [r0, r3]
 800a230:	2a3e      	cmp	r2, #62	@ 0x3e
 800a232:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a236:	52c1      	strh	r1, [r0, r3]
 800a238:	d92b      	bls.n	800a292 <USB_EPStartXfer+0x436>
 800a23a:	06d1      	lsls	r1, r2, #27
 800a23c:	5ac1      	ldrh	r1, [r0, r3]
 800a23e:	ea4f 1652 	mov.w	r6, r2, lsr #5
 800a242:	bf08      	it	eq
 800a244:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800a248:	b289      	uxth	r1, r1
 800a24a:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 800a24e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800a252:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800a256:	b289      	uxth	r1, r1
 800a258:	52c1      	strh	r1, [r0, r3]
 800a25a:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 800a25e:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 800a262:	b280      	uxth	r0, r0
 800a264:	4401      	add	r1, r0
 800a266:	5ac8      	ldrh	r0, [r1, r3]
 800a268:	2a3e      	cmp	r2, #62	@ 0x3e
 800a26a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a26e:	52c8      	strh	r0, [r1, r3]
 800a270:	d91b      	bls.n	800a2aa <USB_EPStartXfer+0x44e>
 800a272:	0950      	lsrs	r0, r2, #5
 800a274:	06d6      	lsls	r6, r2, #27
 800a276:	5aca      	ldrh	r2, [r1, r3]
 800a278:	bf08      	it	eq
 800a27a:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800a27e:	b292      	uxth	r2, r2
 800a280:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800a284:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800a288:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800a28c:	b292      	uxth	r2, r2
 800a28e:	52ca      	strh	r2, [r1, r3]
 800a290:	e72b      	b.n	800a0ea <USB_EPStartXfer+0x28e>
 800a292:	b90a      	cbnz	r2, 800a298 <USB_EPStartXfer+0x43c>
 800a294:	5ac1      	ldrh	r1, [r0, r3]
 800a296:	e7da      	b.n	800a24e <USB_EPStartXfer+0x3f2>
 800a298:	5ac1      	ldrh	r1, [r0, r3]
 800a29a:	0856      	lsrs	r6, r2, #1
 800a29c:	07d7      	lsls	r7, r2, #31
 800a29e:	bf48      	it	mi
 800a2a0:	3601      	addmi	r6, #1
 800a2a2:	b289      	uxth	r1, r1
 800a2a4:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 800a2a8:	e7d5      	b.n	800a256 <USB_EPStartXfer+0x3fa>
 800a2aa:	b90a      	cbnz	r2, 800a2b0 <USB_EPStartXfer+0x454>
 800a2ac:	5aca      	ldrh	r2, [r1, r3]
 800a2ae:	e7e9      	b.n	800a284 <USB_EPStartXfer+0x428>
 800a2b0:	0850      	lsrs	r0, r2, #1
 800a2b2:	07d2      	lsls	r2, r2, #31
 800a2b4:	5aca      	ldrh	r2, [r1, r3]
 800a2b6:	bf48      	it	mi
 800a2b8:	3001      	addmi	r0, #1
 800a2ba:	b292      	uxth	r2, r2
 800a2bc:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800a2c0:	e7e4      	b.n	800a28c <USB_EPStartXfer+0x430>
        return HAL_ERROR;
 800a2c2:	2001      	movs	r0, #1
 800a2c4:	e5fb      	b.n	8009ebe <USB_EPStartXfer+0x62>

0800a2c6 <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a2c6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
{
 800a2ca:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a2cc:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a2d0:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 800a2d2:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a2d4:	4607      	mov	r7, r0
  for (count = n; count != 0U; count--)
 800a2d6:	462e      	mov	r6, r5
 800a2d8:	3402      	adds	r4, #2
 800a2da:	b936      	cbnz	r6, 800a2ea <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a2dc:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 800a2de:	bf44      	itt	mi
 800a2e0:	f830 3025 	ldrhmi.w	r3, [r0, r5, lsl #2]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a2e4:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 800a2e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 800a2ea:	f837 2b04 	ldrh.w	r2, [r7], #4
  for (count = n; count != 0U; count--)
 800a2ee:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 800a2f0:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a2f2:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a2f6:	0a12      	lsrs	r2, r2, #8
 800a2f8:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (count = n; count != 0U; count--)
 800a2fc:	e7ec      	b.n	800a2d8 <USB_ReadPMA+0x12>

0800a2fe <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a2fe:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
{
 800a302:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a304:	b16b      	cbz	r3, 800a322 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a306:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a30a:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 800a30e:	28ff      	cmp	r0, #255	@ 0xff
 800a310:	d007      	beq.n	800a322 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a312:	689b      	ldr	r3, [r3, #8]
 800a314:	4621      	mov	r1, r4
 800a316:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 800a31a:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800a31c:	23ff      	movs	r3, #255	@ 0xff
 800a31e:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200

  }
  return USBD_OK;
}
 800a322:	2000      	movs	r0, #0
 800a324:	bd10      	pop	{r4, pc}
	...

0800a328 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a328:	2343      	movs	r3, #67	@ 0x43
 800a32a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800a32c:	4800      	ldr	r0, [pc, #0]	@ (800a330 <USBD_CDC_GetFSCfgDesc+0x8>)
 800a32e:	4770      	bx	lr
 800a330:	20000058 	.word	0x20000058

0800a334 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a334:	2343      	movs	r3, #67	@ 0x43
 800a336:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800a338:	4800      	ldr	r0, [pc, #0]	@ (800a33c <USBD_CDC_GetHSCfgDesc+0x8>)
 800a33a:	4770      	bx	lr
 800a33c:	2000009c 	.word	0x2000009c

0800a340 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a340:	2343      	movs	r3, #67	@ 0x43
 800a342:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800a344:	4800      	ldr	r0, [pc, #0]	@ (800a348 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800a346:	4770      	bx	lr
 800a348:	20000014 	.word	0x20000014

0800a34c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a34c:	230a      	movs	r3, #10
 800a34e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800a350:	4800      	ldr	r0, [pc, #0]	@ (800a354 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800a352:	4770      	bx	lr
 800a354:	20000118 	.word	0x20000118

0800a358 <USBD_CDC_DataOut>:
{
 800a358:	b538      	push	{r3, r4, r5, lr}
 800a35a:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a35c:	f8d0 52b8 	ldr.w	r5, [r0, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a360:	f000 ff58 	bl	800b214 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 800a364:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a368:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  if (pdev->pClassData != NULL)
 800a36c:	b14b      	cbz	r3, 800a382 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a36e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 800a372:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 800a37c:	4798      	blx	r3
    return USBD_OK;
 800a37e:	2000      	movs	r0, #0
}
 800a380:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800a382:	2002      	movs	r0, #2
 800a384:	e7fc      	b.n	800a380 <USBD_CDC_DataOut+0x28>

0800a386 <USBD_CDC_DataIn>:
{
 800a386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a388:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  if (pdev->pClassData != NULL)
 800a38c:	b1ce      	cbz	r6, 800a3c2 <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a38e:	2214      	movs	r2, #20
 800a390:	fb02 0201 	mla	r2, r2, r1, r0
 800a394:	69d3      	ldr	r3, [r2, #28]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a396:	f8d0 52c0 	ldr.w	r5, [r0, #704]	@ 0x2c0
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a39a:	b173      	cbz	r3, 800a3ba <USBD_CDC_DataIn+0x34>
 800a39c:	2728      	movs	r7, #40	@ 0x28
 800a39e:	fb07 5401 	mla	r4, r7, r1, r5
 800a3a2:	6a24      	ldr	r4, [r4, #32]
 800a3a4:	fbb3 f5f4 	udiv	r5, r3, r4
 800a3a8:	fb04 3315 	mls	r3, r4, r5, r3
 800a3ac:	b92b      	cbnz	r3, 800a3ba <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 800a3ae:	61d3      	str	r3, [r2, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	f000 ff1d 	bl	800b1f0 <USBD_LL_Transmit>
    return USBD_OK;
 800a3b6:	2000      	movs	r0, #0
}
 800a3b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
 800a3c0:	e7f9      	b.n	800a3b6 <USBD_CDC_DataIn+0x30>
    return USBD_FAIL;
 800a3c2:	2002      	movs	r0, #2
 800a3c4:	e7f8      	b.n	800a3b8 <USBD_CDC_DataIn+0x32>

0800a3c6 <USBD_CDC_Setup>:
  uint8_t ifalt = 0U;
 800a3c6:	2300      	movs	r3, #0
{
 800a3c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3ca:	780f      	ldrb	r7, [r1, #0]
  uint8_t ifalt = 0U;
 800a3cc:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 800a3d0:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3d4:	f017 0360 	ands.w	r3, r7, #96	@ 0x60
{
 800a3d8:	4604      	mov	r4, r0
 800a3da:	460d      	mov	r5, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a3dc:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3e0:	d022      	beq.n	800a428 <USBD_CDC_Setup+0x62>
 800a3e2:	2b20      	cmp	r3, #32
 800a3e4:	d13a      	bne.n	800a45c <USBD_CDC_Setup+0x96>
      if (req->wLength)
 800a3e6:	88ca      	ldrh	r2, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a3e8:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 800a3ea:	b1ba      	cbz	r2, 800a41c <USBD_CDC_Setup+0x56>
        if (req->bmRequest & 0x80U)
 800a3ec:	0639      	lsls	r1, r7, #24
 800a3ee:	d50b      	bpl.n	800a408 <USBD_CDC_Setup+0x42>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a3f0:	f8d0 12bc 	ldr.w	r1, [r0, #700]	@ 0x2bc
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	688f      	ldr	r7, [r1, #8]
 800a3f8:	4631      	mov	r1, r6
 800a3fa:	47b8      	blx	r7
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a3fc:	4631      	mov	r1, r6
 800a3fe:	4620      	mov	r0, r4
 800a400:	88ea      	ldrh	r2, [r5, #6]
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a402:	f000 fc29 	bl	800ac58 <USBD_CtlSendData>
 800a406:	e006      	b.n	800a416 <USBD_CDC_Setup+0x50>
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a408:	4631      	mov	r1, r6
          hcdc->CmdOpCode = req->bRequest;
 800a40a:	f886 3200 	strb.w	r3, [r6, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a40e:	f886 2201 	strb.w	r2, [r6, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a412:	f000 fc36 	bl	800ac82 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 800a416:	2000      	movs	r0, #0
}
 800a418:	b003      	add	sp, #12
 800a41a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a41c:	f8d0 02bc 	ldr.w	r0, [r0, #700]	@ 0x2bc
 800a420:	6884      	ldr	r4, [r0, #8]
 800a422:	4618      	mov	r0, r3
 800a424:	47a0      	blx	r4
 800a426:	e7f6      	b.n	800a416 <USBD_CDC_Setup+0x50>
      switch (req->bRequest)
 800a428:	784b      	ldrb	r3, [r1, #1]
 800a42a:	2b0a      	cmp	r3, #10
 800a42c:	d00a      	beq.n	800a444 <USBD_CDC_Setup+0x7e>
 800a42e:	2b0b      	cmp	r3, #11
 800a430:	d010      	beq.n	800a454 <USBD_CDC_Setup+0x8e>
 800a432:	b99b      	cbnz	r3, 800a45c <USBD_CDC_Setup+0x96>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a434:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a438:	2b03      	cmp	r3, #3
 800a43a:	d10f      	bne.n	800a45c <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a43c:	2202      	movs	r2, #2
 800a43e:	f10d 0106 	add.w	r1, sp, #6
 800a442:	e7de      	b.n	800a402 <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a444:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a448:	2b03      	cmp	r3, #3
 800a44a:	d107      	bne.n	800a45c <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a44c:	2201      	movs	r2, #1
 800a44e:	f10d 0105 	add.w	r1, sp, #5
 800a452:	e7d6      	b.n	800a402 <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a454:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a458:	2b03      	cmp	r3, #3
 800a45a:	d0dc      	beq.n	800a416 <USBD_CDC_Setup+0x50>
          USBD_CtlError(pdev, req);
 800a45c:	4620      	mov	r0, r4
 800a45e:	4629      	mov	r1, r5
 800a460:	f000 fbd3 	bl	800ac0a <USBD_CtlError>
            ret = USBD_FAIL;
 800a464:	2002      	movs	r0, #2
 800a466:	e7d7      	b.n	800a418 <USBD_CDC_Setup+0x52>

0800a468 <USBD_CDC_DeInit>:
{
 800a468:	b538      	push	{r3, r4, r5, lr}
 800a46a:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a46c:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a46e:	2181      	movs	r1, #129	@ 0x81
 800a470:	f000 fe89 	bl	800b186 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a474:	2101      	movs	r1, #1
 800a476:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a478:	62e5      	str	r5, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a47a:	f000 fe84 	bl	800b186 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a47e:	2182      	movs	r1, #130	@ 0x82
 800a480:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a482:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a486:	f000 fe7e 	bl	800b186 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800a48a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a48e:	6425      	str	r5, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 800a490:	b14b      	cbz	r3, 800a4a6 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a492:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a49a:	f8d4 02b8 	ldr.w	r0, [r4, #696]	@ 0x2b8
 800a49e:	f000 fec1 	bl	800b224 <USBD_static_free>
    pdev->pClassData = NULL;
 800a4a2:	f8c4 52b8 	str.w	r5, [r4, #696]	@ 0x2b8
}
 800a4a6:	2000      	movs	r0, #0
 800a4a8:	bd38      	pop	{r3, r4, r5, pc}

0800a4aa <USBD_CDC_Init>:
{
 800a4aa:	b570      	push	{r4, r5, r6, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4ac:	7c03      	ldrb	r3, [r0, #16]
{
 800a4ae:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4b0:	bba3      	cbnz	r3, 800a51c <USBD_CDC_Init+0x72>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a4b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a4b6:	2181      	movs	r1, #129	@ 0x81
 800a4b8:	2202      	movs	r2, #2
 800a4ba:	f000 fe58 	bl	800b16e <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a4be:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a4c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a4c4:	62e1      	str	r1, [r4, #44]	@ 0x2c
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a4c6:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a4c8:	2202      	movs	r2, #2
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f000 fe4f 	bl	800b16e <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a4d0:	2308      	movs	r3, #8
 800a4d2:	2203      	movs	r2, #3
 800a4d4:	2182      	movs	r1, #130	@ 0x82
 800a4d6:	4620      	mov	r0, r4
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a4d8:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a4dc:	f000 fe47 	bl	800b16e <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a4e0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a4e4:	6425      	str	r5, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a4e6:	f000 fe99 	bl	800b21c <USBD_static_malloc>
 800a4ea:	4606      	mov	r6, r0
 800a4ec:	f8c4 02b8 	str.w	r0, [r4, #696]	@ 0x2b8
  if (pdev->pClassData == NULL)
 800a4f0:	b1f8      	cbz	r0, 800a532 <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a4f2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4798      	blx	r3
    hcdc->TxState = 0U;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
    hcdc->RxState = 0U;
 800a500:	f8c6 3218 	str.w	r3, [r6, #536]	@ 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a504:	7c23      	ldrb	r3, [r4, #16]
 800a506:	b993      	cbnz	r3, 800a52e <USBD_CDC_Init+0x84>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a508:	f44f 7300 	mov.w	r3, #512	@ 0x200
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a50c:	4629      	mov	r1, r5
 800a50e:	4620      	mov	r0, r4
 800a510:	f8d6 2204 	ldr.w	r2, [r6, #516]	@ 0x204
 800a514:	f000 fe75 	bl	800b202 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800a518:	2000      	movs	r0, #0
}
 800a51a:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a51c:	2340      	movs	r3, #64	@ 0x40
 800a51e:	2181      	movs	r1, #129	@ 0x81
 800a520:	2202      	movs	r2, #2
 800a522:	f000 fe24 	bl	800b16e <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a526:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a528:	2340      	movs	r3, #64	@ 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a52a:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a52c:	e7cb      	b.n	800a4c6 <USBD_CDC_Init+0x1c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a52e:	2340      	movs	r3, #64	@ 0x40
 800a530:	e7ec      	b.n	800a50c <USBD_CDC_Init+0x62>
    ret = 1U;
 800a532:	4628      	mov	r0, r5
 800a534:	e7f1      	b.n	800a51a <USBD_CDC_Init+0x70>

0800a536 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 800a536:	b119      	cbz	r1, 800a540 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 800a538:	f8c0 12bc 	str.w	r1, [r0, #700]	@ 0x2bc
    ret = USBD_OK;
 800a53c:	2000      	movs	r0, #0
 800a53e:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800a540:	2002      	movs	r0, #2
  }

  return ret;
}
 800a542:	4770      	bx	lr

0800a544 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a544:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 800a548:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800a54a:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a54e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
}
 800a552:	4770      	bx	lr

0800a554 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800a554:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  return USBD_OK;
}
 800a558:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800a55a:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204
}
 800a55e:	4770      	bx	lr

0800a560 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a560:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 800a564:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 800a566:	b182      	cbz	r2, 800a58a <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 800a568:	f8d2 4214 	ldr.w	r4, [r2, #532]	@ 0x214
 800a56c:	2301      	movs	r3, #1
 800a56e:	b974      	cbnz	r4, 800a58e <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a570:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a574:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a578:	2181      	movs	r1, #129	@ 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a57a:	6303      	str	r3, [r0, #48]	@ 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a57c:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 800a580:	b29b      	uxth	r3, r3
 800a582:	f000 fe35 	bl	800b1f0 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 800a586:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 800a588:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800a58a:	2002      	movs	r0, #2
 800a58c:	e7fc      	b.n	800a588 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 800a58e:	4618      	mov	r0, r3
 800a590:	e7fa      	b.n	800a588 <USBD_CDC_TransmitPacket+0x28>

0800a592 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a592:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 800a596:	b508      	push	{r3, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a598:	b162      	cbz	r2, 800a5b4 <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a59a:	7c03      	ldrb	r3, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a59c:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5a0:	b933      	cbnz	r3, 800a5b0 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 800a5a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a5a6:	2101      	movs	r1, #1
 800a5a8:	f000 fe2b 	bl	800b202 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a5ac:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 800a5ae:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 800a5b0:	2340      	movs	r3, #64	@ 0x40
 800a5b2:	e7f8      	b.n	800a5a6 <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 800a5b4:	2002      	movs	r0, #2
 800a5b6:	e7fa      	b.n	800a5ae <USBD_CDC_ReceivePacket+0x1c>

0800a5b8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a5b8:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a5ba:	b180      	cbz	r0, 800a5de <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a5bc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a5c0:	b113      	cbz	r3, 800a5c8 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	f8c0 32b4 	str.w	r3, [r0, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a5c8:	b109      	cbz	r1, 800a5ce <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800a5ca:	f8c0 12b0 	str.w	r1, [r0, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5ce:	2301      	movs	r3, #1
  pdev->id = id;
 800a5d0:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5d2:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a5d6:	f000 fd81 	bl	800b0dc <USBD_LL_Init>

  return USBD_OK;
 800a5da:	2000      	movs	r0, #0
}
 800a5dc:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800a5de:	2002      	movs	r0, #2
 800a5e0:	e7fc      	b.n	800a5dc <USBD_Init+0x24>

0800a5e2 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 800a5e2:	b119      	cbz	r1, 800a5ec <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a5e4:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
    status = USBD_OK;
 800a5e8:	2000      	movs	r0, #0
 800a5ea:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a5ec:	2002      	movs	r0, #2
  }

  return status;
}
 800a5ee:	4770      	bx	lr

0800a5f0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a5f0:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a5f2:	f000 fdb3 	bl	800b15c <USBD_LL_Start>

  return USBD_OK;
}
 800a5f6:	2000      	movs	r0, #0
 800a5f8:	bd08      	pop	{r3, pc}

0800a5fa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a5fa:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800a5fc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a600:	b133      	cbz	r3, 800a610 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4798      	blx	r3
 800a606:	3800      	subs	r0, #0
 800a608:	bf18      	it	ne
 800a60a:	2001      	movne	r0, #1
 800a60c:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 800a60e:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a610:	2002      	movs	r0, #2
 800a612:	e7fc      	b.n	800a60e <USBD_SetClassConfig+0x14>

0800a614 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a614:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a616:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	4798      	blx	r3

  return USBD_OK;
}
 800a61e:	2000      	movs	r0, #0
 800a620:	bd08      	pop	{r3, pc}

0800a622 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a622:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a624:	f500 752a 	add.w	r5, r0, #680	@ 0x2a8
{
 800a628:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a62a:	4628      	mov	r0, r5
 800a62c:	f000 fae2 	bl	800abf4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a630:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800a632:	f894 12a8 	ldrb.w	r1, [r4, #680]	@ 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 800a636:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 800a63a:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	@ 0x2ae
 800a63e:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800a642:	f001 031f 	and.w	r3, r1, #31
 800a646:	2b01      	cmp	r3, #1
 800a648:	d008      	beq.n	800a65c <USBD_LL_SetupStage+0x3a>
 800a64a:	2b02      	cmp	r3, #2
 800a64c:	d00b      	beq.n	800a666 <USBD_LL_SetupStage+0x44>
 800a64e:	b97b      	cbnz	r3, 800a670 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a650:	4629      	mov	r1, r5
 800a652:	4620      	mov	r0, r4
 800a654:	f000 f8fa 	bl	800a84c <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 800a658:	2000      	movs	r0, #0
 800a65a:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800a65c:	4629      	mov	r1, r5
 800a65e:	4620      	mov	r0, r4
 800a660:	f000 fa1c 	bl	800aa9c <USBD_StdItfReq>
      break;
 800a664:	e7f8      	b.n	800a658 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 800a666:	4629      	mov	r1, r5
 800a668:	4620      	mov	r0, r4
 800a66a:	f000 fa3b 	bl	800aae4 <USBD_StdEPReq>
      break;
 800a66e:	e7f3      	b.n	800a658 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a670:	4620      	mov	r0, r4
 800a672:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800a676:	f000 fd8f 	bl	800b198 <USBD_LL_StallEP>
      break;
 800a67a:	e7ed      	b.n	800a658 <USBD_LL_SetupStage+0x36>

0800a67c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a67c:	b570      	push	{r4, r5, r6, lr}
 800a67e:	4604      	mov	r4, r0
 800a680:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a682:	bb39      	cbnz	r1, 800a6d4 <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a684:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800a688:	2a03      	cmp	r2, #3
 800a68a:	d11c      	bne.n	800a6c6 <USBD_LL_DataOutStage+0x4a>
    {
      if (pep->rem_length > pep->maxpacket)
 800a68c:	e9d0 5258 	ldrd	r5, r2, [r0, #352]	@ 0x160
 800a690:	4295      	cmp	r5, r2
 800a692:	d90b      	bls.n	800a6ac <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -= pep->maxpacket;
 800a694:	1aad      	subs	r5, r5, r2

        USBD_CtlContinueRx(pdev, pdata,
 800a696:	42aa      	cmp	r2, r5
 800a698:	4631      	mov	r1, r6
        pep->rem_length -= pep->maxpacket;
 800a69a:	f8c0 5160 	str.w	r5, [r0, #352]	@ 0x160
        USBD_CtlContinueRx(pdev, pdata,
 800a69e:	bf8c      	ite	hi
 800a6a0:	b2aa      	uxthhi	r2, r5
 800a6a2:	b292      	uxthls	r2, r2
 800a6a4:	f000 fafa 	bl	800ac9c <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800a6a8:	2000      	movs	r0, #0
}
 800a6aa:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a6ac:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a6b0:	691b      	ldr	r3, [r3, #16]
 800a6b2:	b123      	cbz	r3, 800a6be <USBD_LL_DataOutStage+0x42>
 800a6b4:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800a6b8:	2a03      	cmp	r2, #3
 800a6ba:	d100      	bne.n	800a6be <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev);
 800a6bc:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800a6be:	4620      	mov	r0, r4
 800a6c0:	f000 faf4 	bl	800acac <USBD_CtlSendStatus>
 800a6c4:	e7f0      	b.n	800a6a8 <USBD_LL_DataOutStage+0x2c>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a6c6:	2a05      	cmp	r2, #5
 800a6c8:	d1ee      	bne.n	800a6a8 <USBD_LL_DataOutStage+0x2c>
        pdev->ep0_state = USBD_EP0_IDLE;
 800a6ca:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a6ce:	f000 fd63 	bl	800b198 <USBD_LL_StallEP>
 800a6d2:	e7e9      	b.n	800a6a8 <USBD_LL_DataOutStage+0x2c>
  else if ((pdev->pClass->DataOut != NULL) &&
 800a6d4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a6d8:	699b      	ldr	r3, [r3, #24]
 800a6da:	b12b      	cbz	r3, 800a6e8 <USBD_LL_DataOutStage+0x6c>
 800a6dc:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800a6e0:	2a03      	cmp	r2, #3
 800a6e2:	d101      	bne.n	800a6e8 <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 800a6e4:	4798      	blx	r3
 800a6e6:	e7df      	b.n	800a6a8 <USBD_LL_DataOutStage+0x2c>
    return USBD_FAIL;
 800a6e8:	2002      	movs	r0, #2
 800a6ea:	e7de      	b.n	800a6aa <USBD_LL_DataOutStage+0x2e>

0800a6ec <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	4613      	mov	r3, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a6f2:	460f      	mov	r7, r1
 800a6f4:	2900      	cmp	r1, #0
 800a6f6:	d149      	bne.n	800a78c <USBD_LL_DataInStage+0xa0>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a6f8:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800a6fc:	2a02      	cmp	r2, #2
 800a6fe:	d13a      	bne.n	800a776 <USBD_LL_DataInStage+0x8a>
    {
      if (pep->rem_length > pep->maxpacket)
 800a700:	e9d0 5608 	ldrd	r5, r6, [r0, #32]
 800a704:	42b5      	cmp	r5, r6
 800a706:	d911      	bls.n	800a72c <USBD_LL_DataInStage+0x40>
      {
        pep->rem_length -= pep->maxpacket;
 800a708:	1bad      	subs	r5, r5, r6

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a70a:	4619      	mov	r1, r3
        pep->rem_length -= pep->maxpacket;
 800a70c:	6205      	str	r5, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a70e:	b2aa      	uxth	r2, r5
 800a710:	f000 faaf 	bl	800ac72 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a714:	463b      	mov	r3, r7
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a716:	461a      	mov	r2, r3
 800a718:	4619      	mov	r1, r3
 800a71a:	4620      	mov	r0, r4
 800a71c:	f000 fd71 	bl	800b202 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a720:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 800a724:	2b01      	cmp	r3, #1
 800a726:	d02d      	beq.n	800a784 <USBD_LL_DataInStage+0x98>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800a728:	2000      	movs	r0, #0
}
 800a72a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a72c:	69c3      	ldr	r3, [r0, #28]
 800a72e:	fbb3 f5f6 	udiv	r5, r3, r6
 800a732:	fb06 3515 	mls	r5, r6, r5, r3
 800a736:	b965      	cbnz	r5, 800a752 <USBD_LL_DataInStage+0x66>
 800a738:	429e      	cmp	r6, r3
 800a73a:	d80a      	bhi.n	800a752 <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 800a73c:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 800a740:	4293      	cmp	r3, r2
 800a742:	d206      	bcs.n	800a752 <USBD_LL_DataInStage+0x66>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a744:	462a      	mov	r2, r5
 800a746:	f000 fa94 	bl	800ac72 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a74a:	462b      	mov	r3, r5
          pdev->ep0_data_len = 0U;
 800a74c:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a750:	e7e1      	b.n	800a716 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a752:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	b12b      	cbz	r3, 800a766 <USBD_LL_DataInStage+0x7a>
 800a75a:	f894 229c 	ldrb.w	r2, [r4, #668]	@ 0x29c
 800a75e:	2a03      	cmp	r2, #3
 800a760:	d101      	bne.n	800a766 <USBD_LL_DataInStage+0x7a>
            pdev->pClass->EP0_TxSent(pdev);
 800a762:	4620      	mov	r0, r4
 800a764:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 800a766:	2180      	movs	r1, #128	@ 0x80
 800a768:	4620      	mov	r0, r4
 800a76a:	f000 fd15 	bl	800b198 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a76e:	4620      	mov	r0, r4
 800a770:	f000 faa7 	bl	800acc2 <USBD_CtlReceiveStatus>
 800a774:	e7d4      	b.n	800a720 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a776:	f032 0304 	bics.w	r3, r2, #4
 800a77a:	d1d1      	bne.n	800a720 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 800a77c:	2180      	movs	r1, #128	@ 0x80
 800a77e:	f000 fd0b 	bl	800b198 <USBD_LL_StallEP>
 800a782:	e7cd      	b.n	800a720 <USBD_LL_DataInStage+0x34>
      pdev->dev_test_mode = 0U;
 800a784:	2300      	movs	r3, #0
 800a786:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
 800a78a:	e7cd      	b.n	800a728 <USBD_LL_DataInStage+0x3c>
  else if ((pdev->pClass->DataIn != NULL) &&
 800a78c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a790:	695b      	ldr	r3, [r3, #20]
 800a792:	b12b      	cbz	r3, 800a7a0 <USBD_LL_DataInStage+0xb4>
 800a794:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800a798:	2a03      	cmp	r2, #3
 800a79a:	d101      	bne.n	800a7a0 <USBD_LL_DataInStage+0xb4>
    pdev->pClass->DataIn(pdev, epnum);
 800a79c:	4798      	blx	r3
 800a79e:	e7c3      	b.n	800a728 <USBD_LL_DataInStage+0x3c>
    return USBD_FAIL;
 800a7a0:	2002      	movs	r0, #2
 800a7a2:	e7c2      	b.n	800a72a <USBD_LL_DataInStage+0x3e>

0800a7a4 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a7a4:	2200      	movs	r2, #0
{
 800a7a6:	b570      	push	{r4, r5, r6, lr}
 800a7a8:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a7aa:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a7ac:	2640      	movs	r6, #64	@ 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a7ae:	4611      	mov	r1, r2
 800a7b0:	2340      	movs	r3, #64	@ 0x40
 800a7b2:	f000 fcdc 	bl	800b16e <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a7b6:	4633      	mov	r3, r6
 800a7b8:	2180      	movs	r1, #128	@ 0x80
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a7be:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a7c2:	f8c4 6164 	str.w	r6, [r4, #356]	@ 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a7c6:	f000 fcd2 	bl	800b16e <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800a7ca:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800a7cc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a7d0:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a7d2:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a7d4:	f884 529c 	strb.w	r5, [r4, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a7d8:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a7dc:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 800a7de:	f8c4 12a4 	str.w	r1, [r4, #676]	@ 0x2a4
  if (pdev->pClassData)
 800a7e2:	b123      	cbz	r3, 800a7ee <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a7e4:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	4798      	blx	r3
  }

  return USBD_OK;
}
 800a7ee:	2000      	movs	r0, #0
 800a7f0:	bd70      	pop	{r4, r5, r6, pc}

0800a7f2 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800a7f2:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	4770      	bx	lr

0800a7f8 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800a7f8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a7fc:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a800:	2304      	movs	r3, #4
 800a802:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 800a806:	2000      	movs	r0, #0
 800a808:	4770      	bx	lr

0800a80a <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a80a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a80e:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 800a810:	bf04      	itt	eq
 800a812:	f890 329d 	ldrbeq.w	r3, [r0, #669]	@ 0x29d
 800a816:	f880 329c 	strbeq.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 800a81a:	2000      	movs	r0, #0
 800a81c:	4770      	bx	lr

0800a81e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a81e:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a820:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800a824:	2a03      	cmp	r2, #3
 800a826:	d104      	bne.n	800a832 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 800a828:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a82c:	69db      	ldr	r3, [r3, #28]
 800a82e:	b103      	cbz	r3, 800a832 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800a830:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 800a832:	2000      	movs	r0, #0
 800a834:	bd08      	pop	{r3, pc}

0800a836 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 800a836:	b510      	push	{r4, lr}
 800a838:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 800a83a:	2180      	movs	r1, #128	@ 0x80
 800a83c:	f000 fcac 	bl	800b198 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a840:	4620      	mov	r0, r4
}
 800a842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800a846:	2100      	movs	r1, #0
 800a848:	f000 bca6 	b.w	800b198 <USBD_LL_StallEP>

0800a84c <USBD_StdDevReq>:
{
 800a84c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a84e:	780b      	ldrb	r3, [r1, #0]
 800a850:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a852:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a856:	2b20      	cmp	r3, #32
{
 800a858:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a85a:	d012      	beq.n	800a882 <USBD_StdDevReq+0x36>
 800a85c:	2b40      	cmp	r3, #64	@ 0x40
 800a85e:	d010      	beq.n	800a882 <USBD_StdDevReq+0x36>
 800a860:	2b00      	cmp	r3, #0
 800a862:	d151      	bne.n	800a908 <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 800a864:	784b      	ldrb	r3, [r1, #1]
 800a866:	2b09      	cmp	r3, #9
 800a868:	d84e      	bhi.n	800a908 <USBD_StdDevReq+0xbc>
 800a86a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a86e:	00ee      	.short	0x00ee
 800a870:	004d0109 	.word	0x004d0109
 800a874:	004d0102 	.word	0x004d0102
 800a878:	00130087 	.word	0x00130087
 800a87c:	00d6004d 	.word	0x00d6004d
 800a880:	00a3      	.short	0x00a3
      pdev->pClass->Setup(pdev, req);
 800a882:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 800a886:	4629      	mov	r1, r5
 800a888:	4620      	mov	r0, r4
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	4798      	blx	r3
}
 800a88e:	2000      	movs	r0, #0
 800a890:	b003      	add	sp, #12
 800a892:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 800a894:	2300      	movs	r3, #0
 800a896:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800a89a:	884b      	ldrh	r3, [r1, #2]
 800a89c:	0a1a      	lsrs	r2, r3, #8
 800a89e:	3a01      	subs	r2, #1
 800a8a0:	2a06      	cmp	r2, #6
 800a8a2:	d831      	bhi.n	800a908 <USBD_StdDevReq+0xbc>
 800a8a4:	e8df f002 	tbb	[pc, r2]
 800a8a8:	30231604 	.word	0x30231604
 800a8ac:	4830      	.short	0x4830
 800a8ae:	52          	.byte	0x52
 800a8af:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a8b0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800a8b4:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a8b6:	7c20      	ldrb	r0, [r4, #16]
 800a8b8:	f10d 0106 	add.w	r1, sp, #6
 800a8bc:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 800a8be:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a8c2:	88eb      	ldrh	r3, [r5, #6]
 800a8c4:	2a00      	cmp	r2, #0
 800a8c6:	d055      	beq.n	800a974 <USBD_StdDevReq+0x128>
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d14a      	bne.n	800a962 <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	f000 f9ed 	bl	800acac <USBD_CtlSendStatus>
 800a8d2:	e7dc      	b.n	800a88e <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8d4:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 800a8d6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8da:	b932      	cbnz	r2, 800a8ea <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a8dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a8de:	f10d 0006 	add.w	r0, sp, #6
 800a8e2:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a8e4:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a8e6:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800a8e8:	e7e9      	b.n	800a8be <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a8ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8ec:	e7f7      	b.n	800a8de <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	2b05      	cmp	r3, #5
 800a8f2:	d809      	bhi.n	800a908 <USBD_StdDevReq+0xbc>
 800a8f4:	e8df f003 	tbb	[pc, r3]
 800a8f8:	14100c03 	.word	0x14100c03
 800a8fc:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a8fe:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800a902:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a904:	2b00      	cmp	r3, #0
 800a906:	d1d6      	bne.n	800a8b6 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 800a908:	4620      	mov	r0, r4
 800a90a:	f7ff ff94 	bl	800a836 <USBD_CtlError.constprop.0>
        break;
 800a90e:	e7be      	b.n	800a88e <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a910:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	e7f5      	b.n	800a904 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a918:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800a91c:	68db      	ldr	r3, [r3, #12]
 800a91e:	e7f1      	b.n	800a904 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a920:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800a924:	691b      	ldr	r3, [r3, #16]
 800a926:	e7ed      	b.n	800a904 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a928:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800a92c:	695b      	ldr	r3, [r3, #20]
 800a92e:	e7e9      	b.n	800a904 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a930:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800a934:	699b      	ldr	r3, [r3, #24]
 800a936:	e7e5      	b.n	800a904 <USBD_StdDevReq+0xb8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a938:	7c03      	ldrb	r3, [r0, #16]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d1e4      	bne.n	800a908 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a93e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a942:	f10d 0006 	add.w	r0, sp, #6
 800a946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a948:	4798      	blx	r3
  if (err != 0U)
 800a94a:	e7b8      	b.n	800a8be <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a94c:	7c03      	ldrb	r3, [r0, #16]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d1da      	bne.n	800a908 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a952:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800a956:	f10d 0006 	add.w	r0, sp, #6
 800a95a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a95c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a95e:	2307      	movs	r3, #7
 800a960:	e7c1      	b.n	800a8e6 <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 800a962:	429a      	cmp	r2, r3
 800a964:	bf28      	it	cs
 800a966:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a968:	4601      	mov	r1, r0
 800a96a:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800a96c:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a970:	f000 f972 	bl	800ac58 <USBD_CtlSendData>
    if (req->wLength == 0U)
 800a974:	88eb      	ldrh	r3, [r5, #6]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d189      	bne.n	800a88e <USBD_StdDevReq+0x42>
 800a97a:	e7a7      	b.n	800a8cc <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a97c:	888b      	ldrh	r3, [r1, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d1c2      	bne.n	800a908 <USBD_StdDevReq+0xbc>
 800a982:	88cb      	ldrh	r3, [r1, #6]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d1bf      	bne.n	800a908 <USBD_StdDevReq+0xbc>
 800a988:	884d      	ldrh	r5, [r1, #2]
 800a98a:	2d7f      	cmp	r5, #127	@ 0x7f
 800a98c:	d8bc      	bhi.n	800a908 <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a98e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a992:	2b03      	cmp	r3, #3
 800a994:	d0b8      	beq.n	800a908 <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a996:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800a998:	f880 129e 	strb.w	r1, [r0, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a99c:	f000 fc1f 	bl	800b1de <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	f000 f983 	bl	800acac <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800a9a6:	b11d      	cbz	r5, 800a9b0 <USBD_StdDevReq+0x164>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9a8:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a9aa:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800a9ae:	e76e      	b.n	800a88e <USBD_StdDevReq+0x42>
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e7fa      	b.n	800a9aa <USBD_StdDevReq+0x15e>
  cfgidx = (uint8_t)(req->wValue);
 800a9b4:	7889      	ldrb	r1, [r1, #2]
 800a9b6:	4d38      	ldr	r5, [pc, #224]	@ (800aa98 <USBD_StdDevReq+0x24c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a9b8:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800a9ba:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a9bc:	d8a4      	bhi.n	800a908 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 800a9be:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800a9c2:	2b02      	cmp	r3, #2
 800a9c4:	d008      	beq.n	800a9d8 <USBD_StdDevReq+0x18c>
 800a9c6:	2b03      	cmp	r3, #3
 800a9c8:	d015      	beq.n	800a9f6 <USBD_StdDevReq+0x1aa>
        USBD_CtlError(pdev, req);
 800a9ca:	f7ff ff34 	bl	800a836 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	7829      	ldrb	r1, [r5, #0]
 800a9d2:	f7ff fe1f 	bl	800a614 <USBD_ClrClassConfig>
        break;
 800a9d6:	e75a      	b.n	800a88e <USBD_StdDevReq+0x42>
        if (cfgidx)
 800a9d8:	2900      	cmp	r1, #0
 800a9da:	f43f af77 	beq.w	800a8cc <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 800a9de:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a9e0:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 800a9e2:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a9e4:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	f7ff fe06 	bl	800a5fa <USBD_SetClassConfig>
 800a9ee:	2802      	cmp	r0, #2
 800a9f0:	f47f af6c 	bne.w	800a8cc <USBD_StdDevReq+0x80>
 800a9f4:	e788      	b.n	800a908 <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 800a9f6:	b931      	cbnz	r1, 800aa06 <USBD_StdDevReq+0x1ba>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9f8:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800a9fa:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9fc:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 800aa00:	f7ff fe08 	bl	800a614 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800aa04:	e762      	b.n	800a8cc <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 800aa06:	6841      	ldr	r1, [r0, #4]
 800aa08:	2901      	cmp	r1, #1
 800aa0a:	f43f af5f 	beq.w	800a8cc <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa0e:	b2c9      	uxtb	r1, r1
 800aa10:	f7ff fe00 	bl	800a614 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800aa14:	7829      	ldrb	r1, [r5, #0]
 800aa16:	6061      	str	r1, [r4, #4]
 800aa18:	e7e6      	b.n	800a9e8 <USBD_StdDevReq+0x19c>
  if (req->wLength != 1U)
 800aa1a:	88ca      	ldrh	r2, [r1, #6]
 800aa1c:	2a01      	cmp	r2, #1
 800aa1e:	f47f af73 	bne.w	800a908 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 800aa22:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800aa26:	2b02      	cmp	r3, #2
 800aa28:	d80a      	bhi.n	800aa40 <USBD_StdDevReq+0x1f4>
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	f43f af6c 	beq.w	800a908 <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 800aa30:	4601      	mov	r1, r0
 800aa32:	2300      	movs	r3, #0
 800aa34:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800aa38:	4620      	mov	r0, r4
 800aa3a:	f000 f90d 	bl	800ac58 <USBD_CtlSendData>
      break;
 800aa3e:	e726      	b.n	800a88e <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 800aa40:	2b03      	cmp	r3, #3
 800aa42:	f47f af61 	bne.w	800a908 <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800aa46:	1d01      	adds	r1, r0, #4
 800aa48:	e7f6      	b.n	800aa38 <USBD_StdDevReq+0x1ec>
  switch (pdev->dev_state)
 800aa4a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800aa4e:	3b01      	subs	r3, #1
 800aa50:	2b02      	cmp	r3, #2
 800aa52:	f63f af59 	bhi.w	800a908 <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 800aa56:	88ca      	ldrh	r2, [r1, #6]
 800aa58:	2a02      	cmp	r2, #2
 800aa5a:	f47f af55 	bne.w	800a908 <USBD_StdDevReq+0xbc>
      if (pdev->dev_remote_wakeup)
 800aa5e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 800aa62:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	bf0c      	ite	eq
 800aa68:	2301      	moveq	r3, #1
 800aa6a:	2303      	movne	r3, #3
 800aa6c:	f841 3f0c 	str.w	r3, [r1, #12]!
 800aa70:	e7e2      	b.n	800aa38 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa72:	884b      	ldrh	r3, [r1, #2]
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	f47f af0a 	bne.w	800a88e <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 800aa7a:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
 800aa7e:	e725      	b.n	800a8cc <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 800aa80:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800aa84:	3b01      	subs	r3, #1
 800aa86:	2b02      	cmp	r3, #2
 800aa88:	f63f af3e 	bhi.w	800a908 <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa8c:	884b      	ldrh	r3, [r1, #2]
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	f47f aefd 	bne.w	800a88e <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 800aa94:	2300      	movs	r3, #0
 800aa96:	e7f0      	b.n	800aa7a <USBD_StdDevReq+0x22e>
 800aa98:	20000b08 	.word	0x20000b08

0800aa9c <USBD_StdItfReq>:
{
 800aa9c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa9e:	780b      	ldrb	r3, [r1, #0]
{
 800aaa0:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aaa2:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800aaa6:	065b      	lsls	r3, r3, #25
{
 800aaa8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aaaa:	d501      	bpl.n	800aab0 <USBD_StdItfReq+0x14>
 800aaac:	2a40      	cmp	r2, #64	@ 0x40
 800aaae:	d115      	bne.n	800aadc <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 800aab0:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 800aab4:	3b01      	subs	r3, #1
 800aab6:	2b02      	cmp	r3, #2
 800aab8:	d810      	bhi.n	800aadc <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aaba:	792b      	ldrb	r3, [r5, #4]
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d80d      	bhi.n	800aadc <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aac0:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 800aac4:	4629      	mov	r1, r5
 800aac6:	689b      	ldr	r3, [r3, #8]
 800aac8:	4620      	mov	r0, r4
 800aaca:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aacc:	88eb      	ldrh	r3, [r5, #6]
 800aace:	b91b      	cbnz	r3, 800aad8 <USBD_StdItfReq+0x3c>
 800aad0:	b910      	cbnz	r0, 800aad8 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 800aad2:	4620      	mov	r0, r4
 800aad4:	f000 f8ea 	bl	800acac <USBD_CtlSendStatus>
}
 800aad8:	2000      	movs	r0, #0
 800aada:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 800aadc:	4620      	mov	r0, r4
 800aade:	f7ff feaa 	bl	800a836 <USBD_CtlError.constprop.0>
          break;
 800aae2:	e7f9      	b.n	800aad8 <USBD_StdItfReq+0x3c>

0800aae4 <USBD_StdEPReq>:
{
 800aae4:	b538      	push	{r3, r4, r5, lr}
 800aae6:	780a      	ldrb	r2, [r1, #0]
 800aae8:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 800aaea:	f002 0260 	and.w	r2, r2, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aaee:	2a20      	cmp	r2, #32
{
 800aaf0:	460b      	mov	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 800aaf2:	888d      	ldrh	r5, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aaf4:	d026      	beq.n	800ab44 <USBD_StdEPReq+0x60>
 800aaf6:	2a40      	cmp	r2, #64	@ 0x40
 800aaf8:	d024      	beq.n	800ab44 <USBD_StdEPReq+0x60>
 800aafa:	bb8a      	cbnz	r2, 800ab60 <USBD_StdEPReq+0x7c>
      switch (req->bRequest)
 800aafc:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800aafe:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 800ab00:	2a01      	cmp	r2, #1
 800ab02:	d03d      	beq.n	800ab80 <USBD_StdEPReq+0x9c>
 800ab04:	2a03      	cmp	r2, #3
 800ab06:	d025      	beq.n	800ab54 <USBD_StdEPReq+0x70>
 800ab08:	bb52      	cbnz	r2, 800ab60 <USBD_StdEPReq+0x7c>
          switch (pdev->dev_state)
 800ab0a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800ab0e:	2b02      	cmp	r3, #2
 800ab10:	d04d      	beq.n	800abae <USBD_StdEPReq+0xca>
 800ab12:	2b03      	cmp	r3, #3
 800ab14:	d124      	bne.n	800ab60 <USBD_StdEPReq+0x7c>
              if ((ep_addr & 0x80U) == 0x80U)
 800ab16:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ab18:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 800ab1c:	f015 0f80 	tst.w	r5, #128	@ 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ab20:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 800ab24:	d053      	beq.n	800abce <USBD_StdEPReq+0xea>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ab26:	699b      	ldr	r3, [r3, #24]
 800ab28:	b1d3      	cbz	r3, 800ab60 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab2a:	2514      	movs	r5, #20
 800ab2c:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 800ab30:	fb03 5505 	mla	r5, r3, r5, r5
 800ab34:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab36:	064b      	lsls	r3, r1, #25
 800ab38:	d155      	bne.n	800abe6 <USBD_StdEPReq+0x102>
{
 800ab3a:	2300      	movs	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ab3c:	2202      	movs	r2, #2
 800ab3e:	4629      	mov	r1, r5
                pep->status = 0x0000U;
 800ab40:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ab42:	e040      	b.n	800abc6 <USBD_StdEPReq+0xe2>
      pdev->pClass->Setup(pdev, req);
 800ab44:	f8d4 22b4 	ldr.w	r2, [r4, #692]	@ 0x2b4
 800ab48:	4619      	mov	r1, r3
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	6892      	ldr	r2, [r2, #8]
 800ab4e:	4790      	blx	r2
}
 800ab50:	2000      	movs	r0, #0
 800ab52:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 800ab54:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800ab58:	2a02      	cmp	r2, #2
 800ab5a:	d01f      	beq.n	800ab9c <USBD_StdEPReq+0xb8>
 800ab5c:	2a03      	cmp	r2, #3
 800ab5e:	d003      	beq.n	800ab68 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 800ab60:	4620      	mov	r0, r4
 800ab62:	f7ff fe68 	bl	800a836 <USBD_CtlError.constprop.0>
              break;
 800ab66:	e7f3      	b.n	800ab50 <USBD_StdEPReq+0x6c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab68:	885a      	ldrh	r2, [r3, #2]
 800ab6a:	b92a      	cbnz	r2, 800ab78 <USBD_StdEPReq+0x94>
                if ((ep_addr != 0x00U) &&
 800ab6c:	064a      	lsls	r2, r1, #25
 800ab6e:	d003      	beq.n	800ab78 <USBD_StdEPReq+0x94>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ab70:	88db      	ldrh	r3, [r3, #6]
 800ab72:	b90b      	cbnz	r3, 800ab78 <USBD_StdEPReq+0x94>
                  USBD_LL_StallEP(pdev, ep_addr);
 800ab74:	f000 fb10 	bl	800b198 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 800ab78:	4620      	mov	r0, r4
 800ab7a:	f000 f897 	bl	800acac <USBD_CtlSendStatus>
              break;
 800ab7e:	e7e7      	b.n	800ab50 <USBD_StdEPReq+0x6c>
          switch (pdev->dev_state)
 800ab80:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 800ab84:	2a02      	cmp	r2, #2
 800ab86:	d009      	beq.n	800ab9c <USBD_StdEPReq+0xb8>
 800ab88:	2a03      	cmp	r2, #3
 800ab8a:	d1e9      	bne.n	800ab60 <USBD_StdEPReq+0x7c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab8c:	885b      	ldrh	r3, [r3, #2]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d1de      	bne.n	800ab50 <USBD_StdEPReq+0x6c>
                if ((ep_addr & 0x7FU) != 0x00U)
 800ab92:	064d      	lsls	r5, r1, #25
 800ab94:	d0f0      	beq.n	800ab78 <USBD_StdEPReq+0x94>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800ab96:	f000 fb08 	bl	800b1aa <USBD_LL_ClearStallEP>
 800ab9a:	e7ed      	b.n	800ab78 <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab9c:	064b      	lsls	r3, r1, #25
 800ab9e:	d0df      	beq.n	800ab60 <USBD_StdEPReq+0x7c>
                USBD_LL_StallEP(pdev, ep_addr);
 800aba0:	f000 fafa 	bl	800b198 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800aba4:	2180      	movs	r1, #128	@ 0x80
 800aba6:	4620      	mov	r0, r4
 800aba8:	f000 faf6 	bl	800b198 <USBD_LL_StallEP>
 800abac:	e7d0      	b.n	800ab50 <USBD_StdEPReq+0x6c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800abae:	0649      	lsls	r1, r1, #25
 800abb0:	d1d6      	bne.n	800ab60 <USBD_StdEPReq+0x7c>
              pep->status = 0x0000U;
 800abb2:	2300      	movs	r3, #0
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abb4:	062a      	lsls	r2, r5, #24
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800abb6:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abba:	bf4c      	ite	mi
 800abbc:	f100 0114 	addmi.w	r1, r0, #20
 800abc0:	f500 71aa 	addpl.w	r1, r0, #340	@ 0x154
              pep->status = 0x0000U;
 800abc4:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800abc6:	4620      	mov	r0, r4
 800abc8:	f000 f846 	bl	800ac58 <USBD_CtlSendData>
              break;
 800abcc:	e7c0      	b.n	800ab50 <USBD_StdEPReq+0x6c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800abce:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d0c4      	beq.n	800ab60 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abd6:	2314      	movs	r3, #20
                    &pdev->ep_out[ep_addr & 0x7FU];
 800abd8:	f001 057f 	and.w	r5, r1, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abdc:	fb03 0505 	mla	r5, r3, r5, r0
 800abe0:	f505 75aa 	add.w	r5, r5, #340	@ 0x154
 800abe4:	e7a7      	b.n	800ab36 <USBD_StdEPReq+0x52>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800abe6:	4620      	mov	r0, r4
 800abe8:	f000 fae8 	bl	800b1bc <USBD_LL_IsStallEP>
 800abec:	2800      	cmp	r0, #0
 800abee:	d0a4      	beq.n	800ab3a <USBD_StdEPReq+0x56>
 800abf0:	2301      	movs	r3, #1
 800abf2:	e7a3      	b.n	800ab3c <USBD_StdEPReq+0x58>

0800abf4 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 800abf4:	780b      	ldrb	r3, [r1, #0]
 800abf6:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800abf8:	784b      	ldrb	r3, [r1, #1]
 800abfa:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800abfc:	884b      	ldrh	r3, [r1, #2]
 800abfe:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800ac00:	888b      	ldrh	r3, [r1, #4]
 800ac02:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800ac04:	88cb      	ldrh	r3, [r1, #6]
 800ac06:	80c3      	strh	r3, [r0, #6]
}
 800ac08:	4770      	bx	lr

0800ac0a <USBD_CtlError>:
{
 800ac0a:	b510      	push	{r4, lr}
 800ac0c:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 800ac0e:	2180      	movs	r1, #128	@ 0x80
 800ac10:	f000 fac2 	bl	800b198 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ac14:	4620      	mov	r0, r4
}
 800ac16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800ac1a:	2100      	movs	r1, #0
 800ac1c:	f000 babc 	b.w	800b198 <USBD_LL_StallEP>

0800ac20 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ac20:	b570      	push	{r4, r5, r6, lr}
 800ac22:	460d      	mov	r5, r1
 800ac24:	4616      	mov	r6, r2
  uint8_t idx = 0U;

  if (desc != NULL)
 800ac26:	4604      	mov	r4, r0
 800ac28:	b170      	cbz	r0, 800ac48 <USBD_GetString+0x28>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 800ac2a:	f7fa fa9b 	bl	8005164 <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ac2e:	b2c3      	uxtb	r3, r0
 800ac30:	3301      	adds	r3, #1
 800ac32:	005b      	lsls	r3, r3, #1
 800ac34:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ac36:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ac38:	2303      	movs	r3, #3
      unicode[idx++] =  0U;
 800ac3a:	2000      	movs	r0, #0
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ac3c:	706b      	strb	r3, [r5, #1]
 800ac3e:	2302      	movs	r3, #2
 800ac40:	3c01      	subs	r4, #1
    while (*desc != '\0')
 800ac42:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800ac46:	b901      	cbnz	r1, 800ac4a <USBD_GetString+0x2a>
}
 800ac48:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 800ac4a:	1c5a      	adds	r2, r3, #1
 800ac4c:	54e9      	strb	r1, [r5, r3]
 800ac4e:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 800ac50:	3302      	adds	r3, #2
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	54a8      	strb	r0, [r5, r2]
 800ac56:	e7f4      	b.n	800ac42 <USBD_GetString+0x22>

0800ac58 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800ac58:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ac5a:	2202      	movs	r2, #2
{
 800ac5c:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 800ac5e:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ac62:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ac66:	460a      	mov	r2, r1
 800ac68:	2100      	movs	r1, #0
 800ac6a:	f000 fac1 	bl	800b1f0 <USBD_LL_Transmit>

  return USBD_OK;
}
 800ac6e:	2000      	movs	r0, #0
 800ac70:	bd10      	pop	{r4, pc}

0800ac72 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ac72:	b508      	push	{r3, lr}
 800ac74:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ac76:	460a      	mov	r2, r1
 800ac78:	2100      	movs	r1, #0
 800ac7a:	f000 fab9 	bl	800b1f0 <USBD_LL_Transmit>

  return USBD_OK;
}
 800ac7e:	2000      	movs	r0, #0
 800ac80:	bd08      	pop	{r3, pc}

0800ac82 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800ac82:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ac84:	2203      	movs	r2, #3
{
 800ac86:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 800ac88:	e9c0 3357 	strd	r3, r3, [r0, #348]	@ 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ac8c:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac90:	460a      	mov	r2, r1
 800ac92:	2100      	movs	r1, #0
 800ac94:	f000 fab5 	bl	800b202 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800ac98:	2000      	movs	r0, #0
 800ac9a:	bd10      	pop	{r4, pc}

0800ac9c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800ac9c:	b508      	push	{r3, lr}
 800ac9e:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aca0:	460a      	mov	r2, r1
 800aca2:	2100      	movs	r1, #0
 800aca4:	f000 faad 	bl	800b202 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800aca8:	2000      	movs	r0, #0
 800acaa:	bd08      	pop	{r3, pc}

0800acac <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800acac:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800acae:	2304      	movs	r3, #4
 800acb0:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800acb4:	2300      	movs	r3, #0
 800acb6:	461a      	mov	r2, r3
 800acb8:	4619      	mov	r1, r3
 800acba:	f000 fa99 	bl	800b1f0 <USBD_LL_Transmit>

  return USBD_OK;
}
 800acbe:	2000      	movs	r0, #0
 800acc0:	bd08      	pop	{r3, pc}

0800acc2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800acc2:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800acc4:	2305      	movs	r3, #5
 800acc6:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800acca:	2300      	movs	r3, #0
 800accc:	461a      	mov	r2, r3
 800acce:	4619      	mov	r1, r3
 800acd0:	f000 fa97 	bl	800b202 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800acd4:	2000      	movs	r0, #0
 800acd6:	bd08      	pop	{r3, pc}

0800acd8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800acd8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800acda:	2200      	movs	r2, #0
 800acdc:	490e      	ldr	r1, [pc, #56]	@ (800ad18 <MX_USB_DEVICE_Init+0x40>)
 800acde:	480f      	ldr	r0, [pc, #60]	@ (800ad1c <MX_USB_DEVICE_Init+0x44>)
 800ace0:	f7ff fc6a 	bl	800a5b8 <USBD_Init>
 800ace4:	b108      	cbz	r0, 800acea <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 800ace6:	f7fb f8e9 	bl	8005ebc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800acea:	490d      	ldr	r1, [pc, #52]	@ (800ad20 <MX_USB_DEVICE_Init+0x48>)
 800acec:	480b      	ldr	r0, [pc, #44]	@ (800ad1c <MX_USB_DEVICE_Init+0x44>)
 800acee:	f7ff fc78 	bl	800a5e2 <USBD_RegisterClass>
 800acf2:	b108      	cbz	r0, 800acf8 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 800acf4:	f7fb f8e2 	bl	8005ebc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800acf8:	490a      	ldr	r1, [pc, #40]	@ (800ad24 <MX_USB_DEVICE_Init+0x4c>)
 800acfa:	4808      	ldr	r0, [pc, #32]	@ (800ad1c <MX_USB_DEVICE_Init+0x44>)
 800acfc:	f7ff fc1b 	bl	800a536 <USBD_CDC_RegisterInterface>
 800ad00:	b108      	cbz	r0, 800ad06 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800ad02:	f7fb f8db 	bl	8005ebc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ad06:	4805      	ldr	r0, [pc, #20]	@ (800ad1c <MX_USB_DEVICE_Init+0x44>)
 800ad08:	f7ff fc72 	bl	800a5f0 <USBD_Start>
 800ad0c:	b118      	cbz	r0, 800ad16 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ad0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800ad12:	f7fb b8d3 	b.w	8005ebc <Error_Handler>
}
 800ad16:	bd08      	pop	{r3, pc}
 800ad18:	20000174 	.word	0x20000174
 800ad1c:	20000b0c 	.word	0x20000b0c
 800ad20:	200000e0 	.word	0x200000e0
 800ad24:	20000124 	.word	0x20000124

0800ad28 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
    /* USER CODE BEGIN 4 */
    return (USBD_OK);
    /* USER CODE END 4 */
}
 800ad28:	2000      	movs	r0, #0
 800ad2a:	4770      	bx	lr

0800ad2c <CDC_Control_FS>:
 * USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
    /* USER CODE BEGIN 5 */
    switch (cmd)
 800ad2c:	2820      	cmp	r0, #32
 800ad2e:	d003      	beq.n	800ad38 <CDC_Control_FS+0xc>
 800ad30:	2821      	cmp	r0, #33	@ 0x21
 800ad32:	d017      	beq.n	800ad64 <CDC_Control_FS+0x38>
        break;
    }

    return (USBD_OK);
    /* USER CODE END 5 */
}
 800ad34:	2000      	movs	r0, #0
 800ad36:	4770      	bx	lr
        LineCoding.bitrate = (uint32_t)(pbuf[0]);
 800ad38:	780b      	ldrb	r3, [r1, #0]
 800ad3a:	4a13      	ldr	r2, [pc, #76]	@ (800ad88 <CDC_Control_FS+0x5c>)
 800ad3c:	6013      	str	r3, [r2, #0]
        LineCoding.bitrate |= (uint32_t)(pbuf[1] << 8);
 800ad3e:	7848      	ldrb	r0, [r1, #1]
 800ad40:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800ad44:	6013      	str	r3, [r2, #0]
        LineCoding.bitrate |= (uint32_t)(pbuf[2] << 16);
 800ad46:	7888      	ldrb	r0, [r1, #2]
 800ad48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ad4c:	6013      	str	r3, [r2, #0]
        LineCoding.bitrate |= (uint32_t)(pbuf[3] << 24);
 800ad4e:	78c8      	ldrb	r0, [r1, #3]
 800ad50:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800ad54:	6013      	str	r3, [r2, #0]
        LineCoding.format     = pbuf[4];
 800ad56:	790b      	ldrb	r3, [r1, #4]
 800ad58:	7113      	strb	r3, [r2, #4]
        LineCoding.paritytype = pbuf[5];
 800ad5a:	794b      	ldrb	r3, [r1, #5]
 800ad5c:	7153      	strb	r3, [r2, #5]
        LineCoding.datatype   = pbuf[6];
 800ad5e:	798b      	ldrb	r3, [r1, #6]
 800ad60:	7193      	strb	r3, [r2, #6]
        break;
 800ad62:	e7e7      	b.n	800ad34 <CDC_Control_FS+0x8>
        pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800ad64:	4b08      	ldr	r3, [pc, #32]	@ (800ad88 <CDC_Control_FS+0x5c>)
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	700a      	strb	r2, [r1, #0]
        pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	0a12      	lsrs	r2, r2, #8
 800ad6e:	704a      	strb	r2, [r1, #1]
        pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800ad70:	885a      	ldrh	r2, [r3, #2]
 800ad72:	708a      	strb	r2, [r1, #2]
        pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800ad74:	78da      	ldrb	r2, [r3, #3]
 800ad76:	70ca      	strb	r2, [r1, #3]
        pbuf[4] = LineCoding.format;
 800ad78:	791a      	ldrb	r2, [r3, #4]
 800ad7a:	710a      	strb	r2, [r1, #4]
        pbuf[5] = LineCoding.paritytype;
 800ad7c:	795a      	ldrb	r2, [r3, #5]
 800ad7e:	714a      	strb	r2, [r1, #5]
        pbuf[6] = LineCoding.datatype;
 800ad80:	799b      	ldrb	r3, [r3, #6]
 800ad82:	718b      	strb	r3, [r1, #6]
        break;
 800ad84:	e7d6      	b.n	800ad34 <CDC_Control_FS+0x8>
 800ad86:	bf00      	nop
 800ad88:	20000138 	.word	0x20000138

0800ad8c <CDC_Init_FS>:
{
 800ad8c:	b510      	push	{r4, lr}
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ad8e:	4c06      	ldr	r4, [pc, #24]	@ (800ada8 <CDC_Init_FS+0x1c>)
 800ad90:	2200      	movs	r2, #0
 800ad92:	4620      	mov	r0, r4
 800ad94:	4905      	ldr	r1, [pc, #20]	@ (800adac <CDC_Init_FS+0x20>)
 800ad96:	f7ff fbd5 	bl	800a544 <USBD_CDC_SetTxBuffer>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	4904      	ldr	r1, [pc, #16]	@ (800adb0 <CDC_Init_FS+0x24>)
 800ad9e:	f7ff fbd9 	bl	800a554 <USBD_CDC_SetRxBuffer>
}
 800ada2:	2000      	movs	r0, #0
 800ada4:	bd10      	pop	{r4, pc}
 800ada6:	bf00      	nop
 800ada8:	20000b0c 	.word	0x20000b0c
 800adac:	20000dd0 	.word	0x20000dd0
 800adb0:	20000fd0 	.word	0x20000fd0

0800adb4 <cdcAvailable>:
    ret = (rx_in - rx_out) % rx_len;
 800adb4:	4b05      	ldr	r3, [pc, #20]	@ (800adcc <cdcAvailable+0x18>)
 800adb6:	4a06      	ldr	r2, [pc, #24]	@ (800add0 <cdcAvailable+0x1c>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	6812      	ldr	r2, [r2, #0]
 800adbc:	1a9b      	subs	r3, r3, r2
 800adbe:	4a05      	ldr	r2, [pc, #20]	@ (800add4 <cdcAvailable+0x20>)
 800adc0:	6812      	ldr	r2, [r2, #0]
 800adc2:	fbb3 f0f2 	udiv	r0, r3, r2
}
 800adc6:	fb02 3010 	mls	r0, r2, r0, r3
 800adca:	4770      	bx	lr
 800adcc:	200013d8 	.word	0x200013d8
 800add0:	200013d4 	.word	0x200013d4
 800add4:	20000134 	.word	0x20000134

0800add8 <cdcRead>:
{
 800add8:	b510      	push	{r4, lr}
    ret = rx_buf[rx_out];
 800adda:	4a08      	ldr	r2, [pc, #32]	@ (800adfc <cdcRead+0x24>)
 800addc:	4908      	ldr	r1, [pc, #32]	@ (800ae00 <cdcRead+0x28>)
 800adde:	6813      	ldr	r3, [r2, #0]
 800ade0:	5cc8      	ldrb	r0, [r1, r3]
    if (rx_out != rx_in)
 800ade2:	4908      	ldr	r1, [pc, #32]	@ (800ae04 <cdcRead+0x2c>)
 800ade4:	6809      	ldr	r1, [r1, #0]
 800ade6:	428b      	cmp	r3, r1
 800ade8:	d007      	beq.n	800adfa <cdcRead+0x22>
        rx_out = (rx_out + 1) % rx_len;
 800adea:	4907      	ldr	r1, [pc, #28]	@ (800ae08 <cdcRead+0x30>)
 800adec:	3301      	adds	r3, #1
 800adee:	6809      	ldr	r1, [r1, #0]
 800adf0:	fbb3 f4f1 	udiv	r4, r3, r1
 800adf4:	fb01 3314 	mls	r3, r1, r4, r3
 800adf8:	6013      	str	r3, [r2, #0]
}
 800adfa:	bd10      	pop	{r4, pc}
 800adfc:	200013d4 	.word	0x200013d4
 800ae00:	200011d1 	.word	0x200011d1
 800ae04:	200013d8 	.word	0x200013d8
 800ae08:	20000134 	.word	0x20000134

0800ae0c <cdcDataIn>:
    rx_buf[rx_in] = rx_data;
 800ae0c:	4a08      	ldr	r2, [pc, #32]	@ (800ae30 <cdcDataIn+0x24>)
 800ae0e:	4909      	ldr	r1, [pc, #36]	@ (800ae34 <cdcDataIn+0x28>)
 800ae10:	6813      	ldr	r3, [r2, #0]
 800ae12:	54c8      	strb	r0, [r1, r3]
    next_rx_in = (rx_in + 1) % rx_len;
 800ae14:	4908      	ldr	r1, [pc, #32]	@ (800ae38 <cdcDataIn+0x2c>)
 800ae16:	3301      	adds	r3, #1
 800ae18:	6809      	ldr	r1, [r1, #0]
 800ae1a:	fbb3 f0f1 	udiv	r0, r3, r1
 800ae1e:	fb01 3310 	mls	r3, r1, r0, r3
    if (next_rx_in != rx_out)
 800ae22:	4906      	ldr	r1, [pc, #24]	@ (800ae3c <cdcDataIn+0x30>)
 800ae24:	6809      	ldr	r1, [r1, #0]
 800ae26:	4299      	cmp	r1, r3
        rx_in = next_rx_in;
 800ae28:	bf18      	it	ne
 800ae2a:	6013      	strne	r3, [r2, #0]
}
 800ae2c:	4770      	bx	lr
 800ae2e:	bf00      	nop
 800ae30:	200013d8 	.word	0x200013d8
 800ae34:	200011d1 	.word	0x200011d1
 800ae38:	20000134 	.word	0x20000134
 800ae3c:	200013d4 	.word	0x200013d4

0800ae40 <CDC_Receive_FS>:
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len)
{
 800ae40:	b570      	push	{r4, r5, r6, lr}
 800ae42:	4605      	mov	r5, r0
 800ae44:	460e      	mov	r6, r1
    /* USER CODE BEGIN 6 */

    for (int i = 0; i < *Len; i++)
 800ae46:	2400      	movs	r4, #0
 800ae48:	6833      	ldr	r3, [r6, #0]
 800ae4a:	42a3      	cmp	r3, r4
 800ae4c:	d810      	bhi.n	800ae70 <CDC_Receive_FS+0x30>
    }

    uint32_t buf_len;

    // 수신 버퍼에서 비어있는 데이터 양
    buf_len = (rx_len - cdcAvailable()) - 1;
 800ae4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ae84 <CDC_Receive_FS+0x44>)
 800ae50:	681c      	ldr	r4, [r3, #0]
 800ae52:	f7ff ffaf 	bl	800adb4 <cdcAvailable>
 800ae56:	3c01      	subs	r4, #1
 800ae58:	1a24      	subs	r4, r4, r0

    if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 800ae5a:	2c3f      	cmp	r4, #63	@ 0x3f
 800ae5c:	d90d      	bls.n	800ae7a <CDC_Receive_FS+0x3a>
    {
        // 다음 데이터도 전송
        USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ae5e:	4629      	mov	r1, r5
 800ae60:	4809      	ldr	r0, [pc, #36]	@ (800ae88 <CDC_Receive_FS+0x48>)
 800ae62:	f7ff fb77 	bl	800a554 <USBD_CDC_SetRxBuffer>
        USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ae66:	4808      	ldr	r0, [pc, #32]	@ (800ae88 <CDC_Receive_FS+0x48>)
 800ae68:	f7ff fb93 	bl	800a592 <USBD_CDC_ReceivePacket>
        rx_full = true;
    }

    return (USBD_OK);
    /* USER CODE END 6 */
}
 800ae6c:	2000      	movs	r0, #0
 800ae6e:	bd70      	pop	{r4, r5, r6, pc}
        cdcDataIn(Buf[i]);
 800ae70:	5d28      	ldrb	r0, [r5, r4]
 800ae72:	f7ff ffcb 	bl	800ae0c <cdcDataIn>
    for (int i = 0; i < *Len; i++)
 800ae76:	3401      	adds	r4, #1
 800ae78:	e7e6      	b.n	800ae48 <CDC_Receive_FS+0x8>
        rx_full = true;
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	4b03      	ldr	r3, [pc, #12]	@ (800ae8c <CDC_Receive_FS+0x4c>)
 800ae7e:	701a      	strb	r2, [r3, #0]
 800ae80:	e7f4      	b.n	800ae6c <CDC_Receive_FS+0x2c>
 800ae82:	bf00      	nop
 800ae84:	20000134 	.word	0x20000134
 800ae88:	20000b0c 	.word	0x20000b0c
 800ae8c:	200011d0 	.word	0x200011d0

0800ae90 <USBD_CDC_SOF>:
{
 800ae90:	b538      	push	{r3, r4, r5, lr}
    if (rx_full == true)
 800ae92:	4d09      	ldr	r5, [pc, #36]	@ (800aeb8 <USBD_CDC_SOF+0x28>)
{
 800ae94:	4604      	mov	r4, r0
    if (rx_full == true)
 800ae96:	782b      	ldrb	r3, [r5, #0]
 800ae98:	b163      	cbz	r3, 800aeb4 <USBD_CDC_SOF+0x24>
        buf_len = (rx_len - cdcAvailable()) - 1;
 800ae9a:	4b08      	ldr	r3, [pc, #32]	@ (800aebc <USBD_CDC_SOF+0x2c>)
 800ae9c:	6819      	ldr	r1, [r3, #0]
 800ae9e:	f7ff ff89 	bl	800adb4 <cdcAvailable>
 800aea2:	3901      	subs	r1, #1
 800aea4:	1a09      	subs	r1, r1, r0
        if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 800aea6:	293f      	cmp	r1, #63	@ 0x3f
 800aea8:	d904      	bls.n	800aeb4 <USBD_CDC_SOF+0x24>
            USBD_CDC_ReceivePacket(pdev);
 800aeaa:	4620      	mov	r0, r4
 800aeac:	f7ff fb71 	bl	800a592 <USBD_CDC_ReceivePacket>
            rx_full = false;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	702b      	strb	r3, [r5, #0]
}
 800aeb4:	2000      	movs	r0, #0
 800aeb6:	bd38      	pop	{r3, r4, r5, pc}
 800aeb8:	200011d0 	.word	0x200011d0
 800aebc:	20000134 	.word	0x20000134

0800aec0 <CDC_Transmit_FS>:
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len)
{
 800aec0:	b510      	push	{r4, lr}
    uint8_t result = USBD_OK;
    /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef *hcdc =
 800aec2:	4c09      	ldr	r4, [pc, #36]	@ (800aee8 <CDC_Transmit_FS+0x28>)
{
 800aec4:	460a      	mov	r2, r1
    USBD_CDC_HandleTypeDef *hcdc =
 800aec6:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
        (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
    if (hcdc->TxState != 0)
 800aeca:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800aece:	b943      	cbnz	r3, 800aee2 <CDC_Transmit_FS+0x22>
    {
        return USBD_BUSY;
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800aed0:	4601      	mov	r1, r0
 800aed2:	4620      	mov	r0, r4
 800aed4:	f7ff fb36 	bl	800a544 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800aed8:	4620      	mov	r0, r4
    /* USER CODE END 7 */
    return result;
}
 800aeda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800aede:	f7ff bb3f 	b.w	800a560 <USBD_CDC_TransmitPacket>
}
 800aee2:	2001      	movs	r0, #1
 800aee4:	bd10      	pop	{r4, pc}
 800aee6:	bf00      	nop
 800aee8:	20000b0c 	.word	0x20000b0c

0800aeec <cdcWrite>:
{
 800aeec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeee:	460c      	mov	r4, r1
 800aef0:	4606      	mov	r6, r0
    pre_time = millis();
 800aef2:	f7fa ff56 	bl	8005da2 <millis>
 800aef6:	4605      	mov	r5, r0
        ret = CDC_Transmit_FS(p_data, length);
 800aef8:	b2a7      	uxth	r7, r4
 800aefa:	4639      	mov	r1, r7
 800aefc:	4630      	mov	r0, r6
 800aefe:	f7ff ffdf 	bl	800aec0 <CDC_Transmit_FS>
        if (ret == USBD_OK)
 800af02:	b110      	cbz	r0, 800af0a <cdcWrite+0x1e>
        else if (ret == USBD_FAIL)
 800af04:	2802      	cmp	r0, #2
 800af06:	d102      	bne.n	800af0e <cdcWrite+0x22>
            return 0;
 800af08:	2400      	movs	r4, #0
}
 800af0a:	4620      	mov	r0, r4
 800af0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (millis() - pre_time >= 100)
 800af0e:	f7fa ff48 	bl	8005da2 <millis>
 800af12:	1b43      	subs	r3, r0, r5
 800af14:	2b63      	cmp	r3, #99	@ 0x63
 800af16:	d9f0      	bls.n	800aefa <cdcWrite+0xe>
 800af18:	e7f6      	b.n	800af08 <cdcWrite+0x1c>
	...

0800af1c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800af1c:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800af1e:	4801      	ldr	r0, [pc, #4]	@ (800af24 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800af20:	800b      	strh	r3, [r1, #0]
}
 800af22:	4770      	bx	lr
 800af24:	20000160 	.word	0x20000160

0800af28 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800af28:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800af2a:	4801      	ldr	r0, [pc, #4]	@ (800af30 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800af2c:	800b      	strh	r3, [r1, #0]
}
 800af2e:	4770      	bx	lr
 800af30:	2000015c 	.word	0x2000015c

0800af34 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800af34:	2300      	movs	r3, #0
{
 800af36:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800af38:	461e      	mov	r6, r3
 800af3a:	1c4d      	adds	r5, r1, #1
  for (idx = 0; idx < len; idx++)
 800af3c:	b2dc      	uxtb	r4, r3
 800af3e:	42a2      	cmp	r2, r4
 800af40:	d800      	bhi.n	800af44 <IntToUnicode+0x10>
  }
}
 800af42:	bd70      	pop	{r4, r5, r6, pc}
      pbuf[2 * idx] = (value >> 28) + '0';
 800af44:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 800af46:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800af4a:	bf34      	ite	cc
 800af4c:	3430      	addcc	r4, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800af4e:	3437      	addcs	r4, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800af50:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    value = value << 4;
 800af54:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 800af56:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 800af5a:	3301      	adds	r3, #1
 800af5c:	e7ee      	b.n	800af3c <IntToUnicode+0x8>
	...

0800af60 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800af60:	231a      	movs	r3, #26
{
 800af62:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800af64:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800af66:	4b0a      	ldr	r3, [pc, #40]	@ (800af90 <USBD_FS_SerialStrDescriptor+0x30>)
 800af68:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	@ 0x7e8
  deviceserial0 += deviceserial2;
 800af6c:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	@ 0x7f0
  if (deviceserial0 != 0)
 800af70:	1880      	adds	r0, r0, r2
 800af72:	d00a      	beq.n	800af8a <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800af74:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	@ 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800af78:	4906      	ldr	r1, [pc, #24]	@ (800af94 <USBD_FS_SerialStrDescriptor+0x34>)
 800af7a:	2208      	movs	r2, #8
 800af7c:	f7ff ffda 	bl	800af34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800af80:	2204      	movs	r2, #4
 800af82:	4620      	mov	r0, r4
 800af84:	3110      	adds	r1, #16
 800af86:	f7ff ffd5 	bl	800af34 <IntToUnicode>
}
 800af8a:	4803      	ldr	r0, [pc, #12]	@ (800af98 <USBD_FS_SerialStrDescriptor+0x38>)
 800af8c:	bd10      	pop	{r4, pc}
 800af8e:	bf00      	nop
 800af90:	1ffff000 	.word	0x1ffff000
 800af94:	20000142 	.word	0x20000142
 800af98:	20000140 	.word	0x20000140

0800af9c <USBD_FS_ManufacturerStrDescriptor>:
{
 800af9c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800af9e:	4c04      	ldr	r4, [pc, #16]	@ (800afb0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800afa0:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800afa2:	4804      	ldr	r0, [pc, #16]	@ (800afb4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800afa4:	4621      	mov	r1, r4
 800afa6:	f7ff fe3b 	bl	800ac20 <USBD_GetString>
}
 800afaa:	4620      	mov	r0, r4
 800afac:	bd10      	pop	{r4, pc}
 800afae:	bf00      	nop
 800afb0:	200013dc 	.word	0x200013dc
 800afb4:	0800e62a 	.word	0x0800e62a

0800afb8 <USBD_FS_ProductStrDescriptor>:
{
 800afb8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800afba:	4c04      	ldr	r4, [pc, #16]	@ (800afcc <USBD_FS_ProductStrDescriptor+0x14>)
{
 800afbc:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800afbe:	4804      	ldr	r0, [pc, #16]	@ (800afd0 <USBD_FS_ProductStrDescriptor+0x18>)
 800afc0:	4621      	mov	r1, r4
 800afc2:	f7ff fe2d 	bl	800ac20 <USBD_GetString>
}
 800afc6:	4620      	mov	r0, r4
 800afc8:	bd10      	pop	{r4, pc}
 800afca:	bf00      	nop
 800afcc:	200013dc 	.word	0x200013dc
 800afd0:	0800e63d 	.word	0x0800e63d

0800afd4 <USBD_FS_ConfigStrDescriptor>:
{
 800afd4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800afd6:	4c04      	ldr	r4, [pc, #16]	@ (800afe8 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800afd8:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800afda:	4804      	ldr	r0, [pc, #16]	@ (800afec <USBD_FS_ConfigStrDescriptor+0x18>)
 800afdc:	4621      	mov	r1, r4
 800afde:	f7ff fe1f 	bl	800ac20 <USBD_GetString>
}
 800afe2:	4620      	mov	r0, r4
 800afe4:	bd10      	pop	{r4, pc}
 800afe6:	bf00      	nop
 800afe8:	200013dc 	.word	0x200013dc
 800afec:	0800e653 	.word	0x0800e653

0800aff0 <USBD_FS_InterfaceStrDescriptor>:
{
 800aff0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aff2:	4c04      	ldr	r4, [pc, #16]	@ (800b004 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 800aff4:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aff6:	4804      	ldr	r0, [pc, #16]	@ (800b008 <USBD_FS_InterfaceStrDescriptor+0x18>)
 800aff8:	4621      	mov	r1, r4
 800affa:	f7ff fe11 	bl	800ac20 <USBD_GetString>
}
 800affe:	4620      	mov	r0, r4
 800b000:	bd10      	pop	{r4, pc}
 800b002:	bf00      	nop
 800b004:	200013dc 	.word	0x200013dc
 800b008:	0800e65e 	.word	0x0800e65e

0800b00c <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800b00c:	b118      	cbz	r0, 800b016 <USBD_Get_USB_Status+0xa>
 800b00e:	2802      	cmp	r0, #2
 800b010:	bf0c      	ite	eq
 800b012:	2001      	moveq	r0, #1
 800b014:	2002      	movne	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800b016:	4770      	bx	lr

0800b018 <HAL_PCD_MspInit>:
{
 800b018:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 800b01a:	4b0e      	ldr	r3, [pc, #56]	@ (800b054 <HAL_PCD_MspInit+0x3c>)
 800b01c:	6802      	ldr	r2, [r0, #0]
 800b01e:	429a      	cmp	r2, r3
 800b020:	d115      	bne.n	800b04e <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 800b022:	f503 33da 	add.w	r3, r3, #111616	@ 0x1b400
 800b026:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b028:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 800b02a:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800b02e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b030:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800b032:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b034:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800b036:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b03a:	9301      	str	r3, [sp, #4]
 800b03c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b03e:	f7fc f94d 	bl	80072dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b042:	2014      	movs	r0, #20
}
 800b044:	b003      	add	sp, #12
 800b046:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b04a:	f7fc b977 	b.w	800733c <HAL_NVIC_EnableIRQ>
}
 800b04e:	b003      	add	sp, #12
 800b050:	f85d fb04 	ldr.w	pc, [sp], #4
 800b054:	40005c00 	.word	0x40005c00

0800b058 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b058:	f500 7126 	add.w	r1, r0, #664	@ 0x298
 800b05c:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800b060:	f7ff badf 	b.w	800a622 <USBD_LL_SetupStage>

0800b064 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b064:	2328      	movs	r3, #40	@ 0x28
 800b066:	fb03 0301 	mla	r3, r3, r1, r0
 800b06a:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800b06e:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 800b072:	f7ff bb03 	b.w	800a67c <USBD_LL_DataOutStage>

0800b076 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b076:	2328      	movs	r3, #40	@ 0x28
 800b078:	fb03 0301 	mla	r3, r3, r1, r0
 800b07c:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800b080:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b082:	f7ff bb33 	b.w	800a6ec <USBD_LL_DataInStage>

0800b086 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b086:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800b08a:	f7ff bbc8 	b.w	800a81e <USBD_LL_SOF>

0800b08e <HAL_PCD_ResetCallback>:
{
 800b08e:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b090:	7983      	ldrb	r3, [r0, #6]
{
 800b092:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b094:	2b02      	cmp	r3, #2
 800b096:	d001      	beq.n	800b09c <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 800b098:	f7fa ff10 	bl	8005ebc <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b09c:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
 800b0a0:	2101      	movs	r1, #1
 800b0a2:	f7ff fba6 	bl	800a7f2 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b0a6:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
}
 800b0aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b0ae:	f7ff bb79 	b.w	800a7a4 <USBD_LL_Reset>
	...

0800b0b4 <HAL_PCD_SuspendCallback>:
{
 800b0b4:	b510      	push	{r4, lr}
 800b0b6:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b0b8:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800b0bc:	f7ff fb9c 	bl	800a7f8 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800b0c0:	7aa3      	ldrb	r3, [r4, #10]
 800b0c2:	b123      	cbz	r3, 800b0ce <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b0c4:	4a02      	ldr	r2, [pc, #8]	@ (800b0d0 <HAL_PCD_SuspendCallback+0x1c>)
 800b0c6:	6913      	ldr	r3, [r2, #16]
 800b0c8:	f043 0306 	orr.w	r3, r3, #6
 800b0cc:	6113      	str	r3, [r2, #16]
}
 800b0ce:	bd10      	pop	{r4, pc}
 800b0d0:	e000ed00 	.word	0xe000ed00

0800b0d4 <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b0d4:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800b0d8:	f7ff bb97 	b.w	800a80a <USBD_LL_Resume>

0800b0dc <USBD_LL_Init>:
{
 800b0dc:	b510      	push	{r4, lr}
  hpcd_USB_FS.Instance = USB;
 800b0de:	4b1d      	ldr	r3, [pc, #116]	@ (800b154 <USBD_LL_Init+0x78>)
{
 800b0e0:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800b0e2:	481d      	ldr	r0, [pc, #116]	@ (800b158 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Instance = USB;
 800b0e4:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b0e6:	2308      	movs	r3, #8
 800b0e8:	7103      	strb	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b0ea:	2302      	movs	r3, #2
 800b0ec:	7183      	strb	r3, [r0, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b0ee:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 800b0f0:	f8c0 42d4 	str.w	r4, [r0, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800b0f4:	f8c4 02c0 	str.w	r0, [r4, #704]	@ 0x2c0
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b0f8:	8143      	strh	r3, [r0, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b0fa:	7303      	strb	r3, [r0, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b0fc:	f7fc fd5e 	bl	8007bbc <HAL_PCD_Init>
 800b100:	b108      	cbz	r0, 800b106 <USBD_LL_Init+0x2a>
    Error_Handler( );
 800b102:	f7fa fedb 	bl	8005ebc <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b106:	2200      	movs	r2, #0
 800b108:	2318      	movs	r3, #24
 800b10a:	4611      	mov	r1, r2
 800b10c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 800b110:	f7fd fbdf 	bl	80088d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b114:	2358      	movs	r3, #88	@ 0x58
 800b116:	2200      	movs	r2, #0
 800b118:	2180      	movs	r1, #128	@ 0x80
 800b11a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 800b11e:	f7fd fbd8 	bl	80088d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b122:	23c0      	movs	r3, #192	@ 0xc0
 800b124:	2200      	movs	r2, #0
 800b126:	2181      	movs	r1, #129	@ 0x81
 800b128:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 800b12c:	f7fd fbd1 	bl	80088d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b130:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800b134:	2200      	movs	r2, #0
 800b136:	2101      	movs	r1, #1
 800b138:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 800b13c:	f7fd fbc9 	bl	80088d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b140:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b144:	2200      	movs	r2, #0
 800b146:	2182      	movs	r1, #130	@ 0x82
 800b148:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 800b14c:	f7fd fbc1 	bl	80088d2 <HAL_PCDEx_PMAConfig>
}
 800b150:	2000      	movs	r0, #0
 800b152:	bd10      	pop	{r4, pc}
 800b154:	40005c00 	.word	0x40005c00
 800b158:	200017fc 	.word	0x200017fc

0800b15c <USBD_LL_Start>:
{
 800b15c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800b15e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800b162:	f7fc fd8e 	bl	8007c82 <HAL_PCD_Start>
}
 800b166:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b16a:	f7ff bf4f 	b.w	800b00c <USBD_Get_USB_Status>

0800b16e <USBD_LL_OpenEP>:
{
 800b16e:	b510      	push	{r4, lr}
 800b170:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b172:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
{
 800b176:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b178:	4623      	mov	r3, r4
 800b17a:	f7fd fab3 	bl	80086e4 <HAL_PCD_EP_Open>
}
 800b17e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b182:	f7ff bf43 	b.w	800b00c <USBD_Get_USB_Status>

0800b186 <USBD_LL_CloseEP>:
{
 800b186:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b188:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800b18c:	f7fd fada 	bl	8008744 <HAL_PCD_EP_Close>
}
 800b190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b194:	f7ff bf3a 	b.w	800b00c <USBD_Get_USB_Status>

0800b198 <USBD_LL_StallEP>:
{
 800b198:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b19a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800b19e:	f7fd fb30 	bl	8008802 <HAL_PCD_EP_SetStall>
}
 800b1a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1a6:	f7ff bf31 	b.w	800b00c <USBD_Get_USB_Status>

0800b1aa <USBD_LL_ClearStallEP>:
{
 800b1aa:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b1ac:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800b1b0:	f7fd fb5d 	bl	800886e <HAL_PCD_EP_ClrStall>
}
 800b1b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1b8:	f7ff bf28 	b.w	800b00c <USBD_Get_USB_Status>

0800b1bc <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b1bc:	2228      	movs	r2, #40	@ 0x28
  if((ep_addr & 0x80) == 0x80)
 800b1be:	f011 0f80 	tst.w	r1, #128	@ 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b1c2:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b1c6:	bf1b      	ittet	ne
 800b1c8:	f001 017f 	andne.w	r1, r1, #127	@ 0x7f
 800b1cc:	fb02 3301 	mlane	r3, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b1d0:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b1d4:	7c98      	ldrbne	r0, [r3, #18]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b1d6:	bf08      	it	eq
 800b1d8:	f893 0152 	ldrbeq.w	r0, [r3, #338]	@ 0x152
}
 800b1dc:	4770      	bx	lr

0800b1de <USBD_LL_SetUSBAddress>:
{
 800b1de:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b1e0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800b1e4:	f7fc fd66 	bl	8007cb4 <HAL_PCD_SetAddress>
}
 800b1e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1ec:	f7ff bf0e 	b.w	800b00c <USBD_Get_USB_Status>

0800b1f0 <USBD_LL_Transmit>:
{
 800b1f0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b1f2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800b1f6:	f7fd faec 	bl	80087d2 <HAL_PCD_EP_Transmit>
}
 800b1fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1fe:	f7ff bf05 	b.w	800b00c <USBD_Get_USB_Status>

0800b202 <USBD_LL_PrepareReceive>:
{
 800b202:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b204:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800b208:	f7fd fac4 	bl	8008794 <HAL_PCD_EP_Receive>
}
 800b20c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b210:	f7ff befc 	b.w	800b00c <USBD_Get_USB_Status>

0800b214 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b214:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800b218:	f7fd bad3 	b.w	80087c2 <HAL_PCD_EP_GetRxCount>

0800b21c <USBD_static_malloc>:
}
 800b21c:	4800      	ldr	r0, [pc, #0]	@ (800b220 <USBD_static_malloc+0x4>)
 800b21e:	4770      	bx	lr
 800b220:	200015dc 	.word	0x200015dc

0800b224 <USBD_static_free>:
}
 800b224:	4770      	bx	lr

0800b226 <HAL_PCDEx_SetConnectionState>:
}
 800b226:	4770      	bx	lr

0800b228 <main>:

#include "main.h"


int main(void)
{
 800b228:	b508      	push	{r3, lr}

    hwInit();
 800b22a:	f7fb ffd5 	bl	80071d8 <hwInit>
    apInit();
 800b22e:	f7fa fd89 	bl	8005d44 <apInit>

apMain();
 800b232:	f7fa fda1 	bl	8005d78 <apMain>

    return 0;
}
 800b236:	2000      	movs	r0, #0
 800b238:	bd08      	pop	{r3, pc}

0800b23a <sulp>:
 800b23a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b23e:	460f      	mov	r7, r1
 800b240:	4690      	mov	r8, r2
 800b242:	f002 f8ab 	bl	800d39c <__ulp>
 800b246:	4604      	mov	r4, r0
 800b248:	460d      	mov	r5, r1
 800b24a:	f1b8 0f00 	cmp.w	r8, #0
 800b24e:	d011      	beq.n	800b274 <sulp+0x3a>
 800b250:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800b254:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b258:	2b00      	cmp	r3, #0
 800b25a:	dd0b      	ble.n	800b274 <sulp+0x3a>
 800b25c:	2400      	movs	r4, #0
 800b25e:	051b      	lsls	r3, r3, #20
 800b260:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b264:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b268:	4622      	mov	r2, r4
 800b26a:	462b      	mov	r3, r5
 800b26c:	f7fa f93e 	bl	80054ec <__aeabi_dmul>
 800b270:	4604      	mov	r4, r0
 800b272:	460d      	mov	r5, r1
 800b274:	4620      	mov	r0, r4
 800b276:	4629      	mov	r1, r5
 800b278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b27c:	0000      	movs	r0, r0
	...

0800b280 <_strtod_l>:
 800b280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b284:	b09f      	sub	sp, #124	@ 0x7c
 800b286:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b288:	2200      	movs	r2, #0
 800b28a:	460c      	mov	r4, r1
 800b28c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b28e:	f04f 0a00 	mov.w	sl, #0
 800b292:	f04f 0b00 	mov.w	fp, #0
 800b296:	460a      	mov	r2, r1
 800b298:	9005      	str	r0, [sp, #20]
 800b29a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b29c:	7811      	ldrb	r1, [r2, #0]
 800b29e:	292b      	cmp	r1, #43	@ 0x2b
 800b2a0:	d048      	beq.n	800b334 <_strtod_l+0xb4>
 800b2a2:	d836      	bhi.n	800b312 <_strtod_l+0x92>
 800b2a4:	290d      	cmp	r1, #13
 800b2a6:	d830      	bhi.n	800b30a <_strtod_l+0x8a>
 800b2a8:	2908      	cmp	r1, #8
 800b2aa:	d830      	bhi.n	800b30e <_strtod_l+0x8e>
 800b2ac:	2900      	cmp	r1, #0
 800b2ae:	d039      	beq.n	800b324 <_strtod_l+0xa4>
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b2b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b2b6:	782a      	ldrb	r2, [r5, #0]
 800b2b8:	2a30      	cmp	r2, #48	@ 0x30
 800b2ba:	f040 80b1 	bne.w	800b420 <_strtod_l+0x1a0>
 800b2be:	786a      	ldrb	r2, [r5, #1]
 800b2c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b2c4:	2a58      	cmp	r2, #88	@ 0x58
 800b2c6:	d16c      	bne.n	800b3a2 <_strtod_l+0x122>
 800b2c8:	9302      	str	r3, [sp, #8]
 800b2ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2cc:	4a8e      	ldr	r2, [pc, #568]	@ (800b508 <_strtod_l+0x288>)
 800b2ce:	9301      	str	r3, [sp, #4]
 800b2d0:	ab1a      	add	r3, sp, #104	@ 0x68
 800b2d2:	9300      	str	r3, [sp, #0]
 800b2d4:	9805      	ldr	r0, [sp, #20]
 800b2d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b2d8:	a919      	add	r1, sp, #100	@ 0x64
 800b2da:	f001 f95b 	bl	800c594 <__gethex>
 800b2de:	f010 060f 	ands.w	r6, r0, #15
 800b2e2:	4604      	mov	r4, r0
 800b2e4:	d005      	beq.n	800b2f2 <_strtod_l+0x72>
 800b2e6:	2e06      	cmp	r6, #6
 800b2e8:	d126      	bne.n	800b338 <_strtod_l+0xb8>
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	3501      	adds	r5, #1
 800b2ee:	9519      	str	r5, [sp, #100]	@ 0x64
 800b2f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	f040 8584 	bne.w	800be02 <_strtod_l+0xb82>
 800b2fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2fc:	b1bb      	cbz	r3, 800b32e <_strtod_l+0xae>
 800b2fe:	4650      	mov	r0, sl
 800b300:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800b304:	b01f      	add	sp, #124	@ 0x7c
 800b306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b30a:	2920      	cmp	r1, #32
 800b30c:	d1d0      	bne.n	800b2b0 <_strtod_l+0x30>
 800b30e:	3201      	adds	r2, #1
 800b310:	e7c3      	b.n	800b29a <_strtod_l+0x1a>
 800b312:	292d      	cmp	r1, #45	@ 0x2d
 800b314:	d1cc      	bne.n	800b2b0 <_strtod_l+0x30>
 800b316:	2101      	movs	r1, #1
 800b318:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b31a:	1c51      	adds	r1, r2, #1
 800b31c:	9119      	str	r1, [sp, #100]	@ 0x64
 800b31e:	7852      	ldrb	r2, [r2, #1]
 800b320:	2a00      	cmp	r2, #0
 800b322:	d1c7      	bne.n	800b2b4 <_strtod_l+0x34>
 800b324:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b326:	9419      	str	r4, [sp, #100]	@ 0x64
 800b328:	2b00      	cmp	r3, #0
 800b32a:	f040 8568 	bne.w	800bdfe <_strtod_l+0xb7e>
 800b32e:	4650      	mov	r0, sl
 800b330:	4659      	mov	r1, fp
 800b332:	e7e7      	b.n	800b304 <_strtod_l+0x84>
 800b334:	2100      	movs	r1, #0
 800b336:	e7ef      	b.n	800b318 <_strtod_l+0x98>
 800b338:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b33a:	b13a      	cbz	r2, 800b34c <_strtod_l+0xcc>
 800b33c:	2135      	movs	r1, #53	@ 0x35
 800b33e:	a81c      	add	r0, sp, #112	@ 0x70
 800b340:	f002 f91c 	bl	800d57c <__copybits>
 800b344:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b346:	9805      	ldr	r0, [sp, #20]
 800b348:	f001 fcf6 	bl	800cd38 <_Bfree>
 800b34c:	3e01      	subs	r6, #1
 800b34e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b350:	2e04      	cmp	r6, #4
 800b352:	d806      	bhi.n	800b362 <_strtod_l+0xe2>
 800b354:	e8df f006 	tbb	[pc, r6]
 800b358:	201d0314 	.word	0x201d0314
 800b35c:	14          	.byte	0x14
 800b35d:	00          	.byte	0x00
 800b35e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b362:	05e1      	lsls	r1, r4, #23
 800b364:	bf48      	it	mi
 800b366:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b36a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b36e:	0d1b      	lsrs	r3, r3, #20
 800b370:	051b      	lsls	r3, r3, #20
 800b372:	2b00      	cmp	r3, #0
 800b374:	d1bd      	bne.n	800b2f2 <_strtod_l+0x72>
 800b376:	f001 f80f 	bl	800c398 <__errno>
 800b37a:	2322      	movs	r3, #34	@ 0x22
 800b37c:	6003      	str	r3, [r0, #0]
 800b37e:	e7b8      	b.n	800b2f2 <_strtod_l+0x72>
 800b380:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b384:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b388:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b38c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b390:	e7e7      	b.n	800b362 <_strtod_l+0xe2>
 800b392:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800b50c <_strtod_l+0x28c>
 800b396:	e7e4      	b.n	800b362 <_strtod_l+0xe2>
 800b398:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b39c:	f04f 3aff 	mov.w	sl, #4294967295
 800b3a0:	e7df      	b.n	800b362 <_strtod_l+0xe2>
 800b3a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b3a4:	1c5a      	adds	r2, r3, #1
 800b3a6:	9219      	str	r2, [sp, #100]	@ 0x64
 800b3a8:	785b      	ldrb	r3, [r3, #1]
 800b3aa:	2b30      	cmp	r3, #48	@ 0x30
 800b3ac:	d0f9      	beq.n	800b3a2 <_strtod_l+0x122>
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d09f      	beq.n	800b2f2 <_strtod_l+0x72>
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b3b8:	220a      	movs	r2, #10
 800b3ba:	930c      	str	r3, [sp, #48]	@ 0x30
 800b3bc:	2300      	movs	r3, #0
 800b3be:	461f      	mov	r7, r3
 800b3c0:	9308      	str	r3, [sp, #32]
 800b3c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3c4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b3c6:	7805      	ldrb	r5, [r0, #0]
 800b3c8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b3cc:	b2d9      	uxtb	r1, r3
 800b3ce:	2909      	cmp	r1, #9
 800b3d0:	d928      	bls.n	800b424 <_strtod_l+0x1a4>
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	494e      	ldr	r1, [pc, #312]	@ (800b510 <_strtod_l+0x290>)
 800b3d6:	f000 ff5b 	bl	800c290 <strncmp>
 800b3da:	2800      	cmp	r0, #0
 800b3dc:	d032      	beq.n	800b444 <_strtod_l+0x1c4>
 800b3de:	2000      	movs	r0, #0
 800b3e0:	462a      	mov	r2, r5
 800b3e2:	4681      	mov	r9, r0
 800b3e4:	463d      	mov	r5, r7
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2a65      	cmp	r2, #101	@ 0x65
 800b3ea:	d001      	beq.n	800b3f0 <_strtod_l+0x170>
 800b3ec:	2a45      	cmp	r2, #69	@ 0x45
 800b3ee:	d114      	bne.n	800b41a <_strtod_l+0x19a>
 800b3f0:	b91d      	cbnz	r5, 800b3fa <_strtod_l+0x17a>
 800b3f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3f4:	4302      	orrs	r2, r0
 800b3f6:	d095      	beq.n	800b324 <_strtod_l+0xa4>
 800b3f8:	2500      	movs	r5, #0
 800b3fa:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b3fc:	1c62      	adds	r2, r4, #1
 800b3fe:	9219      	str	r2, [sp, #100]	@ 0x64
 800b400:	7862      	ldrb	r2, [r4, #1]
 800b402:	2a2b      	cmp	r2, #43	@ 0x2b
 800b404:	d077      	beq.n	800b4f6 <_strtod_l+0x276>
 800b406:	2a2d      	cmp	r2, #45	@ 0x2d
 800b408:	d07b      	beq.n	800b502 <_strtod_l+0x282>
 800b40a:	f04f 0c00 	mov.w	ip, #0
 800b40e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b412:	2909      	cmp	r1, #9
 800b414:	f240 8082 	bls.w	800b51c <_strtod_l+0x29c>
 800b418:	9419      	str	r4, [sp, #100]	@ 0x64
 800b41a:	f04f 0800 	mov.w	r8, #0
 800b41e:	e0a2      	b.n	800b566 <_strtod_l+0x2e6>
 800b420:	2300      	movs	r3, #0
 800b422:	e7c7      	b.n	800b3b4 <_strtod_l+0x134>
 800b424:	2f08      	cmp	r7, #8
 800b426:	bfd5      	itete	le
 800b428:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b42a:	9908      	ldrgt	r1, [sp, #32]
 800b42c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b430:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b434:	f100 0001 	add.w	r0, r0, #1
 800b438:	bfd4      	ite	le
 800b43a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b43c:	9308      	strgt	r3, [sp, #32]
 800b43e:	3701      	adds	r7, #1
 800b440:	9019      	str	r0, [sp, #100]	@ 0x64
 800b442:	e7bf      	b.n	800b3c4 <_strtod_l+0x144>
 800b444:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b446:	1c5a      	adds	r2, r3, #1
 800b448:	9219      	str	r2, [sp, #100]	@ 0x64
 800b44a:	785a      	ldrb	r2, [r3, #1]
 800b44c:	b37f      	cbz	r7, 800b4ae <_strtod_l+0x22e>
 800b44e:	4681      	mov	r9, r0
 800b450:	463d      	mov	r5, r7
 800b452:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b456:	2b09      	cmp	r3, #9
 800b458:	d912      	bls.n	800b480 <_strtod_l+0x200>
 800b45a:	2301      	movs	r3, #1
 800b45c:	e7c4      	b.n	800b3e8 <_strtod_l+0x168>
 800b45e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b460:	3001      	adds	r0, #1
 800b462:	1c5a      	adds	r2, r3, #1
 800b464:	9219      	str	r2, [sp, #100]	@ 0x64
 800b466:	785a      	ldrb	r2, [r3, #1]
 800b468:	2a30      	cmp	r2, #48	@ 0x30
 800b46a:	d0f8      	beq.n	800b45e <_strtod_l+0x1de>
 800b46c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b470:	2b08      	cmp	r3, #8
 800b472:	f200 84cb 	bhi.w	800be0c <_strtod_l+0xb8c>
 800b476:	4681      	mov	r9, r0
 800b478:	2000      	movs	r0, #0
 800b47a:	4605      	mov	r5, r0
 800b47c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b47e:	930c      	str	r3, [sp, #48]	@ 0x30
 800b480:	3a30      	subs	r2, #48	@ 0x30
 800b482:	f100 0301 	add.w	r3, r0, #1
 800b486:	d02a      	beq.n	800b4de <_strtod_l+0x25e>
 800b488:	4499      	add	r9, r3
 800b48a:	210a      	movs	r1, #10
 800b48c:	462b      	mov	r3, r5
 800b48e:	eb00 0c05 	add.w	ip, r0, r5
 800b492:	4563      	cmp	r3, ip
 800b494:	d10d      	bne.n	800b4b2 <_strtod_l+0x232>
 800b496:	1c69      	adds	r1, r5, #1
 800b498:	4401      	add	r1, r0
 800b49a:	4428      	add	r0, r5
 800b49c:	2808      	cmp	r0, #8
 800b49e:	dc16      	bgt.n	800b4ce <_strtod_l+0x24e>
 800b4a0:	230a      	movs	r3, #10
 800b4a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b4a4:	fb03 2300 	mla	r3, r3, r0, r2
 800b4a8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	e018      	b.n	800b4e0 <_strtod_l+0x260>
 800b4ae:	4638      	mov	r0, r7
 800b4b0:	e7da      	b.n	800b468 <_strtod_l+0x1e8>
 800b4b2:	2b08      	cmp	r3, #8
 800b4b4:	f103 0301 	add.w	r3, r3, #1
 800b4b8:	dc03      	bgt.n	800b4c2 <_strtod_l+0x242>
 800b4ba:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b4bc:	434e      	muls	r6, r1
 800b4be:	960a      	str	r6, [sp, #40]	@ 0x28
 800b4c0:	e7e7      	b.n	800b492 <_strtod_l+0x212>
 800b4c2:	2b10      	cmp	r3, #16
 800b4c4:	bfde      	ittt	le
 800b4c6:	9e08      	ldrle	r6, [sp, #32]
 800b4c8:	434e      	mulle	r6, r1
 800b4ca:	9608      	strle	r6, [sp, #32]
 800b4cc:	e7e1      	b.n	800b492 <_strtod_l+0x212>
 800b4ce:	280f      	cmp	r0, #15
 800b4d0:	dceb      	bgt.n	800b4aa <_strtod_l+0x22a>
 800b4d2:	230a      	movs	r3, #10
 800b4d4:	9808      	ldr	r0, [sp, #32]
 800b4d6:	fb03 2300 	mla	r3, r3, r0, r2
 800b4da:	9308      	str	r3, [sp, #32]
 800b4dc:	e7e5      	b.n	800b4aa <_strtod_l+0x22a>
 800b4de:	4629      	mov	r1, r5
 800b4e0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b4e2:	460d      	mov	r5, r1
 800b4e4:	1c50      	adds	r0, r2, #1
 800b4e6:	9019      	str	r0, [sp, #100]	@ 0x64
 800b4e8:	7852      	ldrb	r2, [r2, #1]
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	e7b1      	b.n	800b452 <_strtod_l+0x1d2>
 800b4ee:	f04f 0900 	mov.w	r9, #0
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	e77d      	b.n	800b3f2 <_strtod_l+0x172>
 800b4f6:	f04f 0c00 	mov.w	ip, #0
 800b4fa:	1ca2      	adds	r2, r4, #2
 800b4fc:	9219      	str	r2, [sp, #100]	@ 0x64
 800b4fe:	78a2      	ldrb	r2, [r4, #2]
 800b500:	e785      	b.n	800b40e <_strtod_l+0x18e>
 800b502:	f04f 0c01 	mov.w	ip, #1
 800b506:	e7f8      	b.n	800b4fa <_strtod_l+0x27a>
 800b508:	0800e68c 	.word	0x0800e68c
 800b50c:	7ff00000 	.word	0x7ff00000
 800b510:	0800e51b 	.word	0x0800e51b
 800b514:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b516:	1c51      	adds	r1, r2, #1
 800b518:	9119      	str	r1, [sp, #100]	@ 0x64
 800b51a:	7852      	ldrb	r2, [r2, #1]
 800b51c:	2a30      	cmp	r2, #48	@ 0x30
 800b51e:	d0f9      	beq.n	800b514 <_strtod_l+0x294>
 800b520:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b524:	2908      	cmp	r1, #8
 800b526:	f63f af78 	bhi.w	800b41a <_strtod_l+0x19a>
 800b52a:	f04f 080a 	mov.w	r8, #10
 800b52e:	3a30      	subs	r2, #48	@ 0x30
 800b530:	920e      	str	r2, [sp, #56]	@ 0x38
 800b532:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b534:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b536:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b538:	1c56      	adds	r6, r2, #1
 800b53a:	9619      	str	r6, [sp, #100]	@ 0x64
 800b53c:	7852      	ldrb	r2, [r2, #1]
 800b53e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b542:	f1be 0f09 	cmp.w	lr, #9
 800b546:	d939      	bls.n	800b5bc <_strtod_l+0x33c>
 800b548:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b54a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b54e:	1a76      	subs	r6, r6, r1
 800b550:	2e08      	cmp	r6, #8
 800b552:	dc03      	bgt.n	800b55c <_strtod_l+0x2dc>
 800b554:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b556:	4588      	cmp	r8, r1
 800b558:	bfa8      	it	ge
 800b55a:	4688      	movge	r8, r1
 800b55c:	f1bc 0f00 	cmp.w	ip, #0
 800b560:	d001      	beq.n	800b566 <_strtod_l+0x2e6>
 800b562:	f1c8 0800 	rsb	r8, r8, #0
 800b566:	2d00      	cmp	r5, #0
 800b568:	d14e      	bne.n	800b608 <_strtod_l+0x388>
 800b56a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b56c:	4308      	orrs	r0, r1
 800b56e:	f47f aec0 	bne.w	800b2f2 <_strtod_l+0x72>
 800b572:	2b00      	cmp	r3, #0
 800b574:	f47f aed6 	bne.w	800b324 <_strtod_l+0xa4>
 800b578:	2a69      	cmp	r2, #105	@ 0x69
 800b57a:	d028      	beq.n	800b5ce <_strtod_l+0x34e>
 800b57c:	dc25      	bgt.n	800b5ca <_strtod_l+0x34a>
 800b57e:	2a49      	cmp	r2, #73	@ 0x49
 800b580:	d025      	beq.n	800b5ce <_strtod_l+0x34e>
 800b582:	2a4e      	cmp	r2, #78	@ 0x4e
 800b584:	f47f aece 	bne.w	800b324 <_strtod_l+0xa4>
 800b588:	499a      	ldr	r1, [pc, #616]	@ (800b7f4 <_strtod_l+0x574>)
 800b58a:	a819      	add	r0, sp, #100	@ 0x64
 800b58c:	f001 fa24 	bl	800c9d8 <__match>
 800b590:	2800      	cmp	r0, #0
 800b592:	f43f aec7 	beq.w	800b324 <_strtod_l+0xa4>
 800b596:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	2b28      	cmp	r3, #40	@ 0x28
 800b59c:	d12e      	bne.n	800b5fc <_strtod_l+0x37c>
 800b59e:	4996      	ldr	r1, [pc, #600]	@ (800b7f8 <_strtod_l+0x578>)
 800b5a0:	aa1c      	add	r2, sp, #112	@ 0x70
 800b5a2:	a819      	add	r0, sp, #100	@ 0x64
 800b5a4:	f001 fa2c 	bl	800ca00 <__hexnan>
 800b5a8:	2805      	cmp	r0, #5
 800b5aa:	d127      	bne.n	800b5fc <_strtod_l+0x37c>
 800b5ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b5ae:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b5b2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b5b6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b5ba:	e69a      	b.n	800b2f2 <_strtod_l+0x72>
 800b5bc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b5be:	fb08 2101 	mla	r1, r8, r1, r2
 800b5c2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b5c6:	920e      	str	r2, [sp, #56]	@ 0x38
 800b5c8:	e7b5      	b.n	800b536 <_strtod_l+0x2b6>
 800b5ca:	2a6e      	cmp	r2, #110	@ 0x6e
 800b5cc:	e7da      	b.n	800b584 <_strtod_l+0x304>
 800b5ce:	498b      	ldr	r1, [pc, #556]	@ (800b7fc <_strtod_l+0x57c>)
 800b5d0:	a819      	add	r0, sp, #100	@ 0x64
 800b5d2:	f001 fa01 	bl	800c9d8 <__match>
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	f43f aea4 	beq.w	800b324 <_strtod_l+0xa4>
 800b5dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5de:	4988      	ldr	r1, [pc, #544]	@ (800b800 <_strtod_l+0x580>)
 800b5e0:	3b01      	subs	r3, #1
 800b5e2:	a819      	add	r0, sp, #100	@ 0x64
 800b5e4:	9319      	str	r3, [sp, #100]	@ 0x64
 800b5e6:	f001 f9f7 	bl	800c9d8 <__match>
 800b5ea:	b910      	cbnz	r0, 800b5f2 <_strtod_l+0x372>
 800b5ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	9319      	str	r3, [sp, #100]	@ 0x64
 800b5f2:	f04f 0a00 	mov.w	sl, #0
 800b5f6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800b804 <_strtod_l+0x584>
 800b5fa:	e67a      	b.n	800b2f2 <_strtod_l+0x72>
 800b5fc:	4882      	ldr	r0, [pc, #520]	@ (800b808 <_strtod_l+0x588>)
 800b5fe:	f000 ff0f 	bl	800c420 <nan>
 800b602:	4682      	mov	sl, r0
 800b604:	468b      	mov	fp, r1
 800b606:	e674      	b.n	800b2f2 <_strtod_l+0x72>
 800b608:	eba8 0309 	sub.w	r3, r8, r9
 800b60c:	2f00      	cmp	r7, #0
 800b60e:	bf08      	it	eq
 800b610:	462f      	moveq	r7, r5
 800b612:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b614:	2d10      	cmp	r5, #16
 800b616:	462c      	mov	r4, r5
 800b618:	9309      	str	r3, [sp, #36]	@ 0x24
 800b61a:	bfa8      	it	ge
 800b61c:	2410      	movge	r4, #16
 800b61e:	f7f9 feeb 	bl	80053f8 <__aeabi_ui2d>
 800b622:	2d09      	cmp	r5, #9
 800b624:	4682      	mov	sl, r0
 800b626:	468b      	mov	fp, r1
 800b628:	dc11      	bgt.n	800b64e <_strtod_l+0x3ce>
 800b62a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	f43f ae60 	beq.w	800b2f2 <_strtod_l+0x72>
 800b632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b634:	dd76      	ble.n	800b724 <_strtod_l+0x4a4>
 800b636:	2b16      	cmp	r3, #22
 800b638:	dc5d      	bgt.n	800b6f6 <_strtod_l+0x476>
 800b63a:	4974      	ldr	r1, [pc, #464]	@ (800b80c <_strtod_l+0x58c>)
 800b63c:	4652      	mov	r2, sl
 800b63e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b642:	465b      	mov	r3, fp
 800b644:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b648:	f7f9 ff50 	bl	80054ec <__aeabi_dmul>
 800b64c:	e7d9      	b.n	800b602 <_strtod_l+0x382>
 800b64e:	4b6f      	ldr	r3, [pc, #444]	@ (800b80c <_strtod_l+0x58c>)
 800b650:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b654:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b658:	f7f9 ff48 	bl	80054ec <__aeabi_dmul>
 800b65c:	4682      	mov	sl, r0
 800b65e:	9808      	ldr	r0, [sp, #32]
 800b660:	468b      	mov	fp, r1
 800b662:	f7f9 fec9 	bl	80053f8 <__aeabi_ui2d>
 800b666:	4602      	mov	r2, r0
 800b668:	460b      	mov	r3, r1
 800b66a:	4650      	mov	r0, sl
 800b66c:	4659      	mov	r1, fp
 800b66e:	f7f9 fd87 	bl	8005180 <__adddf3>
 800b672:	2d0f      	cmp	r5, #15
 800b674:	4682      	mov	sl, r0
 800b676:	468b      	mov	fp, r1
 800b678:	ddd7      	ble.n	800b62a <_strtod_l+0x3aa>
 800b67a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b67c:	1b2c      	subs	r4, r5, r4
 800b67e:	441c      	add	r4, r3
 800b680:	2c00      	cmp	r4, #0
 800b682:	f340 8096 	ble.w	800b7b2 <_strtod_l+0x532>
 800b686:	f014 030f 	ands.w	r3, r4, #15
 800b68a:	d00a      	beq.n	800b6a2 <_strtod_l+0x422>
 800b68c:	495f      	ldr	r1, [pc, #380]	@ (800b80c <_strtod_l+0x58c>)
 800b68e:	4652      	mov	r2, sl
 800b690:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b694:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b698:	465b      	mov	r3, fp
 800b69a:	f7f9 ff27 	bl	80054ec <__aeabi_dmul>
 800b69e:	4682      	mov	sl, r0
 800b6a0:	468b      	mov	fp, r1
 800b6a2:	f034 040f 	bics.w	r4, r4, #15
 800b6a6:	d073      	beq.n	800b790 <_strtod_l+0x510>
 800b6a8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b6ac:	dd48      	ble.n	800b740 <_strtod_l+0x4c0>
 800b6ae:	2400      	movs	r4, #0
 800b6b0:	46a0      	mov	r8, r4
 800b6b2:	46a1      	mov	r9, r4
 800b6b4:	940a      	str	r4, [sp, #40]	@ 0x28
 800b6b6:	2322      	movs	r3, #34	@ 0x22
 800b6b8:	f04f 0a00 	mov.w	sl, #0
 800b6bc:	9a05      	ldr	r2, [sp, #20]
 800b6be:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800b804 <_strtod_l+0x584>
 800b6c2:	6013      	str	r3, [r2, #0]
 800b6c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	f43f ae13 	beq.w	800b2f2 <_strtod_l+0x72>
 800b6cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b6ce:	9805      	ldr	r0, [sp, #20]
 800b6d0:	f001 fb32 	bl	800cd38 <_Bfree>
 800b6d4:	4649      	mov	r1, r9
 800b6d6:	9805      	ldr	r0, [sp, #20]
 800b6d8:	f001 fb2e 	bl	800cd38 <_Bfree>
 800b6dc:	4641      	mov	r1, r8
 800b6de:	9805      	ldr	r0, [sp, #20]
 800b6e0:	f001 fb2a 	bl	800cd38 <_Bfree>
 800b6e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b6e6:	9805      	ldr	r0, [sp, #20]
 800b6e8:	f001 fb26 	bl	800cd38 <_Bfree>
 800b6ec:	4621      	mov	r1, r4
 800b6ee:	9805      	ldr	r0, [sp, #20]
 800b6f0:	f001 fb22 	bl	800cd38 <_Bfree>
 800b6f4:	e5fd      	b.n	800b2f2 <_strtod_l+0x72>
 800b6f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6f8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	dbbc      	blt.n	800b67a <_strtod_l+0x3fa>
 800b700:	4c42      	ldr	r4, [pc, #264]	@ (800b80c <_strtod_l+0x58c>)
 800b702:	f1c5 050f 	rsb	r5, r5, #15
 800b706:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b70a:	4652      	mov	r2, sl
 800b70c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b710:	465b      	mov	r3, fp
 800b712:	f7f9 feeb 	bl	80054ec <__aeabi_dmul>
 800b716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b718:	1b5d      	subs	r5, r3, r5
 800b71a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b71e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b722:	e791      	b.n	800b648 <_strtod_l+0x3c8>
 800b724:	3316      	adds	r3, #22
 800b726:	dba8      	blt.n	800b67a <_strtod_l+0x3fa>
 800b728:	4b38      	ldr	r3, [pc, #224]	@ (800b80c <_strtod_l+0x58c>)
 800b72a:	eba9 0808 	sub.w	r8, r9, r8
 800b72e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b732:	4650      	mov	r0, sl
 800b734:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b738:	4659      	mov	r1, fp
 800b73a:	f7fa f801 	bl	8005740 <__aeabi_ddiv>
 800b73e:	e760      	b.n	800b602 <_strtod_l+0x382>
 800b740:	4b33      	ldr	r3, [pc, #204]	@ (800b810 <_strtod_l+0x590>)
 800b742:	4650      	mov	r0, sl
 800b744:	9308      	str	r3, [sp, #32]
 800b746:	2300      	movs	r3, #0
 800b748:	4659      	mov	r1, fp
 800b74a:	461e      	mov	r6, r3
 800b74c:	1124      	asrs	r4, r4, #4
 800b74e:	2c01      	cmp	r4, #1
 800b750:	dc21      	bgt.n	800b796 <_strtod_l+0x516>
 800b752:	b10b      	cbz	r3, 800b758 <_strtod_l+0x4d8>
 800b754:	4682      	mov	sl, r0
 800b756:	468b      	mov	fp, r1
 800b758:	492d      	ldr	r1, [pc, #180]	@ (800b810 <_strtod_l+0x590>)
 800b75a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b75e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b762:	4652      	mov	r2, sl
 800b764:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b768:	465b      	mov	r3, fp
 800b76a:	f7f9 febf 	bl	80054ec <__aeabi_dmul>
 800b76e:	4b25      	ldr	r3, [pc, #148]	@ (800b804 <_strtod_l+0x584>)
 800b770:	460a      	mov	r2, r1
 800b772:	400b      	ands	r3, r1
 800b774:	4927      	ldr	r1, [pc, #156]	@ (800b814 <_strtod_l+0x594>)
 800b776:	4682      	mov	sl, r0
 800b778:	428b      	cmp	r3, r1
 800b77a:	d898      	bhi.n	800b6ae <_strtod_l+0x42e>
 800b77c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b780:	428b      	cmp	r3, r1
 800b782:	bf86      	itte	hi
 800b784:	f04f 3aff 	movhi.w	sl, #4294967295
 800b788:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800b818 <_strtod_l+0x598>
 800b78c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b790:	2300      	movs	r3, #0
 800b792:	9308      	str	r3, [sp, #32]
 800b794:	e07a      	b.n	800b88c <_strtod_l+0x60c>
 800b796:	07e2      	lsls	r2, r4, #31
 800b798:	d505      	bpl.n	800b7a6 <_strtod_l+0x526>
 800b79a:	9b08      	ldr	r3, [sp, #32]
 800b79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a0:	f7f9 fea4 	bl	80054ec <__aeabi_dmul>
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	9a08      	ldr	r2, [sp, #32]
 800b7a8:	3601      	adds	r6, #1
 800b7aa:	3208      	adds	r2, #8
 800b7ac:	1064      	asrs	r4, r4, #1
 800b7ae:	9208      	str	r2, [sp, #32]
 800b7b0:	e7cd      	b.n	800b74e <_strtod_l+0x4ce>
 800b7b2:	d0ed      	beq.n	800b790 <_strtod_l+0x510>
 800b7b4:	4264      	negs	r4, r4
 800b7b6:	f014 020f 	ands.w	r2, r4, #15
 800b7ba:	d00a      	beq.n	800b7d2 <_strtod_l+0x552>
 800b7bc:	4b13      	ldr	r3, [pc, #76]	@ (800b80c <_strtod_l+0x58c>)
 800b7be:	4650      	mov	r0, sl
 800b7c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7c4:	4659      	mov	r1, fp
 800b7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ca:	f7f9 ffb9 	bl	8005740 <__aeabi_ddiv>
 800b7ce:	4682      	mov	sl, r0
 800b7d0:	468b      	mov	fp, r1
 800b7d2:	1124      	asrs	r4, r4, #4
 800b7d4:	d0dc      	beq.n	800b790 <_strtod_l+0x510>
 800b7d6:	2c1f      	cmp	r4, #31
 800b7d8:	dd20      	ble.n	800b81c <_strtod_l+0x59c>
 800b7da:	2400      	movs	r4, #0
 800b7dc:	46a0      	mov	r8, r4
 800b7de:	46a1      	mov	r9, r4
 800b7e0:	940a      	str	r4, [sp, #40]	@ 0x28
 800b7e2:	2322      	movs	r3, #34	@ 0x22
 800b7e4:	9a05      	ldr	r2, [sp, #20]
 800b7e6:	f04f 0a00 	mov.w	sl, #0
 800b7ea:	f04f 0b00 	mov.w	fp, #0
 800b7ee:	6013      	str	r3, [r2, #0]
 800b7f0:	e768      	b.n	800b6c4 <_strtod_l+0x444>
 800b7f2:	bf00      	nop
 800b7f4:	0800e675 	.word	0x0800e675
 800b7f8:	0800e678 	.word	0x0800e678
 800b7fc:	0800e66c 	.word	0x0800e66c
 800b800:	0800e66f 	.word	0x0800e66f
 800b804:	7ff00000 	.word	0x7ff00000
 800b808:	0800e5cd 	.word	0x0800e5cd
 800b80c:	0800e8e8 	.word	0x0800e8e8
 800b810:	0800e8c0 	.word	0x0800e8c0
 800b814:	7ca00000 	.word	0x7ca00000
 800b818:	7fefffff 	.word	0x7fefffff
 800b81c:	f014 0310 	ands.w	r3, r4, #16
 800b820:	bf18      	it	ne
 800b822:	236a      	movne	r3, #106	@ 0x6a
 800b824:	4650      	mov	r0, sl
 800b826:	9308      	str	r3, [sp, #32]
 800b828:	4659      	mov	r1, fp
 800b82a:	2300      	movs	r3, #0
 800b82c:	4ea9      	ldr	r6, [pc, #676]	@ (800bad4 <_strtod_l+0x854>)
 800b82e:	07e2      	lsls	r2, r4, #31
 800b830:	d504      	bpl.n	800b83c <_strtod_l+0x5bc>
 800b832:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b836:	f7f9 fe59 	bl	80054ec <__aeabi_dmul>
 800b83a:	2301      	movs	r3, #1
 800b83c:	1064      	asrs	r4, r4, #1
 800b83e:	f106 0608 	add.w	r6, r6, #8
 800b842:	d1f4      	bne.n	800b82e <_strtod_l+0x5ae>
 800b844:	b10b      	cbz	r3, 800b84a <_strtod_l+0x5ca>
 800b846:	4682      	mov	sl, r0
 800b848:	468b      	mov	fp, r1
 800b84a:	9b08      	ldr	r3, [sp, #32]
 800b84c:	b1b3      	cbz	r3, 800b87c <_strtod_l+0x5fc>
 800b84e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b852:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b856:	2b00      	cmp	r3, #0
 800b858:	4659      	mov	r1, fp
 800b85a:	dd0f      	ble.n	800b87c <_strtod_l+0x5fc>
 800b85c:	2b1f      	cmp	r3, #31
 800b85e:	dd57      	ble.n	800b910 <_strtod_l+0x690>
 800b860:	2b34      	cmp	r3, #52	@ 0x34
 800b862:	bfd8      	it	le
 800b864:	f04f 33ff 	movle.w	r3, #4294967295
 800b868:	f04f 0a00 	mov.w	sl, #0
 800b86c:	bfcf      	iteee	gt
 800b86e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b872:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b876:	4093      	lslle	r3, r2
 800b878:	ea03 0b01 	andle.w	fp, r3, r1
 800b87c:	2200      	movs	r2, #0
 800b87e:	2300      	movs	r3, #0
 800b880:	4650      	mov	r0, sl
 800b882:	4659      	mov	r1, fp
 800b884:	f7fa f89a 	bl	80059bc <__aeabi_dcmpeq>
 800b888:	2800      	cmp	r0, #0
 800b88a:	d1a6      	bne.n	800b7da <_strtod_l+0x55a>
 800b88c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b88e:	463a      	mov	r2, r7
 800b890:	9300      	str	r3, [sp, #0]
 800b892:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b894:	462b      	mov	r3, r5
 800b896:	9805      	ldr	r0, [sp, #20]
 800b898:	f001 fab6 	bl	800ce08 <__s2b>
 800b89c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b89e:	2800      	cmp	r0, #0
 800b8a0:	f43f af05 	beq.w	800b6ae <_strtod_l+0x42e>
 800b8a4:	2400      	movs	r4, #0
 800b8a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8a8:	eba9 0308 	sub.w	r3, r9, r8
 800b8ac:	2a00      	cmp	r2, #0
 800b8ae:	bfa8      	it	ge
 800b8b0:	2300      	movge	r3, #0
 800b8b2:	46a0      	mov	r8, r4
 800b8b4:	9312      	str	r3, [sp, #72]	@ 0x48
 800b8b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b8ba:	9316      	str	r3, [sp, #88]	@ 0x58
 800b8bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8be:	9805      	ldr	r0, [sp, #20]
 800b8c0:	6859      	ldr	r1, [r3, #4]
 800b8c2:	f001 f9f9 	bl	800ccb8 <_Balloc>
 800b8c6:	4681      	mov	r9, r0
 800b8c8:	2800      	cmp	r0, #0
 800b8ca:	f43f aef4 	beq.w	800b6b6 <_strtod_l+0x436>
 800b8ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8d0:	300c      	adds	r0, #12
 800b8d2:	691a      	ldr	r2, [r3, #16]
 800b8d4:	f103 010c 	add.w	r1, r3, #12
 800b8d8:	3202      	adds	r2, #2
 800b8da:	0092      	lsls	r2, r2, #2
 800b8dc:	f000 fd91 	bl	800c402 <memcpy>
 800b8e0:	ab1c      	add	r3, sp, #112	@ 0x70
 800b8e2:	9301      	str	r3, [sp, #4]
 800b8e4:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b8e6:	9300      	str	r3, [sp, #0]
 800b8e8:	4652      	mov	r2, sl
 800b8ea:	465b      	mov	r3, fp
 800b8ec:	9805      	ldr	r0, [sp, #20]
 800b8ee:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b8f2:	f001 fdbb 	bl	800d46c <__d2b>
 800b8f6:	901a      	str	r0, [sp, #104]	@ 0x68
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	f43f aedc 	beq.w	800b6b6 <_strtod_l+0x436>
 800b8fe:	2101      	movs	r1, #1
 800b900:	9805      	ldr	r0, [sp, #20]
 800b902:	f001 fb17 	bl	800cf34 <__i2b>
 800b906:	4680      	mov	r8, r0
 800b908:	b948      	cbnz	r0, 800b91e <_strtod_l+0x69e>
 800b90a:	f04f 0800 	mov.w	r8, #0
 800b90e:	e6d2      	b.n	800b6b6 <_strtod_l+0x436>
 800b910:	f04f 32ff 	mov.w	r2, #4294967295
 800b914:	fa02 f303 	lsl.w	r3, r2, r3
 800b918:	ea03 0a0a 	and.w	sl, r3, sl
 800b91c:	e7ae      	b.n	800b87c <_strtod_l+0x5fc>
 800b91e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b920:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b922:	2d00      	cmp	r5, #0
 800b924:	bfab      	itete	ge
 800b926:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b928:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b92a:	18ef      	addge	r7, r5, r3
 800b92c:	1b5e      	sublt	r6, r3, r5
 800b92e:	9b08      	ldr	r3, [sp, #32]
 800b930:	bfa8      	it	ge
 800b932:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b934:	eba5 0503 	sub.w	r5, r5, r3
 800b938:	4415      	add	r5, r2
 800b93a:	4b67      	ldr	r3, [pc, #412]	@ (800bad8 <_strtod_l+0x858>)
 800b93c:	f105 35ff 	add.w	r5, r5, #4294967295
 800b940:	bfb8      	it	lt
 800b942:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b944:	429d      	cmp	r5, r3
 800b946:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b94a:	da50      	bge.n	800b9ee <_strtod_l+0x76e>
 800b94c:	1b5b      	subs	r3, r3, r5
 800b94e:	2b1f      	cmp	r3, #31
 800b950:	f04f 0101 	mov.w	r1, #1
 800b954:	eba2 0203 	sub.w	r2, r2, r3
 800b958:	dc3d      	bgt.n	800b9d6 <_strtod_l+0x756>
 800b95a:	fa01 f303 	lsl.w	r3, r1, r3
 800b95e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b960:	2300      	movs	r3, #0
 800b962:	9310      	str	r3, [sp, #64]	@ 0x40
 800b964:	18bd      	adds	r5, r7, r2
 800b966:	9b08      	ldr	r3, [sp, #32]
 800b968:	42af      	cmp	r7, r5
 800b96a:	4416      	add	r6, r2
 800b96c:	441e      	add	r6, r3
 800b96e:	463b      	mov	r3, r7
 800b970:	bfa8      	it	ge
 800b972:	462b      	movge	r3, r5
 800b974:	42b3      	cmp	r3, r6
 800b976:	bfa8      	it	ge
 800b978:	4633      	movge	r3, r6
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	bfc2      	ittt	gt
 800b97e:	1aed      	subgt	r5, r5, r3
 800b980:	1af6      	subgt	r6, r6, r3
 800b982:	1aff      	subgt	r7, r7, r3
 800b984:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b986:	2b00      	cmp	r3, #0
 800b988:	dd16      	ble.n	800b9b8 <_strtod_l+0x738>
 800b98a:	4641      	mov	r1, r8
 800b98c:	461a      	mov	r2, r3
 800b98e:	9805      	ldr	r0, [sp, #20]
 800b990:	f001 fb8e 	bl	800d0b0 <__pow5mult>
 800b994:	4680      	mov	r8, r0
 800b996:	2800      	cmp	r0, #0
 800b998:	d0b7      	beq.n	800b90a <_strtod_l+0x68a>
 800b99a:	4601      	mov	r1, r0
 800b99c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b99e:	9805      	ldr	r0, [sp, #20]
 800b9a0:	f001 fade 	bl	800cf60 <__multiply>
 800b9a4:	900e      	str	r0, [sp, #56]	@ 0x38
 800b9a6:	2800      	cmp	r0, #0
 800b9a8:	f43f ae85 	beq.w	800b6b6 <_strtod_l+0x436>
 800b9ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b9ae:	9805      	ldr	r0, [sp, #20]
 800b9b0:	f001 f9c2 	bl	800cd38 <_Bfree>
 800b9b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9b6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9b8:	2d00      	cmp	r5, #0
 800b9ba:	dc1d      	bgt.n	800b9f8 <_strtod_l+0x778>
 800b9bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	dd23      	ble.n	800ba0a <_strtod_l+0x78a>
 800b9c2:	4649      	mov	r1, r9
 800b9c4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b9c6:	9805      	ldr	r0, [sp, #20]
 800b9c8:	f001 fb72 	bl	800d0b0 <__pow5mult>
 800b9cc:	4681      	mov	r9, r0
 800b9ce:	b9e0      	cbnz	r0, 800ba0a <_strtod_l+0x78a>
 800b9d0:	f04f 0900 	mov.w	r9, #0
 800b9d4:	e66f      	b.n	800b6b6 <_strtod_l+0x436>
 800b9d6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b9da:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b9de:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b9e2:	35e2      	adds	r5, #226	@ 0xe2
 800b9e4:	fa01 f305 	lsl.w	r3, r1, r5
 800b9e8:	9310      	str	r3, [sp, #64]	@ 0x40
 800b9ea:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b9ec:	e7ba      	b.n	800b964 <_strtod_l+0x6e4>
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	9310      	str	r3, [sp, #64]	@ 0x40
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b9f6:	e7b5      	b.n	800b964 <_strtod_l+0x6e4>
 800b9f8:	462a      	mov	r2, r5
 800b9fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b9fc:	9805      	ldr	r0, [sp, #20]
 800b9fe:	f001 fbb1 	bl	800d164 <__lshift>
 800ba02:	901a      	str	r0, [sp, #104]	@ 0x68
 800ba04:	2800      	cmp	r0, #0
 800ba06:	d1d9      	bne.n	800b9bc <_strtod_l+0x73c>
 800ba08:	e655      	b.n	800b6b6 <_strtod_l+0x436>
 800ba0a:	2e00      	cmp	r6, #0
 800ba0c:	dd07      	ble.n	800ba1e <_strtod_l+0x79e>
 800ba0e:	4649      	mov	r1, r9
 800ba10:	4632      	mov	r2, r6
 800ba12:	9805      	ldr	r0, [sp, #20]
 800ba14:	f001 fba6 	bl	800d164 <__lshift>
 800ba18:	4681      	mov	r9, r0
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	d0d8      	beq.n	800b9d0 <_strtod_l+0x750>
 800ba1e:	2f00      	cmp	r7, #0
 800ba20:	dd08      	ble.n	800ba34 <_strtod_l+0x7b4>
 800ba22:	4641      	mov	r1, r8
 800ba24:	463a      	mov	r2, r7
 800ba26:	9805      	ldr	r0, [sp, #20]
 800ba28:	f001 fb9c 	bl	800d164 <__lshift>
 800ba2c:	4680      	mov	r8, r0
 800ba2e:	2800      	cmp	r0, #0
 800ba30:	f43f ae41 	beq.w	800b6b6 <_strtod_l+0x436>
 800ba34:	464a      	mov	r2, r9
 800ba36:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ba38:	9805      	ldr	r0, [sp, #20]
 800ba3a:	f001 fc1b 	bl	800d274 <__mdiff>
 800ba3e:	4604      	mov	r4, r0
 800ba40:	2800      	cmp	r0, #0
 800ba42:	f43f ae38 	beq.w	800b6b6 <_strtod_l+0x436>
 800ba46:	68c3      	ldr	r3, [r0, #12]
 800ba48:	4641      	mov	r1, r8
 800ba4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	60c3      	str	r3, [r0, #12]
 800ba50:	f001 fbf4 	bl	800d23c <__mcmp>
 800ba54:	2800      	cmp	r0, #0
 800ba56:	da45      	bge.n	800bae4 <_strtod_l+0x864>
 800ba58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba5a:	ea53 030a 	orrs.w	r3, r3, sl
 800ba5e:	d16b      	bne.n	800bb38 <_strtod_l+0x8b8>
 800ba60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d167      	bne.n	800bb38 <_strtod_l+0x8b8>
 800ba68:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ba6c:	0d1b      	lsrs	r3, r3, #20
 800ba6e:	051b      	lsls	r3, r3, #20
 800ba70:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ba74:	d960      	bls.n	800bb38 <_strtod_l+0x8b8>
 800ba76:	6963      	ldr	r3, [r4, #20]
 800ba78:	b913      	cbnz	r3, 800ba80 <_strtod_l+0x800>
 800ba7a:	6923      	ldr	r3, [r4, #16]
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	dd5b      	ble.n	800bb38 <_strtod_l+0x8b8>
 800ba80:	4621      	mov	r1, r4
 800ba82:	2201      	movs	r2, #1
 800ba84:	9805      	ldr	r0, [sp, #20]
 800ba86:	f001 fb6d 	bl	800d164 <__lshift>
 800ba8a:	4641      	mov	r1, r8
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	f001 fbd5 	bl	800d23c <__mcmp>
 800ba92:	2800      	cmp	r0, #0
 800ba94:	dd50      	ble.n	800bb38 <_strtod_l+0x8b8>
 800ba96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ba9a:	9a08      	ldr	r2, [sp, #32]
 800ba9c:	0d1b      	lsrs	r3, r3, #20
 800ba9e:	051b      	lsls	r3, r3, #20
 800baa0:	2a00      	cmp	r2, #0
 800baa2:	d06a      	beq.n	800bb7a <_strtod_l+0x8fa>
 800baa4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800baa8:	d867      	bhi.n	800bb7a <_strtod_l+0x8fa>
 800baaa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800baae:	f67f ae98 	bls.w	800b7e2 <_strtod_l+0x562>
 800bab2:	4650      	mov	r0, sl
 800bab4:	4659      	mov	r1, fp
 800bab6:	4b09      	ldr	r3, [pc, #36]	@ (800badc <_strtod_l+0x85c>)
 800bab8:	2200      	movs	r2, #0
 800baba:	f7f9 fd17 	bl	80054ec <__aeabi_dmul>
 800babe:	4b08      	ldr	r3, [pc, #32]	@ (800bae0 <_strtod_l+0x860>)
 800bac0:	4682      	mov	sl, r0
 800bac2:	400b      	ands	r3, r1
 800bac4:	468b      	mov	fp, r1
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	f47f ae00 	bne.w	800b6cc <_strtod_l+0x44c>
 800bacc:	2322      	movs	r3, #34	@ 0x22
 800bace:	9a05      	ldr	r2, [sp, #20]
 800bad0:	6013      	str	r3, [r2, #0]
 800bad2:	e5fb      	b.n	800b6cc <_strtod_l+0x44c>
 800bad4:	0800e6a0 	.word	0x0800e6a0
 800bad8:	fffffc02 	.word	0xfffffc02
 800badc:	39500000 	.word	0x39500000
 800bae0:	7ff00000 	.word	0x7ff00000
 800bae4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bae8:	d165      	bne.n	800bbb6 <_strtod_l+0x936>
 800baea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800baec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800baf0:	b35a      	cbz	r2, 800bb4a <_strtod_l+0x8ca>
 800baf2:	4a99      	ldr	r2, [pc, #612]	@ (800bd58 <_strtod_l+0xad8>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d12b      	bne.n	800bb50 <_strtod_l+0x8d0>
 800baf8:	9b08      	ldr	r3, [sp, #32]
 800bafa:	4651      	mov	r1, sl
 800bafc:	b303      	cbz	r3, 800bb40 <_strtod_l+0x8c0>
 800bafe:	465a      	mov	r2, fp
 800bb00:	4b96      	ldr	r3, [pc, #600]	@ (800bd5c <_strtod_l+0xadc>)
 800bb02:	4013      	ands	r3, r2
 800bb04:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bb08:	f04f 32ff 	mov.w	r2, #4294967295
 800bb0c:	d81b      	bhi.n	800bb46 <_strtod_l+0x8c6>
 800bb0e:	0d1b      	lsrs	r3, r3, #20
 800bb10:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bb14:	fa02 f303 	lsl.w	r3, r2, r3
 800bb18:	4299      	cmp	r1, r3
 800bb1a:	d119      	bne.n	800bb50 <_strtod_l+0x8d0>
 800bb1c:	4b90      	ldr	r3, [pc, #576]	@ (800bd60 <_strtod_l+0xae0>)
 800bb1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d102      	bne.n	800bb2a <_strtod_l+0x8aa>
 800bb24:	3101      	adds	r1, #1
 800bb26:	f43f adc6 	beq.w	800b6b6 <_strtod_l+0x436>
 800bb2a:	f04f 0a00 	mov.w	sl, #0
 800bb2e:	4b8b      	ldr	r3, [pc, #556]	@ (800bd5c <_strtod_l+0xadc>)
 800bb30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb32:	401a      	ands	r2, r3
 800bb34:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bb38:	9b08      	ldr	r3, [sp, #32]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d1b9      	bne.n	800bab2 <_strtod_l+0x832>
 800bb3e:	e5c5      	b.n	800b6cc <_strtod_l+0x44c>
 800bb40:	f04f 33ff 	mov.w	r3, #4294967295
 800bb44:	e7e8      	b.n	800bb18 <_strtod_l+0x898>
 800bb46:	4613      	mov	r3, r2
 800bb48:	e7e6      	b.n	800bb18 <_strtod_l+0x898>
 800bb4a:	ea53 030a 	orrs.w	r3, r3, sl
 800bb4e:	d0a2      	beq.n	800ba96 <_strtod_l+0x816>
 800bb50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bb52:	b1db      	cbz	r3, 800bb8c <_strtod_l+0x90c>
 800bb54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb56:	4213      	tst	r3, r2
 800bb58:	d0ee      	beq.n	800bb38 <_strtod_l+0x8b8>
 800bb5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb5c:	4650      	mov	r0, sl
 800bb5e:	4659      	mov	r1, fp
 800bb60:	9a08      	ldr	r2, [sp, #32]
 800bb62:	b1bb      	cbz	r3, 800bb94 <_strtod_l+0x914>
 800bb64:	f7ff fb69 	bl	800b23a <sulp>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	460b      	mov	r3, r1
 800bb6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb70:	f7f9 fb06 	bl	8005180 <__adddf3>
 800bb74:	4682      	mov	sl, r0
 800bb76:	468b      	mov	fp, r1
 800bb78:	e7de      	b.n	800bb38 <_strtod_l+0x8b8>
 800bb7a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bb7e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bb82:	f04f 3aff 	mov.w	sl, #4294967295
 800bb86:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bb8a:	e7d5      	b.n	800bb38 <_strtod_l+0x8b8>
 800bb8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bb8e:	ea13 0f0a 	tst.w	r3, sl
 800bb92:	e7e1      	b.n	800bb58 <_strtod_l+0x8d8>
 800bb94:	f7ff fb51 	bl	800b23a <sulp>
 800bb98:	4602      	mov	r2, r0
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bba0:	f7f9 faec 	bl	800517c <__aeabi_dsub>
 800bba4:	2200      	movs	r2, #0
 800bba6:	2300      	movs	r3, #0
 800bba8:	4682      	mov	sl, r0
 800bbaa:	468b      	mov	fp, r1
 800bbac:	f7f9 ff06 	bl	80059bc <__aeabi_dcmpeq>
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	d0c1      	beq.n	800bb38 <_strtod_l+0x8b8>
 800bbb4:	e615      	b.n	800b7e2 <_strtod_l+0x562>
 800bbb6:	4641      	mov	r1, r8
 800bbb8:	4620      	mov	r0, r4
 800bbba:	f001 fcaf 	bl	800d51c <__ratio>
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bbc4:	4606      	mov	r6, r0
 800bbc6:	460f      	mov	r7, r1
 800bbc8:	f7f9 ff0c 	bl	80059e4 <__aeabi_dcmple>
 800bbcc:	2800      	cmp	r0, #0
 800bbce:	d06d      	beq.n	800bcac <_strtod_l+0xa2c>
 800bbd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d178      	bne.n	800bcc8 <_strtod_l+0xa48>
 800bbd6:	f1ba 0f00 	cmp.w	sl, #0
 800bbda:	d156      	bne.n	800bc8a <_strtod_l+0xa0a>
 800bbdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d158      	bne.n	800bc98 <_strtod_l+0xa18>
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	4630      	mov	r0, r6
 800bbea:	4639      	mov	r1, r7
 800bbec:	4b5d      	ldr	r3, [pc, #372]	@ (800bd64 <_strtod_l+0xae4>)
 800bbee:	f7f9 feef 	bl	80059d0 <__aeabi_dcmplt>
 800bbf2:	2800      	cmp	r0, #0
 800bbf4:	d157      	bne.n	800bca6 <_strtod_l+0xa26>
 800bbf6:	4630      	mov	r0, r6
 800bbf8:	4639      	mov	r1, r7
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	4b5a      	ldr	r3, [pc, #360]	@ (800bd68 <_strtod_l+0xae8>)
 800bbfe:	f7f9 fc75 	bl	80054ec <__aeabi_dmul>
 800bc02:	4606      	mov	r6, r0
 800bc04:	460f      	mov	r7, r1
 800bc06:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bc0a:	9606      	str	r6, [sp, #24]
 800bc0c:	9307      	str	r3, [sp, #28]
 800bc0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc12:	4d52      	ldr	r5, [pc, #328]	@ (800bd5c <_strtod_l+0xadc>)
 800bc14:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bc18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc1a:	401d      	ands	r5, r3
 800bc1c:	4b53      	ldr	r3, [pc, #332]	@ (800bd6c <_strtod_l+0xaec>)
 800bc1e:	429d      	cmp	r5, r3
 800bc20:	f040 80aa 	bne.w	800bd78 <_strtod_l+0xaf8>
 800bc24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc26:	4650      	mov	r0, sl
 800bc28:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bc2c:	4659      	mov	r1, fp
 800bc2e:	f001 fbb5 	bl	800d39c <__ulp>
 800bc32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc36:	f7f9 fc59 	bl	80054ec <__aeabi_dmul>
 800bc3a:	4652      	mov	r2, sl
 800bc3c:	465b      	mov	r3, fp
 800bc3e:	f7f9 fa9f 	bl	8005180 <__adddf3>
 800bc42:	460b      	mov	r3, r1
 800bc44:	4945      	ldr	r1, [pc, #276]	@ (800bd5c <_strtod_l+0xadc>)
 800bc46:	4a4a      	ldr	r2, [pc, #296]	@ (800bd70 <_strtod_l+0xaf0>)
 800bc48:	4019      	ands	r1, r3
 800bc4a:	4291      	cmp	r1, r2
 800bc4c:	4682      	mov	sl, r0
 800bc4e:	d942      	bls.n	800bcd6 <_strtod_l+0xa56>
 800bc50:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bc52:	4b43      	ldr	r3, [pc, #268]	@ (800bd60 <_strtod_l+0xae0>)
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d103      	bne.n	800bc60 <_strtod_l+0x9e0>
 800bc58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	f43f ad2b 	beq.w	800b6b6 <_strtod_l+0x436>
 800bc60:	f04f 3aff 	mov.w	sl, #4294967295
 800bc64:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800bd60 <_strtod_l+0xae0>
 800bc68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bc6a:	9805      	ldr	r0, [sp, #20]
 800bc6c:	f001 f864 	bl	800cd38 <_Bfree>
 800bc70:	4649      	mov	r1, r9
 800bc72:	9805      	ldr	r0, [sp, #20]
 800bc74:	f001 f860 	bl	800cd38 <_Bfree>
 800bc78:	4641      	mov	r1, r8
 800bc7a:	9805      	ldr	r0, [sp, #20]
 800bc7c:	f001 f85c 	bl	800cd38 <_Bfree>
 800bc80:	4621      	mov	r1, r4
 800bc82:	9805      	ldr	r0, [sp, #20]
 800bc84:	f001 f858 	bl	800cd38 <_Bfree>
 800bc88:	e618      	b.n	800b8bc <_strtod_l+0x63c>
 800bc8a:	f1ba 0f01 	cmp.w	sl, #1
 800bc8e:	d103      	bne.n	800bc98 <_strtod_l+0xa18>
 800bc90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	f43f ada5 	beq.w	800b7e2 <_strtod_l+0x562>
 800bc98:	2200      	movs	r2, #0
 800bc9a:	4b36      	ldr	r3, [pc, #216]	@ (800bd74 <_strtod_l+0xaf4>)
 800bc9c:	2600      	movs	r6, #0
 800bc9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bca2:	4f30      	ldr	r7, [pc, #192]	@ (800bd64 <_strtod_l+0xae4>)
 800bca4:	e7b3      	b.n	800bc0e <_strtod_l+0x98e>
 800bca6:	2600      	movs	r6, #0
 800bca8:	4f2f      	ldr	r7, [pc, #188]	@ (800bd68 <_strtod_l+0xae8>)
 800bcaa:	e7ac      	b.n	800bc06 <_strtod_l+0x986>
 800bcac:	4630      	mov	r0, r6
 800bcae:	4639      	mov	r1, r7
 800bcb0:	4b2d      	ldr	r3, [pc, #180]	@ (800bd68 <_strtod_l+0xae8>)
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	f7f9 fc1a 	bl	80054ec <__aeabi_dmul>
 800bcb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcba:	4606      	mov	r6, r0
 800bcbc:	460f      	mov	r7, r1
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d0a1      	beq.n	800bc06 <_strtod_l+0x986>
 800bcc2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bcc6:	e7a2      	b.n	800bc0e <_strtod_l+0x98e>
 800bcc8:	2200      	movs	r2, #0
 800bcca:	4b26      	ldr	r3, [pc, #152]	@ (800bd64 <_strtod_l+0xae4>)
 800bccc:	4616      	mov	r6, r2
 800bcce:	461f      	mov	r7, r3
 800bcd0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bcd4:	e79b      	b.n	800bc0e <_strtod_l+0x98e>
 800bcd6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bcda:	9b08      	ldr	r3, [sp, #32]
 800bcdc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d1c1      	bne.n	800bc68 <_strtod_l+0x9e8>
 800bce4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bce8:	0d1b      	lsrs	r3, r3, #20
 800bcea:	051b      	lsls	r3, r3, #20
 800bcec:	429d      	cmp	r5, r3
 800bcee:	d1bb      	bne.n	800bc68 <_strtod_l+0x9e8>
 800bcf0:	4630      	mov	r0, r6
 800bcf2:	4639      	mov	r1, r7
 800bcf4:	f7f9 ffa6 	bl	8005c44 <__aeabi_d2lz>
 800bcf8:	f7f9 fbca 	bl	8005490 <__aeabi_l2d>
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	460b      	mov	r3, r1
 800bd00:	4630      	mov	r0, r6
 800bd02:	4639      	mov	r1, r7
 800bd04:	f7f9 fa3a 	bl	800517c <__aeabi_dsub>
 800bd08:	460b      	mov	r3, r1
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bd10:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bd14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd16:	ea46 060a 	orr.w	r6, r6, sl
 800bd1a:	431e      	orrs	r6, r3
 800bd1c:	d069      	beq.n	800bdf2 <_strtod_l+0xb72>
 800bd1e:	a30a      	add	r3, pc, #40	@ (adr r3, 800bd48 <_strtod_l+0xac8>)
 800bd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd24:	f7f9 fe54 	bl	80059d0 <__aeabi_dcmplt>
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	f47f accf 	bne.w	800b6cc <_strtod_l+0x44c>
 800bd2e:	a308      	add	r3, pc, #32	@ (adr r3, 800bd50 <_strtod_l+0xad0>)
 800bd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd38:	f7f9 fe68 	bl	8005a0c <__aeabi_dcmpgt>
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	d093      	beq.n	800bc68 <_strtod_l+0x9e8>
 800bd40:	e4c4      	b.n	800b6cc <_strtod_l+0x44c>
 800bd42:	bf00      	nop
 800bd44:	f3af 8000 	nop.w
 800bd48:	94a03595 	.word	0x94a03595
 800bd4c:	3fdfffff 	.word	0x3fdfffff
 800bd50:	35afe535 	.word	0x35afe535
 800bd54:	3fe00000 	.word	0x3fe00000
 800bd58:	000fffff 	.word	0x000fffff
 800bd5c:	7ff00000 	.word	0x7ff00000
 800bd60:	7fefffff 	.word	0x7fefffff
 800bd64:	3ff00000 	.word	0x3ff00000
 800bd68:	3fe00000 	.word	0x3fe00000
 800bd6c:	7fe00000 	.word	0x7fe00000
 800bd70:	7c9fffff 	.word	0x7c9fffff
 800bd74:	bff00000 	.word	0xbff00000
 800bd78:	9b08      	ldr	r3, [sp, #32]
 800bd7a:	b323      	cbz	r3, 800bdc6 <_strtod_l+0xb46>
 800bd7c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bd80:	d821      	bhi.n	800bdc6 <_strtod_l+0xb46>
 800bd82:	a327      	add	r3, pc, #156	@ (adr r3, 800be20 <_strtod_l+0xba0>)
 800bd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd88:	4630      	mov	r0, r6
 800bd8a:	4639      	mov	r1, r7
 800bd8c:	f7f9 fe2a 	bl	80059e4 <__aeabi_dcmple>
 800bd90:	b1a0      	cbz	r0, 800bdbc <_strtod_l+0xb3c>
 800bd92:	4639      	mov	r1, r7
 800bd94:	4630      	mov	r0, r6
 800bd96:	f7f9 fe59 	bl	8005a4c <__aeabi_d2uiz>
 800bd9a:	2801      	cmp	r0, #1
 800bd9c:	bf38      	it	cc
 800bd9e:	2001      	movcc	r0, #1
 800bda0:	f7f9 fb2a 	bl	80053f8 <__aeabi_ui2d>
 800bda4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bda6:	4606      	mov	r6, r0
 800bda8:	460f      	mov	r7, r1
 800bdaa:	b9fb      	cbnz	r3, 800bdec <_strtod_l+0xb6c>
 800bdac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bdb0:	9014      	str	r0, [sp, #80]	@ 0x50
 800bdb2:	9315      	str	r3, [sp, #84]	@ 0x54
 800bdb4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bdb8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bdbc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bdbe:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800bdc2:	1b5b      	subs	r3, r3, r5
 800bdc4:	9311      	str	r3, [sp, #68]	@ 0x44
 800bdc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bdca:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800bdce:	f001 fae5 	bl	800d39c <__ulp>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	4650      	mov	r0, sl
 800bdd8:	4659      	mov	r1, fp
 800bdda:	f7f9 fb87 	bl	80054ec <__aeabi_dmul>
 800bdde:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bde2:	f7f9 f9cd 	bl	8005180 <__adddf3>
 800bde6:	4682      	mov	sl, r0
 800bde8:	468b      	mov	fp, r1
 800bdea:	e776      	b.n	800bcda <_strtod_l+0xa5a>
 800bdec:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800bdf0:	e7e0      	b.n	800bdb4 <_strtod_l+0xb34>
 800bdf2:	a30d      	add	r3, pc, #52	@ (adr r3, 800be28 <_strtod_l+0xba8>)
 800bdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf8:	f7f9 fdea 	bl	80059d0 <__aeabi_dcmplt>
 800bdfc:	e79e      	b.n	800bd3c <_strtod_l+0xabc>
 800bdfe:	2300      	movs	r3, #0
 800be00:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be04:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800be06:	6013      	str	r3, [r2, #0]
 800be08:	f7ff ba77 	b.w	800b2fa <_strtod_l+0x7a>
 800be0c:	2a65      	cmp	r2, #101	@ 0x65
 800be0e:	f43f ab6e 	beq.w	800b4ee <_strtod_l+0x26e>
 800be12:	2a45      	cmp	r2, #69	@ 0x45
 800be14:	f43f ab6b 	beq.w	800b4ee <_strtod_l+0x26e>
 800be18:	2301      	movs	r3, #1
 800be1a:	f7ff bba6 	b.w	800b56a <_strtod_l+0x2ea>
 800be1e:	bf00      	nop
 800be20:	ffc00000 	.word	0xffc00000
 800be24:	41dfffff 	.word	0x41dfffff
 800be28:	94a03595 	.word	0x94a03595
 800be2c:	3fcfffff 	.word	0x3fcfffff

0800be30 <strtof>:
 800be30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be34:	4d24      	ldr	r5, [pc, #144]	@ (800bec8 <strtof+0x98>)
 800be36:	460a      	mov	r2, r1
 800be38:	4b24      	ldr	r3, [pc, #144]	@ (800becc <strtof+0x9c>)
 800be3a:	4601      	mov	r1, r0
 800be3c:	6828      	ldr	r0, [r5, #0]
 800be3e:	f7ff fa1f 	bl	800b280 <_strtod_l>
 800be42:	4602      	mov	r2, r0
 800be44:	460b      	mov	r3, r1
 800be46:	4606      	mov	r6, r0
 800be48:	460f      	mov	r7, r1
 800be4a:	f7f9 fde9 	bl	8005a20 <__aeabi_dcmpun>
 800be4e:	b168      	cbz	r0, 800be6c <strtof+0x3c>
 800be50:	2f00      	cmp	r7, #0
 800be52:	481f      	ldr	r0, [pc, #124]	@ (800bed0 <strtof+0xa0>)
 800be54:	da06      	bge.n	800be64 <strtof+0x34>
 800be56:	f000 fae9 	bl	800c42c <nanf>
 800be5a:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800be5e:	4620      	mov	r0, r4
 800be60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be64:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be68:	f000 bae0 	b.w	800c42c <nanf>
 800be6c:	4639      	mov	r1, r7
 800be6e:	4630      	mov	r0, r6
 800be70:	f7f9 fe0c 	bl	8005a8c <__aeabi_d2f>
 800be74:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800be78:	4604      	mov	r4, r0
 800be7a:	4916      	ldr	r1, [pc, #88]	@ (800bed4 <strtof+0xa4>)
 800be7c:	4640      	mov	r0, r8
 800be7e:	f7f9 fecb 	bl	8005c18 <__aeabi_fcmpun>
 800be82:	b9b0      	cbnz	r0, 800beb2 <strtof+0x82>
 800be84:	4640      	mov	r0, r8
 800be86:	4913      	ldr	r1, [pc, #76]	@ (800bed4 <strtof+0xa4>)
 800be88:	f7f9 fea8 	bl	8005bdc <__aeabi_fcmple>
 800be8c:	b988      	cbnz	r0, 800beb2 <strtof+0x82>
 800be8e:	f027 4900 	bic.w	r9, r7, #2147483648	@ 0x80000000
 800be92:	f04f 32ff 	mov.w	r2, #4294967295
 800be96:	4630      	mov	r0, r6
 800be98:	4649      	mov	r1, r9
 800be9a:	4b0f      	ldr	r3, [pc, #60]	@ (800bed8 <strtof+0xa8>)
 800be9c:	f7f9 fdc0 	bl	8005a20 <__aeabi_dcmpun>
 800bea0:	b970      	cbnz	r0, 800bec0 <strtof+0x90>
 800bea2:	f04f 32ff 	mov.w	r2, #4294967295
 800bea6:	4630      	mov	r0, r6
 800bea8:	4649      	mov	r1, r9
 800beaa:	4b0b      	ldr	r3, [pc, #44]	@ (800bed8 <strtof+0xa8>)
 800beac:	f7f9 fd9a 	bl	80059e4 <__aeabi_dcmple>
 800beb0:	b930      	cbnz	r0, 800bec0 <strtof+0x90>
 800beb2:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800beb6:	d1d2      	bne.n	800be5e <strtof+0x2e>
 800beb8:	4b08      	ldr	r3, [pc, #32]	@ (800bedc <strtof+0xac>)
 800beba:	403b      	ands	r3, r7
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d0ce      	beq.n	800be5e <strtof+0x2e>
 800bec0:	2222      	movs	r2, #34	@ 0x22
 800bec2:	682b      	ldr	r3, [r5, #0]
 800bec4:	601a      	str	r2, [r3, #0]
 800bec6:	e7ca      	b.n	800be5e <strtof+0x2e>
 800bec8:	20000308 	.word	0x20000308
 800becc:	2000019c 	.word	0x2000019c
 800bed0:	0800e5cd 	.word	0x0800e5cd
 800bed4:	7f7fffff 	.word	0x7f7fffff
 800bed8:	7fefffff 	.word	0x7fefffff
 800bedc:	7ff00000 	.word	0x7ff00000

0800bee0 <_strtoul_l.constprop.0>:
 800bee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bee4:	4686      	mov	lr, r0
 800bee6:	460d      	mov	r5, r1
 800bee8:	4e33      	ldr	r6, [pc, #204]	@ (800bfb8 <_strtoul_l.constprop.0+0xd8>)
 800beea:	4628      	mov	r0, r5
 800beec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bef0:	5d37      	ldrb	r7, [r6, r4]
 800bef2:	f017 0708 	ands.w	r7, r7, #8
 800bef6:	d1f8      	bne.n	800beea <_strtoul_l.constprop.0+0xa>
 800bef8:	2c2d      	cmp	r4, #45	@ 0x2d
 800befa:	d12f      	bne.n	800bf5c <_strtoul_l.constprop.0+0x7c>
 800befc:	2701      	movs	r7, #1
 800befe:	782c      	ldrb	r4, [r5, #0]
 800bf00:	1c85      	adds	r5, r0, #2
 800bf02:	f033 0010 	bics.w	r0, r3, #16
 800bf06:	d109      	bne.n	800bf1c <_strtoul_l.constprop.0+0x3c>
 800bf08:	2c30      	cmp	r4, #48	@ 0x30
 800bf0a:	d12c      	bne.n	800bf66 <_strtoul_l.constprop.0+0x86>
 800bf0c:	7828      	ldrb	r0, [r5, #0]
 800bf0e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800bf12:	2858      	cmp	r0, #88	@ 0x58
 800bf14:	d127      	bne.n	800bf66 <_strtoul_l.constprop.0+0x86>
 800bf16:	2310      	movs	r3, #16
 800bf18:	786c      	ldrb	r4, [r5, #1]
 800bf1a:	3502      	adds	r5, #2
 800bf1c:	f04f 38ff 	mov.w	r8, #4294967295
 800bf20:	fbb8 f8f3 	udiv	r8, r8, r3
 800bf24:	2600      	movs	r6, #0
 800bf26:	fb03 f908 	mul.w	r9, r3, r8
 800bf2a:	4630      	mov	r0, r6
 800bf2c:	ea6f 0909 	mvn.w	r9, r9
 800bf30:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800bf34:	f1bc 0f09 	cmp.w	ip, #9
 800bf38:	d81c      	bhi.n	800bf74 <_strtoul_l.constprop.0+0x94>
 800bf3a:	4664      	mov	r4, ip
 800bf3c:	42a3      	cmp	r3, r4
 800bf3e:	dd2a      	ble.n	800bf96 <_strtoul_l.constprop.0+0xb6>
 800bf40:	f1b6 3fff 	cmp.w	r6, #4294967295
 800bf44:	d007      	beq.n	800bf56 <_strtoul_l.constprop.0+0x76>
 800bf46:	4580      	cmp	r8, r0
 800bf48:	d322      	bcc.n	800bf90 <_strtoul_l.constprop.0+0xb0>
 800bf4a:	d101      	bne.n	800bf50 <_strtoul_l.constprop.0+0x70>
 800bf4c:	45a1      	cmp	r9, r4
 800bf4e:	db1f      	blt.n	800bf90 <_strtoul_l.constprop.0+0xb0>
 800bf50:	2601      	movs	r6, #1
 800bf52:	fb00 4003 	mla	r0, r0, r3, r4
 800bf56:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf5a:	e7e9      	b.n	800bf30 <_strtoul_l.constprop.0+0x50>
 800bf5c:	2c2b      	cmp	r4, #43	@ 0x2b
 800bf5e:	bf04      	itt	eq
 800bf60:	782c      	ldrbeq	r4, [r5, #0]
 800bf62:	1c85      	addeq	r5, r0, #2
 800bf64:	e7cd      	b.n	800bf02 <_strtoul_l.constprop.0+0x22>
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d1d8      	bne.n	800bf1c <_strtoul_l.constprop.0+0x3c>
 800bf6a:	2c30      	cmp	r4, #48	@ 0x30
 800bf6c:	bf0c      	ite	eq
 800bf6e:	2308      	moveq	r3, #8
 800bf70:	230a      	movne	r3, #10
 800bf72:	e7d3      	b.n	800bf1c <_strtoul_l.constprop.0+0x3c>
 800bf74:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800bf78:	f1bc 0f19 	cmp.w	ip, #25
 800bf7c:	d801      	bhi.n	800bf82 <_strtoul_l.constprop.0+0xa2>
 800bf7e:	3c37      	subs	r4, #55	@ 0x37
 800bf80:	e7dc      	b.n	800bf3c <_strtoul_l.constprop.0+0x5c>
 800bf82:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800bf86:	f1bc 0f19 	cmp.w	ip, #25
 800bf8a:	d804      	bhi.n	800bf96 <_strtoul_l.constprop.0+0xb6>
 800bf8c:	3c57      	subs	r4, #87	@ 0x57
 800bf8e:	e7d5      	b.n	800bf3c <_strtoul_l.constprop.0+0x5c>
 800bf90:	f04f 36ff 	mov.w	r6, #4294967295
 800bf94:	e7df      	b.n	800bf56 <_strtoul_l.constprop.0+0x76>
 800bf96:	1c73      	adds	r3, r6, #1
 800bf98:	d106      	bne.n	800bfa8 <_strtoul_l.constprop.0+0xc8>
 800bf9a:	2322      	movs	r3, #34	@ 0x22
 800bf9c:	4630      	mov	r0, r6
 800bf9e:	f8ce 3000 	str.w	r3, [lr]
 800bfa2:	b932      	cbnz	r2, 800bfb2 <_strtoul_l.constprop.0+0xd2>
 800bfa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfa8:	b107      	cbz	r7, 800bfac <_strtoul_l.constprop.0+0xcc>
 800bfaa:	4240      	negs	r0, r0
 800bfac:	2a00      	cmp	r2, #0
 800bfae:	d0f9      	beq.n	800bfa4 <_strtoul_l.constprop.0+0xc4>
 800bfb0:	b106      	cbz	r6, 800bfb4 <_strtoul_l.constprop.0+0xd4>
 800bfb2:	1e69      	subs	r1, r5, #1
 800bfb4:	6011      	str	r1, [r2, #0]
 800bfb6:	e7f5      	b.n	800bfa4 <_strtoul_l.constprop.0+0xc4>
 800bfb8:	0800e6c9 	.word	0x0800e6c9

0800bfbc <strtoul>:
 800bfbc:	4613      	mov	r3, r2
 800bfbe:	460a      	mov	r2, r1
 800bfc0:	4601      	mov	r1, r0
 800bfc2:	4802      	ldr	r0, [pc, #8]	@ (800bfcc <strtoul+0x10>)
 800bfc4:	6800      	ldr	r0, [r0, #0]
 800bfc6:	f7ff bf8b 	b.w	800bee0 <_strtoul_l.constprop.0>
 800bfca:	bf00      	nop
 800bfcc:	20000308 	.word	0x20000308

0800bfd0 <std>:
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	b510      	push	{r4, lr}
 800bfd4:	4604      	mov	r4, r0
 800bfd6:	e9c0 3300 	strd	r3, r3, [r0]
 800bfda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bfde:	6083      	str	r3, [r0, #8]
 800bfe0:	8181      	strh	r1, [r0, #12]
 800bfe2:	6643      	str	r3, [r0, #100]	@ 0x64
 800bfe4:	81c2      	strh	r2, [r0, #14]
 800bfe6:	6183      	str	r3, [r0, #24]
 800bfe8:	4619      	mov	r1, r3
 800bfea:	2208      	movs	r2, #8
 800bfec:	305c      	adds	r0, #92	@ 0x5c
 800bfee:	f000 f947 	bl	800c280 <memset>
 800bff2:	4b0d      	ldr	r3, [pc, #52]	@ (800c028 <std+0x58>)
 800bff4:	6224      	str	r4, [r4, #32]
 800bff6:	6263      	str	r3, [r4, #36]	@ 0x24
 800bff8:	4b0c      	ldr	r3, [pc, #48]	@ (800c02c <std+0x5c>)
 800bffa:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bffc:	4b0c      	ldr	r3, [pc, #48]	@ (800c030 <std+0x60>)
 800bffe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c000:	4b0c      	ldr	r3, [pc, #48]	@ (800c034 <std+0x64>)
 800c002:	6323      	str	r3, [r4, #48]	@ 0x30
 800c004:	4b0c      	ldr	r3, [pc, #48]	@ (800c038 <std+0x68>)
 800c006:	429c      	cmp	r4, r3
 800c008:	d006      	beq.n	800c018 <std+0x48>
 800c00a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c00e:	4294      	cmp	r4, r2
 800c010:	d002      	beq.n	800c018 <std+0x48>
 800c012:	33d0      	adds	r3, #208	@ 0xd0
 800c014:	429c      	cmp	r4, r3
 800c016:	d105      	bne.n	800c024 <std+0x54>
 800c018:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c01c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c020:	f000 b9e4 	b.w	800c3ec <__retarget_lock_init_recursive>
 800c024:	bd10      	pop	{r4, pc}
 800c026:	bf00      	nop
 800c028:	0800c155 	.word	0x0800c155
 800c02c:	0800c177 	.word	0x0800c177
 800c030:	0800c1af 	.word	0x0800c1af
 800c034:	0800c1d3 	.word	0x0800c1d3
 800c038:	20001ad4 	.word	0x20001ad4

0800c03c <stdio_exit_handler>:
 800c03c:	4a02      	ldr	r2, [pc, #8]	@ (800c048 <stdio_exit_handler+0xc>)
 800c03e:	4903      	ldr	r1, [pc, #12]	@ (800c04c <stdio_exit_handler+0x10>)
 800c040:	4803      	ldr	r0, [pc, #12]	@ (800c050 <stdio_exit_handler+0x14>)
 800c042:	f000 b869 	b.w	800c118 <_fwalk_sglue>
 800c046:	bf00      	nop
 800c048:	20000190 	.word	0x20000190
 800c04c:	0800dcf1 	.word	0x0800dcf1
 800c050:	2000030c 	.word	0x2000030c

0800c054 <cleanup_stdio>:
 800c054:	6841      	ldr	r1, [r0, #4]
 800c056:	4b0c      	ldr	r3, [pc, #48]	@ (800c088 <cleanup_stdio+0x34>)
 800c058:	b510      	push	{r4, lr}
 800c05a:	4299      	cmp	r1, r3
 800c05c:	4604      	mov	r4, r0
 800c05e:	d001      	beq.n	800c064 <cleanup_stdio+0x10>
 800c060:	f001 fe46 	bl	800dcf0 <_fflush_r>
 800c064:	68a1      	ldr	r1, [r4, #8]
 800c066:	4b09      	ldr	r3, [pc, #36]	@ (800c08c <cleanup_stdio+0x38>)
 800c068:	4299      	cmp	r1, r3
 800c06a:	d002      	beq.n	800c072 <cleanup_stdio+0x1e>
 800c06c:	4620      	mov	r0, r4
 800c06e:	f001 fe3f 	bl	800dcf0 <_fflush_r>
 800c072:	68e1      	ldr	r1, [r4, #12]
 800c074:	4b06      	ldr	r3, [pc, #24]	@ (800c090 <cleanup_stdio+0x3c>)
 800c076:	4299      	cmp	r1, r3
 800c078:	d004      	beq.n	800c084 <cleanup_stdio+0x30>
 800c07a:	4620      	mov	r0, r4
 800c07c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c080:	f001 be36 	b.w	800dcf0 <_fflush_r>
 800c084:	bd10      	pop	{r4, pc}
 800c086:	bf00      	nop
 800c088:	20001ad4 	.word	0x20001ad4
 800c08c:	20001b3c 	.word	0x20001b3c
 800c090:	20001ba4 	.word	0x20001ba4

0800c094 <global_stdio_init.part.0>:
 800c094:	b510      	push	{r4, lr}
 800c096:	4b0b      	ldr	r3, [pc, #44]	@ (800c0c4 <global_stdio_init.part.0+0x30>)
 800c098:	4c0b      	ldr	r4, [pc, #44]	@ (800c0c8 <global_stdio_init.part.0+0x34>)
 800c09a:	4a0c      	ldr	r2, [pc, #48]	@ (800c0cc <global_stdio_init.part.0+0x38>)
 800c09c:	4620      	mov	r0, r4
 800c09e:	601a      	str	r2, [r3, #0]
 800c0a0:	2104      	movs	r1, #4
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	f7ff ff94 	bl	800bfd0 <std>
 800c0a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	2109      	movs	r1, #9
 800c0b0:	f7ff ff8e 	bl	800bfd0 <std>
 800c0b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c0b8:	2202      	movs	r2, #2
 800c0ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0be:	2112      	movs	r1, #18
 800c0c0:	f7ff bf86 	b.w	800bfd0 <std>
 800c0c4:	20001c0c 	.word	0x20001c0c
 800c0c8:	20001ad4 	.word	0x20001ad4
 800c0cc:	0800c03d 	.word	0x0800c03d

0800c0d0 <__sfp_lock_acquire>:
 800c0d0:	4801      	ldr	r0, [pc, #4]	@ (800c0d8 <__sfp_lock_acquire+0x8>)
 800c0d2:	f000 b98c 	b.w	800c3ee <__retarget_lock_acquire_recursive>
 800c0d6:	bf00      	nop
 800c0d8:	20001c15 	.word	0x20001c15

0800c0dc <__sfp_lock_release>:
 800c0dc:	4801      	ldr	r0, [pc, #4]	@ (800c0e4 <__sfp_lock_release+0x8>)
 800c0de:	f000 b987 	b.w	800c3f0 <__retarget_lock_release_recursive>
 800c0e2:	bf00      	nop
 800c0e4:	20001c15 	.word	0x20001c15

0800c0e8 <__sinit>:
 800c0e8:	b510      	push	{r4, lr}
 800c0ea:	4604      	mov	r4, r0
 800c0ec:	f7ff fff0 	bl	800c0d0 <__sfp_lock_acquire>
 800c0f0:	6a23      	ldr	r3, [r4, #32]
 800c0f2:	b11b      	cbz	r3, 800c0fc <__sinit+0x14>
 800c0f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0f8:	f7ff bff0 	b.w	800c0dc <__sfp_lock_release>
 800c0fc:	4b04      	ldr	r3, [pc, #16]	@ (800c110 <__sinit+0x28>)
 800c0fe:	6223      	str	r3, [r4, #32]
 800c100:	4b04      	ldr	r3, [pc, #16]	@ (800c114 <__sinit+0x2c>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d1f5      	bne.n	800c0f4 <__sinit+0xc>
 800c108:	f7ff ffc4 	bl	800c094 <global_stdio_init.part.0>
 800c10c:	e7f2      	b.n	800c0f4 <__sinit+0xc>
 800c10e:	bf00      	nop
 800c110:	0800c055 	.word	0x0800c055
 800c114:	20001c0c 	.word	0x20001c0c

0800c118 <_fwalk_sglue>:
 800c118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c11c:	4607      	mov	r7, r0
 800c11e:	4688      	mov	r8, r1
 800c120:	4614      	mov	r4, r2
 800c122:	2600      	movs	r6, #0
 800c124:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c128:	f1b9 0901 	subs.w	r9, r9, #1
 800c12c:	d505      	bpl.n	800c13a <_fwalk_sglue+0x22>
 800c12e:	6824      	ldr	r4, [r4, #0]
 800c130:	2c00      	cmp	r4, #0
 800c132:	d1f7      	bne.n	800c124 <_fwalk_sglue+0xc>
 800c134:	4630      	mov	r0, r6
 800c136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c13a:	89ab      	ldrh	r3, [r5, #12]
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	d907      	bls.n	800c150 <_fwalk_sglue+0x38>
 800c140:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c144:	3301      	adds	r3, #1
 800c146:	d003      	beq.n	800c150 <_fwalk_sglue+0x38>
 800c148:	4629      	mov	r1, r5
 800c14a:	4638      	mov	r0, r7
 800c14c:	47c0      	blx	r8
 800c14e:	4306      	orrs	r6, r0
 800c150:	3568      	adds	r5, #104	@ 0x68
 800c152:	e7e9      	b.n	800c128 <_fwalk_sglue+0x10>

0800c154 <__sread>:
 800c154:	b510      	push	{r4, lr}
 800c156:	460c      	mov	r4, r1
 800c158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c15c:	f000 f8f8 	bl	800c350 <_read_r>
 800c160:	2800      	cmp	r0, #0
 800c162:	bfab      	itete	ge
 800c164:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c166:	89a3      	ldrhlt	r3, [r4, #12]
 800c168:	181b      	addge	r3, r3, r0
 800c16a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c16e:	bfac      	ite	ge
 800c170:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c172:	81a3      	strhlt	r3, [r4, #12]
 800c174:	bd10      	pop	{r4, pc}

0800c176 <__swrite>:
 800c176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c17a:	461f      	mov	r7, r3
 800c17c:	898b      	ldrh	r3, [r1, #12]
 800c17e:	4605      	mov	r5, r0
 800c180:	05db      	lsls	r3, r3, #23
 800c182:	460c      	mov	r4, r1
 800c184:	4616      	mov	r6, r2
 800c186:	d505      	bpl.n	800c194 <__swrite+0x1e>
 800c188:	2302      	movs	r3, #2
 800c18a:	2200      	movs	r2, #0
 800c18c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c190:	f000 f8cc 	bl	800c32c <_lseek_r>
 800c194:	89a3      	ldrh	r3, [r4, #12]
 800c196:	4632      	mov	r2, r6
 800c198:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c19c:	81a3      	strh	r3, [r4, #12]
 800c19e:	4628      	mov	r0, r5
 800c1a0:	463b      	mov	r3, r7
 800c1a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1aa:	f000 b8e3 	b.w	800c374 <_write_r>

0800c1ae <__sseek>:
 800c1ae:	b510      	push	{r4, lr}
 800c1b0:	460c      	mov	r4, r1
 800c1b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1b6:	f000 f8b9 	bl	800c32c <_lseek_r>
 800c1ba:	1c43      	adds	r3, r0, #1
 800c1bc:	89a3      	ldrh	r3, [r4, #12]
 800c1be:	bf15      	itete	ne
 800c1c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c1c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c1c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c1ca:	81a3      	strheq	r3, [r4, #12]
 800c1cc:	bf18      	it	ne
 800c1ce:	81a3      	strhne	r3, [r4, #12]
 800c1d0:	bd10      	pop	{r4, pc}

0800c1d2 <__sclose>:
 800c1d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1d6:	f000 b899 	b.w	800c30c <_close_r>

0800c1da <_vsniprintf_r>:
 800c1da:	b530      	push	{r4, r5, lr}
 800c1dc:	4614      	mov	r4, r2
 800c1de:	2c00      	cmp	r4, #0
 800c1e0:	4605      	mov	r5, r0
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	b09b      	sub	sp, #108	@ 0x6c
 800c1e6:	da05      	bge.n	800c1f4 <_vsniprintf_r+0x1a>
 800c1e8:	238b      	movs	r3, #139	@ 0x8b
 800c1ea:	6003      	str	r3, [r0, #0]
 800c1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c1f0:	b01b      	add	sp, #108	@ 0x6c
 800c1f2:	bd30      	pop	{r4, r5, pc}
 800c1f4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c1f8:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c1fc:	bf0c      	ite	eq
 800c1fe:	4623      	moveq	r3, r4
 800c200:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c204:	9302      	str	r3, [sp, #8]
 800c206:	9305      	str	r3, [sp, #20]
 800c208:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c20c:	9100      	str	r1, [sp, #0]
 800c20e:	9104      	str	r1, [sp, #16]
 800c210:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c214:	4669      	mov	r1, sp
 800c216:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c218:	f001 fa5c 	bl	800d6d4 <_svfiprintf_r>
 800c21c:	1c43      	adds	r3, r0, #1
 800c21e:	bfbc      	itt	lt
 800c220:	238b      	movlt	r3, #139	@ 0x8b
 800c222:	602b      	strlt	r3, [r5, #0]
 800c224:	2c00      	cmp	r4, #0
 800c226:	d0e3      	beq.n	800c1f0 <_vsniprintf_r+0x16>
 800c228:	2200      	movs	r2, #0
 800c22a:	9b00      	ldr	r3, [sp, #0]
 800c22c:	701a      	strb	r2, [r3, #0]
 800c22e:	e7df      	b.n	800c1f0 <_vsniprintf_r+0x16>

0800c230 <vsniprintf>:
 800c230:	b507      	push	{r0, r1, r2, lr}
 800c232:	9300      	str	r3, [sp, #0]
 800c234:	4613      	mov	r3, r2
 800c236:	460a      	mov	r2, r1
 800c238:	4601      	mov	r1, r0
 800c23a:	4803      	ldr	r0, [pc, #12]	@ (800c248 <vsniprintf+0x18>)
 800c23c:	6800      	ldr	r0, [r0, #0]
 800c23e:	f7ff ffcc 	bl	800c1da <_vsniprintf_r>
 800c242:	b003      	add	sp, #12
 800c244:	f85d fb04 	ldr.w	pc, [sp], #4
 800c248:	20000308 	.word	0x20000308

0800c24c <memmove>:
 800c24c:	4288      	cmp	r0, r1
 800c24e:	b510      	push	{r4, lr}
 800c250:	eb01 0402 	add.w	r4, r1, r2
 800c254:	d902      	bls.n	800c25c <memmove+0x10>
 800c256:	4284      	cmp	r4, r0
 800c258:	4623      	mov	r3, r4
 800c25a:	d807      	bhi.n	800c26c <memmove+0x20>
 800c25c:	1e43      	subs	r3, r0, #1
 800c25e:	42a1      	cmp	r1, r4
 800c260:	d008      	beq.n	800c274 <memmove+0x28>
 800c262:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c266:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c26a:	e7f8      	b.n	800c25e <memmove+0x12>
 800c26c:	4601      	mov	r1, r0
 800c26e:	4402      	add	r2, r0
 800c270:	428a      	cmp	r2, r1
 800c272:	d100      	bne.n	800c276 <memmove+0x2a>
 800c274:	bd10      	pop	{r4, pc}
 800c276:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c27a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c27e:	e7f7      	b.n	800c270 <memmove+0x24>

0800c280 <memset>:
 800c280:	4603      	mov	r3, r0
 800c282:	4402      	add	r2, r0
 800c284:	4293      	cmp	r3, r2
 800c286:	d100      	bne.n	800c28a <memset+0xa>
 800c288:	4770      	bx	lr
 800c28a:	f803 1b01 	strb.w	r1, [r3], #1
 800c28e:	e7f9      	b.n	800c284 <memset+0x4>

0800c290 <strncmp>:
 800c290:	b510      	push	{r4, lr}
 800c292:	b16a      	cbz	r2, 800c2b0 <strncmp+0x20>
 800c294:	3901      	subs	r1, #1
 800c296:	1884      	adds	r4, r0, r2
 800c298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c29c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d103      	bne.n	800c2ac <strncmp+0x1c>
 800c2a4:	42a0      	cmp	r0, r4
 800c2a6:	d001      	beq.n	800c2ac <strncmp+0x1c>
 800c2a8:	2a00      	cmp	r2, #0
 800c2aa:	d1f5      	bne.n	800c298 <strncmp+0x8>
 800c2ac:	1ad0      	subs	r0, r2, r3
 800c2ae:	bd10      	pop	{r4, pc}
 800c2b0:	4610      	mov	r0, r2
 800c2b2:	e7fc      	b.n	800c2ae <strncmp+0x1e>

0800c2b4 <__strtok_r>:
 800c2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2b6:	4604      	mov	r4, r0
 800c2b8:	b908      	cbnz	r0, 800c2be <__strtok_r+0xa>
 800c2ba:	6814      	ldr	r4, [r2, #0]
 800c2bc:	b144      	cbz	r4, 800c2d0 <__strtok_r+0x1c>
 800c2be:	460f      	mov	r7, r1
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c2c6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c2ca:	b91e      	cbnz	r6, 800c2d4 <__strtok_r+0x20>
 800c2cc:	b965      	cbnz	r5, 800c2e8 <__strtok_r+0x34>
 800c2ce:	6015      	str	r5, [r2, #0]
 800c2d0:	2000      	movs	r0, #0
 800c2d2:	e005      	b.n	800c2e0 <__strtok_r+0x2c>
 800c2d4:	42b5      	cmp	r5, r6
 800c2d6:	d1f6      	bne.n	800c2c6 <__strtok_r+0x12>
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d1f0      	bne.n	800c2be <__strtok_r+0xa>
 800c2dc:	6014      	str	r4, [r2, #0]
 800c2de:	7003      	strb	r3, [r0, #0]
 800c2e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2e2:	461c      	mov	r4, r3
 800c2e4:	e00c      	b.n	800c300 <__strtok_r+0x4c>
 800c2e6:	b915      	cbnz	r5, 800c2ee <__strtok_r+0x3a>
 800c2e8:	460e      	mov	r6, r1
 800c2ea:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c2ee:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c2f2:	42ab      	cmp	r3, r5
 800c2f4:	d1f7      	bne.n	800c2e6 <__strtok_r+0x32>
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d0f3      	beq.n	800c2e2 <__strtok_r+0x2e>
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c300:	6014      	str	r4, [r2, #0]
 800c302:	e7ed      	b.n	800c2e0 <__strtok_r+0x2c>

0800c304 <strtok_r>:
 800c304:	2301      	movs	r3, #1
 800c306:	f7ff bfd5 	b.w	800c2b4 <__strtok_r>
	...

0800c30c <_close_r>:
 800c30c:	b538      	push	{r3, r4, r5, lr}
 800c30e:	2300      	movs	r3, #0
 800c310:	4d05      	ldr	r5, [pc, #20]	@ (800c328 <_close_r+0x1c>)
 800c312:	4604      	mov	r4, r0
 800c314:	4608      	mov	r0, r1
 800c316:	602b      	str	r3, [r5, #0]
 800c318:	f7f9 fe3c 	bl	8005f94 <_close>
 800c31c:	1c43      	adds	r3, r0, #1
 800c31e:	d102      	bne.n	800c326 <_close_r+0x1a>
 800c320:	682b      	ldr	r3, [r5, #0]
 800c322:	b103      	cbz	r3, 800c326 <_close_r+0x1a>
 800c324:	6023      	str	r3, [r4, #0]
 800c326:	bd38      	pop	{r3, r4, r5, pc}
 800c328:	20001c10 	.word	0x20001c10

0800c32c <_lseek_r>:
 800c32c:	b538      	push	{r3, r4, r5, lr}
 800c32e:	4604      	mov	r4, r0
 800c330:	4608      	mov	r0, r1
 800c332:	4611      	mov	r1, r2
 800c334:	2200      	movs	r2, #0
 800c336:	4d05      	ldr	r5, [pc, #20]	@ (800c34c <_lseek_r+0x20>)
 800c338:	602a      	str	r2, [r5, #0]
 800c33a:	461a      	mov	r2, r3
 800c33c:	f7f9 fe34 	bl	8005fa8 <_lseek>
 800c340:	1c43      	adds	r3, r0, #1
 800c342:	d102      	bne.n	800c34a <_lseek_r+0x1e>
 800c344:	682b      	ldr	r3, [r5, #0]
 800c346:	b103      	cbz	r3, 800c34a <_lseek_r+0x1e>
 800c348:	6023      	str	r3, [r4, #0]
 800c34a:	bd38      	pop	{r3, r4, r5, pc}
 800c34c:	20001c10 	.word	0x20001c10

0800c350 <_read_r>:
 800c350:	b538      	push	{r3, r4, r5, lr}
 800c352:	4604      	mov	r4, r0
 800c354:	4608      	mov	r0, r1
 800c356:	4611      	mov	r1, r2
 800c358:	2200      	movs	r2, #0
 800c35a:	4d05      	ldr	r5, [pc, #20]	@ (800c370 <_read_r+0x20>)
 800c35c:	602a      	str	r2, [r5, #0]
 800c35e:	461a      	mov	r2, r3
 800c360:	f7f9 fdfc 	bl	8005f5c <_read>
 800c364:	1c43      	adds	r3, r0, #1
 800c366:	d102      	bne.n	800c36e <_read_r+0x1e>
 800c368:	682b      	ldr	r3, [r5, #0]
 800c36a:	b103      	cbz	r3, 800c36e <_read_r+0x1e>
 800c36c:	6023      	str	r3, [r4, #0]
 800c36e:	bd38      	pop	{r3, r4, r5, pc}
 800c370:	20001c10 	.word	0x20001c10

0800c374 <_write_r>:
 800c374:	b538      	push	{r3, r4, r5, lr}
 800c376:	4604      	mov	r4, r0
 800c378:	4608      	mov	r0, r1
 800c37a:	4611      	mov	r1, r2
 800c37c:	2200      	movs	r2, #0
 800c37e:	4d05      	ldr	r5, [pc, #20]	@ (800c394 <_write_r+0x20>)
 800c380:	602a      	str	r2, [r5, #0]
 800c382:	461a      	mov	r2, r3
 800c384:	f7f9 fdf8 	bl	8005f78 <_write>
 800c388:	1c43      	adds	r3, r0, #1
 800c38a:	d102      	bne.n	800c392 <_write_r+0x1e>
 800c38c:	682b      	ldr	r3, [r5, #0]
 800c38e:	b103      	cbz	r3, 800c392 <_write_r+0x1e>
 800c390:	6023      	str	r3, [r4, #0]
 800c392:	bd38      	pop	{r3, r4, r5, pc}
 800c394:	20001c10 	.word	0x20001c10

0800c398 <__errno>:
 800c398:	4b01      	ldr	r3, [pc, #4]	@ (800c3a0 <__errno+0x8>)
 800c39a:	6818      	ldr	r0, [r3, #0]
 800c39c:	4770      	bx	lr
 800c39e:	bf00      	nop
 800c3a0:	20000308 	.word	0x20000308

0800c3a4 <__libc_init_array>:
 800c3a4:	b570      	push	{r4, r5, r6, lr}
 800c3a6:	2600      	movs	r6, #0
 800c3a8:	4d0c      	ldr	r5, [pc, #48]	@ (800c3dc <__libc_init_array+0x38>)
 800c3aa:	4c0d      	ldr	r4, [pc, #52]	@ (800c3e0 <__libc_init_array+0x3c>)
 800c3ac:	1b64      	subs	r4, r4, r5
 800c3ae:	10a4      	asrs	r4, r4, #2
 800c3b0:	42a6      	cmp	r6, r4
 800c3b2:	d109      	bne.n	800c3c8 <__libc_init_array+0x24>
 800c3b4:	f002 f806 	bl	800e3c4 <_init>
 800c3b8:	2600      	movs	r6, #0
 800c3ba:	4d0a      	ldr	r5, [pc, #40]	@ (800c3e4 <__libc_init_array+0x40>)
 800c3bc:	4c0a      	ldr	r4, [pc, #40]	@ (800c3e8 <__libc_init_array+0x44>)
 800c3be:	1b64      	subs	r4, r4, r5
 800c3c0:	10a4      	asrs	r4, r4, #2
 800c3c2:	42a6      	cmp	r6, r4
 800c3c4:	d105      	bne.n	800c3d2 <__libc_init_array+0x2e>
 800c3c6:	bd70      	pop	{r4, r5, r6, pc}
 800c3c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3cc:	4798      	blx	r3
 800c3ce:	3601      	adds	r6, #1
 800c3d0:	e7ee      	b.n	800c3b0 <__libc_init_array+0xc>
 800c3d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3d6:	4798      	blx	r3
 800c3d8:	3601      	adds	r6, #1
 800c3da:	e7f2      	b.n	800c3c2 <__libc_init_array+0x1e>
 800c3dc:	0800ea28 	.word	0x0800ea28
 800c3e0:	0800ea28 	.word	0x0800ea28
 800c3e4:	0800ea28 	.word	0x0800ea28
 800c3e8:	0800ea2c 	.word	0x0800ea2c

0800c3ec <__retarget_lock_init_recursive>:
 800c3ec:	4770      	bx	lr

0800c3ee <__retarget_lock_acquire_recursive>:
 800c3ee:	4770      	bx	lr

0800c3f0 <__retarget_lock_release_recursive>:
 800c3f0:	4770      	bx	lr

0800c3f2 <strcpy>:
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3f8:	f803 2b01 	strb.w	r2, [r3], #1
 800c3fc:	2a00      	cmp	r2, #0
 800c3fe:	d1f9      	bne.n	800c3f4 <strcpy+0x2>
 800c400:	4770      	bx	lr

0800c402 <memcpy>:
 800c402:	440a      	add	r2, r1
 800c404:	4291      	cmp	r1, r2
 800c406:	f100 33ff 	add.w	r3, r0, #4294967295
 800c40a:	d100      	bne.n	800c40e <memcpy+0xc>
 800c40c:	4770      	bx	lr
 800c40e:	b510      	push	{r4, lr}
 800c410:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c414:	4291      	cmp	r1, r2
 800c416:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c41a:	d1f9      	bne.n	800c410 <memcpy+0xe>
 800c41c:	bd10      	pop	{r4, pc}
	...

0800c420 <nan>:
 800c420:	2000      	movs	r0, #0
 800c422:	4901      	ldr	r1, [pc, #4]	@ (800c428 <nan+0x8>)
 800c424:	4770      	bx	lr
 800c426:	bf00      	nop
 800c428:	7ff80000 	.word	0x7ff80000

0800c42c <nanf>:
 800c42c:	4800      	ldr	r0, [pc, #0]	@ (800c430 <nanf+0x4>)
 800c42e:	4770      	bx	lr
 800c430:	7fc00000 	.word	0x7fc00000

0800c434 <_free_r>:
 800c434:	b538      	push	{r3, r4, r5, lr}
 800c436:	4605      	mov	r5, r0
 800c438:	2900      	cmp	r1, #0
 800c43a:	d040      	beq.n	800c4be <_free_r+0x8a>
 800c43c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c440:	1f0c      	subs	r4, r1, #4
 800c442:	2b00      	cmp	r3, #0
 800c444:	bfb8      	it	lt
 800c446:	18e4      	addlt	r4, r4, r3
 800c448:	f000 fc2a 	bl	800cca0 <__malloc_lock>
 800c44c:	4a1c      	ldr	r2, [pc, #112]	@ (800c4c0 <_free_r+0x8c>)
 800c44e:	6813      	ldr	r3, [r2, #0]
 800c450:	b933      	cbnz	r3, 800c460 <_free_r+0x2c>
 800c452:	6063      	str	r3, [r4, #4]
 800c454:	6014      	str	r4, [r2, #0]
 800c456:	4628      	mov	r0, r5
 800c458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c45c:	f000 bc26 	b.w	800ccac <__malloc_unlock>
 800c460:	42a3      	cmp	r3, r4
 800c462:	d908      	bls.n	800c476 <_free_r+0x42>
 800c464:	6820      	ldr	r0, [r4, #0]
 800c466:	1821      	adds	r1, r4, r0
 800c468:	428b      	cmp	r3, r1
 800c46a:	bf01      	itttt	eq
 800c46c:	6819      	ldreq	r1, [r3, #0]
 800c46e:	685b      	ldreq	r3, [r3, #4]
 800c470:	1809      	addeq	r1, r1, r0
 800c472:	6021      	streq	r1, [r4, #0]
 800c474:	e7ed      	b.n	800c452 <_free_r+0x1e>
 800c476:	461a      	mov	r2, r3
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	b10b      	cbz	r3, 800c480 <_free_r+0x4c>
 800c47c:	42a3      	cmp	r3, r4
 800c47e:	d9fa      	bls.n	800c476 <_free_r+0x42>
 800c480:	6811      	ldr	r1, [r2, #0]
 800c482:	1850      	adds	r0, r2, r1
 800c484:	42a0      	cmp	r0, r4
 800c486:	d10b      	bne.n	800c4a0 <_free_r+0x6c>
 800c488:	6820      	ldr	r0, [r4, #0]
 800c48a:	4401      	add	r1, r0
 800c48c:	1850      	adds	r0, r2, r1
 800c48e:	4283      	cmp	r3, r0
 800c490:	6011      	str	r1, [r2, #0]
 800c492:	d1e0      	bne.n	800c456 <_free_r+0x22>
 800c494:	6818      	ldr	r0, [r3, #0]
 800c496:	685b      	ldr	r3, [r3, #4]
 800c498:	4408      	add	r0, r1
 800c49a:	6010      	str	r0, [r2, #0]
 800c49c:	6053      	str	r3, [r2, #4]
 800c49e:	e7da      	b.n	800c456 <_free_r+0x22>
 800c4a0:	d902      	bls.n	800c4a8 <_free_r+0x74>
 800c4a2:	230c      	movs	r3, #12
 800c4a4:	602b      	str	r3, [r5, #0]
 800c4a6:	e7d6      	b.n	800c456 <_free_r+0x22>
 800c4a8:	6820      	ldr	r0, [r4, #0]
 800c4aa:	1821      	adds	r1, r4, r0
 800c4ac:	428b      	cmp	r3, r1
 800c4ae:	bf01      	itttt	eq
 800c4b0:	6819      	ldreq	r1, [r3, #0]
 800c4b2:	685b      	ldreq	r3, [r3, #4]
 800c4b4:	1809      	addeq	r1, r1, r0
 800c4b6:	6021      	streq	r1, [r4, #0]
 800c4b8:	6063      	str	r3, [r4, #4]
 800c4ba:	6054      	str	r4, [r2, #4]
 800c4bc:	e7cb      	b.n	800c456 <_free_r+0x22>
 800c4be:	bd38      	pop	{r3, r4, r5, pc}
 800c4c0:	20001c1c 	.word	0x20001c1c

0800c4c4 <rshift>:
 800c4c4:	6903      	ldr	r3, [r0, #16]
 800c4c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c4ca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c4ce:	f100 0414 	add.w	r4, r0, #20
 800c4d2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c4d6:	dd46      	ble.n	800c566 <rshift+0xa2>
 800c4d8:	f011 011f 	ands.w	r1, r1, #31
 800c4dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c4e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c4e4:	d10c      	bne.n	800c500 <rshift+0x3c>
 800c4e6:	4629      	mov	r1, r5
 800c4e8:	f100 0710 	add.w	r7, r0, #16
 800c4ec:	42b1      	cmp	r1, r6
 800c4ee:	d335      	bcc.n	800c55c <rshift+0x98>
 800c4f0:	1a9b      	subs	r3, r3, r2
 800c4f2:	009b      	lsls	r3, r3, #2
 800c4f4:	1eea      	subs	r2, r5, #3
 800c4f6:	4296      	cmp	r6, r2
 800c4f8:	bf38      	it	cc
 800c4fa:	2300      	movcc	r3, #0
 800c4fc:	4423      	add	r3, r4
 800c4fe:	e015      	b.n	800c52c <rshift+0x68>
 800c500:	46a1      	mov	r9, r4
 800c502:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c506:	f1c1 0820 	rsb	r8, r1, #32
 800c50a:	40cf      	lsrs	r7, r1
 800c50c:	f105 0e04 	add.w	lr, r5, #4
 800c510:	4576      	cmp	r6, lr
 800c512:	46f4      	mov	ip, lr
 800c514:	d816      	bhi.n	800c544 <rshift+0x80>
 800c516:	1a9a      	subs	r2, r3, r2
 800c518:	0092      	lsls	r2, r2, #2
 800c51a:	3a04      	subs	r2, #4
 800c51c:	3501      	adds	r5, #1
 800c51e:	42ae      	cmp	r6, r5
 800c520:	bf38      	it	cc
 800c522:	2200      	movcc	r2, #0
 800c524:	18a3      	adds	r3, r4, r2
 800c526:	50a7      	str	r7, [r4, r2]
 800c528:	b107      	cbz	r7, 800c52c <rshift+0x68>
 800c52a:	3304      	adds	r3, #4
 800c52c:	42a3      	cmp	r3, r4
 800c52e:	eba3 0204 	sub.w	r2, r3, r4
 800c532:	bf08      	it	eq
 800c534:	2300      	moveq	r3, #0
 800c536:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c53a:	6102      	str	r2, [r0, #16]
 800c53c:	bf08      	it	eq
 800c53e:	6143      	streq	r3, [r0, #20]
 800c540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c544:	f8dc c000 	ldr.w	ip, [ip]
 800c548:	fa0c fc08 	lsl.w	ip, ip, r8
 800c54c:	ea4c 0707 	orr.w	r7, ip, r7
 800c550:	f849 7b04 	str.w	r7, [r9], #4
 800c554:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c558:	40cf      	lsrs	r7, r1
 800c55a:	e7d9      	b.n	800c510 <rshift+0x4c>
 800c55c:	f851 cb04 	ldr.w	ip, [r1], #4
 800c560:	f847 cf04 	str.w	ip, [r7, #4]!
 800c564:	e7c2      	b.n	800c4ec <rshift+0x28>
 800c566:	4623      	mov	r3, r4
 800c568:	e7e0      	b.n	800c52c <rshift+0x68>

0800c56a <__hexdig_fun>:
 800c56a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c56e:	2b09      	cmp	r3, #9
 800c570:	d802      	bhi.n	800c578 <__hexdig_fun+0xe>
 800c572:	3820      	subs	r0, #32
 800c574:	b2c0      	uxtb	r0, r0
 800c576:	4770      	bx	lr
 800c578:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c57c:	2b05      	cmp	r3, #5
 800c57e:	d801      	bhi.n	800c584 <__hexdig_fun+0x1a>
 800c580:	3847      	subs	r0, #71	@ 0x47
 800c582:	e7f7      	b.n	800c574 <__hexdig_fun+0xa>
 800c584:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c588:	2b05      	cmp	r3, #5
 800c58a:	d801      	bhi.n	800c590 <__hexdig_fun+0x26>
 800c58c:	3827      	subs	r0, #39	@ 0x27
 800c58e:	e7f1      	b.n	800c574 <__hexdig_fun+0xa>
 800c590:	2000      	movs	r0, #0
 800c592:	4770      	bx	lr

0800c594 <__gethex>:
 800c594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c598:	468a      	mov	sl, r1
 800c59a:	4690      	mov	r8, r2
 800c59c:	b085      	sub	sp, #20
 800c59e:	9302      	str	r3, [sp, #8]
 800c5a0:	680b      	ldr	r3, [r1, #0]
 800c5a2:	9001      	str	r0, [sp, #4]
 800c5a4:	1c9c      	adds	r4, r3, #2
 800c5a6:	46a1      	mov	r9, r4
 800c5a8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c5ac:	2830      	cmp	r0, #48	@ 0x30
 800c5ae:	d0fa      	beq.n	800c5a6 <__gethex+0x12>
 800c5b0:	eba9 0303 	sub.w	r3, r9, r3
 800c5b4:	f1a3 0b02 	sub.w	fp, r3, #2
 800c5b8:	f7ff ffd7 	bl	800c56a <__hexdig_fun>
 800c5bc:	4605      	mov	r5, r0
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	d168      	bne.n	800c694 <__gethex+0x100>
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	4648      	mov	r0, r9
 800c5c6:	499f      	ldr	r1, [pc, #636]	@ (800c844 <__gethex+0x2b0>)
 800c5c8:	f7ff fe62 	bl	800c290 <strncmp>
 800c5cc:	4607      	mov	r7, r0
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	d167      	bne.n	800c6a2 <__gethex+0x10e>
 800c5d2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c5d6:	4626      	mov	r6, r4
 800c5d8:	f7ff ffc7 	bl	800c56a <__hexdig_fun>
 800c5dc:	2800      	cmp	r0, #0
 800c5de:	d062      	beq.n	800c6a6 <__gethex+0x112>
 800c5e0:	4623      	mov	r3, r4
 800c5e2:	7818      	ldrb	r0, [r3, #0]
 800c5e4:	4699      	mov	r9, r3
 800c5e6:	2830      	cmp	r0, #48	@ 0x30
 800c5e8:	f103 0301 	add.w	r3, r3, #1
 800c5ec:	d0f9      	beq.n	800c5e2 <__gethex+0x4e>
 800c5ee:	f7ff ffbc 	bl	800c56a <__hexdig_fun>
 800c5f2:	fab0 f580 	clz	r5, r0
 800c5f6:	f04f 0b01 	mov.w	fp, #1
 800c5fa:	096d      	lsrs	r5, r5, #5
 800c5fc:	464a      	mov	r2, r9
 800c5fe:	4616      	mov	r6, r2
 800c600:	7830      	ldrb	r0, [r6, #0]
 800c602:	3201      	adds	r2, #1
 800c604:	f7ff ffb1 	bl	800c56a <__hexdig_fun>
 800c608:	2800      	cmp	r0, #0
 800c60a:	d1f8      	bne.n	800c5fe <__gethex+0x6a>
 800c60c:	2201      	movs	r2, #1
 800c60e:	4630      	mov	r0, r6
 800c610:	498c      	ldr	r1, [pc, #560]	@ (800c844 <__gethex+0x2b0>)
 800c612:	f7ff fe3d 	bl	800c290 <strncmp>
 800c616:	2800      	cmp	r0, #0
 800c618:	d13f      	bne.n	800c69a <__gethex+0x106>
 800c61a:	b944      	cbnz	r4, 800c62e <__gethex+0x9a>
 800c61c:	1c74      	adds	r4, r6, #1
 800c61e:	4622      	mov	r2, r4
 800c620:	4616      	mov	r6, r2
 800c622:	7830      	ldrb	r0, [r6, #0]
 800c624:	3201      	adds	r2, #1
 800c626:	f7ff ffa0 	bl	800c56a <__hexdig_fun>
 800c62a:	2800      	cmp	r0, #0
 800c62c:	d1f8      	bne.n	800c620 <__gethex+0x8c>
 800c62e:	1ba4      	subs	r4, r4, r6
 800c630:	00a7      	lsls	r7, r4, #2
 800c632:	7833      	ldrb	r3, [r6, #0]
 800c634:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c638:	2b50      	cmp	r3, #80	@ 0x50
 800c63a:	d13e      	bne.n	800c6ba <__gethex+0x126>
 800c63c:	7873      	ldrb	r3, [r6, #1]
 800c63e:	2b2b      	cmp	r3, #43	@ 0x2b
 800c640:	d033      	beq.n	800c6aa <__gethex+0x116>
 800c642:	2b2d      	cmp	r3, #45	@ 0x2d
 800c644:	d034      	beq.n	800c6b0 <__gethex+0x11c>
 800c646:	2400      	movs	r4, #0
 800c648:	1c71      	adds	r1, r6, #1
 800c64a:	7808      	ldrb	r0, [r1, #0]
 800c64c:	f7ff ff8d 	bl	800c56a <__hexdig_fun>
 800c650:	1e43      	subs	r3, r0, #1
 800c652:	b2db      	uxtb	r3, r3
 800c654:	2b18      	cmp	r3, #24
 800c656:	d830      	bhi.n	800c6ba <__gethex+0x126>
 800c658:	f1a0 0210 	sub.w	r2, r0, #16
 800c65c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c660:	f7ff ff83 	bl	800c56a <__hexdig_fun>
 800c664:	f100 3cff 	add.w	ip, r0, #4294967295
 800c668:	fa5f fc8c 	uxtb.w	ip, ip
 800c66c:	f1bc 0f18 	cmp.w	ip, #24
 800c670:	f04f 030a 	mov.w	r3, #10
 800c674:	d91e      	bls.n	800c6b4 <__gethex+0x120>
 800c676:	b104      	cbz	r4, 800c67a <__gethex+0xe6>
 800c678:	4252      	negs	r2, r2
 800c67a:	4417      	add	r7, r2
 800c67c:	f8ca 1000 	str.w	r1, [sl]
 800c680:	b1ed      	cbz	r5, 800c6be <__gethex+0x12a>
 800c682:	f1bb 0f00 	cmp.w	fp, #0
 800c686:	bf0c      	ite	eq
 800c688:	2506      	moveq	r5, #6
 800c68a:	2500      	movne	r5, #0
 800c68c:	4628      	mov	r0, r5
 800c68e:	b005      	add	sp, #20
 800c690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c694:	2500      	movs	r5, #0
 800c696:	462c      	mov	r4, r5
 800c698:	e7b0      	b.n	800c5fc <__gethex+0x68>
 800c69a:	2c00      	cmp	r4, #0
 800c69c:	d1c7      	bne.n	800c62e <__gethex+0x9a>
 800c69e:	4627      	mov	r7, r4
 800c6a0:	e7c7      	b.n	800c632 <__gethex+0x9e>
 800c6a2:	464e      	mov	r6, r9
 800c6a4:	462f      	mov	r7, r5
 800c6a6:	2501      	movs	r5, #1
 800c6a8:	e7c3      	b.n	800c632 <__gethex+0x9e>
 800c6aa:	2400      	movs	r4, #0
 800c6ac:	1cb1      	adds	r1, r6, #2
 800c6ae:	e7cc      	b.n	800c64a <__gethex+0xb6>
 800c6b0:	2401      	movs	r4, #1
 800c6b2:	e7fb      	b.n	800c6ac <__gethex+0x118>
 800c6b4:	fb03 0002 	mla	r0, r3, r2, r0
 800c6b8:	e7ce      	b.n	800c658 <__gethex+0xc4>
 800c6ba:	4631      	mov	r1, r6
 800c6bc:	e7de      	b.n	800c67c <__gethex+0xe8>
 800c6be:	4629      	mov	r1, r5
 800c6c0:	eba6 0309 	sub.w	r3, r6, r9
 800c6c4:	3b01      	subs	r3, #1
 800c6c6:	2b07      	cmp	r3, #7
 800c6c8:	dc0a      	bgt.n	800c6e0 <__gethex+0x14c>
 800c6ca:	9801      	ldr	r0, [sp, #4]
 800c6cc:	f000 faf4 	bl	800ccb8 <_Balloc>
 800c6d0:	4604      	mov	r4, r0
 800c6d2:	b940      	cbnz	r0, 800c6e6 <__gethex+0x152>
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	21e4      	movs	r1, #228	@ 0xe4
 800c6d8:	4b5b      	ldr	r3, [pc, #364]	@ (800c848 <__gethex+0x2b4>)
 800c6da:	485c      	ldr	r0, [pc, #368]	@ (800c84c <__gethex+0x2b8>)
 800c6dc:	f001 fb4e 	bl	800dd7c <__assert_func>
 800c6e0:	3101      	adds	r1, #1
 800c6e2:	105b      	asrs	r3, r3, #1
 800c6e4:	e7ef      	b.n	800c6c6 <__gethex+0x132>
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	f100 0a14 	add.w	sl, r0, #20
 800c6ec:	4655      	mov	r5, sl
 800c6ee:	469b      	mov	fp, r3
 800c6f0:	45b1      	cmp	r9, r6
 800c6f2:	d337      	bcc.n	800c764 <__gethex+0x1d0>
 800c6f4:	f845 bb04 	str.w	fp, [r5], #4
 800c6f8:	eba5 050a 	sub.w	r5, r5, sl
 800c6fc:	10ad      	asrs	r5, r5, #2
 800c6fe:	6125      	str	r5, [r4, #16]
 800c700:	4658      	mov	r0, fp
 800c702:	f000 fbcb 	bl	800ce9c <__hi0bits>
 800c706:	016d      	lsls	r5, r5, #5
 800c708:	f8d8 6000 	ldr.w	r6, [r8]
 800c70c:	1a2d      	subs	r5, r5, r0
 800c70e:	42b5      	cmp	r5, r6
 800c710:	dd54      	ble.n	800c7bc <__gethex+0x228>
 800c712:	1bad      	subs	r5, r5, r6
 800c714:	4629      	mov	r1, r5
 800c716:	4620      	mov	r0, r4
 800c718:	f000 ff53 	bl	800d5c2 <__any_on>
 800c71c:	4681      	mov	r9, r0
 800c71e:	b178      	cbz	r0, 800c740 <__gethex+0x1ac>
 800c720:	f04f 0901 	mov.w	r9, #1
 800c724:	1e6b      	subs	r3, r5, #1
 800c726:	1159      	asrs	r1, r3, #5
 800c728:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c72c:	f003 021f 	and.w	r2, r3, #31
 800c730:	fa09 f202 	lsl.w	r2, r9, r2
 800c734:	420a      	tst	r2, r1
 800c736:	d003      	beq.n	800c740 <__gethex+0x1ac>
 800c738:	454b      	cmp	r3, r9
 800c73a:	dc36      	bgt.n	800c7aa <__gethex+0x216>
 800c73c:	f04f 0902 	mov.w	r9, #2
 800c740:	4629      	mov	r1, r5
 800c742:	4620      	mov	r0, r4
 800c744:	f7ff febe 	bl	800c4c4 <rshift>
 800c748:	442f      	add	r7, r5
 800c74a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c74e:	42bb      	cmp	r3, r7
 800c750:	da42      	bge.n	800c7d8 <__gethex+0x244>
 800c752:	4621      	mov	r1, r4
 800c754:	9801      	ldr	r0, [sp, #4]
 800c756:	f000 faef 	bl	800cd38 <_Bfree>
 800c75a:	2300      	movs	r3, #0
 800c75c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c75e:	25a3      	movs	r5, #163	@ 0xa3
 800c760:	6013      	str	r3, [r2, #0]
 800c762:	e793      	b.n	800c68c <__gethex+0xf8>
 800c764:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c768:	2a2e      	cmp	r2, #46	@ 0x2e
 800c76a:	d012      	beq.n	800c792 <__gethex+0x1fe>
 800c76c:	2b20      	cmp	r3, #32
 800c76e:	d104      	bne.n	800c77a <__gethex+0x1e6>
 800c770:	f845 bb04 	str.w	fp, [r5], #4
 800c774:	f04f 0b00 	mov.w	fp, #0
 800c778:	465b      	mov	r3, fp
 800c77a:	7830      	ldrb	r0, [r6, #0]
 800c77c:	9303      	str	r3, [sp, #12]
 800c77e:	f7ff fef4 	bl	800c56a <__hexdig_fun>
 800c782:	9b03      	ldr	r3, [sp, #12]
 800c784:	f000 000f 	and.w	r0, r0, #15
 800c788:	4098      	lsls	r0, r3
 800c78a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c78e:	3304      	adds	r3, #4
 800c790:	e7ae      	b.n	800c6f0 <__gethex+0x15c>
 800c792:	45b1      	cmp	r9, r6
 800c794:	d8ea      	bhi.n	800c76c <__gethex+0x1d8>
 800c796:	2201      	movs	r2, #1
 800c798:	4630      	mov	r0, r6
 800c79a:	492a      	ldr	r1, [pc, #168]	@ (800c844 <__gethex+0x2b0>)
 800c79c:	9303      	str	r3, [sp, #12]
 800c79e:	f7ff fd77 	bl	800c290 <strncmp>
 800c7a2:	9b03      	ldr	r3, [sp, #12]
 800c7a4:	2800      	cmp	r0, #0
 800c7a6:	d1e1      	bne.n	800c76c <__gethex+0x1d8>
 800c7a8:	e7a2      	b.n	800c6f0 <__gethex+0x15c>
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	1ea9      	subs	r1, r5, #2
 800c7ae:	f000 ff08 	bl	800d5c2 <__any_on>
 800c7b2:	2800      	cmp	r0, #0
 800c7b4:	d0c2      	beq.n	800c73c <__gethex+0x1a8>
 800c7b6:	f04f 0903 	mov.w	r9, #3
 800c7ba:	e7c1      	b.n	800c740 <__gethex+0x1ac>
 800c7bc:	da09      	bge.n	800c7d2 <__gethex+0x23e>
 800c7be:	1b75      	subs	r5, r6, r5
 800c7c0:	4621      	mov	r1, r4
 800c7c2:	462a      	mov	r2, r5
 800c7c4:	9801      	ldr	r0, [sp, #4]
 800c7c6:	f000 fccd 	bl	800d164 <__lshift>
 800c7ca:	4604      	mov	r4, r0
 800c7cc:	1b7f      	subs	r7, r7, r5
 800c7ce:	f100 0a14 	add.w	sl, r0, #20
 800c7d2:	f04f 0900 	mov.w	r9, #0
 800c7d6:	e7b8      	b.n	800c74a <__gethex+0x1b6>
 800c7d8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c7dc:	42bd      	cmp	r5, r7
 800c7de:	dd6f      	ble.n	800c8c0 <__gethex+0x32c>
 800c7e0:	1bed      	subs	r5, r5, r7
 800c7e2:	42ae      	cmp	r6, r5
 800c7e4:	dc34      	bgt.n	800c850 <__gethex+0x2bc>
 800c7e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c7ea:	2b02      	cmp	r3, #2
 800c7ec:	d022      	beq.n	800c834 <__gethex+0x2a0>
 800c7ee:	2b03      	cmp	r3, #3
 800c7f0:	d024      	beq.n	800c83c <__gethex+0x2a8>
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	d115      	bne.n	800c822 <__gethex+0x28e>
 800c7f6:	42ae      	cmp	r6, r5
 800c7f8:	d113      	bne.n	800c822 <__gethex+0x28e>
 800c7fa:	2e01      	cmp	r6, #1
 800c7fc:	d10b      	bne.n	800c816 <__gethex+0x282>
 800c7fe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c802:	9a02      	ldr	r2, [sp, #8]
 800c804:	2562      	movs	r5, #98	@ 0x62
 800c806:	6013      	str	r3, [r2, #0]
 800c808:	2301      	movs	r3, #1
 800c80a:	6123      	str	r3, [r4, #16]
 800c80c:	f8ca 3000 	str.w	r3, [sl]
 800c810:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c812:	601c      	str	r4, [r3, #0]
 800c814:	e73a      	b.n	800c68c <__gethex+0xf8>
 800c816:	4620      	mov	r0, r4
 800c818:	1e71      	subs	r1, r6, #1
 800c81a:	f000 fed2 	bl	800d5c2 <__any_on>
 800c81e:	2800      	cmp	r0, #0
 800c820:	d1ed      	bne.n	800c7fe <__gethex+0x26a>
 800c822:	4621      	mov	r1, r4
 800c824:	9801      	ldr	r0, [sp, #4]
 800c826:	f000 fa87 	bl	800cd38 <_Bfree>
 800c82a:	2300      	movs	r3, #0
 800c82c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c82e:	2550      	movs	r5, #80	@ 0x50
 800c830:	6013      	str	r3, [r2, #0]
 800c832:	e72b      	b.n	800c68c <__gethex+0xf8>
 800c834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c836:	2b00      	cmp	r3, #0
 800c838:	d1f3      	bne.n	800c822 <__gethex+0x28e>
 800c83a:	e7e0      	b.n	800c7fe <__gethex+0x26a>
 800c83c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d1dd      	bne.n	800c7fe <__gethex+0x26a>
 800c842:	e7ee      	b.n	800c822 <__gethex+0x28e>
 800c844:	0800e51b 	.word	0x0800e51b
 800c848:	0800e7cf 	.word	0x0800e7cf
 800c84c:	0800e7e0 	.word	0x0800e7e0
 800c850:	1e6f      	subs	r7, r5, #1
 800c852:	f1b9 0f00 	cmp.w	r9, #0
 800c856:	d130      	bne.n	800c8ba <__gethex+0x326>
 800c858:	b127      	cbz	r7, 800c864 <__gethex+0x2d0>
 800c85a:	4639      	mov	r1, r7
 800c85c:	4620      	mov	r0, r4
 800c85e:	f000 feb0 	bl	800d5c2 <__any_on>
 800c862:	4681      	mov	r9, r0
 800c864:	2301      	movs	r3, #1
 800c866:	4629      	mov	r1, r5
 800c868:	1b76      	subs	r6, r6, r5
 800c86a:	2502      	movs	r5, #2
 800c86c:	117a      	asrs	r2, r7, #5
 800c86e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c872:	f007 071f 	and.w	r7, r7, #31
 800c876:	40bb      	lsls	r3, r7
 800c878:	4213      	tst	r3, r2
 800c87a:	4620      	mov	r0, r4
 800c87c:	bf18      	it	ne
 800c87e:	f049 0902 	orrne.w	r9, r9, #2
 800c882:	f7ff fe1f 	bl	800c4c4 <rshift>
 800c886:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c88a:	f1b9 0f00 	cmp.w	r9, #0
 800c88e:	d047      	beq.n	800c920 <__gethex+0x38c>
 800c890:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c894:	2b02      	cmp	r3, #2
 800c896:	d015      	beq.n	800c8c4 <__gethex+0x330>
 800c898:	2b03      	cmp	r3, #3
 800c89a:	d017      	beq.n	800c8cc <__gethex+0x338>
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d109      	bne.n	800c8b4 <__gethex+0x320>
 800c8a0:	f019 0f02 	tst.w	r9, #2
 800c8a4:	d006      	beq.n	800c8b4 <__gethex+0x320>
 800c8a6:	f8da 3000 	ldr.w	r3, [sl]
 800c8aa:	ea49 0903 	orr.w	r9, r9, r3
 800c8ae:	f019 0f01 	tst.w	r9, #1
 800c8b2:	d10e      	bne.n	800c8d2 <__gethex+0x33e>
 800c8b4:	f045 0510 	orr.w	r5, r5, #16
 800c8b8:	e032      	b.n	800c920 <__gethex+0x38c>
 800c8ba:	f04f 0901 	mov.w	r9, #1
 800c8be:	e7d1      	b.n	800c864 <__gethex+0x2d0>
 800c8c0:	2501      	movs	r5, #1
 800c8c2:	e7e2      	b.n	800c88a <__gethex+0x2f6>
 800c8c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8c6:	f1c3 0301 	rsb	r3, r3, #1
 800c8ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c8cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d0f0      	beq.n	800c8b4 <__gethex+0x320>
 800c8d2:	f04f 0c00 	mov.w	ip, #0
 800c8d6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c8da:	f104 0314 	add.w	r3, r4, #20
 800c8de:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c8e2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c8f0:	d01b      	beq.n	800c92a <__gethex+0x396>
 800c8f2:	3201      	adds	r2, #1
 800c8f4:	6002      	str	r2, [r0, #0]
 800c8f6:	2d02      	cmp	r5, #2
 800c8f8:	f104 0314 	add.w	r3, r4, #20
 800c8fc:	d13c      	bne.n	800c978 <__gethex+0x3e4>
 800c8fe:	f8d8 2000 	ldr.w	r2, [r8]
 800c902:	3a01      	subs	r2, #1
 800c904:	42b2      	cmp	r2, r6
 800c906:	d109      	bne.n	800c91c <__gethex+0x388>
 800c908:	2201      	movs	r2, #1
 800c90a:	1171      	asrs	r1, r6, #5
 800c90c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c910:	f006 061f 	and.w	r6, r6, #31
 800c914:	fa02 f606 	lsl.w	r6, r2, r6
 800c918:	421e      	tst	r6, r3
 800c91a:	d13a      	bne.n	800c992 <__gethex+0x3fe>
 800c91c:	f045 0520 	orr.w	r5, r5, #32
 800c920:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c922:	601c      	str	r4, [r3, #0]
 800c924:	9b02      	ldr	r3, [sp, #8]
 800c926:	601f      	str	r7, [r3, #0]
 800c928:	e6b0      	b.n	800c68c <__gethex+0xf8>
 800c92a:	4299      	cmp	r1, r3
 800c92c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c930:	d8d9      	bhi.n	800c8e6 <__gethex+0x352>
 800c932:	68a3      	ldr	r3, [r4, #8]
 800c934:	459b      	cmp	fp, r3
 800c936:	db17      	blt.n	800c968 <__gethex+0x3d4>
 800c938:	6861      	ldr	r1, [r4, #4]
 800c93a:	9801      	ldr	r0, [sp, #4]
 800c93c:	3101      	adds	r1, #1
 800c93e:	f000 f9bb 	bl	800ccb8 <_Balloc>
 800c942:	4681      	mov	r9, r0
 800c944:	b918      	cbnz	r0, 800c94e <__gethex+0x3ba>
 800c946:	4602      	mov	r2, r0
 800c948:	2184      	movs	r1, #132	@ 0x84
 800c94a:	4b19      	ldr	r3, [pc, #100]	@ (800c9b0 <__gethex+0x41c>)
 800c94c:	e6c5      	b.n	800c6da <__gethex+0x146>
 800c94e:	6922      	ldr	r2, [r4, #16]
 800c950:	f104 010c 	add.w	r1, r4, #12
 800c954:	3202      	adds	r2, #2
 800c956:	0092      	lsls	r2, r2, #2
 800c958:	300c      	adds	r0, #12
 800c95a:	f7ff fd52 	bl	800c402 <memcpy>
 800c95e:	4621      	mov	r1, r4
 800c960:	9801      	ldr	r0, [sp, #4]
 800c962:	f000 f9e9 	bl	800cd38 <_Bfree>
 800c966:	464c      	mov	r4, r9
 800c968:	6923      	ldr	r3, [r4, #16]
 800c96a:	1c5a      	adds	r2, r3, #1
 800c96c:	6122      	str	r2, [r4, #16]
 800c96e:	2201      	movs	r2, #1
 800c970:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c974:	615a      	str	r2, [r3, #20]
 800c976:	e7be      	b.n	800c8f6 <__gethex+0x362>
 800c978:	6922      	ldr	r2, [r4, #16]
 800c97a:	455a      	cmp	r2, fp
 800c97c:	dd0b      	ble.n	800c996 <__gethex+0x402>
 800c97e:	2101      	movs	r1, #1
 800c980:	4620      	mov	r0, r4
 800c982:	f7ff fd9f 	bl	800c4c4 <rshift>
 800c986:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c98a:	3701      	adds	r7, #1
 800c98c:	42bb      	cmp	r3, r7
 800c98e:	f6ff aee0 	blt.w	800c752 <__gethex+0x1be>
 800c992:	2501      	movs	r5, #1
 800c994:	e7c2      	b.n	800c91c <__gethex+0x388>
 800c996:	f016 061f 	ands.w	r6, r6, #31
 800c99a:	d0fa      	beq.n	800c992 <__gethex+0x3fe>
 800c99c:	4453      	add	r3, sl
 800c99e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c9a2:	f000 fa7b 	bl	800ce9c <__hi0bits>
 800c9a6:	f1c6 0620 	rsb	r6, r6, #32
 800c9aa:	42b0      	cmp	r0, r6
 800c9ac:	dbe7      	blt.n	800c97e <__gethex+0x3ea>
 800c9ae:	e7f0      	b.n	800c992 <__gethex+0x3fe>
 800c9b0:	0800e7cf 	.word	0x0800e7cf

0800c9b4 <L_shift>:
 800c9b4:	f1c2 0208 	rsb	r2, r2, #8
 800c9b8:	0092      	lsls	r2, r2, #2
 800c9ba:	b570      	push	{r4, r5, r6, lr}
 800c9bc:	f1c2 0620 	rsb	r6, r2, #32
 800c9c0:	6843      	ldr	r3, [r0, #4]
 800c9c2:	6804      	ldr	r4, [r0, #0]
 800c9c4:	fa03 f506 	lsl.w	r5, r3, r6
 800c9c8:	432c      	orrs	r4, r5
 800c9ca:	40d3      	lsrs	r3, r2
 800c9cc:	6004      	str	r4, [r0, #0]
 800c9ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800c9d2:	4288      	cmp	r0, r1
 800c9d4:	d3f4      	bcc.n	800c9c0 <L_shift+0xc>
 800c9d6:	bd70      	pop	{r4, r5, r6, pc}

0800c9d8 <__match>:
 800c9d8:	b530      	push	{r4, r5, lr}
 800c9da:	6803      	ldr	r3, [r0, #0]
 800c9dc:	3301      	adds	r3, #1
 800c9de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9e2:	b914      	cbnz	r4, 800c9ea <__match+0x12>
 800c9e4:	6003      	str	r3, [r0, #0]
 800c9e6:	2001      	movs	r0, #1
 800c9e8:	bd30      	pop	{r4, r5, pc}
 800c9ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9ee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c9f2:	2d19      	cmp	r5, #25
 800c9f4:	bf98      	it	ls
 800c9f6:	3220      	addls	r2, #32
 800c9f8:	42a2      	cmp	r2, r4
 800c9fa:	d0f0      	beq.n	800c9de <__match+0x6>
 800c9fc:	2000      	movs	r0, #0
 800c9fe:	e7f3      	b.n	800c9e8 <__match+0x10>

0800ca00 <__hexnan>:
 800ca00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca04:	2500      	movs	r5, #0
 800ca06:	680b      	ldr	r3, [r1, #0]
 800ca08:	4682      	mov	sl, r0
 800ca0a:	115e      	asrs	r6, r3, #5
 800ca0c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ca10:	f013 031f 	ands.w	r3, r3, #31
 800ca14:	bf18      	it	ne
 800ca16:	3604      	addne	r6, #4
 800ca18:	1f37      	subs	r7, r6, #4
 800ca1a:	4690      	mov	r8, r2
 800ca1c:	46b9      	mov	r9, r7
 800ca1e:	463c      	mov	r4, r7
 800ca20:	46ab      	mov	fp, r5
 800ca22:	b087      	sub	sp, #28
 800ca24:	6801      	ldr	r1, [r0, #0]
 800ca26:	9301      	str	r3, [sp, #4]
 800ca28:	f846 5c04 	str.w	r5, [r6, #-4]
 800ca2c:	9502      	str	r5, [sp, #8]
 800ca2e:	784a      	ldrb	r2, [r1, #1]
 800ca30:	1c4b      	adds	r3, r1, #1
 800ca32:	9303      	str	r3, [sp, #12]
 800ca34:	b342      	cbz	r2, 800ca88 <__hexnan+0x88>
 800ca36:	4610      	mov	r0, r2
 800ca38:	9105      	str	r1, [sp, #20]
 800ca3a:	9204      	str	r2, [sp, #16]
 800ca3c:	f7ff fd95 	bl	800c56a <__hexdig_fun>
 800ca40:	2800      	cmp	r0, #0
 800ca42:	d151      	bne.n	800cae8 <__hexnan+0xe8>
 800ca44:	9a04      	ldr	r2, [sp, #16]
 800ca46:	9905      	ldr	r1, [sp, #20]
 800ca48:	2a20      	cmp	r2, #32
 800ca4a:	d818      	bhi.n	800ca7e <__hexnan+0x7e>
 800ca4c:	9b02      	ldr	r3, [sp, #8]
 800ca4e:	459b      	cmp	fp, r3
 800ca50:	dd13      	ble.n	800ca7a <__hexnan+0x7a>
 800ca52:	454c      	cmp	r4, r9
 800ca54:	d206      	bcs.n	800ca64 <__hexnan+0x64>
 800ca56:	2d07      	cmp	r5, #7
 800ca58:	dc04      	bgt.n	800ca64 <__hexnan+0x64>
 800ca5a:	462a      	mov	r2, r5
 800ca5c:	4649      	mov	r1, r9
 800ca5e:	4620      	mov	r0, r4
 800ca60:	f7ff ffa8 	bl	800c9b4 <L_shift>
 800ca64:	4544      	cmp	r4, r8
 800ca66:	d952      	bls.n	800cb0e <__hexnan+0x10e>
 800ca68:	2300      	movs	r3, #0
 800ca6a:	f1a4 0904 	sub.w	r9, r4, #4
 800ca6e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca72:	461d      	mov	r5, r3
 800ca74:	464c      	mov	r4, r9
 800ca76:	f8cd b008 	str.w	fp, [sp, #8]
 800ca7a:	9903      	ldr	r1, [sp, #12]
 800ca7c:	e7d7      	b.n	800ca2e <__hexnan+0x2e>
 800ca7e:	2a29      	cmp	r2, #41	@ 0x29
 800ca80:	d157      	bne.n	800cb32 <__hexnan+0x132>
 800ca82:	3102      	adds	r1, #2
 800ca84:	f8ca 1000 	str.w	r1, [sl]
 800ca88:	f1bb 0f00 	cmp.w	fp, #0
 800ca8c:	d051      	beq.n	800cb32 <__hexnan+0x132>
 800ca8e:	454c      	cmp	r4, r9
 800ca90:	d206      	bcs.n	800caa0 <__hexnan+0xa0>
 800ca92:	2d07      	cmp	r5, #7
 800ca94:	dc04      	bgt.n	800caa0 <__hexnan+0xa0>
 800ca96:	462a      	mov	r2, r5
 800ca98:	4649      	mov	r1, r9
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	f7ff ff8a 	bl	800c9b4 <L_shift>
 800caa0:	4544      	cmp	r4, r8
 800caa2:	d936      	bls.n	800cb12 <__hexnan+0x112>
 800caa4:	4623      	mov	r3, r4
 800caa6:	f1a8 0204 	sub.w	r2, r8, #4
 800caaa:	f853 1b04 	ldr.w	r1, [r3], #4
 800caae:	429f      	cmp	r7, r3
 800cab0:	f842 1f04 	str.w	r1, [r2, #4]!
 800cab4:	d2f9      	bcs.n	800caaa <__hexnan+0xaa>
 800cab6:	1b3b      	subs	r3, r7, r4
 800cab8:	f023 0303 	bic.w	r3, r3, #3
 800cabc:	3304      	adds	r3, #4
 800cabe:	3401      	adds	r4, #1
 800cac0:	3e03      	subs	r6, #3
 800cac2:	42b4      	cmp	r4, r6
 800cac4:	bf88      	it	hi
 800cac6:	2304      	movhi	r3, #4
 800cac8:	2200      	movs	r2, #0
 800caca:	4443      	add	r3, r8
 800cacc:	f843 2b04 	str.w	r2, [r3], #4
 800cad0:	429f      	cmp	r7, r3
 800cad2:	d2fb      	bcs.n	800cacc <__hexnan+0xcc>
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	b91b      	cbnz	r3, 800cae0 <__hexnan+0xe0>
 800cad8:	4547      	cmp	r7, r8
 800cada:	d128      	bne.n	800cb2e <__hexnan+0x12e>
 800cadc:	2301      	movs	r3, #1
 800cade:	603b      	str	r3, [r7, #0]
 800cae0:	2005      	movs	r0, #5
 800cae2:	b007      	add	sp, #28
 800cae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cae8:	3501      	adds	r5, #1
 800caea:	2d08      	cmp	r5, #8
 800caec:	f10b 0b01 	add.w	fp, fp, #1
 800caf0:	dd06      	ble.n	800cb00 <__hexnan+0x100>
 800caf2:	4544      	cmp	r4, r8
 800caf4:	d9c1      	bls.n	800ca7a <__hexnan+0x7a>
 800caf6:	2300      	movs	r3, #0
 800caf8:	2501      	movs	r5, #1
 800cafa:	f844 3c04 	str.w	r3, [r4, #-4]
 800cafe:	3c04      	subs	r4, #4
 800cb00:	6822      	ldr	r2, [r4, #0]
 800cb02:	f000 000f 	and.w	r0, r0, #15
 800cb06:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cb0a:	6020      	str	r0, [r4, #0]
 800cb0c:	e7b5      	b.n	800ca7a <__hexnan+0x7a>
 800cb0e:	2508      	movs	r5, #8
 800cb10:	e7b3      	b.n	800ca7a <__hexnan+0x7a>
 800cb12:	9b01      	ldr	r3, [sp, #4]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d0dd      	beq.n	800cad4 <__hexnan+0xd4>
 800cb18:	f04f 32ff 	mov.w	r2, #4294967295
 800cb1c:	f1c3 0320 	rsb	r3, r3, #32
 800cb20:	40da      	lsrs	r2, r3
 800cb22:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cb26:	4013      	ands	r3, r2
 800cb28:	f846 3c04 	str.w	r3, [r6, #-4]
 800cb2c:	e7d2      	b.n	800cad4 <__hexnan+0xd4>
 800cb2e:	3f04      	subs	r7, #4
 800cb30:	e7d0      	b.n	800cad4 <__hexnan+0xd4>
 800cb32:	2004      	movs	r0, #4
 800cb34:	e7d5      	b.n	800cae2 <__hexnan+0xe2>
	...

0800cb38 <sbrk_aligned>:
 800cb38:	b570      	push	{r4, r5, r6, lr}
 800cb3a:	4e0f      	ldr	r6, [pc, #60]	@ (800cb78 <sbrk_aligned+0x40>)
 800cb3c:	460c      	mov	r4, r1
 800cb3e:	6831      	ldr	r1, [r6, #0]
 800cb40:	4605      	mov	r5, r0
 800cb42:	b911      	cbnz	r1, 800cb4a <sbrk_aligned+0x12>
 800cb44:	f001 f8fc 	bl	800dd40 <_sbrk_r>
 800cb48:	6030      	str	r0, [r6, #0]
 800cb4a:	4621      	mov	r1, r4
 800cb4c:	4628      	mov	r0, r5
 800cb4e:	f001 f8f7 	bl	800dd40 <_sbrk_r>
 800cb52:	1c43      	adds	r3, r0, #1
 800cb54:	d103      	bne.n	800cb5e <sbrk_aligned+0x26>
 800cb56:	f04f 34ff 	mov.w	r4, #4294967295
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	bd70      	pop	{r4, r5, r6, pc}
 800cb5e:	1cc4      	adds	r4, r0, #3
 800cb60:	f024 0403 	bic.w	r4, r4, #3
 800cb64:	42a0      	cmp	r0, r4
 800cb66:	d0f8      	beq.n	800cb5a <sbrk_aligned+0x22>
 800cb68:	1a21      	subs	r1, r4, r0
 800cb6a:	4628      	mov	r0, r5
 800cb6c:	f001 f8e8 	bl	800dd40 <_sbrk_r>
 800cb70:	3001      	adds	r0, #1
 800cb72:	d1f2      	bne.n	800cb5a <sbrk_aligned+0x22>
 800cb74:	e7ef      	b.n	800cb56 <sbrk_aligned+0x1e>
 800cb76:	bf00      	nop
 800cb78:	20001c18 	.word	0x20001c18

0800cb7c <_malloc_r>:
 800cb7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb80:	1ccd      	adds	r5, r1, #3
 800cb82:	f025 0503 	bic.w	r5, r5, #3
 800cb86:	3508      	adds	r5, #8
 800cb88:	2d0c      	cmp	r5, #12
 800cb8a:	bf38      	it	cc
 800cb8c:	250c      	movcc	r5, #12
 800cb8e:	2d00      	cmp	r5, #0
 800cb90:	4606      	mov	r6, r0
 800cb92:	db01      	blt.n	800cb98 <_malloc_r+0x1c>
 800cb94:	42a9      	cmp	r1, r5
 800cb96:	d904      	bls.n	800cba2 <_malloc_r+0x26>
 800cb98:	230c      	movs	r3, #12
 800cb9a:	6033      	str	r3, [r6, #0]
 800cb9c:	2000      	movs	r0, #0
 800cb9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cba2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cc78 <_malloc_r+0xfc>
 800cba6:	f000 f87b 	bl	800cca0 <__malloc_lock>
 800cbaa:	f8d8 3000 	ldr.w	r3, [r8]
 800cbae:	461c      	mov	r4, r3
 800cbb0:	bb44      	cbnz	r4, 800cc04 <_malloc_r+0x88>
 800cbb2:	4629      	mov	r1, r5
 800cbb4:	4630      	mov	r0, r6
 800cbb6:	f7ff ffbf 	bl	800cb38 <sbrk_aligned>
 800cbba:	1c43      	adds	r3, r0, #1
 800cbbc:	4604      	mov	r4, r0
 800cbbe:	d158      	bne.n	800cc72 <_malloc_r+0xf6>
 800cbc0:	f8d8 4000 	ldr.w	r4, [r8]
 800cbc4:	4627      	mov	r7, r4
 800cbc6:	2f00      	cmp	r7, #0
 800cbc8:	d143      	bne.n	800cc52 <_malloc_r+0xd6>
 800cbca:	2c00      	cmp	r4, #0
 800cbcc:	d04b      	beq.n	800cc66 <_malloc_r+0xea>
 800cbce:	6823      	ldr	r3, [r4, #0]
 800cbd0:	4639      	mov	r1, r7
 800cbd2:	4630      	mov	r0, r6
 800cbd4:	eb04 0903 	add.w	r9, r4, r3
 800cbd8:	f001 f8b2 	bl	800dd40 <_sbrk_r>
 800cbdc:	4581      	cmp	r9, r0
 800cbde:	d142      	bne.n	800cc66 <_malloc_r+0xea>
 800cbe0:	6821      	ldr	r1, [r4, #0]
 800cbe2:	4630      	mov	r0, r6
 800cbe4:	1a6d      	subs	r5, r5, r1
 800cbe6:	4629      	mov	r1, r5
 800cbe8:	f7ff ffa6 	bl	800cb38 <sbrk_aligned>
 800cbec:	3001      	adds	r0, #1
 800cbee:	d03a      	beq.n	800cc66 <_malloc_r+0xea>
 800cbf0:	6823      	ldr	r3, [r4, #0]
 800cbf2:	442b      	add	r3, r5
 800cbf4:	6023      	str	r3, [r4, #0]
 800cbf6:	f8d8 3000 	ldr.w	r3, [r8]
 800cbfa:	685a      	ldr	r2, [r3, #4]
 800cbfc:	bb62      	cbnz	r2, 800cc58 <_malloc_r+0xdc>
 800cbfe:	f8c8 7000 	str.w	r7, [r8]
 800cc02:	e00f      	b.n	800cc24 <_malloc_r+0xa8>
 800cc04:	6822      	ldr	r2, [r4, #0]
 800cc06:	1b52      	subs	r2, r2, r5
 800cc08:	d420      	bmi.n	800cc4c <_malloc_r+0xd0>
 800cc0a:	2a0b      	cmp	r2, #11
 800cc0c:	d917      	bls.n	800cc3e <_malloc_r+0xc2>
 800cc0e:	1961      	adds	r1, r4, r5
 800cc10:	42a3      	cmp	r3, r4
 800cc12:	6025      	str	r5, [r4, #0]
 800cc14:	bf18      	it	ne
 800cc16:	6059      	strne	r1, [r3, #4]
 800cc18:	6863      	ldr	r3, [r4, #4]
 800cc1a:	bf08      	it	eq
 800cc1c:	f8c8 1000 	streq.w	r1, [r8]
 800cc20:	5162      	str	r2, [r4, r5]
 800cc22:	604b      	str	r3, [r1, #4]
 800cc24:	4630      	mov	r0, r6
 800cc26:	f000 f841 	bl	800ccac <__malloc_unlock>
 800cc2a:	f104 000b 	add.w	r0, r4, #11
 800cc2e:	1d23      	adds	r3, r4, #4
 800cc30:	f020 0007 	bic.w	r0, r0, #7
 800cc34:	1ac2      	subs	r2, r0, r3
 800cc36:	bf1c      	itt	ne
 800cc38:	1a1b      	subne	r3, r3, r0
 800cc3a:	50a3      	strne	r3, [r4, r2]
 800cc3c:	e7af      	b.n	800cb9e <_malloc_r+0x22>
 800cc3e:	6862      	ldr	r2, [r4, #4]
 800cc40:	42a3      	cmp	r3, r4
 800cc42:	bf0c      	ite	eq
 800cc44:	f8c8 2000 	streq.w	r2, [r8]
 800cc48:	605a      	strne	r2, [r3, #4]
 800cc4a:	e7eb      	b.n	800cc24 <_malloc_r+0xa8>
 800cc4c:	4623      	mov	r3, r4
 800cc4e:	6864      	ldr	r4, [r4, #4]
 800cc50:	e7ae      	b.n	800cbb0 <_malloc_r+0x34>
 800cc52:	463c      	mov	r4, r7
 800cc54:	687f      	ldr	r7, [r7, #4]
 800cc56:	e7b6      	b.n	800cbc6 <_malloc_r+0x4a>
 800cc58:	461a      	mov	r2, r3
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	42a3      	cmp	r3, r4
 800cc5e:	d1fb      	bne.n	800cc58 <_malloc_r+0xdc>
 800cc60:	2300      	movs	r3, #0
 800cc62:	6053      	str	r3, [r2, #4]
 800cc64:	e7de      	b.n	800cc24 <_malloc_r+0xa8>
 800cc66:	230c      	movs	r3, #12
 800cc68:	4630      	mov	r0, r6
 800cc6a:	6033      	str	r3, [r6, #0]
 800cc6c:	f000 f81e 	bl	800ccac <__malloc_unlock>
 800cc70:	e794      	b.n	800cb9c <_malloc_r+0x20>
 800cc72:	6005      	str	r5, [r0, #0]
 800cc74:	e7d6      	b.n	800cc24 <_malloc_r+0xa8>
 800cc76:	bf00      	nop
 800cc78:	20001c1c 	.word	0x20001c1c

0800cc7c <__ascii_mbtowc>:
 800cc7c:	b082      	sub	sp, #8
 800cc7e:	b901      	cbnz	r1, 800cc82 <__ascii_mbtowc+0x6>
 800cc80:	a901      	add	r1, sp, #4
 800cc82:	b142      	cbz	r2, 800cc96 <__ascii_mbtowc+0x1a>
 800cc84:	b14b      	cbz	r3, 800cc9a <__ascii_mbtowc+0x1e>
 800cc86:	7813      	ldrb	r3, [r2, #0]
 800cc88:	600b      	str	r3, [r1, #0]
 800cc8a:	7812      	ldrb	r2, [r2, #0]
 800cc8c:	1e10      	subs	r0, r2, #0
 800cc8e:	bf18      	it	ne
 800cc90:	2001      	movne	r0, #1
 800cc92:	b002      	add	sp, #8
 800cc94:	4770      	bx	lr
 800cc96:	4610      	mov	r0, r2
 800cc98:	e7fb      	b.n	800cc92 <__ascii_mbtowc+0x16>
 800cc9a:	f06f 0001 	mvn.w	r0, #1
 800cc9e:	e7f8      	b.n	800cc92 <__ascii_mbtowc+0x16>

0800cca0 <__malloc_lock>:
 800cca0:	4801      	ldr	r0, [pc, #4]	@ (800cca8 <__malloc_lock+0x8>)
 800cca2:	f7ff bba4 	b.w	800c3ee <__retarget_lock_acquire_recursive>
 800cca6:	bf00      	nop
 800cca8:	20001c14 	.word	0x20001c14

0800ccac <__malloc_unlock>:
 800ccac:	4801      	ldr	r0, [pc, #4]	@ (800ccb4 <__malloc_unlock+0x8>)
 800ccae:	f7ff bb9f 	b.w	800c3f0 <__retarget_lock_release_recursive>
 800ccb2:	bf00      	nop
 800ccb4:	20001c14 	.word	0x20001c14

0800ccb8 <_Balloc>:
 800ccb8:	b570      	push	{r4, r5, r6, lr}
 800ccba:	69c6      	ldr	r6, [r0, #28]
 800ccbc:	4604      	mov	r4, r0
 800ccbe:	460d      	mov	r5, r1
 800ccc0:	b976      	cbnz	r6, 800cce0 <_Balloc+0x28>
 800ccc2:	2010      	movs	r0, #16
 800ccc4:	f001 f88c 	bl	800dde0 <malloc>
 800ccc8:	4602      	mov	r2, r0
 800ccca:	61e0      	str	r0, [r4, #28]
 800cccc:	b920      	cbnz	r0, 800ccd8 <_Balloc+0x20>
 800ccce:	216b      	movs	r1, #107	@ 0x6b
 800ccd0:	4b17      	ldr	r3, [pc, #92]	@ (800cd30 <_Balloc+0x78>)
 800ccd2:	4818      	ldr	r0, [pc, #96]	@ (800cd34 <_Balloc+0x7c>)
 800ccd4:	f001 f852 	bl	800dd7c <__assert_func>
 800ccd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ccdc:	6006      	str	r6, [r0, #0]
 800ccde:	60c6      	str	r6, [r0, #12]
 800cce0:	69e6      	ldr	r6, [r4, #28]
 800cce2:	68f3      	ldr	r3, [r6, #12]
 800cce4:	b183      	cbz	r3, 800cd08 <_Balloc+0x50>
 800cce6:	69e3      	ldr	r3, [r4, #28]
 800cce8:	68db      	ldr	r3, [r3, #12]
 800ccea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ccee:	b9b8      	cbnz	r0, 800cd20 <_Balloc+0x68>
 800ccf0:	2101      	movs	r1, #1
 800ccf2:	fa01 f605 	lsl.w	r6, r1, r5
 800ccf6:	1d72      	adds	r2, r6, #5
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	0092      	lsls	r2, r2, #2
 800ccfc:	f001 f85c 	bl	800ddb8 <_calloc_r>
 800cd00:	b160      	cbz	r0, 800cd1c <_Balloc+0x64>
 800cd02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cd06:	e00e      	b.n	800cd26 <_Balloc+0x6e>
 800cd08:	2221      	movs	r2, #33	@ 0x21
 800cd0a:	2104      	movs	r1, #4
 800cd0c:	4620      	mov	r0, r4
 800cd0e:	f001 f853 	bl	800ddb8 <_calloc_r>
 800cd12:	69e3      	ldr	r3, [r4, #28]
 800cd14:	60f0      	str	r0, [r6, #12]
 800cd16:	68db      	ldr	r3, [r3, #12]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d1e4      	bne.n	800cce6 <_Balloc+0x2e>
 800cd1c:	2000      	movs	r0, #0
 800cd1e:	bd70      	pop	{r4, r5, r6, pc}
 800cd20:	6802      	ldr	r2, [r0, #0]
 800cd22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cd26:	2300      	movs	r3, #0
 800cd28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cd2c:	e7f7      	b.n	800cd1e <_Balloc+0x66>
 800cd2e:	bf00      	nop
 800cd30:	0800e840 	.word	0x0800e840
 800cd34:	0800e857 	.word	0x0800e857

0800cd38 <_Bfree>:
 800cd38:	b570      	push	{r4, r5, r6, lr}
 800cd3a:	69c6      	ldr	r6, [r0, #28]
 800cd3c:	4605      	mov	r5, r0
 800cd3e:	460c      	mov	r4, r1
 800cd40:	b976      	cbnz	r6, 800cd60 <_Bfree+0x28>
 800cd42:	2010      	movs	r0, #16
 800cd44:	f001 f84c 	bl	800dde0 <malloc>
 800cd48:	4602      	mov	r2, r0
 800cd4a:	61e8      	str	r0, [r5, #28]
 800cd4c:	b920      	cbnz	r0, 800cd58 <_Bfree+0x20>
 800cd4e:	218f      	movs	r1, #143	@ 0x8f
 800cd50:	4b08      	ldr	r3, [pc, #32]	@ (800cd74 <_Bfree+0x3c>)
 800cd52:	4809      	ldr	r0, [pc, #36]	@ (800cd78 <_Bfree+0x40>)
 800cd54:	f001 f812 	bl	800dd7c <__assert_func>
 800cd58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd5c:	6006      	str	r6, [r0, #0]
 800cd5e:	60c6      	str	r6, [r0, #12]
 800cd60:	b13c      	cbz	r4, 800cd72 <_Bfree+0x3a>
 800cd62:	69eb      	ldr	r3, [r5, #28]
 800cd64:	6862      	ldr	r2, [r4, #4]
 800cd66:	68db      	ldr	r3, [r3, #12]
 800cd68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd6c:	6021      	str	r1, [r4, #0]
 800cd6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cd72:	bd70      	pop	{r4, r5, r6, pc}
 800cd74:	0800e840 	.word	0x0800e840
 800cd78:	0800e857 	.word	0x0800e857

0800cd7c <__multadd>:
 800cd7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd80:	4607      	mov	r7, r0
 800cd82:	460c      	mov	r4, r1
 800cd84:	461e      	mov	r6, r3
 800cd86:	2000      	movs	r0, #0
 800cd88:	690d      	ldr	r5, [r1, #16]
 800cd8a:	f101 0c14 	add.w	ip, r1, #20
 800cd8e:	f8dc 3000 	ldr.w	r3, [ip]
 800cd92:	3001      	adds	r0, #1
 800cd94:	b299      	uxth	r1, r3
 800cd96:	fb02 6101 	mla	r1, r2, r1, r6
 800cd9a:	0c1e      	lsrs	r6, r3, #16
 800cd9c:	0c0b      	lsrs	r3, r1, #16
 800cd9e:	fb02 3306 	mla	r3, r2, r6, r3
 800cda2:	b289      	uxth	r1, r1
 800cda4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cda8:	4285      	cmp	r5, r0
 800cdaa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cdae:	f84c 1b04 	str.w	r1, [ip], #4
 800cdb2:	dcec      	bgt.n	800cd8e <__multadd+0x12>
 800cdb4:	b30e      	cbz	r6, 800cdfa <__multadd+0x7e>
 800cdb6:	68a3      	ldr	r3, [r4, #8]
 800cdb8:	42ab      	cmp	r3, r5
 800cdba:	dc19      	bgt.n	800cdf0 <__multadd+0x74>
 800cdbc:	6861      	ldr	r1, [r4, #4]
 800cdbe:	4638      	mov	r0, r7
 800cdc0:	3101      	adds	r1, #1
 800cdc2:	f7ff ff79 	bl	800ccb8 <_Balloc>
 800cdc6:	4680      	mov	r8, r0
 800cdc8:	b928      	cbnz	r0, 800cdd6 <__multadd+0x5a>
 800cdca:	4602      	mov	r2, r0
 800cdcc:	21ba      	movs	r1, #186	@ 0xba
 800cdce:	4b0c      	ldr	r3, [pc, #48]	@ (800ce00 <__multadd+0x84>)
 800cdd0:	480c      	ldr	r0, [pc, #48]	@ (800ce04 <__multadd+0x88>)
 800cdd2:	f000 ffd3 	bl	800dd7c <__assert_func>
 800cdd6:	6922      	ldr	r2, [r4, #16]
 800cdd8:	f104 010c 	add.w	r1, r4, #12
 800cddc:	3202      	adds	r2, #2
 800cdde:	0092      	lsls	r2, r2, #2
 800cde0:	300c      	adds	r0, #12
 800cde2:	f7ff fb0e 	bl	800c402 <memcpy>
 800cde6:	4621      	mov	r1, r4
 800cde8:	4638      	mov	r0, r7
 800cdea:	f7ff ffa5 	bl	800cd38 <_Bfree>
 800cdee:	4644      	mov	r4, r8
 800cdf0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cdf4:	3501      	adds	r5, #1
 800cdf6:	615e      	str	r6, [r3, #20]
 800cdf8:	6125      	str	r5, [r4, #16]
 800cdfa:	4620      	mov	r0, r4
 800cdfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce00:	0800e7cf 	.word	0x0800e7cf
 800ce04:	0800e857 	.word	0x0800e857

0800ce08 <__s2b>:
 800ce08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce0c:	4615      	mov	r5, r2
 800ce0e:	2209      	movs	r2, #9
 800ce10:	461f      	mov	r7, r3
 800ce12:	3308      	adds	r3, #8
 800ce14:	460c      	mov	r4, r1
 800ce16:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce1a:	4606      	mov	r6, r0
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	2100      	movs	r1, #0
 800ce20:	429a      	cmp	r2, r3
 800ce22:	db09      	blt.n	800ce38 <__s2b+0x30>
 800ce24:	4630      	mov	r0, r6
 800ce26:	f7ff ff47 	bl	800ccb8 <_Balloc>
 800ce2a:	b940      	cbnz	r0, 800ce3e <__s2b+0x36>
 800ce2c:	4602      	mov	r2, r0
 800ce2e:	21d3      	movs	r1, #211	@ 0xd3
 800ce30:	4b18      	ldr	r3, [pc, #96]	@ (800ce94 <__s2b+0x8c>)
 800ce32:	4819      	ldr	r0, [pc, #100]	@ (800ce98 <__s2b+0x90>)
 800ce34:	f000 ffa2 	bl	800dd7c <__assert_func>
 800ce38:	0052      	lsls	r2, r2, #1
 800ce3a:	3101      	adds	r1, #1
 800ce3c:	e7f0      	b.n	800ce20 <__s2b+0x18>
 800ce3e:	9b08      	ldr	r3, [sp, #32]
 800ce40:	2d09      	cmp	r5, #9
 800ce42:	6143      	str	r3, [r0, #20]
 800ce44:	f04f 0301 	mov.w	r3, #1
 800ce48:	6103      	str	r3, [r0, #16]
 800ce4a:	dd16      	ble.n	800ce7a <__s2b+0x72>
 800ce4c:	f104 0909 	add.w	r9, r4, #9
 800ce50:	46c8      	mov	r8, r9
 800ce52:	442c      	add	r4, r5
 800ce54:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ce58:	4601      	mov	r1, r0
 800ce5a:	220a      	movs	r2, #10
 800ce5c:	4630      	mov	r0, r6
 800ce5e:	3b30      	subs	r3, #48	@ 0x30
 800ce60:	f7ff ff8c 	bl	800cd7c <__multadd>
 800ce64:	45a0      	cmp	r8, r4
 800ce66:	d1f5      	bne.n	800ce54 <__s2b+0x4c>
 800ce68:	f1a5 0408 	sub.w	r4, r5, #8
 800ce6c:	444c      	add	r4, r9
 800ce6e:	1b2d      	subs	r5, r5, r4
 800ce70:	1963      	adds	r3, r4, r5
 800ce72:	42bb      	cmp	r3, r7
 800ce74:	db04      	blt.n	800ce80 <__s2b+0x78>
 800ce76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce7a:	2509      	movs	r5, #9
 800ce7c:	340a      	adds	r4, #10
 800ce7e:	e7f6      	b.n	800ce6e <__s2b+0x66>
 800ce80:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ce84:	4601      	mov	r1, r0
 800ce86:	220a      	movs	r2, #10
 800ce88:	4630      	mov	r0, r6
 800ce8a:	3b30      	subs	r3, #48	@ 0x30
 800ce8c:	f7ff ff76 	bl	800cd7c <__multadd>
 800ce90:	e7ee      	b.n	800ce70 <__s2b+0x68>
 800ce92:	bf00      	nop
 800ce94:	0800e7cf 	.word	0x0800e7cf
 800ce98:	0800e857 	.word	0x0800e857

0800ce9c <__hi0bits>:
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cea2:	bf3a      	itte	cc
 800cea4:	0403      	lslcc	r3, r0, #16
 800cea6:	2010      	movcc	r0, #16
 800cea8:	2000      	movcs	r0, #0
 800ceaa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ceae:	bf3c      	itt	cc
 800ceb0:	021b      	lslcc	r3, r3, #8
 800ceb2:	3008      	addcc	r0, #8
 800ceb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ceb8:	bf3c      	itt	cc
 800ceba:	011b      	lslcc	r3, r3, #4
 800cebc:	3004      	addcc	r0, #4
 800cebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cec2:	bf3c      	itt	cc
 800cec4:	009b      	lslcc	r3, r3, #2
 800cec6:	3002      	addcc	r0, #2
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	db05      	blt.n	800ced8 <__hi0bits+0x3c>
 800cecc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ced0:	f100 0001 	add.w	r0, r0, #1
 800ced4:	bf08      	it	eq
 800ced6:	2020      	moveq	r0, #32
 800ced8:	4770      	bx	lr

0800ceda <__lo0bits>:
 800ceda:	6803      	ldr	r3, [r0, #0]
 800cedc:	4602      	mov	r2, r0
 800cede:	f013 0007 	ands.w	r0, r3, #7
 800cee2:	d00b      	beq.n	800cefc <__lo0bits+0x22>
 800cee4:	07d9      	lsls	r1, r3, #31
 800cee6:	d421      	bmi.n	800cf2c <__lo0bits+0x52>
 800cee8:	0798      	lsls	r0, r3, #30
 800ceea:	bf49      	itett	mi
 800ceec:	085b      	lsrmi	r3, r3, #1
 800ceee:	089b      	lsrpl	r3, r3, #2
 800cef0:	2001      	movmi	r0, #1
 800cef2:	6013      	strmi	r3, [r2, #0]
 800cef4:	bf5c      	itt	pl
 800cef6:	2002      	movpl	r0, #2
 800cef8:	6013      	strpl	r3, [r2, #0]
 800cefa:	4770      	bx	lr
 800cefc:	b299      	uxth	r1, r3
 800cefe:	b909      	cbnz	r1, 800cf04 <__lo0bits+0x2a>
 800cf00:	2010      	movs	r0, #16
 800cf02:	0c1b      	lsrs	r3, r3, #16
 800cf04:	b2d9      	uxtb	r1, r3
 800cf06:	b909      	cbnz	r1, 800cf0c <__lo0bits+0x32>
 800cf08:	3008      	adds	r0, #8
 800cf0a:	0a1b      	lsrs	r3, r3, #8
 800cf0c:	0719      	lsls	r1, r3, #28
 800cf0e:	bf04      	itt	eq
 800cf10:	091b      	lsreq	r3, r3, #4
 800cf12:	3004      	addeq	r0, #4
 800cf14:	0799      	lsls	r1, r3, #30
 800cf16:	bf04      	itt	eq
 800cf18:	089b      	lsreq	r3, r3, #2
 800cf1a:	3002      	addeq	r0, #2
 800cf1c:	07d9      	lsls	r1, r3, #31
 800cf1e:	d403      	bmi.n	800cf28 <__lo0bits+0x4e>
 800cf20:	085b      	lsrs	r3, r3, #1
 800cf22:	f100 0001 	add.w	r0, r0, #1
 800cf26:	d003      	beq.n	800cf30 <__lo0bits+0x56>
 800cf28:	6013      	str	r3, [r2, #0]
 800cf2a:	4770      	bx	lr
 800cf2c:	2000      	movs	r0, #0
 800cf2e:	4770      	bx	lr
 800cf30:	2020      	movs	r0, #32
 800cf32:	4770      	bx	lr

0800cf34 <__i2b>:
 800cf34:	b510      	push	{r4, lr}
 800cf36:	460c      	mov	r4, r1
 800cf38:	2101      	movs	r1, #1
 800cf3a:	f7ff febd 	bl	800ccb8 <_Balloc>
 800cf3e:	4602      	mov	r2, r0
 800cf40:	b928      	cbnz	r0, 800cf4e <__i2b+0x1a>
 800cf42:	f240 1145 	movw	r1, #325	@ 0x145
 800cf46:	4b04      	ldr	r3, [pc, #16]	@ (800cf58 <__i2b+0x24>)
 800cf48:	4804      	ldr	r0, [pc, #16]	@ (800cf5c <__i2b+0x28>)
 800cf4a:	f000 ff17 	bl	800dd7c <__assert_func>
 800cf4e:	2301      	movs	r3, #1
 800cf50:	6144      	str	r4, [r0, #20]
 800cf52:	6103      	str	r3, [r0, #16]
 800cf54:	bd10      	pop	{r4, pc}
 800cf56:	bf00      	nop
 800cf58:	0800e7cf 	.word	0x0800e7cf
 800cf5c:	0800e857 	.word	0x0800e857

0800cf60 <__multiply>:
 800cf60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf64:	4614      	mov	r4, r2
 800cf66:	690a      	ldr	r2, [r1, #16]
 800cf68:	6923      	ldr	r3, [r4, #16]
 800cf6a:	460f      	mov	r7, r1
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	bfa2      	ittt	ge
 800cf70:	4623      	movge	r3, r4
 800cf72:	460c      	movge	r4, r1
 800cf74:	461f      	movge	r7, r3
 800cf76:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cf7a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cf7e:	68a3      	ldr	r3, [r4, #8]
 800cf80:	6861      	ldr	r1, [r4, #4]
 800cf82:	eb0a 0609 	add.w	r6, sl, r9
 800cf86:	42b3      	cmp	r3, r6
 800cf88:	b085      	sub	sp, #20
 800cf8a:	bfb8      	it	lt
 800cf8c:	3101      	addlt	r1, #1
 800cf8e:	f7ff fe93 	bl	800ccb8 <_Balloc>
 800cf92:	b930      	cbnz	r0, 800cfa2 <__multiply+0x42>
 800cf94:	4602      	mov	r2, r0
 800cf96:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cf9a:	4b43      	ldr	r3, [pc, #268]	@ (800d0a8 <__multiply+0x148>)
 800cf9c:	4843      	ldr	r0, [pc, #268]	@ (800d0ac <__multiply+0x14c>)
 800cf9e:	f000 feed 	bl	800dd7c <__assert_func>
 800cfa2:	f100 0514 	add.w	r5, r0, #20
 800cfa6:	462b      	mov	r3, r5
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cfae:	4543      	cmp	r3, r8
 800cfb0:	d321      	bcc.n	800cff6 <__multiply+0x96>
 800cfb2:	f107 0114 	add.w	r1, r7, #20
 800cfb6:	f104 0214 	add.w	r2, r4, #20
 800cfba:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cfbe:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cfc2:	9302      	str	r3, [sp, #8]
 800cfc4:	1b13      	subs	r3, r2, r4
 800cfc6:	3b15      	subs	r3, #21
 800cfc8:	f023 0303 	bic.w	r3, r3, #3
 800cfcc:	3304      	adds	r3, #4
 800cfce:	f104 0715 	add.w	r7, r4, #21
 800cfd2:	42ba      	cmp	r2, r7
 800cfd4:	bf38      	it	cc
 800cfd6:	2304      	movcc	r3, #4
 800cfd8:	9301      	str	r3, [sp, #4]
 800cfda:	9b02      	ldr	r3, [sp, #8]
 800cfdc:	9103      	str	r1, [sp, #12]
 800cfde:	428b      	cmp	r3, r1
 800cfe0:	d80c      	bhi.n	800cffc <__multiply+0x9c>
 800cfe2:	2e00      	cmp	r6, #0
 800cfe4:	dd03      	ble.n	800cfee <__multiply+0x8e>
 800cfe6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d05a      	beq.n	800d0a4 <__multiply+0x144>
 800cfee:	6106      	str	r6, [r0, #16]
 800cff0:	b005      	add	sp, #20
 800cff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cff6:	f843 2b04 	str.w	r2, [r3], #4
 800cffa:	e7d8      	b.n	800cfae <__multiply+0x4e>
 800cffc:	f8b1 a000 	ldrh.w	sl, [r1]
 800d000:	f1ba 0f00 	cmp.w	sl, #0
 800d004:	d023      	beq.n	800d04e <__multiply+0xee>
 800d006:	46a9      	mov	r9, r5
 800d008:	f04f 0c00 	mov.w	ip, #0
 800d00c:	f104 0e14 	add.w	lr, r4, #20
 800d010:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d014:	f8d9 3000 	ldr.w	r3, [r9]
 800d018:	fa1f fb87 	uxth.w	fp, r7
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	fb0a 330b 	mla	r3, sl, fp, r3
 800d022:	4463      	add	r3, ip
 800d024:	f8d9 c000 	ldr.w	ip, [r9]
 800d028:	0c3f      	lsrs	r7, r7, #16
 800d02a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d02e:	fb0a c707 	mla	r7, sl, r7, ip
 800d032:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d036:	b29b      	uxth	r3, r3
 800d038:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d03c:	4572      	cmp	r2, lr
 800d03e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d042:	f849 3b04 	str.w	r3, [r9], #4
 800d046:	d8e3      	bhi.n	800d010 <__multiply+0xb0>
 800d048:	9b01      	ldr	r3, [sp, #4]
 800d04a:	f845 c003 	str.w	ip, [r5, r3]
 800d04e:	9b03      	ldr	r3, [sp, #12]
 800d050:	3104      	adds	r1, #4
 800d052:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d056:	f1b9 0f00 	cmp.w	r9, #0
 800d05a:	d021      	beq.n	800d0a0 <__multiply+0x140>
 800d05c:	46ae      	mov	lr, r5
 800d05e:	f04f 0a00 	mov.w	sl, #0
 800d062:	682b      	ldr	r3, [r5, #0]
 800d064:	f104 0c14 	add.w	ip, r4, #20
 800d068:	f8bc b000 	ldrh.w	fp, [ip]
 800d06c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d070:	b29b      	uxth	r3, r3
 800d072:	fb09 770b 	mla	r7, r9, fp, r7
 800d076:	4457      	add	r7, sl
 800d078:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d07c:	f84e 3b04 	str.w	r3, [lr], #4
 800d080:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d084:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d088:	f8be 3000 	ldrh.w	r3, [lr]
 800d08c:	4562      	cmp	r2, ip
 800d08e:	fb09 330a 	mla	r3, r9, sl, r3
 800d092:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d096:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d09a:	d8e5      	bhi.n	800d068 <__multiply+0x108>
 800d09c:	9f01      	ldr	r7, [sp, #4]
 800d09e:	51eb      	str	r3, [r5, r7]
 800d0a0:	3504      	adds	r5, #4
 800d0a2:	e79a      	b.n	800cfda <__multiply+0x7a>
 800d0a4:	3e01      	subs	r6, #1
 800d0a6:	e79c      	b.n	800cfe2 <__multiply+0x82>
 800d0a8:	0800e7cf 	.word	0x0800e7cf
 800d0ac:	0800e857 	.word	0x0800e857

0800d0b0 <__pow5mult>:
 800d0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0b4:	4615      	mov	r5, r2
 800d0b6:	f012 0203 	ands.w	r2, r2, #3
 800d0ba:	4607      	mov	r7, r0
 800d0bc:	460e      	mov	r6, r1
 800d0be:	d007      	beq.n	800d0d0 <__pow5mult+0x20>
 800d0c0:	4c25      	ldr	r4, [pc, #148]	@ (800d158 <__pow5mult+0xa8>)
 800d0c2:	3a01      	subs	r2, #1
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d0ca:	f7ff fe57 	bl	800cd7c <__multadd>
 800d0ce:	4606      	mov	r6, r0
 800d0d0:	10ad      	asrs	r5, r5, #2
 800d0d2:	d03d      	beq.n	800d150 <__pow5mult+0xa0>
 800d0d4:	69fc      	ldr	r4, [r7, #28]
 800d0d6:	b97c      	cbnz	r4, 800d0f8 <__pow5mult+0x48>
 800d0d8:	2010      	movs	r0, #16
 800d0da:	f000 fe81 	bl	800dde0 <malloc>
 800d0de:	4602      	mov	r2, r0
 800d0e0:	61f8      	str	r0, [r7, #28]
 800d0e2:	b928      	cbnz	r0, 800d0f0 <__pow5mult+0x40>
 800d0e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d0e8:	4b1c      	ldr	r3, [pc, #112]	@ (800d15c <__pow5mult+0xac>)
 800d0ea:	481d      	ldr	r0, [pc, #116]	@ (800d160 <__pow5mult+0xb0>)
 800d0ec:	f000 fe46 	bl	800dd7c <__assert_func>
 800d0f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d0f4:	6004      	str	r4, [r0, #0]
 800d0f6:	60c4      	str	r4, [r0, #12]
 800d0f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d0fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d100:	b94c      	cbnz	r4, 800d116 <__pow5mult+0x66>
 800d102:	f240 2171 	movw	r1, #625	@ 0x271
 800d106:	4638      	mov	r0, r7
 800d108:	f7ff ff14 	bl	800cf34 <__i2b>
 800d10c:	2300      	movs	r3, #0
 800d10e:	4604      	mov	r4, r0
 800d110:	f8c8 0008 	str.w	r0, [r8, #8]
 800d114:	6003      	str	r3, [r0, #0]
 800d116:	f04f 0900 	mov.w	r9, #0
 800d11a:	07eb      	lsls	r3, r5, #31
 800d11c:	d50a      	bpl.n	800d134 <__pow5mult+0x84>
 800d11e:	4631      	mov	r1, r6
 800d120:	4622      	mov	r2, r4
 800d122:	4638      	mov	r0, r7
 800d124:	f7ff ff1c 	bl	800cf60 <__multiply>
 800d128:	4680      	mov	r8, r0
 800d12a:	4631      	mov	r1, r6
 800d12c:	4638      	mov	r0, r7
 800d12e:	f7ff fe03 	bl	800cd38 <_Bfree>
 800d132:	4646      	mov	r6, r8
 800d134:	106d      	asrs	r5, r5, #1
 800d136:	d00b      	beq.n	800d150 <__pow5mult+0xa0>
 800d138:	6820      	ldr	r0, [r4, #0]
 800d13a:	b938      	cbnz	r0, 800d14c <__pow5mult+0x9c>
 800d13c:	4622      	mov	r2, r4
 800d13e:	4621      	mov	r1, r4
 800d140:	4638      	mov	r0, r7
 800d142:	f7ff ff0d 	bl	800cf60 <__multiply>
 800d146:	6020      	str	r0, [r4, #0]
 800d148:	f8c0 9000 	str.w	r9, [r0]
 800d14c:	4604      	mov	r4, r0
 800d14e:	e7e4      	b.n	800d11a <__pow5mult+0x6a>
 800d150:	4630      	mov	r0, r6
 800d152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d156:	bf00      	nop
 800d158:	0800e8b0 	.word	0x0800e8b0
 800d15c:	0800e840 	.word	0x0800e840
 800d160:	0800e857 	.word	0x0800e857

0800d164 <__lshift>:
 800d164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d168:	460c      	mov	r4, r1
 800d16a:	4607      	mov	r7, r0
 800d16c:	4691      	mov	r9, r2
 800d16e:	6923      	ldr	r3, [r4, #16]
 800d170:	6849      	ldr	r1, [r1, #4]
 800d172:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d176:	68a3      	ldr	r3, [r4, #8]
 800d178:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d17c:	f108 0601 	add.w	r6, r8, #1
 800d180:	42b3      	cmp	r3, r6
 800d182:	db0b      	blt.n	800d19c <__lshift+0x38>
 800d184:	4638      	mov	r0, r7
 800d186:	f7ff fd97 	bl	800ccb8 <_Balloc>
 800d18a:	4605      	mov	r5, r0
 800d18c:	b948      	cbnz	r0, 800d1a2 <__lshift+0x3e>
 800d18e:	4602      	mov	r2, r0
 800d190:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d194:	4b27      	ldr	r3, [pc, #156]	@ (800d234 <__lshift+0xd0>)
 800d196:	4828      	ldr	r0, [pc, #160]	@ (800d238 <__lshift+0xd4>)
 800d198:	f000 fdf0 	bl	800dd7c <__assert_func>
 800d19c:	3101      	adds	r1, #1
 800d19e:	005b      	lsls	r3, r3, #1
 800d1a0:	e7ee      	b.n	800d180 <__lshift+0x1c>
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	f100 0114 	add.w	r1, r0, #20
 800d1a8:	f100 0210 	add.w	r2, r0, #16
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	4553      	cmp	r3, sl
 800d1b0:	db33      	blt.n	800d21a <__lshift+0xb6>
 800d1b2:	6920      	ldr	r0, [r4, #16]
 800d1b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d1b8:	f104 0314 	add.w	r3, r4, #20
 800d1bc:	f019 091f 	ands.w	r9, r9, #31
 800d1c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d1c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d1c8:	d02b      	beq.n	800d222 <__lshift+0xbe>
 800d1ca:	468a      	mov	sl, r1
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	f1c9 0e20 	rsb	lr, r9, #32
 800d1d2:	6818      	ldr	r0, [r3, #0]
 800d1d4:	fa00 f009 	lsl.w	r0, r0, r9
 800d1d8:	4310      	orrs	r0, r2
 800d1da:	f84a 0b04 	str.w	r0, [sl], #4
 800d1de:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1e2:	459c      	cmp	ip, r3
 800d1e4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d1e8:	d8f3      	bhi.n	800d1d2 <__lshift+0x6e>
 800d1ea:	ebac 0304 	sub.w	r3, ip, r4
 800d1ee:	3b15      	subs	r3, #21
 800d1f0:	f023 0303 	bic.w	r3, r3, #3
 800d1f4:	3304      	adds	r3, #4
 800d1f6:	f104 0015 	add.w	r0, r4, #21
 800d1fa:	4584      	cmp	ip, r0
 800d1fc:	bf38      	it	cc
 800d1fe:	2304      	movcc	r3, #4
 800d200:	50ca      	str	r2, [r1, r3]
 800d202:	b10a      	cbz	r2, 800d208 <__lshift+0xa4>
 800d204:	f108 0602 	add.w	r6, r8, #2
 800d208:	3e01      	subs	r6, #1
 800d20a:	4638      	mov	r0, r7
 800d20c:	4621      	mov	r1, r4
 800d20e:	612e      	str	r6, [r5, #16]
 800d210:	f7ff fd92 	bl	800cd38 <_Bfree>
 800d214:	4628      	mov	r0, r5
 800d216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d21a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d21e:	3301      	adds	r3, #1
 800d220:	e7c5      	b.n	800d1ae <__lshift+0x4a>
 800d222:	3904      	subs	r1, #4
 800d224:	f853 2b04 	ldr.w	r2, [r3], #4
 800d228:	459c      	cmp	ip, r3
 800d22a:	f841 2f04 	str.w	r2, [r1, #4]!
 800d22e:	d8f9      	bhi.n	800d224 <__lshift+0xc0>
 800d230:	e7ea      	b.n	800d208 <__lshift+0xa4>
 800d232:	bf00      	nop
 800d234:	0800e7cf 	.word	0x0800e7cf
 800d238:	0800e857 	.word	0x0800e857

0800d23c <__mcmp>:
 800d23c:	4603      	mov	r3, r0
 800d23e:	690a      	ldr	r2, [r1, #16]
 800d240:	6900      	ldr	r0, [r0, #16]
 800d242:	b530      	push	{r4, r5, lr}
 800d244:	1a80      	subs	r0, r0, r2
 800d246:	d10e      	bne.n	800d266 <__mcmp+0x2a>
 800d248:	3314      	adds	r3, #20
 800d24a:	3114      	adds	r1, #20
 800d24c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d250:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d254:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d258:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d25c:	4295      	cmp	r5, r2
 800d25e:	d003      	beq.n	800d268 <__mcmp+0x2c>
 800d260:	d205      	bcs.n	800d26e <__mcmp+0x32>
 800d262:	f04f 30ff 	mov.w	r0, #4294967295
 800d266:	bd30      	pop	{r4, r5, pc}
 800d268:	42a3      	cmp	r3, r4
 800d26a:	d3f3      	bcc.n	800d254 <__mcmp+0x18>
 800d26c:	e7fb      	b.n	800d266 <__mcmp+0x2a>
 800d26e:	2001      	movs	r0, #1
 800d270:	e7f9      	b.n	800d266 <__mcmp+0x2a>
	...

0800d274 <__mdiff>:
 800d274:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d278:	4689      	mov	r9, r1
 800d27a:	4606      	mov	r6, r0
 800d27c:	4611      	mov	r1, r2
 800d27e:	4648      	mov	r0, r9
 800d280:	4614      	mov	r4, r2
 800d282:	f7ff ffdb 	bl	800d23c <__mcmp>
 800d286:	1e05      	subs	r5, r0, #0
 800d288:	d112      	bne.n	800d2b0 <__mdiff+0x3c>
 800d28a:	4629      	mov	r1, r5
 800d28c:	4630      	mov	r0, r6
 800d28e:	f7ff fd13 	bl	800ccb8 <_Balloc>
 800d292:	4602      	mov	r2, r0
 800d294:	b928      	cbnz	r0, 800d2a2 <__mdiff+0x2e>
 800d296:	f240 2137 	movw	r1, #567	@ 0x237
 800d29a:	4b3e      	ldr	r3, [pc, #248]	@ (800d394 <__mdiff+0x120>)
 800d29c:	483e      	ldr	r0, [pc, #248]	@ (800d398 <__mdiff+0x124>)
 800d29e:	f000 fd6d 	bl	800dd7c <__assert_func>
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d2a8:	4610      	mov	r0, r2
 800d2aa:	b003      	add	sp, #12
 800d2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2b0:	bfbc      	itt	lt
 800d2b2:	464b      	movlt	r3, r9
 800d2b4:	46a1      	movlt	r9, r4
 800d2b6:	4630      	mov	r0, r6
 800d2b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d2bc:	bfba      	itte	lt
 800d2be:	461c      	movlt	r4, r3
 800d2c0:	2501      	movlt	r5, #1
 800d2c2:	2500      	movge	r5, #0
 800d2c4:	f7ff fcf8 	bl	800ccb8 <_Balloc>
 800d2c8:	4602      	mov	r2, r0
 800d2ca:	b918      	cbnz	r0, 800d2d4 <__mdiff+0x60>
 800d2cc:	f240 2145 	movw	r1, #581	@ 0x245
 800d2d0:	4b30      	ldr	r3, [pc, #192]	@ (800d394 <__mdiff+0x120>)
 800d2d2:	e7e3      	b.n	800d29c <__mdiff+0x28>
 800d2d4:	f100 0b14 	add.w	fp, r0, #20
 800d2d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d2dc:	f109 0310 	add.w	r3, r9, #16
 800d2e0:	60c5      	str	r5, [r0, #12]
 800d2e2:	f04f 0c00 	mov.w	ip, #0
 800d2e6:	f109 0514 	add.w	r5, r9, #20
 800d2ea:	46d9      	mov	r9, fp
 800d2ec:	6926      	ldr	r6, [r4, #16]
 800d2ee:	f104 0e14 	add.w	lr, r4, #20
 800d2f2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d2f6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d2fa:	9301      	str	r3, [sp, #4]
 800d2fc:	9b01      	ldr	r3, [sp, #4]
 800d2fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d302:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d306:	b281      	uxth	r1, r0
 800d308:	9301      	str	r3, [sp, #4]
 800d30a:	fa1f f38a 	uxth.w	r3, sl
 800d30e:	1a5b      	subs	r3, r3, r1
 800d310:	0c00      	lsrs	r0, r0, #16
 800d312:	4463      	add	r3, ip
 800d314:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d318:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d31c:	b29b      	uxth	r3, r3
 800d31e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d322:	4576      	cmp	r6, lr
 800d324:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d328:	f849 3b04 	str.w	r3, [r9], #4
 800d32c:	d8e6      	bhi.n	800d2fc <__mdiff+0x88>
 800d32e:	1b33      	subs	r3, r6, r4
 800d330:	3b15      	subs	r3, #21
 800d332:	f023 0303 	bic.w	r3, r3, #3
 800d336:	3415      	adds	r4, #21
 800d338:	3304      	adds	r3, #4
 800d33a:	42a6      	cmp	r6, r4
 800d33c:	bf38      	it	cc
 800d33e:	2304      	movcc	r3, #4
 800d340:	441d      	add	r5, r3
 800d342:	445b      	add	r3, fp
 800d344:	461e      	mov	r6, r3
 800d346:	462c      	mov	r4, r5
 800d348:	4544      	cmp	r4, r8
 800d34a:	d30e      	bcc.n	800d36a <__mdiff+0xf6>
 800d34c:	f108 0103 	add.w	r1, r8, #3
 800d350:	1b49      	subs	r1, r1, r5
 800d352:	f021 0103 	bic.w	r1, r1, #3
 800d356:	3d03      	subs	r5, #3
 800d358:	45a8      	cmp	r8, r5
 800d35a:	bf38      	it	cc
 800d35c:	2100      	movcc	r1, #0
 800d35e:	440b      	add	r3, r1
 800d360:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d364:	b199      	cbz	r1, 800d38e <__mdiff+0x11a>
 800d366:	6117      	str	r7, [r2, #16]
 800d368:	e79e      	b.n	800d2a8 <__mdiff+0x34>
 800d36a:	46e6      	mov	lr, ip
 800d36c:	f854 1b04 	ldr.w	r1, [r4], #4
 800d370:	fa1f fc81 	uxth.w	ip, r1
 800d374:	44f4      	add	ip, lr
 800d376:	0c08      	lsrs	r0, r1, #16
 800d378:	4471      	add	r1, lr
 800d37a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d37e:	b289      	uxth	r1, r1
 800d380:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d384:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d388:	f846 1b04 	str.w	r1, [r6], #4
 800d38c:	e7dc      	b.n	800d348 <__mdiff+0xd4>
 800d38e:	3f01      	subs	r7, #1
 800d390:	e7e6      	b.n	800d360 <__mdiff+0xec>
 800d392:	bf00      	nop
 800d394:	0800e7cf 	.word	0x0800e7cf
 800d398:	0800e857 	.word	0x0800e857

0800d39c <__ulp>:
 800d39c:	4b0e      	ldr	r3, [pc, #56]	@ (800d3d8 <__ulp+0x3c>)
 800d39e:	400b      	ands	r3, r1
 800d3a0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	dc08      	bgt.n	800d3ba <__ulp+0x1e>
 800d3a8:	425b      	negs	r3, r3
 800d3aa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d3ae:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d3b2:	da04      	bge.n	800d3be <__ulp+0x22>
 800d3b4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d3b8:	4113      	asrs	r3, r2
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	e008      	b.n	800d3d0 <__ulp+0x34>
 800d3be:	f1a2 0314 	sub.w	r3, r2, #20
 800d3c2:	2b1e      	cmp	r3, #30
 800d3c4:	bfd6      	itet	le
 800d3c6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d3ca:	2201      	movgt	r2, #1
 800d3cc:	40da      	lsrle	r2, r3
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	4610      	mov	r0, r2
 800d3d4:	4770      	bx	lr
 800d3d6:	bf00      	nop
 800d3d8:	7ff00000 	.word	0x7ff00000

0800d3dc <__b2d>:
 800d3dc:	6902      	ldr	r2, [r0, #16]
 800d3de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3e0:	f100 0614 	add.w	r6, r0, #20
 800d3e4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800d3e8:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800d3ec:	4f1e      	ldr	r7, [pc, #120]	@ (800d468 <__b2d+0x8c>)
 800d3ee:	4620      	mov	r0, r4
 800d3f0:	f7ff fd54 	bl	800ce9c <__hi0bits>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	f1c0 0020 	rsb	r0, r0, #32
 800d3fa:	2b0a      	cmp	r3, #10
 800d3fc:	f1a2 0504 	sub.w	r5, r2, #4
 800d400:	6008      	str	r0, [r1, #0]
 800d402:	dc12      	bgt.n	800d42a <__b2d+0x4e>
 800d404:	42ae      	cmp	r6, r5
 800d406:	bf2c      	ite	cs
 800d408:	2200      	movcs	r2, #0
 800d40a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d40e:	f1c3 0c0b 	rsb	ip, r3, #11
 800d412:	3315      	adds	r3, #21
 800d414:	fa24 fe0c 	lsr.w	lr, r4, ip
 800d418:	fa04 f303 	lsl.w	r3, r4, r3
 800d41c:	fa22 f20c 	lsr.w	r2, r2, ip
 800d420:	ea4e 0107 	orr.w	r1, lr, r7
 800d424:	431a      	orrs	r2, r3
 800d426:	4610      	mov	r0, r2
 800d428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d42a:	42ae      	cmp	r6, r5
 800d42c:	bf36      	itet	cc
 800d42e:	f1a2 0508 	subcc.w	r5, r2, #8
 800d432:	2200      	movcs	r2, #0
 800d434:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d438:	3b0b      	subs	r3, #11
 800d43a:	d012      	beq.n	800d462 <__b2d+0x86>
 800d43c:	f1c3 0720 	rsb	r7, r3, #32
 800d440:	fa22 f107 	lsr.w	r1, r2, r7
 800d444:	409c      	lsls	r4, r3
 800d446:	430c      	orrs	r4, r1
 800d448:	42b5      	cmp	r5, r6
 800d44a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800d44e:	bf94      	ite	ls
 800d450:	2400      	movls	r4, #0
 800d452:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800d456:	409a      	lsls	r2, r3
 800d458:	40fc      	lsrs	r4, r7
 800d45a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d45e:	4322      	orrs	r2, r4
 800d460:	e7e1      	b.n	800d426 <__b2d+0x4a>
 800d462:	ea44 0107 	orr.w	r1, r4, r7
 800d466:	e7de      	b.n	800d426 <__b2d+0x4a>
 800d468:	3ff00000 	.word	0x3ff00000

0800d46c <__d2b>:
 800d46c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d470:	2101      	movs	r1, #1
 800d472:	4690      	mov	r8, r2
 800d474:	4699      	mov	r9, r3
 800d476:	9e08      	ldr	r6, [sp, #32]
 800d478:	f7ff fc1e 	bl	800ccb8 <_Balloc>
 800d47c:	4604      	mov	r4, r0
 800d47e:	b930      	cbnz	r0, 800d48e <__d2b+0x22>
 800d480:	4602      	mov	r2, r0
 800d482:	f240 310f 	movw	r1, #783	@ 0x30f
 800d486:	4b23      	ldr	r3, [pc, #140]	@ (800d514 <__d2b+0xa8>)
 800d488:	4823      	ldr	r0, [pc, #140]	@ (800d518 <__d2b+0xac>)
 800d48a:	f000 fc77 	bl	800dd7c <__assert_func>
 800d48e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d492:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d496:	b10d      	cbz	r5, 800d49c <__d2b+0x30>
 800d498:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d49c:	9301      	str	r3, [sp, #4]
 800d49e:	f1b8 0300 	subs.w	r3, r8, #0
 800d4a2:	d024      	beq.n	800d4ee <__d2b+0x82>
 800d4a4:	4668      	mov	r0, sp
 800d4a6:	9300      	str	r3, [sp, #0]
 800d4a8:	f7ff fd17 	bl	800ceda <__lo0bits>
 800d4ac:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d4b0:	b1d8      	cbz	r0, 800d4ea <__d2b+0x7e>
 800d4b2:	f1c0 0320 	rsb	r3, r0, #32
 800d4b6:	fa02 f303 	lsl.w	r3, r2, r3
 800d4ba:	430b      	orrs	r3, r1
 800d4bc:	40c2      	lsrs	r2, r0
 800d4be:	6163      	str	r3, [r4, #20]
 800d4c0:	9201      	str	r2, [sp, #4]
 800d4c2:	9b01      	ldr	r3, [sp, #4]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	bf0c      	ite	eq
 800d4c8:	2201      	moveq	r2, #1
 800d4ca:	2202      	movne	r2, #2
 800d4cc:	61a3      	str	r3, [r4, #24]
 800d4ce:	6122      	str	r2, [r4, #16]
 800d4d0:	b1ad      	cbz	r5, 800d4fe <__d2b+0x92>
 800d4d2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d4d6:	4405      	add	r5, r0
 800d4d8:	6035      	str	r5, [r6, #0]
 800d4da:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d4de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4e0:	6018      	str	r0, [r3, #0]
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	b002      	add	sp, #8
 800d4e6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d4ea:	6161      	str	r1, [r4, #20]
 800d4ec:	e7e9      	b.n	800d4c2 <__d2b+0x56>
 800d4ee:	a801      	add	r0, sp, #4
 800d4f0:	f7ff fcf3 	bl	800ceda <__lo0bits>
 800d4f4:	9b01      	ldr	r3, [sp, #4]
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	6163      	str	r3, [r4, #20]
 800d4fa:	3020      	adds	r0, #32
 800d4fc:	e7e7      	b.n	800d4ce <__d2b+0x62>
 800d4fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d502:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d506:	6030      	str	r0, [r6, #0]
 800d508:	6918      	ldr	r0, [r3, #16]
 800d50a:	f7ff fcc7 	bl	800ce9c <__hi0bits>
 800d50e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d512:	e7e4      	b.n	800d4de <__d2b+0x72>
 800d514:	0800e7cf 	.word	0x0800e7cf
 800d518:	0800e857 	.word	0x0800e857

0800d51c <__ratio>:
 800d51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d520:	b085      	sub	sp, #20
 800d522:	e9cd 1000 	strd	r1, r0, [sp]
 800d526:	a902      	add	r1, sp, #8
 800d528:	f7ff ff58 	bl	800d3dc <__b2d>
 800d52c:	468b      	mov	fp, r1
 800d52e:	4606      	mov	r6, r0
 800d530:	460f      	mov	r7, r1
 800d532:	9800      	ldr	r0, [sp, #0]
 800d534:	a903      	add	r1, sp, #12
 800d536:	f7ff ff51 	bl	800d3dc <__b2d>
 800d53a:	460d      	mov	r5, r1
 800d53c:	9b01      	ldr	r3, [sp, #4]
 800d53e:	4689      	mov	r9, r1
 800d540:	6919      	ldr	r1, [r3, #16]
 800d542:	9b00      	ldr	r3, [sp, #0]
 800d544:	4604      	mov	r4, r0
 800d546:	691b      	ldr	r3, [r3, #16]
 800d548:	4630      	mov	r0, r6
 800d54a:	1ac9      	subs	r1, r1, r3
 800d54c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d550:	1a9b      	subs	r3, r3, r2
 800d552:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d556:	2b00      	cmp	r3, #0
 800d558:	bfcd      	iteet	gt
 800d55a:	463a      	movgt	r2, r7
 800d55c:	462a      	movle	r2, r5
 800d55e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d562:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d566:	bfd8      	it	le
 800d568:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d56c:	464b      	mov	r3, r9
 800d56e:	4622      	mov	r2, r4
 800d570:	4659      	mov	r1, fp
 800d572:	f7f8 f8e5 	bl	8005740 <__aeabi_ddiv>
 800d576:	b005      	add	sp, #20
 800d578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d57c <__copybits>:
 800d57c:	3901      	subs	r1, #1
 800d57e:	b570      	push	{r4, r5, r6, lr}
 800d580:	1149      	asrs	r1, r1, #5
 800d582:	6914      	ldr	r4, [r2, #16]
 800d584:	3101      	adds	r1, #1
 800d586:	f102 0314 	add.w	r3, r2, #20
 800d58a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d58e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d592:	1f05      	subs	r5, r0, #4
 800d594:	42a3      	cmp	r3, r4
 800d596:	d30c      	bcc.n	800d5b2 <__copybits+0x36>
 800d598:	1aa3      	subs	r3, r4, r2
 800d59a:	3b11      	subs	r3, #17
 800d59c:	f023 0303 	bic.w	r3, r3, #3
 800d5a0:	3211      	adds	r2, #17
 800d5a2:	42a2      	cmp	r2, r4
 800d5a4:	bf88      	it	hi
 800d5a6:	2300      	movhi	r3, #0
 800d5a8:	4418      	add	r0, r3
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	4288      	cmp	r0, r1
 800d5ae:	d305      	bcc.n	800d5bc <__copybits+0x40>
 800d5b0:	bd70      	pop	{r4, r5, r6, pc}
 800d5b2:	f853 6b04 	ldr.w	r6, [r3], #4
 800d5b6:	f845 6f04 	str.w	r6, [r5, #4]!
 800d5ba:	e7eb      	b.n	800d594 <__copybits+0x18>
 800d5bc:	f840 3b04 	str.w	r3, [r0], #4
 800d5c0:	e7f4      	b.n	800d5ac <__copybits+0x30>

0800d5c2 <__any_on>:
 800d5c2:	f100 0214 	add.w	r2, r0, #20
 800d5c6:	6900      	ldr	r0, [r0, #16]
 800d5c8:	114b      	asrs	r3, r1, #5
 800d5ca:	4298      	cmp	r0, r3
 800d5cc:	b510      	push	{r4, lr}
 800d5ce:	db11      	blt.n	800d5f4 <__any_on+0x32>
 800d5d0:	dd0a      	ble.n	800d5e8 <__any_on+0x26>
 800d5d2:	f011 011f 	ands.w	r1, r1, #31
 800d5d6:	d007      	beq.n	800d5e8 <__any_on+0x26>
 800d5d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d5dc:	fa24 f001 	lsr.w	r0, r4, r1
 800d5e0:	fa00 f101 	lsl.w	r1, r0, r1
 800d5e4:	428c      	cmp	r4, r1
 800d5e6:	d10b      	bne.n	800d600 <__any_on+0x3e>
 800d5e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d5ec:	4293      	cmp	r3, r2
 800d5ee:	d803      	bhi.n	800d5f8 <__any_on+0x36>
 800d5f0:	2000      	movs	r0, #0
 800d5f2:	bd10      	pop	{r4, pc}
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	e7f7      	b.n	800d5e8 <__any_on+0x26>
 800d5f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d5fc:	2900      	cmp	r1, #0
 800d5fe:	d0f5      	beq.n	800d5ec <__any_on+0x2a>
 800d600:	2001      	movs	r0, #1
 800d602:	e7f6      	b.n	800d5f2 <__any_on+0x30>

0800d604 <__ascii_wctomb>:
 800d604:	4603      	mov	r3, r0
 800d606:	4608      	mov	r0, r1
 800d608:	b141      	cbz	r1, 800d61c <__ascii_wctomb+0x18>
 800d60a:	2aff      	cmp	r2, #255	@ 0xff
 800d60c:	d904      	bls.n	800d618 <__ascii_wctomb+0x14>
 800d60e:	228a      	movs	r2, #138	@ 0x8a
 800d610:	f04f 30ff 	mov.w	r0, #4294967295
 800d614:	601a      	str	r2, [r3, #0]
 800d616:	4770      	bx	lr
 800d618:	2001      	movs	r0, #1
 800d61a:	700a      	strb	r2, [r1, #0]
 800d61c:	4770      	bx	lr

0800d61e <__ssputs_r>:
 800d61e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d622:	461f      	mov	r7, r3
 800d624:	688e      	ldr	r6, [r1, #8]
 800d626:	4682      	mov	sl, r0
 800d628:	42be      	cmp	r6, r7
 800d62a:	460c      	mov	r4, r1
 800d62c:	4690      	mov	r8, r2
 800d62e:	680b      	ldr	r3, [r1, #0]
 800d630:	d82d      	bhi.n	800d68e <__ssputs_r+0x70>
 800d632:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d636:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d63a:	d026      	beq.n	800d68a <__ssputs_r+0x6c>
 800d63c:	6965      	ldr	r5, [r4, #20]
 800d63e:	6909      	ldr	r1, [r1, #16]
 800d640:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d644:	eba3 0901 	sub.w	r9, r3, r1
 800d648:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d64c:	1c7b      	adds	r3, r7, #1
 800d64e:	444b      	add	r3, r9
 800d650:	106d      	asrs	r5, r5, #1
 800d652:	429d      	cmp	r5, r3
 800d654:	bf38      	it	cc
 800d656:	461d      	movcc	r5, r3
 800d658:	0553      	lsls	r3, r2, #21
 800d65a:	d527      	bpl.n	800d6ac <__ssputs_r+0x8e>
 800d65c:	4629      	mov	r1, r5
 800d65e:	f7ff fa8d 	bl	800cb7c <_malloc_r>
 800d662:	4606      	mov	r6, r0
 800d664:	b360      	cbz	r0, 800d6c0 <__ssputs_r+0xa2>
 800d666:	464a      	mov	r2, r9
 800d668:	6921      	ldr	r1, [r4, #16]
 800d66a:	f7fe feca 	bl	800c402 <memcpy>
 800d66e:	89a3      	ldrh	r3, [r4, #12]
 800d670:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d678:	81a3      	strh	r3, [r4, #12]
 800d67a:	6126      	str	r6, [r4, #16]
 800d67c:	444e      	add	r6, r9
 800d67e:	6026      	str	r6, [r4, #0]
 800d680:	463e      	mov	r6, r7
 800d682:	6165      	str	r5, [r4, #20]
 800d684:	eba5 0509 	sub.w	r5, r5, r9
 800d688:	60a5      	str	r5, [r4, #8]
 800d68a:	42be      	cmp	r6, r7
 800d68c:	d900      	bls.n	800d690 <__ssputs_r+0x72>
 800d68e:	463e      	mov	r6, r7
 800d690:	4632      	mov	r2, r6
 800d692:	4641      	mov	r1, r8
 800d694:	6820      	ldr	r0, [r4, #0]
 800d696:	f7fe fdd9 	bl	800c24c <memmove>
 800d69a:	2000      	movs	r0, #0
 800d69c:	68a3      	ldr	r3, [r4, #8]
 800d69e:	1b9b      	subs	r3, r3, r6
 800d6a0:	60a3      	str	r3, [r4, #8]
 800d6a2:	6823      	ldr	r3, [r4, #0]
 800d6a4:	4433      	add	r3, r6
 800d6a6:	6023      	str	r3, [r4, #0]
 800d6a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6ac:	462a      	mov	r2, r5
 800d6ae:	f000 fb9f 	bl	800ddf0 <_realloc_r>
 800d6b2:	4606      	mov	r6, r0
 800d6b4:	2800      	cmp	r0, #0
 800d6b6:	d1e0      	bne.n	800d67a <__ssputs_r+0x5c>
 800d6b8:	4650      	mov	r0, sl
 800d6ba:	6921      	ldr	r1, [r4, #16]
 800d6bc:	f7fe feba 	bl	800c434 <_free_r>
 800d6c0:	230c      	movs	r3, #12
 800d6c2:	f8ca 3000 	str.w	r3, [sl]
 800d6c6:	89a3      	ldrh	r3, [r4, #12]
 800d6c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d6cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6d0:	81a3      	strh	r3, [r4, #12]
 800d6d2:	e7e9      	b.n	800d6a8 <__ssputs_r+0x8a>

0800d6d4 <_svfiprintf_r>:
 800d6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6d8:	4698      	mov	r8, r3
 800d6da:	898b      	ldrh	r3, [r1, #12]
 800d6dc:	4607      	mov	r7, r0
 800d6de:	061b      	lsls	r3, r3, #24
 800d6e0:	460d      	mov	r5, r1
 800d6e2:	4614      	mov	r4, r2
 800d6e4:	b09d      	sub	sp, #116	@ 0x74
 800d6e6:	d510      	bpl.n	800d70a <_svfiprintf_r+0x36>
 800d6e8:	690b      	ldr	r3, [r1, #16]
 800d6ea:	b973      	cbnz	r3, 800d70a <_svfiprintf_r+0x36>
 800d6ec:	2140      	movs	r1, #64	@ 0x40
 800d6ee:	f7ff fa45 	bl	800cb7c <_malloc_r>
 800d6f2:	6028      	str	r0, [r5, #0]
 800d6f4:	6128      	str	r0, [r5, #16]
 800d6f6:	b930      	cbnz	r0, 800d706 <_svfiprintf_r+0x32>
 800d6f8:	230c      	movs	r3, #12
 800d6fa:	603b      	str	r3, [r7, #0]
 800d6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d700:	b01d      	add	sp, #116	@ 0x74
 800d702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d706:	2340      	movs	r3, #64	@ 0x40
 800d708:	616b      	str	r3, [r5, #20]
 800d70a:	2300      	movs	r3, #0
 800d70c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d70e:	2320      	movs	r3, #32
 800d710:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d714:	2330      	movs	r3, #48	@ 0x30
 800d716:	f04f 0901 	mov.w	r9, #1
 800d71a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d71e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d8b8 <_svfiprintf_r+0x1e4>
 800d722:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d726:	4623      	mov	r3, r4
 800d728:	469a      	mov	sl, r3
 800d72a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d72e:	b10a      	cbz	r2, 800d734 <_svfiprintf_r+0x60>
 800d730:	2a25      	cmp	r2, #37	@ 0x25
 800d732:	d1f9      	bne.n	800d728 <_svfiprintf_r+0x54>
 800d734:	ebba 0b04 	subs.w	fp, sl, r4
 800d738:	d00b      	beq.n	800d752 <_svfiprintf_r+0x7e>
 800d73a:	465b      	mov	r3, fp
 800d73c:	4622      	mov	r2, r4
 800d73e:	4629      	mov	r1, r5
 800d740:	4638      	mov	r0, r7
 800d742:	f7ff ff6c 	bl	800d61e <__ssputs_r>
 800d746:	3001      	adds	r0, #1
 800d748:	f000 80a7 	beq.w	800d89a <_svfiprintf_r+0x1c6>
 800d74c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d74e:	445a      	add	r2, fp
 800d750:	9209      	str	r2, [sp, #36]	@ 0x24
 800d752:	f89a 3000 	ldrb.w	r3, [sl]
 800d756:	2b00      	cmp	r3, #0
 800d758:	f000 809f 	beq.w	800d89a <_svfiprintf_r+0x1c6>
 800d75c:	2300      	movs	r3, #0
 800d75e:	f04f 32ff 	mov.w	r2, #4294967295
 800d762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d766:	f10a 0a01 	add.w	sl, sl, #1
 800d76a:	9304      	str	r3, [sp, #16]
 800d76c:	9307      	str	r3, [sp, #28]
 800d76e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d772:	931a      	str	r3, [sp, #104]	@ 0x68
 800d774:	4654      	mov	r4, sl
 800d776:	2205      	movs	r2, #5
 800d778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d77c:	484e      	ldr	r0, [pc, #312]	@ (800d8b8 <_svfiprintf_r+0x1e4>)
 800d77e:	f000 faef 	bl	800dd60 <memchr>
 800d782:	9a04      	ldr	r2, [sp, #16]
 800d784:	b9d8      	cbnz	r0, 800d7be <_svfiprintf_r+0xea>
 800d786:	06d0      	lsls	r0, r2, #27
 800d788:	bf44      	itt	mi
 800d78a:	2320      	movmi	r3, #32
 800d78c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d790:	0711      	lsls	r1, r2, #28
 800d792:	bf44      	itt	mi
 800d794:	232b      	movmi	r3, #43	@ 0x2b
 800d796:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d79a:	f89a 3000 	ldrb.w	r3, [sl]
 800d79e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7a0:	d015      	beq.n	800d7ce <_svfiprintf_r+0xfa>
 800d7a2:	4654      	mov	r4, sl
 800d7a4:	2000      	movs	r0, #0
 800d7a6:	f04f 0c0a 	mov.w	ip, #10
 800d7aa:	9a07      	ldr	r2, [sp, #28]
 800d7ac:	4621      	mov	r1, r4
 800d7ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7b2:	3b30      	subs	r3, #48	@ 0x30
 800d7b4:	2b09      	cmp	r3, #9
 800d7b6:	d94b      	bls.n	800d850 <_svfiprintf_r+0x17c>
 800d7b8:	b1b0      	cbz	r0, 800d7e8 <_svfiprintf_r+0x114>
 800d7ba:	9207      	str	r2, [sp, #28]
 800d7bc:	e014      	b.n	800d7e8 <_svfiprintf_r+0x114>
 800d7be:	eba0 0308 	sub.w	r3, r0, r8
 800d7c2:	fa09 f303 	lsl.w	r3, r9, r3
 800d7c6:	4313      	orrs	r3, r2
 800d7c8:	46a2      	mov	sl, r4
 800d7ca:	9304      	str	r3, [sp, #16]
 800d7cc:	e7d2      	b.n	800d774 <_svfiprintf_r+0xa0>
 800d7ce:	9b03      	ldr	r3, [sp, #12]
 800d7d0:	1d19      	adds	r1, r3, #4
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	9103      	str	r1, [sp, #12]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	bfbb      	ittet	lt
 800d7da:	425b      	neglt	r3, r3
 800d7dc:	f042 0202 	orrlt.w	r2, r2, #2
 800d7e0:	9307      	strge	r3, [sp, #28]
 800d7e2:	9307      	strlt	r3, [sp, #28]
 800d7e4:	bfb8      	it	lt
 800d7e6:	9204      	strlt	r2, [sp, #16]
 800d7e8:	7823      	ldrb	r3, [r4, #0]
 800d7ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800d7ec:	d10a      	bne.n	800d804 <_svfiprintf_r+0x130>
 800d7ee:	7863      	ldrb	r3, [r4, #1]
 800d7f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7f2:	d132      	bne.n	800d85a <_svfiprintf_r+0x186>
 800d7f4:	9b03      	ldr	r3, [sp, #12]
 800d7f6:	3402      	adds	r4, #2
 800d7f8:	1d1a      	adds	r2, r3, #4
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	9203      	str	r2, [sp, #12]
 800d7fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d802:	9305      	str	r3, [sp, #20]
 800d804:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d8bc <_svfiprintf_r+0x1e8>
 800d808:	2203      	movs	r2, #3
 800d80a:	4650      	mov	r0, sl
 800d80c:	7821      	ldrb	r1, [r4, #0]
 800d80e:	f000 faa7 	bl	800dd60 <memchr>
 800d812:	b138      	cbz	r0, 800d824 <_svfiprintf_r+0x150>
 800d814:	2240      	movs	r2, #64	@ 0x40
 800d816:	9b04      	ldr	r3, [sp, #16]
 800d818:	eba0 000a 	sub.w	r0, r0, sl
 800d81c:	4082      	lsls	r2, r0
 800d81e:	4313      	orrs	r3, r2
 800d820:	3401      	adds	r4, #1
 800d822:	9304      	str	r3, [sp, #16]
 800d824:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d828:	2206      	movs	r2, #6
 800d82a:	4825      	ldr	r0, [pc, #148]	@ (800d8c0 <_svfiprintf_r+0x1ec>)
 800d82c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d830:	f000 fa96 	bl	800dd60 <memchr>
 800d834:	2800      	cmp	r0, #0
 800d836:	d036      	beq.n	800d8a6 <_svfiprintf_r+0x1d2>
 800d838:	4b22      	ldr	r3, [pc, #136]	@ (800d8c4 <_svfiprintf_r+0x1f0>)
 800d83a:	bb1b      	cbnz	r3, 800d884 <_svfiprintf_r+0x1b0>
 800d83c:	9b03      	ldr	r3, [sp, #12]
 800d83e:	3307      	adds	r3, #7
 800d840:	f023 0307 	bic.w	r3, r3, #7
 800d844:	3308      	adds	r3, #8
 800d846:	9303      	str	r3, [sp, #12]
 800d848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d84a:	4433      	add	r3, r6
 800d84c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d84e:	e76a      	b.n	800d726 <_svfiprintf_r+0x52>
 800d850:	460c      	mov	r4, r1
 800d852:	2001      	movs	r0, #1
 800d854:	fb0c 3202 	mla	r2, ip, r2, r3
 800d858:	e7a8      	b.n	800d7ac <_svfiprintf_r+0xd8>
 800d85a:	2300      	movs	r3, #0
 800d85c:	f04f 0c0a 	mov.w	ip, #10
 800d860:	4619      	mov	r1, r3
 800d862:	3401      	adds	r4, #1
 800d864:	9305      	str	r3, [sp, #20]
 800d866:	4620      	mov	r0, r4
 800d868:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d86c:	3a30      	subs	r2, #48	@ 0x30
 800d86e:	2a09      	cmp	r2, #9
 800d870:	d903      	bls.n	800d87a <_svfiprintf_r+0x1a6>
 800d872:	2b00      	cmp	r3, #0
 800d874:	d0c6      	beq.n	800d804 <_svfiprintf_r+0x130>
 800d876:	9105      	str	r1, [sp, #20]
 800d878:	e7c4      	b.n	800d804 <_svfiprintf_r+0x130>
 800d87a:	4604      	mov	r4, r0
 800d87c:	2301      	movs	r3, #1
 800d87e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d882:	e7f0      	b.n	800d866 <_svfiprintf_r+0x192>
 800d884:	ab03      	add	r3, sp, #12
 800d886:	9300      	str	r3, [sp, #0]
 800d888:	462a      	mov	r2, r5
 800d88a:	4638      	mov	r0, r7
 800d88c:	4b0e      	ldr	r3, [pc, #56]	@ (800d8c8 <_svfiprintf_r+0x1f4>)
 800d88e:	a904      	add	r1, sp, #16
 800d890:	f3af 8000 	nop.w
 800d894:	1c42      	adds	r2, r0, #1
 800d896:	4606      	mov	r6, r0
 800d898:	d1d6      	bne.n	800d848 <_svfiprintf_r+0x174>
 800d89a:	89ab      	ldrh	r3, [r5, #12]
 800d89c:	065b      	lsls	r3, r3, #25
 800d89e:	f53f af2d 	bmi.w	800d6fc <_svfiprintf_r+0x28>
 800d8a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d8a4:	e72c      	b.n	800d700 <_svfiprintf_r+0x2c>
 800d8a6:	ab03      	add	r3, sp, #12
 800d8a8:	9300      	str	r3, [sp, #0]
 800d8aa:	462a      	mov	r2, r5
 800d8ac:	4638      	mov	r0, r7
 800d8ae:	4b06      	ldr	r3, [pc, #24]	@ (800d8c8 <_svfiprintf_r+0x1f4>)
 800d8b0:	a904      	add	r1, sp, #16
 800d8b2:	f000 f87d 	bl	800d9b0 <_printf_i>
 800d8b6:	e7ed      	b.n	800d894 <_svfiprintf_r+0x1c0>
 800d8b8:	0800e9b0 	.word	0x0800e9b0
 800d8bc:	0800e9b6 	.word	0x0800e9b6
 800d8c0:	0800e9ba 	.word	0x0800e9ba
 800d8c4:	00000000 	.word	0x00000000
 800d8c8:	0800d61f 	.word	0x0800d61f

0800d8cc <_printf_common>:
 800d8cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8d0:	4616      	mov	r6, r2
 800d8d2:	4698      	mov	r8, r3
 800d8d4:	688a      	ldr	r2, [r1, #8]
 800d8d6:	690b      	ldr	r3, [r1, #16]
 800d8d8:	4607      	mov	r7, r0
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	bfb8      	it	lt
 800d8de:	4613      	movlt	r3, r2
 800d8e0:	6033      	str	r3, [r6, #0]
 800d8e2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d8e6:	460c      	mov	r4, r1
 800d8e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d8ec:	b10a      	cbz	r2, 800d8f2 <_printf_common+0x26>
 800d8ee:	3301      	adds	r3, #1
 800d8f0:	6033      	str	r3, [r6, #0]
 800d8f2:	6823      	ldr	r3, [r4, #0]
 800d8f4:	0699      	lsls	r1, r3, #26
 800d8f6:	bf42      	ittt	mi
 800d8f8:	6833      	ldrmi	r3, [r6, #0]
 800d8fa:	3302      	addmi	r3, #2
 800d8fc:	6033      	strmi	r3, [r6, #0]
 800d8fe:	6825      	ldr	r5, [r4, #0]
 800d900:	f015 0506 	ands.w	r5, r5, #6
 800d904:	d106      	bne.n	800d914 <_printf_common+0x48>
 800d906:	f104 0a19 	add.w	sl, r4, #25
 800d90a:	68e3      	ldr	r3, [r4, #12]
 800d90c:	6832      	ldr	r2, [r6, #0]
 800d90e:	1a9b      	subs	r3, r3, r2
 800d910:	42ab      	cmp	r3, r5
 800d912:	dc2b      	bgt.n	800d96c <_printf_common+0xa0>
 800d914:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d918:	6822      	ldr	r2, [r4, #0]
 800d91a:	3b00      	subs	r3, #0
 800d91c:	bf18      	it	ne
 800d91e:	2301      	movne	r3, #1
 800d920:	0692      	lsls	r2, r2, #26
 800d922:	d430      	bmi.n	800d986 <_printf_common+0xba>
 800d924:	4641      	mov	r1, r8
 800d926:	4638      	mov	r0, r7
 800d928:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d92c:	47c8      	blx	r9
 800d92e:	3001      	adds	r0, #1
 800d930:	d023      	beq.n	800d97a <_printf_common+0xae>
 800d932:	6823      	ldr	r3, [r4, #0]
 800d934:	6922      	ldr	r2, [r4, #16]
 800d936:	f003 0306 	and.w	r3, r3, #6
 800d93a:	2b04      	cmp	r3, #4
 800d93c:	bf14      	ite	ne
 800d93e:	2500      	movne	r5, #0
 800d940:	6833      	ldreq	r3, [r6, #0]
 800d942:	f04f 0600 	mov.w	r6, #0
 800d946:	bf08      	it	eq
 800d948:	68e5      	ldreq	r5, [r4, #12]
 800d94a:	f104 041a 	add.w	r4, r4, #26
 800d94e:	bf08      	it	eq
 800d950:	1aed      	subeq	r5, r5, r3
 800d952:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d956:	bf08      	it	eq
 800d958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d95c:	4293      	cmp	r3, r2
 800d95e:	bfc4      	itt	gt
 800d960:	1a9b      	subgt	r3, r3, r2
 800d962:	18ed      	addgt	r5, r5, r3
 800d964:	42b5      	cmp	r5, r6
 800d966:	d11a      	bne.n	800d99e <_printf_common+0xd2>
 800d968:	2000      	movs	r0, #0
 800d96a:	e008      	b.n	800d97e <_printf_common+0xb2>
 800d96c:	2301      	movs	r3, #1
 800d96e:	4652      	mov	r2, sl
 800d970:	4641      	mov	r1, r8
 800d972:	4638      	mov	r0, r7
 800d974:	47c8      	blx	r9
 800d976:	3001      	adds	r0, #1
 800d978:	d103      	bne.n	800d982 <_printf_common+0xb6>
 800d97a:	f04f 30ff 	mov.w	r0, #4294967295
 800d97e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d982:	3501      	adds	r5, #1
 800d984:	e7c1      	b.n	800d90a <_printf_common+0x3e>
 800d986:	2030      	movs	r0, #48	@ 0x30
 800d988:	18e1      	adds	r1, r4, r3
 800d98a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d98e:	1c5a      	adds	r2, r3, #1
 800d990:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d994:	4422      	add	r2, r4
 800d996:	3302      	adds	r3, #2
 800d998:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d99c:	e7c2      	b.n	800d924 <_printf_common+0x58>
 800d99e:	2301      	movs	r3, #1
 800d9a0:	4622      	mov	r2, r4
 800d9a2:	4641      	mov	r1, r8
 800d9a4:	4638      	mov	r0, r7
 800d9a6:	47c8      	blx	r9
 800d9a8:	3001      	adds	r0, #1
 800d9aa:	d0e6      	beq.n	800d97a <_printf_common+0xae>
 800d9ac:	3601      	adds	r6, #1
 800d9ae:	e7d9      	b.n	800d964 <_printf_common+0x98>

0800d9b0 <_printf_i>:
 800d9b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d9b4:	7e0f      	ldrb	r7, [r1, #24]
 800d9b6:	4691      	mov	r9, r2
 800d9b8:	2f78      	cmp	r7, #120	@ 0x78
 800d9ba:	4680      	mov	r8, r0
 800d9bc:	460c      	mov	r4, r1
 800d9be:	469a      	mov	sl, r3
 800d9c0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d9c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d9c6:	d807      	bhi.n	800d9d8 <_printf_i+0x28>
 800d9c8:	2f62      	cmp	r7, #98	@ 0x62
 800d9ca:	d80a      	bhi.n	800d9e2 <_printf_i+0x32>
 800d9cc:	2f00      	cmp	r7, #0
 800d9ce:	f000 80d3 	beq.w	800db78 <_printf_i+0x1c8>
 800d9d2:	2f58      	cmp	r7, #88	@ 0x58
 800d9d4:	f000 80ba 	beq.w	800db4c <_printf_i+0x19c>
 800d9d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d9dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d9e0:	e03a      	b.n	800da58 <_printf_i+0xa8>
 800d9e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d9e6:	2b15      	cmp	r3, #21
 800d9e8:	d8f6      	bhi.n	800d9d8 <_printf_i+0x28>
 800d9ea:	a101      	add	r1, pc, #4	@ (adr r1, 800d9f0 <_printf_i+0x40>)
 800d9ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d9f0:	0800da49 	.word	0x0800da49
 800d9f4:	0800da5d 	.word	0x0800da5d
 800d9f8:	0800d9d9 	.word	0x0800d9d9
 800d9fc:	0800d9d9 	.word	0x0800d9d9
 800da00:	0800d9d9 	.word	0x0800d9d9
 800da04:	0800d9d9 	.word	0x0800d9d9
 800da08:	0800da5d 	.word	0x0800da5d
 800da0c:	0800d9d9 	.word	0x0800d9d9
 800da10:	0800d9d9 	.word	0x0800d9d9
 800da14:	0800d9d9 	.word	0x0800d9d9
 800da18:	0800d9d9 	.word	0x0800d9d9
 800da1c:	0800db5f 	.word	0x0800db5f
 800da20:	0800da87 	.word	0x0800da87
 800da24:	0800db19 	.word	0x0800db19
 800da28:	0800d9d9 	.word	0x0800d9d9
 800da2c:	0800d9d9 	.word	0x0800d9d9
 800da30:	0800db81 	.word	0x0800db81
 800da34:	0800d9d9 	.word	0x0800d9d9
 800da38:	0800da87 	.word	0x0800da87
 800da3c:	0800d9d9 	.word	0x0800d9d9
 800da40:	0800d9d9 	.word	0x0800d9d9
 800da44:	0800db21 	.word	0x0800db21
 800da48:	6833      	ldr	r3, [r6, #0]
 800da4a:	1d1a      	adds	r2, r3, #4
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	6032      	str	r2, [r6, #0]
 800da50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800da54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800da58:	2301      	movs	r3, #1
 800da5a:	e09e      	b.n	800db9a <_printf_i+0x1ea>
 800da5c:	6833      	ldr	r3, [r6, #0]
 800da5e:	6820      	ldr	r0, [r4, #0]
 800da60:	1d19      	adds	r1, r3, #4
 800da62:	6031      	str	r1, [r6, #0]
 800da64:	0606      	lsls	r6, r0, #24
 800da66:	d501      	bpl.n	800da6c <_printf_i+0xbc>
 800da68:	681d      	ldr	r5, [r3, #0]
 800da6a:	e003      	b.n	800da74 <_printf_i+0xc4>
 800da6c:	0645      	lsls	r5, r0, #25
 800da6e:	d5fb      	bpl.n	800da68 <_printf_i+0xb8>
 800da70:	f9b3 5000 	ldrsh.w	r5, [r3]
 800da74:	2d00      	cmp	r5, #0
 800da76:	da03      	bge.n	800da80 <_printf_i+0xd0>
 800da78:	232d      	movs	r3, #45	@ 0x2d
 800da7a:	426d      	negs	r5, r5
 800da7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da80:	230a      	movs	r3, #10
 800da82:	4859      	ldr	r0, [pc, #356]	@ (800dbe8 <_printf_i+0x238>)
 800da84:	e011      	b.n	800daaa <_printf_i+0xfa>
 800da86:	6821      	ldr	r1, [r4, #0]
 800da88:	6833      	ldr	r3, [r6, #0]
 800da8a:	0608      	lsls	r0, r1, #24
 800da8c:	f853 5b04 	ldr.w	r5, [r3], #4
 800da90:	d402      	bmi.n	800da98 <_printf_i+0xe8>
 800da92:	0649      	lsls	r1, r1, #25
 800da94:	bf48      	it	mi
 800da96:	b2ad      	uxthmi	r5, r5
 800da98:	2f6f      	cmp	r7, #111	@ 0x6f
 800da9a:	6033      	str	r3, [r6, #0]
 800da9c:	bf14      	ite	ne
 800da9e:	230a      	movne	r3, #10
 800daa0:	2308      	moveq	r3, #8
 800daa2:	4851      	ldr	r0, [pc, #324]	@ (800dbe8 <_printf_i+0x238>)
 800daa4:	2100      	movs	r1, #0
 800daa6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800daaa:	6866      	ldr	r6, [r4, #4]
 800daac:	2e00      	cmp	r6, #0
 800daae:	bfa8      	it	ge
 800dab0:	6821      	ldrge	r1, [r4, #0]
 800dab2:	60a6      	str	r6, [r4, #8]
 800dab4:	bfa4      	itt	ge
 800dab6:	f021 0104 	bicge.w	r1, r1, #4
 800daba:	6021      	strge	r1, [r4, #0]
 800dabc:	b90d      	cbnz	r5, 800dac2 <_printf_i+0x112>
 800dabe:	2e00      	cmp	r6, #0
 800dac0:	d04b      	beq.n	800db5a <_printf_i+0x1aa>
 800dac2:	4616      	mov	r6, r2
 800dac4:	fbb5 f1f3 	udiv	r1, r5, r3
 800dac8:	fb03 5711 	mls	r7, r3, r1, r5
 800dacc:	5dc7      	ldrb	r7, [r0, r7]
 800dace:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dad2:	462f      	mov	r7, r5
 800dad4:	42bb      	cmp	r3, r7
 800dad6:	460d      	mov	r5, r1
 800dad8:	d9f4      	bls.n	800dac4 <_printf_i+0x114>
 800dada:	2b08      	cmp	r3, #8
 800dadc:	d10b      	bne.n	800daf6 <_printf_i+0x146>
 800dade:	6823      	ldr	r3, [r4, #0]
 800dae0:	07df      	lsls	r7, r3, #31
 800dae2:	d508      	bpl.n	800daf6 <_printf_i+0x146>
 800dae4:	6923      	ldr	r3, [r4, #16]
 800dae6:	6861      	ldr	r1, [r4, #4]
 800dae8:	4299      	cmp	r1, r3
 800daea:	bfde      	ittt	le
 800daec:	2330      	movle	r3, #48	@ 0x30
 800daee:	f806 3c01 	strble.w	r3, [r6, #-1]
 800daf2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800daf6:	1b92      	subs	r2, r2, r6
 800daf8:	6122      	str	r2, [r4, #16]
 800dafa:	464b      	mov	r3, r9
 800dafc:	4621      	mov	r1, r4
 800dafe:	4640      	mov	r0, r8
 800db00:	f8cd a000 	str.w	sl, [sp]
 800db04:	aa03      	add	r2, sp, #12
 800db06:	f7ff fee1 	bl	800d8cc <_printf_common>
 800db0a:	3001      	adds	r0, #1
 800db0c:	d14a      	bne.n	800dba4 <_printf_i+0x1f4>
 800db0e:	f04f 30ff 	mov.w	r0, #4294967295
 800db12:	b004      	add	sp, #16
 800db14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db18:	6823      	ldr	r3, [r4, #0]
 800db1a:	f043 0320 	orr.w	r3, r3, #32
 800db1e:	6023      	str	r3, [r4, #0]
 800db20:	2778      	movs	r7, #120	@ 0x78
 800db22:	4832      	ldr	r0, [pc, #200]	@ (800dbec <_printf_i+0x23c>)
 800db24:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800db28:	6823      	ldr	r3, [r4, #0]
 800db2a:	6831      	ldr	r1, [r6, #0]
 800db2c:	061f      	lsls	r7, r3, #24
 800db2e:	f851 5b04 	ldr.w	r5, [r1], #4
 800db32:	d402      	bmi.n	800db3a <_printf_i+0x18a>
 800db34:	065f      	lsls	r7, r3, #25
 800db36:	bf48      	it	mi
 800db38:	b2ad      	uxthmi	r5, r5
 800db3a:	6031      	str	r1, [r6, #0]
 800db3c:	07d9      	lsls	r1, r3, #31
 800db3e:	bf44      	itt	mi
 800db40:	f043 0320 	orrmi.w	r3, r3, #32
 800db44:	6023      	strmi	r3, [r4, #0]
 800db46:	b11d      	cbz	r5, 800db50 <_printf_i+0x1a0>
 800db48:	2310      	movs	r3, #16
 800db4a:	e7ab      	b.n	800daa4 <_printf_i+0xf4>
 800db4c:	4826      	ldr	r0, [pc, #152]	@ (800dbe8 <_printf_i+0x238>)
 800db4e:	e7e9      	b.n	800db24 <_printf_i+0x174>
 800db50:	6823      	ldr	r3, [r4, #0]
 800db52:	f023 0320 	bic.w	r3, r3, #32
 800db56:	6023      	str	r3, [r4, #0]
 800db58:	e7f6      	b.n	800db48 <_printf_i+0x198>
 800db5a:	4616      	mov	r6, r2
 800db5c:	e7bd      	b.n	800dada <_printf_i+0x12a>
 800db5e:	6833      	ldr	r3, [r6, #0]
 800db60:	6825      	ldr	r5, [r4, #0]
 800db62:	1d18      	adds	r0, r3, #4
 800db64:	6961      	ldr	r1, [r4, #20]
 800db66:	6030      	str	r0, [r6, #0]
 800db68:	062e      	lsls	r6, r5, #24
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	d501      	bpl.n	800db72 <_printf_i+0x1c2>
 800db6e:	6019      	str	r1, [r3, #0]
 800db70:	e002      	b.n	800db78 <_printf_i+0x1c8>
 800db72:	0668      	lsls	r0, r5, #25
 800db74:	d5fb      	bpl.n	800db6e <_printf_i+0x1be>
 800db76:	8019      	strh	r1, [r3, #0]
 800db78:	2300      	movs	r3, #0
 800db7a:	4616      	mov	r6, r2
 800db7c:	6123      	str	r3, [r4, #16]
 800db7e:	e7bc      	b.n	800dafa <_printf_i+0x14a>
 800db80:	6833      	ldr	r3, [r6, #0]
 800db82:	2100      	movs	r1, #0
 800db84:	1d1a      	adds	r2, r3, #4
 800db86:	6032      	str	r2, [r6, #0]
 800db88:	681e      	ldr	r6, [r3, #0]
 800db8a:	6862      	ldr	r2, [r4, #4]
 800db8c:	4630      	mov	r0, r6
 800db8e:	f000 f8e7 	bl	800dd60 <memchr>
 800db92:	b108      	cbz	r0, 800db98 <_printf_i+0x1e8>
 800db94:	1b80      	subs	r0, r0, r6
 800db96:	6060      	str	r0, [r4, #4]
 800db98:	6863      	ldr	r3, [r4, #4]
 800db9a:	6123      	str	r3, [r4, #16]
 800db9c:	2300      	movs	r3, #0
 800db9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dba2:	e7aa      	b.n	800dafa <_printf_i+0x14a>
 800dba4:	4632      	mov	r2, r6
 800dba6:	4649      	mov	r1, r9
 800dba8:	4640      	mov	r0, r8
 800dbaa:	6923      	ldr	r3, [r4, #16]
 800dbac:	47d0      	blx	sl
 800dbae:	3001      	adds	r0, #1
 800dbb0:	d0ad      	beq.n	800db0e <_printf_i+0x15e>
 800dbb2:	6823      	ldr	r3, [r4, #0]
 800dbb4:	079b      	lsls	r3, r3, #30
 800dbb6:	d413      	bmi.n	800dbe0 <_printf_i+0x230>
 800dbb8:	68e0      	ldr	r0, [r4, #12]
 800dbba:	9b03      	ldr	r3, [sp, #12]
 800dbbc:	4298      	cmp	r0, r3
 800dbbe:	bfb8      	it	lt
 800dbc0:	4618      	movlt	r0, r3
 800dbc2:	e7a6      	b.n	800db12 <_printf_i+0x162>
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	4632      	mov	r2, r6
 800dbc8:	4649      	mov	r1, r9
 800dbca:	4640      	mov	r0, r8
 800dbcc:	47d0      	blx	sl
 800dbce:	3001      	adds	r0, #1
 800dbd0:	d09d      	beq.n	800db0e <_printf_i+0x15e>
 800dbd2:	3501      	adds	r5, #1
 800dbd4:	68e3      	ldr	r3, [r4, #12]
 800dbd6:	9903      	ldr	r1, [sp, #12]
 800dbd8:	1a5b      	subs	r3, r3, r1
 800dbda:	42ab      	cmp	r3, r5
 800dbdc:	dcf2      	bgt.n	800dbc4 <_printf_i+0x214>
 800dbde:	e7eb      	b.n	800dbb8 <_printf_i+0x208>
 800dbe0:	2500      	movs	r5, #0
 800dbe2:	f104 0619 	add.w	r6, r4, #25
 800dbe6:	e7f5      	b.n	800dbd4 <_printf_i+0x224>
 800dbe8:	0800e9c1 	.word	0x0800e9c1
 800dbec:	0800e9d2 	.word	0x0800e9d2

0800dbf0 <__sflush_r>:
 800dbf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbf6:	0716      	lsls	r6, r2, #28
 800dbf8:	4605      	mov	r5, r0
 800dbfa:	460c      	mov	r4, r1
 800dbfc:	d454      	bmi.n	800dca8 <__sflush_r+0xb8>
 800dbfe:	684b      	ldr	r3, [r1, #4]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	dc02      	bgt.n	800dc0a <__sflush_r+0x1a>
 800dc04:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	dd48      	ble.n	800dc9c <__sflush_r+0xac>
 800dc0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dc0c:	2e00      	cmp	r6, #0
 800dc0e:	d045      	beq.n	800dc9c <__sflush_r+0xac>
 800dc10:	2300      	movs	r3, #0
 800dc12:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dc16:	682f      	ldr	r7, [r5, #0]
 800dc18:	6a21      	ldr	r1, [r4, #32]
 800dc1a:	602b      	str	r3, [r5, #0]
 800dc1c:	d030      	beq.n	800dc80 <__sflush_r+0x90>
 800dc1e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dc20:	89a3      	ldrh	r3, [r4, #12]
 800dc22:	0759      	lsls	r1, r3, #29
 800dc24:	d505      	bpl.n	800dc32 <__sflush_r+0x42>
 800dc26:	6863      	ldr	r3, [r4, #4]
 800dc28:	1ad2      	subs	r2, r2, r3
 800dc2a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dc2c:	b10b      	cbz	r3, 800dc32 <__sflush_r+0x42>
 800dc2e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dc30:	1ad2      	subs	r2, r2, r3
 800dc32:	2300      	movs	r3, #0
 800dc34:	4628      	mov	r0, r5
 800dc36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dc38:	6a21      	ldr	r1, [r4, #32]
 800dc3a:	47b0      	blx	r6
 800dc3c:	1c43      	adds	r3, r0, #1
 800dc3e:	89a3      	ldrh	r3, [r4, #12]
 800dc40:	d106      	bne.n	800dc50 <__sflush_r+0x60>
 800dc42:	6829      	ldr	r1, [r5, #0]
 800dc44:	291d      	cmp	r1, #29
 800dc46:	d82b      	bhi.n	800dca0 <__sflush_r+0xb0>
 800dc48:	4a28      	ldr	r2, [pc, #160]	@ (800dcec <__sflush_r+0xfc>)
 800dc4a:	410a      	asrs	r2, r1
 800dc4c:	07d6      	lsls	r6, r2, #31
 800dc4e:	d427      	bmi.n	800dca0 <__sflush_r+0xb0>
 800dc50:	2200      	movs	r2, #0
 800dc52:	6062      	str	r2, [r4, #4]
 800dc54:	6922      	ldr	r2, [r4, #16]
 800dc56:	04d9      	lsls	r1, r3, #19
 800dc58:	6022      	str	r2, [r4, #0]
 800dc5a:	d504      	bpl.n	800dc66 <__sflush_r+0x76>
 800dc5c:	1c42      	adds	r2, r0, #1
 800dc5e:	d101      	bne.n	800dc64 <__sflush_r+0x74>
 800dc60:	682b      	ldr	r3, [r5, #0]
 800dc62:	b903      	cbnz	r3, 800dc66 <__sflush_r+0x76>
 800dc64:	6560      	str	r0, [r4, #84]	@ 0x54
 800dc66:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc68:	602f      	str	r7, [r5, #0]
 800dc6a:	b1b9      	cbz	r1, 800dc9c <__sflush_r+0xac>
 800dc6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc70:	4299      	cmp	r1, r3
 800dc72:	d002      	beq.n	800dc7a <__sflush_r+0x8a>
 800dc74:	4628      	mov	r0, r5
 800dc76:	f7fe fbdd 	bl	800c434 <_free_r>
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	6363      	str	r3, [r4, #52]	@ 0x34
 800dc7e:	e00d      	b.n	800dc9c <__sflush_r+0xac>
 800dc80:	2301      	movs	r3, #1
 800dc82:	4628      	mov	r0, r5
 800dc84:	47b0      	blx	r6
 800dc86:	4602      	mov	r2, r0
 800dc88:	1c50      	adds	r0, r2, #1
 800dc8a:	d1c9      	bne.n	800dc20 <__sflush_r+0x30>
 800dc8c:	682b      	ldr	r3, [r5, #0]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d0c6      	beq.n	800dc20 <__sflush_r+0x30>
 800dc92:	2b1d      	cmp	r3, #29
 800dc94:	d001      	beq.n	800dc9a <__sflush_r+0xaa>
 800dc96:	2b16      	cmp	r3, #22
 800dc98:	d11d      	bne.n	800dcd6 <__sflush_r+0xe6>
 800dc9a:	602f      	str	r7, [r5, #0]
 800dc9c:	2000      	movs	r0, #0
 800dc9e:	e021      	b.n	800dce4 <__sflush_r+0xf4>
 800dca0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dca4:	b21b      	sxth	r3, r3
 800dca6:	e01a      	b.n	800dcde <__sflush_r+0xee>
 800dca8:	690f      	ldr	r7, [r1, #16]
 800dcaa:	2f00      	cmp	r7, #0
 800dcac:	d0f6      	beq.n	800dc9c <__sflush_r+0xac>
 800dcae:	0793      	lsls	r3, r2, #30
 800dcb0:	bf18      	it	ne
 800dcb2:	2300      	movne	r3, #0
 800dcb4:	680e      	ldr	r6, [r1, #0]
 800dcb6:	bf08      	it	eq
 800dcb8:	694b      	ldreq	r3, [r1, #20]
 800dcba:	1bf6      	subs	r6, r6, r7
 800dcbc:	600f      	str	r7, [r1, #0]
 800dcbe:	608b      	str	r3, [r1, #8]
 800dcc0:	2e00      	cmp	r6, #0
 800dcc2:	ddeb      	ble.n	800dc9c <__sflush_r+0xac>
 800dcc4:	4633      	mov	r3, r6
 800dcc6:	463a      	mov	r2, r7
 800dcc8:	4628      	mov	r0, r5
 800dcca:	6a21      	ldr	r1, [r4, #32]
 800dccc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800dcd0:	47e0      	blx	ip
 800dcd2:	2800      	cmp	r0, #0
 800dcd4:	dc07      	bgt.n	800dce6 <__sflush_r+0xf6>
 800dcd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dcde:	f04f 30ff 	mov.w	r0, #4294967295
 800dce2:	81a3      	strh	r3, [r4, #12]
 800dce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dce6:	4407      	add	r7, r0
 800dce8:	1a36      	subs	r6, r6, r0
 800dcea:	e7e9      	b.n	800dcc0 <__sflush_r+0xd0>
 800dcec:	dfbffffe 	.word	0xdfbffffe

0800dcf0 <_fflush_r>:
 800dcf0:	b538      	push	{r3, r4, r5, lr}
 800dcf2:	690b      	ldr	r3, [r1, #16]
 800dcf4:	4605      	mov	r5, r0
 800dcf6:	460c      	mov	r4, r1
 800dcf8:	b913      	cbnz	r3, 800dd00 <_fflush_r+0x10>
 800dcfa:	2500      	movs	r5, #0
 800dcfc:	4628      	mov	r0, r5
 800dcfe:	bd38      	pop	{r3, r4, r5, pc}
 800dd00:	b118      	cbz	r0, 800dd0a <_fflush_r+0x1a>
 800dd02:	6a03      	ldr	r3, [r0, #32]
 800dd04:	b90b      	cbnz	r3, 800dd0a <_fflush_r+0x1a>
 800dd06:	f7fe f9ef 	bl	800c0e8 <__sinit>
 800dd0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d0f3      	beq.n	800dcfa <_fflush_r+0xa>
 800dd12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dd14:	07d0      	lsls	r0, r2, #31
 800dd16:	d404      	bmi.n	800dd22 <_fflush_r+0x32>
 800dd18:	0599      	lsls	r1, r3, #22
 800dd1a:	d402      	bmi.n	800dd22 <_fflush_r+0x32>
 800dd1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd1e:	f7fe fb66 	bl	800c3ee <__retarget_lock_acquire_recursive>
 800dd22:	4628      	mov	r0, r5
 800dd24:	4621      	mov	r1, r4
 800dd26:	f7ff ff63 	bl	800dbf0 <__sflush_r>
 800dd2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dd2c:	4605      	mov	r5, r0
 800dd2e:	07da      	lsls	r2, r3, #31
 800dd30:	d4e4      	bmi.n	800dcfc <_fflush_r+0xc>
 800dd32:	89a3      	ldrh	r3, [r4, #12]
 800dd34:	059b      	lsls	r3, r3, #22
 800dd36:	d4e1      	bmi.n	800dcfc <_fflush_r+0xc>
 800dd38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd3a:	f7fe fb59 	bl	800c3f0 <__retarget_lock_release_recursive>
 800dd3e:	e7dd      	b.n	800dcfc <_fflush_r+0xc>

0800dd40 <_sbrk_r>:
 800dd40:	b538      	push	{r3, r4, r5, lr}
 800dd42:	2300      	movs	r3, #0
 800dd44:	4d05      	ldr	r5, [pc, #20]	@ (800dd5c <_sbrk_r+0x1c>)
 800dd46:	4604      	mov	r4, r0
 800dd48:	4608      	mov	r0, r1
 800dd4a:	602b      	str	r3, [r5, #0]
 800dd4c:	f7f8 f92e 	bl	8005fac <_sbrk>
 800dd50:	1c43      	adds	r3, r0, #1
 800dd52:	d102      	bne.n	800dd5a <_sbrk_r+0x1a>
 800dd54:	682b      	ldr	r3, [r5, #0]
 800dd56:	b103      	cbz	r3, 800dd5a <_sbrk_r+0x1a>
 800dd58:	6023      	str	r3, [r4, #0]
 800dd5a:	bd38      	pop	{r3, r4, r5, pc}
 800dd5c:	20001c10 	.word	0x20001c10

0800dd60 <memchr>:
 800dd60:	4603      	mov	r3, r0
 800dd62:	b510      	push	{r4, lr}
 800dd64:	b2c9      	uxtb	r1, r1
 800dd66:	4402      	add	r2, r0
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	d101      	bne.n	800dd72 <memchr+0x12>
 800dd6e:	2000      	movs	r0, #0
 800dd70:	e003      	b.n	800dd7a <memchr+0x1a>
 800dd72:	7804      	ldrb	r4, [r0, #0]
 800dd74:	3301      	adds	r3, #1
 800dd76:	428c      	cmp	r4, r1
 800dd78:	d1f6      	bne.n	800dd68 <memchr+0x8>
 800dd7a:	bd10      	pop	{r4, pc}

0800dd7c <__assert_func>:
 800dd7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd7e:	4614      	mov	r4, r2
 800dd80:	461a      	mov	r2, r3
 800dd82:	4b09      	ldr	r3, [pc, #36]	@ (800dda8 <__assert_func+0x2c>)
 800dd84:	4605      	mov	r5, r0
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	68d8      	ldr	r0, [r3, #12]
 800dd8a:	b954      	cbnz	r4, 800dda2 <__assert_func+0x26>
 800dd8c:	4b07      	ldr	r3, [pc, #28]	@ (800ddac <__assert_func+0x30>)
 800dd8e:	461c      	mov	r4, r3
 800dd90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dd94:	9100      	str	r1, [sp, #0]
 800dd96:	462b      	mov	r3, r5
 800dd98:	4905      	ldr	r1, [pc, #20]	@ (800ddb0 <__assert_func+0x34>)
 800dd9a:	f000 f857 	bl	800de4c <fiprintf>
 800dd9e:	f000 f867 	bl	800de70 <abort>
 800dda2:	4b04      	ldr	r3, [pc, #16]	@ (800ddb4 <__assert_func+0x38>)
 800dda4:	e7f4      	b.n	800dd90 <__assert_func+0x14>
 800dda6:	bf00      	nop
 800dda8:	20000308 	.word	0x20000308
 800ddac:	0800e5cd 	.word	0x0800e5cd
 800ddb0:	0800e9f0 	.word	0x0800e9f0
 800ddb4:	0800e9e3 	.word	0x0800e9e3

0800ddb8 <_calloc_r>:
 800ddb8:	b570      	push	{r4, r5, r6, lr}
 800ddba:	fba1 5402 	umull	r5, r4, r1, r2
 800ddbe:	b93c      	cbnz	r4, 800ddd0 <_calloc_r+0x18>
 800ddc0:	4629      	mov	r1, r5
 800ddc2:	f7fe fedb 	bl	800cb7c <_malloc_r>
 800ddc6:	4606      	mov	r6, r0
 800ddc8:	b928      	cbnz	r0, 800ddd6 <_calloc_r+0x1e>
 800ddca:	2600      	movs	r6, #0
 800ddcc:	4630      	mov	r0, r6
 800ddce:	bd70      	pop	{r4, r5, r6, pc}
 800ddd0:	220c      	movs	r2, #12
 800ddd2:	6002      	str	r2, [r0, #0]
 800ddd4:	e7f9      	b.n	800ddca <_calloc_r+0x12>
 800ddd6:	462a      	mov	r2, r5
 800ddd8:	4621      	mov	r1, r4
 800ddda:	f7fe fa51 	bl	800c280 <memset>
 800ddde:	e7f5      	b.n	800ddcc <_calloc_r+0x14>

0800dde0 <malloc>:
 800dde0:	4b02      	ldr	r3, [pc, #8]	@ (800ddec <malloc+0xc>)
 800dde2:	4601      	mov	r1, r0
 800dde4:	6818      	ldr	r0, [r3, #0]
 800dde6:	f7fe bec9 	b.w	800cb7c <_malloc_r>
 800ddea:	bf00      	nop
 800ddec:	20000308 	.word	0x20000308

0800ddf0 <_realloc_r>:
 800ddf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddf4:	4680      	mov	r8, r0
 800ddf6:	4615      	mov	r5, r2
 800ddf8:	460c      	mov	r4, r1
 800ddfa:	b921      	cbnz	r1, 800de06 <_realloc_r+0x16>
 800ddfc:	4611      	mov	r1, r2
 800ddfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de02:	f7fe bebb 	b.w	800cb7c <_malloc_r>
 800de06:	b92a      	cbnz	r2, 800de14 <_realloc_r+0x24>
 800de08:	f7fe fb14 	bl	800c434 <_free_r>
 800de0c:	2400      	movs	r4, #0
 800de0e:	4620      	mov	r0, r4
 800de10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de14:	f000 f833 	bl	800de7e <_malloc_usable_size_r>
 800de18:	4285      	cmp	r5, r0
 800de1a:	4606      	mov	r6, r0
 800de1c:	d802      	bhi.n	800de24 <_realloc_r+0x34>
 800de1e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800de22:	d8f4      	bhi.n	800de0e <_realloc_r+0x1e>
 800de24:	4629      	mov	r1, r5
 800de26:	4640      	mov	r0, r8
 800de28:	f7fe fea8 	bl	800cb7c <_malloc_r>
 800de2c:	4607      	mov	r7, r0
 800de2e:	2800      	cmp	r0, #0
 800de30:	d0ec      	beq.n	800de0c <_realloc_r+0x1c>
 800de32:	42b5      	cmp	r5, r6
 800de34:	462a      	mov	r2, r5
 800de36:	4621      	mov	r1, r4
 800de38:	bf28      	it	cs
 800de3a:	4632      	movcs	r2, r6
 800de3c:	f7fe fae1 	bl	800c402 <memcpy>
 800de40:	4621      	mov	r1, r4
 800de42:	4640      	mov	r0, r8
 800de44:	f7fe faf6 	bl	800c434 <_free_r>
 800de48:	463c      	mov	r4, r7
 800de4a:	e7e0      	b.n	800de0e <_realloc_r+0x1e>

0800de4c <fiprintf>:
 800de4c:	b40e      	push	{r1, r2, r3}
 800de4e:	b503      	push	{r0, r1, lr}
 800de50:	4601      	mov	r1, r0
 800de52:	ab03      	add	r3, sp, #12
 800de54:	4805      	ldr	r0, [pc, #20]	@ (800de6c <fiprintf+0x20>)
 800de56:	f853 2b04 	ldr.w	r2, [r3], #4
 800de5a:	6800      	ldr	r0, [r0, #0]
 800de5c:	9301      	str	r3, [sp, #4]
 800de5e:	f000 f83d 	bl	800dedc <_vfiprintf_r>
 800de62:	b002      	add	sp, #8
 800de64:	f85d eb04 	ldr.w	lr, [sp], #4
 800de68:	b003      	add	sp, #12
 800de6a:	4770      	bx	lr
 800de6c:	20000308 	.word	0x20000308

0800de70 <abort>:
 800de70:	2006      	movs	r0, #6
 800de72:	b508      	push	{r3, lr}
 800de74:	f000 fa06 	bl	800e284 <raise>
 800de78:	2001      	movs	r0, #1
 800de7a:	f7f8 f869 	bl	8005f50 <_exit>

0800de7e <_malloc_usable_size_r>:
 800de7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de82:	1f18      	subs	r0, r3, #4
 800de84:	2b00      	cmp	r3, #0
 800de86:	bfbc      	itt	lt
 800de88:	580b      	ldrlt	r3, [r1, r0]
 800de8a:	18c0      	addlt	r0, r0, r3
 800de8c:	4770      	bx	lr

0800de8e <__sfputc_r>:
 800de8e:	6893      	ldr	r3, [r2, #8]
 800de90:	b410      	push	{r4}
 800de92:	3b01      	subs	r3, #1
 800de94:	2b00      	cmp	r3, #0
 800de96:	6093      	str	r3, [r2, #8]
 800de98:	da07      	bge.n	800deaa <__sfputc_r+0x1c>
 800de9a:	6994      	ldr	r4, [r2, #24]
 800de9c:	42a3      	cmp	r3, r4
 800de9e:	db01      	blt.n	800dea4 <__sfputc_r+0x16>
 800dea0:	290a      	cmp	r1, #10
 800dea2:	d102      	bne.n	800deaa <__sfputc_r+0x1c>
 800dea4:	bc10      	pop	{r4}
 800dea6:	f000 b931 	b.w	800e10c <__swbuf_r>
 800deaa:	6813      	ldr	r3, [r2, #0]
 800deac:	1c58      	adds	r0, r3, #1
 800deae:	6010      	str	r0, [r2, #0]
 800deb0:	7019      	strb	r1, [r3, #0]
 800deb2:	4608      	mov	r0, r1
 800deb4:	bc10      	pop	{r4}
 800deb6:	4770      	bx	lr

0800deb8 <__sfputs_r>:
 800deb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deba:	4606      	mov	r6, r0
 800debc:	460f      	mov	r7, r1
 800debe:	4614      	mov	r4, r2
 800dec0:	18d5      	adds	r5, r2, r3
 800dec2:	42ac      	cmp	r4, r5
 800dec4:	d101      	bne.n	800deca <__sfputs_r+0x12>
 800dec6:	2000      	movs	r0, #0
 800dec8:	e007      	b.n	800deda <__sfputs_r+0x22>
 800deca:	463a      	mov	r2, r7
 800decc:	4630      	mov	r0, r6
 800dece:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ded2:	f7ff ffdc 	bl	800de8e <__sfputc_r>
 800ded6:	1c43      	adds	r3, r0, #1
 800ded8:	d1f3      	bne.n	800dec2 <__sfputs_r+0xa>
 800deda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dedc <_vfiprintf_r>:
 800dedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dee0:	460d      	mov	r5, r1
 800dee2:	4614      	mov	r4, r2
 800dee4:	4698      	mov	r8, r3
 800dee6:	4606      	mov	r6, r0
 800dee8:	b09d      	sub	sp, #116	@ 0x74
 800deea:	b118      	cbz	r0, 800def4 <_vfiprintf_r+0x18>
 800deec:	6a03      	ldr	r3, [r0, #32]
 800deee:	b90b      	cbnz	r3, 800def4 <_vfiprintf_r+0x18>
 800def0:	f7fe f8fa 	bl	800c0e8 <__sinit>
 800def4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800def6:	07d9      	lsls	r1, r3, #31
 800def8:	d405      	bmi.n	800df06 <_vfiprintf_r+0x2a>
 800defa:	89ab      	ldrh	r3, [r5, #12]
 800defc:	059a      	lsls	r2, r3, #22
 800defe:	d402      	bmi.n	800df06 <_vfiprintf_r+0x2a>
 800df00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df02:	f7fe fa74 	bl	800c3ee <__retarget_lock_acquire_recursive>
 800df06:	89ab      	ldrh	r3, [r5, #12]
 800df08:	071b      	lsls	r3, r3, #28
 800df0a:	d501      	bpl.n	800df10 <_vfiprintf_r+0x34>
 800df0c:	692b      	ldr	r3, [r5, #16]
 800df0e:	b99b      	cbnz	r3, 800df38 <_vfiprintf_r+0x5c>
 800df10:	4629      	mov	r1, r5
 800df12:	4630      	mov	r0, r6
 800df14:	f000 f938 	bl	800e188 <__swsetup_r>
 800df18:	b170      	cbz	r0, 800df38 <_vfiprintf_r+0x5c>
 800df1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df1c:	07dc      	lsls	r4, r3, #31
 800df1e:	d504      	bpl.n	800df2a <_vfiprintf_r+0x4e>
 800df20:	f04f 30ff 	mov.w	r0, #4294967295
 800df24:	b01d      	add	sp, #116	@ 0x74
 800df26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df2a:	89ab      	ldrh	r3, [r5, #12]
 800df2c:	0598      	lsls	r0, r3, #22
 800df2e:	d4f7      	bmi.n	800df20 <_vfiprintf_r+0x44>
 800df30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df32:	f7fe fa5d 	bl	800c3f0 <__retarget_lock_release_recursive>
 800df36:	e7f3      	b.n	800df20 <_vfiprintf_r+0x44>
 800df38:	2300      	movs	r3, #0
 800df3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800df3c:	2320      	movs	r3, #32
 800df3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800df42:	2330      	movs	r3, #48	@ 0x30
 800df44:	f04f 0901 	mov.w	r9, #1
 800df48:	f8cd 800c 	str.w	r8, [sp, #12]
 800df4c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800e0f8 <_vfiprintf_r+0x21c>
 800df50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800df54:	4623      	mov	r3, r4
 800df56:	469a      	mov	sl, r3
 800df58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df5c:	b10a      	cbz	r2, 800df62 <_vfiprintf_r+0x86>
 800df5e:	2a25      	cmp	r2, #37	@ 0x25
 800df60:	d1f9      	bne.n	800df56 <_vfiprintf_r+0x7a>
 800df62:	ebba 0b04 	subs.w	fp, sl, r4
 800df66:	d00b      	beq.n	800df80 <_vfiprintf_r+0xa4>
 800df68:	465b      	mov	r3, fp
 800df6a:	4622      	mov	r2, r4
 800df6c:	4629      	mov	r1, r5
 800df6e:	4630      	mov	r0, r6
 800df70:	f7ff ffa2 	bl	800deb8 <__sfputs_r>
 800df74:	3001      	adds	r0, #1
 800df76:	f000 80a7 	beq.w	800e0c8 <_vfiprintf_r+0x1ec>
 800df7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df7c:	445a      	add	r2, fp
 800df7e:	9209      	str	r2, [sp, #36]	@ 0x24
 800df80:	f89a 3000 	ldrb.w	r3, [sl]
 800df84:	2b00      	cmp	r3, #0
 800df86:	f000 809f 	beq.w	800e0c8 <_vfiprintf_r+0x1ec>
 800df8a:	2300      	movs	r3, #0
 800df8c:	f04f 32ff 	mov.w	r2, #4294967295
 800df90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df94:	f10a 0a01 	add.w	sl, sl, #1
 800df98:	9304      	str	r3, [sp, #16]
 800df9a:	9307      	str	r3, [sp, #28]
 800df9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dfa0:	931a      	str	r3, [sp, #104]	@ 0x68
 800dfa2:	4654      	mov	r4, sl
 800dfa4:	2205      	movs	r2, #5
 800dfa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfaa:	4853      	ldr	r0, [pc, #332]	@ (800e0f8 <_vfiprintf_r+0x21c>)
 800dfac:	f7ff fed8 	bl	800dd60 <memchr>
 800dfb0:	9a04      	ldr	r2, [sp, #16]
 800dfb2:	b9d8      	cbnz	r0, 800dfec <_vfiprintf_r+0x110>
 800dfb4:	06d1      	lsls	r1, r2, #27
 800dfb6:	bf44      	itt	mi
 800dfb8:	2320      	movmi	r3, #32
 800dfba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dfbe:	0713      	lsls	r3, r2, #28
 800dfc0:	bf44      	itt	mi
 800dfc2:	232b      	movmi	r3, #43	@ 0x2b
 800dfc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dfc8:	f89a 3000 	ldrb.w	r3, [sl]
 800dfcc:	2b2a      	cmp	r3, #42	@ 0x2a
 800dfce:	d015      	beq.n	800dffc <_vfiprintf_r+0x120>
 800dfd0:	4654      	mov	r4, sl
 800dfd2:	2000      	movs	r0, #0
 800dfd4:	f04f 0c0a 	mov.w	ip, #10
 800dfd8:	9a07      	ldr	r2, [sp, #28]
 800dfda:	4621      	mov	r1, r4
 800dfdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dfe0:	3b30      	subs	r3, #48	@ 0x30
 800dfe2:	2b09      	cmp	r3, #9
 800dfe4:	d94b      	bls.n	800e07e <_vfiprintf_r+0x1a2>
 800dfe6:	b1b0      	cbz	r0, 800e016 <_vfiprintf_r+0x13a>
 800dfe8:	9207      	str	r2, [sp, #28]
 800dfea:	e014      	b.n	800e016 <_vfiprintf_r+0x13a>
 800dfec:	eba0 0308 	sub.w	r3, r0, r8
 800dff0:	fa09 f303 	lsl.w	r3, r9, r3
 800dff4:	4313      	orrs	r3, r2
 800dff6:	46a2      	mov	sl, r4
 800dff8:	9304      	str	r3, [sp, #16]
 800dffa:	e7d2      	b.n	800dfa2 <_vfiprintf_r+0xc6>
 800dffc:	9b03      	ldr	r3, [sp, #12]
 800dffe:	1d19      	adds	r1, r3, #4
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	9103      	str	r1, [sp, #12]
 800e004:	2b00      	cmp	r3, #0
 800e006:	bfbb      	ittet	lt
 800e008:	425b      	neglt	r3, r3
 800e00a:	f042 0202 	orrlt.w	r2, r2, #2
 800e00e:	9307      	strge	r3, [sp, #28]
 800e010:	9307      	strlt	r3, [sp, #28]
 800e012:	bfb8      	it	lt
 800e014:	9204      	strlt	r2, [sp, #16]
 800e016:	7823      	ldrb	r3, [r4, #0]
 800e018:	2b2e      	cmp	r3, #46	@ 0x2e
 800e01a:	d10a      	bne.n	800e032 <_vfiprintf_r+0x156>
 800e01c:	7863      	ldrb	r3, [r4, #1]
 800e01e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e020:	d132      	bne.n	800e088 <_vfiprintf_r+0x1ac>
 800e022:	9b03      	ldr	r3, [sp, #12]
 800e024:	3402      	adds	r4, #2
 800e026:	1d1a      	adds	r2, r3, #4
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	9203      	str	r2, [sp, #12]
 800e02c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e030:	9305      	str	r3, [sp, #20]
 800e032:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800e0fc <_vfiprintf_r+0x220>
 800e036:	2203      	movs	r2, #3
 800e038:	4650      	mov	r0, sl
 800e03a:	7821      	ldrb	r1, [r4, #0]
 800e03c:	f7ff fe90 	bl	800dd60 <memchr>
 800e040:	b138      	cbz	r0, 800e052 <_vfiprintf_r+0x176>
 800e042:	2240      	movs	r2, #64	@ 0x40
 800e044:	9b04      	ldr	r3, [sp, #16]
 800e046:	eba0 000a 	sub.w	r0, r0, sl
 800e04a:	4082      	lsls	r2, r0
 800e04c:	4313      	orrs	r3, r2
 800e04e:	3401      	adds	r4, #1
 800e050:	9304      	str	r3, [sp, #16]
 800e052:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e056:	2206      	movs	r2, #6
 800e058:	4829      	ldr	r0, [pc, #164]	@ (800e100 <_vfiprintf_r+0x224>)
 800e05a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e05e:	f7ff fe7f 	bl	800dd60 <memchr>
 800e062:	2800      	cmp	r0, #0
 800e064:	d03f      	beq.n	800e0e6 <_vfiprintf_r+0x20a>
 800e066:	4b27      	ldr	r3, [pc, #156]	@ (800e104 <_vfiprintf_r+0x228>)
 800e068:	bb1b      	cbnz	r3, 800e0b2 <_vfiprintf_r+0x1d6>
 800e06a:	9b03      	ldr	r3, [sp, #12]
 800e06c:	3307      	adds	r3, #7
 800e06e:	f023 0307 	bic.w	r3, r3, #7
 800e072:	3308      	adds	r3, #8
 800e074:	9303      	str	r3, [sp, #12]
 800e076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e078:	443b      	add	r3, r7
 800e07a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e07c:	e76a      	b.n	800df54 <_vfiprintf_r+0x78>
 800e07e:	460c      	mov	r4, r1
 800e080:	2001      	movs	r0, #1
 800e082:	fb0c 3202 	mla	r2, ip, r2, r3
 800e086:	e7a8      	b.n	800dfda <_vfiprintf_r+0xfe>
 800e088:	2300      	movs	r3, #0
 800e08a:	f04f 0c0a 	mov.w	ip, #10
 800e08e:	4619      	mov	r1, r3
 800e090:	3401      	adds	r4, #1
 800e092:	9305      	str	r3, [sp, #20]
 800e094:	4620      	mov	r0, r4
 800e096:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e09a:	3a30      	subs	r2, #48	@ 0x30
 800e09c:	2a09      	cmp	r2, #9
 800e09e:	d903      	bls.n	800e0a8 <_vfiprintf_r+0x1cc>
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d0c6      	beq.n	800e032 <_vfiprintf_r+0x156>
 800e0a4:	9105      	str	r1, [sp, #20]
 800e0a6:	e7c4      	b.n	800e032 <_vfiprintf_r+0x156>
 800e0a8:	4604      	mov	r4, r0
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800e0b0:	e7f0      	b.n	800e094 <_vfiprintf_r+0x1b8>
 800e0b2:	ab03      	add	r3, sp, #12
 800e0b4:	9300      	str	r3, [sp, #0]
 800e0b6:	462a      	mov	r2, r5
 800e0b8:	4630      	mov	r0, r6
 800e0ba:	4b13      	ldr	r3, [pc, #76]	@ (800e108 <_vfiprintf_r+0x22c>)
 800e0bc:	a904      	add	r1, sp, #16
 800e0be:	f3af 8000 	nop.w
 800e0c2:	4607      	mov	r7, r0
 800e0c4:	1c78      	adds	r0, r7, #1
 800e0c6:	d1d6      	bne.n	800e076 <_vfiprintf_r+0x19a>
 800e0c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0ca:	07d9      	lsls	r1, r3, #31
 800e0cc:	d405      	bmi.n	800e0da <_vfiprintf_r+0x1fe>
 800e0ce:	89ab      	ldrh	r3, [r5, #12]
 800e0d0:	059a      	lsls	r2, r3, #22
 800e0d2:	d402      	bmi.n	800e0da <_vfiprintf_r+0x1fe>
 800e0d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0d6:	f7fe f98b 	bl	800c3f0 <__retarget_lock_release_recursive>
 800e0da:	89ab      	ldrh	r3, [r5, #12]
 800e0dc:	065b      	lsls	r3, r3, #25
 800e0de:	f53f af1f 	bmi.w	800df20 <_vfiprintf_r+0x44>
 800e0e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e0e4:	e71e      	b.n	800df24 <_vfiprintf_r+0x48>
 800e0e6:	ab03      	add	r3, sp, #12
 800e0e8:	9300      	str	r3, [sp, #0]
 800e0ea:	462a      	mov	r2, r5
 800e0ec:	4630      	mov	r0, r6
 800e0ee:	4b06      	ldr	r3, [pc, #24]	@ (800e108 <_vfiprintf_r+0x22c>)
 800e0f0:	a904      	add	r1, sp, #16
 800e0f2:	f7ff fc5d 	bl	800d9b0 <_printf_i>
 800e0f6:	e7e4      	b.n	800e0c2 <_vfiprintf_r+0x1e6>
 800e0f8:	0800e9b0 	.word	0x0800e9b0
 800e0fc:	0800e9b6 	.word	0x0800e9b6
 800e100:	0800e9ba 	.word	0x0800e9ba
 800e104:	00000000 	.word	0x00000000
 800e108:	0800deb9 	.word	0x0800deb9

0800e10c <__swbuf_r>:
 800e10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e10e:	460e      	mov	r6, r1
 800e110:	4614      	mov	r4, r2
 800e112:	4605      	mov	r5, r0
 800e114:	b118      	cbz	r0, 800e11e <__swbuf_r+0x12>
 800e116:	6a03      	ldr	r3, [r0, #32]
 800e118:	b90b      	cbnz	r3, 800e11e <__swbuf_r+0x12>
 800e11a:	f7fd ffe5 	bl	800c0e8 <__sinit>
 800e11e:	69a3      	ldr	r3, [r4, #24]
 800e120:	60a3      	str	r3, [r4, #8]
 800e122:	89a3      	ldrh	r3, [r4, #12]
 800e124:	071a      	lsls	r2, r3, #28
 800e126:	d501      	bpl.n	800e12c <__swbuf_r+0x20>
 800e128:	6923      	ldr	r3, [r4, #16]
 800e12a:	b943      	cbnz	r3, 800e13e <__swbuf_r+0x32>
 800e12c:	4621      	mov	r1, r4
 800e12e:	4628      	mov	r0, r5
 800e130:	f000 f82a 	bl	800e188 <__swsetup_r>
 800e134:	b118      	cbz	r0, 800e13e <__swbuf_r+0x32>
 800e136:	f04f 37ff 	mov.w	r7, #4294967295
 800e13a:	4638      	mov	r0, r7
 800e13c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e13e:	6823      	ldr	r3, [r4, #0]
 800e140:	6922      	ldr	r2, [r4, #16]
 800e142:	b2f6      	uxtb	r6, r6
 800e144:	1a98      	subs	r0, r3, r2
 800e146:	6963      	ldr	r3, [r4, #20]
 800e148:	4637      	mov	r7, r6
 800e14a:	4283      	cmp	r3, r0
 800e14c:	dc05      	bgt.n	800e15a <__swbuf_r+0x4e>
 800e14e:	4621      	mov	r1, r4
 800e150:	4628      	mov	r0, r5
 800e152:	f7ff fdcd 	bl	800dcf0 <_fflush_r>
 800e156:	2800      	cmp	r0, #0
 800e158:	d1ed      	bne.n	800e136 <__swbuf_r+0x2a>
 800e15a:	68a3      	ldr	r3, [r4, #8]
 800e15c:	3b01      	subs	r3, #1
 800e15e:	60a3      	str	r3, [r4, #8]
 800e160:	6823      	ldr	r3, [r4, #0]
 800e162:	1c5a      	adds	r2, r3, #1
 800e164:	6022      	str	r2, [r4, #0]
 800e166:	701e      	strb	r6, [r3, #0]
 800e168:	6962      	ldr	r2, [r4, #20]
 800e16a:	1c43      	adds	r3, r0, #1
 800e16c:	429a      	cmp	r2, r3
 800e16e:	d004      	beq.n	800e17a <__swbuf_r+0x6e>
 800e170:	89a3      	ldrh	r3, [r4, #12]
 800e172:	07db      	lsls	r3, r3, #31
 800e174:	d5e1      	bpl.n	800e13a <__swbuf_r+0x2e>
 800e176:	2e0a      	cmp	r6, #10
 800e178:	d1df      	bne.n	800e13a <__swbuf_r+0x2e>
 800e17a:	4621      	mov	r1, r4
 800e17c:	4628      	mov	r0, r5
 800e17e:	f7ff fdb7 	bl	800dcf0 <_fflush_r>
 800e182:	2800      	cmp	r0, #0
 800e184:	d0d9      	beq.n	800e13a <__swbuf_r+0x2e>
 800e186:	e7d6      	b.n	800e136 <__swbuf_r+0x2a>

0800e188 <__swsetup_r>:
 800e188:	b538      	push	{r3, r4, r5, lr}
 800e18a:	4b29      	ldr	r3, [pc, #164]	@ (800e230 <__swsetup_r+0xa8>)
 800e18c:	4605      	mov	r5, r0
 800e18e:	6818      	ldr	r0, [r3, #0]
 800e190:	460c      	mov	r4, r1
 800e192:	b118      	cbz	r0, 800e19c <__swsetup_r+0x14>
 800e194:	6a03      	ldr	r3, [r0, #32]
 800e196:	b90b      	cbnz	r3, 800e19c <__swsetup_r+0x14>
 800e198:	f7fd ffa6 	bl	800c0e8 <__sinit>
 800e19c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1a0:	0719      	lsls	r1, r3, #28
 800e1a2:	d422      	bmi.n	800e1ea <__swsetup_r+0x62>
 800e1a4:	06da      	lsls	r2, r3, #27
 800e1a6:	d407      	bmi.n	800e1b8 <__swsetup_r+0x30>
 800e1a8:	2209      	movs	r2, #9
 800e1aa:	602a      	str	r2, [r5, #0]
 800e1ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e1b4:	81a3      	strh	r3, [r4, #12]
 800e1b6:	e033      	b.n	800e220 <__swsetup_r+0x98>
 800e1b8:	0758      	lsls	r0, r3, #29
 800e1ba:	d512      	bpl.n	800e1e2 <__swsetup_r+0x5a>
 800e1bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e1be:	b141      	cbz	r1, 800e1d2 <__swsetup_r+0x4a>
 800e1c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e1c4:	4299      	cmp	r1, r3
 800e1c6:	d002      	beq.n	800e1ce <__swsetup_r+0x46>
 800e1c8:	4628      	mov	r0, r5
 800e1ca:	f7fe f933 	bl	800c434 <_free_r>
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	6363      	str	r3, [r4, #52]	@ 0x34
 800e1d2:	89a3      	ldrh	r3, [r4, #12]
 800e1d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e1d8:	81a3      	strh	r3, [r4, #12]
 800e1da:	2300      	movs	r3, #0
 800e1dc:	6063      	str	r3, [r4, #4]
 800e1de:	6923      	ldr	r3, [r4, #16]
 800e1e0:	6023      	str	r3, [r4, #0]
 800e1e2:	89a3      	ldrh	r3, [r4, #12]
 800e1e4:	f043 0308 	orr.w	r3, r3, #8
 800e1e8:	81a3      	strh	r3, [r4, #12]
 800e1ea:	6923      	ldr	r3, [r4, #16]
 800e1ec:	b94b      	cbnz	r3, 800e202 <__swsetup_r+0x7a>
 800e1ee:	89a3      	ldrh	r3, [r4, #12]
 800e1f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e1f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e1f8:	d003      	beq.n	800e202 <__swsetup_r+0x7a>
 800e1fa:	4621      	mov	r1, r4
 800e1fc:	4628      	mov	r0, r5
 800e1fe:	f000 f882 	bl	800e306 <__smakebuf_r>
 800e202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e206:	f013 0201 	ands.w	r2, r3, #1
 800e20a:	d00a      	beq.n	800e222 <__swsetup_r+0x9a>
 800e20c:	2200      	movs	r2, #0
 800e20e:	60a2      	str	r2, [r4, #8]
 800e210:	6962      	ldr	r2, [r4, #20]
 800e212:	4252      	negs	r2, r2
 800e214:	61a2      	str	r2, [r4, #24]
 800e216:	6922      	ldr	r2, [r4, #16]
 800e218:	b942      	cbnz	r2, 800e22c <__swsetup_r+0xa4>
 800e21a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e21e:	d1c5      	bne.n	800e1ac <__swsetup_r+0x24>
 800e220:	bd38      	pop	{r3, r4, r5, pc}
 800e222:	0799      	lsls	r1, r3, #30
 800e224:	bf58      	it	pl
 800e226:	6962      	ldrpl	r2, [r4, #20]
 800e228:	60a2      	str	r2, [r4, #8]
 800e22a:	e7f4      	b.n	800e216 <__swsetup_r+0x8e>
 800e22c:	2000      	movs	r0, #0
 800e22e:	e7f7      	b.n	800e220 <__swsetup_r+0x98>
 800e230:	20000308 	.word	0x20000308

0800e234 <_raise_r>:
 800e234:	291f      	cmp	r1, #31
 800e236:	b538      	push	{r3, r4, r5, lr}
 800e238:	4605      	mov	r5, r0
 800e23a:	460c      	mov	r4, r1
 800e23c:	d904      	bls.n	800e248 <_raise_r+0x14>
 800e23e:	2316      	movs	r3, #22
 800e240:	6003      	str	r3, [r0, #0]
 800e242:	f04f 30ff 	mov.w	r0, #4294967295
 800e246:	bd38      	pop	{r3, r4, r5, pc}
 800e248:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e24a:	b112      	cbz	r2, 800e252 <_raise_r+0x1e>
 800e24c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e250:	b94b      	cbnz	r3, 800e266 <_raise_r+0x32>
 800e252:	4628      	mov	r0, r5
 800e254:	f000 f830 	bl	800e2b8 <_getpid_r>
 800e258:	4622      	mov	r2, r4
 800e25a:	4601      	mov	r1, r0
 800e25c:	4628      	mov	r0, r5
 800e25e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e262:	f000 b817 	b.w	800e294 <_kill_r>
 800e266:	2b01      	cmp	r3, #1
 800e268:	d00a      	beq.n	800e280 <_raise_r+0x4c>
 800e26a:	1c59      	adds	r1, r3, #1
 800e26c:	d103      	bne.n	800e276 <_raise_r+0x42>
 800e26e:	2316      	movs	r3, #22
 800e270:	6003      	str	r3, [r0, #0]
 800e272:	2001      	movs	r0, #1
 800e274:	e7e7      	b.n	800e246 <_raise_r+0x12>
 800e276:	2100      	movs	r1, #0
 800e278:	4620      	mov	r0, r4
 800e27a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e27e:	4798      	blx	r3
 800e280:	2000      	movs	r0, #0
 800e282:	e7e0      	b.n	800e246 <_raise_r+0x12>

0800e284 <raise>:
 800e284:	4b02      	ldr	r3, [pc, #8]	@ (800e290 <raise+0xc>)
 800e286:	4601      	mov	r1, r0
 800e288:	6818      	ldr	r0, [r3, #0]
 800e28a:	f7ff bfd3 	b.w	800e234 <_raise_r>
 800e28e:	bf00      	nop
 800e290:	20000308 	.word	0x20000308

0800e294 <_kill_r>:
 800e294:	b538      	push	{r3, r4, r5, lr}
 800e296:	2300      	movs	r3, #0
 800e298:	4d06      	ldr	r5, [pc, #24]	@ (800e2b4 <_kill_r+0x20>)
 800e29a:	4604      	mov	r4, r0
 800e29c:	4608      	mov	r0, r1
 800e29e:	4611      	mov	r1, r2
 800e2a0:	602b      	str	r3, [r5, #0]
 800e2a2:	f7f7 fe4d 	bl	8005f40 <_kill>
 800e2a6:	1c43      	adds	r3, r0, #1
 800e2a8:	d102      	bne.n	800e2b0 <_kill_r+0x1c>
 800e2aa:	682b      	ldr	r3, [r5, #0]
 800e2ac:	b103      	cbz	r3, 800e2b0 <_kill_r+0x1c>
 800e2ae:	6023      	str	r3, [r4, #0]
 800e2b0:	bd38      	pop	{r3, r4, r5, pc}
 800e2b2:	bf00      	nop
 800e2b4:	20001c10 	.word	0x20001c10

0800e2b8 <_getpid_r>:
 800e2b8:	f7f7 be40 	b.w	8005f3c <_getpid>

0800e2bc <__swhatbuf_r>:
 800e2bc:	b570      	push	{r4, r5, r6, lr}
 800e2be:	460c      	mov	r4, r1
 800e2c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2c4:	4615      	mov	r5, r2
 800e2c6:	2900      	cmp	r1, #0
 800e2c8:	461e      	mov	r6, r3
 800e2ca:	b096      	sub	sp, #88	@ 0x58
 800e2cc:	da0c      	bge.n	800e2e8 <__swhatbuf_r+0x2c>
 800e2ce:	89a3      	ldrh	r3, [r4, #12]
 800e2d0:	2100      	movs	r1, #0
 800e2d2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e2d6:	bf14      	ite	ne
 800e2d8:	2340      	movne	r3, #64	@ 0x40
 800e2da:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e2de:	2000      	movs	r0, #0
 800e2e0:	6031      	str	r1, [r6, #0]
 800e2e2:	602b      	str	r3, [r5, #0]
 800e2e4:	b016      	add	sp, #88	@ 0x58
 800e2e6:	bd70      	pop	{r4, r5, r6, pc}
 800e2e8:	466a      	mov	r2, sp
 800e2ea:	f000 f849 	bl	800e380 <_fstat_r>
 800e2ee:	2800      	cmp	r0, #0
 800e2f0:	dbed      	blt.n	800e2ce <__swhatbuf_r+0x12>
 800e2f2:	9901      	ldr	r1, [sp, #4]
 800e2f4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e2f8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e2fc:	4259      	negs	r1, r3
 800e2fe:	4159      	adcs	r1, r3
 800e300:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e304:	e7eb      	b.n	800e2de <__swhatbuf_r+0x22>

0800e306 <__smakebuf_r>:
 800e306:	898b      	ldrh	r3, [r1, #12]
 800e308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e30a:	079d      	lsls	r5, r3, #30
 800e30c:	4606      	mov	r6, r0
 800e30e:	460c      	mov	r4, r1
 800e310:	d507      	bpl.n	800e322 <__smakebuf_r+0x1c>
 800e312:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e316:	6023      	str	r3, [r4, #0]
 800e318:	6123      	str	r3, [r4, #16]
 800e31a:	2301      	movs	r3, #1
 800e31c:	6163      	str	r3, [r4, #20]
 800e31e:	b003      	add	sp, #12
 800e320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e322:	466a      	mov	r2, sp
 800e324:	ab01      	add	r3, sp, #4
 800e326:	f7ff ffc9 	bl	800e2bc <__swhatbuf_r>
 800e32a:	9f00      	ldr	r7, [sp, #0]
 800e32c:	4605      	mov	r5, r0
 800e32e:	4639      	mov	r1, r7
 800e330:	4630      	mov	r0, r6
 800e332:	f7fe fc23 	bl	800cb7c <_malloc_r>
 800e336:	b948      	cbnz	r0, 800e34c <__smakebuf_r+0x46>
 800e338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e33c:	059a      	lsls	r2, r3, #22
 800e33e:	d4ee      	bmi.n	800e31e <__smakebuf_r+0x18>
 800e340:	f023 0303 	bic.w	r3, r3, #3
 800e344:	f043 0302 	orr.w	r3, r3, #2
 800e348:	81a3      	strh	r3, [r4, #12]
 800e34a:	e7e2      	b.n	800e312 <__smakebuf_r+0xc>
 800e34c:	89a3      	ldrh	r3, [r4, #12]
 800e34e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e356:	81a3      	strh	r3, [r4, #12]
 800e358:	9b01      	ldr	r3, [sp, #4]
 800e35a:	6020      	str	r0, [r4, #0]
 800e35c:	b15b      	cbz	r3, 800e376 <__smakebuf_r+0x70>
 800e35e:	4630      	mov	r0, r6
 800e360:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e364:	f000 f81e 	bl	800e3a4 <_isatty_r>
 800e368:	b128      	cbz	r0, 800e376 <__smakebuf_r+0x70>
 800e36a:	89a3      	ldrh	r3, [r4, #12]
 800e36c:	f023 0303 	bic.w	r3, r3, #3
 800e370:	f043 0301 	orr.w	r3, r3, #1
 800e374:	81a3      	strh	r3, [r4, #12]
 800e376:	89a3      	ldrh	r3, [r4, #12]
 800e378:	431d      	orrs	r5, r3
 800e37a:	81a5      	strh	r5, [r4, #12]
 800e37c:	e7cf      	b.n	800e31e <__smakebuf_r+0x18>
	...

0800e380 <_fstat_r>:
 800e380:	b538      	push	{r3, r4, r5, lr}
 800e382:	2300      	movs	r3, #0
 800e384:	4d06      	ldr	r5, [pc, #24]	@ (800e3a0 <_fstat_r+0x20>)
 800e386:	4604      	mov	r4, r0
 800e388:	4608      	mov	r0, r1
 800e38a:	4611      	mov	r1, r2
 800e38c:	602b      	str	r3, [r5, #0]
 800e38e:	f7f7 fe04 	bl	8005f9a <_fstat>
 800e392:	1c43      	adds	r3, r0, #1
 800e394:	d102      	bne.n	800e39c <_fstat_r+0x1c>
 800e396:	682b      	ldr	r3, [r5, #0]
 800e398:	b103      	cbz	r3, 800e39c <_fstat_r+0x1c>
 800e39a:	6023      	str	r3, [r4, #0]
 800e39c:	bd38      	pop	{r3, r4, r5, pc}
 800e39e:	bf00      	nop
 800e3a0:	20001c10 	.word	0x20001c10

0800e3a4 <_isatty_r>:
 800e3a4:	b538      	push	{r3, r4, r5, lr}
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	4d05      	ldr	r5, [pc, #20]	@ (800e3c0 <_isatty_r+0x1c>)
 800e3aa:	4604      	mov	r4, r0
 800e3ac:	4608      	mov	r0, r1
 800e3ae:	602b      	str	r3, [r5, #0]
 800e3b0:	f7f7 fdf8 	bl	8005fa4 <_isatty>
 800e3b4:	1c43      	adds	r3, r0, #1
 800e3b6:	d102      	bne.n	800e3be <_isatty_r+0x1a>
 800e3b8:	682b      	ldr	r3, [r5, #0]
 800e3ba:	b103      	cbz	r3, 800e3be <_isatty_r+0x1a>
 800e3bc:	6023      	str	r3, [r4, #0]
 800e3be:	bd38      	pop	{r3, r4, r5, pc}
 800e3c0:	20001c10 	.word	0x20001c10

0800e3c4 <_init>:
 800e3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3c6:	bf00      	nop
 800e3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3ca:	bc08      	pop	{r3}
 800e3cc:	469e      	mov	lr, r3
 800e3ce:	4770      	bx	lr

0800e3d0 <_fini>:
 800e3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3d2:	bf00      	nop
 800e3d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3d6:	bc08      	pop	{r3}
 800e3d8:	469e      	mov	lr, r3
 800e3da:	4770      	bx	lr
